/*

Bayside-Rolepay Gamemode

Nemesus.de

Selfmade Gamemode by Nemesus - Nemesus.de | Map by sHoOTi

Youtube: https://yt.nemesus.de

Discord: https://discord.nemesus.de

Aktuelle Weiterentwicklungs Informationen: https://nemesus.de

Credits 2011-2022

Nemesus - Script
sHoOTi - Map
[DT]Sniper - Kleinere Hilfen, Autohaus, UCP

Letztes Update: 13.11.2021

*/

//Pragmas
#pragma unused ret_memcpy

//Includes
#include <a_samp>
#include <a_http>
#include <dini>
#include <zcmd>
#include <streamer>
#include <colors>
#include <a_mysqlbayside>
#include <GVC>
#include <offs>
#include <anticleo>

#pragma tabsize 0

//Farben
#define Gelb 0xFFFF00FF
#define Gelb2 0xF5DEB3AA
#define Rot 0xFF2800FF
#define Blau 0x000FFFFF
#define Gruen 0x05FF00FF
#define Weiß 0xFAFAFAFF
#define Orange 0xFF9900AA
#define Admin 0xD7FF00FF
#define CNNFARBE 0xFFB400FF
#define SANIFARBE 0xAF0000FF
#define MSFARBE 0x00FFFFFF
#define CRIPFARBE 0x0000FF6F

//Einstellungen
#define DEBUG 1 //MYSQL Debug aktiviert oder deaktiviert.
#define NPCSS 1 //Alle NPCS/Bots aktivieren oder deaktivieren.
#if NPCSS==1
	#error "INFO: Die Bots können einen sehr hohen Ressourcen Verbrauch bewirken!" // Löschen sofern der Hinweis verstanden wurde.
#endif
#define SpeicherTimer 1 // SpeicherTimer alle 5 Minuten aktivieren oder deaktivieren.
#define DATENBANK 1 // Datenbank automatisch erstellen lassen?

#error "INFO: Das Script wurde von Nemesus erstellt -> Nemesus.de, Credits bitte nicht entfernen!" // Löschen sofern der Hinweis verstanden wurde.

//Pokersystem
#define POKERLAPS 52
#define TREFF 0b1
#define KARO 0b10
#define KOR 0b100
#define PIKK 0b1000
#define BACKGROUND Start3[playerid]
#define CARDSTEXT Start3[playerid] + PlayerText:1
#define HOLDSTEXT Start3[playerid] + PlayerText:6
#define WIN_TEXT Start3[playerid] + PlayerText:11
#define WINTEXT Start3[playerid] + PlayerText:12
#define BETCREDITTEXT Start3[playerid] + PlayerText:13
#define DEALSTEXT Start3[playerid] + PlayerText:14
#define ADDCOINSTEXT Start3[playerid] + PlayerText:15
#define EXITPOKER Start3[playerid] + PlayerText:16
#define BETTEXT Start3[playerid] + PlayerText:17
#define CHANGEBACKGROUND Start3[playerid] + PlayerText:18
#define SECOND_CLICKDEALTEXT 1
#define WAIT_CLICKDEALTEXT -1
#define HOLDON (false)
#define HOLDOFF (true)
#define FIRST_CLICKDEALTEXT 0

//Crashplayer
#define CrashPlayer(%0); SetPlayerAttachedObject(%0,0,%0,0);

//Helmsystem
#define SLOT 0

//Autopate
#define AutoHausZahl 9

//Ob jemand ein Knopf gedrückt hält
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

//Feuerwerk
#define MAX_FIREWORKS   64
#define MAX_HEIGHT      100
#define MIN_HEIGHT      20
#define MAX_SPREAD      10

//Admin Feuerpunch
#define FIRE_TIMER_INTERVAL 80
#define FIRE_POWER_SOUND 1039
#define FIRE_START_DIST 13.0
#define FIRE_FINAL_DIST 90.0
#define FIRE_NEXT_DIST 3.0
#define Explosion_Rad 5
#define Explosion_Type 1
#define PLAYER_DAMAGE_DIST 1.5
#define VEH_DAMAGE_DIST 4.0

//Fraktionsautohaus
#define FACTION_CAR_FILE                    ("Sonstiges/Fraktionsautos.cfg")
#define MAX_FACTION_CARS 					(20)
#define NEEDED_ADMINLEVEL                   (5)
#define MAX_FACTIONS                        (2)
#define MAX_BUY         					(10)

//Tazersystem
#define TAZE_WEAPON 23
#define TAZE_TIMER 9000
#define TAZE_SPARK 18717
#define TAZE_DESTROY 1250
#define TAZE_LOSEHP 10.0

//Tanksystem
#define TANK_ZEIT 30000

//AFK System
#define MAX_DESKTOP_TIME    900  //in Sekunden

//Für den /spec Befehl
#define ADMIN_SPEC_TYPE_NONE 0
#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2

//Blitzer
#define CAMERA_FLASH_TIME 1200 // Blitzer Blitz Zeit
#define CAMERA_LIMIT 30 // Maximale Anzahl an Blitzer

//Nägelbänder
#define MAX_SPIKESTRIPS 10 //Maximale Anzahl an Nagelbänder

//Autoradio
#define USE_TEXTDRAW_SET 2
#define MAX_RADIO_STATIONS 10
#define TEXTDRAW_DISAPPEAR_TIME 3135
#define NAME_SIZE 30
#define LINK_SIZE 70

#define GetVehicleRadioStation(%1) v_VehicleInfo[%1][RadioPlaying]

//24/7 Raub
#define robumont 12653

//Feuersystem
#define MAX_FLAMES 25
#define BurnOthers
#define FLAME_ZONE 					1.2
#define ONFOOT_RADIUS				1.5
#define PISSING_WAY					2.0
#define CAR_RADIUS					8.0
#define Z_DIFFERENCE				2.5
#define EXTINGUISH_TIME_VEHICLE		2
#define EXTINGUISH_TIME_ONFOOT		3
#define EXTINGUISH_TIME_PEEING		6
#define EXTINGUISH_TIME_PLAYER		4
#define FIRE_OBJECT_SLOT   			5

//Pissanimation
#define SPECIAL_ACTION_PISSING 68

//Slotmachine
#define WIN_MULTIPLIER_GLOBAL 0.3

#define MIN_Bet 5
#define MAX_Bet 50

#define Bet_STEP 5

#define G_STATE_NOT_GAMBLING    0
#define G_STATE_READY           1
#define G_STATE_GAMBLING        2
#define G_STATE_DISPLAY         3
#define G_STATE_PLAY_AGAIN      4

#define DISPLAY_TIME 750
#define GAMBLE_TIMER 101

//AntiCheat
#define MAX_IP_WARNS 3 //Maximale IPs von anderen Servern die der Spieler schreiben darf
#define MAX_CLASS 60
#define IP_LIMIT 3 // Maximale Connections von einer IP
#define Time_Limit 3500 // Die Zeit zwischen den Connects einer IP
#define MAX_SPEED_VEHICLE 380.0
#define MAX_CHECKS 3
#define aSpeed(%0,%1,%2,%3,%4) floatround(floatsqroot((%4)?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1))*%3*1.6)

//Pragma Tabsize
#pragma tabsize 0

//Fahrzeug Menge
#define CAR_AMOUNT 900
#undef MAX_VEHICLES
#define MAX_VEHICLES 900

//Slotmachine
#define DIALOG_STARTGAMBLE	18893

//Überprüfen ob eine Taste gedrückt wird
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

//Poker
#define MIN_BET	5
#define MAX_BET	100
#define FIRST_DIVID 	(false)
#define SECOND_DIVID	(true)
#define HOLDON  	(false)
#define HOLDOFF	(true)

//Dialoge
#define REGISTER 1
#define LOGIN 2
#define REGELN 3
#define TUTORIAL1 4
#define TUTORIAL2 5
#define ERSTELLUNG 6
#define GESCHLECHT 7
#define TUTORIALFRAGE 8
#define HAUSERSTELLEN 9
#define HAUSERSTELLEN2 10
#define HAUSERSTELLEN3 11
#define HAUSERSTELLEN4 12
#define HAUSERSTELLEN5 13
#define HAUSERSTELLEN6 14
#define HAUSERSTELLEN7 15
#define HAUSHELP 16
#define ALTERSFRAGE 17
#define TUTORIAL3 18
#define TUTORIAL4 19
#define TUTORIAL5 20
#define TUTORIAL6 21
#define GUNS2 22
#define GUNS3 23
#define GUNS4 24
#define PERSO1 25
#define PERSO2 26
#define PERSO3 27
#define PERSO4 28
#define HELP1 29
#define HELP2 30
#define CODES 31
#define LINKHELP 32
#define FAHRZEUG 33
#define FAHRZEUG2 34
#define FAHRZEUG3 35
#define FAHRZEUG4 36
#define FAHRZEUG5 37
#define FAHRZEUG6 38
#define KLEIDUNG1 39
#define KLEIDUNG2 40
#define KLEIDUNG3 41
#define DIALOG_OBSPD 42
#define ANWESEND 43
// Frei
// Frei
// Frei
#define HANDY1 47
#define SUPPORT1 48
#define RADIOHELP 49
#define RADIOHELP2 50
#define PFERDERENNEN 51
#define WETTEN1 52
#define WETTEN2 53
#define PFERDEHELP 54
#define AMMUNATION 55
#define AMMUNATIONP 56
#define AMMUNATIONM 57
#define AMMUNATIONG 58
#define AMMUNATIONS 59
#define AMMUNATIONA 60
#define HANDY2 61
#define HANDY3 62
#define HANDY4 63
#define HANDY5 64
#define HANDY6 65
#define HANDY7 66
#define HANDY8 67
#define BSN 68
#define SHOP 69
#define MP3 70
#define REGELNN 71
#define VERSICHERUNG 72
#define LIZENSEN 73
#define JOBS 74
#define CITYHALL 75
#define MECHATRONIKER 76
#define DJ 77
#define SPEDITION 78
#define FFW 79
#define FARMER 80
#define DETEKTIV 81
#define DROGEN 82
#define WAFFEN 83
#define DJSONGS 84
#define DJHELP 85
#define WGET 86
#define WGIVE 87
#define WAFFENHELP 88
#define FEUERWEHRA 89
#define FEUERHELP 90
#define SERVICE 91
#define WAFFENAUTOMAT 92
#define FLUGTICKET 93
#define ADMINISTRATION 94
#define GEWORBEN 95
#define EINLEITUNGA 96
#define JACK1 97
#define HELM1 98
#define HELM2 99
#define DRIFT 100
#define DRIFT2 101
#define DRIFT3 102
#define DRIFTHELP 103
#define SCHEINE 104
#define FSCHEIN1 105
#define FSCHEIN2 106
#define FSCHEIN3 107
#define FSCHEIN4 108
#define FSCHEIN5 109
#define FSCHEIN6 110
#define FSCHEIN7 111
#define FSCHEIN8 112
#define FSCHEIN9 113
#define WSCHEIN1 114
#define WSCHEIN2 115
#define WSCHEIN3 116
#define WSCHEIN4 117
#define WSCHEIN5 118
#define WSCHEIN6 119
#define WSCHEIN7 120
#define WSCHEIN8 121
#define WSCHEIN9 122
#define WSCHEIN10 123
#define WSCHEIN11 124
#define WSCHEIN12 125
#define WSCHEIN13 126
#define MSCHEIN1 127
#define MSCHEIN2 128
#define MSCHEIN3 129
#define MSCHEIN4 130
#define MSCHEIN5 131
#define MSCHEIN6 132
#define PREMIUM1 133
#define PREMIUM2 134
#define MSCHEIN7 135
#define MSCHEIN8 136
#define MSCHEIN9 137
#define MSCHEIN10 138
#define SONNENBRILLEN 139
#define SONNENBRILLEN2 140
#define TANKEN1 141
#define MISSION1 142
#define HEBE1 143
#define HEBE2 144
#define MHELP 145
#define KICK 146
#define BANN 147
#define SUPPORT2 148
#define SUPPORTTICKETS 149
#define SUPPORT3 150
#define SUPPORT4 151
#define BANK1 152
#define BANK2 153
#define BANK3 154
#define BANK4 155
#define BANK5 156
#define BANK6 157
#define BANK7 158
#define PIN 159
#define BANK8 160
#define BANK9 161
#define BANK10 162
#define ATM3 163
#define ATM6 164
#define ATM7 165
#define ATMU 166
#define PIN2 167
#define DJSONGS2 168
#define HAUSMIETER 169
#define HAUSHELP2 170
#define NUTTE 171
#define KONDOM 172
#define SCHWARZMARKT 173
#define SCHWARZMARKT2 174
#define PAINTBALL 175
#define PAINTBALL2 176
#define PAINTBALL3 177
#define PAINTBALL4 178
#define PAINTBALLHELP 179
#define FARMERHELP 180
#define AUTOSCOOTER 181
#define PRODUKTE 182
#define DIALOG_AFK 183
#define DIALOG_AFK2 184
#define DIALOG_AFK3 185
#define DIALOG_ADMINS 186
#define CNN1 187
#define CNN2 188
#define CNN3 189
#define CNN4 190
#define CNN5 191
#define CNN6 192
#define CNN7 193
#define CNN8 194
#define CNN9 195
#define CNN10 196
#define CNN11 197
#define CNN12 198
#define CNN13 199
#define CNN14 200
#define CNN15 201
#define CNN16 202
#define CNN17 203
#define CNN18 204
#define CNN19 205
#define CNN20 206
#define CNN21 207
#define CNN22 208
#define EDDY 209
#define EDDY2 210
#define FAHRRAD 211
#define MEDIC 212
#define MEDICHELP 213
#define AUSRUESTENLSPD 214
#define BSPDAUTOVERGABE 215
#define BSPDHELP1 216
#define BSPDHELP2 217
#define DIENSTMARKE 218
#define BSPDHELP3 219
#define BENZIN 220
#define SPSTATUS 221
#define ASCHEIN1 222
#define ASCHEIN2 223
#define ASCHEIN3 224
#define ASCHEIN4 225
#define ASCHEIN5 226
#define ASCHEIN6 227
#define SPHELP 228
#define ANGELHELP 229
#define DETHELP 230
#define MS141 231
#define MS142 232
#define MS143 233
#define MS144 234
#define MS145 235
#define MS146 236
#define MS142d 237
#define MS143d 238
#define MS144d 239
#define MS145d 240
#define MS146d 241
#define MS142m 242
#define MS143m 243
#define MS144m 244
#define MS145m 245
#define MS146m 246
#define MS147 247
#define MSHELP 248
#define GPS 249
#define GPS2 250
#define HANDYHELP2 251
#define DIALOG_FACTION_CAR_BUY 252
#define SUPPORTER1 253
#define SUPPORTER2 254
#define SUPPORTER3 255
#define SUPPORTER4 256
#define SUPPORTER5 257
#define SUPPORTER6 258
#define SUPPORTER7 259
#define SUPPORTER8 260
#define SUPPORTER9 261
#define SUPPORTER10 262
#define SUPPORTER11 263
#define SUPPORTER12 264
#define SUPPORTER13 265
#define SUPPORTER14 266
#define SUPPORTER15 267
#define SUPPORTER16 268
#define SUPPORTER17 269
#define SUPPORTER18 270
#define SUPPORTER19 271
#define SUPPORTER20 272
#define DIALOG_GARAGE1 273
#define DIALOG_GARAGE2 274
#define DIALOG_GARAGE3 275
#define DIALOG_GARAGE4 276
#define DIALOG_GARAGE5 277
#define DIALOG_GARAGE6 278
#define DIALOG_GARAGE7 279
#define DIALOG_GARAGE8 280
#define DIALOG_GARAGE9 281
#define DIALOG_GARAGE10 282
#define DIALOG_GARAGE11 283
#define DIALOG_GARAGE12 284
#define DIALOG_GARAGE13 285
#define DIALOG_GARAGE14 286
#define DIALOG_GARAGE15 287
#define DIALOG_GARAGE16 288
#define CRIPHELP 289
#define PREMIUMHELP 290
#define COD1 291
#define COD2 292
#define COD3 293
#define COD4 294
#define COD5 295
#define COD6 296
#define COD2d 297
#define COD3d 298
#define COD4d 299
#define COD5d 300
#define COD6d 301
#define COD2m 302
#define COD3m 303
#define COD4m 304
#define COD5m 305
#define COD6m 306
#define COD7 307
#define JACK2 308
#define JACK3 309
#define JACK4 310
#define JACK5 311
#define JACK6 312
#define JACK7 313
#define PATE1 314
#define AUTOHELP 315
#define FWWHELP 316
#define STATSS 317
#define DROGENHELP 318
#define AUTOSCOOTERHELP 319
#define BUSSIHELP 320
#define TSCHEIN1 321
#define TSCHEIN2 322
#define TSCHEIN3 323
#define TSCHEIN4 324
#define TSCHEIN5 325
#define TSCHEIN6 326
#define TSCHEIN7 327
#define TSCHEIN8 328
#define TSCHEIN9 329
#define TSCHEIN10 330
#define TSCHEIN11 331
#define HELP22 332


//MYSQL Normal
#define MYSQL_HOST	""
#define MYSQL_USER	""
#define MYSQL_DB	""
#define MYSQL_PASS 	""

#error Bitte MYSQL Daten eintragen! //Bitte löschen nachdem die Mysql Daten eingetragen wurden

//MAX_Players
#undef MAX_PLAYERS
#define MAX_PLAYERS 505

//Static
//Anti Waffen Cheat
static
bool:PlayerWeapons[MAX_PLAYERS][47],
bool:Spawned[MAX_PLAYERS],
ClassWeapons[MAX_CLASS][3],
PlayerClass[MAX_PLAYERS];

//Natives
native unformat(const data[], const format[], {Float,_}:...) = sscanf;

//Version
new Version[10] = "1.5 RC3";
//Tickets
new sTicket[MAX_PLAYERS][128];
//Scriptcheck
new ScriptCheck = 0;
//Reinungsmission
new missionr;
new Sweeper[MAX_PLAYERS];
//AFKCHECK
new antimer[MAX_PLAYERS];
//TodTimer
new TodTimer[MAX_PLAYERS];
//Licht
new VehicleLights[MAX_VEHICLES];
//Verhörungsraum
new vraum = 0;
//b Chat
new nob = 0;
//Pokersystem
new PlayerText:Start3[MAX_PLAYERS];
//Transporter Waffen
new transporterwaffen = 0;
new transporter;
new transporterstatus = 1;
//Tuck
new Truck[MAX_PLAYERS];
//Kirche
new kabsperr,ksuse;
//Leichnam System
new TotenKopf[MAX_PLAYERS];
new Text3D:TotenKopfLabel[MAX_PLAYERS];
new Totentimer[MAX_PLAYERS];
new Float:KadaverX[MAX_PLAYERS],Float:KadaverY[MAX_PLAYERS],Float:KadaverZ[MAX_PLAYERS];
//Feuerwerk
new FireworkLights[10] =
{
        19281,//white
        19282,//red
        19283,//green
        19284,//blue
        19289,//white strobe
        19290,//red strobe
        19291,//green strobe
        19292,//blue strobe
        19293,//purple strobe
        19294//orange strobe
};
new FireworkCount;//counts how many fireworks are created
//Tafel Gangautohaus
new gangtafel;
//Gefesselt
new PlayerTied[MAX_PLAYERS];
//Tüv
new Flasher[MAX_VEHICLES],FlasherState[MAX_VEHICLES];
new twagen;
new Tuev = 0;
new Kennzeichen[MAX_VEHICLES];
new FlashTimer;
//Geworben
new geworbennamen[MAX_PLAYERS];
//Kennzeichen
new bmck = 0,pk = 0;
//Ballon
new lturm,bbaum;
new fahrt = 0;
new Fire,Fire1;
new ballonx;
new ballonn = 0;
new TimerBalloon;
//NoDM Zone
new Text: NoDMTextdraw;
//Scripttextdraw
new Text: Script1;
new Text: Script2;
//Autopate
new FahrId[MAX_PLAYERS];
new FahrTr[MAX_PLAYERS];
new FahrPr[MAX_PLAYERS];
new autos;
new Text:CarKauf[MAX_PLAYERS];
new AutohausCar[MAX_PLAYERS],AutohausSCar[MAX_PLAYERS];
new Pate = 0;
new atafel;
new awagen;
new magnetob,magnetob2,magnetob3,magnetob4;
//Wannis Vater
new wwv = 0;
//Crip or Die
new cripa,codf,cripzone;
new CODWaffen = 0;
new CODUpgrade = 1;
new CODKasse = 0;
new CODDrogenKasse = 0;
new CODMatKasse = 0;
//Tuninggarage
new Neonlichter[MAX_VEHICLES];
new grun1[MAX_VEHICLES],grun2[MAX_VEHICLES],blau1[MAX_VEHICLES],blau2[MAX_VEHICLES],gelb1[MAX_VEHICLES],gelb2[MAX_VEHICLES],
weis1[MAX_VEHICLES],weis2[MAX_VEHICLES],pinke1[MAX_VEHICLES],pinke2[MAX_VEHICLES],rot1[MAX_VEHICLES],rot2[MAX_VEHICLES];
new Tuninggarage = 0;
//Eignungstest
new Bewerberpunkte[MAX_PLAYERS];
//NoDM
new nodmzone;
//Premium
new premiumzone;
new pveh;
//Atombombe
new bunker;
new Abombe = 0;
new Abombeo;
new Float:PlayerExplosionX[MAX_PLAYERS];
new Float:PlayerExplosionY[MAX_PLAYERS];
new Float:PlayerExplosionZ[MAX_PLAYERS];
new atomgate1,atomgate2,atomgate3,atomgate4,atomgate5,atomgate6,atomgate7,atomgate8;
//Gangwar
new testphase = 0;
//MS-14
new ms14zone;
new ms14a;
new MS14Waffen = 0;
new MS14Upgrade = 1;
new MS14MatKasse = 0;

new ms14f;
new MS14Kasse = 0;
new MS14DrogenKasse = 0;
new Msuse,msdoor;
//Detektiv
new UsedFind[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
//Angelsystem
new FischTimer[MAX_PLAYERS];
new AngelTimer[MAX_PLAYERS];
//BSPD
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new Tazed[MAX_PLAYERS];
new Spark[MAX_PLAYERS];
new ausruestenbspd,autovergabe;
new lspddoor1,lspddoor2,lspduse1,lspduse2;
new nagelband = 0;
new RoadBlock = 0,RoadBlockId;
new RoadBlockk = 0,RoadBlockIdk;
new DeinP[MAX_PLAYERS];
new Garagenauto[MAX_VEHICLES];
new sirene[MAX_VEHICLES];
new sirene1[MAX_VEHICLES];
new sirene2[MAX_VEHICLES];
new sirene3[MAX_VEHICLES];
new sirene4[MAX_VEHICLES];
new UCL[MAX_VEHICLES];
new backup = 0;
//Pfandflaschen
new Pfand = 1;
//Fahrradverleih
new fatimer[MAX_PLAYERS];
new fahrrad[MAX_PLAYERS];
new fleihen;
//Wohnwagen
new Injourney[MAX_PLAYERS];
new wohnwagen[MAX_PLAYERS];
new wohnwagenstatus[MAX_PLAYERS];
new wohnwagentuev[MAX_PLAYERS];
new Float: wohnwagenx[MAX_PLAYERS];
new Float: wohnwageny[MAX_PLAYERS];
new Float: wohnwagenz[MAX_PLAYERS];
new Float: wohnwagena[MAX_PLAYERS];
new WohnId[MAX_PLAYERS];
new WohnTr[MAX_PLAYERS];
new WohnPr[MAX_PLAYERS];
//Sanitäter
new saus;
new sanikleidung;
new behandlung;
new behandlungg = 0;
new HealOffer[MAX_PLAYERS];
new HealPrice[MAX_PLAYERS];
new DeinS[MAX_PLAYERS];
//CNN
new cnnkleidung;
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new cnnv;
new cnnz;
new adopen;
new CNNKasse = 0;
new tafel1,tafel2,tafel3;
new satz1[MAX_PLAYERS][50];
new satz2[MAX_PLAYERS][50];
new zsatz1[MAX_PLAYERS][20];
new zsatz2[MAX_PLAYERS][20];
new zsatz3[MAX_PLAYERS][20];
new zsatz4[MAX_PLAYERS][20];
new zsatz5[MAX_PLAYERS][20];
new zsatz6[MAX_PLAYERS][20];
new zsatz7[MAX_PLAYERS][20];
//AFK System
new Desktop_Check[MAX_PLAYERS];
new Desktop_Status[MAX_PLAYERS];
new Desktop_Timer[MAX_PLAYERS];
new Desktop_Timer_Started[MAX_PLAYERS];
//Speditionssystem
new prodcar[3];
new benzintruck[1];
//Invite
new InviteId[MAX_PLAYERS];
new InviteTr[MAX_PLAYERS];
new InvitePr[MAX_PLAYERS];
//Hotel
new Hotelzimmer = 8;
//Autoscooter
new autoscooteroffen;
new ascooter;
new AnnouncedAutoscooterRound = 0;
new AutoscooterRound = 0;
//new Autoscooterprepare = 0;
new autoscootertimer;
new AutoscooterPlayers = 0;
new StartingAutoscooterRound = 0;
//Farmer
new FarmerCP[MAX_PLAYERS];
//Event
new EventStarted = 0;
new Event = 0;
new noevent = 0;
//Paintball System
new PBBS = 0;
new paintballtimer;
new StartingPaintballRound = 0;
new AnnouncedPaintballRound = 0;
new PaintballPlayers = 0;
new PaintballRound = 0;
new PaintballWinner = 999;
new PaintballWinnerKills = 0;
new PlayerPaintballing[MAX_PLAYERS];
new PlayerPaintballKills[MAX_PLAYERS];
new Text:PBText; //Paintball Textdraw
new PaintballMap = 0;
//new Paintballprepare = 0;
new OpenPaintballl = 0;
//Anfangsystem
new Text:Intro,Text:Intro2,Text:Intro3,Text:Intro4,Text:Intro5;
new IntroTimer[MAX_PLAYERS];
//WerbungAD
new Text:Ad1;
new Text:Ad2;
//Schwarzmarkt
new Text3D:schwarzmarktt;
new Johnn = 0;
new johnc = 0;
//Geld Textdraw
new PlayerText:Money3[MAX_PLAYERS];
new PlayerText:Money[MAX_PLAYERS];
new PlayerText:Money2[MAX_PLAYERS];
//Nuttensystem
new Text3D:nuttenlabel;
new nutte = 0;
//Levelsystem
new levelexp = 3;
//Tutorial Timer
new timert[MAX_PLAYERS];
//Zoll
new mautstelle[MAX_PLAYERS];
new ZollSchranke1,ZollSchranke2;
//PaynSpray
new psgate;
new psn = 0;
//Bank
new Verwendungszweck[MAX_PLAYERS];
new bankname[MAX_PLAYERS][MAX_PLAYER_NAME];
new BankRaub = 1;
new BankRaubATM = 0;
//Query
new Query[1024];
//Adminsystem
new adminzone;
new PlayerText3D:DutyLabel[MAX_PLAYERS];
new gweiss1,gweiss2;
new gangstercar;
new boxxen1,boxxen2;
new MusikOn;
//new Peter = 0;
new gSpectateID[MAX_PLAYERS];
new gSpectateType[MAX_PLAYERS];
new neonneme1;
new neonneme2;
new neonshooti1;
new neonshooti2;
new nemecar,shooticar;
new adminaufzug1;
new adminaufzug2;
new AdminAufzugB = 0;
new BigEar[MAX_PLAYERS];
new DeinSupport[MAX_PLAYERS];
new BikesR = 0;
new SupportVehLight[MAX_PLAYERS];
new SupportVeh[MAX_PLAYERS];
new S[MAX_PLAYERS] = -1;
new Fires[MAX_PLAYERS];
new Float: dist[MAX_PLAYERS]/* = 100.0*/;
new Timer[MAX_PLAYERS];
new Float: PEX[3][MAX_PLAYERS];
new Float: P[4][MAX_PLAYERS];
new Text3D:supveh[MAX_PLAYERS];
//Mechatroniker
new BkId[MAX_PLAYERS];
new BkTr[MAX_PLAYERS];
new BkPr[MAX_PLAYERS];
new DeinM[MAX_PLAYERS];
new MechaOn = 0;
new Hebeann = 0;
new tm1,tm2,tm3,tm4,tm5,tm6,tm7,tm8,tm9,tm10,tm11,tm12,tm13,tm14,tm15,tm16,tm17,tm18,tm19,tm20,tm21,tm22,tm23,tm24,tm25;
new Olicht[MAX_VEHICLES];
new light1[MAX_VEHICLES];
new light2[MAX_VEHICLES];
new light3[MAX_VEHICLES];
new light4[MAX_VEHICLES];
new light5[MAX_VEHICLES];
//Speedo
new PlayerText:Speedo0[MAX_PLAYERS],PlayerText:Speedo1[MAX_PLAYERS],PlayerText:Speedo3[MAX_PLAYERS],PlayerText:Speedo4[MAX_PLAYERS],PlayerText:Speedo5[MAX_PLAYERS];
//Premium
new SunCP1;
//Fahrschule
new rtimer[MAX_PLAYERS];
new MotorAuto[MAX_PLAYERS];
new Getroffen[MAX_PLAYERS];
new WaffenscheinSchuss[MAX_PLAYERS];
new WaffenscheinStep[MAX_PLAYERS];
new PlayerText3D:Target;
new Targets[MAX_PLAYERS];
new ScheinCP1;
new Fehlerpunkte[MAX_PLAYERS];
new FscheinCP[MAX_PLAYERS];
//Drift
new Score[MAX_PLAYERS] = 0;
new Driftzeit[MAX_PLAYERS];
new driftp;
new DriftAuto[MAX_PLAYERS];
new MayaBusy = 0;
new DriftCP1[MAX_PLAYERS],DriftCP2[MAX_PLAYERS],DriftCP3[MAX_PLAYERS],DriftCP4[MAX_PLAYERS],DriftCP5[MAX_PLAYERS],DriftCP6[MAX_PLAYERS],
DriftCP7[MAX_PLAYERS],DriftCP8[MAX_PLAYERS],DriftCP9[MAX_PLAYERS],DriftCP10[MAX_PLAYERS],DriftCP11[MAX_PLAYERS];
//Mechatroniker
//Einweisungssystem
new DeinEinweisung[MAX_PLAYERS];
new InEinweisung[MAX_PLAYERS];
//Airport
new ticket;
new ticket2;
new ticket3;
new ticket4;
new flugbot;
//Wettersystem
new wetterid;
new Weather;
new WetterRandom[] = {2,4,8,9,7,16,5,2,7,6,4,16,2,2};
//Feuerwehrmann Job
new FeuerTimer[MAX_PLAYERS];
new DeinFW[MAX_PLAYERS];
new brand = 0;
new baumeinsatz = 0;
new baum1,baum2,baum3;
new fwtor1,fwtor2,fwtor3,fwtor4;
new FeuerwehrOn = 0;
new fwtor1use,fwtor2use;
new Flammen = 0;
new bsnbrand = 0;
new kirchenbrand = 0;
new haus1brand = 0;
new haus2brand = 0;
new bankbrand = 0;
new ammubrand = 0;
new casinobrand = 0;
new hladenbrand = 0;
//Drogenhändler Job
new drugtimer[MAX_PLAYERS];
new Drogenn;
new Text3D:drugss;
new high[MAX_PLAYERS];
new DrogenId[MAX_PLAYERS];
new DrogenTr[MAX_PLAYERS];
new DrogenPr[MAX_PLAYERS];
//Waffenhändler Job
new MatsId[MAX_PLAYERS];
new MatsTr[MAX_PLAYERS];
new MatsPr[MAX_PLAYERS];
new wget;
new wgive;
new WaffenAngebot[MAX_PLAYERS];
new Waffe[MAX_PLAYERS];
new WaffenPreis[MAX_PLAYERS];
new PolizistenOn = 0;
//DJ Job
new djopen;
new DJTimer[MAX_PLAYERS];
new Mischpult[MAX_PLAYERS];
new Tisch[MAX_PLAYERS];
new Text3D:DJLabel[MAX_PLAYERS];
new Float:MischpultX[MAX_PLAYERS];
new Float:MischpultY[MAX_PLAYERS];
new Float:MischpultZ[MAX_PLAYERS];
new PlayerText:DJText2[MAX_PLAYERS];
new PlayerText:DJText1[MAX_PLAYERS];
//Rathaus
new CityCP;
//Staatskasse
new Staatskasse = 0;
//Raubsysteme
new norob = 0;
//24/7 Raub
new StoreRobed[MAX_PLAYERS];
new Robber[MAX_PLAYERS];
new have[MAX_PLAYERS];
new rob;
new rob1;
new rob2;
new rob3;
new robbing;
new wait;
//Questsystem
new Mission = 0;
new Hacktimer[MAX_PLAYERS];
new QuestCP[MAX_PLAYERS];
new Koffer[MAX_PLAYERS];
new ddealer = 0;
//DriveIN BS
new DriveinMenBusy;
//Handy System
new anruftimer[MAX_PLAYERS];
new DeinChat[MAX_PLAYERS];
new HandyCP1;
new bool:Aktiv[MAX_PLAYERS];
new Anderer[MAX_PLAYERS];
new wirdangerufen[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
//Lotto System
new HaveTicket[MAX_PLAYERS];
new PlayerNumber[6][MAX_PLAYERS];
new Number[6];
new LottoNews = 0;
//Pferderennen
new PferderennenNews = 0;
new PferdeCP1,PferdeCP2;
new Text:Horse1, Text:Horse2, Text:Horse3, Text:Horse4, Text:BG1, Text:BG2, Text:Start, Text:Finish, Text:Start2, Text:Finish2, HorseCD, Text:HorseNum1, Text:HorseNum2, Text:HorseNum3, Text:HorseNum4, Text:CDTextDraw, HorseAnimCount;
new Float:HorsePosX1, Float:HorsePosX2, Float:HorsePosX3, Float:HorsePosX4, HorseStop;
new MoneyBet[MAX_PLAYERS], BetOnHorse[MAX_PLAYERS], RaceStarted, Watching[MAX_PLAYERS], Prepared, Horsemsg;
//Leave/Join Nachrichten
new ConnectMessage[MAX_PLAYERS];
//Kleidungsladen
new kleidung;
//Personalausweis
new pperso;
//Uhr Textdraw
new Text:Clock;
//MotorSystem
new MotorKaputt[MAX_VEHICLES];
new VehicleStarted[MAX_VEHICLES];
//Register/Login System
new FalschesPW[MAX_PLAYERS];
new AccountExists[MAX_PLAYERS];
//Schwarze Balken
new Text:lbt;
new Text:lbb;
//Fahrzeugsystem
new spawncar_job[MAX_VEHICLES];
new spawncar_interior[MAX_VEHICLES];
//Pickups
new zinfo;
//MCFit
new NorbertBusy;
//Pizzaladen
new PizzaMenBusy;
//Burgershot
new BsnMenBusy;
new PlayerOrder[MAX_PLAYERS][128];
//Club
new BarMenBusy;
//Casino Bar
new BarMenBusy2;
//UC Chat
new realchat = 1;
//Einweisung
new noeinweisung;
//Check
new check;
//Anticheat
new Float:CheatPosX[MAX_PLAYERS],Float:CheatPosY[MAX_PLAYERS],Float:CheatPosZ[MAX_PLAYERS];
new NotMoving[MAX_PLAYERS];
new WeaponID[MAX_PLAYERS];
new CheckCrouch[MAX_PLAYERS];
new Ammo[MAX_PLAYERS][MAX_PLAYERS];
new PlayerPressedJump[MAX_PLAYERS];
new XDeaths[MAX_PLAYERS];
new LastDeath[MAX_PLAYERS];
new noacheat = 0;
new pIPWarns[MAX_PLAYERS];
new Float:pArmour[MAX_PLAYERS];
new AllowArmour[MAX_PLAYERS];
//Anti Spawnkill
new Text3D:SpawnKilllabel[MAX_PLAYERS];
//Haussystem
new pickups;
new HausId[MAX_PLAYERS];
new HausTr[MAX_PLAYERS];
new HausPr[MAX_PLAYERS];
//Datenbank automatisch erstellen
new Datenbank = 0;
//Alhambra Vip Lounge
new djtor;
//Ticket offen
new Text:OTickets;
//Slotmachine
new Text:VerText;
new Text:ReadyText;
new Text:BetText[MAX_PLAYERS];
new Text:Box;
new Text:Digit1[6];
new Text:Digit2[6];
new Text:Digit3[6];
new Slots[MAX_PLAYERS][3];
new SlotCounter[MAX_PLAYERS];
new Gambling[MAX_PLAYERS];
new SlotTimer[MAX_PLAYERS];
new Bet[MAX_PLAYERS];
new Balance[MAX_PLAYERS];
new bool:rdy=false;
new Text3D:GambleLabel[55];
new Float:BanditLocs[12][4] =
{
	{1965.8586,1037.4901,992.4688},
	{1963.8291,1037.0765,992.4688},
	{1961.2910,1042.9292,992.4688},
	{1963.0018,1044.1005,992.4688},
	{1958.0819,1049.0446,992.4688},
	{1956.8635,1047.3711,992.4688},
	{1963.8270,998.5135,992.4745},
	{1965.8623,998.1885,992.4688},
	{1963.0648,991.4611,992.4688},
	{1961.3153,992.5781,992.4688},
	{1956.9939,988.2781,992.4688},
	{1958.2095,986.6071,992.4688}
};
//Nitro Fahrzeuge
new InvalidNosVehicles[38] =
{
	581,523,462,521,463,560,461,448,468,586,411,477,415,
    509,481,510,472,473,493,595,484,430,453,452,451,429,
    452,446,454,590,569,537,535,538,570,562,542,449
};
//Poker
new Text3D:PokerLabel[52];
new Float:PokerPositions[16][4] =
{
	{1939.7461,1029.5815,992.4688},
	{1942.6213,1028.9133,992.4688},
	{1941.8356,1021.4440,992.4688},
	{1938.8881,1021.1749,992.4688},
	{1938.8834,1014.0693,992.4688},
	{1941.8306,1014.3683,992.4688},
	{1942.8362,1006.9825,992.4688},
	{1940.0933,1005.9102,992.4688},
	{1966.5984,1006.1884,992.4745},
	{1966.5983,1013.9348,992.4688},
	{1966.5967,1021.5607,992.4688},
	{1966.5991,1029.3214,992.4745},
	{1969.5454,1029.4779,992.4745},
	{1969.5415,1021.7037,992.4688},
	{1969.5435,1014.3047,992.4688},
	{1969.5425,1006.4574,992.4745}
};
//Angelsystem
new FishNamesNumber = 16;
new FishNames[16][20] = {
	{"Bernfisch"},
	{"Zackenbarsch"},
	{"Roter Schnapper"},
	{"Forelle"},
	{"Blauer Fächerfisch"},
	{"Makrele"},
	{"Wolfbarsch"},
	{"Hecht"},
	{"Segelfisch"},
	{"Tuhnfisch"},
	{"Aal"},
	{"Delphin"},
	{"Hai"},
	{"Schildkröte"},
	{"Katzenfisch"},
	{"Schwertfisch"}
};

new Float:AutoHauser[AutoHausZahl][4][4] =
{
	{//Bug Platzhalter
		{0.0, 0.0, 0.0, 0.0}, 		//Icon
		{0.0, 0.0, 0.0, 0.0}, //showcar
		{0.0, 0.0, 0.0, 0.0},      //cam
		{0.0, 0.0, 0.0, 0.0}       //Player
	},
	{//Normal
		{0.0, 0.0, 0.0, 0.0}, 		//Icon
		{542.6400,-1286.8173,16.9478,97.3255}, //showcar
		{541.2662,-1274.6437,18.3252, 0.0},      //cam
		{551.6949,-1260.2174,17.2422, 0.0}       //Player
	},
	{//OffRoad
		{0.0, 0.0, 0.0, 0.0}, 		//Icon
		{-428.6305,2503.8960,124.6674,285.7005}, //showcar
		{-425.3649,2493.2053,126.3799, 0.0},      //cam
		{-432.4454,2510.2949,121.1257, 0.0}       //Player
	},
	{//Sportwagen
		{0.0, 0.0, 0.0, 0.0}, 		//Icon
		{-1650.8019,1208.0515,20.8767,331.4092}, //showcar
		{-1657.7144,1212.2943,21.1563, 0.0},      //cam
		{-1665.4524,1229.2443,21.1563, 0.0}       //Player
	},
	{//Zweiräder
		{0.0, 0.0, 0.0, 0.0},  		//Icon
		{-93.3457,-1172.6740,7.4384,270.5182}, //showcar
		{-89.8765,-1164.8387,7.7439, 0.0},      //cam
		{-89.1125,-1162.7717,7.7439, 0.0}       //Player
	},
	{//Sonstiges
		{0.0, 0.0, 0.0, 0.0}, 		//Icon
		{548.4424,-1286.2461,16.8197,101.6415}, //showcar
		{547.4240,-1278.8225,17.2482, 0.0},      //cam
		{546.9420,-1274.6230,17.2482, 0.0}       //Player
	},
	{
		{-2442.8491, 754.1586, 35.1718, 0.0}, 		//Icon
		{-2442.7392, 785.7493, 40.6537, 226.2871}, //showcar
		{-2437.4892, 788.2394, 40.8440, 0.0},      //cam
		{-2435.3625, 789.6593, 40.8515, 0.0}       //Player
	},
	{
		{1026.7488,-1368.3208,13.5667, 0.0}, 		//Icon
		{978.8609,-1359.1937,21.2350}, 			  //showcar
		{978.8361,-1348.4697,21.6563, 0.0},      //cam
		{978.8416,-1347.6975,21.6563, 0.0}       //Player
	},
	{
		{1011.0762,-2559.8169,2.5825, 0.0}, 		//Icon
		{1012.5335,-2621.4177,-0.3198, 0.0}, 		//showcar
		{1013.2615,-2605.6023,2.8710, 0.0},      	//cam
		{1013.3135,-2603.8596,2.8448, 0.0}       	//Player
	}
};

new AutoHausEins[41][4] = //Normale Fahrzeuge
{
	{401,35000,3,17}, // Bravura
	{404,38000,2,108}, // Perenniel
	{405,39000,22,22}, // Sentinel
	{410,37000,45,45}, // Manana
	{412,40000,23,23}, // Voodoo
	{419,42000,55,55}, // Esperanto
	{421,41000,65,65}, // Washington
	{426,42000,62,6}, // Premier
	{436,43000,12,2},  // Previon-500
	{439,44000,63,2},  // Stallion
	{436,43000,-1,-1},  // Admiral
	{458,45000,-1,-1},  // Solair
	{466,47000,-1,-1},  // Glendale
	{467,46000,-1,-1},  // Oceanic
	{474,44000,-1,-1},  // Hermes
	{475,45000,-1,-1},  // Sabre
	{480,46000,-1,-1},  // Comet
	{491,48000,-1,-1},  // Virgo
	{492,49000,-1,-1},  // Greenwood
	{496,50000,-1,-1},  // Blista Compact
	{507,7500,-1,-1},  // Elegant
	{516,53000,-1,-1},  // Nebula
	{517,54000,-1,-1},  // Majestic
	{518,55000,-1,-1},  // Buccaneer
	{526,57000,-1,-1},  // Fortune
	{527,58000,-1,-1},  // Cadrona
	{529,59000,-1,-1},  // Williard
	{533,60000,-1,-1},  // Feltzer
	{534,61000,-1,-1},  // Remington
	{535,64000,-1,-1},  // Slamvam
	{536,63000,-1,-1},  // Blade
	{540,63000,-1,-1},  // Vincent
	{589,46000,-1,-1},  // Clover
	{602,37000,-1,-1},  // Alpha
	{604,4500,-1,-1},  // Glendale Shit
	{605,5700,-1,-1},  // Sadler Shit
	{560,60000,-1,-1},  // Sultan
	{559,70000,-1,-1},  // Jester
	{558,66000,-1,-1},  // Uranus
	{561,59000,-1,-1},  // Stratum
	{489,82000,-1,-1} // Regina
};

new AutoHausZwei[7][4] = //Offroad
{
	{568,71000,3,17}, //
	{424,73000,2,108}, //
	{579,72000,22,22}, //
	{400,75000,45,45}, //
	{500,77000,23,23}, //
	{495,80000,55,55}, //
	{479,66000,0,2}  //
};

new AutoHausDrei[8][4] = //Sportwagen
{
	{402,90000,3,17}, // Buffalo
	{411,420000,2,108}, // Infernus
	{429,350000,22,22}, // Banshee
	{451,370000,45,45}, // Turismo
	{477,230000,55,55}, // Zr350
	{506,299000,65,65}, // Supergt
	{541,288000,1,6}, // Bullet
	{603,374900,0,2}  // Phoenix
};

new AutoHausVier[9][4] = //Zweiräder
{
	{462,1000,3,17}, // Faggio ($800)
	{586,5400,2,108}, // Wayfarer ($2000)
	{521,195000,22,22}, // FCR-900($2500)
	{461,203000,45,45}, // PCJ-600 ($3100)
	{463,215000,23,23}, // Freeway ($4200)
	{468,230000,55,55}, // Sanchez ($4800)
	{581,129000,65,65}, // BF-400 ($5400)
	{471,104000,1,6}, // Quad ($6000)
	{522,374900,0,2}  // NRG-500 ($12000)
};

new AutoHausFuenf[4][4] = //Sonstiges
{
    {478,190000,45,45}, // Walton
	{409,450000,3,17}, // Limosine
	{483,333000,2,108}, // Camper
	{482,290000,22,22} // Burrito

};

new InAutoHaus[MAX_PLAYERS];

//Waffenautomat
new Text3D:Waffenautomat[52];
new Float:WaffenautomatP[5][3] =
{
	{-2574.1035,2436.0068,16.0398},
	{-2547.7634,2309.2964,4.9844},
	{-2397.5027,2223.2363,4.9844},
	{-2345.6057,2392.2632,6.1081},
	{-2429.7532,2473.4556,13.7410}
};
//ATMS
new Text3D:Bankautomatenl[52];
new Float:Bankautomaten[6][3] =
{
	{1417.7025,-981.1413,1639.7843},
	{1421.2108,-981.1113,1639.7843},
	{1424.5815,-981.1927,1639.7843},
	{-2335.2368,2357.8799,5.1844},
	{-2477.4395,2240.3604,4.8435},
 	{-2491.8936,2358.4924,10.2765}
};
//Fraktionsautohaus
enum fBuylist{
	fbVehid,
	Float:fbX,
	Float:fbY,
	Float:fbZ,
	Float:fbA,
	fbPrice,
	fbCarid,
	Text3D:fbLabel
};
new FactionBuylist[][fBuylist] = {
	{405,-1988.4009,272.1912,34.8806,265.5001,35000}, // Sentinal
    {411,-1988.8778,268.2697,34.8821,262.2049,200000}, // Infernus
    {412,-1989.6470,259.9034,34.8845,264.7655,40000}, // Voodoo
    {561,-1989.6674,264.1293,34.8846,261.9547,45000}, // Stratum
    {482,-1988.9199,276.4112,34.8788,269.6874,60000}, // Buritto
    {415,-1991.1888,255.5268,34.8771,262.9529,150000}, // Cheetah
    {429,-1991.6748,251.5871,34.8771,261.9143,170000}, // Banshee
    {439,-1992.8280,243.4614,34.8768,262.7995,25000},// Stallion
    {445,-1991.9729,247.8409,34.8801,263.3176,30000}, // Admiral
    {451,-1945.0551,273.0204,35.1788,90.0986,250000}, // Turismo
    {475,-1945.1409,268.7661,35.1791,90.3936,40000}, // Sabre
    {560,-1945.1461,264.2227,35.1764,90.9626,76000}, // Sultan
    {479,-1945.1569,259.4105,35.1741,91.0394,24000}, // Regina
    {480,-1945.6697,273.4555,40.7540,89.7767,12000},// Comet
    {506,311.6965,-1789.0367,4.2775,179.3222,160000},// Super GT
    {522,-1944.1616,254.8019,35.0380,90.8126,500000}, // NRG
    {541,-1945.7010,268.4565,40.7583,90.4172,320000},// Bullet
    {559,-1945.7903,262.9530,40.7520,94.3817,80000}, // Jester
    {562,-1945.7893,256.6734,40.7521,92.3503,90000}, // Elegy
    {521,-1955.7396,255.3549,40.6181,1.3241,83000}, // FCR
    {487,309.9238,-1800.4260,4.6735,181.1788,70000} // Maverik

};
new Float:FactionBuySpawn[4]={-1986.3833,304.7336,34.8804,267.8656};
enum fCar{
    fCarid,
	fVehid,
	Float:fPos[4],
	fCol[2],
	fFaction[5],
	fTuning[14],
	fPrice
};
new FactionCars[MAX_FACTION_CARS][fCar];
new BuylistRespawner;
new SaveFactionCarsTimer;

//Tanksystem
new timer2[MAX_PLAYERS];
new Tankmenge[MAX_VEHICLES];
new GasMax[] = {
75, //"Landstalker",
56,//"Bravura",
65,//"Buffalo",
250,//"Linerunner",
70,//"Pereniel",
75,//"Sentinel",
250,//"Dumper",
250,//"Firetruck",
250,//"Trashmaster",
80,//"Stretch",
55,//"Manana",
60,//"Infernus",
65,//"Voodoo",
95,//"Pony",
110,//"Mule",
50,//"Cheetah",
80,//"Ambulance",
500,//"Leviathan",
85,//"Moonbeam",
75,//"Esperanto",
65,//"Taxi",
75,//"Washington",
90,//"Bobcat",
100,//"Mr Whoopee",
45,//"BF Injection",
400,//"Hunter",
65,//"Premier",
120,//"Enforcer",
95,//"Securicar",
70,//"Banshee",
500,//"Predator",
135,//"Bus",
1000,//"Rhino",
250,//"Barracks",
45,//"Hotknife",
1000,//"Trailer",
55,//"Previon",
135,//"Coach",
85,//"Cabbie",
75,//"Stallion",
82,//"Rumpo",
5,//"RC Bandit",
85,//"Romero",
130,//"Packer",
85,//"Monster Truck",
74,//"Admiral",
120,//"Squalo",
400,//"Seasparrow",
10,//"Pizzaboy",
100,//"Tram",
100,//"Trailer",
65,//"Turismo",
500,//"Speeder",
500,//"Reefer",
500,//"Tropic",
100,//"Flatbed",
90,//"Yankee",
99,//"Caddy",
75,//"Solair",
80,//"Berkley's RC Van",
500,//"Skimmer",
12,//"PCJ-600",
10,//"Roller",
15,//"Freeway",
5,//"RC Baron",
5,//"RC Raider",
78,//"Glendale",
80,//"Oceanic",
13,//"Sanchez",
500,//"Sparrow",
96,//"Patriot",
10,//"Quad",
500,//"Coastguard",
100,//"Dinghy",
85,//"Hermes",
65,//"Sabre",
500,//"Rustler",
60,//"ZR-350",
55,//"Walton",
65,//"Regina",
70,//"Comet",
0,//"Fahrrad",
95,//"Burrito",
65,//"Camper",
500,//"Marquis",
35,//"Baggage",
130,//"Dozer",
500,//"Maverick",
500,//"News Chopper",
100,//"Rancher",
120,//"FBI Rancher",
65,//"Virgo",
65,//"Greenwood",
500,//"Jetmax",
40,//"Hotring",
60,//"Sandking",
55,//"Blista Compact",
500,//"Police Maverick",
130,//"Boxville",
100,//"Benson",
60,//"Mesa",
5,//"RC Goblin",
40,//"Hotring Racer",
40,//"Hotring Racer",
40,//"Bloodring Banger",
85,//"Rancher",
65,//"Super GT",
70,//"Elegant",
100,//"Journey",
0,//"Bike",
0,//"Mountain Bike",
500,//"Beagle",
500,//"Cropdust",
500,//"Stunt",
130,//"Tanker",
150,//"RoadTrain",
75,//"Nebula",
75,//"Majestic",
80,//"Buccaneer",
500,//"Shamal",
500,//"Hydra",
15,//"FCR-900",
15,//"NRG-500",
15,//"HPV1000",
150,//"Cement Truck",
85,//"Tow Truck",
65,//"Fortune",
70,//"Cadrona",
55,//"FBI Truck",
65,//"Willard",
20,//"Forklift",
45,//"Traktor",
130,//"Combine",
75,//"Feltzer",
80,//"Remington",
85,//"Slamvan",
80,//"Blade",
500,//"Freight",
500,//"Streak",
30,//"Vortex",
67,//"Vincent",
62,//"Bullet",
60,//"Clover",
75,//"Sadler",
150,//"Firetruck",
80,//"Hustler",
75,//"Intruder",
65,//"Primo",
500,//"Cargobob",
65,//"Tampa",
75,//"Sunrise",
70,//"Merit",
65,//"Utility",
500,//"Nevada",
95,//"Yosemite",
50,//"Windsor",
100,//"Monster Truck",
100,//"Monster Truck",
65,//"Uranus",
60,//"Jester",
75,//"Sultan",
75,//"Stratum",
75,//"Elegy",
500,//"Raindance",
5,//"RC Tiger",
70,//"Flash",
75,//"Tahoma",
85,//"Savanna",
35,//"Bandito",
500,//"Freight",
500,//"Trailer",
10,//"Kart",
15,//"Mower",
150,//"Duneride",
45,//"Sweeper",
80,//"Broadway",
80,//"Tornado",
500,//"AT-400",
100,//"DFT-30",
86,//"Huntley",
80,//"Stafford",
15,//"BF-400",
70,//"Newsvan",
35,//"Tug",
100,//"Trailer",
75,//"Emperor",
20,//"Wayfarer",
65,//"Euros",
100,//"Hotdog",
75,//"Club",
100,//"Trailer",
100,//"Trailer",
500,//"Andromada",
500,//"Dodo",
5,//"RC Cam",
500,//"Launch",
75,//"Streifenwagen",
75,//"Streifenwagen",
75,//"Streifenwagen",
75,//"Polizei Ranger",
75,//"Picador",
150,//"S.W.A.T. Van",
65,//"Alpha",
55,//"Phoenix",
65,//"Glendale",
65,//"Sadler",
100,//"Luggage Trailer",
100,//"Luggage Trailer",
100,//"Stair Trailer",
130,//"Boxville",
100,//"Farm Plow",
100,//"Utility Trailer"
};

//Spielerdaten
enum SpielerDaten
{
	sAdminlevel,
	sLevel,
	sAlter,
	sJob,
	sGeld,
	sTutorial,
	sSkin,
	sGeschlecht,
	sMitglied,
	sLeiter,
	sMute,
	sHaus,
	sHausE,
	sPersonalausweis,
	sSpawnChange,
	sPremium,
	sLink,
	sEingeloggt,
	sPremiumZeit,
	sKaufpunkte,
	sHandy,
	sGuthaben,
	sVertrag,
	sAkku,
	sGPS,
	sNummer,
	sWanteds,
	sWaffenschein,
	sAutoschein,
	sAnglerschein,
	sMotorradschein,
	sBootschein,
	sFlugschein,
	sTelefonBuch,
	sJailed,
	sKlingelton,
	sAngel,
	sKoeder,
	sKondom,
	sMP3Player,
 	s247Rob,
	sPreamie,
	sJailTime,
	sHotel,
	sArbeitslosengeld,
	sKrankenver,
	sAutover,
	sAutos,
	sFischerLizens,
	sJobTime,
	sArztkosten,
	sMats,
	sSpielstunden,
	sDrogen,
	sBetrunken,
	sGeworbenVon,
	sQuest,
	sGeworbenNach,
	sHelm,
	sErf,
	sDriftZeit,
	sPKlingelton,
	sPKlingeltonHat,
	sFraktion,
	sSonnenbrille,
	sbap,
	sMission,
	sMissionZeit,
	sBenzinkanister,
	sTimeBan,
	sSupportsperre,
	sKonto,
	sTruckschein,
	sWarns,
	sKarte,
	sMob,
	sPin,
	sBankRaub,
	sATMRob,
	sReisePass,
	sMieter,
	sPayPoints,
	sKrankheit,
	sDrogenSamen,
	sDrogenDuenger,
	sWaffenscheinZeit,
	sPkills,
	sPdeaths,
	sPpunkte,
	sPwaffe,
	sDrogenWarteZeit,
	sDrogenAngebaut,
	sDrogenZeit,
	sRank,
	sWohnwagen,
	sMaske,
	sPfand,
	sTod,
	sBombe,
	sFisch,
	sDetSkill,
	sWA,
	sBizz,
    sDietrich,
	spPayday,
	sGB,
	sLastOnline,
	sWarning1,
	sWarning2,
	sWarning3
}
new sStats[MAX_PLAYERS][SpielerDaten];

//Autohaus
enum cInfo
{
	cId,
	cModel,
	cPrice,
	cC1,
	cC2,
	cPj,
	cPreis,
	Float:cPos_x,
	Float:cPos_y,
	Float:cPos_z,
	Float:cPos_a,
	cMod1,
	cMod2,
	cMod3,
	cMod4,
	cMod5,
	cMod6,
	cMod7,
	cMod8,
	cMod9,
	cMod10,
	cMod11,
	cMod12,
	cMod13,
	cMod14,
	cMod15,
	cMod16,
	cMod17,
	cLock,
	cGesperrt,
	Float:cOPos_x,
	Float:cOPos_y,
	Float:cOPos_z,
	Float:cORotate,
	cNeon,
	cTuev
};

new PlayerCar[MAX_PLAYERS][5][cInfo];

//Hausystem
enum hInfo
{
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hOwner[MAX_PLAYER_NAME],
	hDiscription[MAX_PLAYER_NAME],
	hValue,
	hInt,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hVec,
	hVcol1,
	hVcol2,
	hDate,
	hLevel,
	hInteriorID,
	Float:hCarSpawnX,
	Float:hCarSpawnY,
	Float:hCarSpawnZ,
	Float:hCarSpawnRot,
	hCID,
	hNitro,
	Text3D:label[34],
	hMaxMieter,
	hMieter,
	hObjekt,
	hCarlock,
	hPickup
};

new HouseInfo[30][hInfo];
new Float:HouseInt_Spawn_X[50];
new Float:HouseInt_Spawn_Y[50];
new Float:HouseInt_Spawn_Z[50];
new HouseInt_Interior[50];
new Houses_Index;

//Business System
enum bInfo
{
	bOwned,
	bOwner[64],
	bMessage[128],
	bExtortion[MAX_PLAYER_NAME],
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bProducts,
	bMaxProducts,
	bPriceProd,
	Text3D:blabel[128],

};
new BizzInfo[8][bInfo];

//Pokersystem
enum
{
        TWO = 2,
        THREE,
        FOUR,
        FIVE,
        SIX,
        SEVEN,
        EIGHT,
        NINE,
        TEN,
        JACK,
        QUEEN,
        KING,
        ACE
};

enum
{
        HIGH_CARD = 0,
        ONE_PAIR,
        TWO_PAIR,
        THREE_OF_A_KIND,
        STRAIGHT,
        FLUSH,
        FULL_HOUSE,
        FOUR_OF_A_KIND,
        STRAIGHT_FLUSH,
        ROYAL_FLUSH
};

new LD_POKE[POKERLAPS][] =
{
        { "LD_POKE:cd2c" }, { "LD_POKE:cd3c" }, { "LD_POKE:cd4c" }, { "LD_POKE:cd5c" }, { "LD_POKE:cd6c" }, { "LD_POKE:cd7c" }, { "LD_POKE:cd8c" },
        { "LD_POKE:cd9c" }, { "LD_POKE:cd10c" }, { "LD_POKE:cd11c" }, { "LD_POKE:cd12c" }, { "LD_POKE:cd13c" }, { "LD_POKE:cd1c" },

        { "LD_POKE:cd2d" }, { "LD_POKE:cd3d" }, { "LD_POKE:cd4d" }, { "LD_POKE:cd5d" }, { "LD_POKE:cd6d" }, { "LD_POKE:cd7d" }, { "LD_POKE:cd8d" },
        { "LD_POKE:cd9d" }, { "LD_POKE:cd10d" }, { "LD_POKE:cd11d" }, { "LD_POKE:cd12d" }, { "LD_POKE:cd13d" }, { "LD_POKE:cd1d" },

        { "LD_POKE:cd2h" }, { "LD_POKE:cd3h" }, { "LD_POKE:cd4h" }, { "LD_POKE:cd5h" }, { "LD_POKE:cd6h" }, { "LD_POKE:cd7h" }, { "LD_POKE:cd8h" },
        { "LD_POKE:cd9h" }, { "LD_POKE:cd10h" }, { "LD_POKE:cd11h" }, { "LD_POKE:cd12h" }, { "LD_POKE:cd13h" }, { "LD_POKE:cd1h" },

        { "LD_POKE:cd2s" }, { "LD_POKE:cd3s" }, { "LD_POKE:cd4s" }, { "LD_POKE:cd5s" }, { "LD_POKE:cd6s" }, { "LD_POKE:cd7s" }, { "LD_POKE:cd8s" },
        { "LD_POKE:cd9s" }, { "LD_POKE:cd10s" }, { "LD_POKE:cd11s" }, { "LD_POKE:cd12s" }, { "LD_POKE:cd13s" }, { "LD_POKE:cd1s" }
};

new Card_Value[POKERLAPS] =
{
        TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE,
        TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE,
        TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE,
        TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE
};
new Bynary_Mask[POKERLAPS] =
{
        1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800, 0x1000,
        1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800, 0x1000,
        1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800, 0x1000,
        1, 2, 4, 8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800, 0x1000
};
new Prim_Mask[POKERLAPS] =
{
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41
};
new Color_Mask[POKERLAPS] =
{
        TREFF, TREFF, TREFF, TREFF, TREFF, TREFF, TREFF, TREFF, TREFF, TREFF, TREFF, TREFF, TREFF,
        KARO, KARO, KARO, KARO, KARO, KARO, KARO, KARO, KARO, KARO, KARO, KARO, KARO,
        KOR, KOR, KOR, KOR, KOR, KOR, KOR, KOR, KOR, KOR, KOR, KOR, KOR,
        PIKK, PIKK, PIKK, PIKK, PIKK, PIKK, PIKK, PIKK, PIKK, PIKK, PIKK, PIKK, PIKK
};
new pot[] = { 0, 0, 2, 3, 4, 5, 7, 20, 100, 250 };
enum Poker_PlayerInfoEnum
{
        fivecards_hand[10],
        bool:holdstate[5],
        click_dealbutton,
        Bett,
        Credit,
        LastBackGround
};
new PP_Info[MAX_PLAYERS][Poker_PlayerInfoEnum];
new BackGroundData[][] =
{
        { "LOADSUK:loadscuk" }, { "LOADSUK:loadsc9" },  { "LOADSUK:loadsc8" },
        { "LOADSUK:loadsc7" },  { "LOADSUK:loadsc6" },  { "LOADSUK:loadsc5" },
        { "LOADSUK:loadsc4" },  { "LOADSUK:loadsc3" },  { "LOADSUK:loadsc2" },
        { "LOADSUK:loadsc14" }, { "LOADSUK:loadsc13" }, { "LOADSUK:loadsc12" },
        { "LOADSUK:loadsc11" }, { "LOADSUK:loadsc10" }, { "LOADSUK:loadsc1" },
        { "intro1:intro1" },    { "intro2:intro2" },    { "intro3:intro3" },
        { "intro4:intro4" },    { "ld_shtr:bstars" },   { " " }
};

//Feuerwerk
enum fwInfo
{
        fwid,//created object base id
        Float:fwX,//firework x
        Float:fwY,//firework y
        Float:fwZ,//firework z
        Float:fwA,//firework altitude
        fwLoop//broj pucanja
}
new Firework[MAX_FIREWORKS][fwInfo];

enum fwObjects
{
    Object0,//create launch object
        Object1,//create exploding object 1
        Object2,//create exploding object 2
        Object3,//create exploding object 3
        Object4,//create exploding object 4
        Object5,//create exploding object 5
        Object6//create exploding object 5
}
new FireworkObj[MAX_FIREWORKS][fwObjects];

//Nagelbänder
enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKESTRIPS][sInfo];

//Spedition
enum pHaul
{
	pCapasity,
	pLoad,
	pBenzin
};

new PlayerHaul[100][pHaul];

//FarmerCPan
new Float:FarmerCPan[40][3] = {
{-193.0233,-79.7498,2.6892},
{-170.3249,-19.7671,2.6829},
{-142.2786,53.6658,2.6830},
{-123.7042,106.4680,2.6829},
{-111.1820,142.7357,2.6799},
{-136.6803,157.4716,4.1621},
{-162.3037,151.0645,4.7568},
{-181.0717,126.7880,3.4140},
{-206.8256,88.7258,2.5219},
{-217.8046,70.3912,2.3979},
{-227.9023,50.3754,2.3251},
{-239.5911,24.0716,2.2307},
{-248.2644,0.7174,2.2245},
{-252.3598,-21.1995,2.4212},
{-245.0796,-53.1882,2.6816},
{-220.0998,-57.0119,2.6813},
{-203.6870,-35.6310,2.6813},
{-197.6846,4.1499,2.6736},
{-188.4389,41.8363,2.6819},
{-153.5502,66.6527,2.6826},
{-126.1546,99.4241,2.6828},
{-127.2197,129.8503,2.7179},
{-149.5198,147.3831,3.8867},
{-158.7207,135.2143,3.2875},
{-174.1844,75.1784,2.6828},
{-192.3454,46.8641,2.6827},
{-203.1536,10.5749,2.6812},
{-196.4986,-17.1042,2.6820},
{-205.1801,-43.7131,2.6810},
{-236.1677,-52.9830,2.6819},
{-256.7736,-27.6974,2.5714},
{-259.6113,-0.2810,1.8139},
{-252.9770,41.8689,1.5657},
{-212.4428,145.5863,3.4771},
{-188.3009,166.1026,7.2263},
{-159.7594,160.8135,5.4625},
{-136.4416,133.2267,3.0922},
{-163.2567,60.9662,2.6815},
{-180.2495,32.0213,2.6830},
{-194.0247,-12.7263,2.6752}
};
//PCarSpawns
new Float:PCarSpawns[12][4] = {
{-2257.5452,2390.7915,4.6704,132.9861},
{-2260.8503,2393.9937,4.6671,133.7853},
{-2264.4392,2397.8330,4.6614,134.2484},
{-2267.8115,2401.3542,4.6555,134.7387},
{-2271.5183,2404.9983,4.6524,133.8993},
{-2275.0625,2408.4507,4.6405,133.1687},
{-2278.5967,2412.2139,4.6255,134.4353},
{-2272.2693,2381.1145,4.7015,222.0508},
{-2301.5955,2411.5864,4.6194,225.2221},
{-2294.6279,2404.6653,4.6197,225.7079},
{-2287.2800,2396.8862,4.6205,224.1435},
{-2279.9355,2389.2141,4.6195,224.0468}
};
//PatenSpawns
new Float:PatenSpawns[3][4] = {
{-1682.2247,7.4637,3.2127,224.2968},
{-1685.2123,3.8217,3.2128,224.4917},
{-1689.0179,-0.3032,3.2127,227.4554}
};
//SweeperSpawns
new Float:SweeperSpawns[3][4] = {
{-2523.9641,2365.9797,4.7120,265.5504},
{-2524.3093,2363.3491,4.7113,266.4981},
{-2524.4294,2360.3787,4.7106,268.1686}
};
//JailSpawns
new Float:JailSpawns[4][4] = {
{1551.7869,-1653.6334,1718.9063,268.5626},
{1551.6090,-1657.6014,1718.9063,266.9725},
{1551.8613,-1661.5675,1718.9063,265.4058},
{-1692.2053,-3.3995,3.2128,225.0010}
};
//Autoscooter
new Float:AutoscooterSpawns[8][4] = {
{235.0118,-1934.5962,7.4070,180.4615},
{233.5731,-1934.5712,7.4070,180.4616},
{232.4294,-1934.6167,7.4070,177.7459},
{231.3534,-1934.6451,7.4070,177.2028},
{230.1180,-1934.7114,7.4067,181.0046},
{229.1210,-1934.4830,7.4067,177.2028},
{227.9691,-1934.6796,7.4067,180.4615},
{226.9509,-1934.6519,7.4067,179.3752}
};

//Paintballspawns
new Float:PaintballSpawns[8][4] = {
{1487.0409,-1568.6982,67.2109,359.8455},
{1510.9397,-1553.5166,67.2109,273.7615},
{1537.4446,-1572.0901,67.2109,263.8992},
{1540.9054,-1521.7202,67.2109,55.7003},
{1501.9213,-1520.6688,67.2072,269.9597},
{1493.0873,-1528.1688,67.2072,80.1407},
{1471.8021,-1528.0371,67.2072,133.0945},
{1454.2115,-1546.4261,67.2072}
};
new Float:PaintballSpawns2[9][4] = {
{-969.7877,1041.1392,1345.0581,353.9707},
{-973.1732,1028.1407,1345.0476,91.4601},
{-1025.5862,1048.1229,1342.2623,32.5320},
{-1046.2500,1074.5575,1344.1298,272.7749},
{-1066.4099,1091.8290,1343.2583,88.6585},
{-1082.5400,1043.5903,1343.6298,61.2311},
{-1135.8772,1028.4344,1345.7533,1.4883},
{-1136.2305,1074.9137,1345.8003,176.0141},
{-1133.3506,1091.1705,1345.7972,266.7144}
};
new Float:PaintballSpawns3[8][4] = {
{6273.1816,-2160.9834,2.6822,0.4878},
{6259.8169,-2129.4385,3.4054,175.5567},
{6235.7192,-2136.1184,2.6822,181.8026},
{6220.5410,-2162.6763,2.6822,175.8283},
{6217.0229,-2203.7554,9.2931,4.0184},
{6246.2397,-2178.1995,2.6822,20.5834},
{6246.5435,-2159.0193,3.1053,171.2120},
{6229.5815,-2112.4031,2.6822,180.7163}
};

//Driftspawns
new Float:DriftSpawns[5][5] = {
	{-249.9440,1428.5079,119.9612,316.8112},
	{-255.0947,1433.6383,119.9612,316.1085},
	{-260.3284,1439.0532,119.9612,314.9711},
	{-267.6789,1446.3650,119.9612,225.0991},
	{-262.5323,1452.3337,119.9607,227.0893}
};

//MotorradSpawns
new Float:MotorradSpawns[3][5] = {
	{-2546.7544,2460.7207,18.1759,232.8911},
	{-2540.6289,2455.6140,17.8635,227.4408},
	{-2529.4814,2445.3625,17.3395,227.3278}
};

//WaffenprüfungsSpawns
new Float:WaffenSpawns[8][5] = {
	{300.0846,-138.5736,1004.0625,90.2746},
	{300.0857,-137.0350,1004.0625,92.9902},
	{300.0826,-135.5254,1004.0625,90.5462},
	{300.0862,-134.0649,1004.0625,91.3608},
	{300.0829,-132.5118,1004.0625,84.8434},
	{300.0767,-131.0108,1004.0625,87.8306},
	{300.0766,-129.4776,1004.0625,94.0764},
	{300.0789,-127.9202,1004.0625,91.0893}
};

//Blitzer
enum _camera
{
	Float:_x,
	Float:_y,
	Float:_z,
	Float:_rot,
	_range,
	_limit,
	_fine,
	_usemph,
	_objectid,
	bool:_active
}
new SpeedCameras[CAMERA_LIMIT][_camera],currentid = -1,Text:flash;

//Gangwarsystem
enum fsSyS{
	Float:fsMinX,
	Float:fsMinY,
	Float:fsMaxX,
	Float:fsMaxY,
	Float:fsCTFx,
	Float:fsCTFy,
	Float:fsCTFz,
	fsOwnerFaction,
	fsAttackFaction,
	fsKillsOfOwner,
	fsKillsOfAttack,
	fsFightTime,
	fsCTF[3],
	fsLastFight,
	fsZoneID,
	fsFlag,
	Text3D:fstext[34],
	Text:fsWinFaction,
	Text:fsLoseFaction,
	Text:fsWinKills,
	Text:fsLoseKills,
	Text:fsTime,
	fsFightTimeCool
};
new FightSystem[][fsSyS]={
	/*MinX, MinY, MaxX, MaxY, CTFx, CTFy, CTFz*/
	{-2135.883, 132.5009, -2004.552, 341.584,-2098.7874,257.9268,36.1320},//Baustelle
	{-2657.345, 1339.66, -2572.366, 1517.183,-2624.6077,1412.7463,7.0938},//JizzysClub
	{-2792.539, 310.0244, -2603.268, 487.5477,-2706.2275,375.7513,4.9688},//Baseballclub
	{-2506.7,740.0255,-2383.094,826.8147,-2456.8440,786.6223,35.1719},//Markt
	{-1850.044,1438.284,-1710.987,1584.248,-1783.4037,1537.8256,7.1875},//Hafen
	{-618.9274, -560.538, -432.0814, -467.115,-576.2951,-506.7666,25.5234}//LSAußen
};
new Text:Fight,Text:FightUnderline;
new FightTimer[2];

//Sonnenbrille
new Float:SkinOffSet[300][7] = {
{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968 }, // - 0
{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 1
{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 2
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 3
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 4
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 5
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 6
{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968 }, // - 7
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 8
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968 },  // - 9
{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968 }, // - 10
{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 11
{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 12
{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 13
{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 14
{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968 }, // - 15
{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968 },  // - 16
{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968 }, // - 17
{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968 }, // - 18
{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968 }, // - 19
{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968 }, // - 20
{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 21
{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 22
{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968 }, // - 23
{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968 }, // - 24
{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968 }, // - 25
{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968 }, // - 26
{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968 }, // - 27
{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968 }, // - 28
{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968 },  // - 29
{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968 }, // - 30
{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968 }, // - 31
{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968 },// - 32
{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968 }, // - 33
{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968 }, // - 34
{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 35
{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 36
{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 37
{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 38
{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 39
{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 40
{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968 }, // - 41
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 42
{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968 }, // - 43
{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968 }, // - 44
{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 45
{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 46
{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968 }, // - 47
{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968 }, // - 48
{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968 }, // - 49
{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 50
{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 51
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 52
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 53
{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 54
{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 55
{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968 }, // - 56
{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968 }, // - 57
{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968 }, // - 58
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 59
{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968 }, // - 60
{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000 }, // - 61
{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000 },  // - 62
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 63
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 64
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 65
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 66
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 67
{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000 }, // - 68
{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000 }, // - 69
{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000 },  // - 70
{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 71
{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 72
{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 73
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 74
{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 75
{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 76
{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 77
{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 78
{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 79
{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000 }, // - 80
{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000 }, // - 81
{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 82
{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 83
{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 84
{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 85
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 86
{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000 }, // - 87
{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 88
{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 89
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 90
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 91
{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 92
{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 93
{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 94
{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 95
{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 96
{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 97
{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 98
{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 99
{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000 }, // - 100
{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000 }, // - 101
{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 102
{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 103
{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 104
{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 105
{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 106
{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000 }, // - 107
{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000 },  // - 108
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 109
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 110
{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 111
{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 112
{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000 }, // - 113
{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 114
{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 115
{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 116
{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000 }, // - 117
{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000 }, // - 118
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 119
{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000 }, // - 120
{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000 }, // - 121
{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000 }, // - 122
{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000 }, // - 123
{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000 },  // - 124
{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 125
{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 126
{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 127
{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 128
{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000 },  // - 129
{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000 },  // - 130
{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000 }, // - 131
{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000 }, // - 132
{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000 }, // - 133
{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000 }, // - 134
{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000 }, // - 135
{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 136
{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 137
{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000 }, // - 138
{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000 }, // - 139
{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000 }, // - 140
{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000 }, // - 141
{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000 }, // - 142
{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000 }, // - 143
{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000 }, // - 144
{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000 },  // - 145
{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000 }, // - 146
{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000 },  // - 147
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 148
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 149
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 150
{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000 }, // - 151
{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000 }, // - 152
{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000 },  // - 153
{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000 }, // - 154
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 155
{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000 }, // - 156
{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000 }, // - 157
{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000 }, // - 158
{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000 }, // - 159
{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000 }, // - 160
{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000 },  // - 161
{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000 }, // - 162
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 163
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 164
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 165
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 166
{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000 },  // - 167
{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 168
{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 169
{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000 }, // - 170
{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000 }, // - 171
{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000 }, // - 172
{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 173
{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 174
{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 175
{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000 }, // - 176
{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000 }, // - 177
{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000 }, // - 178
{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 179
{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 180
{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000 }, // - 181
{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000 }, // - 182
{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000 }, // - 183
{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000 }, // - 184
{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000 }, // - 185
{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000 }, // - 186
{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000 },  // - 187
{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000 },  // - 188
{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 189
{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 190
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 191
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 192
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 193
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 194
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 195
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 196
{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 197
{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 198
{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 199
{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 200
{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 201
{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000 }, // - 202
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 203
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 204
{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000 }, // - 205
{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000 }, // - 206
{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000 }, // - 207
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 208
{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000 }, // - 209
{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000 }, // - 210
{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000 }, // - 211
{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000 },  // - 212
{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 213
{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 214
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 215
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 216
{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 217
{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000 }, // - 218
{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000 }, // - 219
{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000 }, // - 220
{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000 },  // - 221
{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000 }, // - 222
{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000 }, // - 223
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 224
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 225
{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 226
{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000 }, // - 227
{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000 }, // - 228
{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 229
{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 230
{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 231
{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 232
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 233
{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 234
{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 235
{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000 }, // - 236
{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000 }, // - 237
{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000 }, // - 238
{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000 },  // - 239
{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 240
{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 241
{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 242
{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 243
{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000 }, // - 244
{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000 },  // - 245
{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000 }, // - 246
{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000 },  // - 247
{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000 }, // - 248
{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000 },  // - 249
{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000 }, // - 250
{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000 }, // - 251
{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 252
{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 253
{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 254
{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000 },  // - 255
{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 256
{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 257
{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 258
{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 259
{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000 }, // - 260
{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000 }, // - 261
{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 262
{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 263
{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 264
{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 265
{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000 }, // - 266
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 267
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 268
{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 269
{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000 },  // - 270
{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 271
{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 272
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 273
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 274
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 275
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 276
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 277
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 278
{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 279
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 280
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 281
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 282
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 283
{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000 },  // - 284
{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000 },  // - 285
{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000 }, // - 286
{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000 },  // - 287
{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000 }, // - 288
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 289
{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000 }, // - 290
{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000 }, // - 291
{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000 }, // - 292
{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000 }, // - 293
{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000 },  // - 294
{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000 }, // - 295
{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000 }, // - 296
{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000 },  // - 297
{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000 }, // - 298
{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000 }  // - 299
};

enum {
CommonRed = 19006,
CommonOrange,
CommonGreen,
CommonBlue,
CommonPurple,
CommonEspiral,
CommonBlack,
CommonEyes,
CommonXadrex,
CommonTransparent,
CommonXRayVision,
SquareFormatYellow,
SquareFormatOrange,
SquareFormatRed,
SquareFormatBlue,
SquareFormatGreen,
RayBanGray,
RayBanBlue,
RayBanPurple,
RayBanPink,
RayBanRed,
RayBanOrange,
RayBanYellow,
RayBanGreen,
CircularNormal,
CircularYellow,
CircularRed,
CircularBlack,
CircularXadrex,
CircularThunders,
};

//Handy
enum handyenum
{
        Nummer,
        Akku,
        bool:On
};
new Handy[MAX_PLAYERS][handyenum];

//Autoradio
enum r_info
{
	r_Name[NAME_SIZE],
	r_Link[LINK_SIZE]
};

enum v_info
{
	RadioPlaying,
	Text:r_Draw
};

new r_RadioInfo[MAX_RADIO_STATIONS][r_info];
new v_VehicleInfo[MAX_VEHICLES][v_info];
new RadioCount = 0;

//Feuersystem
enum FlameInfo
{
	Flame_id,
	Flame_Exists,
	Float:Flame_x,
	Float:Flame_y,
	Float:Flame_z,
	Smoke[5],
}

new Flame[MAX_FLAMES][FlameInfo];
new ExtTimer[MAX_PLAYERS];
new PlayerOnFire[MAX_PLAYERS];
new PlayerOnFireTimer[MAX_PLAYERS];
new PlayerOnFireTimer2[MAX_PLAYERS];
new Float:PlayerOnFireHP[MAX_PLAYERS];

//Fahrzeugnamen
new VehicleNames[212][] =
{
	"400 - Landstalker",   "401 - Bravura",   "402 - Buffalo",   "403 - Linerunner",   "404 - Pereniel",   "405 - Sentinel",   "406 - Dumper",   "407 - Firetruck",   "408 - Trashmaster",   "409 - Limosine",
	"410 - Manana",   "411 - Infernus",   "412 - Voodoo",   "413 - Pony",   "414 - Mule",   "415 - Cheetah",   "416 - Ambulance",   "417 - Leviathan",   "418 - Moonbeam",   "419 - Esperanto",   "420 - Taxi",
	"421 - Washington",   "422 - Bobcat",   "423 - Mr Whoopee",   "424 - BF Injection",   "425 - Hunter",   "426 - Premier",   "427 - Enforcer",   "428 - Securicar",   "429 - Banshee",   "430 - Predator",
	"431 - Bus",   "432 - Rhino",   "433 - Barracks",   "434 - Hotknife",   "435 - Trailer",   "436 - Previon",   "437 - Coach",   "438 - Cabbie",   "439 - Stallion",   "440 - Rumpo",   "441 - RC Bandit",	"442 - Romero",
	"443 - Packer",   "444 - Monster",   "445- Admiral",   "446 - Squalo",   "447 - Seasparrow",   "448 - Pizzaboy",   "449 - Tram",   "450 - Trailer",   "451 - Turismo",   "452 - Speeder",   "453 - Reefer",   "454 - Tropic",   "455 - Flatbed",
	"456 - Yankee",   "457 - Caddy",   "458 - Solair",   "459 - Berkley's RC Van",   "460 - Skimmer",   "461 - PCJ-600",   "462 - Faggio",   "463 - Freeway",   "464 - RC Baron",   "465 - RC Raider",
	"466 - Glendale",   "467 - Oceanic",   "468 - Sanchez",   "469 - Sparrow",   "470 - Patriot",   "471 - Quad",   "472 - Coastguard",   "473 - Dinghy",   "474 - Hermes",   "475 - Sabre",   "476 - Rustler",
	"477 - ZR350",   "478 - Walton",   "479 - Regina",   "480 - Comet",   "481 - BMX",   "482 - Burrito",   "483 - Camper",   "484 - Marquis",   "485 - Baggage",   "486 - Dozer",   "487 - Maverick",   "488 - News Chopper",
	"489 - Rancher",   "490 - FBI Rancher",   "491 - Virgo",   "492 - Greenwood",   "493 - Jetmax",   "494 - Hotring",   "495 - Sandking",   "496 - Blista Compact",   "497 - Police Maverick",
	"498 - Boxville",   "499 - Benson",   "500 - Mesa",   "501 - RC Goblin",   "502 - Hotring Racer",   "503 - Hotring Racer",   "504 - Bloodring Banger",   "505 - Rancher",   "506 - Super GT",
	"507 - Elegant",   "508 - Journey",   "509 - Bike",   "510 - Mountain Bike",   "511 - Beagle",   "512 - Cropdust",   "513 - Stunt",   "514 - Tanker",   "515 - RoadTrain",   "516 - Nebula",   "517 - Majestic",
	"518 - Buccaneer",   "519 - Shamal",   "520 - Hydra",   "521 - FCR-900",   "522 - NRG-500",   "523 - HPV1000",   "524 - Cement Truck",   "525 - Tow Truck",   "526 - Fortune",   "527 - Cadrona",   "528 - FBI Truck",
	"529 - Willard",   "530 - Forklift",   "531 - Tractor",   "532 - Combine",   "533 - Feltzer",   "534 - Remington",   "535 - Slamvan",   "536 - Blade",   "537 - Freight",   "538 - Streak",   "539 - Vortex",   "540 - Vincent",
	"541 - Bullet",   "542 - Clover",   "543 - Sadler",   "544 - Firetruck",   "545 - Hustler",   "546 - Intruder",   "547 - Primo",   "548 - Cargobob",   "549 - Tampa",   "550 - Sunrise",   "551 - Merit",   "552 - Utility",
	"553 - Nevada",   "554 - Yosemite",   "555 - Windsor",   "556 - Monster",   "557 - Monster",   "558 - Uranus",   "559 - Jester",   "560 - Sultan",   "561 - Stratum",   "562 - Elegy",   "563 - Raindance",   "564 - RC Tiger",
	"565 - Flash",   "566 - Tahoma",   "567 - Savanna",   "568 - Bandito",   "569 - Freight",   "570 - Trailer",   "571 - Kart",   "572 - Mower",   "573 - Duneride",   "574 - Sweeper",   "575 - Broadway",
	"576 - Tornado",   "577 - AT-400",   "578 - DFT-30",   "579 - Huntley",   "580 - Stafford",   "581 - BF-400",   "582 - Newsvan",   "583 - Tug",   "584 - Trailer",   "585 - Emperor",   "586 - Wayfarer",
	"587 - Euros",   "588 - Hotdog",   "589 - Club",   "590 - Trailer",   "591 - Trailer",   "592 - Andromada",   "593 - Dodo",   "594 - RC Cam",   "595 - Launch",   "596 - Police Car (LSPD)",   "597 - Police Car (SFPD)",
	"598 - Police Car (LVPD)",   "599 - Police Ranger",   "600 - Picador",   "601 - S.W.A.T. Van",   "602 - Alpha",   "603 - Phoenix",   "604 - Glendale",   "605 - Sadler",   "606 - Luggage Trailer A",
	"607 - Luggage Trailer B",   "608 - Stair Trailer",   "609 - Boxville",   "610 - Farm Plow",   "611 - Utility Trailer"
};

//Anti BadWords
new badwords[][]= {
	{"Fick"},
	{"Opfer"},
	{"Nutte"},
	{"Stinkt"},
	{"Hure"},
	{"Arschloch"},
	{"Maul"},
	{"Kiddy"},
	{"Spassti"},
	{"hurensohn"},
	{"Mutterficker"},
	{"Pisser"},
	{"Bitch"},
	{"Biatch"},
	{"Drecktskind"},
	{"Schlampe"},
	{"Missgeburt"},
	{"Bastard"},
	{"Noob"}
};

//Anti BadNames
new badnames[][]= {
	{"Fick"},
	{"Opfer"},
	{"Nutte"},
	{"Stinkt"},
	{"Hure"},
	{"Arschloch"},
	{"Maul"},
	{"Kiddy"},
	{"Spassti"},
	{"Hurensohn"},
	{"Mutterficker"},
	{"Pisser"},
	{"Schlampe"},
	{"Missgeburt"},
	{"Adolf"},
	{"Hitler"},
	{"Merkel"},
	{"Bushido"},
	{"scheissserver"},
	{"darktrigardon"},
	{"MYSQL"},
	{"MYSQL_DROP"},
	{"MYSQL_CREATE"},
	{"MYSQL_SELECT"},
	{"MYSQL_DELETE"},
	{"MYSQL_GET"},
	{"baysideroleplay"},
	{"HaXXor"},
	{"Fiedel"},
	{"Motherfucker"},
	{"Jubidensohn"},
	{"ScheissJuden"},
	{"Werbung"},
	{"HaXXXor"},
	{"HaxXxor"},
	{"Psychosandman"},
	{"Pyschosandmann"},
	{"Daniel06Ger"},
	{"Godfather"},
	{"Buggymen"},
	{"Buggyman"},
	{"Bastard"},
	{"[NES]"},
	{"Red_Bull"}
};

//BadTones
new badtone[][]= {
	{"Youtube"},
	{"MyVideo"},
	{"Clipfisch"},
	{"Youporn"},
	{"Iload"}
};

//Anti IP
new IPDelimiters[] =
{
	'.',
	',',
	'|',
	'/' // Hinter das Letzte kein Komma
};

new AllowedIPs[][16] =
{
	"62.141.45.39"
};

//Ein und Ausgänge
enum pckCoords_enum
{
	Float:posxx,
	Float:posyy,
	Float:poszz,
	labeltext[160],
	labelcolor
}

new IDsafePickups[59];
new Text3D:IDsafeLabels[59];

new pckCoords[59][pckCoords_enum] =
{
	{   -2240.7166,2319.8894,5.2307, "[* {FFFFFF}Rathaus Eingang {0C9BCB} *]\n [* {FFFFFF}Öffnungszeiten 10-24 Uhr{0C9BCB} *]\n [* {FFFFFF}Enter zum betreten drücken! {0C9BCB}*]", 0x0C9BCBFF}, // Rathaus Eingang
	{   390.7697,173.8253,1008.3828, "", 0x0C9BCBFF}, // Rathaus Ausgang
	{   -2537.5479,2318.6868,4.9844, "[* {FFFFFF}Kleidungsladen Eingang {0C9BCB} *]\n [* {FFFFFF}Öffnungszeiten 8-20 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Kleidungsladen Eingang
	{   207.6072,-111.2670,1005.1328, "", 0x0C9BCBFF}, // Kleidungsladen Ausgang
	{   -2518.7241,2318.6863,4.9844, "[* {FFFFFF}Handy Laden{0C9BCB}*]\n [* {FFFFFF}Öffnungszeiten 12-21 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Handyladen Eingang
	{   1003.5349,52.1074,55.3221, "", 0x0C9BCBFF}, // Handyladen Ausgang
	{   -2479.4573,2317.5981,4.9844, "[* {FFFFFF}Lotterie {0C9BCB}*]", 0x0C9BCBFF}, // Lotterie Eingang
	{   -2240.7825,137.1596,1035.4141, "", 0x0C9BCBFF}, // Lotterie Ausgang
	{   -2280.3120,2328.2429,5.0776, "[* {FFFFFF}Ammunation {0C9BCB} *]\n [* {FFFFFF}Öffnungszeiten 16-24 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Ammunation Eingang
	{   316.3888,-170.2967,999.5938, "", 0x0C9BCBFF}, //Ammunation Ausgang
	{   -2492.4592,2363.1697,10.2773, "[* {FFFFFF}24/7 Shop {0C9BCB}*]", 0x0C9BCBFF}, // 24/7 Shop Eingang
	{   -25.8760,-188.1267,1003.5469, "", 0x0C9BCBFF},  // 24/7 Shop Ausgang
	{   -2443.8179,2316.9805,5.0138, "[* {FFFFFF}Hotel {0C9BCB}*]\n[* {FFFFFF}Freie Zimmer 8 von 8{0C9BCB} *]", 0x0C9BCBFF}, // Hotel Eingang
	{   2214.3970,-1150.5410,1025.7969, "", 0x0C9BCBFF}, // Hotel Ausgang
	{   -2452.0239,2359.3518,5.2733, "[* {FFFFFF}Feuerwehr Zentrale {0C9BCB}*]\n [* {FFFFFF}Enter zum betreten drücken! {0C9BCB}*]", 0x0C9BCBFF}, // Feuerwehr Eingang
	{   246.8301,62.3260,1003.6406, "", 0x0C9BCBFF}, // Feuerwehr Ausgang
	{   -2482.0464,2406.6677,17.1094, "[* {FFFFFF}Kirche {0C9BCB} *]\n [* {FFFFFF}Öffnungszeiten 9-15 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Kirche Eingang
	{   3145.1921,-3003.9109,13.2368, "", 0x0C9BCBFF}, // Kirche Ausgang
	{   -2463.7390,2018.5245,10.5797, "[* {FFFFFF}Sonnenbrillen Geschäft{0C9BCB}*]\n [* {FFFFFF}Öffnungszeiten 10-18 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Sonnenbrillen Eingang
	{   662.6385,-573.4182,16.3359, "", 0x0C9BCBFF}, // Sonnenbrillen
	{   2537.1221,2667.4993,11.2663, "[* {FFFFFF}Zum Adminhof {0C9BCB}*]", 0x0C9BCBFF}, // Zum Adminhof
	{   2527.7219,2716.1057,10.8203, "[* {FFFFFF}Zum Adminhaus {0C9BCB}*]", 0x0C9BCBFF}, // Zum Adminhaus
	{   2537.0200,2689.2493,11.4694, "[* {FFFFFF}Adminhaus {0C9BCB}*]", 0x0C9BCBFF}, // Adminhaus Eingang
	{   967.9880,-53.0381,1001.1246, "", 0x0C9BCBFF}, // Adminhaus Ausgang
	{   -2289.8489,2282.1296,6.0922, "[* {FFFFFF}Bank Eingang {0C9BCB} *]", 0x0C9BCBFF}, // Bank Eingang
	{   1414.8069,-988.9510,1639.7843, "", 0x0C9BCBFF}, // Bank Ausgang
	{   -2279.3713,2299.4475,5.5002, "[* {FFFFFF}Krankenhaus {0C9BCB}*]", 0x0C9BCBFF}, // Krankenhaus Eingang
	{   1246.1445,325.6047,-11.7422, "", 0x0C9BCBFF}, // Krankenhaus Ausgang
	{   1233.1001,310.4630,-11.7422, "[* {FFFFFF}Zum Dach{0C9BCB} *]", 0x0C9BCBFF}, // Krankenhaus Dach
	{   -2268.7583,2307.3718,11.1724, "[* {FFFFFF}Zum Erdgeschoss{0C9BCB} *]", 0x0C9BCBFF}, // Krankenhaus Erdgeschoss
	{  -2245.5457,2359.1033,4.9837, "[* {FFFFFF}Bayside Police Department{0C9BCB} *]", 0x0C9BCBFF}, // BSPD Eingang
	{  1550.1669,-1684.5842,1723.1094, "", 0x0C9BCBFF}, // BSPD Ausgang
	{  -2747.1960,105.4822,7.7496, "[* {FFFFFF}MS-14 Hauptquatier{0C9BCB} *]", 0x0C9BCBFF}, // MS-14 Eingang
	{  2448.7031,-1907.2384,3819.2493, "", 0x0C9BCBFF}, // MS-14 Ausgang
	{  -2482.8521,2004.0331,10.6211, "[* {FFFFFF}Well Stacked Pizza{0C9BCB} *]\n [* {FFFFFF}Öffnungszeiten 8-24 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Pizzaladen eingang
	{  372.2964,-133.5190,1001.4922, "", 0x0C9BCBFF}, // Pizzaladen ausgang
	{  -2482.7048,1928.5189,10.5785, "[* {FFFFFF}Mc Fit{0C9BCB} *]\n [* {FFFFFF}24h Geöffnet{0C9BCB} *]", 0x0C9BCBFF}, // mcfit eingang
	{  -2485.1699,1924.2555,10.5785, "[* {FFFFFF}Mc Fit{0C9BCB} *]\n [* {FFFFFF}24h Geöffnet{0C9BCB} *]", 0x0C9BCBFF}, // mcfit eingang
	{  773.9257,-78.8474,1000.6628, "", 0x0C9BCBFF}, // mcfit ausgang
	{  -2307.5388,1962.6222,1.8002, "[* {FFFFFF}Hall of Fame{0C9BCB} *]", 0x0C9BCBFF}, // hof eingang
	{  2109.4487,-1034.8369,-14.4399, "", 0x0C9BCBFF}, // hof ausgang
	{   -2473.5894,2239.6763,4.8295, "[* {FFFFFF}Burgershot {0C9BCB} *]\n [* {FFFFFF}Öffnungszeiten 8-24 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Burgershot Eingang
	{   362.9121,-75.2081,1001.5078, "", 0x0000FFFF}, // Burgershot Ausgang
	{  -2478.4971,-152.3384,33.9496, "[* {FFFFFF}Crip or Die Hauptquatier{0C9BCB} *]", 0x0C9BCBFF}, // cod Eingang
	{  -82.3463,-244.1203,2700.6147, "", 0x0C9BCBFF}, // cod Ausgang
	{   -2447.1248,2281.1252,5.0457, "[* {FFFFFF}Casino {0C9BCB} *]\n [* {FFFFFF}Öffnungszeiten 22-5 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Casino Eingang
	{   2019.0719,1017.8480,996.8750, "", 0x0000FFFF}, // Casino Ausgang
	{   -2485.8960,2272.0300,4.9892, "[* {FFFFFF}Caligulas Discothek Eingang {0C9BCB} *]\n [* {FFFFFF}Öffnungszeiten 20-4 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Club Eingang 1
	{   493.3791,-24.8555,1000.6797, "", 0x0C9BCBFF}, // Club Ausgang
	{   1571.0432,-1337.0941,16.4844, "[* {FFFFFF}Startower{0C9BCB} *]", 0x0C9BCBFF}, // startower Eingang 1
	{   1548.6759,-1363.7408,326.2183, "", 0x0C9BCBFF}, // startower Ausgang
	{   -2379.1545,2444.6084,10.1694, "[* {FFFFFF}Eingang{0C9BCB} *]", 0x0C9BCBFF}, // autopate eingang
	{   2361.7607,-1550.4591,-24.5000, "", 0x0C9BCBFF}, // autopate ausgang
	{   -2516.5688,2456.7678,18.3349, "[* {FFFFFF}Fahrschule Eingang{0C9BCB}*]\n [* {FFFFFF}Öffnungszeiten 8-24 Uhr{0C9BCB} *]", 0x0C9BCBFF}, // Fahrschule Eingang
	{   1494.4530,1303.5782,1093.2891, "", 0x0C9BCBFF}, // Fahrschule Ausgang
	{   -2521.5293,2295.3135,4.9844, "[* {FFFFFF}Pferderennen Eingang {0C9BCB}*]", 0x0C9BCBFF}, // Pferderennen Eingang
	{   834.6620,7.4286,1004.187, "", 0x0C9BCBFF}, // Pferderennen Ausgang
	{   -2026.2426,67.1633,28.6916, "[* {FFFFFF}Feuerwehr Zentrale {0C9BCB}*]\n [* {FFFFFF}Enter zum betreten drücken! {0C9BCB}*]", 0x0C9BCBFF}, // Feuerwehr SF Eingang
	{   1769.5823,2105.1353,10.8219, "[* {FFFFFF}Feuerwehr Zentrale {0C9BCB}*]\n [* {FFFFFF}Enter zum betreten drücken! {0C9BCB}*]", 0x0C9BCBFF} // Feuerwehr LV Eingang
};

//Forwards
forward SpinSpinners(playerid);
forward Prespin(playerid);
forward GiveResult(playerid);
forward SetPlayerWonPaid(playerid);
forward Desktop_Function(playerid);
forward Fight_Close();
forward FightUpdate_1();
forward FightUpdate_2();
forward LoadFactionCars();
forward SaveFactionCars(bool:destroy);
forward DestroyAndCreateFactionCar(fc);
forward RemoveComponent(vehicleid,componentid);
forward ChangePaintjob(vehicleid,paintjobid);
forward ChangeColor(vehicleid,color1,color2);
forward RespawnFactionBuylist();
forward RestartBallon();
forward UpdatePlayerCar(playerid);
forward LoadPlayerCar(playerid);
forward TextDrawDizajn(playerid, index);
forward TextDrawDizajn2(playerid, win, rank, first, second);

main()
{
	print("----------------------------------------");
	printf(" Bayside-Roleplay %s geladen - by Nemesus.de!",Version);
	print(" Copyright 2011-2022 by Nemesus & sHoOTi.");
	print("------------------------------------------");
	print("");
}

//Stocks die vor OnGameModeInit geladen werden müssen
//Slotmachine
stock Text:CreateSprite(Float:X,Float:Y,Name[],Float:Width,Float:Height)
{
	new Text:RetSprite;
	RetSprite = TextDrawCreate(X, Y, Name);
	TextDrawFont(RetSprite, 4);
	TextDrawColor(RetSprite,0xFFFFFFFF);
	TextDrawTextSize(RetSprite,Width,Height);
	return RetSprite;
}

stock Text:CreateBox(Float:X,Float:Y,Float:Width,Float:Height,color)
{
	new Text[500];
	for(new i=floatround(Y); i < floatround(Y+Height);i++)
	{
		strcat(Text,"~n~_");
	}
	new Text:RetSprite;
	RetSprite = TextDrawCreate(X, Y, Text);
	TextDrawFont(RetSprite, 0);
	TextDrawColor(RetSprite,0xFFFFFFFF);
	TextDrawTextSize(RetSprite,Width+X,Height+Y);
	TextDrawUseBox(RetSprite,1);
	TextDrawBoxColor(RetSprite,color);
	TextDrawLetterSize(RetSprite,0.0001,0.1158);
	return RetSprite;
}

ShowPlayerSlots(playerid,slot1,slot2,slot3)
{
	TextDrawHideForPlayer(playerid,Digit1[0]);
	TextDrawHideForPlayer(playerid,Digit2[0]);
	TextDrawHideForPlayer(playerid,Digit3[0]);

	TextDrawHideForPlayer(playerid,Digit1[1]);
	TextDrawHideForPlayer(playerid,Digit2[1]);
	TextDrawHideForPlayer(playerid,Digit3[1]);

	TextDrawHideForPlayer(playerid,Digit1[2]);
	TextDrawHideForPlayer(playerid,Digit2[2]);
	TextDrawHideForPlayer(playerid,Digit3[2]);

	TextDrawHideForPlayer(playerid,Digit1[3]);
	TextDrawHideForPlayer(playerid,Digit2[3]);
	TextDrawHideForPlayer(playerid,Digit3[3]);

	TextDrawHideForPlayer(playerid,Digit1[4]);
	TextDrawHideForPlayer(playerid,Digit2[4]);
	TextDrawHideForPlayer(playerid,Digit3[4]);

	TextDrawHideForPlayer(playerid,Digit1[5]);
	TextDrawHideForPlayer(playerid,Digit2[5]);
	TextDrawHideForPlayer(playerid,Digit3[5]);


	TextDrawShowForPlayer(playerid,Digit1[slot1]);
	TextDrawShowForPlayer(playerid,Digit2[slot2]);
	TextDrawShowForPlayer(playerid,Digit3[slot3]);

	TextDrawShowForPlayer(playerid,Box);
}

stock HideSlotsForPlayer(playerid)
{
	TextDrawHideForPlayer(playerid,Digit1[0]);
	TextDrawHideForPlayer(playerid,Digit2[0]);
	TextDrawHideForPlayer(playerid,Digit3[0]);

	TextDrawHideForPlayer(playerid,Digit1[1]);
	TextDrawHideForPlayer(playerid,Digit2[1]);
	TextDrawHideForPlayer(playerid,Digit3[1]);

	TextDrawHideForPlayer(playerid,Digit1[2]);
	TextDrawHideForPlayer(playerid,Digit2[2]);
	TextDrawHideForPlayer(playerid,Digit3[2]);

	TextDrawHideForPlayer(playerid,Digit1[3]);
	TextDrawHideForPlayer(playerid,Digit2[3]);
	TextDrawHideForPlayer(playerid,Digit3[3]);

	TextDrawHideForPlayer(playerid,Digit1[4]);
	TextDrawHideForPlayer(playerid,Digit2[4]);
	TextDrawHideForPlayer(playerid,Digit3[4]);

	TextDrawHideForPlayer(playerid,Digit1[5]);
	TextDrawHideForPlayer(playerid,Digit2[5]);
	TextDrawHideForPlayer(playerid,Digit3[5]);

	TextDrawHideForPlayer(playerid,Box);
}

stock PutPlayerInSlotMachine(playerid, firstBet=MIN_Bet,  startBalance=0)
{
	if(Gambling[playerid] != G_STATE_NOT_GAMBLING) return print("Schon in der Slotmachine!");

	Gambling[playerid] = G_STATE_READY;
	TextDrawShowForPlayer(playerid,ReadyText);
	TextDrawShowForPlayer(playerid,BetText[playerid]);
	TextDrawShowForPlayer(playerid,VerText);

	Slots[playerid][0] = random(5);
	Slots[playerid][1] = random(5);
	Slots[playerid][2] = random(5);

	ShowPlayerSlots(playerid,Slots[playerid][0],Slots[playerid][1],Slots[playerid][2]);

	Bet[playerid] = firstBet;

	GivePlayerEuro(playerid,-startBalance);

	Balance[playerid] = startBalance;

	UpdateBetText(playerid);

	TogglePlayerControllable(playerid,false);
	return 1;
}

stock ExitPlayerFromSlotMachine(playerid)
{
	if(Gambling[playerid] == G_STATE_NOT_GAMBLING) return 0;
	HideSlotsForPlayer(playerid);
	Gambling[playerid] = G_STATE_NOT_GAMBLING;

	TogglePlayerControllable(playerid,true);

	TextDrawHideForPlayer(playerid,ReadyText);
	TextDrawHideForPlayer(playerid,BetText[playerid]);
	TextDrawHideForPlayer(playerid,VerText);

	new str[128];
	if(Balance[playerid] > 0) format(str,sizeof(str),"~g~Restgeld: %d Euro",Balance[playerid]);
	else format(str,sizeof(str),"~r~Du verlierst dein Geld. Hoer besser auf zu spielen.",Balance[playerid]);
	GameTextForPlayer(playerid,str,5000,4);

	GivePlayerEuro(playerid,Balance[playerid]);
	return 1;
}

stock GetNextValidBet(value)
{
	if(value + Bet_STEP > MAX_Bet) return MIN_Bet;
	return value + Bet_STEP;
}

stock UpdateBetText(playerid)
{
	new str[128];
	new prefix[4];
	if(Balance[playerid] == 0) strcat(prefix,"~r~");
	if(Balance[playerid]  > 0) strcat(prefix,"~g~");

	format(str,sizeof(str),"~w~Einsatz: ~g~%d E_____~w~Restgeld: %s%d E",Bet[playerid],prefix,Balance[playerid]);
	TextDrawSetString(BetText[playerid],str);
}

//Anti Cheat SetPlayerPos
stock SetPlayerPosEx(playerid, Float: x, Float: y, Float: z)
{
	if (IsPlayerConnected (playerid))
	{
		if (SetPlayerPos (playerid, x, y, z))
		{
		    CheatPosX[playerid] = x;
		    CheatPosY[playerid] = y;
		    CheatPosZ[playerid] = z;
		}
	}
}

//Anti Cheat SetPlayerPosExFindZ
stock SetPlayerPosFindZEx(playerid, Float: x, Float: y, Float: z)
{
	if (IsPlayerConnected (playerid))
	{
		if (SetPlayerPosFindZ (playerid, x, y, z))
		{
		    CheatPosX[playerid] = x;
		    CheatPosY[playerid] = y;
		    CheatPosZ[playerid] = z;
		}
	}
}

//Random Stocks
stock Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
	new Float:TGTDistance;

	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new Float:tmpX, Float:tmpY, Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}

//Speed ermitteln
stock Float:GetPlayerSpeedXY(playerid)
{
new Float:SpeedX, Float:SpeedY, Float:SpeedZ;
new Float:Speed;
if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), SpeedX, SpeedY, SpeedZ);
else GetPlayerVelocity(playerid, SpeedX, SpeedY, SpeedZ);
Speed = floatsqroot(floatadd(floatpower(SpeedX, 2.0), floatpower(SpeedY, 2.0)));
return floatmul(Speed, 200.0);
}

//Publics vor OnGameModeInit
//Pferderennen
forward GameTimeTimer();
public GameTimeTimer()
{
 	HorseCD = 3;
 	HorseStop = 0;
 	RaceStarted = 1;

	BG2 = TextDrawCreate(0, 0, "LD_OTB:bckgrnd");
    TextDrawFont(BG2, 4);
    TextDrawColor(BG2,0xFFFFFFFF);
    TextDrawTextSize(BG2,640,200);

	BG1 = TextDrawCreate(0, 0, "LD_OTB:trees");
    TextDrawFont(BG1, 4);
    TextDrawColor(BG1,0xFFFFFFFF);
    TextDrawTextSize(BG1,640,480);

	Start2 = TextDrawCreate(-170, 145, "LD_OTB:pole2");
    TextDrawFont(Start2, 4);
    TextDrawColor(Start2,0xFFFFFFFF);
    TextDrawTextSize(Start2,256,200);

	Finish2 = TextDrawCreate(365, 145, "LD_OTB:pole2");
    TextDrawFont(Finish2, 4);
    TextDrawColor(Finish2,0xFFFFFFFF);
    TextDrawTextSize(Finish2,256,200);

    Horse1 = TextDrawCreate(0, 200, "LD_OTB:hrs8");
    HorseInfo(Horse1);
    HorsePosX1 = 0;

    Horse2 = TextDrawCreate(0, 250, "LD_OTB:hrs8");
    HorseInfo(Horse2);
    HorsePosX2 = 0;

    Horse3 = TextDrawCreate(0, 300, "LD_OTB:hrs8");
    HorseInfo(Horse3);
    HorsePosX3 = 0;

    Horse4 = TextDrawCreate(0, 350, "LD_OTB:hrs8");
    HorseInfo(Horse4);
    HorsePosX4 = 0;

    HorseNum1 = TextDrawCreate(15, 204, "LD_OTB2:Ric1");
    HorseNumInfo(HorseNum1);

    HorseNum2 = TextDrawCreate(15, 254, "LD_OTB2:Ric2");
    HorseNumInfo(HorseNum2);

    HorseNum3 = TextDrawCreate(15, 304, "LD_OTB2:Ric3");
    HorseNumInfo(HorseNum3);

    HorseNum4 = TextDrawCreate(15, 354, "LD_OTB2:Ric4");
    HorseNumInfo(HorseNum4);

	Start = TextDrawCreate(-170, 338, "LD_OTB:pole2");
    TextDrawFont(Start, 4);
    TextDrawColor(Start,0xFFFFFFFF);
    TextDrawTextSize(Start,256,200);

	Finish = TextDrawCreate(365, 338, "LD_OTB:pole2");
    TextDrawFont(Finish, 4);
    TextDrawColor(Finish,0xFFFFFFFF);
    TextDrawTextSize(Finish,256,200);

	CDTextDraw = TextDrawCreate(310,235,"3");
	TextDrawAlignment(CDTextDraw,0);
 	TextDrawBackgroundColor(CDTextDraw,0x000000ff);
  	TextDrawFont(CDTextDraw,2);
   	TextDrawLetterSize(CDTextDraw,0.5,2);
    TextDrawColor(CDTextDraw,0x00ff0099);
    TextDrawSetOutline(CDTextDraw,1);
    TextDrawSetProportional(CDTextDraw,1);
    TextDrawSetShadow(CDTextDraw,1);

	HorseAnimCount = 1;
	Prepared = 1;

 	SetTimer("HorseStartTimer", 2027, false);
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerInRangeOfPoint(i,15.0, 833.3153,7.6225,1004.1797) && Watching[i] == 1)
		{
			SendClientMessageToAll(Gelb2, "Das Pferderennen hat begonnen... Du kannst keine Wetten mehr setzen!");
			PlayerPlaySound(i, 5410, 0.0, 0.0, 0.0);
		}
		if(IsPlayerInRangeOfPoint(i,1.0, 833.3153,7.6225,1004.1797) && Watching[i] == 1)
		{
			PlayerPlaySound(i, 5401, 0.0, 0.0, 0.0);
		}
    }
}

//Server initialisierung
public OnGameModeInit()
{
	new string[128];
	//Script Sicherung
	AntiDeAMX();

	//MYSQL Verbindung
	ConnectMySQL();
	#if DEBUG==0
		mysql_debug(0);
	#endif
	#if DEBUG==1
		mysql_debug(1);
	#endif
	CheckMySQL();

	//Werbung
	adopen = 0;

	AddPlayerClass(56, -2624.8716,2255.8379,8.1374,271.0459, 0, 0, 0, 0, 0, 0);
	LoadSonstiges();
	#if defined DATENBANK
		if(Datenbank == 0) { CreateDatenbank(); }
	#endif
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	format(string,sizeof(string),"BSRP %s",Version);
	SetGameModeText(string);
	LimitGlobalChatRadius(1.0);
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	ShowNameTags(1);
	ShowPlayerMarkers(0);
	ManualVehicleEngineAndLights();
	DefineHouseInteriors();
	Fight_Init();
	LoadHaus();
	LoadBizz();
	LoadWerbetafel();
	
	//Wetter setzen
	SetWeather(2);

	//Einweisung
	noeinweisung = 1;

	//Autoscooter
	autoscooteroffen = 0;

	//Pferderennen
	RaceStarted = 0;
	Prepared = 0;
	Horsemsg = 1;
	PferderennenNews = 0;

	//Lotto
	LottoNews = 0;

	//Feuersystem
	Flammen = 0;
	FeuerwehrOn = 0;

	//Schwarzmarkt
	Johnn = 0;

	//DJ Absperrung
	djopen = 0;

	//Bots
	#if NPCSS==1
	ConnectNPC("Mike","zivispawnmike");
 	ConnectNPC("Dominique","nutte1");
 	ConnectNPC("Volker","abody");
 	ConnectNPC("Ralle","b3");
	ConnectNPC("Tom","tankwart");
	ConnectNPC("Jack","jack");
	ConnectNPC("DJ_Paddy","adj");
	ConnectNPC("Phillip","abk");
	ConnectNPC("Lumar","ahd");
	ConnectNPC("Dennis","b1");
	ConnectNPC("Peter","guard");
	ConnectNPC("Pascal","pascal");
	ConnectNPC("WannisVater","wvater");
	ConnectNPC("Wanni","blow1");
	ConnectNPC("Neko","blow2");
	ConnectNPC("Maya","rennen");
	ConnectNPC("Michael","clubb");
	ConnectNPC("Patrick","bank1");
    ConnectNPC("Lissa","bank2");
	ConnectNPC("Magger","Flugbot");
	ConnectNPC("DDealer","dealerquest");
	ConnectNPC("DDDealer","drogen");
	ConnectNPC("Otto","pdj");
	ConnectNPC("Sasa","botsasa");
	#endif
	//Alle Animationen laden
	SendRconCommand("reloadfs animations");

	//Schwarzmarkt
 	CreateSchwarzmarkt();

	//Mechatroniker
	MechaOn = 0;

	//Normale Textdraws
	//Uhr
	Clock = TextDrawCreate(547.0, 24.0, "--:--");
	TextDrawLetterSize(Clock, 0.6, 1.8);
	TextDrawFont(Clock, 3);
	TextDrawSetOutline(Clock, 2);
 	//Schwarze Balken
	lbt = TextDrawCreate(-1.000000,1.000000,"---");
	lbb = TextDrawCreate(-10.000000,338.000000,"---");//0 //338
	TextDrawUseBox(lbt,1);
	TextDrawBoxColor(lbt,0x000000ff);
	TextDrawTextSize(lbt,641.000000,-69.000000);
	TextDrawUseBox(lbb,1);
	TextDrawBoxColor(lbb,0x000000ff);
	TextDrawTextSize(lbb,640.000000,-75.000000); //65
	TextDrawAlignment(lbt,0);
	TextDrawAlignment(lbb,0);
	TextDrawBackgroundColor(lbt,0x000000ff);
	TextDrawBackgroundColor(lbb,0x000000ff);
	TextDrawFont(lbt,3);
	TextDrawLetterSize(lbt,1.000000,12.199999);
	TextDrawFont(lbb,3);
	TextDrawLetterSize(lbb,0.899999,16.000000);
	TextDrawColor(lbt,0x000000ff);
	TextDrawColor(lbb,0x000000ff);
	TextDrawSetOutline(lbt,1);
	TextDrawSetOutline(lbb,1);
	TextDrawSetProportional(lbt,1);
	TextDrawSetProportional(lbb,1);
	TextDrawSetShadow(lbt,1);
	TextDrawSetShadow(lbb,1);
	//Werbung
	Ad1 = TextDrawCreate(660.000000, 436.000000, "_");
	TextDrawBackgroundColor(Ad1, 255);
	TextDrawFont(Ad1, 1);
	TextDrawLetterSize(Ad1, 0.500000, 2.099999);
	TextDrawColor(Ad1, -1);
	TextDrawSetOutline(Ad1, 0);
	TextDrawSetProportional(Ad1, 1);
	TextDrawSetShadow(Ad1, 1);
	TextDrawUseBox(Ad1, 1);
	TextDrawBoxColor(Ad1, 100);
	TextDrawTextSize(Ad1, -20.000000, 0.000000);
	Ad2 = TextDrawCreate(0.000000, 437.000000, "~g~Werbung: ~w~Hier kannst du eine Werbung verfassen. ~y~Kontakt: ~w~Werbung [Bei einem Werbepunkt /ad]");
	TextDrawBackgroundColor(Ad2, 255);
	TextDrawFont(Ad2, 1);
	TextDrawLetterSize(Ad2, 0.300000, 1.000000);
	TextDrawColor(Ad2, -1);
	TextDrawSetOutline(Ad2, 0);
	TextDrawSetProportional(Ad2, 1);
	TextDrawSetShadow(Ad2, 1);
	//Intro
	Intro = TextDrawCreate(59.000000, 380.000000, "Bayside-Roleplay.de Presents . . .");
	TextDrawBackgroundColor(Intro, 255);
	TextDrawFont(Intro, 3);
	TextDrawLetterSize(Intro, 0.629999, 2.200000);
	TextDrawColor(Intro, -65281);
	TextDrawSetOutline(Intro, 0);
	TextDrawSetProportional(Intro, 1);
	TextDrawSetShadow(Intro, 1);
	Intro2 = TextDrawCreate(59.000000, 366.000000, "~w~von den Machern von Dark-Trigardon und~n~ Dark-Trigardon Reloaded");
	TextDrawBackgroundColor(Intro2, 255);
	TextDrawFont(Intro2, 3);
	TextDrawLetterSize(Intro2, 0.629999, 1.200000);
	TextDrawColor(Intro2, -65281);
	TextDrawSetOutline(Intro2, 0);
	TextDrawSetProportional(Intro2, 1);
	TextDrawSetShadow(Intro2, 1);
	Intro3 = TextDrawCreate(59.000000, 366.000000, "~w~ein neues Projekt von Nemesus.de");
	TextDrawBackgroundColor(Intro3, 255);
	TextDrawFont(Intro3, 3);
	TextDrawLetterSize(Intro3, 0.629999, 1.200000);
	TextDrawColor(Intro3, -65281);
	TextDrawSetOutline(Intro3, 0);
	TextDrawSetProportional(Intro3, 1);
	TextDrawSetShadow(Intro3, 1);
	Intro4 = TextDrawCreate(59.000000, 366.000000, "~w~erscheint ein neues phaenomenales Projekt");
	TextDrawBackgroundColor(Intro4, 255);
	TextDrawFont(Intro4, 3);
	TextDrawLetterSize(Intro4, 0.629999, 1.200000);
	TextDrawColor(Intro4, -65281);
	TextDrawSetOutline(Intro4, 0);
	TextDrawSetProportional(Intro4, 1);
	TextDrawSetShadow(Intro4, 1);
	Intro5 = TextDrawCreate(172.000000, 167.000000, "Bayside-Roleplay.de");
	TextDrawBackgroundColor(Intro5, 255);
	TextDrawFont(Intro5, 0);
	TextDrawLetterSize(Intro5, 1.280000, 5.099999);
	TextDrawColor(Intro5, -16776961);
	TextDrawSetOutline(Intro5, 0);
	TextDrawSetProportional(Intro5, 1);
	TextDrawSetShadow(Intro5, 1);
	//Blitzertextdraw Flasheffekt
	flash = TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(flash,1);
	TextDrawBoxColor(flash,0xffffff66);
	TextDrawTextSize(flash,660.000000,22.000000);
	TextDrawAlignment(flash,0);
	TextDrawBackgroundColor(flash,0x000000ff);
	TextDrawFont(flash,3);
	TextDrawLetterSize(flash,1.000000,52.200000);
	TextDrawColor(flash,0xffffffff);
	TextDrawSetOutline(flash,1);
	TextDrawSetProportional(flash,1);
	TextDrawSetShadow(flash,1);
	//Paintball Textdraw
	PBText = TextDrawCreate(119.000000,431.000000,"~w~Paintball gerade am gewinnen: ~y~Keiner.");
	TextDrawAlignment(PBText,0);
	TextDrawBackgroundColor(PBText,0x000000ff);
	TextDrawFont(PBText,1);
	TextDrawLetterSize(PBText,0.499999,1.000000);
	TextDrawColor(PBText,0xffffffff);
	TextDrawSetOutline(PBText,1);
	TextDrawSetProportional(PBText,1);
	TextDrawSetShadow(PBText,1);
 	//Offene Tickets
    OTickets = TextDrawCreate(523.000000, 143.000000, "Offene Tickets = 0");
	TextDrawBackgroundColor(OTickets, 255);
	TextDrawFont(OTickets, 1);
	TextDrawLetterSize(OTickets, 0.270000, 1.000000);
	TextDrawColor(OTickets, -1);
	TextDrawSetOutline(OTickets, 0);
	TextDrawSetProportional(OTickets, 1);
	TextDrawSetShadow(OTickets, 1);
	TextDrawUseBox(OTickets, 1);
	TextDrawBoxColor(OTickets, 255);
	TextDrawTextSize(OTickets, 610.000000, -40.000000);
	//NO-DM Textdraw
 	NoDMTextdraw = TextDrawCreate(280.000000, 370.000000, "NO-DM Zone");
  	TextDrawBackgroundColor(NoDMTextdraw, -0xFAFAFAFF);
   	TextDrawFont(NoDMTextdraw, 3);
    TextDrawLetterSize(NoDMTextdraw, 0.419999, 2.599998);
    TextDrawColor(NoDMTextdraw, -1);
    TextDrawSetOutline(NoDMTextdraw, 1);
    TextDrawSetProportional(NoDMTextdraw, 1);
	//Script Version
	Script1 = TextDrawCreate(53.000000, 324.000000, "Bayside-Roleplay");
	TextDrawBackgroundColor(Script1, 255);
	TextDrawFont(Script1, 0);
	TextDrawLetterSize(Script1, 0.629999, 2.199999);
	TextDrawColor(Script1, 16711935);
	TextDrawSetOutline(Script1, 0);
	TextDrawSetProportional(Script1, 1);
	TextDrawSetShadow(Script1, 1);
	Script2 = TextDrawCreate(126.000000, 345.000000, "Version 1.0 RC5");
	TextDrawBackgroundColor(Script2, 255);
	TextDrawFont(Script2, 1);
	TextDrawLetterSize(Script2, 0.200000, 1.000000);
	TextDrawColor(Script2, -1);
	TextDrawSetOutline(Script2, 0);
	TextDrawSetProportional(Script2, 1);
	TextDrawSetShadow(Script2, 1);
	format(string,sizeof(string),"Version %s",Version);
	TextDrawSetString(Script2,string);
	//Textdraws für Fahrzeuge
	for(new v = 0; v < MAX_VEHICLES; v ++)
	{
	    //Autoradio
		v_VehicleInfo[v][r_Draw] = TextDrawCreate(95.000000, 304.000000, "Aktuelle Radiostation: ~n~~w~Radio");
		TextDrawAlignment(v_VehicleInfo[v][r_Draw], 2);
		TextDrawBackgroundColor(v_VehicleInfo[v][r_Draw], 255);
		TextDrawFont(v_VehicleInfo[v][r_Draw], 1);
		TextDrawLetterSize(v_VehicleInfo[v][r_Draw], 0.400000, 1.899999);
		TextDrawColor(v_VehicleInfo[v][r_Draw], 1002045439);
		TextDrawSetOutline(v_VehicleInfo[v][r_Draw], 1);
		TextDrawSetProportional(v_VehicleInfo[v][r_Draw], 1);
	}
	//Radiostationen
	AddRadioStation("Radio aus","Off",1);
	AddRadioStation("Housetime.FM","http://listen.housetime.fm/dsl.pls",1); //Housetime
	AddRadioStation("Technobase.FM","http://listen.technobase.fm/dsl.pls",1); //Technobase
	AddRadioStation("Clubtime.FM","http://listen.clubtime.fm/dsl.pls",1); //Clubttime
	AddRadioStation("Trancebase.FM","http://listen.trancebase.fm/dsl.pls",1); //Trancetime
	AddRadioStation("Coretime.FM","http://listen.coretime.fm/dsl.pls",1); //Coretime
	AddRadioStation("Techno4Ever","http://listen.to.techno4ever.fm",1); //Techno4ever

	//Slotmachine
	LoadSlotmachine();

	//Haussystem
	for(new h = 0; h < Houses_Index; h++)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
   			CreatePickup(1273, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],-1);
			pickups++;
		}
		if(HouseInfo[h][hOwned] == 1)
		{
			CreatePickup(1239, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],-1);
			pickups++;
		}
	}
	//Businesssystem
	for(new h = 0; h < sizeof(BizzInfo); h++)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			CreatePickup(1272, 1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
		if(BizzInfo[h][bOwned] == 1)
		{
			CreatePickup(1239, 1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
			pickups++;
		}
	}
	//Poker
	for(new i = 0; i < sizeof(PokerPositions); i++)
	{
		PokerLabel[i] = CreateDynamic3DTextLabel("Poker\n benutze {0087FF}/poker {FFFFFF}\num zu spielen!", 0xFFFFFFFF, PokerPositions[i][0], PokerPositions[i][1], PokerPositions[i][2],8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	//Bankautomaten
	for(new i = 0; i < sizeof(Bankautomaten); i++)
	{
		Bankautomatenl[i] = CreateDynamic3DTextLabel("Bankautomat\n benutze {0087FF}Taste [Space] {FFFFFF}\num diesen zu benutzen!", 0xFFFFFFFF, Bankautomaten[i][0], Bankautomaten[i][1], Bankautomaten[i][2],8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	//Slotmachine
	for(new i = 0; i < sizeof(BanditLocs); i++)
	{
		GambleLabel[i] = CreateDynamic3DTextLabel("Slot Machine\n benutze {0087FF}/slotmachine {FFFFFF}\num zu spielen!", 0xFFFFFFFF, BanditLocs[i][0], BanditLocs[i][1], BanditLocs[i][2],8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	//Waffenautomat
	for(new i = 0; i < sizeof(WaffenautomatP); i++)
	{
		Waffenautomat[i] = CreateDynamic3DTextLabel("Waffenautomat\n benutze {0087FF}Taste [Space] {FFFFFF}\num den Waffenautomat zu bedienen!", 0xFFFFFFFF, WaffenautomatP[i][0], WaffenautomatP[i][1], WaffenautomatP[i][2]+0.7,11.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	//Checkpoints
	ScheinCP1=CreateDynamicCP(1490.6849,1305.7920,1093.2964,1.5,-1,3); // Fahrschule Scheine
	HandyCP1=CreateDynamicCP(1005.8662,53.0409,55.3221-1.0,1.5,-1,0); // Handy Kaufen
	PferdeCP1=CreateDynamicCP(830.5977,-0.2779,1004.1797-1.0,1.2,-1,3); // Pferderennen 1
	PferdeCP2=CreateDynamicCP(833.6002,3.1582,1004.1797-1.0,1.2,-1,3); // Pferderennen 2
	CityCP=CreateDynamicCP(361.8299,173.6736,1008.3828-1.0,1.2,-1,3); // Rathaus

	//Timer
	SetTimer("Timer2",3129,true); // 3 Sekunden Timer für alle
	SetTimer("Timer1",1039,true); // Timer 1 Sekunde
	SetTimer("Speicherung",3999969,true); // Speicherungs Timer 60 Minuten ( ca 66.Mins)
	SetTimer("MinuteTimer", 60103, true); // 1 Minuten Timer
	SetTimer("MMinuteTimer", 1800831, true); // 10 Minuten Timer
	#if SpeicherTimer==1
		SetTimer("SpielerSpeichern", 300631, true); // 5 Minuten Timer
	#endif
	//Einmalige Timer
	SetTimer("CreateHouseCar", 15053, false); // Hauscars erstellen lassen
	#if NPCSS==1
		SetTimer("ConnectBots", 5279, false); // Bots Connecten lassen
	#endif
	SetTimer("RestartBallon", 1804631, false); // 10 Minuten Timer
	//Fahrzeuge
	//Blitzer
	CreateSpeedCam(-2496.4211,2431.7104,16.6880,134.2555,18,90,0);
	CreateSpeedCam(-2333.0688,2400.5640,5.9220,72.3655,15,90,0);
	CreateSpeedCam(-2602.9204,2427.3586,14.8671,143.5710,16,90,0);
	CreateSpeedCam(-2727.8269,2339.9370,71.9411,176.2859,15,125,0);
	CreateSpeedCam(-2733.4346,2372.3804,72.0273,30.3506,14,125,0);
	CreateSpeedCam(1660.4084,295.7632,30.1908,4.8449,13,125,0);
	CreateSpeedCam(1733.8867,508.1087,28.7802,177.4039,14,125,0);
	//Zivispawn
	CreateServerVehicle(0,481,-2598.7180,2269.3489,7.7279,124.9067,1,1,99); // Fahrrad
	CreateServerVehicle(0,481,-2598.3398,2267.7146,7.7270,124.0481,2,2,99); // Fahrrad
	CreateServerVehicle(0,481,-2598.3198,2265.6143,7.7266,128.2339,3,3,99); // Fahrrad
	CreateServerVehicle(0,481,-2598.1519,2263.7283,7.7269,131.8387,4,4,99); // Fahrrad
	CreateServerVehicle(0,481,-2598.3596,2261.7427,7.7278,136.6878,5,5,99); // Fahrrad
	CreateServerVehicle(0,481,-2598.2322,2259.6113,7.7265,135.9090,6,6,99); // Fahrrad
	//Feuerwehr
	CreateServerVehicle(0,563,-2449.0674,2390.1057,14.9335,101.9236,3,3,98); // Feuerwehr Helikopter
	CreateServerVehicle(0,407,-2426.8672,2359.5981,5.2255,191.1673,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,407,-2435.2615,2357.7012,5.2253,191.1216,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,544,-2414.2878,2353.7012,5.2265,192.4260,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,407,-2443.7229,2355.8430,5.2251,191.2151,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,598,-2449.2405,2347.6228,5.1867,191.2546,3,3,98); // Feuerwehrwagen X
	//Machatroniker
	CreateServerVehicle(0,552,-2525.7285,2355.9670,4.8638,358.4757,39,39,97); // Mechatroniker
	CreateServerVehicle(0,552,-2521.5530,2356.0166,4.8672,359.1028,39,39,97); // Mechatroniker
	CreateServerVehicle(0,552,-2517.3826,2355.9592,4.8652,359.7284,39,39,97); // Mechatroniker
	CreateServerVehicle(0,586,-2512.3525,2353.8787,4.5041,359.2335,39,39,97); // Mechatroniker
	CreateServerVehicle(0,586,-2513.8879,2354.0178,4.5042,359.0427,39,39,97); // Mechatroniker
	CreateServerVehicle(0,586,-2515.3926,2354.1104,4.5041,0.7741,39,39,97); // Mechatroniker
	CreateServerVehicle(0,552,-2504.2532,2360.5569,4.6825,178.0682,39,39,97); // Mechatroniker
	//Fahrschule
	CreateServerVehicle(0,405,-2017.2448,-137.4392,35.2266,90.4868,7,7,95); // Fahrschule
	CreateServerVehicle(0,405,-2017.1387,-144.7086,35.2266,90.4801,7,7,95); // Fahrschule
	CreateServerVehicle(0,405,-2016.9534,-152.1120,35.2266,91.1404,7,7,95); // Fahrschule
	CreateServerVehicle(0,405,-2016.4415,-159.0894,35.2117,93.1164,7,7,95); // Fahrschule
	//Farmer
	CreateServerVehicle(0,532,-67.8431,103.8061,4.0871,254.8533,0,0,93); // Farmer
	CreateServerVehicle(0,532,-32.6260,59.1989,4.0963,68.2189,0,0,93); // Farmer
	CreateServerVehicle(0,532,-58.2518,139.8127,4.0908,209.4904,0,0,93); // Farmer
	CreateServerVehicle(0,532,-29.4985,67.3899,4.0932,68.6835,0,0,93); // Farmer
	CreateServerVehicle(0,532,-19.5484,92.6671,4.0925,111.7351,0,0,93); // Farmer
	//Spedition
	CreateServerVehicle(0,459,-2359.1201,2377.0422,10.6207,52.9324,49,49,91); // Spedition
	CreateServerVehicle(0,459,-2362.6611,2372.3743,10.6188,54.7993,49,49,91); // Spedition
	CreateServerVehicle(0,459,-2366.4370,2366.8269,10.6510,56.0067,49,49,91); // Spedition
	CreateServerVehicle(0,440,-2374.7444,2365.6577,10.6783,52.8119,49,49,91); // Spedition
	CreateServerVehicle(0,440,-2410.1968,2390.4587,10.6834,191.6383,49,49,91); // Spedition
	CreateServerVehicle(0,440,-2405.9946,2391.1689,10.6739,190.4198,49,49,91); // Spedition
	CreateServerVehicle(0,414,-2379.9602,2387.6052,10.6522,54.8205,49,49,91); // Spedition
	CreateServerVehicle(0,414,-2374.1082,2383.2881,10.6594,54.0513,49,49,91); // Spedition
	CreateServerVehicle(0,403,-2406.9536,2379.4502,11.1658,193.2220,49,49,91); // Spedition
	CreateServerVehicle(0,403,-2357.8892,2386.4126,11.1672,324.2346,49,49,91); // Spedition
	CreateServerVehicle(0,413,-2846.9287,1581.0533,13.5708,270.1537,49,49,91); // Spedition
	CreateServerVehicle(0,413,-2847.1741,1587.2064,13.5759,270.0894,49,49,91); // Spedition
	prodcar[0] = CreateServerVehicle(0,435,-2797.9932,1568.9163,13.5598,0.2834,49,49,91); // Spedition Öl Anhänger
	prodcar[1] = CreateServerVehicle(0,435,-2787.5059,1568.8380,13.5646,0.0782,49,49,91); // Spedition Öl Anhänger
	prodcar[2] = CreateServerVehicle(0,435,-2777.3062,1569.0416,13.5718,358.8513,49,49,91); // Spedition Öl Anhänger
	benzintruck[0] = CreateServerVehicle(0,584,-2817.3086,1569.8375,13.5843,359.8145,49,49,91); // Spedition Produkt Anhänger
	//Autoscooter
	CreateServerVehicle(0,539,205.6203,-1970.1381,6.7588,269.7800,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,205.7458,-1966.9297,6.7588,270.2076,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,205.8162,-1963.8309,6.7588,266.3605,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,205.9396,-1960.5295,6.7588,267.6601,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,205.7356,-1957.1178,6.7588,268.6284,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,205.7949,-1953.8346,6.7532,270.5078,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,205.7412,-1950.2079,6.7588,273.3279,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,205.8260,-1946.6357,6.7590,266.7478,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,205.9477,-1943.0087,6.7589,269.8812,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,253.3609,-1941.7269,6.7587,89.1423,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,253.2638,-1945.5585,6.7633,86.3223,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,252.9221,-1949.2660,6.7587,86.3222,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,253.0848,-1953.0674,6.7588,87.8890,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,252.9968,-1956.7673,6.7588,87.7032,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,253.0719,-1960.3640,6.7584,88.3299,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,253.0696,-1964.2434,6.7588,88.1933,-1,-1,92); // Autoscooter Vortex
	CreateServerVehicle(0,539,253.1736,-1968.0837,6.7588,88.2475,-1,-1,92); // Autoscooter Vortex
	//Bayside Newstime Autos (CNN)
	CreateServerVehicle(0,586,-1497.1086,934.3865,6.7890,87.8360,6,6,4); // Bayside-Newstime Roller
	CreateServerVehicle(0,586,-1497.0020,937.6446,6.7891,86.4464,6,6,4); // Bayside-Newstime Roller
	CreateServerVehicle(0,586,-1497.0958,940.9181,6.7890,88.2916,6,6,4); // Bayside-Newstime Roller
	CreateServerVehicle(0,582,-1497.2021,949.0852,7.3233,90.3908,6,6,4); // Bayside-Newstime
	CreateServerVehicle(0,582,-1497.1266,952.4238,7.3245,90.0361,6,6,4); // Bayside-Newstime
	CreateServerVehicle(0,582,-1497.0521,955.6024,7.3247,89.2642,6,6,4); // Bayside-Newstime
	CreateServerVehicle(0,582,-1470.9202,1002.4962,7.3299,359.4536,6,6,4); // Bayside-Newstime
	CreateServerVehicle(0,582,-1477.5260,1002.4472,7.3247,359.0699,6,6,4); // Bayside-Newstime
	CreateServerVehicle(0,582,-1483.1072,1002.3810,7.3232,359.7466,6,6,4); // Bayside-Newstime
	CreateServerVehicle(0,582,-1489.5741,1002.2267,7.3248,0.6240,6,6,4); // Bayside-Newstime
	CreateServerVehicle(0,477,-1458.3844,1000.0600,6.9420,269.9415,6,6,4); // Bayside-Newstime Leaderauto
	CreateServerVehicle(0,473,-1458.3173,1022.3040,-0.2699,270.0221,6,6,4);  // Bayside-Newstime Boot
	CreateServerVehicle(0,488,-1452.1637,1010.8698,6.7556,114.8450,6,6,4);  // Bayside-Newstime Helikopter
	//Adminautos
	shooticar = CreateServerVehicle(0,560,2512.1001,2799.9800,10.5230,179.3697,151,151,100); // Shootis Auto
	nemecar = CreateServerVehicle(0,560,2519.7910,2800.8826,10.5252,180.5027,151,151,100); // Nemesus Auto
	CreateServerVehicle(0,407, 2574.5, 2791.35, 11.0562, 179.582,151,151,100);  // Adminauto
	CreateServerVehicle(0,407, 2566.98, 2791.8, 11.0562, 180.805,151,151,100);  // Adminauto
	CreateServerVehicle(0,406, 2585.6, 2729.58, 12.3563, 92.2107,151,151,100);  // Adminauto
	CreateServerVehicle(0,522, 2524.78, 2808.94, 10.3768, 269.14,151,151,100);  // Adminauto
	CreateServerVehicle(0,522, 2524.97, 2805.97, 10.3771, 268.896,151,151,100);  // Adminauto
	CreateServerVehicle(0,522, 2525.08, 2804.23, 10.3787, 269.604,151,151,100);  // Adminauto
	CreateServerVehicle(0,522, 2524.89, 2802.48, 10.3853, 258.883,151,151,100);  // Adminauto
	CreateServerVehicle(0,468, 2524.49, 2799.45, 10.4836, 258.389,151,151,100);  // Adminauto
	CreateServerVehicle(0,468, 2524.63, 2797.35, 10.4815, 259.062,151,151,100);  // Adminauto
	CreateServerVehicle(0,468, 2524.84, 2795.8, 10.4951, 268.827,151,151,100);  // Adminauto
	CreateServerVehicle(0,471, 2524.68, 2792.92, 10.3011, 271.209,151,151,100);  // Adminauto
	CreateServerVehicle(0,471, 2524.41, 2788.24, 10.3033, 252.376,151,151,100);  // Adminauto
	CreateServerVehicle(0,471, 2524.45, 2790.77, 10.2992, 268.539,151,151,100);  // Adminauto
	CreateServerVehicle(0,409, 2549.73, 2759.55, 10.6221, 141.426,151,151,100);  // Adminauto
	CreateServerVehicle(0,409, 2538.94, 2759.31, 10.6203, 136.668,151,151,100);  // Adminauto
	CreateServerVehicle(0,409, 2527.19, 2759.23, 10.6203, 130.621,151,151,100);  // Adminauto
	CreateServerVehicle(0,411, 2575.01, 2746.98, 10.5438, 359.617,151,151,100);  // Adminauto
	CreateServerVehicle(0,411, 2566.67, 2747.01, 10.5473, 358.364,151,151,100);  // Adminauto
	CreateServerVehicle(0,411, 2557.75, 2746.96, 10.5474, 2.3609,151,151,100);  // Adminauto
	CreateServerVehicle(0,415, 2574.22, 2758.38, 10.6088, 177.654,151,151,100);  // Adminauto
	CreateServerVehicle(0,415, 2566.43, 2757.9, 10.6089, 180.18,151,151,100);  // Adminauto
	CreateServerVehicle(0,415, 2557.13, 2758.84, 10.5934, 177.973,151,151,100);  // Adminauto
	CreateServerVehicle(0,432, 2561.36, 2737.25, 10.8264, 89.9948,151,151,100);  // Adminauto
	CreateServerVehicle(0,429, 2549.67, 2747.44, 10.5, 359.641,151,151,100);  // Adminauto
	CreateServerVehicle(0,429, 2541.72, 2747.54, 10.5011, 359.104,151,151,100);  // Adminauto
	CreateServerVehicle(0,434, 2533.41, 2747.73, 10.7878, 1.13577,151,151,100);  // Adminauto
	CreateServerVehicle(0,434, 2524.35, 2747.06, 10.7822, 357.787,151,151,100);  // Adminauto
	CreateServerVehicle(0,486, 2549.65, 2738.55, 11.0285, 89.9535,151,151,100);  // Adminauto
	CreateServerVehicle(0,514, 2536.29, 2738.97, 11.4078, 90.8454,151,151,100);  // Adminauto
	CreateServerVehicle(0,506, 2505.59, 2719.82, 10.5262, 269.731,151,151,100);  // Adminauto
	CreateServerVehicle(0,494, 2506.07, 2727.61, 10.7123, 271.064,151,151,100);  // Adminauto
	CreateServerVehicle(0,495, 2505.21, 2736.69, 11.1659, 269.561,151,151,100);  // Adminauto
	CreateServerVehicle(0,442, 2505.98, 2744.25, 10.6496, 269.024,151,151,100);  // Adminauto
	CreateServerVehicle(0,451, 2505.16, 2751.56, 10.5239, 268.079,151,151,100);  // Adminauto
	CreateServerVehicle(0,451, 2505.01, 2760.47, 10.5276, 270.284,151,151,100);  // Adminauto
	CreateServerVehicle(0,494, 2505.67, 2723.84, 10.7176, 269.261,151,151,100);  // Adminauto
	CreateServerVehicle(0,506, 2505.65, 2731.44, 10.5165, 267.932,151,151,100);  // Adminauto
	CreateServerVehicle(0,457, 2582.19, 2845.35, 10.4479, 176.48,151,151,100);  // Adminauto
	CreateServerVehicle(0,457, 2585.78, 2845.44, 10.4388, 187.703,151,151,100);  // Adminauto
	CreateServerVehicle(0,457, 2567.69, 2815.37, 10.4556, 357.217,151,151,100);  // Adminauto
	CreateServerVehicle(0,457, 2570.52, 2815.34, 10.4471, 357.029,151,151,100);  // Adminauto
	CreateServerVehicle(0,457, 2576.89, 2845.81, 10.4464, 181.185,151,151,100);  // Adminauto
	CreateServerVehicle(0,457, 2573.7, 2845.92, 10.4598, 175.331,151,151,100);  // Adminauto
	CreateServerVehicle(0,457, 2599.74, 2815.63, 10.4691, 3.54478,151,151,100);  // Adminauto
	CreateServerVehicle(0,457, 2607.57, 2826.23, 10.4507, 2.27495,151,151,100);  // Adminauto
	CreateServerVehicle(0,541, 2574.65, 2770.02, 10.4442, 1.91106,151,151,100);  // Adminauto
	CreateServerVehicle(0,541, 2568.36, 2769.27, 10.4514, 1.06078,151,151,100);  // Adminauto
	CreateServerVehicle(0,541, 2562.04, 2769.27, 10.4453, 359.608,151,151,100);  // Adminauto
	CreateServerVehicle(0,544, 2556.57, 2791.21, 11.0529, 178.461,151,151,100);  // Adminauto
	CreateServerVehicle(0,544, 2551.46, 2791.19, 11.0545, 181.47,151,151,100);  // Adminauto
	CreateServerVehicle(0,530, 2546.57, 2790.48, 10.5547, 176.618,151,151,100);  // Adminauto
	CreateServerVehicle(0,530, 2542.11, 2790.49, 10.5832, 178.786,151,151,100);  // Adminauto
	CreateServerVehicle(0,535, 2552.68, 2767.52, 10.6028, 358.288,151,151,100);  // Adminauto
	CreateServerVehicle(0,535, 2543.67, 2768.95, 10.5846, 2.25215,151,151,100);  // Adminauto
	CreateServerVehicle(0,539, 2537.37, 2769.56, 10.1804, 2.5739,151,151,100);  // Adminauto
	CreateServerVehicle(0,539, 2532.31, 2769.81, 10.0752, 106,151,151,100);  // Adminauto
	CreateServerVehicle(0,539, 2525.68, 2769.7, 10.1805, 357.792,151,151,100);  // Adminauto
	CreateServerVehicle(0,535, 2520.05, 2769.75, 10.584, 92.3998,151,151,100);  // Adminauto
	CreateServerVehicle(0,567, 2540.84, 2728.21, 10.723, 1.01915,151,151,100);  // Adminauto
	CreateServerVehicle(0,588, 2550.4, 2713.23, 10.7354, 0.923411,151,151,100);  // Adminauto
	CreateServerVehicle(0,571, 2537.21, 2728.97, 10.104, 359.036,151,151,100);  // Adminauto
	CreateServerVehicle(0,545, 2533, 2728.51, 10.6333, 358.76,151,151,100);  // Adminauto
	CreateServerVehicle(0,571, 2528.74, 2729.86, 10.0871, 1.2203,151,151,100);  // Adminauto
	CreateServerVehicle(0,572, 2524.45, 2728.72, 10.4001, 359.124,151,151,100);  // Adminauto
	CreateServerVehicle(0,562, 2520.69, 2728.36, 10.4776, 0.224797,151,151,100);  // Adminauto
	CreateServerVehicle(0,574, 2506.48, 2715.77, 10.5445, 268.087,151,151,100);  // Adminauto
	CreateServerVehicle(0,574, 2506.52, 2711.7, 10.5454, 269.512,151,151,100);  // Adminauto
	CreateServerVehicle(0,572, 2509.65, 2706.02, 10.5644, 359.103,151,151,100);  // Adminauto
	CreateServerVehicle(0,571, 2506.61, 2705.69, 10.2826, 0.175252,151,151,100);  // Adminauto
	CreateServerVehicle(0,571, 2505.85, 2748.08, 10.095, 268.618,151,151,100);  // Adminauto
	CreateServerVehicle(0,580, 2521.19, 2761.03, 10.6165, 92.9507,151,151,100);  // Adminauto
	CreateServerVehicle(0,583, 2570.16, 2737.2, 10.3569, 179.324, 151,151,100);  // Adminauto
	CreateServerVehicle(0,583, 2574.69, 2737.23, 10.3476, 184.033,151,151,100);  // Adminauto
	CreateServerVehicle(0,580, 2580.74, 2791.26, 10.6158, 180.488, 151,151,100);  // Adminauto
	CreateServerVehicle(0,557, 2524.14, 2738.38, 11.1882, 89.5614, 151,151,100);  // Adminauto
	CreateServerVehicle(0,481, 2545, 2699.17, 10.4258, 138.105,151,151,100);  // Adminauto
	CreateServerVehicle(0,481, 2541.23, 2699.81, 10.4284, 141.187,151,151,100);  // Adminauto
	CreateServerVehicle(0,481, 2537.77, 2700.08, 10.4283, 132.838,151,151,100);  // Adminauto
	CreateServerVehicle(0,481, 2534.82, 2700.24, 10.4288, 129.964,151,151,100);  // Adminauto
	CreateServerVehicle(0,481, 2531.44, 2700.2, 10.4289, 125.518,151,151,100);  // Adminauto
	CreateServerVehicle(0,495, 2587.03, 2744.34, 11.1682, 90.3738,151,151,100);  // Adminauto
	CreateServerVehicle(0,495, 2586.76, 2752.17, 11.1652, 89.1818,151,151,100);  // Adminauto
	CreateServerVehicle(0,443, 2586.86, 2769.52, 11.4539, 0.192814,151,151,100);  // Adminauto
	CreateServerVehicle(0,495, 2586.67, 2780.69, 11.1739, 88.804,151,151,100);  // Adminauto
	CreateServerVehicle(0,485, 2619.58, 2808.48, 10.4741, 181.339,151,151,100);  // Adminauto
	CreateServerVehicle(0,485, 2619.36, 2817.67, 10.4785, 181.339,151,151,100);  // Adminauto
	CreateServerVehicle(0,485, 2619.9, 2839.98, 10.4774, 181.09,151,151,100);  // Adminauto
	CreateServerVehicle(0,443, 2531.8, 2846.17, 11.4805, 180.723,151,151,100);  // Adminauto
	CreateServerVehicle(0,524, 2513.08, 2813.82, 11.7452, 297.67,151,151,100);  // Adminauto
	CreateServerVehicle(0,425, 2616.83, 2721.54, 37.1083, 85.7469,151,151,100);  // Adminauto
	CreateServerVehicle(0,548, 2561.35, 2828.92, 32.3229, 178.688,151,151,100);  // Adminauto
	CreateServerVehicle(0,488, 2603.63, 2827.71, 30.5312, 181.602,151,151,100);  // Adminauto
	CreateServerVehicle(0,488, 2591.4, 2822.12, 30.5096, 179.425,151,151,100);  // Adminauto
	CreateServerVehicle(0,447, 2641.41, 2817.6, 38.3602, 177.535,151,151,100);  // Adminauto
	CreateServerVehicle(0,563, 2659.59, 2814.17, 39.0208, 169.716,151,151,100);  // Adminauto
	CreateServerVehicle(0,447, 2681.51, 2816.4, 38.325, 180.518,151,151,100);  // Adminauto
	CreateServerVehicle(0,447, 2700.37, 2817.92, 38.3492, 176.953,151,151,100);  // Adminauto
	CreateServerVehicle(0,519, 2705.09, 2746.82, 11.7395, 269.831,151,151,100);  // Adminauto
	CreateServerVehicle(0,513, 2737.84, 2711.16, 11.3705, 1.00149,151,151,100);  // Adminauto
	CreateServerVehicle(0,476, 2716.34, 2708.16, 11.5449, 0.741525,151,151,100);  // Adminauto
	CreateServerVehicle(0,476, 2686.8, 2765.57, 11.5243, 278.379,151,151,100);  // Adminauto
	CreateServerVehicle(0,606, 2622.11, 2791.16, 10.4759, 0.775084,151,151,100);  // Adminauto
	CreateServerVehicle(0,607, 2617.67, 2791.15, 10.4755, 359.3,151,151,100);  // Adminauto
	CreateServerVehicle(0,608, 2614.36, 2791.82, 10.4742, 359.281,151,151,100);  // Adminauto
	gangstercar = CreateServerVehicle(0,415,2424.4148,600.2202,10.5817,270.0500,0,0,100); // Gangsterauto
	//Wohnwagen zum Verkauf
	CreateServerVehicle(0,508,-2583.0720,2402.7190,13.9099,306.6189,-1,-1,102); // Wohnwagen zum Verkauf
	CreateServerVehicle(0,508,-2576.2727,2398.2368,13.9528,326.8786,-1,-1,102); // Wohnwagen zum Verkauf
	CreateServerVehicle(0,508,-2570.0693,2395.2336,14.0957,10.8020,-1,-1,102); // Wohnwagen zum Verkauf
	//Krankenhaus
	CreateServerVehicle(0,416,-2270.2776,2285.5068,4.9716,269.8005,3,1,3); // Krankenhaus
	CreateServerVehicle(0,598,-2270.8176,2291.3066,5.0146,270.2752,3,1,3); // Krankenhaus
	CreateServerVehicle(0,416,-2270.0139,2302.6416,5.0521,272.3629,3,1,3); // Krankenhaus
	CreateServerVehicle(0,598,-2266.0190,2309.2244,5.0208,178.6380,3,1,3); // Krankenhaus
	CreateServerVehicle(0,416,-2265.7285,2315.3965,4.9683,179.5874,3,1,3); // Krankenhaus
	CreateServerVehicle(0,563,-2274.5723,2313.1943,10.7444,269.8782,3,1,3); // Krankenhaus Heli
	//Bayside Police-Department
	CreateServerVehicle(0,497,-2232.1406,2387.6201,4.3169,88.4521,1,2,1); // Bayside Police-Department Helikopter
	CreateServerVehicle(0,497,-2209.0852,2362.9885,4.2408,90.2081,1,2,1); // Bayside Police-Department Helikopter
	CreateServerVehicle(0,430,-2229.4131,2404.0740,0.0654,43.8014,1,2,1); // Bayside Police-Department Boot
	CreateServerVehicle(0,430,-2209.0894,2423.0291,0.0167,45.8375,1,2,1); // Bayside Police-Department Boot
	CreateServerVehicle(0,430,-2235.6863,2438.5042,0.1282,222.3885,1,2,1); // Bayside Police-Department Boot
	CreateServerVehicle(0,430,-2255.6348,2418.2219,0.0819,228.3874,1,2,1); // Bayside Police-Department Boot
	//Wagen vom Paten
	awagen = AddStaticVehicle(494,2365.1240,-1555.7925,-24.0121,287.9918,45,4); // AutoPate Wagen
	//Pilotenbot Flugzeug
 	flugbot = AddStaticVehicle(519,-2375.9568,2316.0615,3.8645,182.8118,1,1); // Flugzeug für den Bot
	//Premium Boot
 	pveh = AddStaticVehicle(473,-2610.9668,2179.8918,-0.2099,269.0919,-1,1); // Premiumboot
 	//Tüv Wagen
 	twagen = AddStaticVehicle(496,-1527.0542,2634.5356,62.2723,180.1285,-1,-1); // tüv Wagen
 	SetVehicleLock(twagen,1);
 	SetVehicleNumberPlate(twagen,"Tüv");
 	//Transporter Wagen
 	transporter = AddStaticVehicle(459,-1874.5657,-151.6239,11.6042,0.1091,-1,-1); // Transporter Wagen
 	Tankmenge[transporter] = GasMax[GetVehicleModel(transporter)-400];
 	SetVehicleNumberPlate(transporter,"Transport");
 	SetVehicleLock(transporter,1);
 	Kennzeichen[transporter] = 1;
	//Weitere Feuerwehrwagen
	//LV
	CreateServerVehicle(0,598,1750.5148,2078.2966,10.8762,179.6140,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,407,1756.9606,2077.9714,11.1092,181.8726,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,407,1763.5612,2077.8647,11.1163,178.9154,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,407,1770.3202,2077.5779,11.1165,179.5662,3,3,98); // Feuerwehrwagen
 	//SF
 	CreateServerVehicle(0,407,-2021.8506,92.8199,28.3509,270.3240,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,407,-2021.2114,84.1995,28.2845,270.7934,3,3,98); // Feuerwehrwagen
	CreateServerVehicle(0,598,-2022.9009,75.5987,28.1747,270.8645,3,3,98); // Feuerwehrwagen
	//Tuning bei Fahrzeugen
	//Shooticar Adminbase
	neonshooti1 = CreateObject(18648,0,0,0,0,0,0);
	neonshooti2 = CreateObject(18648,0,0,0,0,0,0);
	AddVehicleComponent(shooticar,1026);//lsideskirt
	AddVehicleComponent(shooticar,1027);//rsideskirt
	AddVehicleComponent(shooticar,1028);//exhaust
	AddVehicleComponent(shooticar,1032);//roof vent
	AddVehicleComponent(shooticar,1138);//spoiler
	AddVehicleComponent(shooticar,1141);//rbumper
	AddVehicleComponent(shooticar,1141);//fbumper
	AddVehicleComponent(shooticar,1087);//hydrolics
	AddVehicleComponent(shooticar,1010);//nitro x10
	ChangeVehiclePaintjob(shooticar,1);
 	AttachObjectToVehicle(neonshooti1, shooticar,  -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
  	AttachObjectToVehicle(neonshooti2, shooticar,  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
  	SetVehicleNumberPlate(shooticar, "sHoOTi");
	//Nemecar Adminbase
	neonneme1 = CreateObject(18648,0,0,0,0,0,0);
	neonneme2 = CreateObject(18648,0,0,0,0,0,0);
	AddVehicleComponent(nemecar,1026);//lsideskirt
	AddVehicleComponent(nemecar,1027);//rsideskirt
	AddVehicleComponent(nemecar,1028);//exhaust
	AddVehicleComponent(nemecar,1032);//roof vent
	AddVehicleComponent(nemecar,1138);//spoiler
	AddVehicleComponent(nemecar,1141);//rbumper
	AddVehicleComponent(nemecar,1141);//fbumper
	AddVehicleComponent(nemecar,1087);//hydrolics
	AddVehicleComponent(nemecar,1010);//nitro x10
	ChangeVehiclePaintjob(nemecar,0);
	AttachObjectToVehicle(neonneme1, nemecar, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
  	AttachObjectToVehicle(neonneme2, nemecar, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
  	SetVehicleNumberPlate(nemecar, "Nemesus");
  	//Gangsterauto
	boxxen1 = CreateObject(2229,0.0,-0.0,-90.0,0,0,0);
	boxxen2 = CreateObject(2229,-0.0,-0.0,-90.0,0,0,0);
	gweiss1 = CreateObject(18652,0,0,0,0,0,0);
 	gweiss2 = CreateObject(18652,0,0,0,0,0,0);
	AddVehicleComponent(gangstercar,1087);//hydrolics
	AddVehicleComponent(gangstercar,1010);//nitro x10
	AddVehicleComponent(gangstercar,1086);//soundanlage
	AttachObjectToVehicle(gweiss1, gangstercar, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
  	AttachObjectToVehicle(gweiss2, gangstercar, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	AttachObjectToVehicle(boxxen1, gangstercar, 0.10,-0.50,0.50,0,0,180);
  	AttachObjectToVehicle(boxxen2, gangstercar,-0.69,-0.50,0.50,0,0,180);
	//Pickups
	//Mission Reinigung
	missionr = CreatePickup(1239, 2,-2546.8474,2363.6323,4.9844,-1); //Mission Reinigung
	//Autowaffenpakete
	CreatePickup(1239, 1,-1862.0784,-145.2836,11.8984,-1); //Autowaffenpakete
	//Drogen
	CreatePickup(1279, 1,-1114.0348,-1637.1726,76.3672,-1); //Drogenpunkt
	//Autoschalter
	autos = CreatePickup(1239, 2,-1597.1277,66.4858,7.9902,-1); //Autoschalter
	//Crip or Die
	cripa = CreatePickup(1239, 2,-2475.3601,-137.8656,33.6486,-1); //Crip or Die Ausrüstung
	codf = CreatePickup(1239, 2, -84.8107,-307.5139,2700.6064,-1); //MS-14 Fraktionsverwaltung
	//MS-14
	ms14a = CreatePickup(1239, 2, -2756.4661,87.3215,7.0940,-1); //MS-14 Ausrüstung
	ms14f = CreatePickup(1239, 2, 2464.9756,-1911.7463,3819.2493,-1); //MS-14 Fraktionsverwaltung
	//BSPD
	autovergabe = CreatePickup(1239, 2, -2255.1716,2382.0989,4.7619,-1); //BSPD Autovergabe
	ausruestenbspd = CreatePickup(1239, 2, 1560.1185,-1712.2195,1724.5078,-1); //BSPD Ausrüstung
	//Sanitäter
	saus = CreatePickup(1239, 1, 1251.0072,307.6426,-11.7422,-1); //Sanitäter Ausrüstung
	sanikleidung = CreatePickup(1275, 2, 1251.1510,320.4985,-11.7422,-1); //Sanitäter Kleidungspunkt
	behandlung = CreatePickup(1239, 2, 1230.4812,315.3640,-11.7422,0); //Sanitäter Behandlung
	//CNN Kleidungspunkt
	cnnkleidung = CreatePickup(1275, 2, -1502.3926,974.7173,7.2254,-1); //CNN Kleidungspunkt
	//Fahrrad leihen
	fleihen = CreatePickup(1239, 2, -2598.8188,2272.3501,8.3594,-1); //Fahrrad leihen
	//Bayside-Newstime
	cnnz = CreatePickup(1239, 2, -1494.8589,975.8896,7.2254,-1); //CNN Zeitung
	cnnv = CreatePickup(1239, 2, -1507.7516,983.7777,7.2254,-1); //CNN Verwaltung
	//Zivispawn
	ticket = CreatePickup(1274, 2, -2416.9243,2314.2148,4.2915,-1); //Airport Ticketverkauf
	ticket2 = CreatePickup(1274, 2, -1544.0171,-441.1622,6.0000,-1); //Airport Ticketverkauf
	ticket3 = CreatePickup(1274, 2, 1956.7332,-2183.6794,13.5469,-1); //Airport Ticketverkauf
	ticket4 = CreatePickup(1274, 2, 1715.1730,1616.8224,10.0329,-1); //Airport Ticketverkauf
	//Zivispawn
	zinfo = CreatePickup(1239, 2, -2626.0273,2261.9502,8.1556,-1); //Information Zivispawn
	//Rathaus
	pperso = CreatePickup(1581, 2, 359.0909,206.6657,1008.3828); //Personalausweis
	//Binco
	kleidung = CreatePickup(1275, 2, 207.6685,-100.3283,1005.2578); //Kleidungsladen
	//Drift
	driftp = CreatePickup(1248, 1, -2353.8096,2574.5952,24.4739); //Drift
	//Sonnenbrille kaufen
	SunCP1=CreatePickup(1274, 1, 664.8305,-568.7348,16.3433); // Sonnenbrillen kaufen
	//BSPD Duty
	CreateDynamicPickup(1275, 1, 1565.9390,-1671.6768,1723.1094); //BSPD DUTY
	CreateDynamicPickup(1247, 1, 1553.1620,-1675.9523,1723.1094); //Aktenlöschung
	//Zeitungsstände
	CreateDynamicPickup(2894, 1, -2626.5479,2249.7253,8.1624); //Zeitungsstand
	CreateDynamicPickup(2894, 1, -2244.0732,2336.3325,4.9680); //Zeitungsstand
	CreateDynamicPickup(2894, 1, -2467.3345,2240.2593,4.7897); //Zeitungsstand
	//Fahzeug Übertragungspunkt
	CreateDynamicPickup(1239, 1, -2336.2256,2051.0430,10.4132); //Fahzeug Übertragungspunkt
	CreateDynamicPickup(1239, 1, -2294.0964,2233.5754,4.9822); //Fahzeug Übertragungspunkt
	//Werbepunkte
	CreateDynamicPickup(1239, 1, -1506.5461,1001.1448,7.1875); //Werbepunkt
	CreateDynamicPickup(1239, 1, -2478.0146,2237.2798,4.8428); //Werbepunkt
	CreateDynamicPickup(1239, 1, -2243.7861,2331.8669,4.9676); //Werbepunkt
	//Handyladen
	CreateDynamicPickup(1239, 1, 1009.8480,60.7600,55.3221); //Handy Akku Ladepunkt
	CreateDynamicPickup(1239, 1, 1012.8786,50.7204,55.3221); //Klingelton
	//Bank
	CreateDynamicPickup(1274, 1, 1433.4547,-997.3876,1639.7911); //Bank
	//Lotterie
	CreateDynamicPickup(1239, 1, -2237.1738,130.1773,1035.4141); //Lottoschein kaufen
	//DJ Umkleide
	CreateDynamicPickup(1275, 1, 476.4065,-18.5188,1003.6953); //DJ Umkleide
	//Speditions Duty
	CreateDynamicPickup(1275, 1, -2366.0803,2388.4983,11.6310); //Speditions Duty
	//Farmer Duty
	CreateDynamicPickup(1275, 1, -23.4511,74.4178,3.1096); //Farmer Duty
	//Mechatroniker Duty
	CreateDynamicPickup(1275, 1, -2507.2278,2367.7224,4.9831); //Mechatroniker Duty
	//Feuerwehr Dienstpunkt/Umkleide
	CreateDynamicPickup(1275, 1, 255.3144,73.6985,1003.6406); //Feuerwehr Dienstpunkt/Umkleide
	//Feuerwehr Ausrüstung
	CreateDynamicPickup(366, 1, 240.3112,78.7722,1005.0391); //Feuerwehr Ausrüstung
	//Waffenhänderjob
	CreateDynamicPickup(353, 1, 306.4004,-159.1712,999.5938); //Waffenhänderjob
	//Drogenhändlerjob
	CreateDynamicPickup(1279, 1, -1112.2057,-1676.2168,76.3672); //Drogenhändlerjob
	//Materialpunkte
	wget = CreatePickup(1254, 2, -2514.0281,2291.4368,4.9844); //Materialien Abholpunkt
	wgive = CreatePickup(1313, 2, -2556.2112,1147.3525,55.7266); //Waffenhändler Bringpunkt
	//Adminbase Minigun
	CreateDynamicPickup(362, 2, 2563.1270,2848.3879,11.1217); //Minigun
	//Paintballarena
	CreatePickup(1248, 0, -2456.6682,2304.7434,4.9844); //Paintballarena
	//autoscooter
	CreatePickup(1935, 0, -2456.6675,2257.5745,4.9785); //autoscooter
	//3DTexte
	//Verhörungsraum
	CreateDynamic3DTextLabel("{FFFFFF}Stadtreinigungs Mission!",Weiß,-2546.8474,2363.6323,4.9844+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Stadtreinigungs Mission
	//Verhörungsraum
	drugss = CreateDynamic3DTextLabel("{FFFF00}Verhörungsraum\n{FFFFFF}/enter um diesen zu betreten.",Weiß,1555.8982,-1716.3313,1724.5078+ 0.5,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Verhörungsraum
	//Drogen
	drugss = CreateDynamic3DTextLabel("{FFFF00}Drogenstelle /getdrugs.\n{FFFFFF}Verfügbare Drogen: {FFFF00}0\n{FFFFFF}Preis pro Gramm: {FFFF00}500.",Weiß,-1114.0348,-1637.1726,76.3672+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //drogen
	//Tuev
	CreateDynamic3DTextLabel("{FFFF00}KFZ-Zulassungsstelle\n{FFFFFF}/kfz um dich anzumelden!",Weiß,-1536.1880,2636.2961,55.8359+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //tuev
	//Autoschalter
	CreateDynamic3DTextLabel("{FFFFFF}Autoschalter",Weiß,-1597.1277,66.4858,7.9902+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Autoschalter
	//Garage
	CreateDynamic3DTextLabel("{FFFFFF}Ausfahrt\n{FFFF00}/exit{FFFFFF} um rauszufahren!",Weiß,2527.0708,-2673.5742,13.5560+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //garage raus
	CreateDynamic3DTextLabel("{FFFFFF}Fahrzeuggarage\n{FFFF00}/enter{FFFFFF} um reinzufahren!",Weiß,-2545.5249,2300.1594,4.9844+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //garage
	//Ballon
	CreateDynamic3DTextLabel("{FFFF00}Ballonrundfahrt über Bayside\nPreis: 1000!",Weiß,-2086.5273,2312.7776,23.9993+ 0.4,12.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //ballon
	//Collister
	CreateDynamic3DTextLabel("{FFFF00}Wo ist Jackson_Collister?\nsHoOTi hat ihn doch ausem Leben geboxxt!",Weiß,-1455.7863,2984.1187,77.6516+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //collister
	//Crip or Die
	CreateDynamic3DTextLabel("{FFFF00}* Rest in Peace *\n{FFFFFF}Steve Jobs",Weiß,-2477.0344,-142.8125,33.6486+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //rip
	CreateDynamic3DTextLabel("{FFFF00}Neko_Less\n{FFFFFF}'Its my Life'",Weiß,-2456.8386,-92.9801,26.8178+ 0.2,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //neko
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Crip or Die Waffenlager{FFFFFF}]",Weiß,-2475.3601,-137.8656,33.6486+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Ausrüstung
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Fraktionsverwaltung{FFFFFF}]",0x0C9BCBFF,-84.8107,-307.5139,2700.6064+ 0.4,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //cod Fraktionsverwaltung
	CreateDynamic3DTextLabel("{FFFFFF}/bier\n{FFFF00}Um dir ein Bier zu nehmen!",0x0C9BCBFF,-98.5003,-252.6311,2701.6553+ 0.2,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //cod Fraktionsverwaltung
	//Premium
	CreateDynamic3DTextLabel("{FFFF00}DJ Musikpunkt\n{FFFFFF}/musik2",Weiß,-2479.8928,2000.0913,14.1531+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //DJPunkt Premium
	CreateDynamic3DTextLabel("{FFFF00}Premium\n{FFFFFF}Sektempfang /sekt",Weiß,-2500.6572,2074.1755,1.3516+ 0.7,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Sektempfang
	CreateDynamic3DTextLabel("{FFFF00}Wir bedanken uns bei folgenden Spielern: \n{FFFFFF}Time_Lence\nTcR4xZ\nSimon_Bochino\nLachs_Asteroid\nJohn_Caruzo\niBlacky\nexod 182\nDoktrin",Weiß,-2459.8740,1902.8474,10.7066+ 0.7,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Premium Hall of Fame
	CreateDynamic3DTextLabel("{FFFF00}Premium Tuninggarage\n{FFFFFF}/tuning",Weiß,-2282.5913,2000.7354,3.8759+ 0.5,12); //Premium Tuninggarage
	CreateDynamic3DTextLabel("{FFFF00}Fahrzeugübertragungspunkt --> Premiuminsel\n{FFFFFF}/fahrzeugue",Weiß,-2294.0964,2233.5754,4.9822+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Fahrzeugübertragungspunkt
    CreateDynamic3DTextLabel("{FFFF00}Fahrzeugübertragungspunkt --> Bayside\n{FFFFFF}/fahrzeugue",Weiß,-2336.2256,2051.0430,10.4132+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Fahrzeugübertragungspunkt
	//Kuhnamen
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Neko_Less{FFFFFF}]",Weiß,-2637.2620,2258.6965,13.4193+ 0.7,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Kuh
	//MS14 Fraktionsverwaltung
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}MS-14 Waffenlager{FFFFFF}]",0x0C9BCBFF,-2756.4661,87.3215,7.0940+ 0.4,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //MS14 Waffenlager
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Fraktionsverwaltung{FFFFFF}]",0x0C9BCBFF,2464.9756,-1911.7463,3819.2493+ 0.4,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //MS14 Fraktionsverwaltung
	//Bunker
	CreateDynamic3DTextLabel("{C3FF00}Atomschutzbunker",0x0C9BCBFF,-393.4911,1239.0289,7.3789+ 0.4,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Bunker
	//Gangautohaus
	CreateDynamic3DTextLabel("{FFFFFF}Gangfahrzeug\n{FFFF00}Abholepunkt",0x0C9BCBFF,-1990.3867,300.1237,35.1794+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Gangautohaus
	//Autowaffenpakete
	CreateDynamic3DTextLabel("{FFFFFF}Transporter Waffenpakete\n{FFFF00}/buywp!",0x0C9BCBFF,-1862.0784,-145.2836,11.8984+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Auto Waffenpakete
	//BSPD
	CreateDynamic3DTextLabel("{FFFFFF}Willkommen im\n{FFFF00}Bayside Police Department\n{FFFFFF}/klingeln um die Klingel zu bedienen!",0x0C9BCBFF,1563.4691,-1683.8550,1724.4288+ 0.1,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //BSPD Willkommen
	CreateDynamic3DTextLabel("{FFFFFF}Umkleidekabine\n{FFFF00}/duty",0x0C9BCBFF,1565.9390,-1671.6768,1723.1094+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //BSPD Duty
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Ausrüstung{FFFFFF}]",0x0C9BCBFF,1560.1185,-1712.2195,1724.5078+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //BSPD Ausrüstung
	CreateDynamic3DTextLabel("{FFFFFF}Beantragung einer Löschung der Spielerakte\n{FFFF00}Hier bitte anstellen!",0x0C9BCBFF,1553.7223,-1678.4546,1723.5997+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //BSPD Aktenlöschung Bantragung
	CreateDynamic3DTextLabel("{FFFFFF}Aktenlöschung\n{FFFF00}/clear",0x0C9BCBFF,1553.1620,-1675.9523,1723.1094+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //BSPD Aktenlöschung /clear
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Fahrzeugvergabe{FFFFFF}]",0x0C9BCBFF,-2255.1716,2382.0989,4.7619+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //BSPD Fahrzeugvergabe
	//Sanitäter
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Behandlung{FFFFFF}]\n{FFFF00}Bei Geschlechtkrankheiten\nPreis 350",0x0C9BCBFF,1230.4812,315.3640,-11.7422+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Sanitäter Heal
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Dienstkleidung{FFFFFF}]",0x0C9BCBFF,1251.1510,320.4985,-11.7422+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Sanitäter Dienstkleidung
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Ausrüstung{FFFFFF}]",0x0C9BCBFF,1251.0072,307.6426,-11.7422+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Sanitäter Ausrüstung
	//Pfandflaschen
	CreateDynamic3DTextLabel("{FFFFFF}Pfandflaschen\n{FFFF00}Benutze [Space] um welche zu suchen!",0x0C9BCBFF,-2488.0977,2235.1609,4.9948+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Pfandflaschen
	CreateDynamic3DTextLabel("{FFFFFF}Pfandflaschen\n{FFFF00}Benutze [Space] um welche zu suchen!",0x0C9BCBFF,-2337.4124,2352.0017,5.0846+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Pfandflaschen
	CreateDynamic3DTextLabel("{FFFFFF}Pfandflaschen\n{FFFF00}Benutze [Space] um welche zu suchen!",0x0C9BCBFF,-2487.9934,2535.9775,18.0562+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Pfandflaschen
	//CNN Dienstkleidung
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Dienstkleidung{FFFFFF}]",0x0C9BCBFF,-1502.3926,974.7173,7.2254+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //CNN Dienstkleidung
	//Fahrradverleih
	CreateDynamic3DTextLabel("{FFFFFF}Fahrradverleih\n{FFFF00}KOSTENLOS!",0x0C9BCBFF,-2598.8188,2272.3501,8.3594+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Fahrradverleih
	//Wohnwagenverkäufter Eddy
	CreateDynamic3DTextLabel("{FFFFFF}[Space] Taste\n{FFFF00}Um mit Eddy zu interagieren!",0x0C9BCBFF,-2579.3896,2409.7424,14.4295+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //eddy
	//24/7 Händler
	CreateDynamic3DTextLabel("{FFFFFF}[Space] Taste\n{FFFF00}Um mit dem Verkäufer zu interagieren!",0x0C9BCBFF,-30.3121,-186.1532,1004.5063+ 0.2,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //247
	//Der Autopate
	CreateDynamic3DTextLabel("{FFFFFF}Der Autopate besorgt dir jedes Fahrzeug!\n{FFFF00}[Space] {FFFFFF}um mit dem Autopaten zu interagieren.",0x0C9BCBFF,2365.3367,-1544.8262,-23.6896+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Zeitungsstand
	//Zeitungsstand
	CreateDynamic3DTextLabel("{FFFFFF}Zeitungsstand\n{FFFF00}/buyzeitung um eine Zeitung zu kaufen!",0x0C9BCBFF,-2626.5479,2249.7253,8.1624+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Zeitungsstand
	CreateDynamic3DTextLabel("{FFFFFF}Zeitungsstand\n{FFFF00}/buyzeitung um eine Zeitung zu kaufen!",0x0C9BCBFF,-2244.0732,2336.3325,4.9680+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Zeitungsstand
	CreateDynamic3DTextLabel("{FFFFFF}Zeitungsstand\n{FFFF00}/buyzeitung um eine Zeitung zu kaufen!",0x0C9BCBFF,-2467.3345,2240.2593,4.7897+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Zeitungsstand
	//Werbepunkt
	CreateDynamic3DTextLabel("{FFFFFF}Werbepunkt\n{FFFF00}/ad um eine Werbung schalten zu lassen!",0x0C9BCBFF,-1506.5461,1001.1448,7.1875+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Werbepunkt
	CreateDynamic3DTextLabel("{FFFFFF}Werbepunkt\n{FFFF00}/ad um eine Werbung schalten zu lassen!",0x0C9BCBFF,-2478.0146,2237.2798,4.8428+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Werbepunkt
	CreateDynamic3DTextLabel("{FFFFFF}Werbepunkt\n{FFFF00}/ad um eine Werbung schalten zu lassen!",0x0C9BCBFF,-2243.7861,2331.8669,4.9676+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Werbepunkt
	//CNN Zeitung
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Zeitungsverwaltung{FFFFFF}]!",0x0C9BCBFF,-1494.8589,975.8896,7.2254+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // CNN Verwaltung
	//CNN Verwaltung
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Verwaltung{FFFFFF}]!",0x0C9BCBFF,-1507.7516,983.7777,7.2254+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // CNN Verwaltung
	//Paintballarena
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Paintball Arena{FFFFFF}]\n{FFFFFF} {00AFFF}[SPACE]{FFFFFF} zum betreten drücken!",0x0C9BCBFF,-2456.6682,2304.7434,4.9844+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Paintballarena
	//autoscooter
	CreateDynamic3DTextLabel("{FFFFFF}[{FFFF00}Autoscooter Arena{FFFFFF}]\n{FFFFFF} {00AFFF}[SPACE]{FFFFFF} zum betreten drücken!",0x0C9BCBFF,-2456.6675,2257.5745,4.9785+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Autoscooter
	//Nutte
	nuttenlabel = CreateDynamic3DTextLabel("{FFFFFF}--> |{7fff00}Frei{FFFFFF}| <--",0x0C9BCBFF,-2619.2004,2440.0408,15.4575+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Nutte Frei/Bestzt
	CreateDynamic3DTextLabel("{FFFFFF}[Space] Taste\n{FFFF00}Um mit der Prostituierten zu interagieren!",0x0C9BCBFF,-2618.8794,2432.9399,15.0263+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Nutte Interagieren
	//Zoll
	CreateDynamic3DTextLabel("{FFFFFF}Mautstelle nach Las Venturas\nDurchfahrt nur mit gültigem {FFFF00}Reisepass!",0x0C9BCBFF,-2276.8821,2639.7170,56.2865+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Zoll LV - BS
	CreateDynamic3DTextLabel("{FFFFFF}Mautstelle nach Las Venturas\nDurchfahrt nur mit gültigem {FFFF00}Reisepass!",0x0C9BCBFF,-2275.7312,2676.6685,56.2426+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Zoll LV - BS
	CreateDynamic3DTextLabel("{FFFFFF}Mautstelle nach Bayside\nDurchfahrt nur mit gültigem {FFFF00}Reisepass!",0x0C9BCBFF,-2257.5615,2677.5122,56.2426+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Zoll BS - LV
	CreateDynamic3DTextLabel("{FFFFFF}Mautstelle nach Bayside\nDurchfahrt nur mit gültigem {FFFF00}Reisepass!",0x0C9BCBFF,-2258.6882,2639.9727,56.2865+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Zoll BS - LV
	CreateDynamic3DTextLabel("{FFFFFF}Mautstelle nach San Fierro\nDurchfahrt nur mit gültigem {FFFF00}Reisepass!",0x0C9BCBFF,-1309.9044,921.7834,46.9501+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Zoll LV - SF
	CreateDynamic3DTextLabel("{FFFFFF}Mautstelle nach Las Ventures\nDurchfahrt nur mit gültigem {FFFF00}Reisepass!",0x0C9BCBFF,-1322.7789,907.7631,46.9501+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Zoll SF - LV
	//Zoll
	CreateDynamic3DTextLabel("{FFFFFF}Mautstelle nach Las Venturas\nDurchfahrt nur mit gültigem {FFFF00}Reisepass!",0x0C9BCBFF,1700.0453,412.3494,31.3168+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // AZoll LS - LV
	CreateDynamic3DTextLabel("{FFFFFF}Mautstelle nach Los Santos\nDurchfahrt nur mit gültigem {FFFF00}Reisepass!",0x0C9BCBFF,1705.9165,429.5509,31.8899+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // AZoll LV - LS
	//PaynSpray
	CreateDynamic3DTextLabel("{FFFFFF}Pay'n'Spray\n{FFFF00}/pns um dein Fahrzeug umfärben zulassen!",0x0C9BCBFF,-2311.9341,2342.9497,5.0265,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // PaynSpray
	//Bank
 	CreateDynamic3DTextLabel("{FFFFFF}Abstand halten\n{FF3333}Discretion bewahren!",0x0C9BCBFF,1431.4667,-992.1404,1639.7843,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Bank Discretion
    CreateDynamic3DTextLabel("{FFFFFF}Bankschalter 1\n{FFFF00}Benutze /bank!",0x0C9BCBFF,1433.4547,-997.3876,1639.7911,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Bankschalter
	//Adminbase
	CreateDynamic3DTextLabel("{FFFFFF}--> {FF3333}Bereten auf eigene GEFAHR! {FFFFFF}<--",0x0C9BCBFF,2419.7310,2731.9287,11.5287+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Adminbase Schild
	//Hebebühne
	CreateDynamic3DTextLabel("{FFFF00}/hebeb\n{FFFFFF}Um die Hebebühne hochzufahren!" , 0xFFFF00FF, -2551.2224,2355.5933,4.9844+1.2,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Hebebühne
	//Tanke
	CreateDynamic3DTextLabel("{FFFFFF}[Space] {FFFF00}Taste drücken um dein Fahrzeug zu betanken!" , 0xFFFF00FF, -2323.9543,2362.8296,4.9922+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Tanken
	//Tanke Gangautohaus
	CreateDynamic3DTextLabel("{FFFFFF}[Space] {FFFF00}Taste drücken um dein Fahrzeug zu betanken!" , 0xFFFF00FF, -1896.6831,251.7451,41.0469+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Tanken
	//Tanke Adminbase
	CreateDynamic3DTextLabel("{FFFFFF}[Space] {FFFF00}Taste drücken um dein Fahrzeug zu betanken!" , 0xFFFF00FF, 2536.2729,2710.8799,10.8203+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Tanken Adminbase
	//Sonnenbrillen kaufen
	CreateDynamic3DTextLabel("{FFFF00}[{FFFFFF}Sonnenbrillen kaufen{FFFF00}]" , 0xFFFF00FF, 664.8305,-568.7348,16.3433+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Sonnenbrillen kaufen
	//Driftstrecke
	CreateDynamic3DTextLabel("{FFFF00}[{FFFFFF}Driftstrecke{FFFF00}]" , 0xFFFF00FF, -2353.8096,2574.5952,24.4739+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Driftstrecke
	//Speditions Dienst
	CreateDynamic3DTextLabel("Speditions Umkleide{FFFFFF}\n/sdienst!{00FF00}" , 0xFFFF00FF,-2366.0803,2388.4983,11.6310+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Speditions Duty
	//Farmer Dienst
	CreateDynamic3DTextLabel("Farmer Umkleide{FFFFFF}\n/fmdienst!{00FF00}" , 0xFFFF00FF, -23.4511,74.4178,3.1096+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Farmer Duty
	//Mechatroniker Dienst
	CreateDynamic3DTextLabel("Mechatroniker Umkleide{FFFFFF}\n/mdienst!{00FF00}" , 0xFFFF00FF, -2507.2278,2367.7224,4.9831+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Mechatroniker Duty
	//Ticketautomat
	CreateDynamic3DTextLabel("{FFFF00}[{FFFFFF}Ticketautomat{FFFF00}]" , 0xFFFF00FF,-2416.9243,2314.2148,4.2915+1.0,6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Ticketautomat
	CreateDynamic3DTextLabel("{FFFF00}[{FFFFFF}Ticketautomat{FFFF00}]" , 0xFFFF00FF,-1544.0171,-441.1622,6.0000+1.0,6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Ticketautomat
	CreateDynamic3DTextLabel("{FFFF00}[{FFFFFF}Ticketautomat{FFFF00}]" , 0xFFFF00FF,1956.7332,-2183.6794,13.5469+1.0,6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Ticketautomat
	CreateDynamic3DTextLabel("{FFFF00}[{FFFFFF}Ticketautomat{FFFF00}]" , 0xFFFF00FF,1715.1730,1616.8224,10.0329+1.0,6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Ticketautomat
	//Feuerwehr Ausrüstung
	CreateDynamic3DTextLabel("Mit /ausruestung{FFFFFF}\nkannst du dir deine Ausrüstung nehmen!{00FF00}" , 0xFFFF00FF, 240.3112,78.7722,1005.0391+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Feuerwehr Ausrüstung
	//Feuerwehr Sekreteriat
	CreateDynamic3DTextLabel("Wilkommen in der{FFFFFF}\nFeuerwehrzentrale!{00FF00}" , 0xFFFF00FF, 251.2586,66.3290,1003.6406+1.1,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Feuerwehr Sekreteriat
	//Feuerwehr Dienst
	CreateDynamic3DTextLabel("Feuerwehr Umkleide{FFFFFF}\n/fdienst!{00FF00}" , 0xFFFF00FF, 255.3144,73.6985,1003.6406+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Feuerwehr Dienst
	//Waffenhändler Bringpunkt
	CreateDynamic3DTextLabel("Materialpakete Abgabepunkt{FFFFFF}\n" , 0xFFFF00FF, -2556.2112,1147.3525,55.7266+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Waffenhändler Bringpunkt
	//Materialien Abholpunkt
	CreateDynamic3DTextLabel("Materialpakete Abholepunkt{FFFFFF}\n" , 0xFFFF00FF, -2514.0281,2291.4368,4.9844+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Materialien Abholpunkt
	//Waffenhändler Job
	CreateDynamic3DTextLabel("Waffenhändler Job{FFFFFF}\n/wjob für weitere Informationen!{00FF00}" , 0xFFFF00FF, 306.4004,-159.1712,999.5938+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//waffenhändler job
	//Drogendealer Job
	CreateDynamic3DTextLabel("Drogenhändler Job{FFFFFF}\n/djob für weitere Informationen!{00FF00}" , 0xFFFF00FF, -1112.2057,-1676.2168,76.3672+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Drogendealer job
	//DJ Dienst
	CreateDynamic3DTextLabel("DJ Umkleide{FFFFFF}\n/djdienst!{00FF00}" , 0xFFFF00FF, 476.4065,-18.5188,1003.6953+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//DJ Dienst
	//Hotel Rezeption
	CreateDynamic3DTextLabel("Hotel Rezeption{FFFFFF}\n/einchecken um ein Hotelzimmer zu mieten!{00FF00}" , 0xFFFF00FF, 2217.3657,-1146.4054,1025.7969+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Hotel Rezeption
	//Drive IN Burgershot
	CreateDynamic3DTextLabel("Burger Shot DriveIn{FFFFFF}\n/drivein um eine Bestellung aufzugeben!{00FF00}" , 0xFFFF00FF, -2460.5554,2231.0063,4.8438+0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Burger Shot DriveIN
	//Lotterie
	CreateDynamic3DTextLabel("--> {FFFFFF}Lotterie /buylotto {0C9BCB}<--",0x0C9BCBFF,-2237.1738,130.1773,1035.4141+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Lottoschein kaufen
	//Pferderennen
	CreateDynamic3DTextLabel("Pferderennen Schalter 1" , 0xFFFF00FF, 830.5977,-0.2779,1004.1797+0.6,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Pferderennen Schalter 1
	CreateDynamic3DTextLabel("Pferderennen Schalter 2" , 0xFFFF00FF, 833.6002,3.1582,1004.1797+0.6,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Pferderennen Schalter 2
	//Handyladen
	CreateDynamic3DTextLabel("/klingelton {FFFFFF}um einen neuen Klingelton zu kaufen!" , 0xFFFF00FF, 1012.8786,50.7204,55.3221+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Klingelton
	CreateDynamic3DTextLabel("/akkuladen (55) {FFFFFF}um dein Handy Akku aufzuladen!" , 0xFFFF00FF, 1009.8480,60.7600,55.3221+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Handy Akku aufladen
	//Zivispawn
	CreateDynamic3DTextLabel("Personalausweisanmeldestelle{FFFFFF}--> Rechts entlang!",Gelb,366.0273,177.2332,1008.3828+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Personalausweiß
	CreateDynamic3DTextLabel("Es stehen keine Fahrräder mehr zur Verfügung?\nMelde dich bei einem Admin mit /support!",Gelb,-2598.2925,2257.1016,8.2109+ 0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // Keine Fahrräder
	CreateDynamic3DTextLabel("Wichtige Informationen!",Gelb,-2626.0273,2261.9502,8.1556+ 0.5,20); // Information
	CreateDynamic3DTextLabel("Welches Getränk möchtest du?{FFFFFF}\n \"bier 6\"  \"wein 70\"  \"champagner 95\"  \"vodka 15\"  \"sprunk 7\" \n{00FF00}" , 0xFFFF00FF, 500.8093,-18.1370,1001.7262,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Caligullas Club
	CreateDynamic3DTextLabel("Welches Getränk möchtest du?{FFFFFF}\n \"bier 6\"  \"wein 70\"  \"champagner 95\"  \"vodka 15\"  \"sprunk 7\" \n{00FF00}" , 0xFFFF00FF, -2478.2974,2227.9126,11.7581,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//BSN Bar
	CreateDynamic3DTextLabel("Welches Getränk möchtest du?{FFFFFF}\n \"bier 6\"  \"wein 70\"  \"champagner 95\"  \"vodka 15\"  \"sprunk 7\" \n{00FF00}" , 0xFFFF00FF, 1947.2021,1020.6382,993.5156,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Casino Bar 1
	CreateDynamic3DTextLabel("Welches Getränk möchtest du?{FFFFFF}\n \"bier 6\"  \"wein 70\"  \"champagner 95\"  \"vodka 15\"  \"sprunk 7\" \n{00FF00}" , 0xFFFF00FF, 1954.2135,1013.3474,993.5156,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Casino Bar2
	CreateDynamic3DTextLabel("Welches Getränk möchtest du?{FFFFFF}\n \"bier 6\"  \"wein 70\"  \"champagner 95\"  \"vodka 15\"  \"sprunk 7\" \n{00FF00}" , 0xFFFF00FF, 970.1729,-45.0051,1002.2206,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Adminbase Bar
	CreateDynamic3DTextLabel("Welches Getränk möchtest du?{FFFFFF}\n \"bier 6\"  \"wein 70\"  \"champagner 95\"  \"vodka 15\"  \"sprunk 7\" \n{00FF00}" , 0xFFFF00FF, 3141.7996,-3003.4907,19.6954,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Kirchebar
	CreateDynamic3DTextLabel("DJ Bereich ! Zutritt nur für DJ's \n /opendj",Gelb,480.0559,-20.0212,1000.6797+ 0.5,20); //Caligullas Club Vip Bereich
	CreateDynamic3DTextLabel("{FFB400}Server Regeln:\n{FFFFFF}Hacken/Cheaten ist strengstens verboten.\nBuguser sind unerwünscht.\nDies ist ein Roleplay Server also spielt auch bitte Roleplay.\nSinnloses Deathmatch ist verboten.\nDriveby ist nur als Beifahrer erlaubt\nGamemode by Nemesus.de",Gelb,-2614.9683,2248.9189,9.2506+ 0.1,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Server-Regeln
	//MCfit
	CreateDynamic3DTextLabel("Welchen Kampfstil soll ich dir beibringen?{FFFFFF}\n \"Boxxen\"  \"Kungfu\"  \"Ellbogen\"  \"Grabkick\"  \"Kneehead\" \n{00FF00}" , 0xFFFF00FF, 769.6943,-63.3271,1000.6635+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//MCfit 3D
	//Pizzaladen
	CreateDynamic3DTextLabel("Welche Pizza möchtest du?{FFFFFF}\n \"Margarita\"  \"Salami\"  \"Thunfisch\"  \"Hawaii\"  \"Peperoni\" \n{00FF00}" , 0xFFFF00FF, 373.6567,-118.0272,1002.5215+0.2,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Pizzaladen 3D
	//Burgershot
	CreateDynamic3DTextLabel("Welches Menü möchtest du?{FFFFFF}\n \"KidsMenü\"  \"MaxiMenü\"  \"Cheeseburger ohne Cheese\"  \"Salat\"  \"KingMenü\" \n{00FF00}" , 0xFFFF00FF, 375.6868,-65.8441,1001.5078+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);//Burgershot 3D
	//Hall of Fame
	CreateDynamic3DTextLabel("{FFFFFF}Danke an unseren Scripter\n{0000ff}--> Nemesus <--",0x358cffFF,-2628.4719,2267.7559,8.1694+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // HOF Nemesus
	CreateDynamic3DTextLabel("{FFFFFF}Danke an unseren Mapper\n{0000ff}--> sHoOTi <--",0x358cffFF,-2625.3911,2271.1084,8.2900+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // HOF Shooti
	//Hall of Fame Premiuminsel
	CreateDynamic3DTextLabel("{FFFFFF}Danke an unseren Scripter\n{0000ff}--> Nemesus <--",0x358cffFF,2119.1584,-1022.9098,-13.2877+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // HOF Premium
	CreateDynamic3DTextLabel("{FFFFFF}Danke an unseren Mapper\n{0000ff}--> sHoOTi <--",0x358cffFF,2122.4590,-1023.3317,-13.2877+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // HOF Premium
	CreateDynamic3DTextLabel("{FFFFFF}Danke an unser komplettes Team!",0x0C9BCBFF,2127.4722,-1035.0059,-14.4297+ 0.3,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); // HOF Premium
	//Bamboo Club
	CreateDynamicObject(18783, 983.33, 2443.64, 9.80,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(18783, 983.33, 2423.94, 9.80,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(18783, 983.33, 2443.62, 9.80,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(19129, 993.56, 2423.82, 14.04,   0.00, 90.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(19129, 993.56, 2443.68, 14.04,   0.00, 90.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(14391, 989.05, 2433.88, 13.13,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2395, 988.07, 2434.45, 10.57,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2395, 988.07, 2436.15, 10.57,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(3406, 969.68, 2434.55, 10.18,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(3406, 961.08, 2434.59, 10.18,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(16090, 974.48, 2433.82, 12.29,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(6959, 938.68, 2423.33, 9.91,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(6959, 978.86, 2423.30, 9.91,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(6959, 938.32, 2463.05, 9.91,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(6959, 978.87, 2463.12, 9.95,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(14560, 947.43, 2458.55, 14.21,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(14565, 947.43, 2458.55, 11.79,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.94, 2430.03, 19.79,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.49, 2427.06, 13.65,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.49, 2427.08, 15.57,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.49, 2427.06, 17.45,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.49, 2427.06, 19.33,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.94, 2428.59, 19.79,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.94, 2433.04, 19.79,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.94, 2434.64, 19.79,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.94, 2436.08, 19.79,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.94, 2437.68, 19.79,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.94, 2431.54, 19.79,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.94, 2439.05, 19.79,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.68, 2440.57, 13.65,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.66, 2440.57, 15.57,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.66, 2440.57, 17.45,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 973.66, 2440.57, 19.33,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 941.67, 2454.05, 14.96,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 939.28, 2454.74, 15.47,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 944.43, 2453.96, 14.36,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 947.49, 2453.92, 13.95,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 952.94, 2454.36, 14.96,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 955.36, 2454.09, 15.47,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(18102, 974.11, 2425.25, 12.60,   0.00, 90.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(18102, 971.50, 2429.93, 19.33,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2232, 950.42, 2454.09, 14.36,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 944.80, 2453.48, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 943.50, 2453.59, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 942.09, 2453.81, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 940.77, 2454.16, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 939.60, 2454.46, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 938.77, 2454.82, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 945.94, 2453.42, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 947.08, 2453.41, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 948.25, 2453.41, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 949.47, 2453.45, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 950.75, 2453.61, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 952.09, 2453.88, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 953.53, 2454.21, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 954.91, 2454.57, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2125, 956.33, 2454.90, 10.19,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 931.44, 2413.72, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 928.79, 2422.86, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 932.33, 2417.07, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.59, 2415.27, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.55, 2416.91, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1597, 935.32, 2424.39, 12.47,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1597, 935.28, 2414.67, 12.47,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1597, 935.43, 2434.07, 12.47,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1597, 935.34, 2443.87, 12.47,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(3935, 974.12, 2424.84, 14.70,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(3935, 974.31, 2442.50, 14.70,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 928.79, 2414.97, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 932.33, 2424.76, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 931.48, 2421.48, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.50, 2422.93, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.22, 2439.84, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 932.40, 2431.91, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 931.50, 2428.76, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 928.56, 2429.91, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.48, 2424.47, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.36, 2431.71, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 932.19, 2439.89, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 931.32, 2436.84, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 928.28, 2437.98, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.24, 2438.15, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.43, 2430.17, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 931.71, 2444.25, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 928.65, 2445.44, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 932.50, 2447.60, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.50, 2445.69, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 930.48, 2447.27, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 921.12, 2414.56, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.88, 2416.60, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.04, 2413.15, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 921.36, 2429.85, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 921.22, 2422.39, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 921.38, 2438.75, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.92, 2424.62, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.97, 2431.89, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.86, 2440.78, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.11, 2421.31, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.31, 2428.60, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.35, 2437.42, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 921.57, 2445.43, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.78, 2447.49, 9.88,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(2290, 924.24, 2444.12, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.35, 2445.62, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.29, 2447.39, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.18, 2438.94, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.26, 2440.73, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.27, 2430.19, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.27, 2431.84, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.11, 2423.96, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.11, 2422.64, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.07, 2414.84, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1433, 923.03, 2416.46, 9.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1723, 937.11, 2412.00, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1723, 937.07, 2415.98, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1723, 937.40, 2421.65, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1723, 937.37, 2425.40, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1723, 937.48, 2431.18, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1723, 937.38, 2435.11, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1723, 937.32, 2440.69, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(1723, 937.41, 2444.69, 9.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(2773, 981.01, 2412.47, 10.39,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2773, 980.99, 2410.11, 10.39,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2773, 981.04, 2407.74, 10.39,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2773, 981.09, 2405.28, 10.39,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(14608, 989.70, 2449.97, 13.89,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(14608, 989.12, 2418.03, 13.89,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1809, 988.83, 2436.27, 13.33,   0.00, 0.00, 65.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 974.12, 2442.53, 13.29,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 973.93, 2424.89, 13.29,   0.00, 0.00, 270.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 979.91, 2420.62, 16.15,   180.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 963.50, 2428.11, 12.59,   180.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1491, 985.94, 2458.61, 9.92,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(10009, 981.54, 2472.04, 14.01,   0.00, 0.00, 181.54,-1,-1,-1,200);
	CreateDynamicObject(1491, 957.67, 2404.28, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1491, 957.72, 2404.32, 9.88,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 957.70, 2404.39, 13.80,   180.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(19129, 963.28, 2443.05, 10.00,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(19129, 963.32, 2423.06, 10.00,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(19128, 980.00, 2446.30, 12.25,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(19128, 979.90, 2420.49, 12.25,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(3471, 955.62, 2405.37, 10.90,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(3471, 959.92, 2405.43, 10.90,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(3528, 957.74, 2405.78, 15.88,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(18102, 975.95, 2438.17, 19.33,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(18102, 974.16, 2441.27, 18.28,   90.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(18102, 974.14, 2438.07, 18.28,   90.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(18102, 974.11, 2435.02, 18.28,   90.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(18102, 967.01, 2418.61, 15.37,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 980.01, 2446.45, 16.15,   180.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 963.90, 2441.22, 12.59,   180.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2898, 937.60, 2436.81, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2898, 937.60, 2431.40, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2898, 937.60, 2425.98, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2898, 937.60, 2420.63, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2898, 937.60, 2415.39, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2898, 937.60, 2409.99, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2898, 937.60, 2442.16, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(2898, 937.60, 2447.54, 9.88,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(3877, 935.47, 2409.81, 11.23,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(3877, 935.56, 2438.97, 11.23,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(3877, 935.56, 2448.46, 11.23,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(3877, 935.56, 2429.29, 11.23,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(3877, 935.56, 2419.43, 11.23,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(13649, 946.31, 2445.43, 10.18,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(13649, 946.31, 2416.53, 10.18,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(13649, 946.31, 2431.39, 10.18,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 946.31, 2416.62, 14.50,   180.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 946.31, 2445.54, 14.50,   180.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1352, 946.31, 2431.48, 14.50,   180.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.34, 2418.90, 17.72,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(3528, 919.25, 2435.19, 14.04,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.37, 2416.01, 12.97,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.13, 2438.00, 12.86,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(3528, 919.23, 2418.98, 14.04,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.21, 2421.66, 12.97,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.18, 2424.74, 12.97,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.15, 2427.31, 17.72,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(3528, 919.35, 2426.97, 14.04,   0.00, 0.00, 0.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.13, 2429.57, 12.86,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.14, 2433.15, 12.86,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.16, 2435.55, 17.72,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(1263, 918.14, 2433.15, 12.86,   0.00, 0.00, 180.00,-1,-1,-1,200);
	CreateDynamicObject(14637, 957.37, 2404.75, 16.76,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(14467, 936.13, 2407.70, 12.48,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(14467, 921.25, 2407.70, 12.48,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(14467, 936.13, 2450.32, 12.48,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(14467, 921.25, 2450.32, 12.48,   0.00, 0.00, 90.00,-1,-1,-1,200);
	CreateDynamicObject(18783, 927.79, 2433.85, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 927.71, 2413.91, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 927.79, 2453.71, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 947.75, 2472.88, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 927.76, 2472.94, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 966.91, 2472.91, 7.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 947.76, 2453.71, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 966.81, 2453.69, 7.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 946.75, 2433.85, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 947.61, 2413.92, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18783, 967.58, 2413.91, 7.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(3630, 996.19, 2474.27, 12.64,   0.00, 0.00, 90.00);
	CreateDynamicObject(3630, 996.19, 2464.66, 12.64,   0.00, 0.00, 90.00);
	CreateDynamicObject(3378, 995.63, 2470.39, 9.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(2395, 918.56, 2475.75, 12.97,   0.00, 90.00, 90.00);
	CreateDynamicObject(2395, 918.39, 2478.38, 12.97,   0.00, 90.00, 270.00);
	CreateDynamicObject(2395, 918.56, 2473.04, 12.97,   0.00, 90.00, 90.00);
	CreateDynamicObject(2395, 918.40, 2475.70, 12.97,   0.00, 90.00, 270.00);
	CreateDynamicObject(18102, 974.47, 2438.41, 12.60,   0.00, 90.00, 0.00);
	CreateDynamicObject(18102, 970.62, 2447.14, 15.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(18102, 964.56, 2447.39, 15.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(18102, 967.64, 2443.03, 16.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(18102, 967.62, 2443.04, 15.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(18102, 967.89, 2428.50, 15.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(18102, 970.68, 2422.11, 15.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(2176, 933.34, 2443.73, 12.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(2176, 933.22, 2436.33, 12.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(2176, 933.22, 2428.13, 12.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(2176, 933.22, 2421.16, 12.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(2176, 933.12, 2413.21, 12.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(3528, 919.49, 2442.71, 14.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1263, 918.16, 2440.56, 12.86,   0.00, 0.00, 180.00);
	CreateDynamicObject(1263, 918.18, 2442.93, 17.72,   0.00, 0.00, 180.00);
	CreateDynamicObject(1263, 918.17, 2445.22, 12.86,   0.00, 0.00, 180.00);
	CreateDynamicObject(3437, 919.20, 2454.84, 9.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 919.44, 2460.29, 9.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(2232, 992.27, 2444.84, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2444.13, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2443.46, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2442.80, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2442.14, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2441.49, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2440.83, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2440.21, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2439.58, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2438.50, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2438.91, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.27, 2438.28, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2439.16, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2439.82, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2440.50, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2441.18, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2441.88, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2442.52, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2443.22, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2443.88, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2444.50, 14.05,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2429.01, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2428.35, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2427.77, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2427.09, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2426.49, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2425.88, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2425.16, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2424.54, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2423.94, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2423.33, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2422.95, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2422.64, 12.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2423.55, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2424.11, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2424.79, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2425.43, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2426.07, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2426.73, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2427.37, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.28, 2428.05, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2232, 992.26, 2428.74, 14.03,   0.00, 0.00, 270.00);
	CreateDynamicObject(2179, 954.24, 2402.98, 16.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 954.23, 2402.98, 19.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 958.16, 2402.98, 20.22,   0.00, 40.00, 0.00);
	CreateDynamicObject(2179, 955.99, 2402.98, 20.22,   0.00, -40.00, 0.00);
	CreateDynamicObject(2179, 959.74, 2402.98, 19.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 959.74, 2402.98, 16.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 948.08, 2402.98, 15.39,   0.00, 15.00, 0.00);
	CreateDynamicObject(2179, 951.69, 2402.98, 15.49,   0.00, -15.00, 0.00);
	CreateDynamicObject(2179, 950.55, 2402.98, 19.59,   0.00, -15.00, 0.00);
	CreateDynamicObject(2179, 949.14, 2402.98, 19.46,   0.00, 15.00, 0.00);
	CreateDynamicObject(2179, 949.50, 2402.98, 17.84,   0.00, 90.00, 0.00);
	CreateDynamicObject(2179, 940.62, 2402.98, 20.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 940.62, 2402.98, 15.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 963.53, 2402.98, 15.05,   0.00, 60.00, 0.00);
	CreateDynamicObject(2179, 942.75, 2402.98, 17.38,   0.00, -60.00, 0.00);
	CreateDynamicObject(2179, 942.35, 2402.98, 19.35,   0.00, 60.00, 0.00);
	CreateDynamicObject(2179, 942.93, 2402.98, 21.31,   0.00, -60.00, 0.00);
	CreateDynamicObject(2179, 962.28, 2402.98, 16.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 962.29, 2402.98, 20.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 942.14, 2402.98, 15.27,   0.00, 60.00, 0.00);
	CreateDynamicObject(2179, 964.41, 2402.98, 17.03,   0.00, -60.00, 0.00);
	CreateDynamicObject(2179, 963.71, 2402.98, 19.34,   0.00, 60.00, 0.00);
	CreateDynamicObject(2179, 964.45, 2402.98, 21.42,   0.00, -60.00, 0.00);
	CreateDynamicObject(3494, 967.03, 2458.78, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(3494, 974.81, 2458.78, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(3494, 967.03, 2480.81, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 966.05, 2461.42, 22.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 966.05, 2467.99, 18.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 966.10, 2476.36, 18.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 966.10, 2479.32, 18.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 969.30, 2458.22, 18.47,   0.00, 0.00, 90.00);
	CreateDynamicObject(19325, 975.92, 2458.22, 18.47,   0.00, 0.00, 90.00);
	CreateDynamicObject(19325, 966.05, 2461.42, 18.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 966.05, 2467.99, 22.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 966.05, 2474.55, 22.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 966.04, 2479.71, 22.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 969.30, 2458.22, 22.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(19325, 975.92, 2458.22, 22.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1828, 972.17, 2473.76, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(1828, 969.17, 2469.41, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 969.63, 2481.53, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 970.57, 2481.53, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 971.49, 2481.53, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 972.39, 2481.53, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 973.27, 2481.53, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 974.21, 2481.52, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 968.71, 2481.53, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 967.75, 2481.53, 17.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(2292, 975.63, 2481.56, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(2291, 975.63, 2481.15, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(2291, 975.63, 2480.19, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(2291, 975.63, 2479.25, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(2291, 975.63, 2478.44, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(2291, 975.63, 2477.49, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(2291, 975.63, 2476.55, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(2291, 975.63, 2475.55, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(2291, 975.63, 2474.65, 17.21,   0.00, 0.00, 270.00);
	CreateDynamicObject(14809, 971.20, 2474.04, 18.46,   0.00, 0.00, 259.69);
	CreateDynamicObject(1352, 973.89, 2470.37, 21.23,   180.00, 0.00, 0.00);
	CreateDynamicObject(1352, 968.15, 2477.37, 21.44,   180.00, 0.00, 0.00);
	CreateDynamicObject(1352, 972.99, 2477.11, 21.44,   180.00, 0.00, 0.00);
	CreateDynamicObject(1352, 967.49, 2474.30, 21.42,   180.00, 0.00, 0.00);
	CreateDynamicObject(16151, 974.98, 2464.28, 17.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(1775, 975.86, 2463.00, 18.22,   0.00, 0.00, 270.00);
	CreateDynamicObject(1209, 966.98, 2481.61, 17.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 973.24, 2478.58, 17.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 969.27, 2478.58, 17.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 973.84, 2468.62, 17.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 973.84, 2463.22, 17.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 973.85, 2460.93, 17.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(3534, 973.89, 2470.26, 21.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3534, 973.08, 2477.02, 21.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3534, 968.12, 2477.25, 21.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3534, 967.52, 2474.18, 21.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(2297, 966.61, 2479.16, 17.21,   0.00, 0.00, 44.07);
	CreateDynamicObject(19128, 968.78, 2465.32, 17.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(19128, 968.82, 2461.34, 17.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(2964, 989.93, 2470.98, 9.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(2964, 989.68, 2467.87, 9.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(3531, 973.27, 2457.11, 18.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(3531, 968.25, 2457.11, 18.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(1597, 966.65, 2463.28, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(1491, 976.39, 2471.30, 17.22,   0.00, 0.00, 90.00);
	CreateDynamicObject(1491, 986.69, 2482.96, 9.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(1491, 989.59, 2482.99, 9.82,   0.00, 0.00, 180.00);
	CreateDynamicObject(1432, 947.74, 2470.72, 10.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(1432, 951.33, 2470.49, 10.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(1432, 947.16, 2474.44, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 949.59, 2472.74, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 945.12, 2472.33, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 954.11, 2470.08, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 952.29, 2473.63, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 944.41, 2466.39, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 942.42, 2469.69, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(2179, 968.07, 2402.98, 19.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 968.07, 2402.98, 16.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 969.56, 2402.98, 21.89,   0.00, 90.00, 0.00);
	CreateDynamicObject(2179, 969.56, 2402.98, 14.50,   0.00, 90.00, 0.00);
	CreateDynamicObject(2179, 971.85, 2402.90, 16.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 971.85, 2402.98, 19.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 973.83, 2402.98, 19.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 973.83, 2402.98, 16.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 975.36, 2402.98, 14.67,   0.00, 90.00, 0.00);
	CreateDynamicObject(2179, 975.36, 2402.98, 21.89,   0.00, 90.00, 0.00);
	CreateDynamicObject(2179, 977.67, 2402.98, 16.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(2179, 977.67, 2402.98, 19.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(1432, 949.11, 2467.11, 10.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(3877, 972.59, 2412.70, 11.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(3877, 953.79, 2412.65, 11.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(3877, 972.77, 2453.50, 11.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, 970.97, 2458.57, 12.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(1597, 966.75, 2476.32, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(3494, 967.03, 2469.72, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(18728, 973.70, 2452.85, 12.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(18728, 973.47, 2414.70, 12.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(18728, 955.88, 2402.99, 9.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(18728, 959.76, 2402.61, 9.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, 957.40, 2406.87, 14.04,   0.00, 0.00, 180.00);
	CreateDynamicObject(2780, 988.65, 2425.62, 11.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, 988.96, 2442.18, 11.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 952.62, 2402.41, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 967.19, 2403.06, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 961.26, 2403.01, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 979.79, 2402.42, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 945.71, 2402.80, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 927.73, 2402.46, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 920.68, 2402.57, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 988.86, 2402.31, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, 997.51, 2402.44, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 930.15, 2416.31, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 954.12, 2416.31, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 978.54, 2416.31, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 986.68, 2416.32, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 986.68, 2440.96, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 961.94, 2440.96, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 937.50, 2440.96, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 930.45, 2440.96, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 930.45, 2465.91, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 954.63, 2465.91, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 979.16, 2465.91, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 986.18, 2465.91, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 986.16, 2469.93, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 961.23, 2469.93, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 936.25, 2469.93, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(18981, 930.14, 2469.93, 23.58,   0.00, 90.00, 90.00);
	CreateDynamicObject(3511, 936.01, 2403.03, 9.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3471, 937.02, 2429.36, 11.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3471, 937.02, 2438.93, 11.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3471, 937.02, 2419.53, 11.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3471, 937.02, 2409.72, 11.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3471, 937.02, 2448.81, 11.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3524, 960.87, 2406.03, 12.24,   0.00, 0.00, 180.00);
	CreateDynamicObject(3524, 954.69, 2406.03, 12.24,   0.00, 0.00, 180.00);
	CreateDynamicObject(18981, 943.72, 2404.42, 10.79,   0.00, 0.00, 90.00);
	CreateDynamicObject(18981, 971.68, 2404.38, 10.79,   0.00, 0.00, 90.00);
	CreateDynamicObject(18981, 986.95, 2404.38, 10.79,   0.00, 0.00, 90.00);
	CreateDynamicObject(18981, 999.00, 2417.30, 10.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 999.00, 2442.01, 10.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 999.00, 2470.62, 10.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 974.38, 2482.57, 10.79,   0.00, 0.00, 90.00);
	CreateDynamicObject(18981, 949.49, 2482.57, 10.79,   0.00, 0.00, 90.00);
	CreateDynamicObject(18981, 930.09, 2482.56, 10.79,   0.00, 0.00, 90.00);
	CreateDynamicObject(18981, 918.20, 2469.91, 10.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 918.20, 2445.20, 10.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 918.20, 2420.38, 10.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 918.20, 2416.35, 10.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 930.58, 2404.38, 10.79,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 958.30, 2404.46, 19.00,   0.00, 90.00, 0.00);
	CreateDynamicObject(18766, 958.30, 2404.46, 14.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 996.27, 2482.60, 18.31,   0.00, 90.00, 0.00);
	CreateDynamicObject(18766, 996.27, 2482.60, 14.66,   0.00, 90.00, 0.00);
	CreateDynamicObject(18766, 992.06, 2482.60, 18.39,   0.00, 90.00, 0.00);
	CreateDynamicObject(18766, 992.10, 2482.61, 14.68,   0.00, 90.00, 0.00);
	CreateDynamicObject(18766, 988.22, 2482.57, 18.37,   0.00, 90.00, 0.00);
	CreateDynamicObject(18766, 988.22, 2482.57, 17.32,   0.00, 90.00, 0.00);
	CreateDynamicObject(1723, 919.74, 2456.34, 9.95,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 921.41, 2457.84, 13.75,   180.00, 0.00, 0.00);
	CreateDynamicObject(18981, 986.96, 2458.38, 10.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(18981, 999.08, 2446.45, 10.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 974.29, 2477.83, 16.71,   90.00, 0.00, 90.00);
	CreateDynamicObject(18766, 974.33, 2468.01, 16.71,   90.00, 0.00, 90.00);
	CreateDynamicObject(18766, 969.36, 2474.82, 16.71,   90.00, 0.00, 90.00);
	CreateDynamicObject(18766, 969.36, 2464.84, 16.71,   90.00, 0.00, 90.00);
	CreateDynamicObject(18766, 969.31, 2463.13, 16.71,   90.00, 0.00, 90.00);
	CreateDynamicObject(18766, 968.54, 2475.28, 16.71,   90.00, 0.00, 90.00);
	CreateDynamicObject(18766, 968.52, 2465.40, 16.71,   90.00, 0.00, 90.00);
	CreateDynamicObject(18766, 968.51, 2463.23, 16.71,   90.00, 0.00, 90.00);
	CreateDynamicObject(18766, 976.82, 2477.85, 17.64,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 976.78, 2466.27, 17.64,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 976.81, 2463.77, 20.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 976.81, 2463.77, 17.64,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 976.78, 2466.27, 20.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 976.82, 2477.85, 20.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(3462, 972.85, 2458.97, 18.16,   0.00, 0.00, 285.40);
	CreateDynamicObject(18766, 923.38, 2476.46, 20.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 923.38, 2476.46, 12.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 923.37, 2476.48, 16.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 927.91, 2475.56, 12.25,   0.00, 0.00, 90.00);
	CreateDynamicObject(1491, 928.39, 2469.08, 9.95,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 923.44, 2468.55, 16.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 923.46, 2468.53, 20.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(2528, 919.70, 2475.50, 9.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(2528, 921.72, 2475.46, 9.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(2528, 923.86, 2475.50, 9.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(2528, 925.93, 2475.48, 9.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(3095, 920.69, 2477.65, 7.97,   90.00, 0.00, 90.00);
	CreateDynamicObject(3095, 922.73, 2477.61, 7.97,   90.00, 0.00, 90.00);
	CreateDynamicObject(3095, 924.76, 2477.63, 7.97,   90.00, 0.00, 90.00);
	CreateDynamicObject(1491, 919.17, 2473.20, 9.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(3095, 918.64, 2477.62, 7.97,   90.00, 0.00, 90.00);
	CreateDynamicObject(1491, 921.23, 2473.19, 9.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(1491, 923.26, 2473.21, 9.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(3095, 926.80, 2477.60, 7.97,   90.00, 0.00, 90.00);
	CreateDynamicObject(1491, 925.30, 2473.18, 9.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 927.94, 2477.19, 12.25,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 923.44, 2468.55, 12.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 927.93, 2475.56, 16.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 927.91, 2475.54, 20.76,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 923.46, 2468.53, 20.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 927.84, 2473.22, 14.95,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 927.84, 2473.22, 20.67,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 927.84, 2473.22, 19.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 927.93, 2477.46, 16.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 927.91, 2477.46, 21.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(1709, 990.95, 2465.02, 9.92,   0.00, 0.00, 270.00);
	CreateDynamicObject(7666, 947.29, 2458.41, 20.52,   0.00, 0.00, 304.61);
	CreateDynamicObject(2964, 989.99, 2474.40, 9.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 957.29, 2404.90, 29.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 954.63, 2404.91, 27.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 959.93, 2404.90, 27.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 922.47, 2379.68, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 932.38, 2379.68, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 942.16, 2379.68, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 959.51, 2379.68, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 963.95, 2375.17, 11.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 963.95, 2365.29, 11.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 963.95, 2355.32, 11.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 963.96, 2345.42, 11.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 917.96, 2375.16, 11.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 917.96, 2365.23, 11.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 917.96, 2355.36, 11.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 917.96, 2345.42, 11.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 922.68, 2340.93, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 932.64, 2340.93, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 942.58, 2340.93, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 959.50, 2340.93, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 952.49, 2340.93, 11.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 930.67, 2367.55, 9.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 951.05, 2367.54, 9.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 930.67, 2352.95, 9.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 951.27, 2352.95, 9.40,   0.00, 90.00, 0.00);
	CreateDynamicObject(1251, 960.36, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 957.12, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 953.95, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 950.97, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 947.96, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 944.92, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 941.84, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 938.89, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 936.08, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 933.20, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 929.96, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 926.96, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 924.09, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 921.39, 2344.39, 9.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 920.86, 2354.58, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 920.85, 2357.77, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 920.85, 2360.63, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 920.85, 2363.32, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 920.85, 2366.37, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 920.85, 2369.15, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 920.85, 2371.92, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 920.85, 2374.69, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 920.85, 2377.41, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2354.58, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2357.79, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2360.63, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2363.32, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2366.37, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2369.15, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2371.92, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2374.69, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 960.21, 2377.41, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1597, 942.74, 2359.46, 12.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, 942.73, 2369.18, 12.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, 940.39, 2355.53, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 940.39, 2358.45, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 940.39, 2361.08, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 940.39, 2363.62, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 940.39, 2366.18, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 940.39, 2368.78, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 940.39, 2371.19, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 940.39, 2373.43, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 945.45, 2373.43, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 945.45, 2371.19, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 945.45, 2368.78, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 945.45, 2366.18, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 945.45, 2363.62, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 945.45, 2361.08, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 945.45, 2358.45, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 9945.45, 40.39, 2355.53,   0.00, 0.00, 90.00);
	CreateDynamicObject(1251, 945.45, 2355.53, 9.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(1232, 943.03, 2373.82, 11.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, 943.03, 2354.85, 11.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(3877, 942.86, 2364.33, 11.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.99, 2355.47, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.99, 2358.45, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.99, 2361.08, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.99, 2363.62, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.99, 2366.18, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.99, 2368.78, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.99, 2371.19, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.99, 2373.43, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 948.76, 2355.54, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 948.76, 2358.45, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 948.76, 2361.08, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 948.76, 2363.62, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 948.76, 2366.18, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 948.76, 2368.78, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 948.76, 2371.19, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 948.76, 2373.43, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.80, 2377.42, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.80, 2374.69, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.80, 2371.92, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.80, 2369.15, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.82, 2366.37, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.82, 2363.32, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.82, 2360.63, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.82, 2357.79, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 956.82, 2354.58, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2354.58, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2357.71, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2360.65, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2363.32, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2366.36, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2369.14, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2371.92, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2374.70, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.22, 2377.41, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 921.40, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 924.09, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 926.96, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 929.96, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 933.20, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 936.08, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 938.89, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 941.84, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 944.92, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 947.96, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 950.97, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 953.95, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 957.12, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(19124, 960.36, 2347.73, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(18981, 951.27, 2352.95, 14.85,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 951.05, 2367.54, 14.85,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 930.67, 2367.55, 14.85,   0.00, 90.00, 0.00);
	CreateDynamicObject(18981, 930.67, 2352.95, 14.85,   0.00, 90.00, 0.00);
	CreateDynamicObject(1432, 941.09, 2466.49, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 942.19, 2474.79, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 944.66, 2476.27, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 949.96, 2476.26, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 947.07, 2477.59, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 953.14, 2476.27, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 955.18, 2473.03, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 956.21, 2475.94, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 954.76, 2467.40, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 951.90, 2467.23, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 946.14, 2468.80, 10.06,   0.00, 0.00, 30.00);
	CreateDynamicObject(1432, 942.42, 2472.30, 10.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 933.33, 2471.19, 12.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 937.78, 2478.25, 12.25,   0.00, 0.00, 90.00);
	CreateDynamicObject(1491, 938.24, 2471.72, 9.95,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 937.84, 2475.72, 14.93,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 937.77, 2478.24, 14.93,   0.00, 0.00, 90.00);
	CreateDynamicObject(18766, 933.33, 2471.19, 14.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(18766, 933.34, 2473.34, 17.19,   90.00, 0.00, 0.00);
	CreateDynamicObject(18766, 933.34, 2478.33, 17.19,   90.00, 0.00, 0.00);
	CreateDynamicObject(18766, 933.34, 2479.96, 17.19,   90.00, 0.00, 0.00);
	CreateDynamicObject(1837, 937.36, 2476.16, 10.86,   0.00, 0.00, 270.00);
	CreateDynamicObject(1837, 937.35, 2479.37, 10.86,   0.00, 0.00, 271.14);
	CreateDynamicObject(2125, 936.24, 2474.74, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(2125, 936.23, 2475.49, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(2125, 936.24, 2476.88, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(2125, 936.24, 2476.18, 10.26,   0.00, 0.00, 2.04);
	CreateDynamicObject(2125, 936.24, 2477.58, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(2125, 936.24, 2478.19, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(2125, 936.24, 2478.85, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(2125, 936.24, 2479.48, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(2125, 936.24, 2480.07, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(2125, 936.24, 2480.61, 10.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(1824, 931.63, 2478.95, 10.47,   0.00, 0.00, 270.84);
	CreateDynamicObject(1698, 964.69, 2472.18, 17.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(1698, 961.48, 2472.18, 17.08,   0.00, 0.00, 90.24);
	CreateDynamicObject(1698, 958.30, 2472.18, 17.08,   0.00, 0.00, 90.24);
	CreateDynamicObject(1698, 955.06, 2472.18, 17.08,   0.00, 0.00, 90.24);
	CreateDynamicObject(1698, 951.96, 2472.18, 17.08,   0.00, 0.00, 90.24);
	CreateDynamicObject(1698, 948.77, 2472.18, 17.08,   0.00, 0.00, 90.24);
	CreateDynamicObject(1698, 945.61, 2472.18, 17.08,   0.00, 0.00, 90.24);
	CreateDynamicObject(1698, 942.46, 2472.18, 17.08,   0.00, 0.00, 90.24);
	CreateDynamicObject(1698, 939.40, 2472.18, 17.30,   9.00, 0.00, 90.24);
	CreateDynamicObject(3850, 942.57, 2472.82, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 945.99, 2472.82, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 949.44, 2472.82, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 952.88, 2472.82, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 956.31, 2472.82, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 959.78, 2472.82, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 963.21, 2472.82, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 963.21, 2471.56, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 959.78, 2471.56, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 956.31, 2471.56, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 952.88, 2471.56, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 949.44, 2471.56, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 945.99, 2471.56, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 942.57, 2471.56, 17.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(3850, 939.04, 2471.56, 17.93,   10.00, 0.00, 90.00);
	CreateDynamicObject(3850, 939.04, 2472.82, 17.93,   10.00, 0.00, 90.00);
	CreateDynamicObject(19325, 938.21, 2476.16, 19.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 938.21, 2479.33, 19.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(19325, 934.99, 2470.94, 19.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(19325, 931.43, 2470.94, 19.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(1726, 930.37, 2481.37, 17.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1726, 932.78, 2481.37, 17.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1726, 935.25, 2481.37, 17.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 931.18, 2478.98, 17.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 935.08, 2478.98, 17.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 935.10, 2473.61, 17.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(2898, 931.20, 2473.61, 17.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1823, 933.45, 2478.96, 17.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(1823, 930.87, 2478.96, 17.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(1823, 936.11, 2478.96, 17.72,   0.00, 0.00, -3.24);
	CreateDynamicObject(3471, 929.37, 2481.06, 18.57,   0.00, 0.00, 270.00);
	CreateDynamicObject(14467, 929.60, 2472.18, 20.01,   0.00, 0.00, 72.92);
	CreateDynamicObject(2785, 928.80, 2476.14, 18.53,   0.00, 0.00, 90.00);
	CreateDynamicObject(2233, 938.32, 2481.72, 17.72,   0.00, 0.00, 323.79);
	//Spielothek
	CreateDynamicObject(14577, -1004.700012207, -838.59997558594, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(2946, -960.40002441406, -841.5, 3.9000000953674, 0, 0, 0);
	CreateDynamicObject(2946, -960.40002441406, -841.5, 6.3000001907349, 0, 0, 0);
	CreateDynamicObject(1515, -963.70001220703, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(1515, -964.5, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(1515, -965.29998779297, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(1515, -966.09997558594, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(1515, -966.90002441406, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(1897, -966.70001220703, -841.59997558594, 7, 0, 0, 0);
	CreateDynamicObject(1895, -966.70001220703, -841.79998779297, 8.1000003814697, 0, 0, 0);
	CreateDynamicObject(2640, -971.09997558594, -834.29998779297, 6.6999998092651, 0, 0, 0);
	CreateDynamicObject(2640, -971.90002441406, -834.29998779297, 6.6999998092651, 0, 0, 0);
	CreateDynamicObject(2681, -968.20001220703, -839.79998779297, 5.9000000953674, 0, 0, 269.99996948242);
	CreateDynamicObject(2681, -968.20001220703, -841, 5.9000000953674, 0, 0, 269.99996948242);
	CreateDynamicObject(2754, -960.79998779297, -838.5, 6.8000001907349, 0, 0, 0);
	CreateDynamicObject(2754, -960.79998779297, -837.70001220703, 6.8000001907349, 0, 0, 0);
	CreateDynamicObject(2754, -960.79998779297, -836.90002441406, 6.8000001907349, 0, 0, 0);
	CreateDynamicObject(2754, -960.79998779297, -836.09997558594, 6.8000001907349, 0, 0, 0);
	CreateDynamicObject(2778, -967.29998779297, -838.90002441406, 5.9000000953674, 0, 0, 180);
	CreateDynamicObject(2778, -966.09997558594, -838.90002441406, 5.9000000953674, 0, 0, 180);
	CreateDynamicObject(2779, -965.29998779297, -839.79998779297, 5.9000000953674, 0, 0, 90);
	CreateDynamicObject(2779, -965.29998779297, -841.09997558594, 5.9000000953674, 0, 0, 90);
	CreateDynamicObject(2785, -972.90002441406, -838, 6.6999998092651, 0, 0, 90);
	CreateDynamicObject(3430, -961.29998779297, -845.40002441406, 7.5, 0, 0, 0);
	CreateDynamicObject(3441, -961.70001220703, -834.5, 7.8000001907349, 0, 0, 0);
	CreateDynamicObject(3437, -966.79998779297, -846.70001220703, 11.699999809265, 0, 90, 0);
	CreateDynamicObject(3437, -966.90002441406, -833.79998779297, 11.699999809265, 0, 90, 0);
	CreateDynamicObject(7313, -960.5, -839.20001220703, 9.8000001907349, 0, 0, 269.99996948242);
	CreateDynamicObject(2714, -966.79998779297, -841.5, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(948, -972.90002441406, -834.20001220703, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(2245, -960.90002441406, -844.20001220703, 9.5, 0, 0, 0);
	CreateDynamicObject(2245, -961.40002441406, -844.20001220703, 9.5, 0, 0, 0);
	CreateDynamicObject(3472, -966.59997558594, -840.40002441406, 1, 0, 0, 0);
	CreateDynamicObject(1898, -966.70001220703, -841.79998779297, 9.1999998092651, 0, 0, 0);
	CreateDynamicObject(2681, -967.79998779297, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(2681, -968.59997558594, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(2778, -969.40002441406, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(2778, -970.20001220703, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(2779, -972.79998779297, -841.20001220703, 5.9000000953674, 0, 0, 90);
	CreateDynamicObject(2779, -972.79998779297, -842, 5.9000000953674, 0, 0, 90);
	CreateDynamicObject(2779, -972.79998779297, -842.79998779297, 5.9000000953674, 0, 0, 90);
	CreateDynamicObject(2779, -972.79998779297, -843.59997558594, 5.9000000953674, 0, 0, 90);
	CreateDynamicObject(2779, -972.79998779297, -844.40002441406, 5.9000000953674, 0, 0, 90);
	CreateDynamicObject(1661, -963.70001220703, -837.20001220703, 10.60000038147, 0, 0, 0);
	CreateDynamicObject(1661, -970.90002441406, -843.5, 10.60000038147, 0, 0, 0);
	CreateDynamicObject(1661, -971, -837.79998779297, 10.60000038147, 0, 0, 0);
	CreateDynamicObject(1738, -972.70001220703, -846.5, 6.5, 0, 0, 0);
	CreateDynamicObject(1738, -971.59997558594, -846.5, 6.5, 0, 0, 0);
	CreateDynamicObject(1808, -965.29998779297, -846.59997558594, 5.9000000953674, 0, 0, 180);
	CreateDynamicObject(1808, -965.79998779297, -846.59997558594, 5.9000000953674, 0, 0, 180);
	CreateDynamicObject(2100, -973.09997558594, -845.79998779297, 5.9000000953674, 0, 0, 92);
	CreateDynamicObject(2817, -967.20001220703, -842.90002441406, 5.9000000953674, 0, 0, 322);
	CreateDynamicObject(14527, -964.29998779297, -843.79998779297, 8.6999998092651, 0, 0, 0);
	CreateDynamicObject(18077, -968.09997558594, -833.20001220703, 6.3000001907349, 0, 0, 269.99996948242);
	CreateDynamicObject(2290, -967.20001220703, -846.20001220703, 5.9000000953674, 0, 0, 180);
	CreateDynamicObject(2080, -968.70001220703, -845, 5.5, 0, 0, 0);
	CreateDynamicObject(1657, -967.09997558594, -845.79998779297, 6.4000000953674, 0, 0, 0);
	CreateDynamicObject(2312, -964, -833.79998779297, 9.1999998092651, 0, 0, 0);
	CreateDynamicObject(2312, -965, -833.79998779297, 9.1999998092651, 0, 0, 0);
	CreateDynamicObject(2312, -965.90002441406, -833.79998779297, 9.1999998092651, 0, 0, 0);
	CreateDynamicObject(2312, -966.90002441406, -833.79998779297, 9.1999998092651, 0, 0, 0);
	CreateDynamicObject(2312, -967.90002441406, -833.79998779297, 9.1999998092651, 0, 0, 0);
	CreateDynamicObject(2816, -968.40002441406, -845.09997558594, 6.3000001907349, 0, 0, 0);
	CreateDynamicObject(2835, -961.70001220703, -840.20001220703, 5.9000000953674, 0, 0, 269.99996948242);
	CreateDynamicObject(2921, -960.5, -845, 10, 0, 0, 0);
	CreateDynamicObject(1549, -966.70001220703, -839, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(1549, -962.90002441406, -834.29998779297, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(1549, -970.79998779297, -846.5, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(2671, -965.70001220703, -845.09997558594, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(1776, -964.29998779297, -846.90002441406, 7, 0, 0, 182);
	//Garage
	CreateDynamicObject(4640, -2547.1999511719, 2306.8000488281, 5.6999998092651, 0, 0, 280);
	CreateDynamicObject(996, -2551.6999511719, 2307.8999023438, 4.6999998092651, 0, 0, 10);
	CreateDynamicObject(8843, -2541, 2300.8999023438, 4, 0, 0, 278);
	CreateDynamicObject(1231, -2552.1999511719, 2307.5, 6.6999998092651, 0, 0, 294);
	CreateDynamicObject(1231, -2544.1000976563, 2294.6999511719, 6.6999998092651, 0, 0, 278);
	CreateObject(10010, 2560, -2640.1000976563, 12.10000038147, 0, 0, 90);
	CreateDynamicObject(10184, 2526.5, -2674.3999023438, 15.10000038147, 0, 0, 0);
	CreateDynamicObject(10184, 2526.5, -2674.1999511719, 20.10000038147, 0, 0, 0);
	CreateDynamicObject(8378, 2526, -2676.3000488281, 21.5, 0, 0, 90);
	new garages = CreateObject(3077, -2544.6000976563, 2296.1000976563, 3.9000000953674, 0, 0, 280);
	SetObjectMaterialText(garages, "Kostenlos\nparken", 0, 50, "Arial", 15, 1, -32256, -16777216, 1);
	//Jack_Collister
	CreateDynamicObject(3873, -1463.5999755859, 2979.1000976563, 59.299999237061, 0, 0, 0);
	CreateDynamicObject(9078, -1439.4000244141, 2948.1000976563, 79.900001525879, 0, 0, 296);
	CreateDynamicObject(2744, -1459.6999511719, 2985.8000488281, 78.699996948242, 0, 0, 0);
	CreateDynamicObject(3092, -1460, 2985.3000488281, 78.300003051758, 0, 0, 0);
	CreateDynamicObject(1369, -1455.7292, 2984.9172, 77.3000, 0, 0, 0);
	CreateDynamicObject(1344, -1466.3000488281, 2986.8000488281, 77.5, 0, 0, 0);
	CreateDynamicObject(2672, -1461.4000244141, 2984.5, 76.900001525879, 0, 0, 0);
	CreateDynamicObject(2672, -1460.1999511719, 2987.8999023438, 76.900001525879, 0, 0, 0);
	CreateDynamicObject(2673, -1458.5, 2983.8000488281, 76.699996948242, 0, 0, 0);
	CreateDynamicObject(2675, -1460.5999755859, 2982.3000488281, 76.699996948242, 0, 0, 0);
	CreateDynamicObject(3092, -1466.3000488281, 2986.6999511719, 77.5, 0, 0, 178);
	CreateDynamicObject(6986, -1476.3000488281, 2989.6000976563, 89.400001525879, 0, 0, 272);
	CreateDynamicObject(6986, -1467.5, 2998.1000976563, 88.099998474121, 0, 0, 227.99996948242);
	CreateDynamicObject(6986, -1456.9000244141, 2999.1999511719, 88.099998474121, 0, 0, 170);
	CreateDynamicObject(6986, -1447.0999755859, 2994.1000976563, 88.099998474121, 0, 0, 126);
	CreateDynamicObject(7093, -1445, 2978.1999511719, 85.300003051758, 0, 0, 300);
	CreateDynamicObject(321, -1459.9000244141, 2985.5, 79.099998474121, 0, 107.99996948242, 87.999969482422);
	CreateDynamicObject(321, -1460.00, 2985.00, 78.20,   320.26, 7.81, 5.09);
	CreateDynamicObject(3534, -1512.5999755859, 2994.5, 44.900001525879, 0, 0, 0);
	CreateDynamicObject(10394, -1470, 2974.3000488281, 44.799999237061, 0, 0, 0);
	CreateDynamicObject(10394, -1500.5, 2973.69921875, 78.199996948242, 0, 0, 0);
	CreateDynamicObject(3534, -1504.0999755859, 2962.1000976563, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1501.4000244141, 2964, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1498.5999755859, 2965.8999023438, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1495.8000488281, 2967.8000488281, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1492.5999755859, 2969.6999511719, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1489.4000244141, 2971.6999511719, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1486.3000488281, 2973.8000488281, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1483.3000488281, 2975.8000488281, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1488.4000244141, 2976.3999023438, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1493.0999755859, 2976.5, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1498.3000488281, 2976.5, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1483.4000244141, 2971.5, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1483.9000244141, 2966.8999023438, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1484.0999755859, 2962.6999511719, 76.800003051758, 0, 0, 0);
	CreateDynamicObject(3534, -1467.8000488281, 2989.8999023438, 77.900001525879, 0, 0, 0);
	CreateDynamicObject(3534, -1463.5999755859, 2991, 77.900001525879, 0, 0, 0);
	CreateDynamicObject(3534, -1459.1999511719, 2990, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1455.6999511719, 2988, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1453.3000488281, 2984.6000976563, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1451.9000244141, 2980.8999023438, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1451.9000244141, 2977, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1471.5, 2987.6000976563, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1473.9000244141, 2984.6000976563, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1471.0999755859, 2983.1000976563, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1467.6999511719, 2981.1999511719, 77.900001525879, 0, 0, 0);
	CreateDynamicObject(3534, -1463.5, 2979.1000976563, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1460.4000244141, 2977.3000488281, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1457.3000488281, 2975.3999023438, 78, 0, 0, 0);
	CreateDynamicObject(3534, -1453.5, 2973.8999023438, 78, 0, 0, 0);
	CreateDynamicObject(1259, -1461.1999511719, 2992.3999023438, 76, 0, 354, 90);
	new jackson = CreateObject(7914,-1459.40002441,2992.30004883,82.09999847,0.00000000,0.00000000,0.00000000); //object(vgwestbillbrd15) (1)
	SetObjectMaterialText(jackson, "Jackson_Collister", 0, 50, "Arial", 15, 1, -32256, -16777216, 1);
	//Autopate Interior
	CreateObject(16150, 2365.3000488281, -1544.9000244141, -25.5, 0, 0, 0);
	CreateDynamicObject(18070, 2363.1999511719, -1542.6999511719, -25.200000762939, 0, 0, 0);
	CreateDynamicObject(14629, 2368.1999511719, -1540.5999755859, -20, 0, 0, 0);
	CreateDynamicObject(2967, 2362.8999023438, -1544, -24.700000762939, 0, 0, 172);
	CreateDynamicObject(1715, 2363.3999023438, -1542.6999511719, -25.5, 0, 0, 0);
	CreateDynamicObject(2959, 2361.3999023438, -1551.1999511719, -25.5, 0, 0, 0);
	CreateDynamicObject(2924, 2369.1000976563, -1547, -24.5, 0, 0, 90);
	CreateDynamicObject(1738, 2362.1999511719, -1539.3000488281, -24.799999237061, 0, 0, 0);
	CreateDynamicObject(1736, 2363.3000488281, -1539.4000244141, -23.299999237061, 0, 0, 0);
	CreateDynamicObject(1782, 2365.3000488281, -1540.5999755859, -24.60000038147, 0, 0, 0);
	CreateDynamicObject(1783, 2365.3000488281, -1540.5999755859, -24.39999961853, 0, 0, 0);
	CreateDynamicObject(1792, 2366.3999023438, -1540.8000488281, -24.700000762939, 0, 0, 320);
	CreateDynamicObject(1808, 2368.8000488281, -1539.1999511719, -25.5, 0, 0, 0);
	CreateDynamicObject(1808, 2368.3000488281, -1539.1999511719, -25.5, 0, 0, 0);
	CreateDynamicObject(1828, 2364, -1549.9000244141, -25.5, 0, 0, 322);
	CreateDynamicObject(2190, 2366.3999023438, -1544.5, -24.700000762939, 0, 0, 213.99996948242);
	CreateDynamicObject(2190, 2365.6999511719, -1545, -24.700000762939, 0, 0, 187.99996948242);
	CreateDynamicObject(2202, 2368.5, -1545.8000488281, -25.5, 0, 0, 272);
	CreateDynamicObject(2332, 2364.1000976563, -1538.8000488281, -25, 0, 0, 0);
	CreateDynamicObject(2816, 2365.8999023438, -1542.1999511719, -24.700000762939, 0, 0, 0);
	CreateDynamicObject(2820, 2366.5, -1542.5999755859, -24.700000762939, 0, 0, 0);
	CreateDynamicObject(2826, 2365.8000488281, -1543.0999755859, -24.700000762939, 0, 0, 0);
	CreateDynamicObject(2828, 2361.8999023438, -1544.8000488281, -24.700000762939, 0, 0, 312);
	//Autopate
	atafel = CreateObject(3077, -2384, 2443, 8.1999998092651, 0, 0, 338);
	SetObjectMaterialText(atafel, "Der Autopate", 0, 50, "Arial", 15, 1, -32256, -16777216, 1);
	CreateDynamicObject(3533, -2393.6000976563, 2451, 11.60000038147, 0, 0, 0);
	CreateDynamicObject(3533, -2371.5, 2442.1999511719, 11.60000038147, 0, 0, 0);
	CreateDynamicObject(2680, -2385.5, 2447.6999511719, 10.39999961853, 0, 0, 0);
	CreateDynamicObject(1568, -2378.8999023438, 2440.6000976563, 9.1000003814697, 0, 0, 0);
	CreateDynamicObject(1568, -2389.3000488281, 2444.6000976563, 9.1000003814697, 0, 0, 0);
	CreateDynamicObject(1568, -2385.3000488281, 2444.1999511719, 8.1000003814697, 0, 0, 0);
	CreateDynamicObject(1568, -2382.1999511719, 2442.8999023438, 8.1999998092651, 0, 0, 0);
	CreateDynamicObject(647, -2364.8000488281, 2434.1000976563, 9.3000001907349, 0, 0, 0);
	CreateDynamicObject(647, -2354, 2455.5, 7.5999999046326, 0, 0, 0);
	CreateDynamicObject(647, -2390.6000976563, 2466.8999023438, 10.800000190735, 0, 0, 0);
	CreateDynamicObject(715, -2378.6999511719, 2464, 16.299999237061, 0, 0, 38);
	CreateDynamicObject(703, -2367.6999511719, 2434.8999023438, 7.5999999046326, 0, 0, 352);
	CreateDynamicObject(681, -2356.6000976563, 2448, 6.8000001907349, 0, 0, 0);
	CreateDynamicObject(681, -2355.3000488281, 2457.6000976563, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(681, -2359.6999511719, 2453.8999023438, 7.3000001907349, 0, 0, 0);
	CreateDynamicObject(681, -2355.3999023438, 2452.8000488281, 6.4000000953674, 0, 0, 0);
	CreateDynamicObject(681, -2361.3000488281, 2461.3999023438, 5.9000000953674, 0, 0, 0);
	CreateDynamicObject(681, -2365.5, 2461.8999023438, 6.9000000953674, 0, 0, 0);
	CreateDynamicObject(681, -2363.8000488281, 2462.8999023438, 5.6999998092651, 0, 0, 0);
	CreateDynamicObject(681, -2378.6000976563, 2466.3000488281, 7.3000001907349, 0, 0, 0);
	CreateDynamicObject(681, -2372.8999023438, 2465.8999023438, 6.3000001907349, 0, 0, 0);
	CreateDynamicObject(681, -2372.1000976563, 2464, 7, 0, 0, 0);
	CreateDynamicObject(681, -2368.6000976563, 2464.1000976563, 6.0999999046326, 0, 0, 0);
	CreateDynamicObject(674, -2360.6999511719, 2458.1000976563, 7.4000000953674, 0, 0, 0);
	CreateDynamicObject(672, -2368.5, 2458.3000488281, 8.3000001907349, 0, 0, 0);
	CreateDynamicObject(2714, -2377.6999511719, 2444.5, 11.300000190735, 0, 0, 340);
	//Crip or Die Interior
	CreateObject(14588,-98.29785156,-267.04980469,2703.50634766,0.00000000,0.00000000,0.00000000); //object(ab_abbatoir01) (1)
    CreateDynamicObject(13656,-25.18847656,-283.83496094,2647.69531250,0.00000000,0.00000000,0.00000000); //object(fuckknows) (2)
    CreateDynamicObject(1508,-95.14941406,-282.77929688,2701.26611328,0.00000000,0.00000000,0.00000000); //object(dyn_garage_door) (1)
    CreateDynamicObject(1499,-95.12695312,-285.83886719,2699.61474609,0.00000000,0.00000000,270.49438477); //object(gen_doorint05) (1)
    CreateDynamicObject(1499,-95.10786438,-288.82321167,2699.61474609,0.00000000,0.00000000,89.49462891); //object(gen_doorint05) (2)
    CreateDynamicObject(1508,-81.33886719,-244.11523438,2701.27294922,0.00000000,0.00000000,0.00000000); //object(dyn_garage_door) (1)
    CreateDynamicObject(1508,-95.15917969,-286.80468750,2703.76098633,0.00000000,0.00000000,0.00000000); //object(dyn_garage_door) (1)
    CreateDynamicObject(1709,-93.39228821,-232.30055237,2699.60791016,0.00000000,0.00000000,90.75000000); //object(kb_couch08) (2)
    CreateDynamicObject(1707,-91.13670349,-226.33976746,2699.60791016,0.00000000,0.00000000,0.00000000); //object(kb_couch01) (1)
    CreateDynamicObject(1707,-86.84863281,-226.46289062,2699.60791016,0.00000000,0.00000000,1.74682617); //object(kb_couch01) (2)
    CreateDynamicObject(1710,-89.13728333,-234.33372498,2699.60791016,0.00000000,0.00000000,180.00000000); //object(kb_couch07) (1)
    CreateDynamicObject(1710,-82.30017090,-227.87661743,2699.60791016,0.00000000,0.00000000,268.49453735); //object(kb_couch07) (2)
    CreateDynamicObject(1710,-82.29980469,-227.87597656,2699.60791016,0.00000000,0.00000000,268.48937988); //object(kb_couch07) (3)
    CreateDynamicObject(1710,-83.14976501,-234.34671021,2699.60791016,0.00000000,0.00000000,177.98937988); //object(kb_couch07) (4)
    CreateDynamicObject(926,-94.07031250,-233.98535156,2699.85717773,0.00000000,0.00000000,316.74133301); //object(rubbish_box2) (1)
    CreateDynamicObject(14791,-105.66125488,-233.62854004,2701.50781250,0.00000000,0.00000000,0.00000000); //object(a_vgsgymboxa) (1)
    CreateDynamicObject(3819,-97.67595673,-234.05863953,2700.61254883,0.00000000,0.00000000,0.00000000); //object(bleacher_sfsx) (1)
    CreateDynamicObject(3819,-112.61670685,-233.88407898,2700.61254883,0.00000000,0.00000000,180.00000000); //object(bleacher_sfsx) (2)
    CreateDynamicObject(14782,-111.92964935,-226.19540405,2700.62402344,0.00000000,0.00000000,0.00000000); //object(int3int_boxing30) (1)
    CreateDynamicObject(2991,-97.71770477,-227.73004150,2700.23559570,0.00000000,0.00000000,0.00000000); //object(imy_bbox) (2)
    CreateDynamicObject(3037,-110.17871094,-256.64355469,2701.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (1)
    CreateDynamicObject(3037,-91.67907715,-271.30200195,2703.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (2)
    CreateDynamicObject(2898,-95.11888123,-260.15966797,2700.65014648,0.03442383,90.24783325,359.99975586); //object(funturf_law) (1)
    CreateDynamicObject(1499,-89.47648621,-271.30743408,2699.60791016,0.00000000,0.00000000,359.98632812); //object(gen_doorint05) (1)
    CreateDynamicObject(3037,-101.76660156,-256.55371094,2701.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (3)
    CreateDynamicObject(3037,-109.07031250,-256.53906250,2701.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (4)
    CreateDynamicObject(3037,-106.62500000,-256.57031250,2704.20629883,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (5)
    CreateDynamicObject(1492,-89.13627625,-300.95327759,2699.60791016,0.00000000,0.00000000,0.00000000); //object(gen_doorint02) (1)
    CreateDynamicObject(2205,-87.28223419,-306.11087036,2699.60913086,0.00000000,0.00000000,0.00000000); //object(med_office8_desk_1) (1)
    CreateDynamicObject(1711,-86.83332062,-303.97357178,2699.61083984,0.00000000,0.00000000,0.00000000); //object(kb_chair01) (1)
    CreateDynamicObject(1715,-86.63104248,-307.63616943,2699.60693359,0.00000000,0.00000000,181.25000000); //object(kb_swivelchair2) (1)
    CreateDynamicObject(3037,-100.31152344,-256.66503906,2701.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (2)
    CreateDynamicObject(1499,-106.92871094,-256.48925781,2699.60791016,0.00000000,0.00000000,359.73632812); //object(gen_doorint05) (1)
    CreateDynamicObject(3037,-84.31444550,-271.33050537,2703.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (2)
    CreateDynamicObject(1499,-103.91894531,-256.46386719,2699.60791016,0.00000000,0.00000000,179.98901367); //object(gen_doorint05) (1)
    CreateDynamicObject(1499,-86.47949219,-271.28143311,2699.60791016,0.00000000,0.00000000,179.98901367); //object(gen_doorint05) (1)
    CreateDynamicObject(3037,-93.01473236,-271.24536133,2703.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (2)
    CreateDynamicObject(3037,-79.91473389,-271.34243774,2703.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (2)
    CreateDynamicObject(3037,-86.61709595,-271.28967285,2704.29638672,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (2)
    CreateDynamicObject(3037,-86.06420135,-271.29855347,2707.80639648,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (2)
    CreateDynamicObject(18260,-113.46258545,-300.11657715,2704.00634766,0.00000000,0.00000000,244.24462891); //object(crates01) (2)
    CreateDynamicObject(2603,-83.08013916,-261.53747559,2700.05981445,0.00000000,0.00000000,270.75000000); //object(police_cell_bed) (1)
    CreateDynamicObject(2603,-83.21212769,-265.07394409,2700.05981445,0.00000000,0.00000000,270.74707031); //object(police_cell_bed) (2)
    CreateDynamicObject(2603,-83.08612823,-268.24624634,2700.05981445,0.00000000,0.00000000,270.74707031); //object(police_cell_bed) (3)
    CreateDynamicObject(14699,-84.38232422,-307.48748779,2702.11572266,0.00000000,0.00000000,0.00000000); //object(int_tat_lights) (2)
    CreateDynamicObject(14842,-83.17741394,-257.86981201,2701.57153320,0.00000000,0.00000000,270.00000000); //object(int_policea07) (2)
    CreateDynamicObject(14384,-85.41957855,-252.83740234,2701.10058594,0.00000000,0.00000000,180.25004578); //object(kitchen_bits) (1)
    CreateDynamicObject(3055,-89.21598053,-253.02322388,2701.80590820,0.00000000,0.00000000,90.00000000); //object(kmb_shutter) (1)
    CreateDynamicObject(1433,-90.94671631,-254.48638916,2699.78759766,0.00000000,0.00000000,0.00000000); //object(dyn_table_1) (1)
    CreateDynamicObject(926,-92.20387268,-254.57051086,2699.85717773,0.00000000,0.00000000,316.74682617); //object(rubbish_box2) (1)
    CreateDynamicObject(926,-90.87577057,-253.25616455,2699.85717773,0.00000000,0.00000000,0.24682617); //object(rubbish_box2) (1)
    CreateDynamicObject(926,-90.93659973,-256.07272339,2699.85717773,0.00000000,0.00000000,0.24169922); //object(rubbish_box2) (1)
    CreateDynamicObject(926,-89.54051971,-254.74157715,2699.85717773,0.00000000,0.00000000,94.24169922); //object(rubbish_box2) (1)
    CreateDynamicObject(1432,-93.35039520,-250.83764648,2699.60791016,0.00000000,0.00000000,50.00000000); //object(dyn_table_2) (1)
    CreateDynamicObject(2415,-88.39543152,-251.58883667,2699.60791016,0.00000000,0.00000000,90.25000000); //object(cj_ff_fryer) (1)
    CreateDynamicObject(2417,-88.54780579,-250.21372986,2699.60791016,0.00000000,0.00000000,89.25000000); //object(cj_ff_cooker) (1)
    CreateDynamicObject(2811,-83.72886658,-307.96405029,2699.60620117,0.00000000,0.00000000,52.00000000); //object(gb_romanpot01) (1)
    CreateDynamicObject(2811,-89.60726166,-308.14785767,2699.60620117,0.00000000,0.00000000,51.99829102); //object(gb_romanpot01) (2)
    CreateDynamicObject(3055,-103.86166382,-295.97775269,2699.51269531,90.00000000,0.00000000,0.00000000); //object(kmb_shutter) (3)
    CreateDynamicObject(3055,-104.31262207,-300.93267822,2699.51269531,90.00000000,0.00000000,0.00000000); //object(kmb_shutter) (4)
    CreateDynamicObject(3055,-94.18767548,-300.84317017,2699.51269531,90.00000000,0.00000000,0.00000000); //object(kmb_shutter) (5)
    CreateDynamicObject(3055,-93.94046783,-295.82284546,2699.51269531,90.00000000,0.00000000,0.00000000); //object(kmb_shutter) (6)
    CreateDynamicObject(2000,-88.45681000,-254.22750854,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (1)
    CreateDynamicObject(2000,-88.44078064,-254.77642822,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (2)
    CreateDynamicObject(2000,-88.41259003,-255.77566528,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (4)
    CreateDynamicObject(2000,-87.85582733,-256.00274658,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (5)
    CreateDynamicObject(2000,-87.43394470,-256.05642700,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (6)
    CreateDynamicObject(2000,-87.09837341,-255.99818420,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (7)
    CreateDynamicObject(2000,-86.47454834,-256.05337524,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (8)
    CreateDynamicObject(2000,-84.13223267,-256.07916260,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (9)
    CreateDynamicObject(2000,-83.73510742,-256.13037109,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (10)
    CreateDynamicObject(2000,-83.26325989,-256.19076538,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (11)
    CreateDynamicObject(2000,-83.26269531,-256.19042969,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (12)
    CreateDynamicObject(2000,-82.96740723,-256.05221558,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (13)
    CreateDynamicObject(2000,-82.24776459,-256.14483643,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (14)
    CreateDynamicObject(2000,-82.19555664,-255.74787903,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (15)
    CreateDynamicObject(2000,-82.19531250,-255.74707031,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (16)
    CreateDynamicObject(2000,-82.13465118,-255.25025940,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (17)
    CreateDynamicObject(2000,-82.17688751,-254.91281128,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (18)
    CreateDynamicObject(2000,-82.17122650,-254.23803711,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (19)
    CreateDynamicObject(2000,-81.68807220,-256.37515259,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (20)
    CreateDynamicObject(2000,-82.75397491,-256.43182373,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (21)
    CreateDynamicObject(2000,-83.34257507,-256.55786133,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (22)
    CreateDynamicObject(2000,-83.92103577,-256.71792603,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (23)
    CreateDynamicObject(2000,-84.73601532,-256.03085327,2699.10791016,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (24)
    CreateDynamicObject(2000,-84.74471283,-256.53588867,2699.10791016,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (25)
    CreateDynamicObject(2000,-85.28645325,-256.44384766,2699.10791016,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (26)
    CreateDynamicObject(2000,-85.33440399,-255.97868347,2699.10791016,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (27)
    CreateDynamicObject(2000,-85.94226074,-255.97738647,2699.10791016,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (28)
    CreateDynamicObject(2000,-86.00389099,-256.34643555,2699.10791016,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (29)
    CreateDynamicObject(2000,-86.07374573,-256.76489258,2699.10791016,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (30)
    CreateDynamicObject(2000,-85.40767670,-256.87719727,2699.10791016,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (31)
    CreateDynamicObject(2000,-88.16789246,-256.15945435,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (32)
    CreateDynamicObject(2000,-88.42578125,-255.30078125,2699.30786133,0.00000000,0.00000000,0.00000000); //object(filing_cab_nu) (33)
    CreateDynamicObject(2232,-88.79286194,-255.48683167,2701.97290039,0.00000000,0.00000000,90.50000000); //object(med_speaker_4) (1)
    CreateDynamicObject(2232,-88.76255798,-255.09228516,2701.97290039,0.00000000,0.00000000,90.49987793); //object(med_speaker_4) (2)
    CreateDynamicObject(2232,-88.79325867,-254.55815125,2701.97290039,0.00000000,0.00000000,90.49987793); //object(med_speaker_4) (3)
    CreateDynamicObject(2230,-88.60476685,-253.18774414,2699.60791016,0.00000000,0.00000000,89.50000000); //object(swank_speaker_2) (1)
    CreateDynamicObject(2230,-89.15435791,-253.17642212,2699.60791016,0.00000000,0.00000000,89.49462891); //object(swank_speaker_2) (2)
    CreateDynamicObject(2230,-89.14422607,-252.67590332,2699.60791016,0.00000000,0.00000000,89.49462891); //object(swank_speaker_2) (3)
    CreateDynamicObject(2230,-88.64468384,-252.73583984,2699.60791016,0.00000000,0.00000000,89.49462891); //object(swank_speaker_2) (4)
    CreateDynamicObject(2230,-88.64704895,-252.86032104,2699.60791016,0.00000000,0.00000000,89.49462891); //object(swank_speaker_2) (5)
    CreateDynamicObject(2521,-94.37109375,-270.41333008,2699.60791016,0.00000000,0.00000000,90.25000000); //object(cj_toilet2) (1)
    CreateDynamicObject(2521,-94.37135315,-268.72851562,2699.60791016,0.00000000,0.00000000,90.24719238); //object(cj_toilet2) (2)
    CreateDynamicObject(2521,-94.44329834,-267.07672119,2699.60791016,0.00000000,0.00000000,90.24719238); //object(cj_toilet2) (3)
    CreateDynamicObject(2669,-112.99623871,-298.40795898,2700.94824219,0.00000000,0.00000000,157.50000000); //object(cj_chris_crate) (2)
    CreateDynamicObject(2567,-109.04917908,-298.23114014,2701.53540039,0.00000000,0.00000000,269.75000000); //object(ab_warehouseshelf) (1)
    CreateDynamicObject(2567,-109.06734467,-293.17669678,2701.53540039,0.00000000,0.00000000,269.99731445); //object(ab_warehouseshelf) (2)
    CreateDynamicObject(18260,-113.08886719,-276.54882812,2701.18115234,0.00000000,0.00000000,272.99926758); //object(crates01) (2)
    CreateDynamicObject(944,-110.85527802,-299.68756104,2700.49267578,0.00000000,359.75000000,63.75000000); //object(packing_carates04) (1)
    CreateDynamicObject(944,-110.94170380,-299.62292480,2701.82666016,0.00000000,359.74731445,69.49816895); //object(packing_carates04) (2)
    CreateDynamicObject(944,-110.36118317,-298.16342163,2700.49267578,0.00000000,359.74731445,73.49816895); //object(packing_carates04) (3)
    CreateDynamicObject(3066,-97.36394501,-299.25558472,2700.66894531,0.00000000,0.00000000,90.00000000); //object(ammotrn_obj) (1)
    CreateDynamicObject(1433,-113.40845490,-299.21112061,2699.91040039,0.00000000,0.00000000,337.25000000); //object(dyn_table_1) (2)
    CreateDynamicObject(2359,-113.37055206,-299.15924072,2700.62866211,0.00000000,0.00000000,132.00000000); //object(ammo_box_c5) (1)
    CreateDynamicObject(1362,-113.37109375,-252.52148438,2700.20629883,0.00000000,0.00000000,0.00000000); //object(cj_firebin) (1)
    CreateDynamicObject(2035,-114.33557892,-298.09613037,2701.03857422,0.00000000,90.25021362,337.75000000); //object(cj_m16) (1)
    CreateDynamicObject(2035,-114.18252563,-297.61962891,2701.03857422,0.00000000,90.24719238,337.74719238); //object(cj_m16) (2)
    CreateDynamicObject(2035,-113.91109467,-297.10217285,2701.03857422,0.00000000,90.24719238,337.74719238); //object(cj_m16) (3)
    CreateDynamicObject(3015,-114.71958160,-290.99237061,2699.60791016,0.00000000,0.00000000,0.00000000); //object(cr_cratestack) (1)
    CreateDynamicObject(3015,-114.81153870,-291.82714844,2699.60791016,0.00000000,0.00000000,0.00000000); //object(cr_cratestack) (2)
    CreateDynamicObject(3015,-113.81753540,-290.95889282,2699.60791016,0.00000000,0.00000000,0.00000000); //object(cr_cratestack) (3)
    CreateDynamicObject(5262,-111.23828125,-285.00781250,2702.57250977,0.00000000,0.00000000,178.24768066); //object(las2dkwar04) (1)
    CreateDynamicObject(5259,-99.16796875,-267.64843750,2699.00781250,0.00000000,0.00000000,0.00000000); //object(las2dkwar01) (1)
    CreateDynamicObject(5269,-96.29828644,-277.31652832,2701.91699219,0.00000000,0.00000000,0.00000000); //object(las2dkwar05) (1)
    CreateDynamicObject(3037,-110.08990479,-263.44274902,2701.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (1)
    CreateDynamicObject(3037,-106.35923767,-263.46508789,2704.20629883,0.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (5)
    CreateDynamicObject(3037,-101.48292542,-263.38748169,2701.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (3)
    CreateDynamicObject(1499,-106.66113281,-263.40820312,2699.60791016,0.00000000,0.00000000,359.73632812); //object(gen_doorint05) (1)
    CreateDynamicObject(3037,-108.84178162,-263.43151855,2701.80639648,90.00000000,0.00000000,90.00000000); //object(warehouse_door2b) (4)
    CreateDynamicObject(1499,-103.68652344,-263.39160156,2699.60791016,0.00000000,0.00000000,179.98352051); //object(gen_doorint05) (1)
    CreateDynamicObject(1710,-97.56065369,-261.74758911,2699.60717773,0.00000000,0.00000000,88.75000000); //object(kb_couch07) (5)
    CreateDynamicObject(18090,-97.06172943,-252.09442139,2702.17138672,0.00000000,0.00000000,0.00000000); //object(bar_bar1) (1)
    CreateDynamicObject(5269,-111.73889160,-267.81909180,2701.91699219,0.00000000,0.00000000,0.00000000); //object(las2dkwar05) (2)
    CreateDynamicObject(5269,-113.69272614,-267.83697510,2701.91699219,0.00000000,0.00000000,0.00000000); //object(las2dkwar05) (3)
    CreateDynamicObject(1766,-112.06237030,-255.40557861,2699.60791016,0.00000000,0.00000000,180.00000000); //object(med_couch_1) (1)
    CreateDynamicObject(1766,-110.91495514,-251.34416199,2699.60791016,0.00000000,0.00000000,270.24450684); //object(med_couch_1) (2)
    CreateDynamicObject(1766,-114.21688843,-249.37316895,2699.60791016,0.00000000,0.00000000,358.74426270); //object(med_couch_1) (3)
    CreateDynamicObject(2628,-113.42326355,-240.60705566,2699.61474609,0.00000000,0.00000000,90.00000000); //object(gym_bench2) (1)
    CreateDynamicObject(2627,-113.54682159,-243.07095337,2699.61474609,0.00000000,0.00000000,90.75000000); //object(gym_treadmill) (1)
    CreateDynamicObject(2630,-113.70320892,-245.05757141,2699.61474609,0.00000000,0.00000000,269.25000000); //object(gym_bike) (1)
    CreateDynamicObject(2723,-99.76648712,-255.55334473,2699.97607422,0.00000000,0.00000000,0.00000000); //object(lm_stripstool) (1)
    CreateDynamicObject(2723,-99.79714966,-253.95111084,2699.97607422,0.00000000,0.00000000,0.00000000); //object(lm_stripstool) (2)
    CreateDynamicObject(2723,-99.80272675,-252.32424927,2699.97607422,0.00000000,0.00000000,0.00000000); //object(lm_stripstool) (3)
    CreateDynamicObject(2723,-99.76169586,-250.84957886,2699.97607422,0.00000000,0.00000000,0.00000000); //object(lm_stripstool) (4)
    CreateDynamicObject(2723,-99.69508362,-249.34982300,2699.97607422,0.00000000,0.00000000,0.00000000); //object(lm_stripstool) (5)
    CreateDynamicObject(2254,-89.91997528,-304.60162354,2701.87353516,0.00000000,0.00000000,90.00000000); //object(frame_clip_1) (1)
    CreateDynamicObject(2258,-83.29005432,-304.84344482,2701.97924805,0.00000000,0.00000000,269.99996948); //object(frame_clip_5) (1)
    CreateDynamicObject(2256,-85.84432983,-301.11160278,2701.96875000,0.00000000,0.00000000,0.00000000); //object(frame_clip_3) (2)
    CreateDynamicObject(2332,-84.78719330,-308.28472900,2700.06884766,0.00000000,0.00000000,180.25000000); //object(kev_safe) (1)
    CreateDynamicObject(1728,-85.77057648,-291.63073730,2699.60791016,0.00000000,0.00000000,0.00000000); //object(mrk_seating3) (1)
    CreateDynamicObject(1728,-82.89266968,-295.26010132,2699.60791016,0.00000000,359.00000000,269.50000000); //object(mrk_seating3) (2)
    CreateDynamicObject(926,-112.19797516,-264.74664307,2704.38842773,0.00000000,0.00000000,316.74133301); //object(rubbish_box2) (1)
    CreateDynamicObject(926,-114.45182037,-265.84939575,2704.38842773,0.00000000,0.00000000,262.74133301); //object(rubbish_box2) (1)
    CreateDynamicObject(926,-113.22962189,-270.35430908,2704.38842773,0.00000000,0.00000000,192.98583984); //object(rubbish_box2) (1)
    CreateDynamicObject(2991,-105.15119934,-264.84152222,2703.60083008,0.00000000,0.00000000,0.00000000); //object(imy_bbox) (1)
    CreateDynamicObject(2991,-109.13214874,-264.84539795,2703.60083008,0.00000000,0.00000000,0.00000000); //object(imy_bbox) (3)
    CreateDynamicObject(2991,-109.05959320,-266.81820679,2703.60083008,0.00000000,0.00000000,0.00000000); //object(imy_bbox) (4)
    CreateDynamicObject(2991,-105.15332794,-266.82180786,2703.60083008,0.00000000,0.00000000,0.00000000); //object(imy_bbox) (5)
    CreateDynamicObject(2097,-114.02845001,-262.69500732,2699.90820312,0.00000000,0.00000000,358.25000000); //object(bath_high) (1)
    CreateDynamicObject(2738,-114.50225830,-257.31210327,2700.21069336,0.00000000,0.00000000,48.00000000); //object(cj_toilet_bs) (1)
    CreateDynamicObject(2739,-114.53484344,-260.49368286,2699.60791016,0.00000000,0.00000000,89.25000000); //object(cj_b_sink1) (1)
    CreateDynamicObject(2847,-83.51190948,-243.75923157,2699.61474609,0.00000000,0.00000000,269.25000000); //object(gb_bedrug05) (1)
    CreateDynamicObject(1499,-106.81237030,-290.21380615,2699.60791016,0.00000000,0.00000000,359.73632812); //object(gen_doorint05) (1)
    CreateDynamicObject(1499,-103.78660583,-290.22262573,2699.60791016,0.00000000,0.00000000,179.98352051); //object(gen_doorint05) (1)
    CreateDynamicObject(1508,-100.65338898,-290.12677002,2701.26611328,0.00000000,0.00000000,90.25000000); //object(dyn_garage_door) (1)
    CreateDynamicObject(1508,-109.89871216,-290.15994263,2701.26611328,0.00000000,0.00000000,90.24719238); //object(dyn_garage_door) (1)
    CreateDynamicObject(1508,-105.32691956,-290.07632446,2703.76098633,0.00000000,0.00000000,90.00000000); //object(dyn_garage_door) (1)
    CreateDynamicObject(5261,-83.05905151,-281.64044189,2701.84155273,0.00000000,0.00000000,270.25000000); //object(las2dkwar03) (1)
    CreateDynamicObject(925,-83.05712891,-274.85308838,2700.67675781,0.00000000,0.00000000,269.99996948); //object(rack2) (1)
    CreateDynamicObject(2973,-83.13854980,-287.88128662,2699.61474609,0.00000000,0.00000000,0.00000000); //object(k_cargo2) (1)
    CreateDynamicObject(939,-93.64987946,-279.03503418,2702.05102539,0.00000000,0.00000000,88.75000000); //object(cj_df_unit) (1)
    CreateDynamicObject(1362,-85.51982117,-294.74984741,2700.21313477,0.00000000,0.00000000,0.00000000); //object(cj_firebin) (1)
    CreateDynamicObject(18260,-114.82111359,-305.76583862,2704.00634766,0.00000000,0.00000000,55.74255371); //object(crates01) (2)
	//Crip or Die Base
	CreateDynamicObject(3173, -2480.1000976563, -153.69999694824, 32.5, 0, 0, 44);
	CreateDynamicObject(3887, -2491.6999511719, -146.30000305176, 32.099998474121, 0, 0, 0);
	CreateDynamicObject(10984, -2502, -194.5, 25.299999237061, 0, 0, 16);
	CreateDynamicObject(13635, -2500.5, -92.300003051758, 27.200000762939, 0, 0, 0);
	CreateDynamicObject(5822, -2465, -138.5, 27.299999237061, 0, 0, 274);
	CreateDynamicObject(11472, -2446.6999511719, -81.699996948242, 32.900001525879, 0, 0, 90);
	CreateDynamicObject(11472, -2446, -81.699996948242, 36.099998474121, 0, 0, 90);
	CreateDynamicObject(1550, -2482.1000976563, -148.89999389648, 33, 0, 0, 0);
	CreateDynamicObject(2064, -2489.6000976563, -158.80000305176, 33.299999237061, 0, 0, 334);
	CreateDynamicObject(2061, -2490.3000488281, -158.19999694824, 32.900001525879, 0, 0, 0);
	CreateDynamicObject(2061, -2490.3999023438, -158, 32.900001525879, 0, 0, 0);
	CreateDynamicObject(2061, -2489.8999023438, -158.10000610352, 32.900001525879, 0, 0, 0);
	CreateDynamicObject(2228, -2475.1999511719, -156.19999694824, 33.200000762939, 0, 0, 314);
	CreateDynamicObject(3359, -2473, -140.30000305176, 32.5, 0, 0, 0);
	CreateDynamicObject(3458, -2451.3000488281, -165.69999694824, 38.900001525879, 0, 0, 0);
	CreateDynamicObject(11392, -2458.8000488281, -126.69999694824, 24.700000762939, 0, 0, 348);
	CreateDynamicObject(2606, -2471.5, -144.39999389648, 37.599998474121, 16, 0, 180);
	CreateDynamicObject(2046, -2468.1999511719, -144.39999389648, 33.200000762939, 0, 0, 179.99993896484);
	CreateDynamicObject(1709, -2473.1999511719, -137.5, 32.599998474121, 0, 0, 0);
	CreateDynamicObject(1710, -2467.6999511719, -139, 32.599998474121, 0, 0, 269.99996948242);
	CreateDynamicObject(1710, -2474.1999511719, -141.19999694824, 32.599998474121, 0, 0, 88);
	CreateDynamicObject(2114, -2467.6000976563, -144.19999694824, 32.799999237061, 0, 0, 0);
	CreateDynamicObject(2267, -2470.5, -136.10000610352, 35, 0, 0, 0);
	CreateDynamicObject(2283, -2472.3000488281, -136.10000610352, 34.799999237061, 0, 0, 0);
	CreateDynamicObject(2357, -2470, -140.10000610352, 32.799999237061, 0, 0, 270);
	CreateDynamicObject(2357, -2471.3000488281, -140.10000610352, 32.799999237061, 0, 0, 270);
	CreateDynamicObject(2901, -2477.8999023438, -136.30000305176, 33, 0, 0, 0);
	CreateDynamicObject(2901, -2476.5, -136.30000305176, 33, 0, 0, 0);
	CreateDynamicObject(2902, -2478.6999511719, -136.5, 32.700000762939, 0, 0, 0);
	CreateDynamicObject(3496, -2468.3999023438, -157.80000305176, 32.599998474121, 0, 0, 0);
	CreateDynamicObject(974, -2467.3999023438, -159.89999389648, 35.400001525879, 0, 0, 0);
	CreateDynamicObject(974, -2474.1000976563, -159.89999389648, 35.400001525879, 0, 0, 0);
	CreateDynamicObject(974, -2464.1000976563, -156.5, 35.400001525879, 0, 0, 90);
	CreateDynamicObject(1408, -2480.1000976563, -159.89999389648, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1408, -2485.5, -159.89999389648, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1411, -2493.8999023438, -199.89999389648, 26.200000762939, 0, 0, 0);
	CreateDynamicObject(1411, -2513.1999511719, -197.69999694824, 25.89999961853, 0, 0, 0);
	CreateDynamicObject(1413, -2502.3000488281, -173.69999694824, 25.799999237061, 0, 0, 0);
	CreateDynamicObject(3275, -2593.5, -143.5, 4.3000001907349, 0, 0, 308);
	CreateDynamicObject(3275, -2594.1000976563, -121.5, 4.3000001907349, 0, 0, 54);
	CreateDynamicObject(3450, -2475.8999023438, -185.69999694824, 26.700000762939, 0, 0, 0);
	CreateDynamicObject(2896, -2477.1000976563, -143.89999389648, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(2895, -2475.6000976563, -144.39999389648, 32.900001525879, 0, 0, 0);
	CreateDynamicObject(5777, -2478.5, -142.30000305176, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1008, -2468.1999511719, -144.39999389648, 33.700000762939, 0, 0, 0);
	CreateDynamicObject(1073, -2466.8000488281, -136.19999694824, 33.099998474121, 0, 0, 0);
	CreateDynamicObject(1073, -2466.8000488281, -137.10000610352, 33.099998474121, 0, 0, 0);
	CreateDynamicObject(1073, -2466.8000488281, -138, 33.099998474121, 0, 0, 0);
	CreateDynamicObject(1073, -2466.8000488281, -138.89999389648, 33.099998474121, 0, 0, 0);
	CreateDynamicObject(1083, -2466.8000488281, -139.89999389648, 33.099998474121, 0, 0, 0);
	CreateDynamicObject(1083, -2466.8000488281, -140.89999389648, 33.099998474121, 0, 0, 0);
	CreateDynamicObject(1083, -2466.8000488281, -142, 33.099998474121, 0, 0, 0);
	CreateDynamicObject(1083, -2466.8999023438, -143, 33.099998474121, 0, 0, 0);
	CreateDynamicObject(1116, -2475.1000976563, -144.60000610352, 35.799999237061, 0, 0, 0);
	CreateDynamicObject(1115, -2475, -144.60000610352, 35.200000762939, 0, 0, 0);
	CreateDynamicObject(2710, -2471.8000488281, -138.10000610352, 33.299999237061, 0, 0, 0);
	CreateDynamicObject(2690, -2468.8999023438, -144.5, 33, 0, 0, 0);
	CreateDynamicObject(2058, -2471.6000976563, -141.60000610352, 33.299999237061, 0, 0, 324);
	CreateDynamicObject(2057, -2467.6999511719, -143.39999389648, 32.799999237061, 0, 0, 0);
	CreateDynamicObject(2045, -2471.6000976563, -140.80000305176, 33.299999237061, 0, 0, 0);
	CreateDynamicObject(2045, -2475.3000488281, -136.5, 32.700000762939, 0, 0, 38);
	CreateDynamicObject(2036, -2470.8000488281, -138.39999389648, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(2036, -2471.3000488281, -138.69999694824, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1654, -2475.1000976563, -136.30000305176, 32.900001525879, 0, 0, 0);
	CreateDynamicObject(1654, -2474.8000488281, -136.39999389648, 32.900001525879, 0, 0, 0);
	CreateDynamicObject(1650, -2474.5, -136.19999694824, 33, 0, 0, 0);
	CreateDynamicObject(1636, -2478.3999023438, -137.19999694824, 32.799999237061, 0, 0, 0);
	CreateDynamicObject(1636, -2478.1000976563, -137.19999694824, 32.799999237061, 0, 0, 0);
	CreateDynamicObject(1582, -2469.8000488281, -138.69999694824, 33.200000762939, 0, 0, 28);
	CreateDynamicObject(1580, -2477.5, -136.89999389648, 32.700000762939, 0, 0, 0);
	CreateDynamicObject(1580, -2477.5, -137.30000305176, 32.700000762939, 0, 0, 0);
	CreateDynamicObject(1550, -2471.1999511719, -139.69999694824, 33.599998474121, 0, 0, 0);
	CreateDynamicObject(1279, -2476.5, -137, 32.700000762939, 0, 0, 26);
	CreateDynamicObject(1252, -2475.6999511719, -136.60000610352, 32.900001525879, 0, 0, 0);
	CreateDynamicObject(1252, -2475.3999023438, -136.80000305176, 32.900001525879, 0, 0, 0);
	CreateDynamicObject(1212, -2471.6000976563, -139.10000610352, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1212, -2470.8999023438, -138.89999389648, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1212, -2469.6000976563, -139.39999389648, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1212, -2471.6999511719, -140, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1212, -2467.6000976563, -138.10000610352, 32.599998474121, 0, 0, 0);
	CreateDynamicObject(854, -2480.8999023438, -136.80000305176, 32.799999237061, 0, 0, 0);
	CreateDynamicObject(850, -2484.3000488281, -138.5, 32.799999237061, 0, 0, 0);
	CreateDynamicObject(850, -2481.8000488281, -139.39999389648, 32.799999237061, 0, 0, 48);
	CreateDynamicObject(3119, -2470.3999023438, -141.5, 33.5, 0, 0, 0);
	CreateDynamicObject(3092, -2472.1999511719, -137.10000610352, 38, 304, 0, 268);
	CreateDynamicObject(1442, -2468.6999511719, -145.5, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2482.8999023438, -147.69999694824, 33.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2455.3999023438, -163.60000610352, 25.700000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2463.6999511719, -148.5, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2499, -134.30000305176, 35.799999237061, 0, 0, 0);
	CreateDynamicObject(1442, -2490.6000976563, -123.40000152588, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2459.1999511719, -108.80000305176, 25.60000038147, 0, 0, 0);
	CreateDynamicObject(1442, -2447.6999511719, -92.900001525879, 29.799999237061, 0, 0, 0);
	CreateDynamicObject(1442, -2505.3999023438, -82.699996948242, 25.10000038147, 0, 0, 0);
	CreateDynamicObject(1442, -2493.3999023438, -76.599998474121, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2496.8999023438, -97, 25.10000038147, 0, 0, 0);
	CreateDynamicObject(1442, -2508.1000976563, -100.30000305176, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2497.1000976563, -117, 25.10000038147, 0, 0, 0);
	CreateDynamicObject(1442, -2532.1999511719, -140.5, 18.5, 0, 0, 0);
	CreateDynamicObject(1442, -2596.6999511719, -137.89999389648, 3.9000000953674, 0, 0, 0);
	CreateDynamicObject(1442, -2598.8999023438, -128.30000305176, 3.7999999523163, 0, 0, 0);
	CreateDynamicObject(1442, -2607.8000488281, -135.5, 3.7999999523163, 0, 0, 0);
	CreateDynamicObject(1442, -2613.8999023438, -105.69999694824, 3.9000000953674, 0, 0, 0);
	CreateDynamicObject(1442, -2508.8000488281, -199.69999694824, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2492.1000976563, -191.69999694824, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2510.1999511719, -180, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(1442, -2499.3999023438, -172.39999389648, 30.60000038147, 0, 0, 0);
	CreateDynamicObject(1442, -2484.1000976563, -177.89999389648, 25.299999237061, 0, 0, 0);
	CreateDynamicObject(1440, -2467.3000488281, -92.900001525879, 25.200000762939, 0, 354, 0);
	CreateDynamicObject(1440, -2464.5, -92.800003051758, 25.299999237061, 0, 356, 0);
	CreateDynamicObject(1439, -2456.8999023438, -92.900001525879, 25, 0, 0, 308);
	CreateDynamicObject(1265, -2458.6000976563, -92.699996948242, 25.5, 0, 0, 0);
	CreateDynamicObject(1265, -2456.3000488281, -94.400001525879, 25.5, 0, 0, 0);
	CreateDynamicObject(1265, -2457.1000976563, -94.599998474121, 25.5, 0, 0, 0);
	CreateDynamicObject(1265, -2459.6999511719, -92.599998474121, 25.39999961853, 0, 0, 0);
	CreateDynamicObject(2672, -2457, -96.199996948242, 25.299999237061, 0, 0, 0);
	CreateDynamicObject(2672, -2460.6000976563, -93.099998474121, 25.200000762939, 0, 0, 0);
	CreateDynamicObject(3092, -2456.8999023438, -93.199996948242, 25.200000762939, 13.301849365234, 341.48602294922, 110.40576171875);
	CreateDynamicObject(3461, -2459.1999511719, -108.80000305176, 24.39999961853, 0, 0, 0);
	CreateDynamicObject(3461, -2447.6000976563, -92.800003051758, 28.5, 0, 0, 0);
	CreateDynamicObject(3461, -2490.6999511719, -123.30000305176, 23.700000762939, 0, 0, 0);
	CreateDynamicObject(3461, -2482.8999023438, -147.69999694824, 32, 0, 0, 0);
	CreateDynamicObject(3461, -2463.8000488281, -148.5, 23.89999961853, 0, 0, 0);
	CreateDynamicObject(3461, -2455.3999023438, -163.60000610352, 24.5, 0, 0, 0);
	CreateDynamicObject(3461, -2484.1000976563, -177.89999389648, 24.200000762939, 0, 0, 0);
	CreateDynamicObject(3461, -2492.1000976563, -191.69999694824, 23.89999961853, 0, 0, 0);
	CreateDynamicObject(3461, -2508.8000488281, -199.69999694824, 23.89999961853, 0, 0, 0);
	CreateDynamicObject(3461, -2596.6999511719, -137.89999389648, 2.7000000476837, 0, 0, 0);
	CreateDynamicObject(3461, -2598.8999023438, -128.30000305176, 2.5, 0, 0, 0);
	CreateDynamicObject(3461, -2613.8999023438, -105.69999694824, 2.7000000476837, 0, 0, 0);
	CreateDynamicObject(3461, -2607.8000488281, -135.5, 2.5, 0, 0, 0);
	CreateDynamicObject(3461, -2532.1999511719, -140.39999389648, 17.39999961853, 0, 0, 0);
	CreateDynamicObject(3461, -2497.1000976563, -117, 23.700000762939, 0, 0, 0);
	CreateDynamicObject(3461, -2508.1000976563, -100.30000305176, 24, 0, 0, 0);
	CreateDynamicObject(3461, -2496.8999023438, -97, 23.700000762939, 0, 0, 0);
	CreateDynamicObject(3461, -2493.3999023438, -76.599998474121, 23.799999237061, 0, 0, 0);
	CreateDynamicObject(3461, -2505.3999023438, -82.699996948242, 23.799999237061, 0, 0, 0);
	CreateDynamicObject(3461, -2499.3999023438, -172.39999389648, 29.200000762939, 0, 0, 0);
	CreateDynamicObject(3461, -2468.6999511719, -145.5, 32, 0, 0, 0);
	CreateDynamicObject(1568, -2474.1000976563, -136.69999694824, 32.599998474121, 0, 0, 0);
	CreateDynamicObject(1568, -2474.5, -144.39999389648, 32.599998474121, 0, 0, 0);
	//Figur Area51
	CreateDynamicObject(18808, 61.62, 1689.83, 39.14, 0.00, 0.00, 0.00);
	CreateDynamicObject(18808, 103.56, 1689.56, 39.14, 0.00, 0.00, 0.00);
	CreateDynamicObject(18814, 82.21, 1689.15, 61.85, 0.00, -91.00, 0.00);
	CreateDynamicObject(3437, 61.84, 1695.08, 22.54, 0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 61.84, 1695.08, 34.04, 0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 103.09, 1695.45, 22.54, 0.00, 0.00, 0.00);
	CreateDynamicObject(3437, 103.09, 1695.45, 34.04, 0.00, 0.00, 0.00);
	CreateDynamicObject(1382, 82.27, 1687.83, 64.33, -13.50, 0.00, 0.00);
	CreateDynamicObject(972, 79.07, 1695.66, 65.82, 0.00, 0.00, -86.00);
	CreateDynamicObject(972, 76.73, 1695.59, 71.32, 0.00, 0.00, -86.00);
	CreateDynamicObject(972, 66.80, 1695.07, 73.32, 0.00, 0.00, -86.00);
	CreateDynamicObject(972, 91.35, 1697.12, 73.32, 0.00, 0.00, -86.00);
	CreateDynamicObject(972, 91.35, 1697.12, 80.32, 0.00, 0.00, -86.00);
	CreateDynamicObject(972, 67.00, 1695.23, 80.32, 0.00, 0.00, -86.00);
	CreateDynamicObject(972, 67.00, 1695.23, 87.32, 0.00, 0.00, -86.00);
	CreateDynamicObject(972, 91.49, 1697.17, 87.32, 0.00, 0.00, -86.00);
	CreateDynamicObject(5644, 92.61, 1687.01, 83.01, 0.00, 0.00, 0.00);
	CreateDynamicObject(5644, 71.22, 1686.77, 83.01, 0.00, 0.00, 0.00);
	CreateDynamicObject(5644, 71.68, 1686.92, 108.01, 0.00, 0.00, 0.00);
	CreateDynamicObject(5644, 92.91, 1686.82, 83.01, 0.00, 0.00, 0.00);
	CreateDynamicObject(5644, 93.76, 1686.33, 108.01, 0.00, 0.00, 0.00);
	CreateDynamicObject(5644, 71.54, 1686.67, 76.51, 0.00, 0.00, 0.00);
	CreateDynamicObject(5644, 83.22, 1686.75, 76.51, 0.00, 0.00, 0.00);
	CreateDynamicObject(18823, 119.14, 1688.72, 96.34, 0.00, 25.00, 185.00);
	CreateDynamicObject(18809, 54.43, 1709.95, 111.93, 91.00, -33.00, 40.00);
	CreateDynamicObject(18843, 83.47, 1678.63, 161.21, 0.00, 0.00, 0.00);
	CreateDynamicObject(18841, 80.33, 1720.70, 135.33, -11.00, -91.00, 0.00);
	CreateDynamicObject(19129, 64.19, 1727.79, 169.74, -91.00, 0.00, 0.00);
	CreateDynamicObject(19129, 94.26, 1728.03, 169.74, -91.00, 0.00, 0.00);
	//Hall of Fame
	CreateDynamicObject(18024, 2118.8999023438, -1030.5, -12.5, 0, 0, 0);
	CreateDynamicObject(1523, 2128.1999511719, -1032.9000244141, -15.39999961853, 0, 0, 182);
	CreateDynamicObject(2904, 2128.8000488281, -1030.5, -14.199999809265, 0, 0, 90);
	CreateDynamicObject(2904, 2128.6999511719, -1031.6999511719, -14.199999809265, 0, 0, 270);
	CreateDynamicObject(2904, 2128.8000488281, -1029.8000488281, -11.699999809265, 0, 0, 270);
	CreateDynamicObject(2904, 2128.8000488281, -1031.6999511719, -11.60000038147, 0, 0, 270);
	CreateDynamicObject(2952, 2126.3000488281, -1029.1999511719, -15.699999809265, 0, 0, 90);
	CreateDynamicObject(2673, 2126, -1035.1999511719, -15.300000190735, 0, 0, 0);
	CreateDynamicObject(2674, 2125.8999023438, -1033.9000244141, -15.39999961853, 0, 0, 0);
	CreateDynamicObject(1442, 2128.3999023438, -1035.6999511719, -14.800000190735, 0, 0, 0);
	CreateDynamicObject(1265, 2128.5, -1034.9000244141, -15, 0, 0, 0);
	CreateDynamicObject(3461, 2128.5, -1035.8000488281, -16.299999237061, 0, 0, 0);
	CreateDynamicObject(8483, 2109.5, -1021.700012207, -14.10000038147, 0, 0, 316);
	CreateDynamicObject(10985, 2115.1000976563, -1041.5999755859, -14.699999809265, 0, 0, 256);
	CreateDynamicObject(10985, 2120.6999511719, -1028, -15.60000038147, 0, 358, 143.99996948242);
	CreateDynamicObject(1426, 2122.8000488281, -1022.9000244141, -16.39999961853, 0, 0, 334);
	CreateDynamicObject(1426, 2119.1999511719, -1022.299987793, -16.39999961853, 0, 0, 0);
	CreateDynamicObject(14637, 2109.3999023438, -1035.1999511719, -13.10000038147, 0, 0, 2);
	CreateDynamicObject(3462, 2122.8000488281, -1022.700012207, -12.89999961853, 0, 0, 60);
	CreateDynamicObject(3462, 2119.1999511719, -1022.200012207, -12.89999961853, 0, 2, 92);
	CreateDynamicObject(2685, 2125.8999023438, -1032.8000488281, -14, 0, 0, 183.99996948242);
	CreateDynamicObject(7093, 2132.5, -1031, -13.39999961853, 0, 0, 270);
	CreateDynamicObject(1318, 2128.6999511719, -1032, -13.10000038147, 284.13931274414, 8.2137145996094, 7.9681701660156);
	CreateDynamicObject(14673, 2123.6000976563, -1046.3000488281, -13.10000038147, 0, 0, 286);
	CreateDynamicObject(2098, 2121.3000488281, -1021.5, -12.60000038147, 0, 0, 0);
	CreateDynamicObject(8187, 2114, -1034.6999511719, -21.60000038147, 90, 180.6960144043, 269.30401611328);
	CreateDynamicObject(8187, 2109.8999023438, -1036.0999755859, -21.60000038147, 90, 180.07591247559, 89.924072265625);
	CreateDynamicObject(3534, 2115.6000976563, -1026.1999511719, -12.89999961853, 88, 0, 54);
	CreateDynamicObject(3534, 2112.8999023438, -1029.5, -12.800000190735, 86, 0, 40);
	CreateDynamicObject(3528, 2124.3000488281, -1020.5, -8.5, 0, 0, 225.99996948242);
	CreateDynamicObject(3524, 2123.6000976563, -1039.3000488281, -14.699999809265, 0, 0, 215.99995422363);
	CreateDynamicObject(3524, 2123.6999511719, -1033.4000244141, -14.699999809265, 0, 0, 253.99998474121);
	CreateDynamicObject(3524, 2116.6999511719, -1022.5, -15.300000190735, 0, 0, 22);
	CreateDynamicObject(3524, 2121.1000976563, -1021.5999755859, -15.300000190735, 0, 0, 0);
	CreateDynamicObject(3524, 2122.1000976563, -1030, -10.60000038147, 78.240356445313, 238.43226623535, 310.33209228516);
	CreateDynamicObject(851, 2113.3000488281, -1030, -15.39999961853, 0, 0, 26);
	CreateDynamicObject(3092, 2121.1000976563, -1037.4000244141, -9.3999996185303, 271.99996948242, 180, 180);
	CreateDynamicObject(987, 2124.3000488281, -1032.6999511719, -11.39999961853, 90, 179.31024169922, 90.689727783203);
	CreateDynamicObject(2907, 2119.6999511719, -1038.0999755859, -11.39999961853, 0, 0, 318);
	CreateDynamicObject(2906, 2122.8000488281, -1034.4000244141, -11.199999809265, 0, 0, 40);
	CreateDynamicObject(2908, 2120.8000488281, -1035.4000244141, -11, 0, 0, 0);
	CreateDynamicObject(2906, 2128, -1029.3000488281, -14.60000038147, 22, 0, 220);
	CreateDynamicObject(2905, 2126.8000488281, -1029.3000488281, -15, 0, 0, 0);
	CreateDynamicObject(2908, 2127.8000488281, -1029.3000488281, -13.60000038147, 0, 0, 0);
	CreateDynamicObject(2906, 2127, -1029.3000488281, -14.10000038147, 34.224334716797, 330.53338623047, 143.62902832031);
	CreateDynamicObject(2676, 2126.1999511719, -1031, -15.300000190735, 0, 0, 0);
	CreateDynamicObject(11103, 2128.6000976563, -1030.5, -13.5, 0, 0, 0);
	CreateDynamicObject(1508, 2109, -1034.8000488281, -14.10000038147, 0, 0, 0);
	CreateDynamicObject(3050, 2108.8000488281, -1037.0999755859, -13.5, 0, 0, 269.99996948242);
	CreateDynamicObject(2886, 2109, -1034.8000488281, -13.699999809265, 0, 0, 89.999938964844);
	CreateDynamicObject(2887, 2116.6999511719, -1041.5999755859, -13.39999961853, 0, 0, 0);
	//MS-14 Interior
	CreateDynamicObject(5066,2448.26513672,-1905.03051758,3819.83837891,0.00000000,0.00000000,0.00000000); //object(mondoshave_las) (1)
	CreateObject(3980,2473.50659180,-1859.22338867,3808.20239258,0.00000000,0.00000000,90.00000000); //object(lacityhall1_lan) (1)
	CreateDynamicObject(16096,2451.20971680,-1911.25366211,3820.15820312,0.00000000,0.00000000,90.00000000); //object(des_a51guardbox04) (1)
	CreateDynamicObject(16096,2451.19360352,-1901.44104004,3820.15820312,0.00000000,0.00000000,270.00000000); //object(des_a51guardbox04) (2)
	CreateDynamicObject(16096,2457.09179688,-1901.44042969,3820.15820312,0.00000000,0.00000000,269.99450684); //object(des_a51guardbox04) (3)
	CreateDynamicObject(16096,2459.92944336,-1911.25366211,3820.15820312,0.00000000,0.00000000,90.00000000); //object(des_a51guardbox04) (4)
	CreateDynamicObject(16096,2460.25122070,-1910.94519043,3820.15820312,0.00000000,0.00000000,180.00000000); //object(des_a51guardbox04) (5)
	CreateDynamicObject(16096,2460.25122070,-1901.77038574,3820.15820312,0.00000000,0.00000000,0.00000000); //object(des_a51guardbox04) (6)
	CreateDynamicObject(16096,2460.60107422,-1911.25183105,3820.15820312,0.00000000,0.00000000,90.00000000); //object(des_a51guardbox04) (8)
	CreateDynamicObject(1492,2463.53027344,-1907.92773438,3818.24926758,0.00000000,0.00000000,90.00000000); //object(gen_doorint02) (1)
	CreateDynamicObject(1492,2463.52294922,-1904.92614746,3818.24926758,0.00000000,0.00000000,270.00000000); //object(gen_doorint02) (2)
	CreateDynamicObject(11492,2474.93457031,-1905.12573242,3818.24926758,0.00000000,0.00000000,90.00000000); //object(des_rshed1_) (1)
	CreateDynamicObject(11492,2475.15429688,-1898.70800781,3818.24926758,0.00000000,0.00000000,0.00000000); //object(des_rshed1_) (3)
	CreateDynamicObject(11492,2474.09375000,-1920.03869629,3818.24926758,0.00000000,0.00000000,0.00000000); //object(des_rshed1_) (4)
	CreateDynamicObject(11492,2469.71191406,-1903.36157227,3820.72534180,0.00000000,0.00000000,90.00000000); //object(des_rshed1_) (5)
	CreateDynamicObject(1763,2448.78442383,-1905.33056641,3818.24926758,0.00000000,0.00000000,0.00000000); //object(low_couch_1) (1)
	CreateDynamicObject(941,2451.69018555,-1905.27526855,3818.72387695,0.00000000,0.00000000,0.00000000); //object(cj_df_worktop_3) (1)
	CreateDynamicObject(1722,2451.44262695,-1905.91564941,3818.24926758,0.00000000,0.00000000,0.00000000); //object(off_chairnu) (1)
	CreateDynamicObject(1722,2452.16748047,-1905.33325195,3819.52319336,0.00000000,90.00000000,0.00000000); //object(off_chairnu) (2)
	CreateDynamicObject(1722,2451.85083008,-1904.81359863,3819.52319336,0.00000000,90.00000000,208.73498535); //object(off_chairnu) (3)
	CreateDynamicObject(1722,2452.35913086,-1904.99047852,3820.37182617,310.37500000,90.00000000,184.91473389); //object(off_chairnu) (4)
	CreateDynamicObject(1527,2456.91357422,-1909.31811523,3819.85839844,0.00000000,0.00000000,0.00000000); //object(tag_rollin) (1)
	CreateDynamicObject(17969,2455.81347656,-1904.81604004,3819.94824219,0.00000000,0.00000000,89.54998779); //object(hub_graffitti) (1)
	CreateDynamicObject(1421,2467.80590820,-1905.45654297,3819.01171875,0.00000000,0.00000000,0.00000000); //object(dyn_boxes) (1)
	CreateDynamicObject(1438,2467.12207031,-1912.67663574,3818.24926758,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile_2) (1)
	CreateDynamicObject(1431,2464.90942383,-1913.29260254,3818.79687500,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile) (1)
	CreateDynamicObject(930,2464.93261719,-1913.32226562,3819.80541992,0.00000000,0.00000000,0.00000000); //object(o2_bottles) (1)
	CreateDynamicObject(2654,2463.85156250,-1912.32727051,3818.46728516,0.00000000,0.00000000,0.00000000); //object(cj_shoe_box) (1)
	CreateDynamicObject(2102,2466.54541016,-1905.17138672,3818.24926758,0.00000000,0.00000000,0.00000000); //object(low_hi_fi_2) (1)
	CreateDynamicObject(2102,2466.78881836,-1905.31384277,3818.42358398,338.16500854,332.20999146,45.65499878); //object(low_hi_fi_2) (2)
	CreateDynamicObject(2103,2465.65283203,-1905.20251465,3818.24926758,0.00000000,0.00000000,0.00000000); //object(low_hi_fi_1) (1)
	CreateDynamicObject(2190,2466.61132812,-1912.26721191,3818.79003906,0.00000000,0.00000000,181.21997070); //object(pc_1) (1)
	CreateDynamicObject(2226,2466.05688477,-1905.14428711,3818.64111328,0.00000000,13.89498901,0.00000000); //object(low_hi_fi_3) (1)
	CreateDynamicObject(2232,2468.14111328,-1913.28796387,3818.84716797,0.00000000,0.00000000,230.52497864); //object(med_speaker_4) (1)
	CreateDynamicObject(2318,2464.60156250,-1912.64587402,3818.53076172,0.00000000,0.00000000,157.44500732); //object(cj_tele_1) (1)
	CreateDynamicObject(2320,2463.85937500,-1912.37084961,3818.92993164,0.00000000,0.00000000,91.58001709); //object(cj_tele_5) (1)
	CreateDynamicObject(7709,2468.73291016,-1908.82971191,3819.73950195,0.00000000,0.00000000,0.00000000); //object(vgwbom1) (1)
	CreateDynamicObject(16096,2459.91943359,-1912.27319336,3820.15820312,0.00000000,0.00000000,270.00000000); //object(des_a51guardbox04) (11)
	CreateDynamicObject(16096,2454.58203125,-1921.31054688,3820.15820312,0.00000000,0.00000000,179.99450684); //object(des_a51guardbox04) (12)
	CreateDynamicObject(16096,2460.50146484,-1923.78295898,3820.15820312,0.00000000,0.00000000,180.00000000); //object(des_a51guardbox04) (13)
	CreateDynamicObject(16096,2461.97241211,-1923.78552246,3820.15820312,0.00000000,0.00000000,179.99450684); //object(des_a51guardbox04) (14)
	CreateDynamicObject(16096,2465.87402344,-1918.40332031,3820.15820312,0.00000000,0.00000000,270.00000000); //object(des_a51guardbox04) (15)
	CreateDynamicObject(1498,2456.92016602,-1915.60913086,3818.24926758,0.00000000,0.00000000,331.53454590); //object(gen_doorext03) (1)
	CreateDynamicObject(11492,2463.17968750,-1925.84020996,3820.75024414,0.00000000,0.00000000,90.00000000); //object(des_rshed1_) (6)
	CreateDynamicObject(2904,2458.76513672,-1919.67517090,3819.55541992,0.00000000,0.00000000,90.00000000); //object(warehouse_door1) (2)
	CreateDynamicObject(16501,2457.02343750,-1920.65026855,3820.44970703,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr2_) (1)
	CreateDynamicObject(16501,2457.02026367,-1919.02429199,3822.94970703,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr2_) (2)
	CreateDynamicObject(1494,2457.21264648,-1918.50952148,3818.24926758,0.00000000,0.00000000,0.00000000); //object(gen_doorint03) (4)
	CreateDynamicObject(1494,2458.73754883,-1918.51562500,3818.24926758,0.00000000,0.00000000,0.00000000); //object(gen_doorint03) (5)
	CreateDynamicObject(2904,2460.29785156,-1919.68310547,3819.55541992,0.00000000,0.00000000,90.00000000); //object(warehouse_door1) (5)
	CreateDynamicObject(1494,2460.29272461,-1918.52453613,3818.24926758,0.00000000,0.00000000,0.00000000); //object(gen_doorint03) (6)
	CreateDynamicObject(2904,2461.82958984,-1919.68737793,3819.55541992,0.00000000,0.00000000,90.00000000); //object(warehouse_door1) (6)
	CreateDynamicObject(2521,2457.98461914,-1920.36132812,3818.24926758,0.00000000,0.00000000,180.00000000); //object(cj_toilet2) (1)
	CreateDynamicObject(2521,2459.51318359,-1920.33898926,3818.24926758,0.00000000,0.00000000,179.99450684); //object(cj_toilet2) (2)
	CreateDynamicObject(2521,2461.06640625,-1920.31616211,3818.24926758,0.00000000,0.00000000,179.99450684); //object(cj_toilet2) (3)
	CreateDynamicObject(2518,2462.36914062,-1915.85803223,3818.24926758,0.00000000,0.00000000,270.00000000); //object(cj_b_sink2) (1)
	CreateDynamicObject(2518,2462.37084961,-1916.83569336,3818.24926758,0.00000000,0.00000000,269.99450684); //object(cj_b_sink2) (2)
	CreateDynamicObject(2718,2462.78515625,-1916.86047363,3820.49267578,0.00000000,0.00000000,270.00000000); //object(cj_fly_killer) (1)
	CreateDynamicObject(2713,2462.54858398,-1916.04663086,3818.39550781,0.00000000,0.00000000,0.00000000); //object(cj_bucket) (1)
	CreateDynamicObject(2602,2460.88598633,-1915.53808594,3818.87231445,0.00000000,0.00000000,43.67001343); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,2460.08886719,-1915.52246094,3818.87231445,0.00000000,0.00000000,43.66516113); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,2459.24218750,-1915.50585938,3818.87231445,0.00000000,0.00000000,43.66516113); //object(police_cell_toilet) (3)
	CreateDynamicObject(1265,2462.32397461,-1920.26513672,3818.71826172,0.00000000,0.00000000,0.00000000); //object(blackbag2) (1)
	CreateDynamicObject(1264,2462.39355469,-1919.29113770,3818.72143555,0.00000000,0.00000000,0.00000000); //object(blackbag1) (1)
	CreateDynamicObject(1265,2462.36791992,-1919.76721191,3819.14599609,358.01501465,15.88000488,202.86997986); //object(blackbag2) (2)
	CreateDynamicObject(17969,2460.39941406,-1915.65454102,3820.07275391,0.00000000,0.00000000,89.46002197); //object(hub_graffitti) (2)
	CreateDynamicObject(1527,2462.82421875,-1916.85803223,3820.00097656,0.00000000,0.00000000,0.00000000); //object(tag_rollin) (2)
	CreateDynamicObject(16096,2450.87695312,-1912.90222168,3820.15820312,0.00000000,0.00000000,0.00000000); //object(des_a51guardbox04) (17)
	CreateDynamicObject(3943,2443.10180664,-1920.21020508,3822.75024414,0.00000000,0.00000000,270.00000000); //object(mid_staircase) (1)
	CreateDynamicObject(16096,2449.86425781,-1924.80151367,3819.33642578,0.00000000,180.00000000,270.00000000); //object(des_a51guardbox04) (18)
	CreateDynamicObject(16096,2445.81567383,-1912.89831543,3820.15820312,0.00000000,0.00000000,0.00000000); //object(des_a51guardbox04) (21)
	CreateDynamicObject(16501,2444.45532227,-1917.95397949,3820.44970703,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr2_) (3)
	CreateDynamicObject(16501,2444.45581055,-1920.99035645,3820.17578125,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr2_) (4)
	CreateDynamicObject(1712,2450.75927734,-1919.98144531,3818.24926758,0.00000000,0.00000000,214.55499268); //object(kb_couch05) (1)
	CreateDynamicObject(3095,2452.66870117,-1907.90661621,3821.23413086,0.00000000,0.00000000,0.00000000); //object(a51_jetdoor) (1)
	CreateDynamicObject(3095,2461.60864258,-1907.57800293,3821.23413086,0.00000000,0.00000000,0.00000000); //object(a51_jetdoor) (2)
	CreateDynamicObject(3095,2470.49755859,-1909.20556641,3821.23413086,0.00000000,0.00000000,0.00000000); //object(a51_jetdoor) (3)
	CreateDynamicObject(3095,2468.11328125,-1916.53308105,3821.23413086,0.00000000,0.00000000,0.00000000); //object(a51_jetdoor) (4)
	CreateDynamicObject(3095,2453.84179688,-1916.97509766,3821.23413086,0.00000000,0.00000000,0.00000000); //object(a51_jetdoor) (5)
	CreateDynamicObject(3095,2462.79589844,-1918.78466797,3821.23413086,0.00000000,0.00000000,0.00000000); //object(a51_jetdoor) (6)
	CreateDynamicObject(3095,2445.62133789,-1917.10681152,3821.23413086,0.00000000,0.00000000,0.00000000); //object(a51_jetdoor) (7)
	CreateDynamicObject(3518,2451.20703125,-1906.41015625,3821.39990234,0.00000000,0.00000000,0.00000000); //object(vgsn_rooflity) (1)
	CreateDynamicObject(3518,2459.88793945,-1906.38793945,3821.39990234,0.00000000,0.00000000,0.00000000); //object(vgsn_rooflity) (2)
	CreateDynamicObject(3518,2465.96557617,-1907.45019531,3821.39990234,0.00000000,0.00000000,0.00000000); //object(vgsn_rooflity) (3)
	CreateDynamicObject(3518,2465.98144531,-1911.35363770,3821.39990234,0.00000000,0.00000000,0.00000000); //object(vgsn_rooflity) (4)
	CreateDynamicObject(3518,2455.57690430,-1912.91540527,3821.39990234,0.00000000,0.00000000,89.32501221); //object(vgsn_rooflity) (5)
	CreateDynamicObject(3518,2459.74877930,-1917.13208008,3821.39990234,0.00000000,0.00000000,178.64935303); //object(vgsn_rooflity) (6)
	CreateDynamicObject(3518,2448.72729492,-1918.16577148,3821.39990234,0.00000000,0.00000000,178.64868164); //object(vgsn_rooflity) (7)
	CreateDynamicObject(1524,2451.24462891,-1919.89123535,3819.99829102,0.00000000,0.00000000,0.00000000); //object(tag_front) (1)
	CreateDynamicObject(4012,2480.92089844,-1885.53613281,3822.69897461,0.00000000,0.00000000,90.00000000); //object(termanexgrd1_lan) (1)
	CreateDynamicObject(3564,2445.18261719,-1911.45336914,3823.89990234,270.00000000,0.00000000,90.00000000); //object(lastran1_la01) (1)
	CreateDynamicObject(3564,2445.15332031,-1916.75390625,3823.89990234,269.99450684,0.00000000,0.00000000); //object(lastran1_la01) (2)
	CreateDynamicObject(3564,2439.50390625,-1909.23693848,3823.89990234,270.00000000,0.00000000,270.00000000); //object(lastran1_la01) (4)
	CreateDynamicObject(3564,2439.50390625,-1909.23632812,3826.47460938,270.00000000,0.00000000,269.99450684); //object(lastran1_la01) (5)
	CreateDynamicObject(3564,2445.15332031,-1916.75390625,3826.47265625,269.99450684,0.00000000,0.00000000); //object(lastran1_la01) (6)
	CreateDynamicObject(3564,2445.18261719,-1911.45312500,3826.47460938,270.00000000,0.00000000,90.00000000); //object(lastran1_la01) (7)
	CreateDynamicObject(3564,2445.18896484,-1903.38977051,3826.47460938,270.00000000,0.00000000,90.00000000); //object(lastran1_la01) (8)
	CreateDynamicObject(3564,2445.18847656,-1903.38964844,3823.89794922,270.00000000,0.00000000,90.00000000); //object(lastran1_la01) (9)
	CreateDynamicObject(3564,2444.59228516,-1898.97558594,3826.47265625,269.99450684,0.00000000,180.00000000); //object(lastran1_la01) (10)
	CreateDynamicObject(3564,2444.59179688,-1898.97558594,3823.89794922,269.98901367,0.00000000,179.99450684); //object(lastran1_la01) (11)
	CreateDynamicObject(1738,2454.23803711,-1904.98266602,3818.90380859,0.00000000,0.00000000,0.00000000); //object(cj_radiator_old) (1)
	CreateDynamicObject(1738,2463.80468750,-1909.38623047,3818.90380859,0.00000000,0.00000000,90.00000000); //object(cj_radiator_old) (2)
	CreateDynamicObject(1738,2462.68798828,-1918.41162109,3818.90380859,0.00000000,0.00000000,90.00000000); //object(cj_radiator_old) (3)
	CreateDynamicObject(1738,2444.83325195,-1917.28076172,3818.90380859,0.00000000,0.00000000,90.00000000); //object(cj_radiator_old) (4)
	CreateDynamicObject(1738,2444.80615234,-1919.71716309,3818.90380859,0.00000000,0.00000000,90.00000000); //object(cj_radiator_old) (5)
	CreateDynamicObject(3268,2431.08886719,-1900.24560547,3807.61645508,90.00000000,0.00000000,0.00000000); //object(mil_hangar1_) (1)
	CreateDynamicObject(3268,2428.68041992,-1906.65710449,3807.61645508,90.00000000,0.00000000,0.00000000); //object(mil_hangar1_) (2)
	CreateDynamicObject(3268,2408.75317383,-1906.64685059,3807.61645508,90.00000000,0.00000000,0.00000000); //object(mil_hangar1_) (3)
	CreateDynamicObject(3268,2411.10253906,-1900.24023438,3807.61645508,90.00000000,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(16500,2436.40454102,-1905.29943848,3824.61767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (1)
	CreateDynamicObject(16500,2436.40429688,-1905.29882812,3828.56494141,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (2)
	CreateDynamicObject(16500,2429.89575195,-1905.29943848,3824.61767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (3)
	CreateDynamicObject(1499,2432.39355469,-1905.29943848,3822.62353516,0.00000000,0.00000000,0.00000000); //object(gen_doorint05) (1)
	CreateDynamicObject(16500,2429.89550781,-1905.29882812,3828.56787109,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (4)
	CreateDynamicObject(16500,2432.69433594,-1905.29943848,3827.11669922,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (5)
	CreateDynamicObject(16500,2437.07226562,-1907.80236816,3824.61767578,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr1_) (6)
	CreateDynamicObject(16500,2437.07226562,-1907.80175781,3828.19140625,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr1_) (7)
	CreateDynamicObject(16500,2437.07934570,-1910.78662109,3824.61767578,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr1_) (8)
	CreateDynamicObject(16500,2437.07910156,-1910.81152344,3828.19335938,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr1_) (10)
	CreateDynamicObject(16500,2434.58447266,-1913.12463379,3824.61767578,0.00000000,0.00000000,270.00000000); //object(cn2_savgardr1_) (11)
	CreateDynamicObject(16500,2434.58398438,-1913.12402344,3828.19531250,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (12)
	CreateDynamicObject(16500,2429.63696289,-1913.12463379,3824.61767578,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (13)
	CreateDynamicObject(16500,2429.63671875,-1913.12402344,3828.19531250,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (14)
	CreateDynamicObject(16500,2424.69433594,-1913.12597656,3824.61767578,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (19)
	CreateDynamicObject(16500,2424.69433594,-1913.12597656,3828.19628906,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (20)
	CreateDynamicObject(16500,2425.04248047,-1905.29772949,3824.61767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (21)
	CreateDynamicObject(16500,2425.04199219,-1905.29687500,3828.56884766,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (22)
	CreateDynamicObject(16500,2422.62792969,-1907.70605469,3828.56982422,0.00000000,0.00000000,179.99450684); //object(cn2_savgardr1_) (24)
	CreateDynamicObject(16500,2422.62524414,-1912.64990234,3824.61767578,0.00000000,0.00000000,179.99450684); //object(cn2_savgardr1_) (25)
	CreateDynamicObject(16500,2422.62500000,-1912.64941406,3828.56982422,0.00000000,0.00000000,179.99450684); //object(cn2_savgardr1_) (26)
	CreateDynamicObject(1764,2443.18725586,-1912.96191406,3822.62597656,0.00000000,0.00000000,270.00000000); //object(low_couch_2) (1)
	CreateDynamicObject(2110,2443.09716797,-1912.36987305,3822.62524414,0.00000000,0.00000000,90.00000000); //object(low_dinning_4) (1)
	CreateDynamicObject(2063,2443.24243164,-1909.16064453,3823.53173828,0.00000000,0.00000000,90.00000000); //object(cj_greenshelves) (1)
	CreateDynamicObject(14840,2463.61547852,-1910.73974609,3819.59326172,0.00000000,0.00000000,0.00000000); //object(bdups_graf) (1)
	CreateDynamicObject(14833,2435.10107422,-1921.29443359,3824.26562500,0.00000000,0.00000000,0.00000000); //object(lm_stripchairs1) (1)
	CreateDynamicObject(16151,2427.15136719,-1906.46008301,3822.94726562,0.00000000,0.00000000,90.00000000); //object(ufo_bar) (1)
	CreateDynamicObject(16152,2436.04687500,-1908.85766602,3822.62353516,0.00000000,0.00000000,180.00000000); //object(ufo_booths) (1)
	CreateDynamicObject(1778,2423.19824219,-1905.44799805,3822.62353516,0.00000000,0.00000000,0.00000000); //object(cj_mop_pail) (1)
	CreateDynamicObject(1809,2423.72900391,-1905.65295410,3823.57275391,0.00000000,0.00000000,0.00000000); //object(med_hi_fi) (1)
	CreateDynamicObject(2596,2425.57104492,-1905.60144043,3825.34667969,13.89498901,0.00000000,342.13500977); //object(cj_sex_tv) (1)
	CreateDynamicObject(2855,2422.93774414,-1909.53283691,3822.62353516,0.00000000,0.00000000,0.00000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2111,2424.88427734,-1910.72204590,3823.01318359,0.00000000,0.00000000,0.00000000); //object(low_dinning_5) (1)
	CreateDynamicObject(2800,2424.90527344,-1910.80810547,3823.24121094,0.00000000,0.00000000,0.00000000); //object(castable2top) (1)
	CreateDynamicObject(2964,2433.51977539,-1910.38964844,3822.62353516,0.00000000,0.00000000,90.00000000); //object(k_pooltablesm) (1)
	CreateDynamicObject(2964,2430.51660156,-1910.46972656,3822.62353516,0.00000000,0.00000000,90.00000000); //object(k_pooltablesm) (2)
	CreateDynamicObject(16500,2438.05444336,-1900.17260742,3824.61767578,0.00000000,0.00000000,270.00000000); //object(cn2_savgardr1_) (27)
	CreateDynamicObject(5110,2431.72509766,-1894.31982422,3816.64965820,0.00000000,0.00000000,90.00000000); //object(mexcrnershp2_las2) (2)
	CreateDynamicObject(5267,2430.84472656,-1852.83142090,3817.15551758,0.00000000,0.00000000,90.00000000); //object(sanpedmexq1_las2) (1)
	CreateDynamicObject(16500,2434.25292969,-1900.17382812,3824.61767578,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (28)
	CreateDynamicObject(3977,2397.26660156,-1883.03540039,3807.82519531,0.00000000,0.00000000,13.89498901); //object(lariversec1_lan) (2)
	CreateDynamicObject(1413,2410.67114258,-1895.58850098,3812.48046875,0.00000000,0.00000000,91.71499634); //object(dyn_mesh_3) (1)
	CreateDynamicObject(1413,2410.89111328,-1890.75793457,3812.48046875,0.00000000,0.00000000,81.78887939); //object(dyn_mesh_3) (2)
	CreateDynamicObject(1413,2411.09448242,-1885.69287109,3812.48046875,0.00000000,0.00000000,95.68273926); //object(dyn_mesh_3) (3)
	CreateDynamicObject(1413,2410.87329102,-1880.71057129,3812.48046875,0.00000000,0.00000000,89.72491455); //object(dyn_mesh_3) (4)
	CreateDynamicObject(1413,2410.78051758,-1875.68041992,3812.48046875,0.00000000,0.00000000,91.70483398); //object(dyn_mesh_3) (5)
	CreateDynamicObject(3594,2420.25048828,-1888.33264160,3811.82641602,0.00000000,0.00000000,123.60998535); //object(la_fuckcar1) (1)
	CreateDynamicObject(11103,2429.34643555,-1900.22387695,3824.52124023,0.00000000,0.00000000,90.00000000); //object(cfsmashwin1_sfs) (1)
	CreateDynamicObject(16500,2429.47827148,-1900.16967773,3821.69140625,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (29)
	CreateDynamicObject(16500,2429.47753906,-1900.16894531,3827.21923828,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (30)
	CreateDynamicObject(16500,2426.92431641,-1900.17114258,3825.57568359,0.00000000,0.00000000,270.00000000); //object(cn2_savgardr1_) (31)
	CreateDynamicObject(16500,2426.92382812,-1900.17089844,3821.60253906,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (32)
	CreateDynamicObject(11103,2421.95214844,-1900.26281738,3824.52124023,0.00000000,0.00000000,90.00000000); //object(cfsmashwin1_sfs) (2)
	CreateDynamicObject(16500,2421.94433594,-1900.17614746,3827.21923828,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (33)
	CreateDynamicObject(16500,2421.94433594,-1900.17578125,3821.69238281,0.00000000,0.00000000,269.99450684); //object(cn2_savgardr1_) (34)
	CreateDynamicObject(16500,2419.51171875,-1900.17773438,3823.94238281,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (35)
	CreateDynamicObject(11103,2422.57592773,-1900.26818848,3824.52124023,0.00000000,0.00000000,90.00000000); //object(cfsmashwin1_sfs) (3)
	CreateDynamicObject(4022,2376.64916992,-1865.84899902,3813.34692383,0.00000000,0.00000000,0.00000000); //object(foodmart1_lan) (1)
	CreateDynamicObject(4022,2376.64379883,-1873.75073242,3813.34692383,0.00000000,0.00000000,0.00000000); //object(foodmart1_lan) (2)
	CreateDynamicObject(4022,2376.64453125,-1881.40441895,3813.34692383,0.00000000,0.00000000,0.00000000); //object(foodmart1_lan) (3)
	CreateDynamicObject(3977,2400.87890625,-1761.53369141,3807.82519531,0.00000000,0.00000000,13.89221191); //object(lariversec1_lan) (3)
	CreateDynamicObject(16500,2418.53222656,-1905.30273438,3824.61767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (36)
	CreateDynamicObject(1499,2421.01928711,-1905.30004883,3822.62353516,0.00000000,0.00000000,0.00000000); //object(gen_doorint05) (2)
	CreateDynamicObject(16500,2420.04980469,-1905.30505371,3827.11767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (37)
	CreateDynamicObject(1421,2436.91625977,-1913.68225098,3823.39550781,0.00000000,0.00000000,0.00000000); //object(dyn_boxes) (2)
	CreateDynamicObject(1431,2437.11035156,-1914.57067871,3823.18066406,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile) (2)
	CreateDynamicObject(1431,2435.72460938,-1914.56860352,3823.58203125,0.00000000,0.00000000,0.00000000); //object(dyn_box_pile) (3)
	CreateDynamicObject(16500,2419.74633789,-1913.12060547,3824.61767578,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (19)
	CreateDynamicObject(16500,2419.74609375,-1913.12011719,3828.49218750,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (19)
	CreateDynamicObject(16500,2422.62792969,-1907.70605469,3824.61767578,0.00000000,0.00000000,180.00000000); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(16500,2422.59936523,-1907.70886230,3824.61767578,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(16500,2422.59863281,-1907.70800781,3828.46923828,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(16500,2422.60156250,-1912.55554199,3824.61767578,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(16500,2422.60156250,-1912.55468750,3828.49316406,0.00000000,0.00000000,0.00000000); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(16500,2416.13110352,-1907.70446777,3824.61767578,0.00000000,0.00000000,179.99450684); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(16500,2416.13085938,-1907.70410156,3828.49609375,0.00000000,0.00000000,179.99450684); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(16500,2416.12646484,-1912.30151367,3824.61767578,0.00000000,0.00000000,179.99450684); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(16500,2418.53222656,-1905.30273438,3828.11767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (36)
	CreateDynamicObject(16500,2416.79687500,-1913.12109375,3824.61767578,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (19)
	CreateDynamicObject(16500,2416.79687500,-1913.12109375,3828.51806641,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (19)
	CreateDynamicObject(2063,2431.28198242,-1900.58618164,3823.53247070,0.00000000,0.00000000,0.00000000); //object(cj_greenshelves) (2)
	CreateDynamicObject(2063,2431.28125000,-1900.58593750,3824.86010742,0.00000000,0.00000000,0.00000000); //object(cj_greenshelves) (3)
	CreateDynamicObject(16500,2417.21313477,-1905.30310059,3824.61767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (36)
	CreateDynamicObject(16500,2417.21289062,-1905.30273438,3828.54687500,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (36)
	CreateDynamicObject(1497,2414.72070312,-1905.27636719,3822.62353516,344.11999512,0.00000000,195.87451172); //object(gen_doorext02) (1)
	CreateDynamicObject(16500,2410.72265625,-1905.30273438,3824.61767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (36)
	CreateDynamicObject(16500,2412.42285156,-1905.30700684,3827.11669922,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (36)
	CreateDynamicObject(16500,2410.72265625,-1905.30273438,3828.54394531,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (36)
	CreateDynamicObject(16500,2413.63647461,-1909.36108398,3824.61767578,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (19)
	CreateDynamicObject(16500,2413.63574219,-1909.36035156,3828.49414062,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (19)
	CreateDynamicObject(16500,2411.10180664,-1907.78820801,3824.61767578,0.00000000,0.00000000,179.99450684); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(3872,2421.40747070,-1899.64916992,3821.73803711,352.05999756,0.00000000,37.71499634); //object(ws_floodbeams) (1)
	CreateDynamicObject(3872,2429.07739258,-1898.58044434,3819.56469727,7.93676758,330.22500610,37.71057129); //object(ws_floodbeams) (2)
	CreateDynamicObject(16500,2411.10156250,-1907.78808594,3828.26708984,0.00000000,0.00000000,179.99450684); //object(cn2_savgardr1_) (23)
	CreateDynamicObject(2063,2414.18530273,-1906.55749512,3823.53247070,332.20999146,0.00000000,15.88000488); //object(cj_greenshelves) (4)
	CreateDynamicObject(3099,2412.73535156,-1908.52954102,3822.62353516,0.00000000,0.00000000,0.00000000); //object(break_wall_3b) (1)
	CreateDynamicObject(16500,2414.95263672,-1900.17687988,3823.94238281,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (35)
	CreateDynamicObject(16500,2409.94921875,-1900.16699219,3823.94238281,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (35)
	CreateDynamicObject(16500,2405.91284180,-1905.31567383,3824.61767578,0.00000000,0.00000000,90.00000000); //object(cn2_savgardr1_) (36)
	CreateDynamicObject(16500,2405.02392578,-1900.13720703,3823.94238281,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (35)
	CreateDynamicObject(16500,2403.17456055,-1900.02172852,3823.94238281,0.00000000,0.00000000,269.98901367); //object(cn2_savgardr1_) (35)
	CreateDynamicObject(16500,2401.22949219,-1902.59692383,3823.94238281,0.00000000,0.00000000,1.29833984); //object(cn2_savgardr1_) (35)
	CreateDynamicObject(16500,2401.29736328,-1906.60156250,3823.94238281,0.00000000,0.00000000,1.29638672); //object(cn2_savgardr1_) (35)
	CreateDynamicObject(3268,2451.08422852,-1915.16723633,3840.88916016,270.00000000,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3268,2441.96142578,-1908.77075195,3840.88916016,269.99450684,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3268,2442.61987305,-1904.71264648,3840.88916016,269.99450684,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3268,2422.62231445,-1905.89013672,3840.88916016,269.99450684,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3268,2402.78369141,-1906.24096680,3840.88916016,269.99450684,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3268,2427.08032227,-1912.29418945,3840.88916016,269.99450684,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3268,2427.39257812,-1918.55981445,3840.88916016,269.99450684,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3268,2422.71997070,-1913.19946289,3840.88916016,269.99450684,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3268,2417.89038086,-1912.27038574,3840.88916016,269.99450684,0.00000000,0.00000000); //object(mil_hangar1_) (5)
	CreateDynamicObject(3097,2410.59960938,-1897.72167969,3825.91308594,0.00000000,0.00000000,0.00000000); //object(break_wall_2b) (1)
	CreateDynamicObject(3098,2408.62768555,-1903.33374023,3823.56469727,7.94000244,93.29501343,101.23501587); //object(break_wall_1b) (1)
	CreateDynamicObject(3302,2411.71459961,-1902.59130859,3822.70727539,0.00000000,0.00000000,21.83499146); //object(cxrf_corpanel) (1)
	CreateDynamicObject(1812,2408.21240234,-1902.63989258,3823.23999023,0.00000000,312.35998535,248.83996582); //object(low_bed_5) (1)
	CreateDynamicObject(849,2409.49731445,-1901.16821289,3822.94726562,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_3) (1)
	CreateDynamicObject(4227,2420.66967773,-1900.20141602,3824.06640625,0.00000000,0.00000000,0.00000000); //object(graffiti_lan01) (1)
	CreateDynamicObject(4227,2463.30566406,-1904.69531250,3819.70776367,0.00000000,0.00000000,0.00000000); //object(graffiti_lan01) (2)
	CreateDynamicObject(1526,2460.79809570,-1907.91149902,3818.78125000,155.05505371,0.00000000,270.67498779); //object(tag_rifa) (1)
	CreateDynamicObject(1526,2460.79785156,-1907.91113281,3818.78125000,220.55505371,0.00000000,270.67016602); //object(tag_rifa) (2)
	CreateDynamicObject(1528,2456.92968750,-1909.25341797,3821.64868164,0.00000000,0.00000000,0.00000000); //object(tag_seville) (1)
	CreateDynamicObject(1530,2462.86840820,-1918.09094238,3820.03930664,179.19000244,0.00000000,0.00000000); //object(tag_vagos) (1)
	CreateDynamicObject(1529,2454.22119141,-1909.47998047,3818.40576172,0.00000000,0.00000000,180.11999512); //object(tag_temple) (1)
	CreateDynamicObject(1529,2454.22070312,-1909.47949219,3819.17773438,179.09997559,0.00000000,180.11535645); //object(tag_temple) (2)
	CreateDynamicObject(2663,2450.54394531,-1905.62316895,3818.20532227,83.37002563,0.00000000,338.16500854); //object(cj_bs_bag) (1)
	CreateDynamicObject(1449,2456.06347656,-1904.98168945,3818.77099609,0.00000000,0.00000000,0.00000000); //object(dyn_crate_2) (1)
	CreateDynamicObject(1264,2451.00854492,-1918.92822266,3818.52221680,0.00000000,0.00000000,0.00000000); //object(blackbag1) (2)
	CreateDynamicObject(2670,2451.93408203,-1906.60046387,3818.34130859,0.00000000,0.00000000,0.00000000); //object(proc_rubbish_1) (1)
	CreateDynamicObject(2673,2449.75097656,-1919.41723633,3818.33715820,0.00000000,0.00000000,326.25500488); //object(proc_rubbish_5) (1)
	CreateDynamicObject(2674,2459.70117188,-1916.44641113,3818.27099609,0.00000000,0.00000000,0.00000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(2676,2461.89135742,-1917.99853516,3818.35253906,0.00000000,0.00000000,0.00000000); //object(proc_rubbish_8) (1)
	CreateDynamicObject(1497,2454.86621094,-1917.99609375,3818.22436523,8.95498657,270.00000000,0.00000000); //object(gen_doorext02) (2)
	CreateDynamicObject(2712,2443.26171875,-1910.59289551,3823.19287109,0.00000000,0.00000000,0.00000000); //object(cj_mop) (1)
	CreateDynamicObject(2601,2443.05371094,-1912.62976074,3823.50732422,0.00000000,0.00000000,0.00000000); //object(cj_juice_can) (1)
	CreateDynamicObject(2601,2443.15478516,-1912.47924805,3823.50732422,0.00000000,0.00000000,300.44998169); //object(cj_juice_can) (2)
	CreateDynamicObject(14651,2432.65380859,-1915.63427734,3824.74316406,0.00000000,0.00000000,229.44999695); //object(trukstp05) (1)
	CreateDynamicObject(14651,2430.82690430,-1915.62988281,3824.74316406,0.00000000,0.00000000,229.44946289); //object(trukstp05) (2)
	CreateDynamicObject(2028,2424.51684570,-1907.38793945,3823.63598633,0.00000000,0.00000000,346.10498047); //object(swank_console) (1)
	CreateDynamicObject(2332,2416.68750000,-1905.80578613,3823.08642578,0.00000000,0.00000000,0.00000000); //object(kev_safe) (2)
	CreateDynamicObject(944,2417.66772461,-1912.29479980,3823.50830078,0.00000000,0.00000000,0.00000000); //object(packing_carates04) (1)
	CreateDynamicObject(2637,2420.80346680,-1909.33398438,3823.02832031,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (1)
	CreateDynamicObject(2637,2418.80566406,-1909.33410645,3823.02832031,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table2) (2)
	CreateDynamicObject(2636,2421.46411133,-1908.47436523,3823.25927734,0.00000000,0.00000000,89.46002197); //object(cj_pizza_chair) (1)
	CreateDynamicObject(2636,2420.22338867,-1908.57641602,3823.25927734,0.00000000,0.00000000,101.36618042); //object(cj_pizza_chair) (2)
	CreateDynamicObject(2636,2419.36303711,-1908.84887695,3823.25927734,0.00000000,0.00000000,79.53033447); //object(cj_pizza_chair) (3)
	CreateDynamicObject(2636,2418.39111328,-1908.42456055,3823.25927734,0.00000000,0.00000000,85.48504639); //object(cj_pizza_chair) (4)
	CreateDynamicObject(2636,2418.47851562,-1910.22875977,3823.25927734,0.00000000,0.00000000,266.42959595); //object(cj_pizza_chair) (5)
	CreateDynamicObject(2636,2419.42724609,-1910.17626953,3823.25927734,0.00000000,0.00000000,274.36938477); //object(cj_pizza_chair) (6)
	CreateDynamicObject(2636,2420.11230469,-1909.91333008,3823.25927734,0.00000000,0.00000000,256.50219727); //object(cj_pizza_chair) (7)
	CreateDynamicObject(2636,2421.25585938,-1910.25158691,3823.25927734,0.00000000,0.00000000,296.19750977); //object(cj_pizza_chair) (8)
	CreateDynamicObject(1711,2416.92993164,-1909.50451660,3822.62353516,0.00000000,0.00000000,87.70001221); //object(kb_chair01) (1)
	CreateDynamicObject(3017,2418.46459961,-1909.66455078,3823.45996094,0.00000000,0.00000000,0.00000000); //object(arch_plans) (1)
	CreateDynamicObject(2894,2418.63281250,-1911.89953613,3824.06933594,0.00000000,0.00000000,0.00000000); //object(kmb_rhymesbook) (1)
	CreateDynamicObject(1543,2419.40185547,-1909.61901855,3823.43774414,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2) (1)
	CreateDynamicObject(1543,2419.96655273,-1909.10449219,3823.43774414,0.00000000,0.00000000,0.00000000); //object(cj_beer_b_2) (2)
	CreateDynamicObject(1543,2419.99511719,-1909.21044922,3823.43774414,0.00000000,0.00000000,71.73001099); //object(cj_beer_b_2) (3)
	CreateDynamicObject(1510,2419.71069336,-1909.30249023,3823.46264648,0.00000000,0.00000000,0.00000000); //object(dyn_ashtry) (1)
	CreateDynamicObject(3044,2419.66210938,-1909.15368652,3823.50219727,0.00000000,0.00000000,358.01501465); //object(cigar) (1)
	CreateDynamicObject(2966,2418.02270508,-1909.59179688,3823.46752930,0.00000000,0.00000000,306.26998901); //object(mobile1993b) (1)
	CreateDynamicObject(2680,2416.86889648,-1906.23327637,3823.03759766,0.00000000,0.00000000,0.00000000); //object(cj_padlock) (1)
	CreateDynamicObject(5371,2455.16040039,-1911.18481445,3825.98974609,0.00000000,0.00000000,0.00000000); //object(alphbrk6_las2) (1)
	//SF Verschönerung
	CreateDynamicObject(1215, -1249.85, -775.95, 65.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1257.46, -796.09, 67.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1280.68, -792.86, 68.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1283.70, -810.35, 69.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1309.15, -804.67, 72.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1315.68, -819.36, 73.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1336.79, -807.83, 75.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1350.50, -821.50, 77.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1365.39, -809.83, 78.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1387.19, -822.72, 80.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1402.08, -810.89, 81.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1419.48, -824.38, 79.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1439.81, -812.18, 77.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1460.78, -826.54, 71.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1481.94, -814.23, 66.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1513.96, -825.08, 58.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1747.65, -706.31, 28.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1765.31, -700.89, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1753.97, -687.28, 24.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1769.04, -678.53, 23.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1754.47, -664.27, 21.19,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1768.02, -648.87, 19.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1753.62, -634.44, 17.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1768.60, -623.68, 16.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1754.67, -610.10, 16.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1767.34, -593.90, 16.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, -1812.85, -561.02, 18.04,   0.00, 0.00, 2.58);
	CreateDynamicObject(1597, -1824.80, -561.08, 18.04,   0.00, 0.00, 2.58);
	CreateDynamicObject(1597, -1901.28, 243.29, 42.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, -1901.21, 253.04, 42.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, -1901.25, 262.73, 42.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, -1919.90, 244.62, 42.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, -1914.47, 253.95, 40.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(1257, -1901.15, 235.94, 35.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(1231, -1902.17, 233.46, 36.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(1363, -1902.49, 232.18, 34.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, -1909.24, 275.27, 40.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(633, -1909.36, 272.25, 41.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1914.30, 257.43, 40.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1914.29, 258.92, 40.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1914.27, 260.57, 40.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1914.28, 262.06, 40.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1914.28, 264.26, 40.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(910, -1891.81, 277.06, 41.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(922, -1906.88, 297.72, 40.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(1358, -1906.94, 301.32, 41.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(1358, -1906.98, 303.83, 41.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(1358, -1906.94, 306.35, 41.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(1365, -1894.37, 298.53, 41.19,   0.00, 0.00, 0.00);
	CreateDynamicObject(1365, -1894.54, 298.56, 43.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(1440, -1940.20, 276.92, 40.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, -1916.05, 264.64, 40.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -1939.98, 249.84, 40.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(3458, -1932.89, 240.52, 43.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1913.45, 270.00, 44.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1912.83, 242.90, 45.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1952.98, 242.96, 45.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(18452, -1896.50, 252.21, 43.00,   0.00, 0.00, 269.76);
	CreateDynamicObject(8168, -1897.15, 246.10, 41.84,   0.00, 0.00, 195.09);
	CreateDynamicObject(3504, -1899.90, 239.06, 41.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(3504, -1898.53, 239.08, 41.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(3504, -1897.42, 239.09, 41.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(1676, -1893.69, 252.04, 41.83,   0.00, 0.00, 91.10);
	CreateDynamicObject(1686, -1899.10, 252.03, 40.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1901.06, 266.96, 40.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1939.78, 251.13, 47.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1966.89, 251.19, 47.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1967.01, 310.44, 47.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1924.86, 310.51, 47.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1924.88, 277.64, 47.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1960.30, 306.16, 49.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1959.82, 281.51, 49.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1935.25, 281.50, 49.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1935.19, 306.02, 49.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(3467, -1939.46, 252.79, 40.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(3471, -1938.92, 247.19, 41.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(8841, -1980.07, 257.69, 36.94,   0.00, 0.00, 89.83);
	CreateDynamicObject(1215, -1997.08, 218.52, 28.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1997.09, 228.33, 27.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(1257, -1998.00, 240.89, 29.36,   2.58, 0.00, 356.56);
	CreateDynamicObject(1283, -1997.53, 230.01, 30.72,   0.00, 0.00, 87.66);
	CreateDynamicObject(3578, -2006.51, 207.27, 25.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.47, 217.77, 25.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.43, 212.64, 25.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.45, 200.66, 25.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.54, 175.51, 25.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.45, 167.72, 25.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.41, 157.45, 25.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.50, 149.51, 25.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.47, 140.89, 25.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.42, 131.79, 25.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2006.59, 120.95, 25.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.82, 120.93, 26.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.27, 131.96, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.74, 140.97, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.34, 149.61, 26.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.62, 157.70, 26.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.05, 167.80, 26.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.81, 175.70, 26.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.16, 200.76, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.78, 207.43, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.14, 212.72, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.74, 217.81, 26.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.29, 217.88, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.76, 212.62, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.26, 207.17, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.85, 200.67, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.23, 175.43, 26.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.72, 167.61, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.16, 157.34, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.85, 149.54, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.20, 140.79, 26.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2000.73, 131.67, 26.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(717, -2012.24, 120.94, 26.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.33, 120.95, 27.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.71, 120.93, 27.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.72, 131.87, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.32, 131.75, 27.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.31, 140.93, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.64, 140.81, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.88, 149.53, 27.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.42, 149.52, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.14, 157.59, 27.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.65, 157.47, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.48, 167.72, 27.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.24, 167.78, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.37, 175.52, 27.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.75, 175.48, 27.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.62, 200.72, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.34, 200.68, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.35, 207.33, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.77, 207.23, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.60, 212.64, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.27, 212.65, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2001.31, 217.76, 27.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2011.86, 217.83, 27.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(16360, -1987.85, 213.19, 26.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, -1997.03, 211.58, 27.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(996, -1996.38, 205.15, 27.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(996, -1937.44, 247.13, 40.80,   0.00, 0.00, 41.25);
	CreateDynamicObject(996, -1917.90, 251.06, 40.80,   0.00, 0.00, 171.03);
	CreateDynamicObject(1237, -1931.76, 252.16, 40.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -1925.46, 252.34, 40.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -1918.44, 264.67, 40.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(5837, -1934.80, 220.52, 34.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(10401, -1970.63, 203.88, 27.40,   0.00, 0.00, 45.55);
	CreateDynamicObject(3472, -1988.84, 205.20, 27.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1986.37, 169.36, 27.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1986.42, 100.51, 27.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1979.80, 108.49, 39.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1979.73, 168.69, 39.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -2013.15, 101.28, 27.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(3515, -1940.70, 213.56, 32.21,   84.22, 0.00, 352.27);
	CreateDynamicObject(3528, -1937.28, 211.75, 34.17,   0.00, 0.00, 262.02);
	CreateDynamicObject(3528, -1945.44, 213.33, 34.18,   0.00, 0.00, 256.01);
	CreateDynamicObject(3534, -1940.83, 212.16, 32.55,   79.07, 2.58, 353.98);
	CreateDynamicObject(3534, -1980.24, 190.25, 30.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(3534, -1997.53, 199.02, 27.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(7073, -1979.19, 138.83, 57.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(3534, -1979.79, 141.63, 40.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(3534, -1979.79, 134.71, 40.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(1634, 848.00, -1947.27, 12.94,   0.00, 0.00, 202.72);
	CreateDynamicObject(1634, 851.04, -1954.50, 17.58,   11.17, 0.00, 202.72);
	CreateDynamicObject(3472, -1991.57, 548.69, 34.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1991.60, 538.20, 34.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(3627, -1943.69, 586.52, 37.91,   0.00, 0.00, 269.76);
	CreateDynamicObject(8947, -1979.62, 512.05, 36.25,   3.44, 0.00, 179.62);
	CreateDynamicObject(975, -1979.62, 523.94, 34.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(3877, -1986.36, 524.06, 40.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(3877, -1972.69, 524.04, 40.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(3877, -1972.88, 500.37, 41.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(3877, -1986.65, 500.45, 41.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(8492, -1967.32, 534.02, 44.01,   0.00, 0.00, 239.68);
	CreateDynamicObject(3461, -1973.76, 533.23, 35.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -1973.64, 530.77, 35.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -1973.64, 528.55, 35.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -1973.71, 525.85, 35.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(3515, -1966.95, 534.50, 50.38,   0.00, 303.28, 0.00);
	CreateDynamicObject(3279, -1980.01, 511.37, 39.33,   356.56, 0.00, 0.00);
	CreateDynamicObject(3660, -1985.19, 563.13, 36.89,   0.00, 0.00, 270.62);
	CreateDynamicObject(3660, -1982.17, 497.66, 36.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(975, -1961.05, 484.75, 32.42,   0.00, 0.00, 269.76);
	CreateDynamicObject(3881, -1960.46, 491.25, 32.22,   0.00, 0.00, 91.10);
	CreateDynamicObject(3666, -1957.55, 489.26, 34.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1960.88, 489.18, 34.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1957.68, 493.75, 34.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1973.41, 581.34, 34.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1981.55, 575.93, 34.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1991.41, 593.17, 34.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1964.08, 593.17, 34.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1919.15, 593.03, 34.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1979.89, 500.51, 40.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(3472, -1991.43, 495.99, 34.54,   0.00, 0.00, 0.00);
	//Gangautohaus
	gangtafel = CreateObject(3077,-1994.6062,280.2251,33.5320-1,0.00000000,0.00000000,-180); //object(drvin_screen) (1)
	SetObjectMaterialText(gangtafel, "Gangautohaus", 0, 50, "Arial", 15, 1, -32256, -16777216, 1);
	CreateDynamicObject(1661,-1954.50000000,304.50000000,43.79999924,0.00000000,0.00000000,336.00000000); //object(htl_fan_rotate_dy) (1)
	CreateDynamicObject(1723,-1952.50000000,299.79998779,40.00000000,0.00000000,0.00000000,0.00000000); //object(mrk_seating1) (1)
	CreateDynamicObject(1723,-1955.40002441,299.79998779,40.00000000,0.00000000,0.00000000,0.00000000); //object(mrk_seating1) (2)
	CreateDynamicObject(1723,-1950.50000000,295.60000610,40.00000000,0.00000000,0.00000000,180.00000000); //object(mrk_seating1) (3)
	CreateDynamicObject(1723,-1953.40002441,295.60000610,40.00000000,0.00000000,0.00000000,180.00000000); //object(mrk_seating1) (4)
	CreateDynamicObject(2184,-1954.19995117,304.89999390,40.00000000,0.00000000,0.00000000,20.00000000); //object(med_office6_desk_2) (1)
	CreateDynamicObject(2184,-1957.00000000,305.70001221,40.00000000,0.00000000,0.00000000,338.00000000); //object(med_office6_desk_2) (2)
	CreateDynamicObject(2724,-1953.90002441,303.50000000,40.59999847,0.00000000,0.00000000,203.99996948); //object(lm_stripchair) (1)
	CreateDynamicObject(2724,-1955.40002441,303.50000000,40.59999847,0.00000000,0.00000000,146.00000000); //object(lm_stripchair) (2)
	CreateDynamicObject(1671,-1954.50000000,306.70001221,40.50000000,0.00000000,0.00000000,0.00000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1193,-1951.40002441,308.60000610,42.79999924,0.00000000,0.00000000,0.00000000); //object(rbmp_lr_t2) (1)
	CreateDynamicObject(1172,-1951.40002441,309.00000000,42.29999924,0.00000000,0.00000000,180.00000000); //object(fbmp_c_l) (1)
	CreateDynamicObject(1171,-1951.30004883,309.00000000,41.40000153,0.00000000,0.00000000,178.00000000); //object(fbmp_a_l) (1)
	CreateDynamicObject(1163,-1954.80004883,308.50000000,42.79999924,0.00000000,0.00000000,0.00000000); //object(spl_c_u_b) (1)
	CreateDynamicObject(1146,-1954.80004883,308.50000000,42.00000000,0.00000000,0.00000000,0.00000000); //object(spl_c_l_b) (1)
	CreateDynamicObject(1138,-1954.59997559,308.39999390,41.00000000,0.00000000,0.00000000,0.00000000); //object(spl_a_s_b) (1)
	CreateDynamicObject(1085,-1956.59997559,308.39999390,42.70000076,0.00000000,0.00000000,268.00000000); //object(wheel_gn2) (1)
	CreateDynamicObject(1084,-1956.50000000,308.50000000,41.50000000,0.00000000,0.00000000,260.00000000); //object(wheel_lr5) (1)
	CreateDynamicObject(1083,-1957.69995117,308.50000000,42.70000076,0.00000000,0.00000000,269.99996948); //object(wheel_lr2) (1)
	CreateDynamicObject(1080,-1957.69995117,308.50000000,41.50000000,0.00000000,0.00000000,266.00000000); //object(wheel_sr5) (1)
	CreateDynamicObject(1010,-1958.80004883,308.60000610,41.50000000,0.00000000,93.99996948,269.99996948); //object(nto_b_tw) (1)
	CreateDynamicObject(14604,-1950.90002441,301.10000610,41.00000000,0.00000000,0.00000000,44.00000000); //object(tv_stand_bike) (1)
	CreateDynamicObject(2344,-1952.59997559,306.39999390,40.79999924,0.00000000,0.00000000,0.00000000); //object(cj_remote) (1)
	CreateDynamicObject(2332,-1949.80004883,305.60000610,42.00000000,0.00000000,0.00000000,269.99996948); //object(kev_safe) (1)
	CreateDynamicObject(2230,-1950.00000000,302.70001221,40.00000000,0.00000000,0.00000000,268.00000000); //object(swank_speaker_2) (1)
	CreateDynamicObject(2202,-1952.19995117,300.89999390,40.00000000,0.00000000,0.00000000,179.99993896); //object(photocopier_2) (1)
	CreateDynamicObject(1808,-1954.09997559,294.89999390,40.00000000,0.00000000,0.00000000,0.00000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1808,-1954.50000000,294.89999390,40.00000000,0.00000000,0.00000000,0.00000000); //object(cj_watercooler2) (2)
	CreateDynamicObject(2357,-1952.19995117,297.70001221,40.40000153,0.00000000,0.00000000,0.00000000); //object(dunc_dinning) (1)
	CreateDynamicObject(2289,-1950.09997559,294.20001221,42.50000000,0.00000000,0.00000000,272.00000000); //object(frame_2) (1)
	CreateDynamicObject(2286,-1950.09997559,292.60000610,42.59999847,0.00000000,0.00000000,269.99996948); //object(frame_5) (1)
	CreateDynamicObject(2268,-1950.59997559,293.10000610,41.20000076,0.00000000,0.00000000,269.99996948); //object(frame_wood_2) (1)
	CreateDynamicObject(2069,-1958.90002441,303.50000000,40.09999847,0.00000000,0.00000000,0.00000000); //object(cj_mlight7) (1)
	CreateDynamicObject(2066,-1959.00000000,300.89999390,40.00000000,0.00000000,0.00000000,0.00000000); //object(cj_m_fileing2) (1)
	CreateDynamicObject(2066,-1958.40002441,300.89999390,40.00000000,0.00000000,0.00000000,0.00000000); //object(cj_m_fileing2) (2)
	CreateDynamicObject(1886,-1950.19995117,308.50000000,44.20000076,12.00000000,0.00000000,324.00000000); //object(shop_sec_cam) (1)
	CreateDynamicObject(14559,-1957.09997559,257.70001221,49.20000076,0.00000000,0.00000000,269.99996948); //object(pdomecones) (1)
	CreateDynamicObject(2967,-1952.90002441,306.29998779,40.79999924,0.00000000,0.00000000,0.00000000); //object(mobile1993a) (1)
	CreateDynamicObject(2190,-1953.69995117,305.00000000,40.79999924,0.00000000,0.00000000,182.00000000); //object(pc_1) (1)
	CreateDynamicObject(2816,-1953.80004883,298.00000000,40.79999924,0.00000000,0.00000000,0.00000000); //object(gb_bedmags01) (1)
	CreateDynamicObject(2826,-1952.90002441,297.79998779,40.79999924,0.00000000,0.00000000,0.00000000); //object(gb_novels04) (1)
	CreateDynamicObject(2827,-1953.69995117,297.29998779,40.79999924,0.00000000,0.00000000,0.00000000); //object(gb_novels05) (2)
	CreateDynamicObject(2853,-1956.40002441,306.10000610,40.79999924,0.00000000,0.00000000,0.00000000); //object(gb_bedmags03) (1)
	CreateDynamicObject(14527,-1953.30004883,297.79998779,41.79999924,0.00000000,0.00000000,0.00000000); //object(fannyfan) (1)
	CreateDynamicObject(2238,-1956.69995117,305.50000000,41.20000076,0.00000000,0.00000000,0.00000000); //object(cj_lava_lamp) (1)
	CreateDynamicObject(1964,-1954.19995117,305.39999390,40.90000153,0.00000000,0.00000000,0.00000000); //object(est_dsk_stuf) (1)
	CreateDynamicObject(3851,-1950.30004883,300.29998779,42.29999924,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (1)
	CreateDynamicObject(11011,-1916.09997559,288.00000000,43.79999924,0.00000000,0.00000000,0.00000000); //object(crackfactjump_sfs) (2)
	CreateDynamicObject(7096,-1935.69995117,256.70001221,45.29999924,0.00000000,0.00000000,182.00000000); //object(vrockstairs) (1)
	CreateDynamicObject(16448,-1949.59997559,282.20001221,51.50000000,0.00000000,0.00000000,269.99996948); //object(des_nt_buntpoles01) (1)
	CreateDynamicObject(3928,-1953.19995117,271.39999390,46.70000076,0.00000000,0.00000000,0.00000000); //object(helipad) (1)
	CreateDynamicObject(3928,-1932.09997559,293.39999390,46.70000076,0.00000000,0.00000000,0.00000000); //object(helipad) (2)
	CreateDynamicObject(1568,-1980.90002441,278.10000610,34.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (1)
	CreateDynamicObject(1568,-1980.90002441,298.70001221,34.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (2)
	CreateDynamicObject(1568,-1991.40002441,298.70001221,34.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (3)
	CreateDynamicObject(1568,-1992.69995117,278.10000610,34.50000000,0.00000000,0.00000000,0.00000000); //object(chinalamp_sf) (4)
	CreateDynamicObject(10250,-1955.59997559,309.39999390,80.50000000,0.00000000,0.00000000,0.00000000); //object(masts1_sfe) (1)
	//Atombunker Las Venturas
	atomgate1 = CreateDynamicObject(10841, -395.33563232422, 1257.5810546875, 11.195314407349, 0, 0, 0);
	atomgate2 = CreateDynamicObject(10841, -394.24423217773, 1255.4013671875, 13.894744873047, 0, 0, 0);
	atomgate3 = CreateDynamicObject(10841, -394.78442382813, 1254.3929443359, 13.856538772583, 0, 0, 0);
	atomgate4 = CreateDynamicObject(10841, -394.62783813477, 1252.5374755859, 13.802545547485, 0, 0, 0);
	atomgate5 = CreateDynamicObject(10841, -394.37945556641, 1251.6022949219, 13.777733802795, 0, 0, 0);
	atomgate6 = CreateDynamicObject(10841, -395.05053710938, 1248.0109863281, 8.9105672836304, 0, 0, 0);
	atomgate7 = CreateDynamicObject(10841, -394.90997314453, 1246.9406738281, 7.8817310333252, 0, 0, 0);
	atomgate8 = CreateDynamicObject(10841, -386.84042358398, 1243.66796875, 8.8132982254028, 0, 0, 356);
	CreateDynamicObject(10841, -444.81573486328, 1442.2425537109, 27.339508056641, 0, 0, 72);
	CreateDynamicObject(3264, -460.33337402344, 1462.5532226563, 20.484027862549, 0, 0, 205.99996948242);
	CreateDynamicObject(3264, -452.75479125977, 1430.8056640625, 20.351299285889, 0, 0, 0);
	CreateDynamicObject(3264, -402.06860351563, 1240.7816162109, 4.0112819671631, 0, 0, 0);
	CreateDynamicObject(3265, -403.35217285156, 1240.3138427734, 3.6104545593262, 0, 0, 0);
	CreateDynamicObject(3265, -400.66571044922, 1241.0794677734, 4.3122577667236, 0, 0, 0);
	CreateDynamicObject(3666, -400.44567871094, 1241.4776611328, 4.8464832305908, 0, 0, 0);
	CreateDynamicObject(3666, -459.70703125, 1462.0439453125, 21.492794036865, 0, 0, 0);
    CreateDynamicObject(10079, -469.86840820313, 1462.0517578125, 22.695581436157, 4.5, 0, 0);
	CreateDynamicObject(1232, -439.8525390625, 1424.4324951172, 21.239356994629, 0, 103.99993896484, 30);
	CreateDynamicObject(1232, -423.25738525391, 1404.2425537109, 18.609619140625, 0, 260, 0);
	CreateDynamicObject(1232, -431.74508666992, 1389.1715087891, 16.263700485229, 0, 101.99996948242, 10);
	CreateDynamicObject(1232, -417.24597167969, 1381.4072265625, 15.538940429688, 0, 270, 0);
	CreateDynamicObject(1232, -424.1916809082, 1360.2215576172, 14.51669883728, 0, 103.99996948242, 10);
	CreateDynamicObject(1232, -407.60479736328, 1349.2503662109, 14.716794967651, 0, 266, 0);
	CreateDynamicObject(1232, -414.80255126953, 1328.9334716797, 13.855459213257, 0, 86, 0);
	CreateDynamicObject(1232, -397.72473144531, 1309.9532470703, 12.774103164673, 0, 266, 0);
	CreateDynamicObject(1232, -404.07070922852, 1289.5629882813, 10.536960601807, 0, 88, 0);
	CreateDynamicObject(1232, -391.02059936523, 1274.9063720703, 9.1729488372803, 0, 260, 0);
	CreateDynamicObject(1232, -400.49807739258, 1263.3792724609, 8.6938886642456, 0, 100, 0);
	CreateDynamicObject(1216, -393.68383789063, 1263.5783691406, 6.9130373001099, 0, 0, 255.99996948242);
	CreateDynamicObject(9241, -472.90252685547, 1433.3380126953, 19.5, 0, 0, 188);
	CreateDynamicObject(3330, -472.63934326172, 1419.5020751953, 7.7753567695618, 0, 0, 8);
	CreateDynamicObject(3330, -486.58367919922, 1432.4453125, 7.8098602294922, 0, 0, 278);
	CreateDynamicObject(3330, -478.04257202148, 1446.9252929688, 7.7660989761353, 0, 0, 8);
	CreateDynamicObject(3666, -484.09826660156, 1441.6312255859, 20.84181022644, 0, 0, 0);
	CreateDynamicObject(3666, -481.26455688477, 1422.4652099609, 20.84181022644, 0, 0, 0);
	CreateDynamicObject(3666, -462.53796386719, 1425.0050048828, 20.84181022644, 0, 0, 0);
	CreateDynamicObject(3666, -465.30740356445, 1444.2996826172, 20.84181022644, 0, 0, 0);
	CreateDynamicObject(1771, -415.40621948242, 1363.3043212891, 12.318544387817, 0, 0, 0);
	CreateDynamicObject(1771, -414.87454223633, 1360.0665283203, 12.391104698181, 0, 0, 0);
	CreateDynamicObject(1771, -413.93795776367, 1357.3276367188, 12.466163635254, 0, 0, 0);
	CreateDynamicObject(1771, -396.02890014648, 1282.2813720703, 8.3974733352661, 0, 0, 0);
	CreateDynamicObject(1771, -396.92642211914, 1288.6807861328, 9.0532503128052, 0, 0, 0);
	CreateDynamicObject(1771, -421.58834838867, 1383.0008544922, 13.843127250671, 0, 0, 0);
	CreateDynamicObject(1771, -423.03964233398, 1387.0439453125, 14.219694137573, 0, 0, 0);
	CreateDynamicObject(1771, -425.35958862305, 1397.3134765625, 15.840421676636, 0, 0, 0);
	CreateDynamicObject(1808, -442.42025756836, 1444.71484375, 20.308473587036, 0, 0, 0);
	CreateDynamicObject(1808, -441.89514160156, 1444.4522705078, 20.306934356689, 0, 0, 0);
	CreateDynamicObject(1808, -441.39547729492, 1444.0466308594, 20.301054000854, 0, 0, 0);
	CreateDynamicObject(1808, -440.84310913086, 1443.5168457031, 20.292249679565, 0, 0, 0);
	CreateDynamicObject(1808, -440.32403564453, 1442.8297119141, 20.278228759766, 0, 0, 0);
	CreateDynamicObject(1808, -439.86273193359, 1442.1630859375, 20.255191802979, 0, 0, 0);
	CreateDynamicObject(1808, -439.4069519043, 1441.6458740234, 20.246417999268, 0, 0, 0);
	CreateDynamicObject(1808, -438.90655517578, 1440.9371337891, 20.232242584229, 0, 0, 0);
	CreateDynamicObject(1808, -438.51452636719, 1440.28125, 20.217891693115, 0, 0, 0);
	CreateDynamicObject(2103, -438.08853149414, 1439.125, 20.18798828125, 0, 0, 312);
	CreateDynamicObject(2596, -442.74697875977, 1445.5833740234, 23.404109954834, 0, 0, 0);
	CreateDynamicObject(14604, -424.17175292969, 1373.1326904297, 13.34123134613, 0, 0, 0);
	//MS 13
	CreateDynamicObject(12957, -2700.00, 108.60, 4.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2671, -2709.20, 104.70, 3.20,   0.00, 0.00, 320.00);
	CreateDynamicObject(2674, -2698.10, 100.40, 3.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(3396, -2724.20, 73.70, 3.30,   0.00, 0.00, 270.00);
	CreateDynamicObject(1728, -2758.70, 76.30, 6.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1728, -2758.70, 73.40, 6.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2297, -2753.90, 73.40, 6.20,   0.00, 0.00, 132.00);
	CreateDynamicObject(2332, -2752.80, 73.50, 6.70,   0.00, 0.00, 178.00);
	CreateDynamicObject(2452, -2736.70, 79.20, 3.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2628, -2738.20, 78.60, 3.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(2627, -2739.70, 78.40, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2629, -2741.30, 78.80, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2815, -2755.60, 75.70, 6.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2818, -2757.30, 74.30, 6.20,   0.00, 0.00, 58.00);
	CreateDynamicObject(2311, -2755.70, 76.20, 6.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(3497, -2736.10, 73.40, 8.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2239, -2758.60, 79.20, 6.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2238, -2754.60, 73.60, 8.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(2114, -2737.40, 79.20, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2114, -2737.50, 78.80, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1709, -2757.40, 78.10, 6.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1657, -2756.40, 76.30, 10.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(11292, -2755.30, 86.50, 7.30,   0.00, 0.00, 2.00);
	CreateDynamicObject(2063, -2752.30, 88.30, 7.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2063, -2754.90, 88.30, 7.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2063, -2757.50, 88.30, 7.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2257, -2753.90, 85.10, 7.30,   0.00, 0.00, 182.00);
	CreateDynamicObject(2356, -2759.20, 85.10, 6.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2356, -2758.60, 85.10, 6.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(14604, -2759.20, 87.70, 7.10,   0.00, 0.00, 256.00);
	CreateDynamicObject(2836, -2756.90, 86.80, 6.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1829, -2751.70, 85.80, 7.40,   0.00, 0.00, 234.00);
	CreateDynamicObject(2901, -2757.40, 88.20, 8.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2901, -2755.80, 88.20, 8.10,   0.00, 0.00, 0.00);
	msdoor = CreateDynamicObject(3061, -2757.90, 84.80, 7.30,   0.00, 0.00, 272.00);
	CreateDynamicObject(1692, -2755.50, 87.10, 9.70,   0.00, 0.00, 2.00);
	CreateDynamicObject(3785, -2742.70, 104.00, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3785, -2742.70, 108.60, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3785, -2742.70, 113.20, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3785, -2742.70, 117.80, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3785, -2742.70, 122.40, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3785, -2742.70, 127.00, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3082, -2759.30, 87.10, 6.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(14467, -2712.10, 76.80, 6.10,   0.00, 0.00, 104.00);
	CreateDynamicObject(14467, -2712.00, 90.60, 6.10,   0.00, 0.00, 50.00);
	CreateDynamicObject(2846, -2718.20, 75.70, 3.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(2589, -2719.90, 74.20, 10.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2012, -2721.10, 79.10, 3.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(2012, -2724.10, 79.10, 3.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(14680, -2747.80, 73.80, 8.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(14680, -2742.70, 73.80, 8.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(14680, -2737.60, 73.80, 8.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(2612, -2724.40, 73.20, 6.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2967, -2723.90, 73.80, 4.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1212, -2751.90, 88.00, 6.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1212, -2752.10, 88.00, 6.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1212, -2752.40, 88.00, 6.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1279, -2751.70, 88.40, 7.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1550, -2751.30, 87.70, 6.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(1575, -2753.10, 85.70, 6.90,   0.00, 0.00, 332.00);
	CreateDynamicObject(1654, -2754.20, 88.10, 8.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2036, -2753.90, 86.10, 7.00,   0.00, 0.00, 32.00);
	CreateDynamicObject(3383, -2752.90, 85.90, 5.90,   0.00, 0.00, 2.00);
	CreateDynamicObject(3092, -2720.00, 73.40, 4.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(2907, -2759.20, 86.50, 6.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(1347, -2755.30, 85.40, 6.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(2103, -2756.90, 73.40, 6.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2812, -2755.50, 76.30, 6.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2816, -2754.30, 76.10, 6.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2828, -2754.10, 73.40, 7.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(974, -2759.60, 76.40, 7.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(974, -2756.30, 79.70, 7.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(974, -2749.60, 79.70, 7.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(974, -2743.00, 79.70, 7.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(16327, -2751.50, 137.30, 6.00,   0.00, 0.00, 84.00);
	CreateDynamicObject(967, -2716.30, 80.90, 3.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(967, -2766.10, 50.00, 6.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(3170, -2745.10, 105.40, 6.30,   0.00, 0.00, 180.00);
	//Flugzeug Interior Intro
	CreateObject(14548, 3562.3999023438, -960.59997558594, 613.29998779297, 0, 0, 0);
	CreateDynamicObject(14550, 3562.3999023438, -959.09997558594, 612.5, 0, 0, 0);
	CreateDynamicObject(1687, 3559.1999511719, -989.40002441406, 618.70001220703, 346, 0, 0);
	CreateDynamicObject(3066, 3559.3000488281, -959.59997558594, 612, 348, 0, 0);
	CreateDynamicObject(3066, 3565.5, -959.5, 612.09997558594, 348, 0, 0);
	CreateDynamicObject(2973, 3565.3999023438, -966.90002441406, 612.70001220703, 348, 0, 0);
	CreateDynamicObject(8843, 3562.3000488281, -947.79998779297, 608.5, 346, 0, 0);
	CreateDynamicObject(3877, 3560.6999511719, -925.20001220703, 608.20001220703, 0, 193.99995422363, 89.999969482422);
	CreateDynamicObject(3877, 3564.1000976563, -925, 608.20001220703, 346, 179.99993896484, 356);
	CreateDynamicObject(3461, 3559.1999511719, -989, 617.79998779297, 0, 0, 0);
	CreateDynamicObject(3461, 3558.8000488281, -989.5, 617.20001220703, 0, 0, 0);
	CreateDynamicObject(3461, 3559.8000488281, -989, 618, 0, 0, 0);
	CreateDynamicObject(3461, 3558.5, -989, 618, 0, 0, 0);
	CreateDynamicObject(3461, 3560.1000976563, -989.5, 617.70001220703, 0, 0, 0);
	CreateDynamicObject(3461, 3559.1000976563, -989.40002441406, 616.79998779297, 0, 0, 0);
	CreateDynamicObject(2780, 3560.8000488281, -990.40002441406, 619, 0, 0, 0);
	CreateDynamicObject(1688, 3565.5, -989.79998779297, 618.90002441406, 342, 0, 0);
	CreateDynamicObject(3461, 3564.8000488281, -989.70001220703, 618, 0, 0, 0);
	CreateDynamicObject(3461, 3565, -990, 617.29998779297, 0, 0, 0);
	CreateDynamicObject(3461, 3564.1000976563, -989.5, 617.5, 0, 0, 0);
	CreateDynamicObject(2780, 3562.8999023438, -972.40002441406, 618.09997558594, 0, 0, 0);
	CreateDynamicObject(3666, 3565.5, -937.5, 606.5, 0, 0, 0);
	CreateDynamicObject(3666, 3559.3000488281, -937.59997558594, 606.40002441406, 0, 0, 0);
	CreateDynamicObject(3666, 3565.3999023438, -925.5, 605, 0, 0, 0);
	CreateDynamicObject(3666, 3559.6999511719, -925.59997558594, 605, 0, 0, 0);
	//Tüv
	CreateDynamicObject(9623, -1526.0999755859, 2635.8000488281, 57.599998474121, 0, 0, 270);
	CreateDynamicObject(1684, -1514.0999755859, 2631.8999023438, 56.299999237061, 0, 0, 90);
	CreateDynamicObject(3504, -1506.6999511719, 2632, 56.200000762939, 0, 0, 0);
	CreateDynamicObject(3030, -1516.8000488281, 2625.1999511719, 58.200000762939, 0, 0, 0);
	CreateDynamicObject(3941, -1559.5, 2586.6000976563, 57.900001525879, 0, 0, 0);
	CreateDynamicObject(5299, -1486.5, 2535.6999511719, 53.599998474121, 0, 0, 0);
	CreateDynamicObject(1319, -1555.9000244141, 2666.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1554.0999755859, 2665.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1552.5, 2664.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1551.4000244141, 2663, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1551, 2661.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1540.8000488281, 2661.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1540.5, 2663, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1539.4000244141, 2664.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1537.9000244141, 2665.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1535.9000244141, 2666, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1613.1999511719, 2666.1000976563, 54.099998474121, 0, 0, 0);
	CreateDynamicObject(1319, -1616.6999511719, 2662.6000976563, 54.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1614.9000244141, 2664.3999023438, 54.200000762939, 0, 0, 0);
	CreateDynamicObject(1319, -1624.5, 2680.1999511719, 54.099998474121, 0, 0, 0);
	CreateDynamicObject(1319, -1618.5, 2676.1999511719, 54, 0, 0, 0);
	CreateDynamicObject(1319, -1621.5, 2678.1999511719, 54, 0, 0, 0);
	CreateDynamicObject(1319, -1540.9000244141, 2611.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1540.5, 2609.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1539.4000244141, 2607.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1537.8000488281, 2606.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1535.9000244141, 2606.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1540.4000244141, 2593, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1539.4000244141, 2594.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1537.9000244141, 2595.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1536, 2596, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1540.8000488281, 2591.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1505.9000244141, 2606.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1504.0999755859, 2606.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1502.5, 2607.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1501.4000244141, 2609.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1501.0999755859, 2611, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1501.0999755859, 2591.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1501.4000244141, 2593, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1502.5, 2594.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1504.0999755859, 2595.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1505.9000244141, 2596, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1510.9000244141, 2546.1000976563, 55.200000762939, 0, 0, 0);
	CreateDynamicObject(1319, -1506, 2546.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1500.1999511719, 2547.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1492, 2555.3999023438, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1495.1999511719, 2550.5, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1490.8000488281, 2561.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1535.9000244141, 2546, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1541.8000488281, 2547.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1546.5999755859, 2550.3999023438, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1550, 2555.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1551.0999755859, 2561.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1521, 2546, 55.200000762939, 0, 0, 0);
	CreateDynamicObject(1319, -1489.4000244141, 2664.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1487.8000488281, 2665.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1485.9000244141, 2666.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1490.5, 2663, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1490.8000488281, 2661.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1501.0999755859, 2661.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1501.5, 2663, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1502.5, 2664.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1504.0999755859, 2665.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1505.9000244141, 2666.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1490.6999511719, 2591.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1490.4000244141, 2593, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1489.4000244141, 2594.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1487.8000488281, 2595.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1486, 2596, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1490.8000488281, 2611.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1490.4000244141, 2609.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1489.4000244141, 2607.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1487.8000488281, 2606.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1486, 2606.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1435.9000244141, 2606.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1434.0999755859, 2606.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1432.5, 2607.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1431.4000244141, 2609.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1431, 2611.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1420.5, 2609.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1419.4000244141, 2607.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1417.8000488281, 2606.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1415.9000244141, 2606.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1420.8000488281, 2611.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1431, 2661.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1431.4000244141, 2663, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1432.5, 2664.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1434, 2665.6999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1435.9000244141, 2666.1000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1436, 2676.3000488281, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1430.1999511719, 2675.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1425.3000488281, 2671.8999023438, 55.200000762939, 0, 0, 0);
	CreateDynamicObject(1319, -1422, 2666.8999023438, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(1319, -1420.8000488281, 2661.1999511719, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(744, -1608.4000244141, 2660.3999023438, 53.400001525879, 0, 0, 0);
	CreateDynamicObject(744, -1608.5999755859, 2657, 54, 0, 0, 0);
	CreateDynamicObject(744, -1605.5999755859, 2656.8000488281, 53.700000762939, 0, 0, 0);
	CreateDynamicObject(6965, -1607.9000244141, 2659, 52.900001525879, 0, 0, 0);
	CreateDynamicObject(2745, -1611.5, 2663.6999511719, 54.700000762939, 0, 0, 213.99996948242);
	CreateDynamicObject(3461, -1609.5, 2662.6000976563, 57.599998474121, 0, 0, 0);
	CreateDynamicObject(3461, -1609.5999755859, 2658.8000488281, 56.200000762939, 0, 308, 0);
	CreateDynamicObject(2792, -1530.5, 2636.6000976563, 60.200000762939, 0, 0, 90);
	CreateDynamicObject(2793, -1530.5, 2645.3000488281, 60.099998474121, 0, 0, 90);
	CreateDynamicObject(2794, -1530.5, 2627.1000976563, 60.099998474121, 0, 0, 88);
	CreateDynamicObject(2796, -1506.6999511719, 2631.3999023438, 58.200000762939, 0, 0, 0);
	CreateDynamicObject(3666, -1530.4000244141, 2617.3000488281, 60.900001525879, 0, 0, 0);
	CreateDynamicObject(1395, -1521.5999755859, 2622.6999511719, 23.10000038147, 0, 0, 0);
	CreateDynamicObject(3096, -1521.5, 2624, 74.400001525879, 0, 0, 0);
	CreateDynamicObject(3096, -1522.9000244141, 2622.8000488281, 74.400001525879, 0, 0, 268);
	CreateDynamicObject(3096, -1521.6999511719, 2621.3999023438, 74.400001525879, 0, 0, 0);
	CreateDynamicObject(3096, -1520.3000488281, 2622.6000976563, 74.400001525879, 0, 0, 90);
	CreateDynamicObject(3472, -1535.5999755859, 2652, 54.799999237061, 0, 0, 0);
	CreateDynamicObject(3472, -1506.1999511719, 2660.8999023438, 54.799999237061, 0, 0, 0);
	CreateDynamicObject(3920, -1521.9000244141, 2642.3999023438, 59.400001525879, 0, 0, 269.99996948242);
	CreateDynamicObject(640, -1506.3000488281, 2657.8000488281, 55.5, 0, 0, 0);
	CreateDynamicObject(640, -1506.3000488281, 2652.6000976563, 55.5, 0, 0, 0);
	CreateDynamicObject(640, -1506.3000488281, 2647.3000488281, 55.5, 0, 0, 0);
	CreateDynamicObject(640, -1506.3000488281, 2642, 55.5, 0, 0, 0);
	CreateDynamicObject(640, -1509.3000488281, 2660.8000488281, 55.5, 0, 0, 269.99996948242);
	CreateDynamicObject(708, -1681.4000244141, 2673.3999023438, 60.599998474121, 0, 0, 0);
	CreateDynamicObject(708, -1695, 2706.6999511719, 56, 0, 0, 0);
	CreateDynamicObject(708, -1667, 2697.3000488281, 56.400001525879, 0, 0, 0);
	CreateDynamicObject(707, -1651.8000488281, 2702.8000488281, 56.299999237061, 0, 0, 204);
	CreateDynamicObject(705, -1718.3000488281, 2685.6999511719, 59.400001525879, 0, 0, 0);
	CreateDynamicObject(700, -1898, 2576.5, 46.299999237061, 0, 0, 0);
	CreateDynamicObject(698, -1927.8000488281, 2569.6999511719, 42.900001525879, 0, 0, 0);
	CreateDynamicObject(698, -1913, 2585.1000976563, 42.299999237061, 0, 0, 0);
	CreateDynamicObject(703, -1935.1999511719, 2586.6000976563, 40.700000762939, 0, 0, 0);
	CreateDynamicObject(691, -1899.5, 2599.8999023438, 43.299999237061, 0, 0, 0);
	CreateDynamicObject(1961, -1819.8000488281, 2698.3999023438, 55, 0, 0, 0);
	CreateDynamicObject(16000, -1820.6999511719, 2698.3999023438, 54.700000762939, 0, 2, 180);
	CreateDynamicObject(2179, -1823.6999511719, 2698.3999023438, 60.700000762939, 0, 0, 0);
	CreateDynamicObject(2179, -1821.5999755859, 2698.3000488281, 59.299999237061, 0, 90, 0);
	CreateDynamicObject(2179, -1818.6999511719, 2698.3999023438, 60.700000762939, 0, 0, 0);
	CreateDynamicObject(2179, -1827.1999511719, 2698.3999023438, 60.5, 0, 0, 0);
	CreateDynamicObject(2179, -1827.8000488281, 2698.3999023438, 63.5, 0, 88, 0);
	CreateDynamicObject(2179, -1816.3000488281, 2698.3999023438, 60.599998474121, 0, 346, 0);
	CreateDynamicObject(2179, -1814.6999511719, 2698.3999023438, 60.599998474121, 0, 14, 0);
	CreateDynamicObject(1962, -1822.3000488281, 2698.1999511719, 64.099998474121, 0, 0, 0);
	CreateDynamicObject(1962, -1820, 2698.3000488281, 64.099998474121, 0, 0, 0);
	CreateDynamicObject(8843, -1820.9000244141, 2698.3000488281, 57.200000762939, 0, 90, 269.99996948242);
	CreateDynamicObject(1215, -1831.5999755859, 2698.6000976563, 65.5, 0, 0, 0);
	CreateDynamicObject(1215, -1810.5, 2698.6999511719, 66.199996948242, 0, 0, 0);
	CreateDynamicObject(754, -1811, 2697.6999511719, 55.299999237061, 0, 0, 0);
	CreateDynamicObject(754, -1812.6999511719, 2697.5, 55.099998474121, 0, 0, 0);
	CreateDynamicObject(754, -1814.5, 2697.5, 55, 0, 0, 0);
	CreateDynamicObject(754, -1816.5, 2697.8000488281, 54.900001525879, 0, 0, 0);
	CreateDynamicObject(754, -1818.1999511719, 2697.8000488281, 54.799999237061, 0, 0, 0);
	CreateDynamicObject(754, -1820, 2697.8999023438, 54.700000762939, 0, 0, 0);
	CreateDynamicObject(754, -1822, 2697.6999511719, 54.599998474121, 0, 0, 0);
	CreateDynamicObject(754, -1823.9000244141, 2697.6000976563, 54.5, 0, 0, 0);
	CreateDynamicObject(754, -1825.6999511719, 2697.5, 54.5, 0, 0, 0);
	CreateDynamicObject(754, -1827.3000488281, 2697.3999023438, 54.5, 0, 0, 0);
	CreateDynamicObject(754, -1828.8000488281, 2697.6000976563, 54.400001525879, 0, 0, 0);
	CreateDynamicObject(754, -1830.5, 2697.5, 54.400001525879, 0, 0, 0);
	CreateDynamicObject(754, -1812.5999755859, 2695.3999023438, 55.799999237061, 0, 0, 0);
	CreateDynamicObject(754, -1814.1999511719, 2695.6000976563, 55.400001525879, 0, 0, 0);
	CreateDynamicObject(754, -1816, 2695.8999023438, 54.900001525879, 0, 0, 0);
	CreateDynamicObject(754, -1817.8000488281, 2696.1999511719, 54.700000762939, 0, 0, 0);
	CreateDynamicObject(754, -1819.5999755859, 2696.1000976563, 54.599998474121, 0, 0, 0);
	CreateDynamicObject(754, -1821.5, 2696.3000488281, 54.5, 0, 0, 0);
	CreateDynamicObject(3463, -1814.6999511719, 2684.5, 54.700000762939, 0, 0, 52);
	CreateDynamicObject(973, -1832.4000244141, 2695, 54.900001525879, 0, 0, 189.99996948242);
	CreateDynamicObject(973, -1823.3000488281, 2694.8000488281, 55.099998474121, 0, 2, 168);
	CreateDynamicObject(973, -1814.4000244141, 2693.1999511719, 55.700000762939, 0, 6, 172);
	CreateDynamicObject(16092, -1525.4000244141, 2642.1999511719, 48, 0, 0, 90);
	CreateDynamicObject(16092, -1525.3000488281, 2639, 48, 0, 0, 270);
	CreateDynamicObject(16092, -1525.3000488281, 2632.8999023438, 48, 0, 0, 90);
	CreateDynamicObject(16092, -1525.3000488281, 2630.1000976563, 48, 0, 0, 270);
	CreateDynamicObject(1696, -1535.4000244141, 2640.8999023438, 55.5, 354, 0, 269.99996948242);
	CreateDynamicObject(1696, -1535.3000488281, 2631.8999023438, 55.5, 354, 0, 269.99996948242);
	CreateDynamicObject(1232, -1535.6999511719, 2637.1999511719, 58.299999237061, 0, 0, 0);
	CreateDynamicObject(1232, -1535.6999511719, 2635.3999023438, 58.299999237061, 0, 0, 0);
	CreateDynamicObject(1232, -1535.6999511719, 2645.8000488281, 58.299999237061, 0, 0, 0);
	CreateDynamicObject(1232, -1535.8000488281, 2626, 58.299999237061, 0, 0, 0);
	CreateDynamicObject(1696, -1526.9000244141, 2632, 61.400001525879, 0, 0, 270);
	CreateDynamicObject(1696, -1526.9000244141, 2637.3000488281, 61.400001525879, 0, 0, 270);
	CreateDynamicObject(983, -1529.5, 2634.5, 61.400001525879, 0, 0, 0);
	CreateDynamicObject(3877, -1524.8000488281, 2639.6999511719, 62.099998474121, 0, 0, 0);
	CreateDynamicObject(3877, -1524.8000488281, 2629, 62.099998474121, 0, 0, 0);
	CreateDynamicObject(640, -1535.5, 2648.8000488281, 55.5, 0, 0, 0);
	CreateDynamicObject(640, -1535.5, 2623, 55.5, 0, 0, 0);
	CreateDynamicObject(640, -1533, 2623.5, 55.5, 0, 0, 269.99996948242);
	CreateDynamicObject(640, -1527.8000488281, 2623.5, 55.5, 0, 0, 269.99996948242);
	CreateDynamicObject(640, -1524.4000244141, 2636.6000976563, 61.099998474121, 0, 0, 0);
	CreateDynamicObject(640, -1524.4000244141, 2632, 61.099998474121, 0, 0, 0);
	CreateDynamicObject(1691, -1513.9000244141, 2630.1999511719, 58.099998474121, 0, 0, 358);
	CreateDynamicObject(3470, -1511.9000244141, 2623.3000488281, 58.799999237061, 0, 0, 0);
	//Angelplatz
	CreateDynamicObject(1256,-2331.30004883,2327.19995117,3.20000005,0.00000000,0.00000000,180.00000000); //object(stonebench1) (1)
	CreateDynamicObject(1256,-2331.39990234,2322.00000000,3.20000005,0.00000000,0.00000000,179.99993896); //object(stonebench1) (2)
	CreateDynamicObject(1256,-2331.39990234,2316.60009766,3.20000005,0.00000000,0.00000000,180.00000000); //object(stonebench1) (3)
	CreateDynamicObject(1256,-2331.39990234,2311.50000000,3.20000005,0.00000000,0.00000000,180.00000000); //object(stonebench1) (4)
	CreateDynamicObject(1256,-2331.39990234,2306.89990234,3.20000005,0.00000000,0.00000000,180.00000000); //object(stonebench1) (5)
	CreateDynamicObject(996,-2328.00000000,2336.50000000,3.29999995,0.00000000,0.00000000,269.99996948); //object(lhouse_barrier1) (1)
	CreateDynamicObject(996,-2327.89990234,2290.30004883,3.29999995,0.00000000,0.00000000,90.00000000); //object(lhouse_barrier1) (2)
	CreateDynamicObject(996,-2327.89990234,2298.39990234,3.29999995,0.00000000,0.00000000,90.00000000); //object(lhouse_barrier1) (3)
	CreateDynamicObject(996,-2328.00000000,2328.39990234,3.29999995,0.00000000,0.00000000,269.99996948); //object(lhouse_barrier1) (4)
	CreateDynamicObject(1461,-2328.00000000,2317.19995117,3.29999995,0.00000000,0.00000000,268.00000000); //object(dyn_life_p) (1)
	CreateDynamicObject(1461,-2328.00000000,2311.69995117,3.29999995,0.00000000,0.00000000,272.00000000); //object(dyn_life_p) (2)
	CreateDynamicObject(1606,-2315.89990234,2327.50000000,-5.30000019,17.81890869,8.40594482,37.41082764); //object(fish2s) (1)
	CreateDynamicObject(1606,-2315.10009766,2304.19995117,-9.00000000,22.15539551,23.85797119,12.53103638); //object(fish2s) (2)
	CreateDynamicObject(1601,-2314.80004883,2316.69995117,-6.50000000,0.00000000,30.00000000,56.00000000); //object(fish3s) (1)
	CreateDynamicObject(1602,-2323.30004883,2320.10009766,-5.50000000,0.00000000,0.00000000,0.00000000); //object(jellyfish) (1)
	CreateDynamicObject(1603,-2311.10009766,2306.10009766,-8.00000000,0.00000000,52.00000000,46.00000000); //object(jellyfish01) (1)
	CreateDynamicObject(1605,-2323.10009766,2320.89990234,-10.30000019,0.00000000,16.00000000,40.00000000); //object(fish1s) (1)
	CreateDynamicObject(1605,-2322.00000000,2325.10009766,-8.80000019,0.00000000,316.00000000,128.00000000); //object(fish1s) (2)
	CreateDynamicObject(1601,-2313.60009766,2297.69995117,-7.80000019,0.00000000,26.00000000,306.00000000); //object(fish3s) (2)
	CreateDynamicObject(994,-2334.19995117,2289.69995117,2.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier2) (1)
	CreateDynamicObject(640,-2332.30004883,2326.80004883,4.80000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush2) (1)
	CreateDynamicObject(640,-2332.30004883,2306.39990234,4.80000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush2) (2)
	CreateDynamicObject(640,-2332.30004883,2311.69995117,4.80000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush2) (3)
	CreateDynamicObject(640,-2332.30004883,2316.89990234,4.80000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush2) (4)
	CreateDynamicObject(640,-2332.30004883,2322.10009766,4.80000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush2) (5)
	CreateDynamicObject(640,-2332.30004883,2293.30004883,4.80000019,0.00000000,0.00000000,0.00000000); //object(kb_planter_bush2) (6)
	CreateDynamicObject(1371,-2331.30004883,2324.50000000,3.29999995,0.00000000,0.00000000,88.00000000); //object(cj_hippo_bin) (1)
	CreateDynamicObject(1371,-2331.30004883,2319.19995117,3.29999995,0.00000000,0.00000000,90.00000000); //object(cj_hippo_bin) (2)
	CreateDynamicObject(1371,-2331.30004883,2313.89990234,3.29999995,0.00000000,0.00000000,90.00000000); //object(cj_hippo_bin) (3)
	CreateDynamicObject(1371,-2331.30004883,2309.10009766,3.29999995,0.00000000,0.00000000,92.00000000); //object(cj_hippo_bin) (4)
	CreateDynamicObject(2671,-2330.10009766,2309.60009766,2.50000000,0.00000000,0.00000000,74.00000000); //object(proc_rubbish_3) (1)
	CreateDynamicObject(1223,-2331.69995117,2304.30004883,2.50000000,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (1)
	CreateDynamicObject(1223,-2331.50000000,2295.39990234,2.40000010,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (2)
	CreateDynamicObject(1223,-2331.69995117,2289.89990234,2.50000000,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (3)
	CreateDynamicObject(1223,-2331.69995117,2328.89990234,2.50000000,0.00000000,0.00000000,0.00000000); //object(lampost_coast) (4)
	CreateDynamicObject(14450,-2313.19995117,2313.50000000,1.79999995,0.00000000,0.00000000,0.00000000); //object(carter_girders03) (1)
	CreateDynamicObject(1215,-2316.60009766,2305.50000000,3.20000005,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,-2316.60009766,2313.50000000,3.20000005,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,-2316.60009766,2321.50000000,3.29999995,0.00000000,0.00000000,0.00000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,-2316.60009766,2321.50000000,1.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,-2316.60009766,2313.50000000,1.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,-2316.60009766,2305.50000000,1.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
	CreateDynamicObject(3862,-2338.39990234,2301.10009766,5.19999981,0.00000000,0.00000000,90.00000000); //object(marketstall02_sfxrf) (1)
	CreateDynamicObject(3861,-2338.39990234,2305.00000000,5.19999981,0.00000000,0.00000000,90.00000000); //object(marketstall01_sfxrf) (1)
	CreateDynamicObject(1570,-2337.89990234,2310.19995117,5.30000019,0.00000000,0.00000000,90.00000000); //object(cj_noodle_3) (1)
	CreateDynamicObject(1363,-2334.60009766,2295.00000000,4.80000019,0.00000000,0.00000000,0.00000000); //object(cj_phone_kiosk) (1)
	CreateDynamicObject(1342,-2337.60009766,2314.69995117,5.00000000,0.00000000,0.00000000,0.00000000); //object(noodlecart_prop) (1)
	CreateDynamicObject(1341,-2338.10009766,2318.80004883,5.00000000,0.00000000,0.00000000,0.00000000); //object(icescart_prop) (1)
	CreateDynamicObject(2670,-2334.60009766,2313.80004883,4.09999990,0.00000000,0.00000000,330.00000000); //object(proc_rubbish_1) (1)
	CreateDynamicObject(2676,-2334.19995117,2307.30004883,4.09999990,0.00000000,0.00000000,292.00000000); //object(proc_rubbish_8) (1)
	CreateDynamicObject(2673,-2338.60009766,2328.19995117,4.09999990,0.00000000,0.00000000,46.00000000); //object(proc_rubbish_5) (1)
	CreateDynamicObject(1440,-2339.19995117,2325.19995117,4.50000000,0.00000000,0.00000000,90.00000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1359,-2339.00000000,2329.89990234,4.69999981,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (1)
	CreateDynamicObject(1359,-2333.10009766,2320.80004883,4.69999981,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (2)
	CreateDynamicObject(1359,-2339.19995117,2290.60009766,4.69999981,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (3)
	CreateDynamicObject(3039,-2338.10009766,2321.89990234,4.00000000,0.00000000,0.00000000,272.00000000); //object(ct_stall1) (1)
	CreateDynamicObject(2966,-2337.30004883,2306.10009766,4.90000010,0.00000000,0.00000000,0.00000000); //object(mobile1993b) (1)
	CreateDynamicObject(2966,-2337.60009766,2306.10009766,4.90000010,0.00000000,0.00000000,0.00000000); //object(mobile1993b) (2)
	CreateDynamicObject(2965,-2338.00000000,2306.10009766,4.90000010,0.00000000,0.00000000,0.00000000); //object(k_pooltriangle01) (1)
	CreateDynamicObject(2474,-2337.89990234,2304.89990234,4.90000010,0.00000000,0.00000000,16.00000000); //object(model_trains1) (1)
	CreateDynamicObject(2474,-2337.89990234,2305.50000000,4.90000010,0.00000000,0.00000000,20.00000000); //object(model_trains1) (2)
	CreateDynamicObject(1513,-2338.00000000,2302.19995117,5.19999981,0.00000000,0.00000000,86.00000000); //object(dyn_sweetie_tray) (1)
	CreateDynamicObject(1514,-2338.00000000,2299.89990234,5.09999990,0.00000000,0.00000000,92.00000000); //object(dyn_ff_till) (1)
	CreateDynamicObject(1514,-2338.10009766,2303.80004883,5.09999990,0.00000000,0.00000000,92.00000000); //object(dyn_ff_till) (2)
	CreateDynamicObject(1885,-2337.39990234,2303.10009766,4.00000000,0.00000000,0.00000000,0.00000000); //object(shop_baskets) (1)
	CreateDynamicObject(2362,-2338.39990234,2301.89990234,4.90000010,0.00000000,0.00000000,88.00000000); //object(cj_sweetie_tray_1) (1)
	CreateDynamicObject(2484,-2337.69995117,2299.30004883,4.80000019,0.00000000,0.00000000,0.00000000); //object(model_yaught) (1)
	CreateDynamicObject(2485,-2337.39990234,2302.19995117,4.90000010,0.00000000,0.00000000,86.00000000); //object(model_car_1) (1)
	CreateDynamicObject(2486,-2337.69995117,2301.00000000,4.90000010,0.00000000,0.00000000,100.00000000); //object(model_car) (1)
	CreateDynamicObject(2492,-2339.69995117,2302.19995117,5.59999990,0.00000000,0.00000000,90.00000000); //object(manhunt_toy2_1) (1)
	CreateDynamicObject(2578,-2339.69995117,2301.39990234,5.40000010,0.00000000,0.00000000,92.00000000); //object(cj_sex_shelf_1) (1)
	//Autoabholpunkt
	CreateObject(12912, -1595.30, 79.40, 9.50,   0.00, 0.00, 28.00);
	CreateDynamicObject(8979, -1575.90, 72.60, 19.30,   0.00, 0.00, 136.00);
	CreateDynamicObject(8979, -1576.80, 71.70, 19.30,   0.00, 0.00, 136.00);
	CreateDynamicObject(8979, -1577.70, 70.70, 19.30,   0.00, 0.00, 136.00);
	CreateDynamicObject(8979, -1578.60, 69.80, 19.30,   0.00, 0.00, 136.00);
	CreateDynamicObject(8979, -1579.50, 68.80, 19.30,   0.00, 0.00, 136.00);
	CreateDynamicObject(7516, -1568.10, 52.50, 20.20,   0.00, 0.00, 316.00);
	CreateDynamicObject(3578, -1570.50, 69.90, 17.90,   0.00, 0.00, 315.99);
	CreateDynamicObject(3578, -1577.70, 76.90, 17.90,   0.00, 0.00, 316.00);
	CreateDynamicObject(3578, -1585.10, 84.10, 17.90,   0.00, 0.00, 316.00);
	CreateDynamicObject(3578, -1592.40, 91.20, 17.90,   0.00, 0.00, 316.00);
	CreateDynamicObject(8979, -1610.90, 73.00, 14.80,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1611.80, 73.90, 14.80,   0.00, 0.00, 226.00);
	CreateDynamicObject(3578, -1596.30, 95.00, 17.90,   0.00, 0.00, 316.00);
	CreateDynamicObject(3578, -1603.00, 95.00, 17.90,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1608.10, 89.80, 15.80,   0.00, 334.00, 46.00);
	CreateDynamicObject(3578, -1613.60, 84.10, 13.40,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1574.80, 64.60, 17.90,   0.00, 0.00, 316.00);
	CreateDynamicObject(3578, -1582.10, 71.70, 17.90,   0.00, 0.00, 316.00);
	CreateDynamicObject(3578, -1589.30, 78.70, 17.90,   0.00, 0.00, 316.00);
	CreateDynamicObject(3578, -1593.40, 82.70, 17.90,   0.00, 0.00, 316.00);
	CreateDynamicObject(3578, -1620.80, 76.70, 13.40,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1627.50, 69.80, 13.40,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1633.60, 63.50, 13.40,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1601.50, 82.90, 15.60,   0.00, 334.00, 46.00);
	CreateDynamicObject(3578, -1607.90, 76.30, 13.40,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1615.00, 69.00, 13.40,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1622.00, 61.80, 13.40,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1626.60, 57.00, 13.40,   0.00, 0.00, 46.00);
	CreateDynamicObject(8979, -1649.30, 46.20, 10.30,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1648.40, 45.30, 10.30,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1647.50, 44.50, 10.30,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1646.60, 43.60, 10.30,   0.00, 0.00, 226.00);
	CreateDynamicObject(3578, -1628.70, 58.00, 13.40,   0.00, 0.00, 16.00);
	CreateDynamicObject(3578, -1636.80, 53.30, 11.10,   0.00, 334.00, 46.00);
	CreateDynamicObject(3578, -1642.70, 47.40, 8.90,   0.00, 0.00, 44.00);
	CreateDynamicObject(3578, -1629.40, 59.90, 13.40,   0.00, 0.00, 38.00);
	CreateDynamicObject(3578, -1621.30, 66.20, 13.40,   0.00, 0.00, 38.00);
	CreateDynamicObject(3578, -1613.20, 72.50, 13.40,   0.00, 0.00, 38.00);
	CreateDynamicObject(3578, -1610.50, 74.60, 13.40,   0.00, 0.00, 38.00);
	CreateDynamicObject(982, -1616.50, 70.80, 13.30,   0.00, 0.00, 308.00);
	CreateDynamicObject(984, -1628.80, 61.20, 13.30,   0.00, 0.00, 308.00);
	CreateDynamicObject(8979, -1612.80, 74.80, 14.80,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1613.60, 75.60, 14.80,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1614.50, 76.50, 14.80,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1615.30, 77.30, 14.80,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1616.30, 78.20, 14.80,   0.00, 0.00, 226.00);
	CreateDynamicObject(8979, -1617.00, 78.90, 14.80,   0.00, 0.00, 226.00);
	CreateDynamicObject(3578, -1640.20, 56.70, 11.10,   0.00, 334.00, 46.00);
	CreateDynamicObject(3578, -1646.20, 50.50, 8.90,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1652.50, 44.00, 8.90,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1658.70, 37.60, 8.90,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1665.50, 30.60, 8.90,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1649.40, 40.70, 8.90,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1656.20, 33.70, 8.90,   0.00, 0.00, 46.00);
	CreateDynamicObject(3578, -1662.30, 27.40, 8.90,   0.00, 0.00, 45.99);
	magnetob4 = CreateObject(11505, -1673.80, 22.40, 5.80,   0.00, 0.00, 46.00);
	CreateDynamicObject(3666, -1599.80, 98.30, 19.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1597.70, 86.50, 18.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1633.40, 56.70, 14.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1637.00, 59.90, 14.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1665.70, 23.90, 10.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(3666, -1669.00, 27.00, 10.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(16132, -1647.80, 38.90, 1.50,   0.00, 0.00, 316.00);
	CreateDynamicObject(16132, -1659.30, 40.40, 1.50,   0.00, 0.00, 136.00);
	CreateDynamicObject(9339, -1659.40, 37.10, 7.90,   0.00, 270.00, 316.00);
	CreateDynamicObject(9339, -1656.10, 33.70, 7.90,   0.00, 90.00, 316.00);
	CreateDynamicObject(9339, -1657.00, 34.60, 7.90,   0.00, 270.00, 316.00);
	CreateDynamicObject(9339, -1658.50, 36.20, 7.90,   0.00, 90.00, 316.00);
	CreateDynamicObject(9339, -1657.80, 35.50, 7.90,   0.00, 270.00, 316.00);
	CreateDynamicObject(8556, -1742.70, -49.80, 7.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(3879, -1564.30, 60.60, 14.70,   0.00, 90.00, 316.00);
	CreateDynamicObject(3879, -1576.50, 72.40, 14.70,   0.00, 90.00, 316.00);
	CreateDynamicObject(3879, -1585.50, 81.10, 14.60,   0.00, 90.00, 316.00);
	CreateDynamicObject(3879, -1601.00, 96.10, -7.00,   0.00, 179.99, 316.00);
	CreateDynamicObject(3886, -1616.80, 74.00, 10.20,   0.00, 90.00, 46.00);
	CreateDynamicObject(3886, -1626.00, 64.50, 10.20,   0.00, 270.00, 46.00);
	CreateDynamicObject(3886, -1607.90, 83.20, -11.40,   0.00, 180.00, 46.00);
	CreateDynamicObject(3886, -1632.00, 58.30, -11.50,   0.00, 180.00, 46.00);
	CreateDynamicObject(9339, -1647.70, 42.40, 7.90,   0.00, 90.00, 314.00);
	CreateDynamicObject(9339, -1648.60, 43.30, 7.90,   0.00, 90.00, 314.00);
	CreateDynamicObject(9339, -1649.50, 44.20, 7.90,   0.00, 90.00, 314.00);
	CreateDynamicObject(9339, -1650.40, 45.10, 7.90,   0.00, 90.00, 314.00);
	CreateDynamicObject(9339, -1651.10, 45.70, 7.90,   0.00, 270.00, 316.00);
	CreateDynamicObject(8657, -1620.60, 77.10, 11.60,   0.00, 180.00, 136.00);
	CreateDynamicObject(8657, -1626.20, 71.30, 11.60,   0.00, 180.00, 136.00);
	CreateDynamicObject(8657, -1619.20, 64.60, 11.50,   0.00, 180.00, 136.00);
	CreateDynamicObject(8657, -1613.70, 70.30, 11.50,   0.00, 180.00, 136.00);
	CreateDynamicObject(982, -1744.50, -117.70, 3.20,   0.00, 0.00, 312.00);
	CreateDynamicObject(982, -1732.40, -90.80, 3.20,   0.00, 0.00, 354.00);
	CreateDynamicObject(982, -1731.10, -65.30, 3.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, -1731.20, -48.40, 3.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, -1725.80, -38.60, 3.20,   0.00, 0.00, 302.00);
	CreateDynamicObject(984, -1714.00, -34.30, 3.20,   0.00, 0.00, 278.00);
	CreateDynamicObject(982, -1697.90, -25.20, 3.20,   0.00, 0.00, 310.00);
	CreateDynamicObject(982, -1678.90, -8.10, 3.20,   0.00, 0.00, 314.00);
	CreateDynamicObject(982, -1660.50, -8.10, 3.20,   0.00, 0.00, 46.00);
	CreateDynamicObject(984, -1651.30, -23.40, 3.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1251, -1671.20, 4.60, 2.50,   0.00, 0.00, 44.00);
	CreateDynamicObject(989, -1756.00, -37.60, 4.40,   0.00, 0.00, 16.00);
	CreateDynamicObject(989, -1755.90, -29.50, 4.40,   0.00, 0.00, 16.00);
	CreateDynamicObject(16061, -1771.50, -160.50, 2.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(16061, -1729.10, -74.70, 2.60,   0.00, 0.00, 358.00);
	CreateDynamicObject(16061, -1729.70, -70.30, 2.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(16061, -1752.70, -128.10, 2.60,   0.00, 0.00, 312.00);
	CreateDynamicObject(984, -1760.40, -126.30, 3.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(983, -1770.00, -126.30, 3.20,   0.00, 0.00, 270.00);
	CreateDynamicObject(8393, -1594.70, 65.60, 8.60,   0.00, 0.00, 223.99);
	CreateDynamicObject(8979, -1626.40, 39.00, 4.90,   0.00, 0.00, 224.00);
	CreateDynamicObject(8980, -1625.50, 38.40, 4.90,   0.00, 0.00, 224.00);
	CreateDynamicObject(3886, -1585.00, 54.80, 1.80,   90.00, 183.49, 220.50);
	CreateDynamicObject(3886, -1595.90, 66.20, 1.70,   90.00, 179.92, 224.07);
	CreateDynamicObject(3886, -1597.80, 99.40, 2.20,   270.00, 190.70, 146.69);
	CreateDynamicObject(3886, -1597.80, 68.20, 1.90,   90.00, 179.92, 224.08);
	magnetob3 = CreateObject(1380, -1696.68, 44.30, 26.80,   0.00, 0.00, 326.73);
	magnetob2 = CreateObject(1379, -1697.65, 44.24, 26.40,   0.00, 0.00, 237.82);
	magnetob = CreateObject(1382, -1697.82, 44.71, 37.93,   0.00, 0.00, 239.79);
	//Hospital Interior
	CreateObject(14668,1241.97753906,316.33203125,-12.74218750,0.00000000,0.00000000,155.50048828); //object(711_c)(1)
	CreateDynamicObject(16500,1250.81274414,320.83963013,-10.74797821,0.00000000,0.00000000,155.54028320); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(16500,1239.35351562,326.01269531,-10.74797821,0.00000000,0.00000000,335.35217285); //object(cn2_savgardr1_)(2)
	CreateDynamicObject(2948,1247.15527344,325.59375000,-12.74218750,0.00000000,0.00000000,244.99511719); //object(cr_door_02)(1)
	CreateDynamicObject(2948,1245.40307617,326.37210083,-12.74218750,0.00000000,0.00000000,66.34619141); //object(cr_door_02)(5)
	CreateDynamicObject(2948,1247.12719727,325.60192871,-12.74218750,0.00000000,0.00000000,66.09619141); //object(cr_door_02)(7)
	CreateDynamicObject(2948,1245.40234375,326.37207031,-12.74218750,0.00000000,0.00000000,245.70690918); //object(cr_door_02)(9)
	CreateDynamicObject(16500,1252.00988770,322.11306763,-10.74797821,0.00000000,0.00000000,65.97290039); //object(cn2_savgardr1_)(4)
	CreateDynamicObject(16500,1239.74902344,327.75781250,-10.74797821,0.00000000,0.00000000,65.97290039); //object(cn2_savgardr1_)(5)
	CreateDynamicObject(16500,1235.33691406,329.73535156,-10.74797821,0.00000000,0.00000000,65.97290039); //object(cn2_savgardr1_)(6)
	CreateDynamicObject(16500,1240.55053711,322.84387207,-10.74797821,0.00000000,0.00000000,65.97290039); //object(cn2_savgardr1_)(10)
	CreateDynamicObject(16500,1247.58593750,319.62402344,-10.74797821,0.00000000,0.00000000,65.97290039); //object(cn2_savgardr1_)(11)
	CreateDynamicObject(16500,1256.47546387,320.10949707,-10.74797821,0.00000000,0.00000000,65.97290039); //object(cn2_savgardr1_)(4)
	CreateDynamicObject(16500,1248.91369629,316.69903564,-10.77296638,0.00000000,0.00000000,334.99853516); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(1523,1247.88476562,314.44531250,-12.74218750,0.00000000,0.00000000,244.41835022); //object(gen_doorext10)(1)
	CreateDynamicObject(16500,1246.14550781,310.84179688,-10.77296638,0.00000000,0.00000000,334.98962402); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(16500,1252.14880371,317.80108643,-10.77296638,0.00000000,0.00000000,245.26428223); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(1523,1254.36462402,316.69268799,-12.74218750,0.00000000,0.00000000,336.14318848); //object(gen_doorext10)(3)
	CreateDynamicObject(1649,1248.17285156,314.98782349,-8.57648373,0.00000000,0.00000000,244.40539551); //object(wglasssmash)(6)
	CreateDynamicObject(1649,1248.17285156,314.98730469,-8.60148335,0.00000000,0.00000000,64.36163330); //object(wglasssmash)(6)
	CreateDynamicObject(1649,1246.27282715,311.03753662,-8.55148411,0.00000000,0.00000000,64.36163330); //object(wglasssmash)(6)
	CreateDynamicObject(1649,1246.30090332,311.09234619,-8.55148411,0.00000000,0.00000000,244.40185547); //object(wglasssmash)(6)
	CreateDynamicObject(1649,1254.16479492,316.79168701,-8.57644939,0.00000000,0.00000000,335.97521973); //object(wglasssmash)(5)
	CreateDynamicObject(1649,1254.16406250,316.79101562,-8.57644939,0.00000000,0.00000000,155.72509766); //object(wglasssmash)(7)
	CreateDynamicObject(16500,1247.32373047,307.67590332,-10.77296638,0.00000000,0.00000000,245.75933838); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(16500,1251.80969238,305.65090942,-10.77296638,0.00000000,0.00000000,245.75939941); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(16500,1243.76367188,311.42089844,-10.77296638,0.00000000,0.00000000,245.75866699); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(1523,1241.49548340,312.37069702,-12.74218750,0.00000000,0.00000000,244.42028809); //object(gen_doorext10)(1)
	CreateDynamicObject(1523,1240.27075195,309.60211182,-12.74218750,0.00000000,0.00000000,65.72796631); //object(gen_doorext10)(1)
	CreateDynamicObject(16500,1247.50244141,307.82385254,-10.77296638,0.00000000,0.00000000,65.71850586); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(16500,1252.05346680,305.75854492,-10.77296638,0.00000000,0.00000000,65.71472168); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(1649,1240.60668945,310.42483521,-8.60148335,0.00000000,0.00000000,64.60791016); //object(wglasssmash)(6)
	CreateDynamicObject(1649,1240.60644531,310.42480469,-8.60148335,0.00000000,0.00000000,244.06481934); //object(wglasssmash)(6)
	CreateDynamicObject(16500,1239.35998535,326.08981323,-10.74797821,0.00000000,0.00000000,155.89245605); //object(cn2_savgardr1_)(2)
	CreateDynamicObject(16500,1239.72460938,327.66137695,-10.74797821,0.00000000,0.00000000,245.43292236); //object(cn2_savgardr1_)(5)
	CreateDynamicObject(16500,1235.31457520,329.69033813,-10.74797821,0.00000000,0.00000000,245.43292236); //object(cn2_savgardr1_)(6)
	CreateDynamicObject(1533,1234.31518555,309.46380615,-12.74218750,0.00000000,0.00000000,155.50512695); //object(gen_doorext12)(1)
	CreateDynamicObject(1533,1232.99584961,310.07183838,-12.74218750,0.00000000,0.00000000,155.50048828); //object(gen_doorext12)(2)
	CreateDynamicObject(16500,1238.01562500,310.55383301,-10.77296638,0.00000000,0.00000000,245.75866699); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(16500,1234.83642578,309.34338379,-10.77296638,0.00000000,0.00000000,335.48840332); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(1649,1238.71875000,306.44982910,-8.60148335,0.00000000,0.00000000,64.60510254); //object(wglasssmash)(6)
	CreateDynamicObject(1649,1238.67871094,306.48254395,-8.60148335,0.00000000,0.00000000,244.06127930); //object(wglasssmash)(6)
	CreateDynamicObject(16500,1238.48388672,305.86618042,-12.24794388,0.00000000,0.00000000,335.48400879); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(1523,1239.58984375,308.04516602,-12.74218750,0.00000000,0.00000000,65.72570801); //object(gen_doorext10)(1)
	CreateDynamicObject(16500,1231.15173340,310.99179077,-10.77296638,0.00000000,0.00000000,156.02392578); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(16500,1233.19140625,315.54788208,-10.77296638,0.00000000,0.00000000,156.02233887); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(1523,1234.16479492,317.82318115,-12.74218750,0.00000000,0.00000000,64.95855713); //object(gen_doorext10)(1)
	CreateDynamicObject(1523,1235.37109375,320.58068848,-12.74218750,0.00000000,0.00000000,245.49682617); //object(gen_doorext10)(1)
	CreateDynamicObject(16500,1236.36914062,322.84472656,-10.77296638,0.00000000,0.00000000,156.02233887); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(16500,1238.22131348,327.00827026,-10.77296638,0.00000000,0.00000000,156.02233887); //object(cn2_savgardr1_)(1)
	CreateDynamicObject(1649,1234.76708984,319.18820190,-8.59538078,0.00000000,0.00000000,65.00463867); //object(wglasssmash)(13)
	CreateDynamicObject(1649,1236.58801270,323.16397095,-8.54538155,0.00000000,0.00000000,65.98559570); //object(wglasssmash)(14)
	CreateDynamicObject(1649,1232.92041016,315.24493408,-8.54538155,0.00000000,0.00000000,65.00463867); //object(wglasssmash)(15)
	CreateDynamicObject(1649,1234.76660156,319.18750000,-8.59538078,0.00000000,0.00000000,244.96058655); //object(wglasssmash)(16)
	CreateDynamicObject(1649,1232.97607422,315.24398804,-8.54538155,0.00000000,0.00000000,246.19165039); //object(wglasssmash)(17)
	CreateDynamicObject(1649,1236.59753418,323.12588501,-8.59538078,0.00000000,0.00000000,245.20666504); //object(wglasssmash)(18)
	CreateDynamicObject(3395,1232.95812988,325.62490845,-12.74218750,0.00000000,0.00000000,156.00500488); //object(a51_sdsk_3_)(1)
	CreateDynamicObject(3383,1229.17004395,312.88650513,-12.74218750,0.00000000,0.00000000,335.68017578); //object(a51_labtable1_)(1)
	CreateDynamicObject(3383,1235.95825195,327.98693848,-12.74218750,0.00000000,0.00000000,155.96655273); //object(a51_labtable1_)(2)
	CreateDynamicObject(1997,1236.24475098,309.35018921,-12.74218750,0.00000000,0.00000000,65.77496338); //object(hos_trolley)(1)
	CreateDynamicObject(1997,1236.72546387,310.39508057,-12.74218750,0.00000000,0.00000000,65.76965332); //object(hos_trolley)(2)
	CreateDynamicObject(3383,1229.52941895,317.27880859,-12.74218750,0.00000000,0.00000000,245.69653320); //object(a51_labtable1_)(3)
	CreateDynamicObject(2008,1241.20190430,324.26699829,-12.74218750,0.00000000,0.00000000,336.69519043); //object(officedesk1)(1)
	CreateDynamicObject(1738,1240.81738281,326.84960938,-12.08755684,0.00000000,0.00000000,335.69274902); //object(cj_radiator_old)(1)
	CreateDynamicObject(2146,1234.80371094,324.82031250,-12.25663662,0.00000000,0.00000000,336.17614746); //object(cj_trolly1)(1)
	CreateDynamicObject(1997,1232.04016113,316.25039673,-12.74218750,0.00000000,0.00000000,175.09460449); //object(hos_trolley)(4)
	CreateDynamicObject(1997,1248.82653809,304.07025146,-12.74218750,0.00000000,0.00000000,155.49963379); //object(hos_trolley)(5)
	CreateDynamicObject(1997,1246.90649414,304.92480469,-12.74218750,0.00000000,0.00000000,155.49499512); //object(hos_trolley)(6)
	CreateDynamicObject(1997,1244.87304688,305.83728027,-12.74218750,0.00000000,0.00000000,155.49499512); //object(hos_trolley)(7)
	CreateDynamicObject(1997,1244.81933594,309.47732544,-12.74218750,0.00000000,0.00000000,335.24963379); //object(hos_trolley)(8)
	CreateDynamicObject(2162,1253.01159668,310.06793213,-11.24219131,0.00000000,0.00000000,244.41833496); //object(med_office_unit_1)(1)
	CreateDynamicObject(2008,1251.26916504,309.88665771,-12.74218750,0.00000000,0.00000000,66.50244141); //object(officedesk1)(2)
	CreateDynamicObject(1726,1248.90039062,319.74414062,-12.74218750,0.00000000,0.00000000,156.54968262); //object(mrk_seating2)(1)
	CreateDynamicObject(2596,1249.45507812,323.78613281,-10.29656029,0.00000000,0.00000000,338.39538574); //object(cj_sex_tv)(1)
	CreateDynamicObject(1715,1241.55798340,322.76785278,-12.74218750,0.00000000,0.00000000,156.70996094); //object(kb_swivelchair2)(1)
	CreateDynamicObject(1720,1250.06713867,310.47796631,-12.74218750,0.00000000,0.00000000,65.82000732); //object(rest_chair)(4)
	CreateDynamicObject(2007,1239.17919922,324.16729736,-12.74218750,0.00000000,0.00000000,65.43457031); //object(filing_cab_nu01)(1)
	CreateDynamicObject(2167,1251.28076172,321.43664551,-12.74218750,0.00000000,0.00000000,64.69995117); //object(med_office_unit_7)(1)
	CreateDynamicObject(2167,1250.51171875,319.78027344,-12.74218750,0.00000000,0.00000000,64.69299316); //object(med_office_unit_7)(2)
	CreateDynamicObject(2690,1239.27392578,327.61547852,-11.28874779,0.00000000,0.00000000,0.00000000); //object(cj_fire_ext)(1)
	CreateDynamicObject(1808,1246.33703613,320.47070312,-12.74218750,0.00000000,0.00000000,155.67529297); //object(cj_watercooler2)(1)
	CreateDynamicObject(1714,1252.76184082,310.21145630,-12.74218750,0.00000000,0.00000000,246.90087891); //object(kb_swivelchair1)(1)
	CreateDynamicObject(1720,1250.44445801,311.32257080,-12.74218750,0.00000000,0.00000000,65.81909180); //object(rest_chair)(4)
	CreateDynamicObject(2146,1251.83618164,317.28320312,-12.25663662,0.00000000,0.00000000,245.00634766); //object(cj_trolly1)(1)
	CreateDynamicObject(2167,1245.82531738,309.92208862,-12.74218750,0.00000000,0.00000000,64.69299316); //object(med_office_unit_7)(2)
	CreateDynamicObject(2007,1251.34545898,307.54479980,-12.74218750,0.00000000,0.00000000,246.36035156); //object(filing_cab_nu01)(2)
	CreateDynamicObject(2000,1250.98632812,306.63806152,-12.74218750,0.00000000,0.00000000,246.11035156); //object(filing_cab_nu)(1)
	CreateDynamicObject(1727,1236.46252441,321.43969727,-12.74218750,0.00000000,0.00000000,65.72991943); //object(mrk_seating2b)(1)
	CreateDynamicObject(1726,1246.81396484,319.24847412,-12.74218750,0.00000000,0.00000000,335.78393555); //object(mrk_seating2)(1)
	CreateDynamicObject(1726,1243.85375977,312.12213135,-12.74218750,0.00000000,0.00000000,156.32092285); //object(mrk_seating2)(1)
	CreateDynamicObject(2855,1246.18347168,317.07830811,-12.66718102,0.00000000,0.00000000,0.00000000); //object(gb_bedmags05)(1)
	CreateDynamicObject(2855,1246.80883789,316.68179321,-12.21718025,0.00000000,0.00000000,322.97521973); //object(gb_bedmags05)(3)
	CreateDynamicObject(2855,1248.94165039,321.79312134,-12.21718025,0.00000000,0.00000000,359.75000000); //object(gb_bedmags05)(4)
	CreateDynamicObject(1738,1246.50134277,312.30136108,-12.08755684,0.00000000,0.00000000,244.38343811); //object(cj_radiator_old)(1)
	CreateDynamicObject(1738,1253.85607910,312.57608032,-12.08755684,0.00000000,0.00000000,244.37988281); //object(cj_radiator_old)(1)
	CreateDynamicObject(2596,1247.68322754,315.02133179,-10.29656029,0.00000000,0.00000000,230.45617676); //object(cj_sex_tv)(1)
	CreateDynamicObject(2596,1242.10974121,321.77346802,-10.29656029,0.00000000,0.00000000,359.31457520); //object(cj_sex_tv)(1)
	CreateDynamicObject(2315,1247.90136719,322.11004639,-12.74218750,0.00000000,0.00000000,335.71020508); //object(cj_tv_table4)(1)
	CreateDynamicObject(2315,1246.10485840,317.15661621,-12.74218750,0.00000000,0.00000000,335.70922852); //object(cj_tv_table4)(2)
	CreateDynamicObject(2380,1254.35302734,320.86846924,-11.49442196,0.00000000,0.00000000,335.16516113); //object(cj_suits)(1)
	CreateDynamicObject(2816,1246.20117188,317.14129639,-12.24655533,0.00000000,0.00000000,0.00000000); //object(gb_bedmags01)(1)
	CreateDynamicObject(2852,1247.99145508,322.01168823,-12.24655533,0.00000000,0.00000000,0.00000000); //object(gb_bedmags02)(2)
	//BSPD
	CreateObject(14847, 1560.68, -1684.51, 1725.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(14848, 1563.08, -1682.92, 1723.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(14852, 1549.56, -1684.63, 1727.58,   0.00, 0.00, 90.00);
	CreateDynamicObject(14892, 1571.12, -1688.11, 1728.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(14851, 1561.02, -1684.53, 1726.23,   0.00, 0.00, 90.00);
	CreateDynamicObject(2924, 1554.81, -1713.91, 1724.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2924, 1555.60, -1714.10, 1724.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2173, 1553.15, -1714.74, 1723.50,   0.00, 0.00, 180.00);
	CreateDynamicObject(2196, 1552.29, -1714.37, 1724.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(2894, 1552.49, -1714.77, 1724.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1671, 1552.49, -1713.80, 1723.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(16500, 1552.79, -1712.39, 1722.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(16500, 1547.79, -1712.39, 1722.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(3051, 1550.47, -1712.49, 1725.67,   0.00, 0.00, 316.00);
	CreateDynamicObject(3051, 1550.00, -1712.30, 1725.90,   0.00, 0.00, 315.99);
	CreateDynamicObject(3051, 1554.69, -1712.49, 1725.67,   0.00, 0.00, 315.99);
	CreateDynamicObject(3051, 1554.69, -1712.30, 1725.67,   0.00, 0.00, 316.00);
	CreateDynamicObject(14901, 1548.46, -1685.42, 1723.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(1535, 1549.75, -1683.15, 1722.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1535, 1549.79, -1686.18, 1722.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(2886, 1558.99, -1678.11, 1723.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(2886, 1553.52, -1691.21, 1723.93,   0.00, 0.00, 180.00);
	CreateDynamicObject(8167, 1563.70, -1691.56, 1724.78,   0.00, 0.00, 90.00);
	CreateDynamicObject(8167, 1552.34, -1677.83, 1724.78,   0.00, 0.00, 270.00);
	CreateDynamicObject(11631, 1554.02, -1671.24, 1723.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1554.51, -1672.39, 1722.11,   0.00, 0.00, 0.00);
	CreateDynamicObject(1827, 1563.29, -1696.20, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1827, 1563.29, -1696.20, 1722.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(18001, 1550.61, -1712.29, 1725.12,   0.00, 0.00, 180.00);
	CreateDynamicObject(18001, 1550.61, -1712.29, 1726.53,   0.00, 0.00, 180.00);
	CreateDynamicObject(3089, 1555.41, -1710.71, 1724.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(962, 1557.90, -1678.10, 1723.30,   90.00, 0.00, 0.00);
	CreateDynamicObject(1719, 1553.14, -1714.83, 1724.36,   0.00, 0.00, 270.00);
	CreateDynamicObject(2310, 1552.54, -1716.04, 1724.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(1714, 1552.47, -1657.15, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2357, 1552.44, -1661.66, 1729.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(2112, 1552.44, -1658.83, 1729.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(1715, 1554.10, -1660.27, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1714, 1554.05, -1658.83, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1714, 1550.74, -1658.90, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1715, 1554.10, -1661.28, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1715, 1554.10, -1662.39, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1715, 1554.10, -1663.40, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1715, 1550.67, -1660.20, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1715, 1550.64, -1661.21, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1715, 1550.61, -1662.32, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1715, 1550.58, -1663.33, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1808, 1553.74, -1667.39, 1729.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(3089, 1550.03, -1667.73, 1730.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(2886, 1551.26, -1667.78, 1730.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2886, 1551.21, -1667.70, 1730.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(3089, 1553.89, -1671.17, 1730.43,   0.00, 0.00, 179.99);
	CreateDynamicObject(2886, 1552.67, -1671.14, 1730.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(2886, 1552.62, -1671.22, 1730.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3089, 1562.38, -1667.47, 1730.43,   0.00, 0.00, 270.00);
	CreateDynamicObject(2886, 1562.33, -1668.72, 1730.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(2886, 1562.42, -1668.68, 1730.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(3384, 1570.55, -1660.99, 1730.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(3386, 1568.42, -1659.58, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(3386, 1565.92, -1659.51, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(3389, 1568.41, -1662.43, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(3389, 1565.92, -1662.50, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(2886, 1562.24, -1660.01, 1730.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(2886, 1562.54, -1659.92, 1730.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2167, 1549.90, -1675.51, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(2184, 1553.90, -1674.75, 1729.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1715, 1552.79, -1676.96, 1729.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1663, 1553.47, -1673.56, 1729.57,   0.00, 0.00, 340.00);
	CreateDynamicObject(1663, 1552.20, -1673.54, 1729.57,   0.00, 0.00, 20.00);
	CreateDynamicObject(2190, 1552.39, -1675.09, 1729.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(2297, 1562.82, -1666.79, 1729.10,   0.00, 0.00, 46.00);
	CreateDynamicObject(2603, 1552.26, -1655.03, 1718.36,   0.00, 0.00, 270.00);
	CreateDynamicObject(2603, 1552.26, -1658.99, 1718.36,   0.00, 0.00, 270.00);
	CreateDynamicObject(2603, 1552.26, -1662.92, 1718.36,   0.00, 0.00, 270.00);
	CreateDynamicObject(2603, 1552.26, -1667.06, 1718.36,   0.00, 0.00, 270.00);
	CreateDynamicObject(2700, 1553.66, -1671.61, 1732.13,   0.00, 0.00, 272.00);
	CreateDynamicObject(2817, 1564.48, -1690.33, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2818, 1564.67, -1682.17, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2835, 1564.00, -1686.10, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2841, 1564.23, -1678.01, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1721, 1556.53, -1671.75, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1721, 1556.53, -1672.43, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1721, 1556.53, -1673.11, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1721, 1556.53, -1673.79, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1808, 1555.76, -1674.86, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1721, 1562.08, -1666.96, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1721, 1562.08, -1666.31, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1721, 1562.08, -1665.65, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1721, 1562.08, -1664.99, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(2257, 1571.30, -1664.78, 1730.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2256, 1571.32, -1669.55, 1731.17,   0.00, 0.00, 270.00);
	CreateDynamicObject(2000, 1555.49, -1676.11, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(949, 1549.52, -1673.64, 1730.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 1571.62, -1667.30, 1730.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(1808, 1564.12, -1663.53, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2184, 1567.99, -1666.17, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1714, 1570.15, -1667.26, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(2190, 1568.19, -1667.77, 1729.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(2824, 1568.33, -1667.23, 1729.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(1715, 1566.40, -1666.56, 1729.10,   0.00, 0.00, 75.00);
	CreateDynamicObject(1715, 1566.41, -1667.98, 1729.10,   0.00, 0.00, 110.00);
	CreateDynamicObject(2200, 1565.59, -1663.47, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2886, 1555.43, -1709.46, 1725.24,   0.00, 0.00, 90.00);
	CreateDynamicObject(2886, 1555.38, -1709.47, 1725.24,   0.00, 0.00, 270.00);
	CreateDynamicObject(2632, 1553.70, -1700.74, 1723.55,   0.00, 0.00, 270.00);
	CreateDynamicObject(2630, 1550.84, -1704.52, 1723.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(2627, 1551.93, -1699.96, 1723.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(2627, 1550.61, -1699.96, 1723.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(2628, 1554.08, -1705.56, 1723.50,   0.00, 0.00, 180.00);
	CreateDynamicObject(2630, 1550.84, -1702.99, 1723.50,   0.00, 0.00, 88.00);
	CreateDynamicObject(2629, 1552.46, -1705.63, 1723.50,   0.00, 0.00, 178.00);
	CreateDynamicObject(2964, 1560.84, -1705.23, 1723.50,   0.00, 0.00, 270.00);
	CreateDynamicObject(1724, 1563.44, -1708.23, 1723.50,   0.00, 0.00, 180.00);
	CreateDynamicObject(1723, 1561.59, -1708.21, 1723.50,   0.00, 0.00, 180.00);
	CreateDynamicObject(1724, 1559.09, -1702.59, 1723.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(1723, 1560.89, -1702.58, 1723.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(3003, 1560.85, -1704.82, 1724.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(3004, 1560.46, -1705.94, 1724.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(3004, 1561.17, -1705.95, 1724.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1721, 1554.22, -1690.89, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1721, 1554.92, -1690.89, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1721, 1555.63, -1690.89, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1721, 1556.33, -1690.89, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1721, 1557.04, -1690.89, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1721, 1557.74, -1690.89, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1721, 1553.94, -1678.32, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1553.24, -1678.32, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1552.53, -1678.32, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1551.83, -1678.32, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2222, 1563.29, -1696.24, 1722.79,   0.00, 0.00, 120.00);
	CreateDynamicObject(1720, 1561.68, -1697.39, 1722.10,   0.00, 0.00, 128.00);
	CreateDynamicObject(1720, 1561.55, -1696.08, 1722.10,   0.00, 0.00, 78.00);
	CreateDynamicObject(1720, 1564.97, -1697.38, 1722.10,   0.00, 0.00, 223.99);
	CreateDynamicObject(1720, 1564.95, -1695.56, 1722.10,   0.00, 0.00, 293.99);
	CreateDynamicObject(3089, 1559.21, -1706.66, 1728.92,   0.00, 0.00, 180.00);
	CreateDynamicObject(2886, 1558.01, -1706.68, 1729.19,   0.00, 0.00, 0.00);
	CreateDynamicObject(2886, 1557.95, -1706.63, 1729.19,   0.00, 0.00, 180.00);
	CreateDynamicObject(1502, 1555.56, -1703.39, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1551.10, -1697.89, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1552.03, -1697.89, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1552.96, -1697.89, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1553.89, -1697.89, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1554.82, -1697.89, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1551.10, -1699.12, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1551.10, -1700.35, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1552.03, -1699.12, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1552.96, -1699.12, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1553.89, -1699.12, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1554.82, -1699.12, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1552.01, -1700.35, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1552.91, -1700.35, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1553.85, -1700.35, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1721, 1554.81, -1700.35, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1999, 1558.81, -1710.69, 1727.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(1999, 1559.83, -1709.68, 1727.73,   0.00, 0.00, 180.00);
	CreateDynamicObject(1957, 1558.89, -1710.63, 1728.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(1957, 1559.70, -1709.81, 1728.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(2008, 1558.87, -1714.38, 1727.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2008, 1559.88, -1713.35, 1727.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(1719, 1559.75, -1713.63, 1728.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(1719, 1559.14, -1714.32, 1728.55,   0.00, 0.00, 182.00);
	CreateDynamicObject(1663, 1559.01, -1708.35, 1728.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1663, 1559.01, -1712.20, 1728.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(1663, 1559.89, -1711.88, 1728.17,   0.00, 0.00, 180.00);
	CreateDynamicObject(1663, 1559.89, -1715.51, 1728.17,   0.00, 0.00, 180.00);
	CreateDynamicObject(14532, 1550.55, -1702.15, 1728.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(2198, 1557.56, -1696.47, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1557.24, -1694.89, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1556.38, -1694.89, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(2191, 1559.05, -1698.03, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(2191, 1557.23, -1698.03, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(2172, 1556.53, -1692.31, 1727.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(2198, 1558.88, -1693.92, 1727.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1559.80, -1695.71, 1727.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1558.99, -1695.71, 1727.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(2356, 1557.01, -1693.48, 1727.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(1502, 1560.52, -1696.83, 1727.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(1502, 1560.52, -1699.01, 1727.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(2205, 1556.44, -1701.60, 1727.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(2205, 1557.80, -1700.58, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1671, 1557.09, -1702.86, 1728.16,   0.00, 0.00, 180.00);
	CreateDynamicObject(2190, 1556.82, -1701.32, 1728.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(2201, 1558.17, -1701.40, 1728.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(14532, 1559.97, -1701.01, 1728.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(2854, 1557.40, -1700.79, 1728.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(2164, 1560.38, -1702.00, 1727.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(14782, 1566.08, -1670.94, 1723.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(14782, 1566.23, -1673.43, 1723.12,   0.00, 0.00, 180.00);
	CreateDynamicObject(1502, 1562.15, -1672.91, 1722.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1502, 1562.17, -1676.61, 1722.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1806, 1556.59, -1699.11, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1557.71, -1699.11, 1727.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(1337, 1553.31, -1788.25, 1691.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(2921, 1561.96, -1690.80, 1726.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(2921, 1563.38, -1691.19, 1726.36,   0.00, 0.00, 270.00);
	CreateDynamicObject(2921, 1558.78, -1651.91, 1720.93,   0.00, 0.00, 90.00);
	CreateDynamicObject(2921, 1559.53, -1652.38, 1721.14,   0.00, 0.00, 180.00);
	CreateDynamicObject(2921, 1570.85, -1671.30, 1732.16,   0.00, 0.00, 88.00);
	CreateDynamicObject(2921, 1556.69, -1677.59, 1732.27,   0.00, 0.00, 270.00);
	CreateDynamicObject(2921, 1563.12, -1709.06, 1726.13,   0.00, 0.00, 94.00);
	CreateDynamicObject(1502, 1558.86, -1663.34, 1722.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(2174, 1566.30, -1691.22, 1729.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2171, 1563.73, -1691.15, 1729.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2161, 1565.45, -1687.77, 1729.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(2162, 1563.05, -1687.77, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2165, 1565.22, -1689.38, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(1671, 1563.94, -1689.80, 1729.61,   0.00, 0.00, 90.00);
	CreateDynamicObject(1663, 1566.74, -1689.08, 1729.61,   0.00, 0.00, 300.00);
	CreateDynamicObject(1663, 1566.77, -1690.18, 1729.61,   0.00, 0.00, 240.00);
	CreateDynamicObject(2161, 1565.46, -1687.52, 1729.12,   0.00, 0.00, 180.00);
	CreateDynamicObject(2166, 1563.81, -1687.02, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(2174, 1564.89, -1684.33, 1729.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(14532, 1563.17, -1684.58, 1730.12,   0.00, 0.00, 215.00);
	CreateDynamicObject(2165, 1565.35, -1685.18, 1729.15,   0.00, 0.00, 270.00);
	CreateDynamicObject(1671, 1564.21, -1685.73, 1729.61,   0.00, 0.00, 90.00);
	CreateDynamicObject(1663, 1566.61, -1685.55, 1729.61,   0.00, 0.00, 270.00);
	CreateDynamicObject(2186, 1565.70, -1677.12, 1729.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(2186, 1563.54, -1678.28, 1729.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(2197, 1568.73, -1664.73, 1729.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2007, 1564.68, -1676.23, 1729.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2007, 1565.69, -1679.10, 1729.00,   0.00, 0.00, 180.00);
	CreateDynamicObject(2007, 1563.37, -1679.10, 1729.00,   0.00, 0.00, 180.00);
	CreateDynamicObject(2008, 1552.15, -1668.14, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2008, 1555.20, -1668.14, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2008, 1552.97, -1664.47, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2008, 1556.26, -1664.47, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1556.28, -1669.21, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1553.14, -1669.21, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1555.34, -1663.33, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1552.00, -1663.32, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2310, 1555.25, -1666.84, 1722.71,   0.00, 0.00, 90.00);
	CreateDynamicObject(2310, 1552.11, -1666.84, 1722.71,   0.00, 0.00, 90.00);
	CreateDynamicObject(2310, 1552.76, -1665.69, 1722.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(2310, 1555.99, -1665.69, 1722.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(11631, 1552.78, -1676.85, 1723.36,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1552.12, -1675.86, 1722.11,   0.00, 0.00, 178.00);
	CreateDynamicObject(11631, 1557.91, -1672.42, 1723.36,   0.00, 0.00, 270.00);
	CreateDynamicObject(1806, 1556.81, -1673.09, 1722.11,   0.00, 0.00, 270.00);
	CreateDynamicObject(931, 1560.21, -1710.06, 1724.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(931, 1562.64, -1712.63, 1724.51,   0.00, 0.00, 270.00);
	CreateDynamicObject(1271, 1562.62, -1710.03, 1723.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(3089, 1562.24, -1714.05, 1724.83,   0.00, 0.00, 180.00);
	CreateDynamicObject(2886, 1560.98, -1714.12, 1725.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(2886, 1560.95, -1713.99, 1725.24,   0.00, 0.00, 180.00);
	CreateDynamicObject(1502, 1565.74, -1714.00, 1723.50,   0.00, 0.00, 180.00);
	CreateDynamicObject(2191, 1558.15, -1656.90, 1722.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(2191, 1557.19, -1661.63, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2191, 1550.59, -1657.45, 1722.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(2191, 1552.56, -1652.45, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2198, 1552.58, -1659.57, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1553.57, -1658.10, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1552.64, -1658.06, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1553.21, -1661.07, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2198, 1554.92, -1655.05, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1554.72, -1656.46, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1553.91, -1656.47, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1554.22, -1653.47, 1722.10,   0.00, 0.00, 180.00);
	CreateDynamicObject(2008, 1564.52, -1663.25, 1717.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(2008, 1561.33, -1663.25, 1717.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(1811, 1564.86, -1661.63, 1718.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(1811, 1561.71, -1661.63, 1718.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(1806, 1565.67, -1664.53, 1717.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(1806, 1562.54, -1664.53, 1717.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(2921, 1559.92, -1665.72, 1720.68,   0.00, 0.00, 258.00);
	CreateDynamicObject(2891, 1560.73, -1710.39, 1724.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(2901, 1562.39, -1712.76, 1723.90,   0.00, 0.00, 270.00);
	CreateDynamicObject(2915, 1555.06, -1701.00, 1723.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(1550, 1560.10, -1709.87, 1725.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(2035, 1559.83, -1710.27, 1724.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(2061, 1562.54, -1712.60, 1724.93,   0.00, 0.00, 268.00);
	CreateDynamicObject(1210, 1560.26, -1710.09, 1723.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(2201, 1553.80, -1675.04, 1729.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(2201, 1568.22, -1666.09, 1729.88,   0.00, 0.00, 70.00);
	CreateDynamicObject(14744, 1552.19, -1717.91, 1725.07,   0.00, 0.00, 0.00);
	CreateDynamicObject(14744, 1552.19, -1717.81, 1725.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(14744, 1554.28, -1714.97, 1725.09,   0.00, 0.00, 90.00);
	CreateDynamicObject(2602, 1552.75, -1664.32, 1718.41,   0.00, 0.00, 316.00);
	CreateDynamicObject(2602, 1552.80, -1660.48, 1718.41,   0.00, 0.00, 316.00);
	CreateDynamicObject(2602, 1552.54, -1656.51, 1718.41,   0.00, 0.00, 316.00);
	CreateDynamicObject(2602, 1552.79, -1652.37, 1718.41,   0.00, 0.00, 316.00);
	CreateDynamicObject(1649, 1562.40, -1680.30, 1725.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(1649, 1562.40, -1684.70, 1725.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(1649, 1562.40, -1689.00, 1725.00,   0.00, 0.00, 270.00);
	CreateDynamicObject(1649, 1562.40, -1689.00, 1725.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(1649, 1562.40, -1684.70, 1725.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(1649, 1562.40, -1680.30, 1725.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(1649, 1565.20, -1671.30, 1730.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1649, 1569.50, -1671.30, 1730.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1649, 1565.10, -1671.30, 1731.80,   0.00, 0.00, 180.00);
	CreateDynamicObject(1649, 1569.50, -1671.30, 1731.80,   0.00, 0.00, 179.99);
	CreateDynamicObject(1649, 1556.20, -1661.90, 1731.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(1649, 1556.20, -1657.50, 1731.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(1649, 1555.90, -1661.70, 1731.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(1649, 1555.90, -1657.30, 1731.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(2198, 1563.40, -1685.30, 1722.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(2198, 1563.40, -1689.40, 1722.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1671, 1564.70, -1684.50, 1722.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(1671, 1564.70, -1688.50, 1722.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(3089, 1560.00, -1677.80, 1723.40,   0.00, 0.00, 180.00);
	lspddoor1= CreateDynamicObject(1495, 1559.95, -1677.83, 1722.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(3089, 1552.50, -1691.50, 1723.40,   0.00, 0.00, 0.00);
	lspddoor2= CreateDynamicObject(1495, 1552.50, -1691.50, 1722.10,   0.00, 0.00, 180.00);
	//Wohnwageninterior
 	CreateObject(14590, 2403.928955, -1522.458496, 902.710449, 0.0000, 0.0000, 0.0000,-1);
    CreateDynamicObject(2395, 2404.103271, -1502.100464, 897.404907, 0.0000, 0.0000, 0.0000,-1);
    CreateDynamicObject(2395, 2406.413818, -1502.107788, 897.395752, 0.0000, 0.0000, 0.0000,-1);
    CreateDynamicObject(2395, 2404.086670, -1502.107788, 899.998169, 0.0000, 0.0000, 0.0000,-1);
    CreateDynamicObject(2395, 2407.817627, -1502.090088, 899.763672, 0.0000, 0.0000, 0.0000,-1);
    CreateDynamicObject(2395, 2403.669678, -1505.095337, 897.403809, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2395, 2403.662598, -1505.091553, 900.102295, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2395, 2403.692139, -1508.820557, 897.397949, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2395, 2403.686768, -1508.811646, 900.142517, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2395, 2403.681396, -1512.540527, 897.397949, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2395, 2403.680664, -1512.547729, 899.800293, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2395, 2406.858887, -1512.969116, 897.397949, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(2395, 2409.426758, -1512.954224, 897.397949, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(2395, 2406.818359, -1512.972778, 900.200684, 270.6186, 0.0000, 180.0000,-1);
    CreateDynamicObject(2395, 2409.233887, -1512.986938, 900.192261, 270.6186, 0.0000, 180.0000,-1);
    CreateDynamicObject(2395, 2403.661377, -1516.099243, 899.793823, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2395, 2406.802490, -1515.186646, 900.085510, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(2395, 2410.453857, -1515.182251, 900.087158, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(2395, 2409.492432, -1513.473877, 900.048706, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2395, 2409.534668, -1509.854004, 897.397949, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2395, 2409.529541, -1509.842896, 899.725220, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2395, 2409.532959, -1506.127686, 897.401123, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2395, 2409.527344, -1502.395874, 897.401184, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2395, 2409.543213, -1506.182373, 899.750244, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2395, 2409.541504, -1502.506592, 899.756714, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(1498, 2403.598633, -1511.002197, 897.391785, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(14806, 2406.792480, -1502.620728, 898.446045, 0.0000, 0.0000, 0.0000,-1);
    CreateDynamicObject(14866, 2408.280273, -1514.168091, 900.716431, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(1828, 2406.489990, -1510.053101, 897.395691, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2013, 2409.145020, -1505.728516, 897.255493, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2017, 2409.129883, -1507.727417, 897.247803, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(1829, 2408.765625, -1504.840942, 897.871399, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2002, 2409.028809, -1509.443237, 897.393555, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2147, 2408.851318, -1508.713501, 897.392517, 0.0000, 0.0000, 270.0000,-1);
    CreateDynamicObject(2517, 2409.088867, -1511.591797, 897.390137, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(2518, 2408.308594, -1512.499146, 897.536743, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(2525, 2407.055176, -1512.467163, 897.397949, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(2842, 2408.100830, -1512.016479, 897.380493, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(2292, 2404.120361, -1504.618164, 897.403442, 0.0000, 0.0000, 360.0000,-1);
    CreateDynamicObject(2292, 2404.128662, -1505.495361, 897.403503, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2291, 2407.270752, -1505.468506, 897.404480, 0.0000, 0.0000, 202.5000,-1);
    CreateDynamicObject(2204, 2403.647949, -1508.846802, 897.396973, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2200, 2403.758057, -1510.439575, 897.397156, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(2163, 2403.592285, -1514.585083, 900.138000, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(14890, 2407.861084, -1513.970947, 900.837280, 0.0000, 0.0000, 0.0000,-1);
    CreateDynamicObject(14666, 2405.575928, -1515.255859, 901.294250, 0.0000, 0.0000, 90.0000,-1);
    CreateDynamicObject(18084, 2405.357178, -1503.036255, 900.217224, 0.0000, 0.0000, 180.0000,-1);
    CreateDynamicObject(18084, 2407.910156, -1501.287842, 900.211731, 0.0000, 0.0000, 0.0000,-1);
    CreateDynamicObject(18084, 2402.776367, -1505.572754, 900.253784, 0.0000, 0.0000, 90.0000,-1);
	//Werbetafeln
	CreateDynamicObject(1259, -1537.04, 991.14, 21.41,   0.02, 0.00, 67.34);
	CreateDynamicObject(1259, -2259.43, 2269.87, 14.32,   0.00, 0.00, 296.41);
	CreateDynamicObject(1259, -2576.28, 2228.06, 18.54,   0.00, 0.00, 321.62);
	//Bayside Newstime Helipad
	CreateDynamicObject(3934, -1452.24, 1010.83, 6.18,   0.00, 0.00, 25.37);
	CreateDynamicObject(1215, -1454.31, 1006.01, 6.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1457.22, 1012.11, 6.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1447.30, 1009.19, 6.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -1450.25, 1015.51, 6.19,   0.00, 0.00, 0.00);
	//Autoscooter
	CreateObject(7020,218.84220900,-1972.77661100,3.43278800,0.00000000,0.00000000,0.00000000); //
	CreateObject(7020,240.28042600,-1972.49011200,-3.37749600,0.00000000,179.51820000,360.00000000); //
	CreateDynamicObject(3886,226.16247600,-1892.08813500,-1.13736800,354.84340000,0.00000000,180.00000000); //
	CreateDynamicObject(3886,233.81115700,-1891.73693800,-1.07931000,355.70280000,0.00000000,180.00000000); //
	CreateDynamicObject(982,202.39447000,-1951.57519500,7.09013200,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(982,202.35255400,-1959.15600600,7.09013200,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(982,256.77008100,-1959.13122600,7.09013200,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(982,256.76977500,-1951.53076200,7.09013200,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(982,244.02963300,-1938.82751500,7.09013200,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(982,215.19616700,-1938.77331500,7.06513200,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(983,229.61296100,-1938.76220700,7.06903600,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(982,243.99821500,-1971.95056200,7.09013200,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(982,215.18421900,-1971.95385700,7.09013200,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(983,229.59339900,-1971.95117200,7.09013200,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(13667,230.09783900,-1923.58056600,21.90769400,0.00000000,1.71890000,101.25000000); //
	CreateDynamicObject(14387,233.20478800,-1937.30346700,7.04085400,0.00000000,348.82730000,90.00000000); //
	CreateDynamicObject(14387,228.59747300,-1937.29272500,7.04055900,0.00000000,348.82730000,90.00000000); //
	CreateDynamicObject(3877,202.91151400,-1939.47741700,8.06439500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3877,220.98053000,-1939.41259800,8.06439500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3877,240.23658800,-1939.65490700,8.06439500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3877,256.27356000,-1939.15026900,8.06439500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3877,256.39590500,-1971.59826700,8.06439500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3877,202.67485000,-1971.70324700,8.06439500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3864,237.40333600,-1937.01831100,12.50785200,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(3864,223.72070300,-1936.68481400,12.50755400,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(3472,229.85655200,-1899.54931600,-3.37810600,0.00000000,0.00000000,269.99990000); //
	CreateDynamicObject(974,271.68280000,-1918.96398900,3.61075600,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,271.65509000,-1918.93762200,-1.86622400,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,271.64321900,-1918.93579100,-1.87326500,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,265.10620100,-1919.00769000,3.63205100,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,265.12161300,-1918.98474100,-1.83530700,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,258.52819800,-1919.03015100,3.64015200,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,258.53463700,-1919.02746600,-1.83933400,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,251.86293000,-1919.03527800,3.63221700,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,251.87387100,-1919.03772000,-1.82183900,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,245.25618000,-1919.04553200,3.60768800,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,245.25062600,-1919.06762700,-1.78320300,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,238.75245700,-1919.02832000,3.60494200,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,238.73127700,-1919.02136200,-1.84320600,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(974,240.58456400,-1922.35681200,3.76104500,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(974,240.59754900,-1927.58215300,3.68080300,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(974,240.61029100,-1934.25024400,3.70223200,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(974,240.61810300,-1940.93042000,3.61893800,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(974,240.58807400,-1922.35388200,-1.70365500,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(974,240.59921300,-1928.98584000,-1.73735000,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(974,240.61813400,-1935.56518600,-1.76941200,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(974,274.96481300,-1915.56359900,0.72713400,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(974,274.96356200,-1908.88476600,0.71604400,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(974,274.98269700,-1912.22326700,-4.70202100,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(974,274.98199500,-1915.58618200,-4.67499600,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(974,199.26773100,-1915.69104000,0.74250700,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(974,199.28707900,-1915.69360400,-4.71740200,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(974,202.51298500,-1919.03015100,3.61250700,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(974,202.48405500,-1919.05285600,-1.80206700,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(974,209.18927000,-1919.05273400,-1.81594000,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(974,209.21312000,-1919.06994600,3.63279300,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(974,215.86279300,-1919.02954100,-1.82574900,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(974,215.86306800,-1919.02172900,3.59745300,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(974,222.37377900,-1919.08569300,-1.77577700,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(974,222.42570500,-1919.02783200,3.63312000,0.00000000,0.00000000,360.00000000); //
	CreateDynamicObject(974,220.66767900,-1922.40869100,-1.82151700,0.00000000,0.00000000,269.99990000); //
	CreateDynamicObject(974,220.67555200,-1922.39233400,3.67225700,0.00000000,0.00000000,269.99990000); //
	CreateDynamicObject(974,220.67147800,-1929.06848100,-1.80870300,0.00000000,0.00000000,269.99990000); //
	CreateDynamicObject(974,220.67694100,-1929.08081100,3.64715200,0.00000000,0.00000000,269.99990000); //
	CreateDynamicObject(974,220.65463300,-1935.74035600,3.62429200,0.00000000,0.00000000,269.99990000); //
	CreateDynamicObject(974,220.68103000,-1935.68811000,-1.86483000,0.00000000,0.00000000,269.99990000); //
	CreateDynamicObject(967,230.80874600,-1922.97326700,6.41082600,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3010,231.02179000,-1923.28857400,6.90115700,30.08030000,0.00000000,334.84430000); //
	CreateDynamicObject(3007,231.02299500,-1923.18420400,7.03145300,317.02820000,358.28110000,9.29920000); //
	CreateDynamicObject(3008,230.83313000,-1922.96704100,7.15571900,312.73100000,69.61430000,357.42170000); //
	CreateDynamicObject(3009,231.01513700,-1923.27172900,7.07912900,310.15270000,58.44160000,101.01800000); //
	CreateDynamicObject(1663,230.83013900,-1923.14428700,6.87104000,0.00000000,0.00000000,168.75000000); //
	CreateDynamicObject(3010,230.80177300,-1923.21240200,6.89820200,30.08030000,0.00000000,348.75000000); //
	CreateDynamicObject(3012,231.10093700,-1922.79150400,7.12433000,343.67070000,338.51410000,15.46990000); //
	CreateObject(8373,237.10937500,-1905.49182100,-24.38210900,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(1270,230.52127100,-1922.81469700,6.77905000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1471,230.78833000,-1921.86682100,6.04711800,91.95970000,0.00000000,0.00000000); //
	CreateDynamicObject(1252,231.43008400,-1923.24951200,7.35510800,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(3522,259.04330400,-1913.74585000,3.44630800,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(3522,211.61561600,-1913.79504400,3.44630800,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(744,221.86721800,-1892.43176300,-0.29151200,5.15660000,0.00000000,0.00000000); //
	CreateDynamicObject(744,239.81631500,-1892.00427200,-0.11383300,6.87550000,0.00000000,56.25000000); //
	CreateDynamicObject(3660,264.95410200,-1915.03076200,9.06196900,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(3660,251.04373200,-1915.60290500,9.06196900,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(3660,210.20404100,-1916.01916500,9.06197100,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(3802,226.24189800,-1900.76147500,3.85914100,0.00000000,0.00000000,92.65560000); //
	CreateDynamicObject(3802,224.91954000,-1900.76123000,3.77273100,0.00000000,0.00000000,92.65560000); //
	CreateDynamicObject(3802,233.60340900,-1900.76916500,3.77477500,0.00000000,0.00000000,92.65560000); //
	CreateDynamicObject(3802,234.87811300,-1900.76696800,3.74767200,0.00000000,0.00000000,92.65560000); //
	CreateDynamicObject(15038,229.48132300,-1922.74231000,7.02414100,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(15038,232.22473100,-1922.60986300,7.02414100,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(718,272.46582000,-1912.89672900,3.31776500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(718,272.14926100,-1908.43261700,3.31672600,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(718,272.23849500,-1903.71350100,3.31672800,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(718,272.23080400,-1899.25354000,3.31672800,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(718,202.85685700,-1899.35937500,3.31776500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(718,202.91598500,-1903.80566400,3.31776500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(718,202.82403600,-1908.23620600,3.31776500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(718,202.83277900,-1912.54516600,3.31776500,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(717,260.92010500,-1899.13391100,3.61500000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(717,248.30880700,-1898.82336400,3.61396200,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(717,209.04785200,-1898.91259800,3.61500000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(717,217.79325900,-1899.15625000,3.61500000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1210,231.40745500,-1922.81237800,6.55539100,0.00000000,0.00000000,90.00000000); //
	CreateDynamicObject(982,230.63723800,-1924.93237300,18.04051400,93.67850000,0.00000000,272.33750000); //
	CreateDynamicObject(2222,230.27725200,-1923.22876000,6.45178600,0.00000000,0.00000000,33.75000000); //
	CreateDynamicObject(2044,231.50741600,-1923.26855500,7.70647900,1.71890000,126.33730000,0.00000000); //
	CreateDynamicObject(3864,224.55059800,-1973.55603000,12.49568000,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(3864,237.28302000,-1973.48596200,12.29485700,0.00000000,0.00000000,270.00000000); //
	CreateDynamicObject(1412,237.44853200,-1973.89172400,6.29578400,89.38140000,359.14060000,0.00000000); //
	CreateDynamicObject(1412,224.40692100,-1973.93542500,6.31716800,89.38140000,359.14060000,0.00000000); //
	CreateDynamicObject(3864,256.83123800,-1938.77063000,11.92999100,0.00000000,0.00000000,33.74990000); //
	CreateDynamicObject(3864,202.47543300,-1939.19604500,11.92402300,0.00000000,0.00000000,135.00000000); //
	CreateDynamicObject(3864,202.30592300,-1972.14953600,11.90721900,0.00000000,0.00000000,236.25000000); //
	CreateDynamicObject(3864,256.77227800,-1971.97216800,11.89568900,0.00000000,0.00000000,315.00000000); //
	//Farmer Kühe
	CreateDynamicObject(16442,1.10000002,-25.10000038,3.90000010,2.00000000,0.00000000,60.00000000); //object(desn2_stripsigs1) (1)
	CreateDynamicObject(16442,-14.69999981,-48.70000076,3.90000010,1.99951172,0.00000000,59.99633789); //object(desn2_stripsigs1) (2)
	CreateDynamicObject(16442,-14.30000019,-70.00000000,3.90000010,1.99951172,0.00000000,59.99633789); //object(desn2_stripsigs1) (3)
	CreateDynamicObject(16442,-27.39999962,-83.40000153,3.90000010,1.99951172,0.00000000,59.99633789); //object(desn2_stripsigs1) (4)
	CreateDynamicObject(16442,-17.20000076,-95.90000153,3.90000010,1.99951172,0.00000000,59.99633789); //object(desn2_stripsigs1) (5)
	CreateDynamicObject(16442,-2.70000005,-80.40000153,3.90000010,1.99951172,0.00000000,59.99633789); //object(desn2_stripsigs1) (6)
	CreateDynamicObject(16442,15.60000038,-60.70000076,3.90000010,1.99951172,0.00000000,59.99084473); //object(desn2_stripsigs1) (7)
	CreateDynamicObject(16442,3.50000000,-50.09999847,3.90000010,1.99951172,0.00000000,59.99633789); //object(desn2_stripsigs1) (8)
	CreateDynamicObject(16442,14.19999981,-77.59999847,3.20000005,1.99951172,0.00000000,59.99084473); //object(desn2_stripsigs1) (9)
	CreateDynamicObject(16442,2.09999990,-95.50000000,3.20000005,1.99951172,0.00000000,59.99084473); //object(desn2_stripsigs1) (10)
	CreateDynamicObject(16442,19.20000076,-91.90000153,2.29999995,1.99951172,0.00000000,59.99084473); //object(desn2_stripsigs1) (11)
	CreateDynamicObject(16442,36.79999924,-89.19999695,1.39999998,1.99951172,0.00000000,59.99084473); //object(desn2_stripsigs1) (13)
	//Paintballarena 2
	CreateObject(18353,6253.05175781,-2170.83496094,12.94783306,0.00000000,0.00000000,0.00000000,1); //object(cs_landbit_67) (1)
	CreateDynamicObject(16262,6292.29052734,-2125.01635742,-5.00000000,0.00000000,0.00000000,0.00000000,1); //object(s_bit_21) (1)
	CreateDynamicObject(16262,6258.11328125,-2211.32983398,6.80859756,358.00000000,0.00000000,295.00000000,1); //object(s_bit_21) (2)
	CreateDynamicObject(16262,6334.06445312,-2125.13916016,48.51456451,0.00000000,0.00000000,338.00000000,1); //object(s_bit_21) (3)
	CreateDynamicObject(16262,6263.16503906,-2092.31591797,29.00000000,0.00000000,0.00000000,48.00000000,1); //object(s_bit_21) (4)
	CreateDynamicObject(16262,6190.80908203,-2108.08862305,26.00000000,0.00000000,0.00000000,106.00000000,1); //object(s_bit_21) (5)
	CreateDynamicObject(16262,6174.53369141,-2196.85424805,31.78105164,0.00000000,0.00000000,210.00000000,1); //object(s_bit_21) (6)
	CreateDynamicObject(16262,6179.69824219,-2151.37622070,25.17769623,0.00000000,358.00000000,179.99816895,1); //object(s_bit_21) (7)
	CreateDynamicObject(16262,6306.73876953,-2209.17211914,46.20877075,348.00000000,0.00000000,303.00000000,1); //object(s_bit_21) (8)
	CreateDynamicObject(16262,6256.84960938,-2257.44555664,61.28624725,0.00000000,0.00000000,317.00000000,1); //object(s_bit_21) (9)
	CreateDynamicObject(16262,6206.61865234,-2260.59765625,50.71541595,352.01962280,355.96081543,287.43829346,1); //object(s_bit_21) (10)
	CreateDynamicObject(16261,6206.50195312,-2180.07983398,32.33055496,180.00000000,0.00000000,0.00000000,1); //object(cen_bit_24) (1)
	CreateDynamicObject(16261,6234.22753906,-2104.10986328,32.33055496,179.99450684,0.00000000,0.00000000,1); //object(cen_bit_24) (2)
	CreateDynamicObject(16259,6267.32128906,-2276.46386719,7.77769995,0.00000000,0.00000000,24.00000000,1); //object(cen_bit_22) (1)
	CreateDynamicObject(16261,6215.25341797,-2368.25878906,25.82709885,0.00000000,0.00000000,126.00000000,1); //object(cen_bit_24) (3)
	CreateDynamicObject(16262,6315.68505859,-2240.04052734,15.93751526,1.79751587,206.01370239,155.12304688,1); //object(s_bit_21) (11)
	CreateDynamicObject(16262,6256.28466797,-2206.84252930,11.50933075,7.87469482,190.09326172,304.94970703,1); //object(s_bit_21) (12)
	CreateDynamicObject(16262,6251.77783203,-2238.50463867,19.93886948,7.97415161,175.95568848,76.90481567,1); //object(s_bit_21) (13)
	CreateDynamicObject(16262,6327.12988281,-2223.59985352,30.10340500,352.07525635,188.07464600,197.11614990,1); //object(s_bit_21) (14)
	CreateDynamicObject(16113,6314.19775391,-2182.57788086,16.10000038,21.82418823,325.19177246,98.49151611,1); //object(des_rockgp2_03) (1)
	CreateDynamicObject(1305,6317.22509766,-2187.79541016,11.39373970,0.00000000,0.00000000,0.00000000,1); //object(dyn_quarryrock01) (1)
	CreateDynamicObject(1305,6317.45361328,-2187.58789062,12.56177139,88.00000000,0.00000000,52.00000000,1); //object(dyn_quarryrock01) (2)
	CreateDynamicObject(1305,6318.78466797,-2187.11499023,12.79529953,25.84701538,87.08148193,324.66815186,1); //object(dyn_quarryrock01) (3)
	CreateDynamicObject(1305,6316.41455078,-2187.86547852,9.63143730,0.00000000,0.00000000,0.00000000,1); //object(dyn_quarryrock01) (4)
	CreateDynamicObject(1305,6317.29833984,-2187.32592773,7.24385071,0.00000000,0.00000000,0.00000000,1); //object(dyn_quarryrock01) (5)
	CreateDynamicObject(1305,6322.88232422,-2184.92089844,9.01315117,354.03308105,90.63067627,328.03015137,1); //object(dyn_quarryrock01) (6)
	CreateDynamicObject(1305,6323.08154297,-2185.09326172,10.95962143,354.02893066,90.62622070,328.02978516,1); //object(dyn_quarryrock01) (7)
	CreateDynamicObject(1305,6322.82080078,-2186.52416992,12.87696457,25.84533691,87.07763672,324.66796875,1); //object(dyn_quarryrock01) (8)
	CreateDynamicObject(1305,6319.83496094,-2186.67041016,12.94744492,82.78540039,33.75360107,8.44549561,1); //object(dyn_quarryrock01) (9)
	CreateDynamicObject(1305,6321.51074219,-2186.07641602,13.00000000,71.05169678,72.13793945,330.79797363,1); //object(dyn_quarryrock01) (10)
	CreateDynamicObject(11445,6247.02685547,-2202.14550781,23.21329880,0.00000000,0.00000000,28.00000000,1); //object(des_pueblo06) (1)
	CreateDynamicObject(11440,6265.36132812,-2132.55786133,1.43533230,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo1) (1)
	CreateDynamicObject(11440,6270.68994141,-2130.27636719,4.28780556,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo1) (2)
	CreateDynamicObject(11440,6228.85302734,-2172.55737305,1.64122677,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo1) (3)
	CreateDynamicObject(11427,6219.03320312,-2190.94970703,10.29185486,0.00000000,0.00000000,258.00000000,1); //object(des_adobech) (1)
	CreateDynamicObject(11428,6227.60058594,-2123.87768555,7.09074020,0.00000000,0.00000000,90.00000000,1); //object(des_indruin02) (1)
	CreateDynamicObject(11442,6272.21777344,-2188.76391602,25.51807976,352.00000000,0.00000000,180.00000000,1); //object(des_pueblo3) (1)
	CreateDynamicObject(11444,6217.34326172,-2150.04492188,1.68220901,0.00000000,0.00000000,120.00000000,1); //object(des_pueblo2) (1)
	CreateDynamicObject(8675,6278.12500000,-2166.23242188,10.42561436,0.00000000,0.00000000,0.00000000,1); //object(wddngchpl02_lvs) (1)
	CreateDynamicObject(6962,6245.57519531,-2151.34033203,8.43836308,0.00000000,0.00000000,0.00000000,1); //object(vgsnwedchap1) (1)
	CreateDynamicObject(3243,6281.59423828,-2132.74438477,11.14154053,0.00000000,0.00000000,142.00000000,1); //object(tepee_room_) (1)
	CreateDynamicObject(3243,6290.09277344,-2143.56835938,10.87574482,0.00000000,0.00000000,141.99829102,1); //object(tepee_room_) (2)
	CreateDynamicObject(11458,6298.74560547,-2163.52709961,9.93452263,0.00000000,0.00000000,278.00000000,1); //object(des_pueblo10) (1)
	CreateDynamicObject(11442,6247.95117188,-2179.49658203,1.68220901,0.00000000,0.00000000,198.00000000,1); //object(des_pueblo3) (2)
	CreateDynamicObject(11440,6226.68310547,-2217.75390625,3.93372726,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo1) (4)
	CreateDynamicObject(11440,6221.77880859,-2214.96875000,5.08216476,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo1) (5)
	CreateDynamicObject(11444,6226.67578125,-2208.50122070,10.01333809,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo2) (2)
	CreateDynamicObject(11444,6230.76123047,-2208.62524414,9.62271309,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo2) (3)
	CreateDynamicObject(11444,6228.70703125,-2208.63891602,12.63580894,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo2) (4)
	CreateDynamicObject(11444,6233.32324219,-2208.57861328,12.72110748,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo2) (5)
	CreateDynamicObject(11444,6232.89062500,-2208.66015625,15.51154327,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo2) (6)
	CreateDynamicObject(11444,6235.61621094,-2208.70727539,17.95840263,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo2) (7)
	CreateDynamicObject(11444,6238.90332031,-2136.99731445,1.68220711,0.00000000,0.00000000,0.00000000,1); //object(des_pueblo2) (8)
	CreateDynamicObject(11426,6212.23974609,-2175.00146484,2.37572861,0.00000000,0.00000000,0.00000000,1); //object(des_adobe03) (1)
	CreateDynamicObject(16641,6284.28466797,-2237.14892578,7.34869194,0.00000000,0.00000000,0.00000000,1); //object(des_a51warheads) (1)
	CreateDynamicObject(3794,6276.18212891,-2230.12670898,6.20509577,0.00000000,0.00000000,75.00000000,1); //object(missile_07_sfxr) (1)
	CreateDynamicObject(3393,6280.00000000,-2225.00000000,5.59416294,0.00000000,0.00000000,135.00000000,1); //object(a51_sdsk_ncol4_) (2)
	CreateDynamicObject(16641,6324.36669922,-2201.61889648,6.94926691,10.00000000,0.00000000,0.00000000,1); //object(des_a51warheads) (2)
	CreateDynamicObject(17000,6220.38134766,-2137.71142578,1.64897251,0.00000000,0.00000000,0.00000000,1); //object(wt6suppsxc) (1)
	CreateDynamicObject(653,6262.07373047,-2192.06958008,24.84682655,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti03) (1)
	CreateDynamicObject(653,6280.12500000,-2142.90209961,10.30389595,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti03) (2)
	CreateDynamicObject(653,6248.85546875,-2132.87890625,1.68939781,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti03) (3)
	CreateDynamicObject(653,6224.44189453,-2155.27392578,1.68220806,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti03) (4)
	CreateDynamicObject(653,6281.41943359,-2156.90063477,1.68727207,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti03) (5)
	CreateDynamicObject(651,6235.74853516,-2185.58105469,1.68727207,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti1) (1)
	CreateDynamicObject(651,6209.87744141,-2183.23876953,4.05862522,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti1) (2)
	CreateDynamicObject(651,6298.22705078,-2153.31958008,10.49020481,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti1) (3)
	CreateDynamicObject(651,6288.26953125,-2130.65136719,11.57052994,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti1) (4)
	CreateDynamicObject(651,6240.06982422,-2204.03979492,22.62961197,0.00000000,0.00000000,0.00000000,1); //object(sjmcacti1) (5)
	CreateDynamicObject(701,6248.92187500,-2137.41674805,2.06041074,0.00000000,0.00000000,0.00000000,1); //object(sm_tumblewd48p) (1)
	CreateDynamicObject(701,6247.00927734,-2179.41845703,2.26353574,0.00000000,0.00000000,0.00000000,1); //object(sm_tumblewd48p) (2)
	CreateDynamicObject(701,6220.09228516,-2174.60449219,2.26353574,0.00000000,0.00000000,0.00000000,1); //object(sm_tumblewd48p) (3)
	CreateDynamicObject(754,6223.71093750,-2169.38818359,1.68220806,0.00000000,0.00000000,0.00000000,1); //object(sm_des_cactiigrp) (1)
	CreateDynamicObject(754,6268.81835938,-2143.59204102,1.68220806,0.00000000,0.00000000,0.00000000,1); //object(sm_des_cactiigrp) (2)
	CreateDynamicObject(754,6257.40820312,-2178.13452148,1.53147030,0.00000000,0.00000000,0.00000000,1); //object(sm_des_cactiigrp) (3)
	CreateDynamicObject(760,6226.75927734,-2192.67724609,2.68754101,0.00000000,0.00000000,0.00000000,1); //object(sm_bush_small_1) (1)
	CreateDynamicObject(760,6236.87304688,-2163.98120117,1.55002213,0.00000000,0.00000000,0.00000000,1); //object(sm_bush_small_1) (2)
	CreateDynamicObject(760,6231.25048828,-2113.28222656,1.68220806,0.00000000,0.00000000,0.00000000,1); //object(sm_bush_small_1) (3)
	CreateDynamicObject(760,6280.56591797,-2125.71704102,11.90862656,0.00000000,0.00000000,0.00000000,1); //object(sm_bush_small_1) (4)
	CreateDynamicObject(800,6226.80761719,-2201.48168945,7.52573204,0.00000000,0.00000000,0.00000000,1); //object(genveg_bush07) (1)
	//Paintballarena 1
	CreateDynamicObject(969, 1486.632446, -1579.459106, 66.377815, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(969, 1495.508423, -1579.430664, 66.377815, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(969, 1500.863159, -1579.459351, 66.377815, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(969, 1509.540771, -1579.344360, 66.377815, 0.0000, 0.0000, 90.0000,1);
	CreateDynamicObject(969, 1509.548828, -1570.553955, 66.377815, 0.0000, 0.0000, 90.0000,1);
	CreateDynamicObject(969, 1509.530029, -1563.970459, 66.377815, 0.0000, 0.0000, 90.0000,1);
	CreateDynamicObject(969, 1518.147461, -1554.850220, 66.377815, 0.0000, 0.0000, 180.0000,1);
	CreateDynamicObject(969, 1526.923584, -1554.863647, 66.377815, 0.0000, 0.0000, 180.0000,1);
	CreateDynamicObject(969, 1527.538452, -1563.517090, 66.377815, 0.0000, 0.0000, 90.0000,1);
	CreateDynamicObject(969, 1527.526489, -1572.300293, 66.377815, 0.0000, 0.0000, 90.0000,1);
	CreateDynamicObject(969, 1527.507813, -1579.567749, 66.363701, 0.0000, 0.0000, 90.0000,1);
	CreateDynamicObject(969, 1536.191040, -1579.597046, 66.377815, 0.0000, 0.0000, 180.0000,1);
	CreateDynamicObject(969, 1545.056763, -1579.614502, 66.377815, 0.0000, 0.0000, 180.0000,1);
	CreateDynamicObject(969, 1549.922363, -1579.643677, 66.377815, 0.0000, 0.0000, 180.0000,1);
	CreateDynamicObject(969, 1550.085693, -1570.879150, 66.377815, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(969, 1550.073120, -1562.102905, 66.377815, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(969, 1550.058228, -1553.317261, 66.377815, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(969, 1550.073730, -1544.568604, 66.377815, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(969, 1550.085083, -1535.711060, 66.377815, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(969, 1550.059937, -1526.804565, 66.377815, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(969, 1550.049683, -1518.026001, 66.377815, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(969, 1550.061890, -1513.635742, 66.377815, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(969, 1541.370239, -1513.579346, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1532.563721, -1513.568481, 66.374115, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1523.745239, -1513.553833, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1514.935303, -1513.565308, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1506.111816, -1513.548096, 66.374062, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1497.276123, -1513.553101, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1488.472290, -1513.564453, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1479.675171, -1513.554077, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1470.880371, -1513.538818, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1462.078125, -1513.536011, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1456.016846, -1513.526245, 66.374069, 0.0000, 0.0000, 0.0001,1);
	CreateDynamicObject(969, 1453.482544, -1521.995850, 66.374069, 0.0000, 0.0000, 74.4529,1);
	CreateDynamicObject(969, 1451.122192, -1530.520020, 66.374062, 0.0000, 0.0000, 74.4529,1);
	CreateDynamicObject(969, 1448.872437, -1539.098877, 66.374069, 0.0000, 0.0000, 75.3123,1);
	CreateDynamicObject(969, 1446.599243, -1547.756226, 66.374069, 0.0000, 0.0000, 75.3123,1);
	CreateDynamicObject(969, 1445.473999, -1552.094482, 66.374069, 0.0000, 0.0000, 75.3123,1);
	CreateDynamicObject(969, 1445.434570, -1560.937378, 66.377815, 0.0000, 0.0000, 90.0773,1);
	CreateDynamicObject(969, 1445.430786, -1569.745239, 66.377815, 0.0000, 0.0000, 90.0773,1);
	CreateDynamicObject(969, 1445.427979, -1577.640991, 66.377815, 0.0000, 0.0000, 90.0773,1);
	CreateDynamicObject(969, 1445.420776, -1579.485718, 66.377815, 0.0000, 0.0000, 90.0773,1);
	CreateDynamicObject(969, 1454.113892, -1579.536377, 66.377815, 0.0000, 0.0000, 180.0774,1);
	CreateDynamicObject(969, 1462.901611, -1579.541260, 66.377815, 0.0000, 0.0000, 180.0774,1);
	CreateDynamicObject(969, 1468.440552, -1579.532837, 66.377815, 0.0000, 0.0000, 180.0774,1);
	CreateDynamicObject(969, 1468.500854, -1570.791748, 66.377815, 0.0000, 0.0000, 270.0774,1);
	CreateDynamicObject(969, 1468.478149, -1561.993652, 66.377815, 0.0000, 0.0000, 270.0774,1);
	CreateDynamicObject(969, 1468.479614, -1554.360352, 66.377815, 0.0000, 0.0000, 270.0774,1);
	CreateDynamicObject(969, 1468.527344, -1554.348755, 66.377815, 0.0000, 0.0000, 0.0775,1);
	CreateDynamicObject(969, 1477.449585, -1554.346558, 66.377815, 0.0000, 0.0000, 0.0775,1);
	CreateDynamicObject(969, 1486.164185, -1554.403076, 66.377815, 0.0000, 0.0000, 270.0775,1);
	CreateDynamicObject(969, 1486.167236, -1563.187866, 66.377815, 0.0000, 0.0000, 270.0775,1);
	CreateDynamicObject(969, 1486.263794, -1570.777832, 66.377815, 0.0000, 0.0000, 270.0775,1);
	CreateDynamicObject(944, 1489.246582, -1573.590210, 67.095726, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(944, 1493.703857, -1571.081177, 67.095726, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(944, 1504.947388, -1559.840576, 67.095726, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(1348, 1504.484985, -1572.798584, 66.913467, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(1431, 1493.305420, -1543.048096, 66.754807, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(1431, 1521.739990, -1524.120117, 66.754807, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(1685, 1467.256348, -1533.079346, 66.960938, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(1685, 1457.315308, -1561.255859, 66.960938, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(2567, 1490.442261, -1568.389648, 68.138542, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(2567, 1538.114746, -1570.121582, 68.138542, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(2669, 1497.902100, -1520.123901, 67.547462, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3565, 1503.740845, -1543.940918, 67.558876, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3566, 1477.548218, -1525.731445, 68.820808, 0.0000, 0.0000, 315.0000,1);
	CreateDynamicObject(3568, 1534.694946, -1544.379395, 68.824554, 0.0000, 0.0000, 337.5000,1);
	CreateDynamicObject(3569, 1480.592773, -1548.899170, 68.824554, 0.0000, 0.0000, 258.7500,1);
	CreateDynamicObject(3570, 1455.996704, -1569.410767, 67.558876, 0.0000, 0.0000, 326.2500,1);
	CreateDynamicObject(3572, 1521.794067, -1527.615967, 67.555130, 0.0000, 0.0000, 292.5000,1);
	CreateDynamicObject(3573, 1534.869385, -1528.229248, 68.902626, 0.0000, 0.0000, 236.2501,1);
	CreateDynamicObject(3574, 1496.881226, -1560.867920, 68.902626, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(3575, 1460.251343, -1547.450073, 68.898872, 0.0000, 0.0000, 168.7500,1);
	CreateDynamicObject(3576, 1485.354248, -1532.447998, 67.699860, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3577, 1508.036621, -1520.643433, 66.989693, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(3632, 1501.710327, -1531.823486, 66.681984, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3632, 1507.689209, -1538.263428, 66.681984, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3632, 1529.052246, -1545.846924, 66.685738, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3632, 1543.517578, -1562.304932, 66.685738, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3632, 1543.473511, -1525.146851, 66.685738, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3632, 1462.452026, -1566.585571, 66.685738, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3632, 1449.414185, -1573.670410, 66.685738, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3632, 1453.741699, -1524.537842, 66.681984, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3633, 1496.942017, -1566.411743, 72.080383, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(3722, 1531.588013, -1568.049927, 70.629219, 0.0000, 0.0000, 180.0000,1);
	CreateDynamicObject(3761, 1459.003784, -1518.092163, 68.209915, 0.0000, 0.0000, 146.2500,1);
	CreateDynamicObject(5262, 1495.407593, -1533.666016, 69.164856, 0.0000, 0.0000, 180.0000,1);
	CreateDynamicObject(9589, 1511.742065, -1541.584473, 69.127487, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(12913, 1545.980713, -1553.893311, 68.836227, 0.0000, 0.0000, 270.0000,1);
	CreateDynamicObject(1428, 1528.627319, -1534.004272, 67.778793, 0.0000, 353.9839, 327.0321,1);
	CreateDynamicObject(1437, 1512.226196, -1543.780518, 67.473167, 0.0000, 0.0000, 0.0000,1);
	CreateDynamicObject(1472, 1458.196411, -1561.226440, 66.787247, 0.0000, 0.0000, 90.0000,1);
	//Premium Insel
	CreateObject(8373, -2617.75073242, 2202.01269531, -26.67499352, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(11495, -2609.65673828, 2192.37402344, -0.05000000, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(11495, -2611.62622070, 2192.35571289, -0.05000000, 0.00000000, 0.00000000, 180.00000000);
	CreateObject(8373, -2488.94531250, 2043.50585938, -21.37499046, 0.00000000, 0.00000000, 177.99499512);
	CreateDynamicObject(13169, -2507.47460938, 1983.51464844, 9.51941872, 0.00000000, 0.00000000, 87.98950195);
	CreateDynamicObject(7326, -2448.63574219, 1910.33642578, 9.68317413, 0.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(7478, -2355.46679688, 1982.02246094, 9.53191757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(12801, -2535.30761719, 1902.09179688, 9.53572845, 0.00000000, 0.00000000, 177.98950195);
	CreateDynamicObject(13724, -2615.29296875, 1921.14611816, 4.40215397, 0.00000000, 0.00000000, 268.00000000);
	CreateDynamicObject(7929, -2519.05981445, 1948.72192383, 16.23200989, 0.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(7932, -2544.07348633, 1949.40246582, 12.54720116, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(3488, -2520.76367188, 1900.39062500, 16.10611343, 0.00000000, 0.00000000, 357.99499512);
	CreateDynamicObject(3485, -2546.33813477, 1901.29431152, 16.59024429, 0.00000000, 0.00000000, 178.00000000);
	CreateObject(3484, -2521.82055664, 1998.27343750, 16.23044777, 0.00000000, 0.00000000, 358.00000000);
	CreateObject(3484, -2551.67602539, 1999.31909180, 16.22496223, 0.00000000, 0.00000000, 358.00000000);
	CreateObject(3443, -2590.79565430, 1950.95446777, 12.48624420, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(3309, -2472.1845703125, 1946.642578125, 11.056476593018, 0, 0, 357.98950195313);
	CreateObject(7245, -2287.3203125, 2021.0439453125, 6.3680629730225, 0, 0, 179.99450683594);
	CreateDynamicObject(8947, -2567.44848633, 1991.82824707, 6.52537775, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8947, -2577.19165039, 1975.80883789, 6.50670576, 0.00000000, 0.00000000, 316.00000000);
	CreateDynamicObject(8947, -2581.78759766, 1991.88720703, 6.46514845, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8947, -2587.82543945, 1975.41125488, 6.50479698, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8947, -2602.21582031, 1975.46582031, 6.49325895, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8947, -2604.72729492, 1951.00744629, 6.54400063, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8947, -2598.79418945, 1943.94421387, 6.52183628, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8947, -2591.21533203, 1942.56091309, 6.55395079, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8947, -2604.72167969, 1975.46777344, 6.49959326, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8947, -2573.15454102, 2004.47888184, 6.48955250, 0.00000000, 0.00000000, 90.00000000);
	CreateDynamicObject(8947, -2581.08618164, 1876.50122070, 6.50000000, 0.00000000, 0.00000000, 16.00000000);
	CreateDynamicObject(8947, -2589.54199219, 1871.22448730, 6.47097063, 0.00000000, 0.00000000, 108.00000000);
	CreateDynamicObject(8947, -2587.24536133, 1864.17395020, 6.48542261, 0.00000000, 0.00000000, 108.00000000);
	CreateDynamicObject(8947, -2580.38574219, 1866.41015625, 6.48134136, 0.00000000, 0.00000000, 287.99996948);
	CreateDynamicObject(8947, -2486.6396484375, 1923.431640625, 6.5250039100647, 0, 0, 357.98950195313);
	CreateDynamicObject(8947, -2470.66528320, 1930.36816406, 6.47500467, 0.00000000, 0.00000000, 268.00000000);
	CreateDynamicObject(8947, -2481.29321289, 1925.07177734, 6.48132896, 0.00000000, 0.00000000, 330.00000000);
	CreateObject(8947, -2477.35034180, 1927.59948730, 6.51265669, 0.00000000, 0.00000000, 302.00000000);
	CreateDynamicObject(8947, -2487.89331055, 1901.34863281, 6.50000000, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(8947, -2475.84448242, 1987.03210449, 6.53313971, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8947, -2475.32250977, 2001.39892578, 6.53338385, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8947, -2474.84594727, 2015.54858398, 6.52617407, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8947, -2474.56469727, 2022.22680664, 6.51724768, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8947, -2450.29565430, 2021.36938477, 6.47499990, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8947, -2450.75463867, 2006.74047852, 6.50000763, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8947, -2451.27246094, 1992.71582031, 6.54719973, 0.00000000, 0.00000000, 267.99499512);
	CreateDynamicObject(8947, -2451.60522461, 1982.68066406, 6.52499819, 0.00000000, 0.00000000, 268.00000000);
	CreateDynamicObject(8947, -2442.01074219, 1983.16052246, 6.50632429, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8947, -2441.21484375, 2006.90429688, 6.48134184, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8947, -2444.42993164, 2028.14929199, 6.47694635, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(8947, -2438.89843750, 2027.95556641, 6.50000000, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(5848, -2462.04101562, 2025.63281250, 15.11382484, 0.00000000, 0.00000000, 349.99694824);
	CreateDynamicObject(17520, -2452.80957031, 1984.81445312, 12.69211578, 0.00000000, 0.00000000, 357.98950195);
	CreateDynamicObject(5142, 2503.63598633, -1617.35241699, 24.82333183, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(16000, -2479.4658203125, 1985.0439453125, 13.941823959351, 0, 0, 23.999633789063);
	CreateDynamicObject(5710, -2589.86425781, 1987.09484863, 14.72333908, 0.00000000, 0.00000000, 324.00000000);
	CreateDynamicObject(12929, -2274.14355469, 1997.66223145, 2.87587547, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(12928, -2274.16503906, 1997.68261719, 2.87587547, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(18452, -2271.32104492, 2007.56201172, 5.26033401, 0.00000000, 12.00000000, 0.00000000);
	CreateDynamicObject(18452, -2265.16992188, 2007.48461914, 4.02460575, 0.00000000, 12.00000000, 0.00000000);
	CreateDynamicObject(18284, -2256.87744141, 2012.02014160, 3.62172556, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(18284, -2254.35546875, 2015.2255859375, 3.6196899414063, 0, 0, 15.99609375);
	CreateObject(3446, -2404.23413086, 2042.15356445, 13.09998322, 0.00000000, 0.00000000, 0.00000000);
	CreateObject(3446, -2422.47167969, 2042.13867188, 13.07498360, 0.00000000, 0.00000000, 0.00000000);
	CreateObject(3446, -2385.99902344, 2042.15039062, 13.07500648, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3483, -2361.59985352, 2044.82287598, 16.57499504, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3486, -2289.8466796875, 2029.638671875, 16.577507019043, 0, 0, 0);
	CreateDynamicObject(3487, -2315.42333984, 2029.57995605, 16.28221512, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2363.77319336, 1978.51782227, 9.61441040, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2400.01220703, 1978.42456055, 9.62499809, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6990, -2319.98681641, 1902.15820312, 9.57011032, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(10444, -2261.57373047, 1959.07531738, 0.00000000, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(7885, -2380.50219727, 1954.16442871, 9.64374733, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2396.58520508, 1939.51440430, 9.60068893, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2401.220703125, 1902.01171875, 9.6153793334961, 0, 0, 0);
	CreateDynamicObject(6959, -2362.58886719, 1901.83410645, 9.61277199, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2361.73071289, 1941.14501953, 9.62034988, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2358.14941406, 1842.91210938, 9.60002518, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2397.74804688, 1842.91308594, 9.60002136, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(13746, -2574.00585938, 1838.33264160, 4.27499628, 0.00000000, 0.00000000, 16.00000000);
	CreateDynamicObject(13681, -2359.22729492, 1891.75158691, 14.29083157, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9518, -2276.58007812, 1847.07324219, 13.39379311, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9515, -2308.83300781, 1847.29296875, 12.98509789, 0.00000000, 0.00000000, 179.99450684);
	CreateDynamicObject(9515, -2330.98828125, 1847.23925781, 12.98509789, 0.00000000, 0.00000000, 179.99450684);
	CreateDynamicObject(7929, -2352.38745117, 1845.06127930, 16.21886826, 0.00000000, 0.00000000, 180.00000000);
	CreateDynamicObject(7929, -2373.22680664, 1845.05712891, 16.21886826, 0.00000000, 0.00000000, 180.00000000);
	CreateDynamicObject(6133, -2220.8427734375, 1884.833984375, 7.1499996185303, 0, 0, 90);
	CreateDynamicObject(8947, -2267.95800781, 1855.11352539, 6.54999924, 0.00000000, 0.00000000, 269.99996948);
	CreateDynamicObject(8947, -2293.02880859, 1855.51049805, 6.54999828, 0.00000000, 0.00000000, 90.00000000);
	CreateDynamicObject(17953, -2188.81372070, 1740.96533203, 0.00000000, 0.00000000, 0.00000000, 22.00000000);
	CreateDynamicObject(17953, -2084.02978516, 1802.96813965, -1.64982605, 0.00000000, 0.00000000, 38.00000000);
	CreateDynamicObject(17953, -1973.45495605, 1880.72790527, -1.92586517, 0.00000000, 0.00000000, 32.00000000);
	CreateDynamicObject(6066, -2482.20312500, 1925.43457031, 12.07899857, 0.00000000, 0.00000000, 149.99633789);
	CreateDynamicObject(4647, -2438.27172852, 1872.15527344, 9.54942513, 0.00000000, 0.00000000, 90.00000000);
	CreateDynamicObject(6959, -2426.66967773, 1899.27026367, 9.46511459, 0.00000000, 0.00000000, 0.00000000);
	CreateObject(6959, -2465.80395508, 1894.05041504, 9.43597984, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2500.51147461, 1897.27185059, 9.45258522, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2438.73583984, 1842.89648438, 9.60066605, 0.00000000, 0.00000000, 0.00000000);
	CreateObject(6959, -2478.83300781, 1842.90234375, 9.64878273, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2516.91406250, 1852.84741211, 9.44691467, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2513.12036133, 1847.39709473, 9.62190056, 0.00000000, 0.00000000, 0.00000000);
	CreateObject(6959, -2516.91943359, 1842.90893555, 9.64501762, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3604, -2408.57763672, 1992.30480957, 12.15224361, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3606, -2482.56298828, 1886.29663086, 12.82544518, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3619, -2424.32714844, 1893.36132812, 12.86099339, 0.00000000, 0.00000000, 179.99450684);
	CreateDynamicObject(6057, -2405.23461914, 1851.16613770, 12.89542770, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3605, -2450.04931641, 1846.20446777, 15.67502785, 0.00000000, 0.00000000, 180.00000000);
	CreateObject(3604, -2479.2119140625, 1848.02734375, 12.176028251648, 0, 0, 179.99450683594);
	CreateObject(3603, -2505.99975586, 1845.91906738, 15.48500443, 0.00000000, 0.00000000, 180.00000000);
	CreateDynamicObject(3604, -2532.63403320, 1859.77990723, 12.17226315, 0.00000000, 0.00000000, 90.00000000);
	CreateDynamicObject(6959, -2507.35351562, 2010.74511719, 9.46598244, 0.00000000, 0.00000000, 357.99499512);
	CreateDynamicObject(6959, -2527.90429688, 2015.89160156, -11.18587875, 0.00000000, 270.00000000, 357.99499512);
	CreateDynamicObject(6959, -2526.76098633, 2015.74121094, -9.75233841, 270.00000000, 174.55401611, 172.55401611);
	CreateDynamicObject(1319, -2492.45922852, 1980.48999023, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2492.16308594, 1978.61218262, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2487.76000977, 1975.42504883, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2503.11035156, 1979.00207520, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2502.69067383, 1980.84790039, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2507.63891602, 1976.14172363, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2503.40991211, 1960.84033203, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2503.70678711, 1962.71936035, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2508.08154297, 1965.91992188, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2488.16528320, 1965.21704102, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2493.15942383, 1960.52185059, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2492.71777344, 1962.38403320, 10.15223122, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2449.40405273, 1926.80053711, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2450.11962891, 1923.75122070, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2451.57177734, 1921.09863281, 10.01124573, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2453.83056641, 1918.95678711, 10.01124573, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2456.60595703, 1917.66748047, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2445.55981445, 1918.59985352, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2442.88647461, 1917.14514160, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2447.64135742, 1920.89868164, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2448.93066406, 1923.65625000, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2445.70092773, 1914.61547852, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2439.80517578, 1916.43054199, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2442.98144531, 1915.94042969, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2447.89282227, 1912.63134766, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2449.41381836, 1909.93347168, 10.00348663, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2462.98803711, 2005.29260254, 9.58692837, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2462.84155273, 2007.97375488, 9.58692741, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2462.74023438, 2010.40979004, 9.57971859, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2462.65405273, 2012.86657715, 9.56823540, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2462.56933594, 2015.31958008, 9.57971859, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2458.17822266, 2005.08337402, 9.55355167, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2449.62524414, 2004.76989746, 9.60628414, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2474.97875977, 2005.51416016, 10.51236725, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2481.45922852, 2005.71166992, 10.51236725, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2486.75488281, 2005.88818359, 10.51236725, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2486.84765625, 2008.16760254, 9.60535622, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1211, -2491.04296875, 2017.90783691, 9.99116611, 0.00000000, 0.00000000, 92.00000000);
	CreateDynamicObject(1290, -2462.80078125, 1989.40820312, 15.09056473, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1290, -2462.48315430, 1997.44042969, 15.04056549, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1290, -2462.22460938, 2002.86145020, 15.14056396, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1340, -2464.94677734, 2003.41540527, 10.74157715, 0.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(1342, -2464.96533203, 1999.18933105, 10.64768410, 0.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(1346, -2482.56030273, 2017.51159668, 10.88072395, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(3447, -2434.71582031, 2039.08081055, 17.05165863, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1594, -2471.89819336, 1999.19213867, 10.09098244, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1594, -2473.34863281, 2002.06201172, 10.09098244, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1594, -2469.83471680, 2002.19067383, 10.09098244, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1594, -2471.30957031, 2004.73522949, 10.09098244, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1256, -2463.92529297, 1994.02307129, 10.27344704, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(3920, -2474.71923828, 2018.31127930, 15.33102226, 0.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(3920, -2461.99633789, 2017.40441895, 15.33227921, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(3920, -2449.47656250, 2017.71484375, 15.32222748, 0.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(870, -2477.07031250, 2003.78356934, 9.86317539, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2479.70996094, 2003.80395508, 9.86317539, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2489.66088867, 2004.07275391, 9.85217094, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2489.80151367, 2001.39306641, 9.85405636, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2489.96679688, 1998.44726562, 9.85911369, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2487.99389648, 2003.81774902, 9.85789680, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2488.00878906, 2001.02087402, 9.85818195, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2488.13769531, 1998.21984863, 9.85894394, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2253, -2474.95971680, 1996.28967285, 9.89438725, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2253, -2474.85961914, 1998.84240723, 9.89438725, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3660, -2538.87060547, 1962.17468262, 12.25842381, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(3660, -2548.45581055, 1962.50500488, 12.25842381, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(8623, -2413.12402344, 2016.56420898, 10.75774288, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8623, -2400.91406250, 2016.60168457, 10.76198673, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8623, -2388.56665039, 2016.53442383, 10.75304031, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8623, -2376.30957031, 2016.38903809, 10.73370361, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8623, -2364.40576172, 2016.55871582, 10.75627136, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8623, -2348.04418945, 2016.44262695, 10.74083138, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8623, -2356.24096680, 2016.25268555, 10.71556759, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8990, -2462.36743164, 1994.46777344, 10.92009544, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(8991, -2462.22192383, 1998.82702637, 10.91781425, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(18014, -2431.68261719, 2001.81799316, 10.09712410, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2417.03686523, 2016.78198242, 9.86179733, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2410.11254883, 2016.65405273, 10.00804996, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2404.72436523, 2016.78100586, 10.02493382, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2397.87304688, 2016.79833984, 10.02723885, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2392.69287109, 2016.76489258, 10.02278900, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2385.01538086, 2016.67907715, 10.01137257, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2380.29248047, 2016.50390625, 9.98806572, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2373.18676758, 2016.57421875, 9.99742603, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2368.16259766, 2016.75048828, 10.02086449, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2360.86230469, 2016.65148926, 10.00770283, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2352.91235352, 2016.41149902, 9.97577763, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(673, -2343.11230469, 2016.65966797, 9.79866791, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(717, -2488.23510742, 1934.60571289, 9.82854462, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(1214, -2431.38476562, 2004.10144043, 9.70978737, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2427.04467773, 2024.64990234, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2430.28808594, 2021.37207031, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2431.44824219, 2017.39453125, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2434.75317383, 2012.75610352, 9.53488541, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2436.97192383, 2014.50134277, 9.53488541, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1214, -2439.25146484, 2016.39672852, 9.55354500, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3578, -2434.94921875, 2007.87744141, 8.92009830, 0.00000000, 0.00000000, 268.00000000);
	CreateDynamicObject(3472, -2413.70483398, 2016.70532227, 10.01563835, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3472, -2401.45312500, 2016.71374512, 10.01597595, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3472, -2388.69848633, 2016.72717285, 10.01777077, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3472, -2376.80151367, 2016.65026855, 10.00753212, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3472, -2364.95043945, 2016.60717773, 10.00180817, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3472, -2356.84423828, 2016.53613281, 9.99235916, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3472, -2347.96997070, 2016.60180664, 10.00109291, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3534, -2451.53466797, 2015.53845215, 15.26335430, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1232, -2445.42675781, 1988.83251953, 12.23738670, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3920, -2483.38623047, 1983.11779785, 15.04922104, 0.00000000, 0.00000000, 24.00000000);
	CreateDynamicObject(3920, -2475.48779297, 1986.58801270, 15.04922104, 0.00000000, 0.00000000, 24.00000000);
	CreateDynamicObject(3920, -2470.46386719, 1988.70727539, 18.22173500, 0.00000000, 90.00000000, 22.00000000);
	CreateDynamicObject(3920, -2488.23364258, 1980.91735840, 18.27831841, 0.00000000, 270.00000000, 31.99975586);
	CreateDynamicObject(640, -2489.03637695, 1983.84582520, 15.31102467, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(640, -2489.03076172, 1987.43408203, 15.31102467, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(640, -2486.19189453, 1989.67456055, 15.31102467, 0.00000000, 0.00000000, 268.00000000);
	CreateObject(640, -2480.96435547, 1989.49377441, 15.31384754, 0.00000000, 0.00000000, 268.00000000);
	CreateDynamicObject(761, -2487.41235352, 1988.36950684, 14.61399078, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(761, -2485.31762695, 1987.72570801, 14.61399078, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(761, -2487.02734375, 1985.46472168, 14.61399078, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(761, -2482.88085938, 1987.79870605, 14.61399078, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(761, -2483.90136719, 1984.92773438, 14.61399078, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(761, -2487.12890625, 1983.51318359, 14.61399078, 0.00000000, 0.00000000, 0.00000000);
	CreateObject(761, -2480.88500977, 1986.74462891, 14.61681366, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(761, -2482.12280273, 1985.72290039, 14.61681366, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3467, -2475.00024414, 2017.66662598, 10.28252983, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2682, -2473.31225586, 2002.13854980, 10.74448204, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2682, -2471.91064453, 1999.29309082, 10.74448204, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2682, -2471.32446289, 2004.80090332, 10.74448204, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2682, -2469.89501953, 2002.30859375, 10.74448204, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2665, -2482.83056641, 2003.80590820, 12.75962639, 14.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(2667, -2486.93481445, 1998.42224121, 12.43135262, 0.00000000, 0.00000000, 268.00000000);
	CreateDynamicObject(2666, -2486.82788086, 2001.16564941, 12.39699364, 0.00000000, 0.00000000, 266.00000000);
	CreateDynamicObject(10832, -2482.09204102, 2039.16772461, 8.17478371, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(10832, -2482.08618164, 2039.16967773, 9.23982430, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(1684, -2457.00463867, 2035.43701172, 7.96488571, 0.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(1684, -2457.00708008, 2035.38769531, 10.99564171, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(1596, -2449.18725586, 2023.81494141, 20.08257484, 0.00000000, 0.00000000, 134.00000000);
	CreateDynamicObject(16327, -2454.17871094, 2048.30151367, 6.37397003, 0.00000000, 0.00000000, 268.00000000);
	CreateDynamicObject(3939, -2475.56127930, 2037.04321289, 8.13968563, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2454.97021484, 2028.90466309, 19.12976646, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2461.56909180, 2028.90649414, 19.12976646, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2468.17407227, 2028.93798828, 19.12976646, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2474.32202148, 2028.91027832, 19.12976646, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2459.96582031, 1983.74438477, 17.66899490, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2452.52124023, 1983.50805664, 17.66899490, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2460.14965820, 1977.16455078, 17.66899490, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2452.25610352, 1976.88769531, 17.66899490, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2445.40527344, 1983.00012207, 17.66899490, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2444.88989258, 1976.76086426, 17.66899490, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1697, -2438.26245117, 1980.03125000, 17.66899490, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2416.16064453, 1984.55688477, 10.29282475, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2416.15429688, 1958.49243164, 10.29282475, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2416.12548828, 1921.18383789, 10.28320599, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2429.02880859, 1907.36975098, 10.13294125, 0.00000000, 0.00000000, 94.00000000);
	CreateDynamicObject(9339, -2441.91625977, 1893.56689453, 10.13294125, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2416.11962891, 1921.17346191, 11.68714619, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2416.15698242, 1984.55883789, 11.69676495, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2416.15893555, 1958.49035645, 11.69676495, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2416.16308594, 1984.54553223, 13.10070515, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(9339, -2416.169921875, 1958.48828125, 13.10070514679, 0, 0, 0);
	CreateDynamicObject(9339, -2416.10961914, 1921.19213867, 13.09108639, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2491.50756836, 2006.05590820, 10.51236725, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2491.81616211, 1996.89453125, 10.51236725, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(11489, -2459.67236328, 1900.47119141, 9.68161201, 0.00000000, 0.00000000, 184.00000000);
	CreateDynamicObject(3934, -2517.05273438, 2024.31896973, 9.43473434, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(8843, -2437.99487305, 2008.43212891, 9.55355167, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(1319, -2421.16259766, 1997.52563477, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2418.15673828, 2001.99511719, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2416.17749023, 2002.38476562, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2416.24853516, 2020.77429199, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2418.16796875, 2020.52282715, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2419.77734375, 2019.80517578, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2420.79589844, 2018.76220703, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2421.20556641, 2017.51855469, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2416.32958984, 2012.58227539, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2418.08374023, 2012.98303223, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2344.58715820, 2012.55102539, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2342.79052734, 2012.98205566, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2339.67919922, 2017.53039551, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2340.07519531, 2018.76403809, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2341.15209961, 2019.80957031, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2342.66625977, 2020.51831055, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1319, -2344.58447266, 2020.78088379, 10.15691757, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3578, -2334.58129883, 2017.54052734, 8.78962994, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3578, -2426.29589844, 2017.45788574, 8.81464863, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2453.18237305, 1904.88842773, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2453.01879883, 1908.28479004, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2454.72705078, 1911.72570801, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2458.00097656, 1913.90661621, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2462.05761719, 1914.11608887, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2465.53344727, 1912.00671387, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2467.14941406, 1908.59350586, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2467.08886719, 1905.40368652, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(869, -2465.97070312, 1902.88098145, 10.15643406, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2456.49560547, 1904.40246582, 9.94873333, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2459.06835938, 1902.86535645, 9.94873333, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2456.68188477, 1907.25146484, 9.94873333, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2458.07202148, 1910.24584961, 9.94092464, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2460.76245117, 1911.24426270, 9.94873333, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2463.67431641, 1909.41674805, 9.94873333, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2464.02514648, 1906.45300293, 9.94873333, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2462.65112305, 1903.68103027, 9.94873333, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3515, -2460.22485352, 1906.93530273, 9.12685776, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(7191, -2489.76513672, 1914.72534180, 10.92135429, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(996, -2488.82495117, 1918.29931641, 10.32730389, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(996, -2488.91210938, 1912.54565430, 10.32730389, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(996, -2489.01879883, 1906.96630859, 10.30229950, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1418, -2481.26171875, 1901.52587891, 10.32942677, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1418, -2484.74267578, 1901.53625488, 10.32942677, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1418, -2488.23339844, 1901.52514648, 10.32942677, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1418, -2478.81738281, 1899.93981934, 10.18061256, 0.00000000, 0.00000000, 296.00000000);
	CreateDynamicObject(1418, -2477.35937500, 1896.81103516, 10.18061256, 0.00000000, 0.00000000, 294.00000000);
	CreateDynamicObject(1418, -2475.40234375, 1894.02441406, 10.18061256, 0.00000000, 0.00000000, 316.00000000);
	CreateDynamicObject(1418, -2474.21411133, 1891.21313477, 10.18061256, 0.00000000, 0.00000000, 266.00000000);
	CreateDynamicObject(7893, -2517.21118164, 2020.02929688, 9.99534798, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2438.14355469, 1926.28430176, 9.60504913, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2437.96557617, 1931.04577637, 9.65504837, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2437.98535156, 1935.55871582, 9.45900154, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2438.14404297, 1940.15844727, 9.31459808, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2438.30566406, 1944.84509277, 9.36738777, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2438.30371094, 1949.28356934, 9.56774712, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2438.07055664, 1953.66625977, 9.61881065, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2438.15161133, 1958.10375977, 9.38361168, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2438.18115234, 1962.68823242, 9.53403473, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2440.34155273, 1967.19934082, 9.60535622, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2438.07080078, 1966.79699707, 9.61004257, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2437.48413086, 1971.31604004, 9.55986786, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2442.18408203, 1971.62756348, 9.55986881, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(749, -2459.56054688, 1934.41088867, 9.48034763, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3463, -2438.46240234, 1927.97009277, 11.35386562, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3463, -2438.24707031, 1944.71191406, 11.04756165, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3463, -2438.28393555, 1962.74291992, 11.10376167, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(3463, -2438.84326172, 1971.96887207, 10.64084435, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(12839, -2479.59326172, 1994.94995117, 10.38333988, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(970, -2477.07104492, 2002.37341309, 13.70453453, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(970, -2475.18725586, 1997.39099121, 13.70453453, 0.00000000, 0.00000000, 88.00000000);
	CreateDynamicObject(970, -2475.06201172, 2001.30371094, 13.70453453, 0.00000000, 0.00000000, 268.00000000);
	CreateDynamicObject(1594, -2476.81298828, 2015.00695801, 10.05670929, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1594, -2474.52270508, 2013.27355957, 10.05670929, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1594, -2473.66284180, 2015.88427734, 10.05670929, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1723, -2477.90258789, 1996.00012207, 13.15305328, 0.00000000, 0.00000000, 178.00000000);
	CreateDynamicObject(2637, -2476.14111328, 2001.68298340, 13.55779362, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2637, -2478.22753906, 2001.68615723, 13.55779362, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2350, -2476.43530273, 2000.50146484, 13.52520466, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(16377, -2479.83032227, 1998.79125977, 14.13338566, 0.00000000, 0.00000000, 213.99996948);
	CreateDynamicObject(2229, -2475.52416992, 2002.91333008, 13.15305328, 0.00000000, 0.00000000, 179.99993896);
	CreateDynamicObject(2229, -2480.42456055, 2003.12097168, 13.15305328, 0.00000000, 0.00000000, 176.00000000);
	CreateDynamicObject(2232, -2475.75537109, 2003.05468750, 13.75092888, 0.00000000, 0.00000000, 180.00000000);
	CreateDynamicObject(2232, -2479.54492188, 2003.22155762, 13.75092888, 0.00000000, 0.00000000, 176.00000000);
	CreateDynamicObject(2190, -2476.60351562, 2002.22094727, 14.02223873, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2101, -2478.96557617, 2002.07714844, 13.96712112, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2002, -2477.14892578, 1995.95178223, 13.15305328, 0.00000000, 0.00000000, 176.00000000);
	CreateDynamicObject(14820, -2478.21875000, 2001.41687012, 14.07684803, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1958, -2476.36035156, 2002.05920410, 14.01703548, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(14820, -2476.15405273, 2001.39843750, 14.07684803, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1958, -2476.01171875, 2002.05566406, 14.01703548, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1958, -2475.65576172, 2002.05749512, 14.01703548, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2176, -2485.36938477, 2019.41955566, 12.42190647, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(2196, -2477.98339844, 2002.03723145, 13.96712112, 0.00000000, 0.00000000, 306.00000000);
	CreateDynamicObject(1486, -2477.26464844, 2001.83984375, 14.11207008, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1486, -2477.25854492, 2001.99499512, 14.11207008, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1486, -2478.60595703, 2001.90478516, 14.11207008, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1520, -2475.23730469, 2002.16442871, 13.96712112, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1546, -2475.87402344, 2001.49084473, 14.05624962, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2318.39770508, 1830.67016602, -10.40427208, 88.00000000, 180.00041199, 179.99969482);
	CreateDynamicObject(6959, -2277.20581055, 1831.96667480, -10.23241806, 90.00000000, 169.30108643, 190.69900513);
	CreateDynamicObject(6959, -2297.75000000, 1850.71972656, -10.55425930, 90.00000000, 179.30395508, 270.69604492);
	CreateDynamicObject(6959, -2255.63525391, 1851.95568848, -11.15742302, 0.00000000, 90.00000000, 0.00000000);
	CreateDynamicObject(6959, -2276.24755859, 1831.92382812, -10.26135254, 90.00000000, 179.62878418, 180.37118530);
	CreateDynamicObject(6959, -2358.18041992, 1822.90673828, -10.45184517, 90.00000000, 191.77456665, 168.22546387);
	CreateDynamicObject(6959, -2399.39746094, 1822.89465332, -10.42683411, 90.00000000, 180.00000000, 180.00000000);
	CreateDynamicObject(6959, -2440.3427734375, 1822.89453125, -10.451200485229, 90, 179.30236816406, 180.69213867188);
	CreateDynamicObject(6959, -2481.35058594, 1822.89892578, -10.37809563, 90.00000000, 178.81591797, 181.18405151);
	CreateDynamicObject(6959, -2516.90185547, 1822.89721680, -10.38186073, 90.00000000, 179.92407227, 180.07592773);
	CreateDynamicObject(6959, -2537.62939453, 1842.84997559, -11.03186607, 0.00000000, 270.00000000, 0.00000000);
	CreateDynamicObject(6959, -2537.62646484, 1847.14562988, -11.09173584, 0.00000000, 270.00000000, 0.00000000);
	CreateDynamicObject(6959, -2547.64941406, 1867.49011230, -10.37393665, 90.00000000, 179.30487061, 178.69512939);
	CreateDynamicObject(6959, -2337.44555664, 1842.91601562, -11.07682800, 0.00000000, 90.00000000, 0.00000000);
	CreateDynamicObject(6959, -2305.74755859, 2011.46484375, 8.11598873, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2297.18017578, 2011.50659180, 8.12908363, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2305.73999023, 2026.29077148, 8.11149216, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2326.45068359, 2026.30249023, -12.61540985, 0.00000000, 270.00000000, 0.00000000);
	CreateDynamicObject(6959, -2305.73339844, 1992.11987305, -11.88589001, 88.00000000, 180.00000000, 180.00000000);
	CreateDynamicObject(6959, -2282.74804688, 1991.45202637, -11.87279892, 90.00000000, 180.67979431, 179.32019043);
	CreateDynamicObject(6959, -2305.23413086, 2046.56884766, -10.20418739, 270.50006104, 180.00000000, 180.00000000);
	CreateDynamicObject(6959, -2267.68481445, 2046.78930664, -10.24760818, 270.00000000, 180.01199341, 180.01199341);
	CreateDynamicObject(6959, -2431.22778320, 2036.11376953, 9.44966698, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(6959, -2430.52612305, 2056.63671875, -10.22719193, 270.00000000, 183.33209229, 183.33209229);
	CreateDynamicObject(6959, -2397.39819336, 2056.62353516, -9.89337349, 270.00000000, 182.07569885, 182.07560730);
	CreateDynamicObject(6959, -2356.05615234, 2061.94946289, -10.31149197, 270.00000000, 180.04394531, 180.04394531);
	CreateDynamicObject(6959, -2376.04174805, 2041.88513184, -11.26828003, 0.00000000, 268.00000000, 0.00000000);
	CreateDynamicObject(6959, -2346.22607422, 2036.61437988, 9.44444180, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2346.19213867, 2041.94116211, 9.44255924, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2325.50878906, 2041.92993164, -11.23243046, 0.00000000, 90.00000000, 0.00000000);
	CreateDynamicObject(6959, -2346.17578125, 2061.95605469, -10.58431149, 270.00000000, 180.00000000, 180.00000000);
	CreateDynamicObject(6959, -2451.92382812, 2036.61425781, -11.22722435, 0.00000000, 270.00000000, 357.99984741);
	CreateDynamicObject(6959, -2601.3000488281, 2232.1999511719, -16.700000762939, 0, 90, 0);
	CreateDynamicObject(6959, -2600.48730469, 2215.48022461, -15.85456848, 270.00000000, 180.00000000, 180.00000000);
	CreateDynamicObject(6959, -2591.439453125, 1989.947265625, 9.5829162597656, 0, 0, 0);
	CreateDynamicObject(6959, -2567.69995117, 2017.17553711, -10.38735580, 270.00000000, 180.00000000, 178.00000000);
	CreateDynamicObject(6959, -2584.15063477, 1997.65173340, 9.57246399, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(6959, -2591.82006836, 2017.99621582, -10.37939262, 270.00000000, 179.59649658, 177.59643555);
	CreateDynamicObject(6959, -2592.47558594, 1997.87585449, 9.57058144, 0.00000000, 0.00000000, 358.00000000);
	CreateDynamicObject(6959, -2612.17407227, 1998.61254883, -11.11893654, 0.00000000, 270.00000000, 0.00000000);
	CreateDynamicObject(6959, -2612.13134766, 1958.71435547, -11.17308521, 0.00000000, 270.00000000, 0.00000000);
	CreateDynamicObject(16133, -2305.07202148, 1887.69726562, 0.00000000, 0.00000000, 0.00000000, 262.00000000);
	CreateDynamicObject(16133, -2319.39453125, 1900.24597168, -8.52501488, 0.00000000, 0.00000000, 350.00000000);
	CreateDynamicObject(16133, -2320.73559570, 1941.20935059, -9.75000000, 0.00000000, 0.00000000, 350.00000000);
	CreateDynamicObject(17033, -2299.76220703, 1904.12597656, -0.50000006, 0.00000000, 0.00000000, 54.00000000);
	CreateDynamicObject(17033, -2300.12939453, 1919.35058594, 0.00000000, 0.00000000, 0.00000000, 54.00000000);
	CreateDynamicObject(17033, -2312.29956055, 1902.40209961, 0.00000000, 0.00000000, 0.00000000, 237.99998474);
	CreateDynamicObject(17033, -2311.97070312, 1916.94763184, 0.09085236, 0.00000000, 0.00000000, 225.99993896);
	CreateDynamicObject(17033, -2311.90527344, 1926.80883789, 0.00000000, 0.00000000, 0.00000000, 225.99993896);
	CreateDynamicObject(9831, -2303.99096680, 1930.69238281, -0.29813740, 5.98532104, 4.02197266, 355.57992554);
	CreateDynamicObject(3472, -2295.41381836, 1892.36401367, 5.89042282, 0.00000000, 0.00000000, 276.00000000);
	CreateDynamicObject(6959, -2275.97290039, 1882.17224121, -10.38489151, 270.00000000, 180.69633484, 180.69633484);
	CreateDynamicObject(6959, -2324.64331055, 1908.50061035, -11.03644180, 0.00000000, 90.00000000, 0.00000000);
	CreateDynamicObject(6959, -2324.65502930, 1947.16809082, -11.03558350, 0.00000000, 90.00000000, 0.00000000);
	CreateDynamicObject(6959, -2324.64257812, 1971.77624512, -11.06057549, 0.00000000, 90.00000000, 0.00000000);
	CreateDynamicObject(6959, -2277.3999023438, 1901.4000244141, 0.60000002384186, 0, 0, 0);
	CreateDynamicObject(6959, -2276.1999511719, 1941.4000244141, 0.60000002384186, 0, 0, 0);
	CreateDynamicObject(3485, -2289.73046875, 1985.3466796875, 16.587329864502, 0, 0, 179.99450683594);
	CreateDynamicObject(3487, -2315.35815430, 1985.19311523, 16.24790573, 0.00000000, 0.00000000, 180.00000000);
	CreateDynamicObject(6959, -2304.05566406, 1968.32397461, -10.33641243, 270.00000000, 179.95605469, 179.95605469);
	CreateDynamicObject(6959, -2295.2880859375, 1968.2822265625, -10.288925170898, 90, 180.69213867188, 179.30236816406);
	CreateDynamicObject(4565, -2268.59545898, 1902.12719727, 4.85682964, 0.00000000, 0.00000000, 180.00000000);
	CreateDynamicObject(6959, -2255.57250977, 1884.71691895, -11.10163689, 0.00000000, 90.00000000, 0.00000000);
	CreateDynamicObject(6959, -2255.5, 1911.9000244141, -11.10000038147, 0, 90, 0);
	CreateDynamicObject(744, -2287.53247070, 1902.24255371, 0.76941788, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2287.66967773, 1900.93286133, 6.01571655, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(744, -2289, 1905.6999511719, 0.60000002384186, 0, 0, 0);
	CreateDynamicObject(744, -2287.1000976563, 1909.5999755859, 0.60000002384186, 0, 0, 0);
	CreateDynamicObject(744, -2284.8999023438, 1913.6999511719, 0.5, 0, 0, 0);
	CreateDynamicObject(744, -2282.8000488281, 1918, 0.69999998807907, 0, 0, 0);
	CreateDynamicObject(744, -2283.1999511719, 1923, 0.60000002384186, 0, 0, 0);
	CreateDynamicObject(10444, -2327.97705078, 1846.55688477, 9.54134941, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2258.77612305, 1906.80627441, 5.87257767, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2258.48779297, 1909.86181641, 5.88020134, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2258.78613281, 1912.91809082, 5.84754944, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2256.97656250, 1906.40148926, 5.87257767, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2256.93823242, 1909.02331543, 5.88020134, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2256.77294922, 1911.93579102, 5.88020134, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2257.16210938, 1914.73815918, 5.60423565, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2279.01635742, 1925.33935547, 1.28199124, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(870, -2280.35278320, 1925.35473633, 1.39240980, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(16135, -2307.19140625, 1923.52050781, 0.99888146, 0.00000000, 0.00000000, 58.00000000);
	CreateDynamicObject(8483, -2308.49755859, 1892.76623535, 5.66423178, 0.00000000, 0.00000000, 84.00000000);
	CreateDynamicObject(3534, -2304.48950195, 1900.43273926, 7.00176620, 271.99996948, 90.00067139, 80.00061035);
	CreateDynamicObject(3534, -2308.69238281, 1900.55017090, 6.84497738, 274.00000000, 180.00000000, 180.00000000);
	CreateDynamicObject(2898, -2269.04394531, 1880.63854980, 9.90795517, 0.00000000, 0.00000000, 269.99996948);
	CreateDynamicObject(2898, -2269.00952148, 1884.53295898, 9.84150887, 0.00000000, 358.00000000, 269.99996948);
	CreateDynamicObject(2898, -2269.09936523, 1888.49304199, 9.73252106, 0.00000000, 358.00000000, 269.99996948);
	CreateDynamicObject(2898, -2269.05395508, 1892.51550293, 9.60700035, 0.00000000, 358.00000000, 269.99996948);
	CreateDynamicObject(2898, -2269.03564453, 1894.89294434, 9.52931976, 0.00000000, 358.00000000, 269.99996948);
	CreateDynamicObject(717, -2266.82202148, 1878.98437500, 9.93788242, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(717, -2271.28198242, 1878.99230957, 9.93788242, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(717, -2271.28955078, 1896.52758789, 9.50218582, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(717, -2266.86083984, 1896.48474121, 9.50368118, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(726, -2310.35034180, 1889.82861328, 13.34520149, 0.00000000, 0.00000000, 54.00000000);
	CreateDynamicObject(726, -2321.18457031, 1909.41088867, 5.64119339, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(726, -2320.50000000, 1934.22949219, 3.28965569, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2293.8000488281, 1961.3000488281, 0.60000002384186, 0, 0, 0);
	CreateDynamicObject(6959, -2276.3000488281, 1971.5999755859, 0.60000002384186, 0, 0, 0);
	CreateDynamicObject(6959, -2255.58447266, 1947.13012695, -11.10308456, 0.00000000, 90.00000000, 0.00000000);
	CreateDynamicObject(6959, -2255.64794922, 1982.43798828, -11.13189507, 0.00000000, 270.00000000, 0.00000000);
	CreateDynamicObject(6959, -2315.26611328, 1982.92175293, 0.72002029, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2276.23901367, 1991.54919434, -10.45809746, 270.00000000, 179.92407227, 179.92407227);
	CreateDynamicObject(6959, -2295.23706055, 1988.31152344, 9.48444557, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2310.15454102, 1988.29504395, 9.44440460, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(6959, -2305.50073242, 1992.15234375, -10.38345909, 271.99996948, 0.00000000, 0.00000000);
	CreateDynamicObject(11489, -2309.89477539, 1964.56225586, 0.71565282, 0.00000000, 0.00000000, 52.00000000);
	CreateDynamicObject(3935, -2269.19775391, 1931.26562500, 3.86843777, 0.00000000, 0.00000000, 183.99998474);
	CreateDynamicObject(1608, -2307.28051758, 1942.95080566, -5.25000000, 0.00000000, 0.00000000, 126.00000000);
	CreateDynamicObject(1232, -2269.24145508, 1922.94213867, 7.07149458, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2269.29125977, 1919.26818848, 5.00698948, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2269.27441406, 1912.81823730, 7.92115307, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1232, -2269.24633789, 1905.94616699, 12.61066055, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2277.56591797, 1904.84899902, 10.43677807, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2260.49877930, 1904.82727051, 10.43677807, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2260.14965820, 1927.10412598, 1.67115283, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2278.32519531, 1927.07702637, 1.67115283, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2284.34838867, 1927.16430664, 1.67805147, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1215, -2255.89111328, 1927.14013672, 1.67805147, 0.00000000, 0.00000000, 0.00000000);
	CreateDynamicObject(1419, -2308.66015625, 1958.544921875, 1.2473511695862, 0, 0, 351.99645996094);
	CreateDynamicObject(1419, -2305.2802734375, 1959.7861328125, 1.2473511695862, 0, 0, 47.999267578125);
	CreateDynamicObject(1419, -2304.025390625, 1963.3544921875, 1.2473511695862, 0, 0, 93.9990234375);
	CreateDynamicObject(1419, -2305.8000488281, 1966.5999755859, 1.2000000476837, 0, 0, 322);
	CreateDynamicObject(6356, -2304.5, 1953.3000488281, 11.39999961853, 0, 0, 55.995880126953);
	CreateDynamicObject(6356, -2274.2998046875, 1943.3994140625, 11.60000038147, 0, 0, 331.99584960938);
	CreateObject(16082, -2287.6999511719, 1965.3000488281, 4.5, 0, 0, 180);
	CreateDynamicObject(14391, -2291.1999511719, 1963.1999511719, 9.1000003814697, 0, 0, 90);
	CreateDynamicObject(2230, -2288.5, 1962.5999755859, 8.1000003814697, 0, 0, 0);
	CreateDynamicObject(2230, -2293.6000976563, 1962.5999755859, 8.1000003814697, 0, 0, 0);
	CreateDynamicObject(3383, -2290.5, 1962.6999511719, 9.1999998092651, 0, 180, 0);
	CreateDynamicObject(3383, -2292.3000488281, 1962.6999511719, 9.1999998092651, 0, 180, 180);
	CreateDynamicObject(14434, -2298, 1958.9000244141, 12, 0, 0, 90);
	CreateDynamicObject(18102, -2283.1999511719, 1961.4000244141, 6.5999999046326, 294, 0, 0.0001220703125);
	CreateDynamicObject(6356, -2297.7998046875, 1959.7998046875, 11.39999961853, 0, 0, 237.99682617188);
	CreateDynamicObject(2631, -2296, 1964.1999511719, 8.1000003814697, 0, 0, 270);
	CreateDynamicObject(2773, -2296.8999023438, 1963.3000488281, 8.6000003814697, 0, 0, 0);
	CreateDynamicObject(1568, -2676.8000488281, 2107.8999023438, 27, 0, 0, 0);
	CreateDynamicObject(1568, -2287.1999511719, 1962.5999755859, 8.1000003814697, 0, 0, 0);
	CreateDynamicObject(1278, -2293, 1960.6999511719, -5.9000000953674, 0, 0, 16);
	CreateDynamicObject(1278, -2290.1000976563, 1960.6999511719, -5.9000000953674, 0, 0, 348);
	CreateDynamicObject(1723, -2296.5, 1965.6999511719, 8.1000003814697, 0, 0, 90);
	CreateDynamicObject(1808, -2293.6000976563, 1968.0999755859, 8.1000003814697, 0, 0, 0);
	CreateDynamicObject(2747, -2295.8999023438, 1963.5, 8.6000003814697, 0, 0, 358);
	CreateDynamicObject(1809, -2296.3000488281, 1963.5, 9, 0, 0, 152);
	CreateDynamicObject(1958, -2295.3000488281, 1963.5999755859, 9.1000003814697, 0, 0, 0);
	CreateDynamicObject(1958, -2295.8000488281, 1963.5999755859, 9.1000003814697, 0, 0, 0);
	CreateDynamicObject(9339, -2403, 1997.4000244141, 10.300000190735, 0, 0, 90);
	CreateDynamicObject(9339, -2377.1000976563, 1997.4000244141, 10.300000190735, 0, 0, 270);
	CreateDynamicObject(9339, -2357.6000976563, 1997.4000244141, 10.300000190735, 0, 0, 269.99996948242);
	CreateDynamicObject(9339, -2344.6999511719, 1984.4000244141, 10.300000190735, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1958.4000244141, 10.300000190735, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1932.3000488281, 10.300000190735, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1906.5, 10.300000190735, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1984.5, 11.699999809265, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1958.4000244141, 11.699999809265, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1932.4000244141, 11.699999809265, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1906.3000488281, 11.699999809265, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1984.5, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1958.4000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1932.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(9339, -2344.6999511719, 1906.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(9339, -2403.3000488281, 1905.5, 10.300000190735, 0, 0, 78);
	CreateDynamicObject(9339, -2378, 1900.0999755859, 10.300000190735, 0, 0, 78);
	CreateDynamicObject(9339, -2403.3999023438, 1905.5, 11.699999809265, 0, 0, 78);
	CreateDynamicObject(9339, -2378, 1900.0999755859, 11.699999809265, 0, 0, 258);
	CreateDynamicObject(9339, -2403.3999023438, 1905.5, 13.10000038147, 0, 0, 78);
	CreateDynamicObject(9339, -2377.8999023438, 1900.0999755859, 13.10000038147, 0, 0, 258);
	CreateDynamicObject(9339, -2403.1999511719, 1997.4000244141, 11.699999809265, 0, 0, 90);
	CreateDynamicObject(9339, -2403.1999511719, 1997.4000244141, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(9339, -2377.1000976563, 1997.4000244141, 11.699999809265, 0, 0, 270);
	CreateDynamicObject(9339, -2377.1000976563, 1997.4000244141, 13.10000038147, 0, 0, 269.99996948242);
	CreateDynamicObject(9339, -2357.6000976563, 1997.4000244141, 11.699999809265, 0, 0, 269.99996948242);
	CreateDynamicObject(9339, -2357.6000976563, 1997.4000244141, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(6959, -2254.599609375, 2011.69921875, 14.699999809265, 0, 0, 0);
	CreateDynamicObject(6959, -2233.8999023438, 2012.3000488281, -5.3000001907349, 90, 180.69116210938, 269.30883789063);
	CreateDynamicObject(6959, -2254.6000976563, 2026.5999755859, 14.699999809265, 0, 0, 0);
	CreateDynamicObject(6959, -2254.1000976563, 2046.5999755859, -5.9000000953674, 0, 90, 90);
	CreateDynamicObject(6959, -2234.1000976563, 2026.6999511719, -6, 0, 270, 0);
	CreateDynamicObject(6959, -2253.8999023438, 1991.5999755859, -5.9000000953674, 0, 270, 89.999481201172);
	CreateDynamicObject(9339, -2274.8999023438, 2025.4000244141, 12.199999809265, 0, 0, 0);
	CreateDynamicObject(9339, -2274.8999023438, 2025.4000244141, 13.60000038147, 0, 0, 0);
	CreateDynamicObject(9339, -2274.8999023438, 2033.6999511719, 12.199999809265, 0, 0, 0);
	CreateDynamicObject(9339, -2274.8999023438, 2033.6999511719, 13.60000038147, 0, 0, 0);
	CreateDynamicObject(9339, -2274.8999023438, 2033.6999511719, 14, 0, 0, 0);
	CreateDynamicObject(9339, -2274.8999023438, 2025.4000244141, 14, 0, 0, 0);
	CreateDynamicObject(9339, -2274.1999511719, 2046.5, 1.6000000238419, 90, 180.04396057129, 89.955993652344);
	CreateDynamicObject(9339, -2274.8000488281, 1989.5, 10.300000190735, 0, 0, 0);
	CreateDynamicObject(9339, -2274.8000488281, 1989.5, 11.699999809265, 0, 0, 0);
	CreateDynamicObject(9339, -2274.8000488281, 1989.5, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(9339, -2274.8000488281, 1989.5, 14, 0, 0, 0);
	CreateDynamicObject(9339, -2274.1000976563, 1991.9000244141, 1.7000000476837, 90, 179.9560546875, 90.043853759766);
	CreateDynamicObject(9339, -2429, 1907.4000244141, 11.5, 0, 0, 274);
	CreateDynamicObject(9339, -2441.8999023438, 1893.5999755859, 11.5, 0, 0, 0);
	CreateDynamicObject(9339, -2429, 1907.4000244141, 12.89999961853, 0, 0, 274);
	CreateDynamicObject(9339, -2441.8999023438, 1893.5999755859, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(9339, -2396.8999023438, 1891, 10.300000190735, 0, 0, 0);
	CreateDynamicObject(9339, -2396.8999023438, 1891, 11.699999809265, 0, 0, 0);
	CreateDynamicObject(9339, -2396.8999023438, 1891, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(657, -2487.6000976563, 1924, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(657, -2488.3000488281, 1929, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(660, -2484.8999023438, 1929, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(660, -2484.1000976563, 1932.1999511719, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(660, -2487.3999023438, 1932.1999511719, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(669, -2485.8000488281, 1932.5999755859, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(640, -2477.8999023438, 1932.3000488281, 10.300000190735, 0, 0, 0);
	CreateDynamicObject(640, -2477.1999511719, 1932.0999755859, 10.300000190735, 0, 0, 0);
	CreateDynamicObject(647, -2479.6000976563, 1932.5999755859, 11.39999961853, 0, 0, 0);
	CreateDynamicObject(1290, -2481.1999511719, 1924.8000488281, 8.3000001907349, 0, 0, 60);
	CreateDynamicObject(1291, -2476.8999023438, 1927.5999755859, 10.10000038147, 0, 0, 0);
	CreateDynamicObject(1226, -2462, 1934.1999511719, 13.39999961853, 0, 0, 0);
	CreateDynamicObject(1211, -2458.3999023438, 1959.3000488281, 10, 0, 0, 0);
	CreateDynamicObject(10183, -2375.6999511719, 1895.1999511719, 9.6000003814697, 0, 0, 34);
	CreateDynamicObject(3934, -2365.6999511719, 1892.1999511719, 14.300000190735, 0, 0, 0);
	CreateDynamicObject(3935, -2416, 1934.0999755859, 12, 0, 0, 68);
	CreateDynamicObject(3935, -2416.1000976563, 1945.4000244141, 12.10000038147, 0, 0, 126);
	CreateDynamicObject(10244, -2376.1999511719, 1890.9000244141, 10.699999809265, 0, 0, 269.99996948242);
	CreateDynamicObject(996, -2464.8000488281, 1933.9000244141, 10.300000190735, 0, 0, 266);
	CreateDynamicObject(996, -2459.1999511719, 1934.4000244141, 10.300000190735, 0, 0, 268);
	CreateDynamicObject(996, -2472.6999511719, 1886.8000488281, 10.199999809265, 0, 0, 0);
	CreateDynamicObject(996, -2464.5, 1886.8000488281, 10.199999809265, 0, 0, 0);
	CreateDynamicObject(994, -2457, 1886.8000488281, 9.3999996185303, 0, 0, 292);
	CreateDynamicObject(1594, -2468.3999023438, 1883.5999755859, 9.8999996185303, 0, 0, 0);
	CreateDynamicObject(1594, -2464.8000488281, 1884.8000488281, 9.8999996185303, 0, 0, 0);
	CreateDynamicObject(3657, -2460.3000488281, 1886.4000244141, 9.8999996185303, 0, 0, 0);
	CreateDynamicObject(1340, -2471.1999511719, 1884.3000488281, 10.5, 0, 0, 0);
	CreateDynamicObject(1363, -2467.1999511719, 1879.8000488281, 10.5, 0, 0, 0);
	CreateDynamicObject(1549, -2469.5, 1886.5999755859, 9.3999996185303, 0, 0, 0);
	CreateDynamicObject(1549, -2463.6999511719, 1886.5999755859, 9.6999998092651, 0, 0, 0);
	CreateDynamicObject(13630, -1974.9000244141, 2790.8000488281, 155.69999694824, 0, 0, 0);
	CreateDynamicObject(17513, -2293.3994140625, 1981.8994140625, -7.1999998092651, 0, 0, 270);
	CreateDynamicObject(3452, -2321.1000976563, 1977.8000488281, 3.5, 0, 0, 269.99996948242);
	CreateDynamicObject(947, -2309.6999511719, 1980.0999755859, 3, 0, 0, 268);
	CreateDynamicObject(947, -2282, 1980.0999755859, 3, 0, 0, 90);
	CreateDynamicObject(2063, -2284.3000488281, 1991.1999511719, 1.7000000476837, 0, 0, 0);
	CreateDynamicObject(2114, -2284.6999511719, 1991.1999511719, 1.2999999523163, 0, 0, 0);
	CreateDynamicObject(2114, -2285.1000976563, 1991.1999511719, 2.5999999046326, 0, 0, 0);
	CreateDynamicObject(2114, -2284.1999511719, 1991.1999511719, 1.2999999523163, 0, 0, 0);
	CreateDynamicObject(2114, -2283.5, 1991.0999755859, 1.7999999523163, 0, 0, 0);
	CreateDynamicObject(971, -2519.8999023438, 2894.5, 103.30000305176, 0, 0, 0);
	CreateDynamicObject(8673, -2284.3000488281, 1970.0999755859, 2.0999999046326, 0, 0, 0);
	CreateDynamicObject(8673, -2301, 1970.0999755859, 2.0999999046326, 0, 0, 0);
	CreateDynamicObject(8673, -2274.3999023438, 1980.0999755859, 2.0999999046326, 0, 0, 269.99996948242);
	CreateDynamicObject(3819, -2276.8999023438, 1987, 1.7999999523163, 0, 0, 0);
	CreateDynamicObject(3819, -2276.8999023438, 1978.4000244141, 1.7999999523163, 0, 0, 0);
	CreateDynamicObject(1808, -2282.6999511719, 1991.3000488281, 0.80000001192093, 0, 0, 0);
	CreateDynamicObject(1808, -2282.1999511719, 1991.3000488281, 0.80000001192093, 0, 0, 0);
	CreateDynamicObject(1808, -2281.6999511719, 1991.3000488281, 0.80000001192093, 0, 0, 0);
	CreateDynamicObject(17033, -2262.6000976563, 1990.5999755859, 0.69999998807907, 0, 0, 146);
	CreateDynamicObject(17033, -2271, 1982.6999511719, 0.5, 0, 0, 225.99975585938);
	CreateDynamicObject(17033, -2258.5, 1977.1999511719, 0.5, 0, 0, 53.997802734375);
	CreateDynamicObject(3930, -2264.6999511719, 1977.6999511719, 0.69999998807907, 0, 0, 0);
	CreateDynamicObject(3528, -2265.8000488281, 1987.5, 6.4000000953674, 0, 0, 266);
	CreateDynamicObject(3461, -2261, 1976.6999511719, 4.6999998092651, 0, 0, 0);
	CreateDynamicObject(3461, -2269.1000976563, 1974.6999511719, 4, 0, 0, 0);
	CreateDynamicObject(3461, -2268.1999511719, 1984.0999755859, 4.6999998092651, 0, 0, 0);
	CreateDynamicObject(3461, -2259.6000976563, 1975.0999755859, 5.3000001907349, 0, 0, 0);
	CreateDynamicObject(3461, -2264.8999023438, 1978.5, 2.4000000953674, 0, 0, 0);
	CreateDynamicObject(3461, -2261.1999511719, 1988.1999511719, 4.5999999046326, 0, 0, 0);
	CreateDynamicObject(3461, -2269.8000488281, 1980.0999755859, 5.3000001907349, 0, 0, 0);
	CreateDynamicObject(640, -2297.1999511719, 1923, 1.2999999523163, 0, 0, 0);
	CreateDynamicObject(647, -2312.8999023438, 1964.4000244141, 2.5, 0, 0, 0);
	CreateDynamicObject(647, -2314.6000976563, 1965.9000244141, 2.5, 0, 0, 0);
	CreateDynamicObject(647, -2312, 1965.6999511719, 2.5, 0, 0, 0);
	CreateDynamicObject(2952, -2586.6000976563, 1986, 11.10000038147, 0, 0, 322);
	CreateDynamicObject(2952, -2587.8999023438, 1984.3000488281, 13.800000190735, 0, 90, 141.99993896484);
	CreateDynamicObject(910, -2581.1999511719, 1994.0999755859, 10.800000190735, 0, 0, 56);
	CreateDynamicObject(852, -2579.3999023438, 1995.6999511719, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(3099, -2574.5, 1999.1999511719, 9.6000003814697, 0, 0, 52);
	CreateDynamicObject(2890, -2572.1999511719, 1992.4000244141, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(2890, -2568.8000488281, 1992.1999511719, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(2744, -2577.3000488281, 1987.1999511719, 13, 0, 0, 0);
	CreateDynamicObject(1358, -2587.5, 1972.1999511719, 10.800000190735, 0, 0, 0);
	CreateDynamicObject(1265, -2590.1999511719, 1976.3000488281, 10, 0, 0, 0);
	CreateDynamicObject(1265, -2589.3000488281, 1975.6999511719, 10, 0, 0, 0);
	CreateDynamicObject(1265, -2590.3999023438, 1975.3000488281, 10, 0, 0, 0);
	CreateDynamicObject(2672, -2585.3000488281, 1974, 9.8000001907349, 0, 0, 0);
	CreateDynamicObject(2673, -2588.6000976563, 1974.5, 9.6000003814697, 0, 0, 0);
	CreateDynamicObject(2676, -2585, 1989.4000244141, 11.300000190735, 0, 0, 0);
	CreateDynamicObject(2631, -2296, 1964.0999755859, 8.1000003814697, 358, 180, 270);
	CreateDynamicObject(1961, -2475.1000976563, 1987, 17.60000038147, 0, 0, 26);
	CreateDynamicObject(1961, -2474.6999511719, 1987.1999511719, 18.299999237061, 0, 0, 20);
	CreateDynamicObject(1961, -2475.5, 1986.9000244141, 18.299999237061, 0, 0, 18);
	CreateDynamicObject(1961, -2474.3999023438, 1987.4000244141, 19.10000038147, 0, 0, 22);
	CreateDynamicObject(1961, -2475.8000488281, 1986.8000488281, 19.10000038147, 0, 0, 26);
	CreateDynamicObject(1961, -2474.1000976563, 1987.5, 19.89999961853, 0, 0, 20);
	CreateDynamicObject(1961, -2476, 1986.5999755859, 19.89999961853, 0, 0, 26);
	CreateDynamicObject(1961, -2476.3000488281, 1986.5, 20.700000762939, 0, 0, 24);
	CreateDynamicObject(1961, -2473.8000488281, 1987.5999755859, 20.700000762939, 0, 0, 28);
	CreateDynamicObject(1961, -2473.6000976563, 1987.6999511719, 21.60000038147, 0, 0, 24);
	CreateDynamicObject(1961, -2476.6000976563, 1986.4000244141, 21.60000038147, 0, 0, 22);
	CreateDynamicObject(1962, -2479.1999511719, 1985.3000488281, 17.60000038147, 0, 0, 24);
	CreateDynamicObject(1962, -2479.1999511719, 1985.3000488281, 18.299999237061, 0, 0, 24);
	CreateDynamicObject(1962, -2479.1999511719, 1985.3000488281, 19.10000038147, 0, 0, 24);
	CreateDynamicObject(1962, -2479.1999511719, 1985.3000488281, 19.89999961853, 0, 0, 24);
	CreateDynamicObject(1962, -2479.1999511719, 1985.3000488281, 20.700000762939, 0, 0, 24);
	CreateDynamicObject(1962, -2479.1999511719, 1985.3000488281, 21.60000038147, 0, 0, 24);
	CreateDynamicObject(1960, -2482.1999511719, 1983.9000244141, 17.700000762939, 0, 0, 28);
	CreateDynamicObject(1960, -2482.1999511719, 1983.9000244141, 18.39999961853, 0, 0, 28);
	CreateDynamicObject(1960, -2482.1999511719, 1983.9000244141, 19.10000038147, 0, 0, 28);
	CreateDynamicObject(1960, -2482.1999511719, 1983.9000244141, 19.799999237061, 0, 0, 28);
	CreateDynamicObject(1960, -2482.1999511719, 1983.9000244141, 20.60000038147, 0, 0, 20);
	CreateDynamicObject(1960, -2482.1999511719, 1983.9000244141, 21.39999961853, 0, 0, 26);
	CreateDynamicObject(1960, -2482.8000488281, 1983.6999511719, 22, 0, 0, 20);
	CreateDynamicObject(1960, -2482.8000488281, 1983.5999755859, 19.60000038147, 0, 0, 24);
	CreateDynamicObject(1960, -2484, 1983.0999755859, 21.700000762939, 0, 0, 24);
	CreateDynamicObject(1960, -2484.1999511719, 1983.0999755859, 21, 0, 0, 12);
	CreateDynamicObject(1960, -2483.3999023438, 1983.3000488281, 19.799999237061, 0, 0, 22);
	CreateDynamicObject(1960, -2483.8999023438, 1983.0999755859, 20.299999237061, 0, 0, 26);
	CreateDynamicObject(1960, -2483.3999023438, 1983.3000488281, 22, 0, 0, 26);
	CreateDynamicObject(3660, -2336.6999511719, 2061.1000976563, 12.10000038147, 0, 0, 0);
	CreateDynamicObject(3660, -2326.3999023438, 2052.1000976563, 12.10000038147, 0, 0, 269.99996948242);
	CreateDynamicObject(3660, -2326.3999023438, 2032.5999755859, 12.10000038147, 0, 0, 269.99996948242);
	CreateDynamicObject(1290, -2327.8999023438, 2059.6999511719, 15.39999961853, 0, 0, 0);
	CreateDynamicObject(1290, -2346.3000488281, 2059.6999511719, 15.39999961853, 0, 0, 0);
	CreateDynamicObject(1290, -2326.1000976563, 2022.4000244141, 15.60000038147, 0, 0, 0);
	CreateDynamicObject(1290, -2346, 2027.8000488281, 15.60000038147, 0, 0, 0);
	CreateDynamicObject(974, -2278.1000976563, 2038.5999755859, 17.799999237061, 0, 0, 0);
	CreateDynamicObject(974, -2271, 2012.5, 11.39999961853, 0, 10, 0);
	CreateDynamicObject(974, -2264.8000488281, 2012.5, 9.8000001907349, 0, 12, 0);
	CreateDynamicObject(974, -2264.3000488281, 2013.0999755859, 8.8000001907349, 0, 0, 0);
	CreateDynamicObject(974, -2264.3000488281, 2012.8000488281, 9.5, 0, 0, 0);
	CreateDynamicObject(974, -2272.8000488281, 2013, 5.6999998092651, 0, 0, 0);
	CreateDynamicObject(974, -2268.8000488281, 2013.0999755859, 7.5, 0, 346, 0);
	CreateDynamicObject(974, -2271.5, 2002.5, 11.5, 0, 0, 0);
	CreateDynamicObject(974, -2265.8999023438, 2002.5, 9.8999996185303, 0, 0, 0);
	CreateDynamicObject(974, -2260.5, 2002.5, 9.3999996185303, 0, 0, 0);
	CreateDynamicObject(974, -2254.6000976563, 2004.0999755859, 9.3999996185303, 0, 0, 28);
	CreateDynamicObject(974, -2252, 2008.0999755859, 9.3999996185303, 0, 0, 68);
	CreateDynamicObject(974, -2251.6000976563, 2012.1999511719, 9.3999996185303, 0, 0, 269.99996948242);
	CreateDynamicObject(974, -2252.6000976563, 2018.4000244141, 9.3999996185303, 0, 0, 294);
	CreateDynamicObject(974, -2256.1000976563, 2021.6999511719, 9.3999996185303, 0, 0, 330);
	CreateDynamicObject(974, -2260.6000976563, 2022.5999755859, 9.3999996185303, 0, 0, 0);
	CreateDynamicObject(974, -2265.6999511719, 2022.5999755859, 8.1000003814697, 0, 0, 0);
	CreateDynamicObject(974, -2272.6999511719, 2022.5999755859, 6.5, 0, 0, 0);
	CreateDynamicObject(974, -2267.8999023438, 2022.5999755859, 7.5999999046326, 0, 0, 0);
	CreateDynamicObject(3660, -2315.6000976563, 1992.5999755859, 5.5, 0, 0, 0);
	CreateDynamicObject(3660, -2558.6999511719, 1868.9000244141, 12.10000038147, 0, 0, 0);
	CreateDynamicObject(3660, -2539.1000976563, 1868.5999755859, 12.10000038147, 0, 0, 358);
	CreateDynamicObject(7022, -2485, 1845.4000244141, 11.800000190735, 0, 0, 0);
	CreateDynamicObject(3660, -2318.6000976563, 1839.8000488281, 12.199999809265, 0, 0, 269.99996948242);
	CreateDynamicObject(6959, -2240, 1890.5, -10.60000038147, 90, 180.69604492188, 89.303894042969);
	CreateDynamicObject(6959, -2219.3999023438, 1911.0999755859, -10.60000038147, 90, 179.92407226563, 180.07591247559);
	CreateDynamicObject(6959, -2240.1000976563, 1878.4000244141, -11.199999809265, 0, 270, 0);
	CreateDynamicObject(6959, -2219.3999023438, 1858.4000244141, -10.5, 90, 179.30395507813, 180.69604492188);
	CreateDynamicObject(3749, -2254.1000976563, 1871.6999511719, 15.39999961853, 0, 0, 269.99996948242);
	CreateDynamicObject(640, -2239.6999511719, 1860.9000244141, 10.199999809265, 0, 0, 0);
	CreateDynamicObject(640, -2236.8999023438, 1858.5999755859, 10.199999809265, 0, 0, 269.99996948242);
	CreateDynamicObject(640, -2231.6000976563, 1858.5999755859, 10.199999809265, 0, 0, 269.99996948242);
	CreateDynamicObject(640, -2239.8999023438, 1908.5, 10.10000038147, 0, 0, 0);
	CreateDynamicObject(640, -2237, 1910.9000244141, 10.10000038147, 0, 0, 269.99996948242);
	CreateDynamicObject(829, -2239.3999023438, 1908.4000244141, 9.5, 0, 0, 318);
	CreateDynamicObject(830, -2238.3000488281, 1909.5999755859, 9.8999996185303, 0, 0, 276);
	CreateDynamicObject(830, -2238.1999511719, 1860.5999755859, 10.10000038147, 0, 0, 14);
	CreateDynamicObject(829, -2236.3000488281, 1859.5999755859, 10.10000038147, 0, 0, 196);
	CreateDynamicObject(829, -2234.5, 1859.4000244141, 9.6999998092651, 0, 0, 207.99998474121);
	CreateDynamicObject(829, -2232.6999511719, 1859.3000488281, 9.3999996185303, 0, 0, 211.99996948242);
	CreateDynamicObject(1696, -2607.1000976563, 2232.3999023438, 4.3000001907349, 0, 0, 0);
	CreateDynamicObject(1696, -2606.5, 2237.5, 4.3000001907349, 0, 0, 179.99993896484);
	CreateDynamicObject(2773, -2609.3999023438, 2240.1000976563, 4.5, 0, 0, 0);
	CreateDynamicObject(2773, -2609.3999023438, 2242.5, 4.5, 0, 0, 0);
	CreateDynamicObject(2773, -2609.3999023438, 2237.8999023438, 4.9000000953674, 342, 0, 0);
	CreateDynamicObject(2773, -2609.3000488281, 2232.3000488281, 5, 18, 0, 0);
	CreateDynamicObject(2773, -2609.3000488281, 2235, 5.5999999046326, 0, 0, 0);
	//Zoll SF/LV1
	CreateDynamicObject(9623, -1316.213013, 914.180481, 47.887569, 0.0000, 0.0000, 317.0282);
	CreateDynamicObject(3615, -1316.460449, 914.118896, 52.520992, 0.0000, 0.0000, 47.2690);
	CreateDynamicObject(967, -1317.915283, 910.410400, 45.176353, 0.0000, 0.0000, 225.9278);
	CreateDynamicObject(967, -1314.851440, 918.781128, 45.123016, 0.0000, 0.0000, 48.1284);
	CreateDynamicObject(966, -1317.268799, 912.006592, 45.377136, 0.0000, 0.0000, 137.4053);
	CreateDynamicObject(968, -1317.237061, 911.939270, 46.211372, 0.0000, 0.0000, 317.0282);
	CreateDynamicObject(966, -1315.427979, 917.032166, 45.150112, 0.0000, 0.0000, 315.3093);
	CreateDynamicObject(968, -1315.421753, 917.093323, 46.045818, 0.0000, 0.0000, 311.8716);
	CreateDynamicObject(981, -1318.744263, 911.925720, 51.409935, 0.0000, 0.0000, 317.0282);
	CreateDynamicObject(981, -1314.255005, 916.879761, 51.409935, 0.0000, 0.0000, 137.5099);
	CreateDynamicObject(8168, -1318.174561, 927.419373, 46.797974, 0.0000, 0.0000, 62.7388);
	CreateDynamicObject(8168, -1314.332397, 901.353577, 47.022987, 0.0000, 0.0000, 243.9762);
	CreateDynamicObject(3504, -1311.706177, 904.844482, 46.496700, 0.0000, 0.0000, 45.5501);
	CreateDynamicObject(3504, -1310.757813, 905.806946, 46.525364, 0.0000, 0.0000, 46.4095);
	CreateDynamicObject(967, -1309.871094, 901.371155, 45.245338, 0.0000, 0.0000, 316.1687);
	CreateDynamicObject(967, -1315.883301, 912.171021, 50.683460, 0.0000, 0.0000, 317.8876);
	CreateDynamicObject(970, -1313.427612, 895.637451, 45.803722, 0.0000, 0.8594, 317.8876);
	CreateDynamicObject(970, -1318.954468, 933.092590, 45.659561, 0.0000, 0.0000, 316.1687);
	CreateDynamicObject(978, -1317.942749, 895.745361, 46.214565, 0.0000, 0.0000, 96.2569);
	CreateDynamicObject(978, -1314.422241, 932.957825, 45.784428, 0.0000, 0.0000, 275.7753);
	CreateDynamicObject(983, -1303.997437, 912.414673, 45.766956, 0.0000, 0.0000, 317.0282);
	CreateDynamicObject(983, -1310.898438, 918.872437, 46.160103, 0.0000, 0.0000, 316.1687);
	CreateDynamicObject(983, -1321.896973, 910.585754, 46.058414, 0.0000, 0.0000, 317.0282);
	CreateDynamicObject(983, -1328.173462, 916.445923, 45.955948, 0.0000, 0.0000, 317.0282);
	CreateDynamicObject(983, -1333.202148, 912.523560, 46.021427, 0.0000, 0.0000, 298.9801);
	CreateDynamicObject(983, -1299.088501, 916.346375, 45.664963, 0.0000, 0.0000, 300.6989);
	CreateDynamicObject(1237, -1296.350342, 917.946838, 44.937809, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1237, -1308.728271, 921.184570, 45.436096, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1237, -1336.005737, 911.101318, 45.418400, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3267, -1318.273560, 915.666321, 54.280598, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3461, -1318.926025, 910.518188, 47.522240, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3461, -1314.080078, 918.371582, 47.447235, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1262, -1313.951782, 918.549927, 48.990673, 0.0000, 0.0000, 341.9518);
	CreateDynamicObject(1262, -1319.039795, 910.373840, 48.976051, 0.0000, 0.0000, 151.2610);
	CreateDynamicObject(3877, -1300.210449, 904.653870, 52.349201, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, -1305.628174, 898.889526, 52.349201, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, -1332.214355, 923.788208, 52.349201, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, -1326.803345, 929.467346, 52.349201, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(7073, -1267.090576, 966.602295, 86.137558, 0.0000, 0.0000, 45.5501);
	CreateDynamicObject(3666, -1336.019897, 911.027344, 47.188343, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1334.613525, 911.715759, 45.908287, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1333.196045, 912.513916, 45.885128, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1331.799805, 913.299194, 45.862328, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1330.314087, 914.084534, 46.463753, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1328.727417, 912.760620, 46.463753, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1323.916138, 908.240662, 46.463753, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1322.369751, 906.804016, 46.463753, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1318.852417, 899.625671, 45.877312, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1318.511841, 897.187317, 45.900166, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1318.283203, 895.330383, 45.917889, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1318.095093, 893.666626, 45.933937, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1317.909424, 891.731262, 46.151302, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1318.245361, 900.483826, 49.192921, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1315.033813, 897.319641, 49.192921, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1308.655029, 921.198975, 47.207600, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1310.377930, 922.587402, 46.463753, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1301.979736, 914.781128, 46.463753, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1303.532715, 916.216675, 46.463753, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1300.467896, 915.486572, 45.517418, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1299.121460, 916.326355, 45.494534, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1297.765259, 917.152466, 45.471703, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1296.342407, 917.932373, 46.615273, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1313.244141, 929.127258, 45.504181, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1313.472778, 930.617615, 45.487270, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1313.742432, 932.021606, 45.474865, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1314.067749, 933.611084, 45.461025, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1314.248535, 935.338562, 45.444218, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1314.452881, 937.637756, 45.628536, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1314.329834, 936.640259, 45.386829, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1314.210815, 928.214111, 48.967907, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -1317.454590, 931.415527, 48.967907, 0.0000, 0.0000, 0.0000);
	//Zoll SF/LV2
	CreateDynamicObject(9623, -2266.939941, 2676.573975, 57.180134, 0.0000, 0.0000, 272.3375);
	CreateDynamicObject(9623, -2267.637695, 2640.311035, 57.223972, 0.0000, 0.0000, 91.1002);
	CreateDynamicObject(8168, -2269.635254, 2635.709473, 56.152649, 0.0000, 0.0000, 289.5262);
	CreateDynamicObject(8168, -2264.738281, 2681.421631, 56.307243, 0.0000, 0.0000, 109.1483);
	CreateDynamicObject(967, -2262.571289, 2669.749023, 54.662422, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(967, -2271.526855, 2647.377930, 54.812500, 0.0000, 0.0000, 180.3774);
	CreateDynamicObject(966, -2269.944092, 2647.979492, 54.337471, 0.0000, 0.0000, 91.9597);
	CreateDynamicObject(966, -2263.976563, 2669.056396, 54.200180, 0.0000, 0.0000, 269.7592);
	CreateDynamicObject(968, -2263.960449, 2669.056885, 54.934410, 0.0000, 0.0000, 269.7592);
	CreateDynamicObject(968, -2269.914063, 2647.961426, 55.191963, 0.0000, 0.0000, 273.1970);
	CreateDynamicObject(978, -2253.937988, 2638.650879, 55.207970, 0.0000, 0.0000, 329.9197);
	CreateDynamicObject(978, -2253.374512, 2630.868896, 55.606808, 0.0000, 0.0000, 342.8113);
	CreateDynamicObject(978, -2253.268311, 2679.542236, 54.880127, 0.0000, 0.0000, 220.7712);
	CreateDynamicObject(978, -2253.145752, 2687.722168, 55.289509, 0.0000, 0.0000, 213.0362);
	CreateDynamicObject(981, -2263.591309, 2677.208252, 60.727501, 0.0000, 0.0000, 92.8191);
	CreateDynamicObject(981, -2270.374512, 2677.084961, 60.777504, 0.0000, 0.0000, 272.3375);
	CreateDynamicObject(981, -2270.968018, 2640.262695, 60.771339, 0.0000, 0.0000, 271.4781);
	CreateDynamicObject(981, -2264.284912, 2640.820313, 60.746338, 0.0000, 0.8594, 91.9597);
	CreateDynamicObject(984, -2267.709473, 2633.930176, 58.445580, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(984, -2266.947754, 2682.116455, 58.600174, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3475, -2270.966064, 2687.846436, 57.233780, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3475, -2271.251221, 2650.928955, 57.188675, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3475, -2268.708984, 2628.868896, 57.188675, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3475, -2262.401367, 2665.848145, 56.915928, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2256.512939, 2669.107422, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2255.297852, 2668.130127, 54.979332, 0.0000, 0.0000, 0.0000);
	CreateObject(3666, -2254.030029, 2667.180908, 54.944027, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2258.873535, 2668.979736, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateObject(3666, -2260.279297, 2669.725342, 55.112873, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2261.541992, 2670.420166, 55.146877, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2256.357178, 2676.450195, 54.916943, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2254.966797, 2677.649170, 54.637215, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2253.715820, 2678.727783, 54.575489, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2252.386475, 2679.874268, 54.567753, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2250.952148, 2681.177002, 54.458443, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2249.612061, 2682.266602, 54.561520, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2251.690430, 2688.178223, 54.854427, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2253.115479, 2687.219971, 54.894238, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2254.836426, 2686.080811, 54.942295, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2256.793701, 2684.962891, 55.013355, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2257.171143, 2685.123535, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2257.214600, 2687.120605, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2262.366943, 2678.138916, 58.477177, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2262.663086, 2680.729980, 58.477177, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2262.641846, 2682.224365, 58.477177, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2262.654297, 2684.911133, 58.477177, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2272.125977, 2639.026855, 58.470581, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2271.895508, 2636.473145, 58.322582, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2271.747314, 2634.860107, 58.322582, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2271.727783, 2632.140381, 58.322582, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2272.843750, 2648.090820, 55.326183, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2272.495117, 2646.788086, 55.326183, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2274.540527, 2648.031250, 55.326183, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2275.561523, 2648.038818, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2277.864258, 2647.975586, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2277.985352, 2650.090576, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2277.786621, 2640.672363, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2277.736328, 2638.556152, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2275.362305, 2640.697510, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2272.575439, 2640.782471, 55.261356, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2277.661377, 2633.569092, 55.326183, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2277.622314, 2631.914307, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2277.585693, 2629.985840, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, -2271.988770, 2631.881592, 56.314655, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1214, -2277.493408, 2636.123291, 54.423698, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1214, -2276.415283, 2681.323486, 54.444778, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2276.563721, 2677.737061, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2276.468262, 2675.640625, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2274.696289, 2677.827881, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2274.593994, 2675.702881, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2276.865234, 2684.347412, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2276.951416, 2686.336914, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2277.746582, 2687.487061, 55.385330, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2274.971191, 2684.429932, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2274.370361, 2668.386963, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2276.362305, 2668.303223, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2276.275391, 2666.660400, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2256.816406, 2676.406494, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2259.239014, 2676.338867, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2256.903076, 2678.461914, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2259.348633, 2678.430176, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2259.624512, 2685.054199, 55.756317, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3461, -2262.035889, 2676.268799, 56.199570, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3461, -2272.172607, 2640.629639, 56.708633, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, -2272.498535, 2638.876221, 56.271938, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, -2262.124268, 2680.393311, 55.919823, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, -2272.036377, 2676.992676, 56.369576, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1262, -2261.881836, 2676.208496, 57.520664, 0.0000, 0.0000, 259.4460);
	CreateDynamicObject(1262, -2272.319824, 2640.718506, 57.959949, 0.0000, 0.0000, 64.4577);
	CreateDynamicObject(1257, -2284.296631, 2630.494629, 56.091690, 0.0000, 0.0000, 274.0564);
	CreateDynamicObject(1257, -2241.318115, 2668.679688, 55.355560, 0.0000, 0.0000, 273.1970);
	CreateDynamicObject(1231, -2238.510254, 2669.560059, 56.728580, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3504, -2267.912354, 2678.304688, 55.758755, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3504, -2269.343506, 2678.329590, 55.772053, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3504, -2270.760254, 2678.313232, 55.772053, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3504, -2266.338867, 2632.691650, 56.154865, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3504, -2264.923096, 2632.677246, 56.154865, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3504, -2263.535400, 2632.676514, 56.156239, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2260.128174, 2648.331543, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2258.091797, 2648.397217, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2258.102051, 2650.461426, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2262.644043, 2640.912842, 55.261356, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2260.893066, 2640.936768, 55.261356, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2258.022461, 2641.045410, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2258.020020, 2638.923584, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2256.879150, 2640.729492, 54.957783, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2255.648193, 2640.025879, 54.890873, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2254.222412, 2639.190674, 54.960243, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2253.005615, 2638.485840, 54.892857, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2251.568115, 2637.674072, 54.868534, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2249.780273, 2636.617676, 54.996922, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2249.240479, 2630.065918, 55.253716, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2250.856201, 2630.681152, 55.261341, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2252.357910, 2631.175781, 55.265282, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2253.910156, 2631.806396, 55.273846, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2255.997803, 2632.406250, 55.285423, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2257.887451, 2632.356201, 55.800156, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, -2259.796631, 2632.275391, 55.800156, 0.0000, 0.0000, 0.0000);
	//Zoll LV/LS
	CreateDynamicObject(9623, 1703.393311, 420.600311, 32.387852, 0.8594, 0.0000, 341.0924);
	CreateDynamicObject(8168, 1690.812988, 416.034790, 31.457935, 359.1406, 358.2811, 87.6625);
	CreateDynamicObject(967, 1695.619873, 421.109039, 29.776402, 0.0000, 0.0000, 250.8517);
	CreateDynamicObject(1684, 1713.956177, 415.076080, 31.244030, 0.0000, 359.1406, 71.3332);
	CreateDynamicObject(3615, 1704.252808, 419.679688, 37.288700, 0.0000, 0.0000, 72.1926);
	CreateDynamicObject(8168, 1715.664551, 425.196899, 31.717644, 0.0000, 0.8594, 267.1809);
	CreateDynamicObject(3504, 1716.096436, 420.433197, 31.210398, 0.0000, 0.0000, 252.5705);
	CreateDynamicObject(966, 1710.343506, 417.368042, 29.787426, 0.0000, 0.0000, 337.6546);
	CreateDynamicObject(966, 1695.201904, 422.361572, 29.984745, 0.0000, 0.0000, 159.8555);
	ZollSchranke1= CreateObject(968, 1695.255737, 422.348175, 30.777655, -172.747348, 88.521979, -20.626481);
	ZollSchranke2= CreateObject(968, 1710.281616, 417.382324, 30.613562, -172.747348, 88.521979, 157.276915);
	CreateDynamicObject(984, 1691.635986, 432.609192, 30.629059, 0.0000, 0.0000, 39.5341);
	CreateDynamicObject(984, 1713.357666, 405.433136, 30.258385, 0.0000, 0.0000, 27.5020);
	CreateDynamicObject(983, 1689.263794, 410.176483, 30.261242, 0.0000, 0.0000, 301.5584);
	CreateDynamicObject(970, 1686.829834, 410.548248, 30.143816, 0.0000, 0.0000, 261.1648);
	CreateDynamicObject(970, 1680.552002, 410.305969, 30.187489, 0.0000, 0.0000, 37.8152);
	CreateDynamicObject(970, 1682.780396, 413.595825, 30.208130, 0.0000, 0.0000, 73.9115);
	CreateDynamicObject(970, 1682.792358, 417.573181, 30.237217, 0.0000, 0.0000, 285.2291);
	CreateDynamicObject(996, 1686.324707, 430.781097, 30.752840, 0.0000, 0.0000, 353.1245);
	CreateDynamicObject(997, 1689.646240, 420.264984, 29.828611, 0.0000, 0.0000, 53.2850);
	CreateDynamicObject(983, 1689.560791, 427.261108, 30.518585, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(983, 1717.280029, 431.160309, 30.724247, 0.0000, 0.0000, 302.4178);
	CreateDynamicObject(983, 1716.537598, 408.855377, 30.352781, 0.0000, 0.0000, 67.8954);
	CreateDynamicObject(970, 1719.720703, 430.818634, 30.585878, 0.0000, 0.0000, 82.5059);
	CreateDynamicObject(970, 1726.094238, 432.186371, 30.577738, 0.0000, 0.0000, 38.6747);
	CreateDynamicObject(970, 1723.943115, 428.884033, 30.611546, 0.0000, 0.0000, 75.6304);
	CreateDynamicObject(970, 1723.732056, 424.797241, 30.620333, 0.0000, 0.0000, 278.3536);
	CreateDynamicObject(11480, 1688.365967, 429.380981, 32.081207, 0.0000, 0.0000, 342.8113);
	CreateDynamicObject(981, 1702.082275, 417.405487, 36.083832, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(981, 1704.225830, 423.738037, 36.181202, 0.0000, 0.0000, 160.6102);
	CreateDynamicObject(3267, 1702.459473, 420.310883, 39.048306, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, 1684.687500, 422.618439, 36.789314, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(3877, 1687.366699, 430.339172, 36.909393, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(3877, 1722.074341, 418.487610, 36.909428, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(3877, 1719.383301, 410.813538, 36.789223, 0.0000, 0.0000, 341.9518);
	CreateDynamicObject(3877, 1716.436646, 399.914124, 30.885218, 0.0000, 0.0000, 339.3735);
	CreateDynamicObject(3877, 1701.296875, 416.155396, 31.696321, 0.0000, 0.0000, 341.9518);
	CreateDynamicObject(3877, 1704.521606, 425.605011, 31.904335, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(1216, 1689.159912, 412.572540, 30.318327, 0.0000, 0.0000, 341.9518);
	CreateDynamicObject(1231, 1683.995361, 426.644928, 31.390688, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, 1722.134766, 416.153046, 31.075579, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, 1714.996704, 420.802612, 31.444624, 0.0000, 0.0000, 69.6143);
	CreateDynamicObject(1638, 1717.220947, 406.358643, 31.648577, 0.0000, 0.0000, 158.8913);
	CreateDynamicObject(967, 1715.353149, 410.199677, 29.735188, 0.0000, 0.0000, 339.3735);
	CreateDynamicObject(967, 1705.478149, 417.839325, 35.153263, 0.0000, 0.0000, 342.8113);
	CreateDynamicObject(3666, 1715.574951, 401.151917, 30.415878, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1714.835449, 402.592651, 30.335018, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1714.125610, 404.018707, 30.236391, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1713.350586, 405.409210, 30.140383, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1712.601318, 406.904297, 30.166986, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1710.766724, 407.747559, 30.156946, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1709.671143, 408.203644, 30.818405, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1707.645142, 408.833435, 30.817495, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1686.511230, 408.471924, 30.064871, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1687.884155, 409.356689, 30.084757, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1689.268799, 410.159973, 30.098063, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1690.626099, 410.979919, 30.110907, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1691.978149, 411.829956, 30.132616, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1687.427612, 413.489716, 33.550411, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1691.883911, 411.954926, 33.526318, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1698.835938, 412.010895, 30.819767, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1700.767212, 411.398865, 30.820469, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1679.070923, 408.963531, 30.284889, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1687.711182, 437.469971, 30.683979, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1688.602295, 436.320068, 30.599072, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1689.604614, 435.068390, 30.547829, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1690.629639, 433.884460, 30.493593, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1692.653442, 433.263824, 30.454145, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1694.919922, 433.481232, 30.469061, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1697.071411, 433.475769, 31.115812, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1698.882080, 432.862274, 31.115908, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1705.198608, 430.711670, 31.116091, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1707.194580, 430.038330, 31.116238, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1714.530884, 429.481232, 30.551378, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1715.886108, 430.301208, 30.530178, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1717.253784, 431.144104, 30.553431, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1718.620728, 432.007385, 30.572020, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1719.987427, 432.858917, 30.554125, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1727.726807, 433.506805, 30.495304, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1718.840942, 427.594574, 33.926033, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 1714.701416, 429.117371, 33.945793, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3659, 1717.811890, 408.197968, 30.875292, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(638, 1697.399414, 429.046936, 30.708036, 0.0000, 0.0000, 340.2330);
	CreateDynamicObject(638, 1695.944824, 429.470825, 30.704590, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(638, 1704.072144, 426.707062, 30.648739, 0.0000, 0.0000, 340.2330);
	CreateDynamicObject(638, 1705.591309, 426.132202, 30.670990, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(638, 1709.106079, 412.334351, 30.424015, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(638, 1701.734253, 414.771606, 30.471567, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(638, 1700.145630, 415.342682, 30.515524, 0.0000, 0.0000, 341.0924);
	CreateDynamicObject(644, 1680.021973, 410.838776, 30.175955, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(644, 1681.636963, 412.197479, 30.169954, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(644, 1682.807739, 415.543030, 30.235407, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(644, 1682.187500, 418.041138, 30.306746, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(644, 1726.789063, 432.049622, 30.520903, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(644, 1724.772949, 430.365265, 30.563583, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(644, 1724.204712, 424.480438, 30.578043, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(644, 1723.914551, 426.787109, 30.572622, 0.0000, 0.0000, 0.0000);
	SetObjectRot(ZollSchranke1,0.0000, 0.000000, -9.298200);
	SetObjectRot(ZollSchranke2,0.0000, 0.000000, -9.298200);
	//Bank Interior by (C) InternetInk
	CreateObject(14789, 1424.690308, -1004.066162, 1643.018677, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(2774, 1433.026245, -1004.643921, 1635.819824, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2774, 1429.296997, -1004.618652, 1641.281128, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2774, 1440.957031, -979.682068, 1640.297729, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2774, 1429.337158, -979.545288, 1639.723389, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2774, 1449.314087, -984.505005, 1648.023193, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2774, 1413.914063, -984.515381, 1643.073486, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1886, 1448.510132, -1003.642944, 1647.093994, 19.7670, 0.0000, 223.3584);
	CreateDynamicObject(1886, 1414.706543, -980.604431, 1647.061646, 19.7670, 0.0000, 43.3584);
	CreateDynamicObject(2774, 1430.416870, -999.017273, 1638.722412, 0.0000, 269.7592, 0.0000);
	CreateDynamicObject(2774, 1408.149292, -998.996826, 1638.722412, 0.0000, 269.7592, 180.0000);
	CreateDynamicObject(2774, 1443.577271, -986.634644, 1638.723389, 0.0000, 269.7592, 270.0000);
	CreateDynamicObject(2774, 1443.604492, -998.998169, 1647.797485, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(11359, 1414.356201, -988.985352, 1639.795898, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(2774, 1413.927368, -986.011719, 1643.046997, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2774, 1413.763672, -992.085388, 1643.673340, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(626, 1427.554565, -997.322998, 1640.766479, 0.0000, 0.0000, 135.0000);
	CreateDynamicObject(626, 1427.488281, -990.752502, 1640.841553, 0.0000, 0.0000, 135.0000);
	CreateDynamicObject(2773, 1427.756714, -995.781189, 1639.310181, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 1427.694946, -992.841431, 1639.310181, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 1427.596924, -989.128601, 1639.301514, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 1429.863159, -982.927368, 1639.310181, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(626, 1427.665283, -983.128601, 1640.841553, 0.0000, 0.0000, 236.2500);
	CreateDynamicObject(2773, 1432.755859, -982.990784, 1639.310181, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(626, 1434.648315, -983.188904, 1640.841553, 0.0000, 0.0000, 236.2500);
	CreateDynamicObject(2773, 1437.091431, -983.054993, 1639.310181, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(2773, 1440.040283, -983.012756, 1639.310181, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(3462, 1448.466919, -993.014465, 1640.297974, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3462, 1448.512085, -982.992615, 1640.181519, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(626, 1441.636230, -997.047729, 1640.741455, 0.0000, 0.0000, 146.2500);
	CreateDynamicObject(14632, 1443.648682, -995.934631, 1638.667725, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(14632, 1432.156372, -1018.015259, 1639.988159, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1514, 1432.294922, -998.852478, 1639.740112, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1514, 1438.352539, -998.846741, 1639.815674, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2773, 1435.183838, -996.759277, 1639.301514, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 1435.152466, -993.932556, 1639.301514, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 1439.338623, -996.658691, 1639.301514, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 1439.288940, -994.000671, 1639.301514, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1723, 1426.280151, -994.863586, 1638.707275, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1723, 1426.244629, -991.150452, 1638.732300, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1723, 1422.277466, -996.935059, 1638.682251, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1723, 1422.279297, -993.210022, 1638.657227, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(2637, 1424.232422, -992.173584, 1638.838745, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2637, 1424.228516, -995.704163, 1638.838745, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(3657, 1432.633301, -987.739014, 1639.202393, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3657, 1432.631104, -986.977234, 1639.202393, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(3657, 1438.111572, -986.977539, 1639.202393, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(3657, 1438.086304, -987.730713, 1639.227417, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2961, 1439.028320, -999.826660, 1639.211304, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2961, 1433.505615, -999.827637, 1639.301392, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2946, 1414.355225, -990.513489, 1638.755615, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2946, 1414.380249, -987.392517, 1638.755005, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(2963, 1424.165283, -1004.815674, 1640.781128, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2963, 1426.806763, -1004.832520, 1640.826904, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1886, 1414.730591, -993.523010, 1646.908569, 17.1887, 0.0000, 67.5000);
	CreateDynamicObject(2773, 1431.414551, -996.845825, 1639.301514, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2773, 1431.473389, -994.017090, 1639.301514, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(632, 1434.735352, -987.757507, 1639.131226, 0.0000, 0.0000, 213.7500);
	CreateDynamicObject(2942, 1417.713623, -980.475159, 1639.363525, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1216, 1443.281372, -989.311279, 1639.387817, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2942, 1421.217163, -980.448914, 1639.385498, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2942, 1424.630493, -980.526672, 1639.371460, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1216, 1443.277832, -991.424866, 1639.424194, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1216, 1443.251221, -987.278198, 1639.376221, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1216, 1443.259766, -985.484985, 1639.376221, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2773, 1441.228638, -993.042969, 1639.301514, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2824, 1424.297241, -992.054932, 1639.247681, 0.0000, 0.0000, 78.7500);
	//Adminbase
	adminaufzug1 = CreateDynamicObject(980, 2500.287354, 2771.257568, 9.868746, 90.2408, 0.0000, 90.2408);
	adminaufzug2 = CreateDynamicObject(980, 2494.605957, 2771.261719, 9.897823, 268.8998, 0.0000, 90.2408);
	CreateDynamicObject(972, 2493.925537, 2779.067139, 9.927320, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(972, 2493.974854, 2754.151611, 9.817194, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(13296, 2528.219971, 2716.025146, 12.817301, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3627, 2554.608887, 2788.666504, 13.659800, 0.0000, 0.0000, 269.7592);
	CreateDynamicObject(3627, 2533.983154, 2771.882324, 13.659800, 0.0000, 0.0000, 89.3814);
	CreateDynamicObject(3627, 2561.271973, 2771.578613, 13.659800, 0.0000, 0.0000, 90.1365);
	CreateDynamicObject(3458, 2559.464844, 2744.381348, 13.091816, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3458, 2536.169434, 2744.387939, 13.070128, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3458, 2559.066650, 2762.544434, 13.241814, 0.0000, 0.0000, 180.4820);
	CreateDynamicObject(3458, 2535.757813, 2762.342041, 13.263210, 0.0000, 0.0000, 180.4820);
	CreateDynamicObject(4853, 2670.999756, 2852.332520, 12.716745, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(8172, 2729.481445, 2776.739258, 9.839675, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(8251, 2736.652344, 2712.988770, 13.751865, 0.0000, 0.0000, 90.2408);
	CreateDynamicObject(8251, 2712.834473, 2712.884521, 13.751865, 0.0000, 0.0000, 90.2408);
	CreateDynamicObject(8251, 2701.016602, 2747.505859, 13.748125, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(8947, 2686.135254, 2767.150635, 12.873093, 0.0000, 0.0000, 90.2408);
	CreateDynamicObject(8947, 2701.187012, 2793.579346, 12.873093, 0.0000, 0.0000, 91.1002);
	CreateDynamicObject(972, 2746.085938, 2731.093994, 9.820930, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(972, 2746.038330, 2784.259521, 9.820931, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(972, 2746.018066, 2808.938965, 9.820931, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(972, 2745.984131, 2833.784180, 9.826629, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(972, 2746.088867, 2842.722656, 9.832302, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(972, 2739.048340, 2854.037598, 9.820931, 0.0000, 0.0000, 89.3814);
	CreateDynamicObject(972, 2715.083252, 2854.118652, 9.820931, 0.0000, 0.0000, 89.3814);
	CreateDynamicObject(4882, 2676.312500, 2716.831543, 17.435432, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(8572, 2658.041992, 2707.990234, 11.795481, 0.0000, 0.0000, 270.6186);
	CreateDynamicObject(14414, 2699.208740, 2728.179688, 9.604809, 0.0000, 0.0000, 270.6186);
	CreateDynamicObject(8613, 2589.709229, 2787.521484, 14.355797, 0.0000, 0.0000, 268.0403);
	CreateDynamicObject(8613, 2600.048096, 2786.775146, 19.443649, 0.0000, 0.0000, 179.5180);
	CreateDynamicObject(8614, 2594.978516, 2786.420898, 17.046513, 0.0000, 0.0000, 87.6625);
	CreateDynamicObject(8614, 2744.486084, 2778.448242, 11.831146, 0.0000, 0.0000, 179.5180);
	CreateDynamicObject(8614, 2745.094727, 2774.614990, 15.071521, 0.0000, 0.0000, 179.5180);
	CreateDynamicObject(5822, 2590.354248, 2800.081543, 21.421850, 0.0000, 0.0000, 95.3974);
	CreateDynamicObject(14409, 2623.670166, 2805.286133, 28.587225, 7.7349, 0.0000, 89.3814);
	CreateDynamicObject(8615, 2653.543701, 2805.363525, 33.571877, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3277, 2630.276611, 2810.191162, 36.094814, 0.0000, 0.0000, 261.1648);
	CreateDynamicObject(3279, 2700.192871, 2710.992188, 22.022833, 0.0000, 0.0000, 178.6585);
	CreateDynamicObject(3279, 2502.602295, 2711.779785, 9.895929, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3279, 2501.792725, 2787.370361, 9.895929, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3279, 2710.252686, 2782.247314, 9.899669, 0.0000, 0.0000, 2.5783);
	CreateObject(3309, 2513.639404, 2833.686279, 11.196434, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3414, 2609.049072, 2822.004639, 12.019316, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3415, 2596.171631, 2847.511719, 9.827370, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3603, 2537.124023, 2681.278564, 15.516552, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3624, 2567.576172, 2752.137695, 14.475935, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3626, 2560.768555, 2847.936279, 11.337615, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3639, 2588.392334, 2810.471924, 14.224245, 0.0000, 0.0000, 179.6226);
	CreateDynamicObject(3640, 2573.906738, 2810.587158, 14.206935, 0.0000, 0.0000, 179.6226);
	CreateDynamicObject(1684, 2611.151123, 2839.649414, 11.410189, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(9623, 2426.137207, 2737.552734, 12.466161, 0.0000, 0.0000, 314.4499);
	CreateDynamicObject(9900, 2637.938232, 2642.957031, 123.286674, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(972, 2507.524902, 2694.562744, 9.681604, 0.0000, 0.0000, 191.5501);
	CreateDynamicObject(972, 2516.913086, 2674.729248, 9.767195, 0.0000, 0.0000, 225.0684);
	CreateDynamicObject(972, 2534.545654, 2657.153076, 9.767195, 0.0000, 0.0000, 225.0684);
	CreateDynamicObject(972, 2548.691650, 2653.430908, 9.742195, 0.0000, 0.0000, 306.7150);
	CreateDynamicObject(972, 2536.610840, 2854.158447, 9.817194, 0.0000, 0.0000, 90.2408);
	CreateDynamicObject(4892, 2627.058350, 2792.476318, 12.374969, 0.0000, 0.0000, 269.7592);
	CreateDynamicObject(11480, 2575.604248, 2846.963623, 12.014021, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(11480, 2584.276367, 2846.953369, 12.014021, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2579.685303, 2845.370605, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2565.118408, 2813.966797, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2596.618896, 2813.417236, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2601.672852, 2844.998291, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2617.144287, 2806.903564, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2617.202881, 2816.648926, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2617.196777, 2824.109375, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2617.185059, 2837.934082, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2648.514893, 2803.140625, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2602.133301, 2786.443848, 18.229603, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2577.936279, 2791.691162, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2581.148193, 2769.112549, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2576.600830, 2769.189697, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2553.427979, 2712.816895, 12.470361, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2553.369385, 2720.772949, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2507.258789, 2784.530762, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1597, 2528.125977, 2840.835693, 12.477695, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1364, 2614.110596, 2815.304199, 10.604434, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1364, 2610.062744, 2815.163086, 10.604434, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(643, 2613.695313, 2812.575684, 10.290784, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(643, 2614.721924, 2808.952148, 10.290784, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(643, 2610.211914, 2809.429443, 10.290784, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1432, 2612.204346, 2806.844482, 9.952114, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1432, 2607.745850, 2811.228027, 9.952114, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1340, 2604.995605, 2805.958740, 10.947899, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1340, 2604.966309, 2809.310059, 10.947899, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1342, 2605.034668, 2812.131592, 10.854006, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1262, 2498.377930, 2763.195801, 13.449600, 0.0000, 0.0000, 301.5584);
	CreateDynamicObject(1231, 2522.061279, 2710.512451, 12.550705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, 2698.511475, 2732.950684, 12.550705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, 2704.334229, 2732.854004, 12.550705, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1231, 2709.879883, 2732.833740, 12.554443, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1214, 2643.909424, 2795.857666, 9.861168, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1676, 2531.274414, 2710.299561, 11.401179, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2533.923584, 2710.468506, 10.483959, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2520.026123, 2830.679932, 11.626480, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2520.008301, 2832.417480, 11.611021, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2528.343750, 2836.232666, 10.596108, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2579.869385, 2840.644775, 10.546926, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2580.644775, 2841.272949, 10.529841, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2579.086182, 2841.329102, 10.506897, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2617.405518, 2833.292969, 10.588893, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2617.357178, 2828.751465, 10.588893, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2625.535156, 2802.721436, 10.384636, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2618.302734, 2802.706299, 10.384636, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2643.960938, 2795.951904, 11.770589, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2649.483887, 2783.366699, 10.384636, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2649.590332, 2785.143555, 10.384636, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2658.932617, 2710.592285, 10.384636, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1215, 2701.723389, 2726.350342, 10.384636, 0.0000, 0.0000, 0.0000);
	CreateObject(4874, 2578.142578, 2829.710938, 30.209558, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(7981, 2573.037598, 2661.074219, 38.705521, 0.0000, 0.0000, 0.0000);
	CreateObject(9241, 2598.063721, 2825.519531, 28.504217, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1682, 2578.297363, 2663.624756, 50.159748, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2744.939209, 2786.955566, 10.345546, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2744.911133, 2798.109131, 10.345546, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2744.916992, 2807.783203, 10.337735, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2744.919434, 2816.458008, 10.337735, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2744.936768, 2827.150146, 10.337735, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2744.828613, 2837.271484, 10.337735, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2744.782227, 2846.374023, 10.337735, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2714.198975, 2789.927734, 10.345546, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2724.721436, 2726.604248, 10.337735, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2724.734619, 2725.901855, 16.722546, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2736.613525, 2725.884277, 18.192772, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2748.063721, 2726.339844, 17.052885, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2712.783936, 2725.976807, 18.194138, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2714.052246, 2735.080566, 16.640825, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2714.144043, 2759.625977, 16.686779, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2713.942383, 2747.499756, 18.190197, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2607.762207, 2815.732910, 29.846027, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2588.956055, 2815.668701, 29.846027, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2588.961914, 2835.120117, 29.846027, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2607.781494, 2835.116211, 29.846027, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2614.081299, 2832.819824, 27.333998, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2544.261719, 2842.829834, 30.191141, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2544.258789, 2812.926514, 30.191141, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2577.665039, 2813.014404, 30.191141, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2577.717285, 2842.786865, 30.191141, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2562.816406, 2842.385742, 30.191141, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2559.119141, 2842.482422, 30.191141, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2504.015869, 2779.312988, 10.446804, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3666, 2512.100342, 2723.139160, 10.351976, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(8947, 2515.361816, 2798.113525, 12.873093, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(983, 2520.018311, 2784.081055, 10.503867, 0.0000, 0.0000, 304.1367);
	CreateDynamicObject(970, 2518.290039, 2784.138428, 10.371794, 0.0000, 0.0000, 63.5983);
	CreateDynamicObject(970, 2510.020752, 2784.521973, 10.371795, 0.0000, 0.0000, 39.5341);
	CreateDynamicObject(983, 2525.045410, 2810.309082, 10.503867, 0.0000, 0.0000, 268.8998);
	CreateDynamicObject(984, 2704.331543, 2773.386963, 10.456992, 0.0000, 0.0000, 292.1046);
	CreateDynamicObject(983, 2710.240967, 2778.999023, 10.507605, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1634, 2736.866699, 2853.275391, 11.121367, 0.0000, 0.0000, 270.6186);
	CreateDynamicObject(3515, 2546.383057, 2660.527344, 9.015562, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(7073, 2497.720703, 2759.989502, 28.026005, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(8483, 2557.964111, 2661.396729, 15.167347, 0.0000, 0.0000, 184.6746);
	CreateDynamicObject(11417, 2515.328857, 2707.829346, 14.708224, 0.0000, 0.0000, 46.4095);
	CreateDynamicObject(13562, 2516.745361, 2723.325439, 14.033586, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2517.221680, 2742.548828, 10.182138, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2517.093018, 2764.238770, 10.189472, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2507.321289, 2779.931152, 10.125114, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2544.320313, 2723.290283, 10.189472, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2522.439453, 2810.369141, 10.189472, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2522.346680, 2786.121094, 13.845833, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2534.508301, 2795.434814, 10.094028, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2648.789795, 2798.611816, 9.937733, 0.0000, 0.0000, 39.5341);
	CreateDynamicObject(3472, 2656.895752, 2782.368408, 18.691380, 0.0000, 0.0000, 304.1367);
	CreateDynamicObject(3472, 2677.899414, 2759.858887, 18.441380, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2739.926025, 2761.364014, 16.691395, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3472, 2700.784668, 2725.785889, 15.361578, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3534, 2549.559082, 2663.854492, 16.601908, 0.0000, 275.7753, 0.0000);
	CreateDynamicObject(3534, 2549.993408, 2659.879639, 16.475466, 0.0000, 275.7753, 0.0000);
	CreateDynamicObject(3877, 2535.456543, 2666.923096, 11.672995, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, 2538.615479, 2666.885010, 11.663645, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, 2528.918457, 2695.492188, 11.486053, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, 2545.286865, 2695.465088, 11.486053, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, 2544.383301, 2716.251709, 11.486053, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3877, 2517.479492, 2782.519775, 11.284093, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(669, 2519.153564, 2784.650879, 10.143299, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(691, 2508.090576, 2699.233643, 10.267775, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(691, 2510.651611, 2686.449219, 10.267775, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(691, 2508.667969, 2693.482422, 10.260439, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(691, 2543.514404, 2647.260742, 9.917780, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(691, 2550.351563, 2652.201660, 9.999298, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(643, 2543.419189, 2656.964600, 10.290784, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(643, 2540.665527, 2653.682129, 10.290784, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(643, 2539.029297, 2657.369629, 10.290784, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1432, 2542.158936, 2660.449951, 9.952114, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1432, 2536.964600, 2654.355469, 9.952115, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1432, 2534.205322, 2656.437988, 9.952114, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1432, 2539.020508, 2650.809326, 9.952114, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1594, 2544.023438, 2653.186035, 10.297304, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1824, 2545.334961, 2666.588867, 10.331298, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1825, 2541.370605, 2666.639404, 9.798468, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1811, 2548.289551, 2666.631836, 10.446617, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1896, 2547.468506, 2663.933594, 10.802155, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1836, 2542.799316, 2669.965088, 9.818128, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1836, 2545.958252, 2669.966064, 9.818128, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1836, 2549.142578, 2669.969238, 9.818128, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(16151, 2529.989746, 2669.124268, 10.212066, 0.0000, 0.0000, 89.3814);
	CreateDynamicObject(14781, 2531.697754, 2661.140137, 10.910662, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14449, 2519.364990, 2678.193604, 11.093000, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3660, 2516.932129, 2702.873535, 12.473380, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3660, 2536.514404, 2702.853027, 12.473380, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3660, 2552.629883, 2702.843506, 12.473380, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(669, 2500.532959, 2759.251221, 10.307362, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(669, 2499.979004, 2752.730225, 10.307362, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(669, 2499.637695, 2744.944092, 10.307362, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(669, 2499.800049, 2737.156494, 10.307362, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(669, 2499.975342, 2729.500000, 10.307363, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(669, 2500.234131, 2721.711914, 10.307362, 0.0000, 0.0000, 0.0000);
	//Tür im Sonnenbrillen laden + am Anfangs Schiffstür
	CreateDynamicObject(1498,662.79998779,-565.00000000,15.10000038,0.00000000,0.00000000,0.00000000); //object(gen_doorext03) (1)
	//Bayside-Newstime Base
	CreateDynamicObject(14397, -1497.1163330078, 969.94226074219, 5.6124987602234, 0, 0, 0);
	CreateDynamicObject(14397, -1497.1112060547, 993.76806640625, 5.6124987602234, 0, 0, 0);
	CreateDynamicObject(14397, -1512.7886962891, 991.79040527344, 5.6124987602234, 0, 0, 90);
	CreateDynamicObject(14397, -1512.7864990234, 984.98858642578, 5.6124987602234, 0, 0, 90);
	CreateDynamicObject(3095, -1501.5595703125, 989.1533203125, 12.582794189453, 0, 0, 0);
	CreateDynamicObject(3095, -1501.5594482422, 971.19702148438, 12.582794189453, 0, 0, 0);
	CreateDynamicObject(3095, -1510.3090820313, 973.93725585938, 11.682788848877, 0, 348, 0);
	CreateDynamicObject(3095, -1510.2952880859, 982.91064453125, 11.682788848877, 0, 347.99743652344, 0);
	CreateDynamicObject(3095, -1510.2954101563, 989.16784667969, 11.682788848877, 0, 347.99743652344, 0);
	CreateDynamicObject(3851, -1512.4290771484, 975.40264892578, 9.4124927520752, 0, 0, 0);
	CreateDynamicObject(3851, -1506.7652587891, 969.73620605469, 8.4874954223633, 0, 0, 90);
	CreateDynamicObject(1698, -1499.318359375, 968.986328125, 6.3060894012451, 0, 0, 90.7470703125);
	CreateDynamicObject(1698, -1499.337890625, 969.4658203125, 6.531090259552, 0, 0, 90.741577148438);
	CreateDynamicObject(1698, -1499.3415527344, 970.51525878906, 6.3060894012451, 0, 0, 90.7470703125);
	CreateDynamicObject(8427, -1491.7646484375, 975.2041015625, 2.9778051376343, 0, 0, 270.49987792969);
	CreateDynamicObject(8427, -1491.8365478516, 984.43389892578, 2.9778051376343, 0, 0, 270.49987792969);
	CreateDynamicObject(3440, -1497.5146484375, 967.0556640625, 10.513984680176, 0, 0, 0);
	CreateDynamicObject(3440, -1497.5146484375, 967.0556640625, 5.7889847755432, 0, 0, 0);
	CreateDynamicObject(8947, -1499.501953125, 957.4326171875, 3.2152829170227, 0, 0, 0);
	CreateDynamicObject(2960, -1496.0953369141, 947.38256835938, 6.2121415138245, 0, 0, 0);
	CreateDynamicObject(3578, -1493.5361328125, 952.359375, 5.5968546867371, 0, 0, 270);
	CreateDynamicObject(2960, -1496.099609375, 957.2705078125, 6.2121415138245, 0, 0, 0);
	CreateDynamicObject(2960, -1496.1010742188, 953.85363769531, 6.2121415138245, 0, 0, 0);
	CreateDynamicObject(2960, -1496.0908203125, 950.78210449219, 6.2121415138245, 0, 0, 0);
	CreateDynamicObject(763, -1509.8526611328, 959.51782226563, 6.1875, 0, 0, 0);
	CreateDynamicObject(3522, -1509.1715087891, 959.62054443359, 6.2659163475037, 0, 0, 0);
	CreateDynamicObject(3522, -1510.5888671875, 959.63787841797, 6.2659163475037, 0, 0, 180);
	CreateDynamicObject(870, -1510.0146484375, 959.54370117188, 6.5979537963867, 0, 0, 30);
	CreateDynamicObject(2010, -1506.1229248047, 970.2880859375, 6.2032146453857, 0, 0, 0);
	CreateDynamicObject(2010, -1511.9830322266, 985.19458007813, 6.2032146453857, 0, 0, 0);
	CreateDynamicObject(3440, -1505.65625, 967.08819580078, 10.663990020752, 0, 0, 0);
	CreateDynamicObject(3440, -1505.65625, 967.087890625, 5.9139862060547, 0, 0, 0);
	CreateDynamicObject(1256, -1513.1702880859, 984.853515625, 6.8469562530518, 0, 0, 0);
	CreateDynamicObject(1256, -1513.1301269531, 978.27435302734, 6.8469562530518, 0, 0, 0);
	CreateDynamicObject(3078, -1499.3989257813, 968.46130371094, 6.2754364013672, 0, 0, 0);
	CreateDynamicObject(9833, -1518.3381347656, 981.62670898438, 3.8150420188904, 0, 0, 0);
	CreateDynamicObject(3522, -1518.5063476563, 981.56640625, 6.2659163475037, 0, 0, 179.99450683594);
	CreateDynamicObject(3522, -1517.1837158203, 981.55090332031, 6.2659163475037, 0, 0, 0);
	CreateDynamicObject(1690, -1511.1574707031, 981.29125976563, 12.5962266922, 0, 0, 0);
	CreateDynamicObject(3851, -1512.4287109375, 975.40234375, 5.4124946594238, 0, 0, 0);
	CreateDynamicObject(3851, -1512.4017333984, 987.25933837891, 9.4124927520752, 0, 0, 0);
	CreateDynamicObject(9131, -1512.431640625, 981.32092285156, 5.7164163589478, 0, 0, 0);
	CreateDynamicObject(3851, -1512.4013671875, 987.2587890625, 5.4374928474426, 0, 0, 0);
	CreateDynamicObject(9131, -1512.431640625, 981.3203125, 7.941415309906, 0, 0, 0);
	CreateDynamicObject(9131, -1512.431640625, 981.3203125, 10.141407012939, 0, 0, 0);
	CreateDynamicObject(9131, -1512.1329345703, 970.01910400391, 5.8164167404175, 0, 0, 0);
	CreateDynamicObject(9131, -1512.1328125, 970.0185546875, 8.0414171218872, 0, 0, 0);
	CreateDynamicObject(9131, -1512.1328125, 970.0185546875, 10.266418457031, 0, 0, 0);
	CreateDynamicObject(9131, -1512.03125, 993.03961181641, 5.9414172172546, 0, 0, 0);
	CreateDynamicObject(9131, -1512.03125, 993.0390625, 8.1664171218872, 0, 0, 0);
	CreateDynamicObject(9131, -1512.03125, 993.0390625, 10.366425514221, 0, 0, 0);
	CreateDynamicObject(3851, -1505.9921875, 993.373046875, 8.4874954223633, 0, 0, 90);
	CreateDynamicObject(3851, -1501.2607421875, 993.35888671875, 8.4874954223633, 0, 0, 90);
	CreateDynamicObject(9131, -1495.9780273438, 993.00756835938, 11.466410636902, 0, 0, 0);
	CreateDynamicObject(3095, -1501.5178222656, 997.84918212891, 11.532810211182, 346, 0, 0);
	CreateDynamicObject(3440, -1505.6600341797, 1001.1317749023, 8.6139907836914, 0, 0, 0);
	CreateDynamicObject(3440, -1497.4167480469, 1001.2370605469, 8.6139907836914, 0, 0, 0);
	CreateDynamicObject(8427, -1491.873046875, 988.0810546875, 2.9778051376343, 0, 0, 90.494384765625);
	CreateDynamicObject(3851, -1492.0020751953, 969.71569824219, 8.4874954223633, 0, 0, 90);
	CreateDynamicObject(9131, -1501.4194335938, 970.06536865234, 9.3664216995239, 0, 0, 0);
	CreateDynamicObject(9131, -1497.3984375, 970.06652832031, 9.1914205551147, 0, 0, 0);
	CreateDynamicObject(9339, -1498.9332275391, 969.84533691406, 11.042905807495, 0, 179.99450683594, 90);
	CreateDynamicObject(9339, -1497.2861328125, 969.84399414063, 11.417915344238, 0, 179.99450683594, 90);
	CreateDynamicObject(9339, -1498.8139648438, 993.26593017578, 11.042905807495, 0, 179.99450683594, 90);
	CreateDynamicObject(9339, -1497.2026367188, 993.26257324219, 11.567901611328, 0, 180, 90);
	CreateDynamicObject(9339, -1494.6162109375, 993.26007080078, 11.992902755737, 0, 179.99450683594, 90);
	CreateDynamicObject(9131, -1495.9775390625, 993.0068359375, 9.2164068222046, 0, 0, 0);
	CreateDynamicObject(9339, -1495.1643066406, 969.84387207031, 11.892908096313, 0, 179.99450683594, 90);
	CreateDynamicObject(3095, -1492.5744628906, 974.09698486328, 12.582794189453, 0, 0, 0);
	CreateDynamicObject(3095, -1492.556640625, 988.912109375, 12.582794189453, 0, 0, 0);
	CreateDynamicObject(9131, -1501.4189453125, 970.064453125, 7.1414232254028, 0, 0, 0);
	CreateDynamicObject(9131, -1497.3984375, 970.06640625, 6.9914216995239, 0, 0, 0);
	CreateDynamicObject(1557, -1501.0557861328, 969.93621826172, 6.6567215919495, 0, 0, 0);
	CreateDynamicObject(1557, -1497.8416748047, 969.85754394531, 6.6567215919495, 0, 0, 270.25);
	CreateDynamicObject(3440, -1499.4072265625, 970.060546875, 10.063991546631, 0, 90, 0);
	CreateDynamicObject(3440, -1499.4072265625, 970.060546875, 9.4639930725098, 0, 90, 0);
	CreateDynamicObject(9131, -1495.9775390625, 993.0068359375, 6.9664077758789, 0, 0, 0);
	CreateDynamicObject(14397, -1480.0689697266, 993.90704345703, 5.6124987602234, 0, 0, 0.5);
	CreateDynamicObject(14397, -1480.11328125, 970.07019042969, 5.6124987602234, 0, 0, 0.4998779296875);
	CreateDynamicObject(1698, -1493.9107666016, 992.41204833984, 6.3060894012451, 0, 0, 90.7470703125);
	CreateDynamicObject(1698, -1493.9250488281, 993.92224121094, 6.3060894012451, 0, 0, 90.7470703125);
	CreateDynamicObject(1698, -1493.9030761719, 993.04638671875, 6.531090259552, 0, 0, 90.7470703125);
	CreateDynamicObject(1557, -1495.7844238281, 992.96453857422, 6.6567215919495, 0, 0, 0);
	CreateDynamicObject(1557, -1492.7567138672, 992.88684082031, 6.6567215919495, 0, 0, 100);
	CreateDynamicObject(3440, -1493.6008300781, 993.03912353516, 9.4639930725098, 0, 90, 0);
	CreateDynamicObject(3440, -1493.6005859375, 993.0390625, 10.038988113403, 0, 90, 0);
	CreateDynamicObject(3095, -1492.556640625, 980.02099609375, 12.582794189453, 0, 0, 0);
	CreateDynamicObject(3851, -1500.3803710938, 983.78192138672, 12.91752243042, 0, 270, 89.994506835938);
	CreateDynamicObject(3851, -1500.3851318359, 975.84625244141, 12.91752243042, 0, 270, 89.994506835938);
	CreateDynamicObject(3851, -1500.3737792969, 979.81396484375, 12.91752243042, 0, 270, 89.994506835938);
	CreateDynamicObject(970, -1499.4633789063, 1001.1287841797, 6.7389812469482, 0, 0, 0);
	CreateDynamicObject(970, -1503.4599609375, 1001.1205444336, 6.7389812469482, 0, 0, 0);
	CreateDynamicObject(970, -1503.2907714844, 967.02032470703, 6.7889814376831, 0, 0, 0);
	CreateDynamicObject(970, -1495.1895751953, 967.01586914063, 6.7889814376831, 0, 0, 0);
	CreateDynamicObject(8947, -1499.515625, 939.607421875, 3.2152829170227, 0, 0, 0);
	CreateDynamicObject(3578, -1493.6047363281, 937.53833007813, 5.5968546867371, 0, 0, 270);
	CreateDynamicObject(2960, -1496.1661376953, 942.40710449219, 6.2121415138245, 0, 0, 0);
	CreateDynamicObject(2960, -1496.0299072266, 932.60168457031, 6.2121415138245, 0, 0, 0);
	CreateDynamicObject(2960, -1496.1177978516, 936.15368652344, 6.2121415138245, 0, 0, 0);
	CreateDynamicObject(2960, -1496.1446533203, 939.12945556641, 6.2121415138245, 0, 0, 0);
	CreateDynamicObject(9339, -1506.7646484375, 954.3095703125, 6.0679001808167, 0, 0, 0);
	CreateDynamicObject(9339, -1493.7788085938, 927.22998046875, 6.0679001808167, 0, 0, 89.747314453125);
	CreateDynamicObject(1232, -1494.0166015625, 927.92175292969, 8.9054698944092, 0, 0, 0);
	CreateDynamicObject(1232, -1515.8095703125, 992.146484375, 8.8241424560547, 0, 0, 0);
	CreateDynamicObject(1232, -1493.724609375, 966.310546875, 8.9054698944092, 0, 0, 0);
	CreateDynamicObject(1215, -1506.9698486328, 941.46685791016, 6.3081479072571, 0, 0, 0);
	CreateDynamicObject(1215, -1506.9072265625, 927.32922363281, 6.533148765564, 0, 0, 0);
	CreateDynamicObject(1290, -1506.7845458984, 934.42535400391, 11.092262268066, 0, 0, 270);
	CreateDynamicObject(1215, -1503.3115234375, 966.96978759766, 6.708149433136, 0, 0, 0);
	CreateDynamicObject(1215, -1495.2333984375, 967.01745605469, 6.708149433136, 0, 0, 0);
	CreateDynamicObject(1215, -1501.4713134766, 1001.1377563477, 6.7581496238708, 0, 0, 0);
	CreateDynamicObject(16779, -1500.5635986328, 988.42260742188, 12.607698440552, 0, 0, 0);
	CreateDynamicObject(16779, -1501.0073242188, 972.96710205078, 12.607698440552, 0, 0, 0);
	CreateDynamicObject(2161, -1510.7092285156, 993.16711425781, 6.2254476547241, 0, 0, 0);
	CreateDynamicObject(3944, -1493.6414794922, 983.943359375, 8.6542949676514, 0, 0, 270);
	CreateDynamicObject(3944, -1493.640625, 983.943359375, 5.1792960166931, 0, 0, 270);
	CreateDynamicObject(3944, -1493.6209716797, 978.83166503906, 8.6542949676514, 0, 0, 270);
	CreateDynamicObject(3944, -1493.6201171875, 978.8310546875, 5.1542959213257, 0, 0, 270);
	CreateDynamicObject(1698, -1506.7297363281, 969.08575439453, 6.0810885429382, 0, 0, 179.7470703125);
	CreateDynamicObject(8947, -1480.3275146484, 1000.1195068359, 3.2152829170227, 0, 0, 270.25);
	CreateDynamicObject(9339, -1492.5373535156, 994.37670898438, 6.2179007530212, 0, 0, 0);
	CreateDynamicObject(9339, -1468.1556396484, 994.61737060547, 6.2179007530212, 0, 0, 0);
	CreateDynamicObject(2960, -1491.3897705078, 1001.1860351563, 6.2121415138245, 0, 0, 270.25);
	CreateDynamicObject(3578, -1474.0590820313, 998.62164306641, 5.5968546867371, 0, 0, 0);
	CreateDynamicObject(3578, -1486.4447021484, 998.63305664063, 5.5968546867371, 0, 0, 0);
	CreateDynamicObject(2960, -1481.5242919922, 1001.1504516602, 6.2121415138245, 0, 0, 270.24719238281);
	CreateDynamicObject(2960, -1479.0405273438, 1001.1682128906, 6.2121415138245, 0, 0, 270.24719238281);
	CreateDynamicObject(2960, -1469.1765136719, 1001.1576538086, 6.2121415138245, 0, 0, 270.24719238281);
	CreateDynamicObject(2960, -1472.7143554688, 1001.1392211914, 6.2121415138245, 0, 0, 270.24719238281);
	CreateDynamicObject(2960, -1475.8759765625, 1001.1641845703, 6.2121415138245, 0, 0, 270.24719238281);
	CreateDynamicObject(2960, -1484.7561035156, 1001.2001953125, 6.2121415138245, 0, 0, 270.24719238281);
	CreateDynamicObject(2960, -1488.0760498047, 1001.2233276367, 6.2121415138245, 0, 0, 270.24719238281);
	CreateDynamicObject(1232, -1480.3514404297, 998.81225585938, 8.8241424560547, 0, 0, 0);
	CreateDynamicObject(2162, -1508.7111816406, 982.01763916016, 6.2254476547241, 0, 0, 0);
	CreateDynamicObject(2164, -1505.0817871094, 993.20568847656, 6.2254362106323, 0, 0, 0);
	CreateDynamicObject(2181, -1510.7292480469, 980.86694335938, 6.2254323959351, 0, 0, 0);
	CreateDynamicObject(2356, -1507.7811279297, 987.978515625, 6.2254323959351, 0, 0, 0);
	CreateDynamicObject(2637, -1508.7687988281, 973.17932128906, 6.6301732063293, 0, 0, 0);
	CreateDynamicObject(2776, -1506.794921875, 975.44403076172, 6.72292137146, 0, 0, 0);
	CreateDynamicObject(2009, -1508.6417236328, 988.11315917969, 6.2254362106323, 0, 0, 0);
	CreateDynamicObject(1753, -1496.5423583984, 984.17559814453, 6.2254362106323, 0, 0, 0);
	CreateDynamicObject(1753, -1493.6235351563, 982.86529541016, 6.2254362106323, 0, 0, 270.25);
	CreateDynamicObject(1737, -1495.5964355469, 982.31579589844, 6.2254362106323, 0, 0, 271.25);
	CreateDynamicObject(1754, -1493.6643066406, 979.4091796875, 6.2254362106323, 0, 0, 270);
	CreateDynamicObject(2637, -1506.7893066406, 973.18096923828, 6.6301732063293, 0, 0, 0);
	CreateDynamicObject(2637, -1508.7679443359, 974.36413574219, 6.6301732063293, 0, 0, 0);
	CreateDynamicObject(2637, -1506.7971191406, 974.35583496094, 6.6301732063293, 0, 0, 0);
	CreateDynamicObject(2776, -1508.7260742188, 975.5234375, 6.72292137146, 0, 0, 0);
	CreateDynamicObject(2776, -1508.7220458984, 972.04754638672, 6.72292137146, 0, 0, 180);
	CreateDynamicObject(2776, -1506.7923583984, 972.1142578125, 6.72292137146, 0, 0, 179.99450683594);
	CreateDynamicObject(2776, -1510.3474121094, 973.79064941406, 6.72292137146, 0, 0, 89.994506835938);
	CreateDynamicObject(2776, -1505.2709960938, 973.8056640625, 6.72292137146, 0, 0, 270.74450683594);
	CreateDynamicObject(2181, -1509.7270507813, 981.78582763672, 6.2254323959351, 0, 0, 179.5);
	CreateDynamicObject(2181, -1507.8071289063, 982.60614013672, 6.2254323959351, 0, 0, 179.49462890625);
	CreateDynamicObject(2181, -1505.8426513672, 983.41180419922, 6.2254323959351, 0, 0, 179.49462890625);
	CreateDynamicObject(2181, -1506.8482666016, 982.49279785156, 6.2254323959351, 0, 0, 0);
	CreateDynamicObject(2009, -1507.6240234375, 990.056640625, 6.2254362106323, 0, 0, 90);
	CreateDynamicObject(2009, -1509.5942382813, 991.0703125, 6.2254362106323, 0, 0, 180);
	CreateDynamicObject(2009, -1510.6174316406, 989.09320068359, 6.2254362106323, 0, 0, 270.49450683594);
	CreateDynamicObject(2161, -1508.3824462891, 993.16156005859, 6.2254476547241, 0, 0, 0);
	CreateDynamicObject(2356, -1507.6892089844, 991.0556640625, 6.2254323959351, 0, 0, 90);
	CreateDynamicObject(2356, -1510.5422363281, 990.87469482422, 6.2254323959351, 0, 0, 180);
	CreateDynamicObject(2356, -1510.5300292969, 988.14074707031, 6.2254323959351, 0, 0, 270.49450683594);
	CreateDynamicObject(4641, -1505.1629638672, 926.05993652344, 7.8840799331665, 0, 0, 0);
	CreateDynamicObject(2009, -1499.2984619141, 989.99523925781, 6.2254362106323, 0, 0, 90);
	CreateDynamicObject(2009, -1500.2913818359, 988.02575683594, 6.2254362106323, 0, 0, 0);
	CreateDynamicObject(2009, -1501.2591552734, 990.99127197266, 6.2254362106323, 0, 0, 179.99450683594);
	CreateDynamicObject(2009, -1502.2729492188, 989.03106689453, 6.2254362106323, 0, 0, 269.99438476563);
	CreateDynamicObject(2161, -1499.3341064453, 993.30932617188, 6.2254476547241, 0, 0, 0);
	CreateDynamicObject(2161, -1501.4206542969, 993.26416015625, 6.2254476547241, 0, 0, 0);
	CreateDynamicObject(2008, -1494.3641357422, 976.60748291016, 6.2254362106323, 0, 0, 328);
	CreateDynamicObject(2008, -1494.3314208984, 974.38635253906, 6.2254362106323, 0, 0, 327.99682617188);
	CreateDynamicObject(2008, -1494.4180908203, 972.10864257813, 6.2254362106323, 0, 0, 327.99682617188);
	CreateDynamicObject(2356, -1494.0385742188, 975.380859375, 6.2254323959351, 0, 0, 332);
	CreateDynamicObject(2356, -1493.9891357422, 973.05792236328, 6.2254323959351, 0, 0, 331.99584960938);
	CreateDynamicObject(2356, -1493.9727783203, 970.72839355469, 6.2254323959351, 0, 0, 331.99584960938);
	CreateDynamicObject(1808, -1501.9643554688, 970.1875, 6.2254362106323, 0, 0, 272);
	CreateDynamicObject(1808, -1492.9232177734, 987.54504394531, 6.2254362106323, 0, 0, 271.99951171875);
	CreateDynamicObject(3440, -1503.2358398438, 986.68328857422, 10.23899269104, 0, 0, 0);
	CreateDynamicObject(3440, -1503.2353515625, 986.6826171875, 5.5139946937561, 0, 0, 0);
	CreateDynamicObject(3440, -1503.0625, 974.95568847656, 5.4889936447144, 0, 0, 0);
	CreateDynamicObject(3440, -1503.0625, 974.955078125, 10.238997459412, 0, 0, 0);
	CreateDynamicObject(640, -1506.5104980469, 993.97491455078, 6.6595330238342, 0, 0, 270);
	CreateDynamicObject(640, -1501.1337890625, 993.97308349609, 6.6595330238342, 0, 0, 270);
	CreateDynamicObject(968, -1506.7359619141, 941.4189453125, 6.8875026702881, 0, 348, 90);
	CreateDynamicObject(966, -1506.7258300781, 941.46087646484, 6.1875, 0, 0, 90);
	CreateDynamicObject(966, -1506.6639404297, 927.38934326172, 6.1875, 0, 0, 270.75);
	CreateDynamicObject(968, -1506.6824951172, 927.41564941406, 6.8875026702881, 0, 11.997436523438, 90);
	CreateDynamicObject(2256, -1492.8277587891, 981.73370361328, 8.5652275085449, 0, 0, 270);
	CreateDynamicObject(2257, -1492.8308105469, 989.86041259766, 8.8415842056274, 0, 0, 270);
	CreateDynamicObject(14705, -1507.8128662109, 973.80462646484, 7.2884669303894, 0, 0, 0);
	CreateDynamicObject(14705, -1495.6103515625, 981.85479736328, 7.2697796821594, 0, 0, 0);
	CreateDynamicObject(2852, -1506.5863037109, 973.23779296875, 7.0395002365112, 0, 0, 0);
	CreateDynamicObject(2186, -1503.5335693359, 979.99670410156, 6.2254323959351, 0, 0, 0);
	CreateDynamicObject(2186, -1500.818359375, 980.07818603516, 6.2254323959351, 0, 0, 180.25);
	CreateDynamicObject(2103, -1501.2670898438, 993.029296875, 7.5833492279053, 0, 0, 0);
	CreateDynamicObject(1717, -1496.4263916016, 979.13134765625, 6.2254362106323, 0, 0, 92);
	CreateDynamicObject(2841, -1497.9356689453, 979.23382568359, 6.2254362106323, 0, 0, 318.75);
	CreateDynamicObject(2356, -1499.3436279297, 988.17388916016, 6.2254323959351, 0, 0, 0);
	CreateDynamicObject(2356, -1499.3114013672, 991.06909179688, 6.2254323959351, 0, 0, 90);
	CreateDynamicObject(2356, -1502.2799072266, 990.97497558594, 6.2254323959351, 0, 0, 179.99450683594);
	CreateDynamicObject(2356, -1502.2517089844, 987.98059082031, 6.2254323959351, 0, 0, 269.99450683594);
	CreateDynamicObject(2356, -1510.1604003906, 982.73199462891, 6.2254323959351, 0, 0, 181.98901367188);
	CreateDynamicObject(2356, -1508.5572509766, 983.63073730469, 6.2254323959351, 0, 0, 211.98852539063);
	CreateDynamicObject(2356, -1506.4587402344, 984.27001953125, 6.2254323959351, 0, 0, 211.98669433594);
	CreateDynamicObject(2356, -1506.3221435547, 981.68493652344, 6.2254323959351, 0, 0, 21.986694335938);
	CreateDynamicObject(2356, -1510.2436523438, 979.92303466797, 6.2254323959351, 0, 0, 21.983642578125);
	CreateDynamicObject(1893, -1495.9869384766, 973.82653808594, 12.96946811676, 0, 0, 0);
	CreateDynamicObject(1893, -1495.9495849609, 979.22778320313, 12.96946811676, 0, 0, 0);
	CreateDynamicObject(1893, -1496.1873779297, 986.06579589844, 12.96946811676, 0, 0, 0);
	CreateDynamicObject(1893, -1505.291015625, 986.92742919922, 12.96946811676, 0, 0, 0);
	CreateDynamicObject(1893, -1505.4820556641, 974.17614746094, 12.96946811676, 0, 0, 0);
	//Haus Shoot und Nemesus NR 2 Las Venturas
	CreateDynamicObject(8661, 2406.7446289063, 592.16998291016, 9.8675155639648, 0, 0, 269.5);
	CreateDynamicObject(8661, 2426.6862792969, 592.01287841797, 9.8675155639648, 0, 0, 269.49462890625);
	CreateDynamicObject(3095, 2432.0361328125, 571.89428710938, 5.3498368263245, 270, 180, 179.75);
	CreateDynamicObject(3095, 2423.0747070313, 571.92828369141, 5.3498368263245, 270, 179.99450683594, 179.74731445313);
	CreateDynamicObject(3095, 2414.1511230469, 571.96392822266, 5.3498368263245, 270, 179.99450683594, 179.74731445313);
	CreateDynamicObject(3095, 2405.1577148438, 571.99304199219, 5.3498368263245, 270, 179.99450683594, 179.74731445313);
	CreateDynamicObject(3095, 2401.0729980469, 572.00262451172, 5.3498368263245, 270, 180, 179.75);
	CreateDynamicObject(3095, 2436.6154785156, 576.43438720703, 5.3498368263245, 270, 179.99450683594, 269.49731445313);
	CreateDynamicObject(3095, 2436.6965332031, 585.41845703125, 5.3498368263245, 270, 179.99450683594, 269.49462890625);
	CreateDynamicObject(3095, 2436.7790527344, 594.37823486328, 5.3498368263245, 270, 179.99450683594, 269.49462890625);
	CreateDynamicObject(3095, 2436.859375, 603.38250732422, 5.3498368263245, 270, 179.99450683594, 269.49462890625);
	CreateDynamicObject(3095, 2436.9033203125, 607.46160888672, 5.3498368263245, 270, 179.99450683594, 269.49462890625);
	CreateDynamicObject(3095, 2432.4438476563, 612.06372070313, 5.3498368263245, 270, 179.99450683594, 359.74462890625);
	CreateDynamicObject(3095, 2423.451171875, 612.1005859375, 5.3498368263245, 270, 179.99450683594, 359.74182128906);
	CreateDynamicObject(3095, 2414.4741210938, 612.13513183594, 5.3498368263245, 270, 179.99450683594, 359.74182128906);
	CreateDynamicObject(3095, 2405.5034179688, 612.17102050781, 5.3498368263245, 270, 179.99450683594, 359.74182128906);
	CreateDynamicObject(3095, 2401.4912109375, 612.18695068359, 5.3498368263245, 270, 179.99450683594, 359.74182128906);
	CreateDynamicObject(3095, 2396.5534667969, 607.70440673828, 5.3498368263245, 270, 179.99450683594, 89.741821289063);
	CreateDynamicObject(3095, 2396.5126953125, 598.74084472656, 5.3498368263245, 270, 179.99450683594, 89.741821289063);
	CreateDynamicObject(3095, 2396.5239257813, 589.72729492188, 5.3498368263245, 270, 179.99450683594, 89.741821289063);
	CreateDynamicObject(3095, 2396.4533691406, 580.69488525391, 5.3498368263245, 270, 179.99450683594, 89.741821289063);
	CreateDynamicObject(3095, 2396.4091796875, 576.49157714844, 5.3498368263245, 270, 179.99450683594, 89.741821289063);
	CreateDynamicObject(3095, 2401.0915527344, 616.6201171875, 9.6189880371094, 0, 0, 0);
	CreateDynamicObject(3095, 2401.0944824219, 625.49877929688, 9.0189971923828, 352, 0, 0);
	CreateDynamicObject(3095, 2401.0959472656, 607.67608642578, 9.4689903259277, 2, 0, 0);
	CreateDynamicObject(8854, 2421.2377929688, 591.55755615234, 10.107831001282, 0, 0, 0);
	CreateDynamicObject(2960, 2418.224609375, 601.64263916016, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2418.1774902344, 598.56182861328, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2418.1716308594, 595.63311767578, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2418.158203125, 592.15319824219, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2418.2116699219, 588.67596435547, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2418.1765136719, 585.21527099609, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2418.1447753906, 581.49102783203, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2424.287109375, 581.4794921875, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2424.359375, 585.21374511719, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2424.3623046875, 588.68835449219, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2424.3149414063, 592.14233398438, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2424.3576660156, 595.64178466797, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2424.3361816406, 598.56805419922, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(2960, 2424.3447265625, 601.64483642578, 9.8171653747559, 0, 0, 0);
	CreateDynamicObject(8843, 2431.673828125, 593.26361083984, 9.8925151824951, 0, 0, 0);
	CreateDynamicObject(8843, 2409.1862792969, 593.02630615234, 9.8925151824951, 0, 0, 180);
	CreateDynamicObject(994, 2430.5993652344, 611.82330322266, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2424.3994140625, 611.82397460938, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2418.2250976563, 611.82598876953, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2412.0480957031, 611.85430908203, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2405.8735351563, 611.8564453125, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2422.0187988281, 572.01763916016, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2415.8359375, 572.03472900391, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2402.5805664063, 572.04205322266, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2396.4091796875, 572.07104492188, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2396.5454101563, 578.42053222656, 9.4925212860107, 0, 0, 269.5);
	CreateDynamicObject(994, 2396.6015625, 584.61468505859, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2396.6577148438, 590.76153564453, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2396.6828613281, 593.78814697266, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2396.7414550781, 620.24603271484, 9.8425159454346, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2405.3818359375, 620.10754394531, 9.8425159454346, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2396.6965332031, 611.2177734375, 9.7175178527832, 0, 2, 270.24462890625);
	CreateDynamicObject(994, 2405.3862304688, 611.17590332031, 9.7175178527832, 0, 1.99951171875, 270.24169921875);
	CreateDynamicObject(737, 2436.1811523438, 611.13482666016, 9.9925136566162, 0, 0, 0);
	CreateDynamicObject(994, 2436.8366699219, 611.88519287109, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2436.7780761719, 605.73205566406, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2436.7446289063, 599.55267333984, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2436.6779785156, 593.37554931641, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2436.6398925781, 587.22241210938, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2436.5793457031, 581.06945800781, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2436.5522460938, 578.22229003906, 9.4925212860107, 0, 0, 269.49462890625);
	CreateDynamicObject(737, 2397.2282714844, 572.9072265625, 9.9925136566162, 0, 0, 0);
	CreateDynamicObject(737, 2406.3627929688, 611.12310791016, 9.9925136566162, 0, 0, 0);
	CreateDynamicObject(6300, 2427.0400390625, 571.21630859375, -2.326201915741, 0, 0, 0);
	CreateDynamicObject(1649, 2426.0541992188, 534.03546142578, 7.3942284584045, 0, 0, 0);
	CreateDynamicObject(9131, 2423.4921875, 534.23706054688, 6.8073992729187, 0, 0, 180.5);
	CreateDynamicObject(14409, 2434.4497070313, 569.53308105469, 7.0405955314636, 14, 0, 180);
	CreateDynamicObject(14409, 2430.3684082031, 569.54156494141, 7.0405955314636, 13.99658203125, 0, 179.99450683594);
	CreateDynamicObject(9131, 2428.6401367188, 534.33282470703, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(8661, 2435.7414550781, 543.76220703125, 5.7425141334534, 0, 0, 179.74462890625);
	CreateDynamicObject(1649, 2431.228515625, 534.02545166016, 7.3942284584045, 0, 0, 0);
	CreateDynamicObject(1649, 2435.6252441406, 534.02740478516, 7.3942284584045, 0, 0, 0);
	CreateDynamicObject(9131, 2438.2097167969, 534.20660400391, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2440.7749023438, 534.01745605469, 7.3942284584045, 0, 0, 0);
	CreateDynamicObject(1649, 2445.2055664063, 534.01763916016, 7.3942284584045, 0, 0, 0);
	CreateDynamicObject(9131, 2447.7900390625, 534.12731933594, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2450.078125, 535.25244140625, 7.3942284584045, 0, 0, 30);
	CreateDynamicObject(1649, 2453.8708496094, 537.43487548828, 7.3942284584045, 0, 0, 29.998168945313);
	CreateDynamicObject(9131, 2455.5217285156, 538.88830566406, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2455.3447265625, 543.98089599609, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2455.619140625, 541.42468261719, 7.3942284584045, 0, 0, 89.998138427734);
	CreateDynamicObject(1649, 2455.6845703125, 546.54974365234, 7.3942284584045, 0, 0, 89.994506835938);
	CreateDynamicObject(9131, 2447.7900390625, 534.126953125, 7.9574012756348, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2455.521484375, 538.8876953125, 7.9573993682861, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2455.3447265625, 543.98046875, 7.9574007987976, 0, 0, 180.49987792969);
	CreateDynamicObject(3095, 2451.8596191406, 537.99255371094, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(3095, 2451.8442382813, 546.93621826172, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(3095, 2442.9184570313, 537.99835205078, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(3095, 2433.9475097656, 537.98828125, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(3095, 2425.0007324219, 537.98052978516, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(3095, 2419.63671875, 537.97546386719, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(1649, 2445.7194824219, 544.69067382813, 9.2192363739014, 270, 179.30358886719, 269.29809570313);
	CreateDynamicObject(1649, 2442.4155273438, 544.68377685547, 9.2192363739014, 270, 179.30236816406, 269.296875);
	CreateDynamicObject(1649, 2439.1127929688, 544.67840576172, 9.2192363739014, 270, 179.30236816406, 269.296875);
	CreateDynamicObject(1649, 2435.7839355469, 544.68988037109, 9.2192363739014, 270, 179.30236816406, 269.296875);
	CreateDynamicObject(3095, 2419.6667480469, 546.88275146484, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(1649, 2432.4543457031, 544.67962646484, 9.2192363739014, 270, 179.30236816406, 269.296875);
	CreateDynamicObject(1649, 2429.126953125, 544.67535400391, 9.2192363739014, 270, 179.30236816406, 269.296875);
	CreateDynamicObject(1649, 2425.8247070313, 544.67242431641, 9.2192363739014, 270, 179.30236816406, 269.296875);
	CreateDynamicObject(3095, 2442.8271484375, 551.37127685547, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(3095, 2433.8852539063, 551.36871337891, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(3095, 2428.5844726563, 551.37561035156, 9.0324068069458, 0, 0, 0);
	CreateDynamicObject(9131, 2438.208984375, 534.2060546875, 8.0823993682861, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2428.6396484375, 534.33203125, 8.1323976516724, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2423.4921875, 534.236328125, 8.1823987960815, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2421.4357910156, 535.56512451172, 7.3942284584045, 0, 0, 320);
	CreateDynamicObject(1649, 2418.0563964844, 538.38598632813, 7.3942284584045, 0, 0, 319.99877929688);
	CreateDynamicObject(9131, 2416.1875, 540.15771484375, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2416.1875, 540.1572265625, 8.3073968887329, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2415.9677734375, 542.70623779297, 7.3942284584045, 0, 0, 269.99877929688);
	CreateDynamicObject(1649, 2415.9621582031, 547.11645507813, 7.3942284584045, 0, 0, 269.99450683594);
	CreateDynamicObject(9131, 2416.236328125, 549.70788574219, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2416.236328125, 549.70703125, 8.1823968887329, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2455.4860839844, 549.10235595703, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2455.4853515625, 549.1015625, 8.0823993682861, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2418.2414550781, 550.68707275391, 7.3942284584045, 0, 0, 195.99450683594);
	CreateDynamicObject(9131, 2420.7321777344, 550.96142578125, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2420.7314453125, 550.9609375, 8.3323945999146, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2453.4697265625, 550.41333007813, 7.3942284584045, 0, 0, 153.99450683594);
	CreateDynamicObject(9131, 2451.1323242188, 551.03363037109, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2451.1318359375, 551.033203125, 8.282398223877, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2448.5778808594, 551.13238525391, 7.3942284584045, 0, 0, 179.98986816406);
	CreateDynamicObject(1649, 2444.1584472656, 551.12542724609, 7.3942284584045, 0, 0, 179.98901367188);
	CreateDynamicObject(1649, 2423.3195800781, 551.17297363281, 7.3942284584045, 0, 0, 179.98901367188);
	CreateDynamicObject(1649, 2427.748046875, 551.17932128906, 7.3942284584045, 0, 0, 179.98901367188);
	CreateDynamicObject(9131, 2430.3159179688, 551.05511474609, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2441.5634765625, 551.1318359375, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2441.5634765625, 551.1318359375, 8.0823984146118, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2430.3154296875, 551.0546875, 8.3573970794678, 0, 0, 180.49987792969);
	CreateDynamicObject(1649, 2432.0610351563, 552.86596679688, 7.3942284584045, 0, 0, 231.98901367188);
	CreateDynamicObject(1649, 2439.8366699219, 553.01416015625, 7.3942284584045, 0, 0, 125.98895263672);
	CreateDynamicObject(9131, 2438.1916503906, 554.66381835938, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(3440, 2445.9353027344, 554.90081787109, 6.6799817085266, 0, 0, 0);
	CreateDynamicObject(3440, 2425.6342773438, 554.90948486328, 6.6799817085266, 0, 0, 0);
	CreateDynamicObject(3440, 2415.8010253906, 534.39221191406, 6.6799817085266, 0, 0, 0);
	CreateDynamicObject(994, 2457.3596191406, 573.99310302734, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2457.3347167969, 567.80743408203, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2457.2824707031, 561.62054443359, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2457.2800292969, 555.43707275391, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2457.2312011719, 549.25079345703, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2457.177734375, 543.0888671875, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2457.1213378906, 538.90521240234, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2457.1235351563, 532.74475097656, 5.4175171852112, 0, 0, 179.49462890625);
	CreateDynamicObject(994, 2455.8752441406, 532.74365234375, 5.4175171852112, 0, 0, 179.48913574219);
	CreateDynamicObject(994, 2449.7192382813, 532.77667236328, 5.4175171852112, 0, 0, 179.48913574219);
	CreateDynamicObject(994, 2443.5598144531, 532.83489990234, 5.4175171852112, 0, 0, 179.48913574219);
	CreateDynamicObject(994, 2437.3754882813, 532.91485595703, 5.4175171852112, 0, 0, 179.48913574219);
	CreateDynamicObject(994, 2431.2182617188, 532.94769287109, 5.4175171852112, 0, 0, 179.48913574219);
	CreateDynamicObject(994, 2425.0368652344, 533.00347900391, 5.4175171852112, 0, 0, 180.23913574219);
	CreateDynamicObject(994, 2418.8713378906, 532.95526123047, 5.4175171852112, 0, 0, 180.23620605469);
	CreateDynamicObject(994, 2412.7033691406, 532.9326171875, 5.4175171852112, 0, 0, 180.23620605469);
	CreateDynamicObject(994, 2406.5053710938, 532.93194580078, 5.4175171852112, 0, 0, 180.23620605469);
	CreateDynamicObject(994, 2402.9577636719, 532.916015625, 5.4175171852112, 0, 0, 180.23620605469);
	CreateDynamicObject(994, 2396.8029785156, 539.09149169922, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(994, 2396.8608398438, 545.25274658203, 5.4175171852112, 0, 0, 269.49462890625);
	CreateDynamicObject(9131, 2433.791015625, 554.51037597656, 6.8073992729187, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2438.19140625, 554.6630859375, 8.0324001312256, 0, 0, 180.49987792969);
	CreateDynamicObject(9131, 2433.791015625, 554.509765625, 8.0823984146118, 0, 0, 180.49987792969);
	CreateDynamicObject(994, 2408.7866210938, 572.03863525391, 9.4925212860107, 0, 0, 0);
	CreateDynamicObject(994, 2412.712890625, 572.04876708984, 9.4675216674805, 0, 0, 0);
	CreateDynamicObject(737, 2397.6723632813, 533.73370361328, 5.8675103187561, 0, 0, 0);
	CreateDynamicObject(737, 2456.623046875, 573.19488525391, 5.8675103187561, 0, 0, 0);
	CreateDynamicObject(2172, 2448.2219238281, 549.21704101563, 5.7425141334534, 0, 0, 270.75);
	CreateDynamicObject(2172, 2448.28515625, 547.25787353516, 5.7425141334534, 0, 0, 270.7470703125);
	CreateDynamicObject(2172, 2449.2058105469, 546.26354980469, 5.7425141334534, 0, 0, 89.7470703125);
	CreateDynamicObject(2172, 2449.1589355469, 548.21978759766, 5.7425141334534, 0, 0, 90.491821289063);
	CreateDynamicObject(2165, 2454.1184082031, 541.85247802734, 5.7425141334534, 0, 0, 269.5);
	CreateDynamicObject(2165, 2450.3310546875, 537.26013183594, 5.7425141334534, 0, 0, 214.99462890625);
	CreateDynamicObject(1715, 2449.1967773438, 538.03546142578, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1715, 2452.9565429688, 541.14495849609, 5.7425141334534, 0, 0, 60);
	CreateDynamicObject(1723, 2422.3276367188, 549.94018554688, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1723, 2425.6518554688, 549.87646484375, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1723, 2428.5764160156, 548.97863769531, 5.7425141334534, 0, 0, 270.5);
	CreateDynamicObject(1724, 2426.7768554688, 546.00390625, 5.7425141334534, 0, 0, 179.75);
	CreateDynamicObject(1724, 2424.0522460938, 546.029296875, 5.7425141334534, 0, 0, 179.74731445313);
	CreateDynamicObject(1722, 2450.8247070313, 548.12615966797, 5.7425141334534, 0, 0, 60);
	CreateDynamicObject(1722, 2450.7805175781, 546.70782470703, 5.7425141334534, 0, 0, 77.996337890625);
	CreateDynamicObject(1722, 2447.0471191406, 548.82165527344, 5.7425141334534, 0, 0, 247.99194335938);
	CreateDynamicObject(1722, 2447.1452636719, 547.01782226563, 5.7425141334534, 0, 0, 247.98889160156);
	CreateDynamicObject(1811, 2430.3098144531, 542.78198242188, 6.3188190460205, 0, 0, 54);
	CreateDynamicObject(2009, 2429.7670898438, 539.58996582031, 5.7175140380859, 0, 0, 356.75);
	CreateDynamicObject(2165, 2430.8957519531, 541.48461914063, 5.7425141334534, 0, 0, 176);
	CreateDynamicObject(2183, 2438.9875488281, 542.18432617188, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1811, 2431.1870117188, 538.60699462891, 6.3188190460205, 0, 0, 303.99780273438);
	CreateDynamicObject(1811, 2441.55859375, 541.12121582031, 6.3188190460205, 0, 0, 273.99719238281);
	CreateDynamicObject(1811, 2439.7036132813, 541.56939697266, 6.3188190460205, 0, 0, 273.99353027344);
	CreateDynamicObject(1811, 2439.7895507813, 543.98370361328, 6.3188190460205, 0, 0, 79.243530273438);
	CreateDynamicObject(1811, 2441.4331054688, 544.47607421875, 6.3188190460205, 0, 0, 79.238891601563);
	CreateDynamicObject(2184, 2441.1704101563, 550.31622314453, 5.7425141334534, 0, 0, 288.75);
	CreateDynamicObject(2315, 2422.7111816406, 547.95727539063, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(2315, 2425.4851074219, 547.93353271484, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1808, 2430.3137207031, 550.48974609375, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1808, 2416.7331542969, 540.15979003906, 5.7425141334534, 0, 0, 89.25);
	CreateDynamicObject(1808, 2454.9240722656, 538.93682861328, 5.7425141334534, 0, 0, 271.24743652344);
	CreateDynamicObject(1828, 2423.0244140625, 547.93792724609, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1828, 2426.1958007813, 547.98181152344, 5.7425141334534, 0, 0, 178);
	CreateDynamicObject(2103, 2436.2634277344, 539.95483398438, 6.5175142288208, 0, 0, 84);
	CreateDynamicObject(2297, 2416.6020507813, 548.94842529297, 5.7425141334534, 0, 0, 358);
	CreateDynamicObject(2596, 2451.1242675781, 550.66796875, 8.3285760879517, 14, 0, 0);
	CreateDynamicObject(2596, 2447.8354492188, 534.57336425781, 8.3285760879517, 13.99658203125, 0, 180);
	CreateDynamicObject(2632, 2440.4619140625, 542.81768798828, 5.7260012626648, 0, 0, 0);
	CreateDynamicObject(2632, 2448.8420410156, 547.65185546875, 5.7260012626648, 0, 0, 89);
	CreateDynamicObject(2816, 2441.6755371094, 543.36157226563, 6.5565147399902, 0, 0, 0);
	CreateDynamicObject(2816, 2439.4404296875, 542.45794677734, 6.5565147399902, 0, 0, 0);
	CreateDynamicObject(2817, 2442.5302734375, 550.08776855469, 5.7425141334534, 0, 0, 292);
	CreateDynamicObject(1715, 2443.6413574219, 549.99359130859, 5.7425141334534, 0, 0, 330);
	CreateDynamicObject(2827, 2423.7138671875, 547.96948242188, 6.2381467819214, 0, 0, 0);
	CreateDynamicObject(14705, 2426.1850585938, 547.98321533203, 6.4871134757996, 0, 0, 0);
	CreateDynamicObject(2817, 2449.4770507813, 538.49224853516, 5.7425141334534, 0, 0, 215.99462890625);
	CreateDynamicObject(2817, 2452.62109375, 541.94018554688, 5.7425141334534, 0, 0, 269.4912109375);
	CreateDynamicObject(1281, 2402.2937011719, 537.56512451172, 6.5288677215576, 0, 0, 0);
	CreateDynamicObject(1281, 2402.2434082031, 541.23327636719, 6.5288677215576, 0, 0, 0);
	CreateDynamicObject(1281, 2402.0964355469, 544.56530761719, 6.5288677215576, 0, 0, 0);
	CreateDynamicObject(2001, 2397.3923339844, 578.32867431641, 9.8675155639648, 0, 0, 0);
	CreateDynamicObject(2001, 2429.7319335938, 538.77465820313, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(2001, 2443.0515136719, 534.43920898438, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(2001, 2453.4438476563, 549.42272949219, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(2001, 2446.3642578125, 550.32165527344, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(3802, 2433.8010253906, 555.52825927734, 7.7519445419312, 0, 0, 86);
	CreateDynamicObject(3802, 2438.20703125, 555.69982910156, 7.7519445419312, 0, 0, 87.495483398438);
	CreateDynamicObject(3515, 2450.2844238281, 562.36279296875, 6.123692035675, 0, 0, 0);
	CreateDynamicObject(1368, 2450.4384765625, 566.80627441406, 6.4182224273682, 0, 0, 0);
	CreateDynamicObject(1368, 2452.9108886719, 565.91442871094, 6.4182224273682, 0, 0, 320);
	CreateDynamicObject(1368, 2454.3376464844, 563.71008300781, 6.4182224273682, 0, 0, 285.99877929688);
	CreateDynamicObject(1368, 2454.4848632813, 561.099609375, 6.4182224273682, 0, 0, 259.99609375);
	CreateDynamicObject(1368, 2453.4545898438, 558.71002197266, 6.4182224273682, 0, 0, 233.99499511719);
	CreateDynamicObject(2895, 2450.048828125, 563.57843017578, 7.0176601409912, 0, 0, 0);
	CreateDynamicObject(2895, 2450.1936035156, 561.08532714844, 7.0176601409912, 0, 0, 0);
	CreateDynamicObject(2895, 2449.0942382813, 562.16540527344, 7.0176601409912, 0, 0, 290);
	CreateDynamicObject(2895, 2451.4931640625, 562.62609863281, 7.0176601409912, 0, 0, 289.9951171875);
	CreateDynamicObject(673, 2421.201171875, 600.35754394531, 10.106204032898, 0, 0, 0);
	CreateDynamicObject(673, 2421.2348632813, 583.29510498047, 10.106204032898, 0, 0, 0);
	CreateDynamicObject(738, 2421.1726074219, 592.17034912109, 10.106204032898, 0, 0, 0);
	CreateDynamicObject(1368, 2397.6159667969, 576.62445068359, 10.557251930237, 0, 0, 88.75);
	CreateDynamicObject(1368, 2397.6391601563, 579.87121582031, 10.557251930237, 0, 0, 88.74755859375);
	CreateDynamicObject(1368, 2400.4357910156, 573.38598632813, 10.557251930237, 0, 0, 180.24755859375);
	CreateDynamicObject(1368, 2403.5217285156, 573.39929199219, 10.557251930237, 0, 0, 179.49462890625);
	CreateDynamicObject(1215, 2405.4206542969, 620.18115234375, 10.089728355408, 0, 0, 0);
	CreateDynamicObject(1215, 2396.7585449219, 620.23638916016, 10.089728355408, 0, 0, 0);
	CreateDynamicObject(1215, 2405.4018554688, 604.91253662109, 9.9647302627563, 0, 0, 0);
	CreateDynamicObject(1215, 2396.7236328125, 604.90026855469, 9.9647302627563, 0, 0, 0);
	CreateDynamicObject(1215, 2415.1115722656, 611.86791992188, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2424.4228515625, 611.77648925781, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2433.6665039063, 611.79083251953, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2436.6525878906, 605.63928222656, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2436.5883789063, 596.49670410156, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2436.5393066406, 587.13500976563, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2436.4699707031, 578.05249023438, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2436.4028320313, 572.087890625, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2428.2387695313, 572.06817626953, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2418.9296875, 572.11499023438, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2396.8293457031, 545.20690917969, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2399.4665527344, 572.14056396484, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2396.7065429688, 581.52606201172, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2396.7165527344, 593.72747802734, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2396.74609375, 611.15014648438, 9.9647302627563, 0, 0, 0);
	CreateDynamicObject(1215, 2396.7265625, 613.9755859375, 9.9647302627563, 0, 0, 0);
	CreateDynamicObject(1215, 2405.2983398438, 613.83905029297, 9.9647302627563, 0, 0, 0);
	CreateDynamicObject(1215, 2405.3166503906, 611.11315917969, 9.9647302627563, 0, 0, 0);
	CreateDynamicObject(1215, 2408.8193359375, 572.158203125, 9.7897329330444, 0, 0, 0);
	CreateDynamicObject(1215, 2396.7810058594, 535.99896240234, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2406.4436035156, 532.91436767578, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2415.806640625, 532.91839599609, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2424.9582519531, 532.93914794922, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2434.294921875, 532.87707519531, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2443.4816894531, 532.80364990234, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2452.7429199219, 532.734375, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2457.2170410156, 538.84210205078, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2457.2365722656, 549.19848632813, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2457.2258300781, 558.53485107422, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2457.2114257813, 567.7958984375, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(1215, 2456.998046875, 532.75170898438, 5.8678069114685, 0, 0, 0);
	CreateDynamicObject(2001, 2420.1982421875, 537.4423828125, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(2001, 2448.9250488281, 566.73278808594, 5.728485584259, 0, 0, 0);
	CreateDynamicObject(2001, 2402.0009765625, 573.1982421875, 9.8675155639648, 0, 0, 0);
	CreateDynamicObject(2001, 2452.3686523438, 557.23126220703, 5.728485584259, 0, 0, 0);
	CreateDynamicObject(870, 2454.3432617188, 573.54693603516, 5.9706077575684, 0, 0, 0);
	CreateDynamicObject(870, 2451.6650390625, 572.61950683594, 5.9706077575684, 0, 0, 0);
	CreateDynamicObject(870, 2449.1020507813, 571.58306884766, 5.9706077575684, 0, 0, 0);
	CreateDynamicObject(870, 2439.935546875, 567.42248535156, 5.9706077575684, 0, 0, 0);
	CreateDynamicObject(870, 2437.6459960938, 566.19207763672, 5.9706077575684, 0, 0, 0);
	CreateDynamicObject(2165, 2422.7478027344, 536.70330810547, 5.7425141334534, 0, 0, 137.99548339844);
	CreateDynamicObject(2165, 2419.8676757813, 538.84967041016, 5.7425141334534, 0, 0, 139.24377441406);
	CreateDynamicObject(1714, 2422.5651855469, 538.58129882813, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1714, 2419.947265625, 540.51843261719, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(2190, 2441.4177246094, 549.60131835938, 6.5182518959045, 0, 0, 60);
	CreateDynamicObject(2827, 2441.8444824219, 550.2412109375, 6.5131459236145, 0, 0, 0);
	CreateDynamicObject(2817, 2430.0366210938, 542.31915283203, 5.7425141334534, 0, 0, 351.48913574219);
	CreateDynamicObject(2817, 2430.5358886719, 538.21417236328, 5.7425141334534, 0, 0, 351.48559570313);
	CreateDynamicObject(2009, 2436.8610839844, 537.32012939453, 5.7175140380859, 0, 0, 356.748046875);
	CreateDynamicObject(2009, 2434.94140625, 538.42132568359, 5.7175140380859, 0, 0, 266.998046875);
	CreateDynamicObject(2009, 2436.0534667969, 540.30590820313, 5.7175140380859, 0, 0, 176.99523925781);
	CreateDynamicObject(1663, 2435.052734375, 540.44775390625, 6.2027282714844, 0, 0, 0);
	CreateDynamicObject(1663, 2435.119140625, 537.49035644531, 6.2027282714844, 0, 0, 80);
	CreateDynamicObject(1663, 2437.8298339844, 537.20489501953, 6.2027282714844, 0, 0, 189.99694824219);
	CreateDynamicObject(14705, 2436.1323242188, 538.46728515625, 6.7371144294739, 0, 0, 0);
	CreateDynamicObject(2011, 2436.9782714844, 539.23815917969, 5.7426605224609, 0, 0, 0);
	CreateDynamicObject(2011, 2438.2465820313, 553.66967773438, 5.7426605224609, 0, 0, 0);
	CreateDynamicObject(2011, 2433.8315429688, 553.70544433594, 5.7426605224609, 0, 0, 0);
	CreateDynamicObject(2165, 2446.4719238281, 542.93347167969, 5.7425141334534, 0, 0, 175.99548339844);
	CreateDynamicObject(2165, 2447.3029785156, 540.96173095703, 5.7425141334534, 0, 0, 85.995483398438);
	CreateDynamicObject(2165, 2444.4721679688, 542.11791992188, 5.7425141334534, 0, 0, 265.99548339844);
	CreateDynamicObject(2165, 2445.3081054688, 540.14959716797, 5.7425141334534, 0, 0, 355.74548339844);
	CreateDynamicObject(2001, 2446.052734375, 541.51110839844, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(1811, 2445.880859375, 538.92694091797, 6.3188190460205, 0, 0, 273.99353027344);
	CreateDynamicObject(1811, 2448.6044921875, 541.15832519531, 6.3188190460205, 0, 0, 323.99353027344);
	CreateDynamicObject(1811, 2446.3984375, 544.01635742188, 6.3188190460205, 0, 0, 53.992309570313);
	CreateDynamicObject(1811, 2443.3508300781, 541.849609375, 6.3188190460205, 0, 0, 163.99230957031);
	CreateDynamicObject(2818, 2436.3151855469, 553.80432128906, 5.7425141334534, 0, 0, 0);
	CreateDynamicObject(2818, 2434.3605957031, 553.79193115234, 5.7425141334534, 0, 0, 0);
	//Waffenscheinprüfung
	CreateDynamicObject(1586, 288.8384,-129.0957,1004.0625-1, 0.0000, 0.0000, 272.2318);
	CreateDynamicObject(1586, 286.2498,-135.0644,1004.0625-1, 0.0000, 0.0000, 273.0465);
	CreateDynamicObject(1586, 282.0020,-139.0471,1004.0625-1, 0.0000, 0.0000, 267.0723);
	CreateDynamicObject(1586, 276.8208,-130.7698,1004.0625-1, 0.0000, 0.0000, 268.4300);
	CreateDynamicObject(1586, 273.2476,-137.7258,1004.0625-1, 0.0000, 0.0000, 268.7016);
	//Fahrschule
	CreateDynamicObject(7326, -2043.35, -257.47, 34.55,   0.00, 0.00, 180.38);
	CreateDynamicObject(17550, -2047.25, -196.76, 35.39,   0.00, 0.00, 286.95);
	CreateDynamicObject(7327, -2051.92, -217.35, 34.43,   0.00, 0.00, 269.76);
	CreateDynamicObject(4199, -2081.08, -182.20, 32.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(4199, -2071.06, -172.22, 32.28,   0.00, 0.00, 269.76);
	CreateDynamicObject(4199, -2071.07, -182.46, 32.28,   0.00, 0.00, 269.76);
	CreateDynamicObject(982, -2086.78, -185.22, 35.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, -2073.97, -166.45, 35.08,   0.00, 0.00, 269.76);
	CreateDynamicObject(983, -2058.49, -166.51, 35.08,   0.00, 0.00, 269.76);
	CreateDynamicObject(984, -2055.35, -172.93, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -2055.33, -182.54, 35.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -2086.75, -169.60, 35.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -2075.29, -194.69, 35.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -2075.29, -191.50, 35.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, -2068.90, -188.27, 35.03,   0.00, 0.00, 89.38);
	CreateDynamicObject(983, -2059.32, -188.30, 35.00,   0.00, 0.00, 90.24);
	CreateDynamicObject(983, -2055.33, -185.12, 35.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(4638, -2088.28, -199.20, 36.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2081.60, -197.84, 33.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2081.43, -182.31, 35.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2071.14, -182.32, 35.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2066.96, -182.31, 35.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2061.28, -182.38, 34.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2075.65, -188.00, 34.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(817, -2085.35, -184.45, 34.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2057.54, -254.48, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2053.26, -253.82, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2049.42, -255.72, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(870, -2060.87, -256.50, 34.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(870, -2062.19, -259.65, 34.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(871, -2059.99, -259.48, 34.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2061.48, -263.20, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2047.65, -259.63, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2047.74, -263.46, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2050.47, -266.80, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2055.29, -267.64, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2058.93, -266.26, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2054.22, -257.14, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2058.24, -259.14, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2052.25, -259.67, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2052.37, -263.37, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(869, -2056.14, -262.88, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, -2081.74, -171.67, 37.05,   0.00, 0.00, 269.76);
	CreateDynamicObject(1597, -2081.90, -178.38, 37.05,   0.00, 0.00, 270.62);
	CreateDynamicObject(745, -2071.35, -193.04, 34.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(751, -2042.94, -233.63, 35.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(751, -2040.55, -233.57, 35.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(758, -2033.03, -239.95, 34.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(8483, -2025.75, -268.66, 39.75,   0.00, 359.14, 115.92);
	CreateDynamicObject(3877, -2032.35, -218.43, 35.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(1211, -2034.63, -261.49, 34.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2045.39, -258.13, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2048.95, -253.33, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2054.48, -251.42, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2060.42, -253.27, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2063.88, -258.20, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2063.91, -264.18, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2060.40, -268.95, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2045.47, -263.78, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2048.97, -268.92, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1215, -2054.56, -270.83, 35.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(1283, -2040.64, -237.43, 37.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(1290, -2038.76, -208.25, 40.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(1290, -2067.28, -208.09, 40.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(1290, -2086.34, -181.46, 40.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2075.35, -198.10, 35.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2077.67, -178.54, 34.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2077.47, -171.93, 34.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2079.44, -171.06, 34.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2083.83, -170.95, 34.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2079.09, -177.61, 34.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2084.18, -177.72, 34.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2016.67, -268.04, 34.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2030.18, -268.94, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2029.81, -277.38, 34.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2014.04, -277.46, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2023.12, -272.33, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, -2074.83, -267.79, 35.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, -2066.58, -245.27, 35.00,   0.00, 0.00, 319.61);
	CreateDynamicObject(983, -2055.11, -235.50, 35.00,   0.00, 0.00, 91.96);
	CreateDynamicObject(982, -2044.96, -218.20, 35.00,   0.00, 0.00, 89.38);
	CreateDynamicObject(984, -2064.13, -218.00, 34.96,   0.00, 0.00, 269.76);
	CreateDynamicObject(984, -2076.56, -215.92, 35.11,   0.00, 0.00, 250.85);
	CreateDynamicObject(984, -2085.34, -208.01, 35.11,   0.00, 0.00, 24.92);
	CreateDynamicObject(983, -2088.02, -201.34, 35.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, -2062.43, -197.95, 35.00,   0.00, 0.00, 89.38);
	CreateDynamicObject(982, -2036.76, -198.03, 35.00,   0.00, 0.00, 90.24);
	CreateDynamicObject(982, -2023.94, -185.15, 35.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, -2024.61, -161.61, 35.00,   0.00, 0.00, 270.62);
	CreateDynamicObject(982, -2037.40, -174.58, 35.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, -2044.76, -185.22, 35.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -2044.75, -169.25, 35.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2017.98, -189.62, 34.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2017.89, -178.20, 34.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2024.24, -166.72, 34.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2031.01, -176.93, 34.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2031.10, -188.91, 34.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2038.29, -193.58, 34.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2044.37, -183.37, 34.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2037.85, -182.91, 34.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2043.11, -176.00, 34.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2041.26, -169.86, 34.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(3660, -2021.65, -133.02, 36.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(3660, -2041.26, -133.01, 36.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(3660, -2066.49, -133.10, 36.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(3660, -2086.04, -133.13, 36.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(8947, -2019.18, -147.32, 31.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(3458, -2014.59, -143.10, 35.77,   0.00, 0.00, 89.28);
	CreateDynamicObject(4199, -2066.01, -160.59, 36.43,   0.00, 0.00, 89.38);
	CreateDynamicObject(5130, -2043.06, -110.62, 35.06,   0.00, 0.00, 135.79);
	CreateDynamicObject(982, -2088.31, -185.49, 35.00,   0.00, 0.00, 353.12);
	CreateDynamicObject(982, -2089.94, -213.09, 35.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, -2089.96, -238.70, 35.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, -2089.94, -264.30, 35.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, -2093.11, -277.38, 35.00,   0.00, 0.00, 274.92);
	CreateDynamicObject(1237, -2090.58, -276.71, 34.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2095.26, -277.10, 34.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2092.69, -276.84, 34.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2095.17, -247.99, 33.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(3578, -2091.24, -166.49, 33.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, -2030.89, -102.34, 38.74,   0.00, 0.00, 269.76);
	CreateDynamicObject(983, -2021.30, -102.51, 38.79,   0.00, 0.00, 87.66);
	CreateDynamicObject(1237, -2081.89, -154.56, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2084.45, -154.55, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2085.12, -158.26, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2085.87, -162.17, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2086.78, -166.22, 34.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2095.35, -157.28, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2093.85, -153.10, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2091.77, -148.68, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2089.26, -144.43, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2085.08, -140.43, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2080.53, -137.77, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1237, -2076.57, -135.22, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1229, -2016.61, -218.21, 36.03,   0.00, 0.00, 339.37);
	CreateDynamicObject(1324, -2017.00, -242.70, 35.96,   0.00, 0.00, 224.21);
	CreateDynamicObject(1322, -2045.09, -244.75, 35.81,   0.00, 0.00, 124.62);
	CreateDynamicObject(4729, -2086.73, -112.49, 37.18,   0.00, 0.00, 289.53);
	CreateDynamicObject(4729, -2067.46, -112.70, 37.19,   0.00, 0.00, 289.53);
	CreateDynamicObject(4730, -2051.98, -106.70, 36.11,   0.00, 0.00, 50.71);
	CreateDynamicObject(3472, -2055.41, -106.68, 34.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(3660, -2057.98, -122.58, 36.98,   0.00, 0.00, 90.24);
	CreateDynamicObject(3450, -2072.81, -119.04, 36.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(3450, -2081.32, -118.86, 36.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(745, -2091.11, -122.13, 35.01,   0.00, 0.00, 15.47);
	CreateDynamicObject(669, -2077.92, -273.57, 34.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(669, -2084.69, -231.73, 34.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(669, -2060.78, -221.73, 34.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(669, -2056.09, -231.56, 34.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(669, -2072.19, -244.36, 34.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(672, -2065.77, -239.74, 35.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(672, -2083.09, -248.44, 35.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(672, -2085.13, -269.75, 35.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(688, -2080.04, -259.69, 34.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(688, -2079.68, -220.03, 34.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(688, -2067.99, -225.12, 34.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(691, -2078.14, -249.06, 34.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(703, -2079.93, -236.21, 34.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, -2057.40, -133.71, 38.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, -2057.39, -125.28, 37.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(1232, -2057.55, -118.17, 38.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1262, -2095.36, -165.93, 37.59,   0.00, 0.00, 329.92);
	CreateDynamicObject(1269, -2028.44, -243.65, 35.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2044.67, -242.87, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2046.48, -246.90, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2049.70, -249.52, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2044.47, -240.21, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2044.66, -236.33, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2044.22, -257.95, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2042.38, -255.12, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2040.50, -252.99, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2037.81, -251.71, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2034.65, -250.96, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2032.21, -248.27, 34.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(1319, -2030.03, -245.38, 35.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(2892, -2094.97, -276.00, 34.31,   -0.06, 0.00, 275.78);
	CreateDynamicObject(2942, -2036.48, -120.66, 34.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(3042, -2050.86, -154.96, 37.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(3099, -2013.56, -108.91, 34.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(973, -2016.47, -119.94, 35.05,   0.00, 0.00, 178.66);
	CreateDynamicObject(1251, -2047.55, -159.02, 34.36,   0.00, 0.00, 270.62);
	CreateDynamicObject(934, -2012.85, -116.21, 35.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(1283, -2048.11, -164.57, 36.95,   0.00, 0.00, 180.38);
	//Drift
	CreateDynamicObject(18761, -302.33, 1508.98, 79.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(18800, -246.87, 1536.20, 85.48,   0.00, 0.00, 46.08);
	CreateDynamicObject(18803, -510.09, 1379.29, 31.23,   4.00, 0.00, 24.00);
	CreateDynamicObject(6997, -253.80, 1456.88, 102.82,   0.00, 0.00, 135.93);
	CreateDynamicObject(6869, -196.13, 1417.46, 98.52,   0.00, 0.00, 135.93);
	CreateDynamicObject(3493, -255.56, 1408.48, 105.40,   0.00, 0.00, 315.98);
	CreateDynamicObject(3493, -254.33, 1409.72, 110.90,   0.00, 0.00, 315.98);
	CreateDynamicObject(3493, -246.66, 1417.42, 116.46,   0.00, 0.00, 315.98);
	CreateDynamicObject(3493, -246.66, 1417.42, 121.98,   0.00, 0.00, 315.98);
	CreateDynamicObject(18761, -252.12, 1497.72, 103.45,   0.00, 0.00, 315.77);
	CreateDynamicObject(18761, -296.01, 1431.67, 76.94,   0.00, 0.00, 0.00);
	CreateDynamicObject(18761, -327.21, 1416.58, 73.76,   0.00, 0.00, 37.56);
	CreateDynamicObject(18761, -346.53, 1382.25, 61.00,   0.00, 0.00, 30.35);
	CreateDynamicObject(18761, -363.79, 1354.22, 49.73,   0.00, 0.00, 30.35);
	CreateDynamicObject(18761, -428.34, 1446.58, 38.64,   0.00, 0.00, 288.26);
	CreateDynamicObject(18761, -440.47, 1410.33, 35.86,   0.00, 0.00, 288.63);
	CreateDynamicObject(18803, -646.94, 1319.09, 23.39,   4.00, -6.00, 23.90);
	CreateDynamicObject(18802, -724.34, 1285.64, 12.45,   4.00, -6.00, 23.90);
	CreateDynamicObject(18761, -728.67, 1283.77, 15.46,   0.00, 0.00, 300.19);
	CreateDynamicObject(18761, -790.23, 1317.36, 17.85,   0.00, 0.00, 210.62);
	CreateDynamicObject(18761, -847.46, 1423.57, 17.75,   0.00, 0.00, 198.36);
	CreateDynamicObject(3511, -310.40, 1495.89, 74.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -292.99, 1497.09, 74.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(3437, -313.28, 1532.13, 74.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -308.33, 1478.96, 74.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -292.25, 1481.19, 74.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -307.71, 1464.02, 73.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -290.41, 1464.75, 73.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -306.12, 1447.17, 71.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -288.16, 1448.47, 71.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -304.81, 1426.88, 71.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -287.07, 1427.47, 70.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -303.67, 1413.66, 70.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -286.15, 1415.37, 70.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -292.46, 1392.26, 70.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -315.01, 1387.73, 70.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -316.40, 1411.79, 69.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -328.57, 1401.84, 68.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -339.26, 1421.05, 67.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -323.84, 1428.88, 66.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -346.90, 1438.17, 65.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -333.55, 1446.96, 65.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -341.23, 1463.93, 63.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -356.46, 1453.01, 63.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -370.05, 1453.73, 60.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -360.68, 1473.97, 61.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -377.08, 1471.42, 61.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -388.22, 1455.91, 59.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -366.63, 1436.97, 59.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -383.05, 1434.20, 59.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -375.17, 1416.79, 58.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -360.11, 1423.14, 58.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -353.04, 1409.44, 57.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -367.29, 1401.47, 56.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -343.06, 1392.73, 56.19,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -357.69, 1384.32, 55.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -347.85, 1366.79, 53.94,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -332.53, 1374.40, 55.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -322.42, 1355.66, 53.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -335.87, 1349.23, 53.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -312.37, 1336.46, 52.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -329.23, 1332.50, 51.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -341.94, 1332.93, 49.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -350.46, 1348.19, 48.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -364.79, 1340.03, 47.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -355.06, 1324.71, 48.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -363.55, 1369.53, 44.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -376.05, 1361.23, 44.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -387.69, 1379.42, 42.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -373.13, 1387.24, 41.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -399.77, 1402.05, 39.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -383.68, 1410.48, 39.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -394.37, 1431.94, 36.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -408.55, 1424.51, 36.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -415.07, 1437.25, 34.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -410.34, 1453.75, 34.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -425.66, 1456.02, 32.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -425.55, 1426.67, 31.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -423.21, 1412.12, 30.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -444.64, 1426.93, 31.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3511, -449.17, 1442.75, 31.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(11463, -550.66, 1361.82, 10.10,   0.00, 0.00, 12.12);
	CreateDynamicObject(978, -298.08, 1390.16, 72.28,   0.00, 0.00, 21.42);
	CreateDynamicObject(978, -307.14, 1388.28, 72.28,   0.00, 0.00, 2.13);
	CreateDynamicObject(978, -315.73, 1390.70, 72.28,   0.00, 0.00, 326.28);
	CreateDynamicObject(978, -291.42, 1395.99, 72.28,   0.00, 0.00, 60.83);
	CreateDynamicObject(978, -272.14, 1442.45, 120.13,   0.00, 0.00, 136.04);
	CreateDynamicObject(978, -265.40, 1435.96, 120.13,   0.00, 0.00, 136.04);
	CreateDynamicObject(978, -246.01, 1426.61, 120.03,   0.00, 0.00, 224.55);
	CreateDynamicObject(978, -248.37, 1424.29, 120.03,   0.00, 0.00, 224.54);
	CreateDynamicObject(978, -246.28, 1434.71, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -251.24, 1439.58, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -255.20, 1426.16, 120.13,   0.00, 0.00, 136.04);
	CreateDynamicObject(978, -260.22, 1430.99, 120.13,   0.00, 0.00, 136.04);
	CreateDynamicObject(978, -233.97, 1422.31, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -238.92, 1427.21, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -228.52, 1416.96, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -223.57, 1412.07, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -229.84, 1400.57, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -223.21, 1394.08, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -236.45, 1407.07, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -221.18, 1392.11, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -253.44, 1419.22, 120.03,   0.00, 0.00, 224.54);
	CreateDynamicObject(978, -258.43, 1414.36, 120.03,   0.00, 0.00, 224.54);
	CreateDynamicObject(978, -257.24, 1408.25, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -250.74, 1401.84, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -244.12, 1395.28, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -241.59, 1392.76, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -272.13, 1442.65, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -266.20, 1436.86, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -251.48, 1445.75, 114.55,   0.00, 0.00, 45.43);
	CreateDynamicObject(978, -246.59, 1450.69, 114.55,   0.00, 0.00, 45.43);
	CreateDynamicObject(978, -250.83, 1439.37, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -245.88, 1434.46, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -259.68, 1430.41, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -254.10, 1424.90, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -246.03, 1421.74, 114.55,   0.00, 0.00, 358.38);
	CreateDynamicObject(978, -236.98, 1421.03, 114.55,   0.00, 0.00, 355.63);
	CreateDynamicObject(978, -235.36, 1438.94, 114.55,   0.00, 0.00, 45.43);
	CreateDynamicObject(978, -239.48, 1434.82, 114.55,   0.00, 0.00, 45.43);
	CreateDynamicObject(978, -225.45, 1397.12, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -220.49, 1392.32, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -251.84, 1416.52, 114.55,   0.00, 0.00, 89.97);
	CreateDynamicObject(978, -251.36, 1407.20, 114.55,   0.00, 0.00, 96.05);
	CreateDynamicObject(978, -227.97, 1416.78, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -223.01, 1411.88, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -232.17, 1403.66, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -237.30, 1408.65, 114.55,   0.00, 0.00, 316.12);
	CreateDynamicObject(978, -247.54, 1399.27, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -241.14, 1392.98, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -264.73, 1414.72, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -271.37, 1421.24, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -276.32, 1426.13, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -282.21, 1431.92, 114.55,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -266.60, 1405.87, 114.55,   0.00, 0.00, 45.43);
	CreateDynamicObject(978, -263.65, 1408.84, 114.55,   0.00, 0.00, 45.43);
	CreateDynamicObject(3493, -246.59, 1418.04, 99.93,   0.00, 0.00, 315.98);
	CreateDynamicObject(978, -264.60, 1415.53, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -269.24, 1420.12, 120.03,   0.00, 0.00, 315.51);
	CreateDynamicObject(978, -270.51, 1426.07, 120.03,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -266.43, 1430.22, 120.03,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -244.66, 1423.28, 109.09,   0.00, 0.00, 175.70);
	CreateDynamicObject(978, -252.10, 1445.29, 109.09,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -246.89, 1450.59, 109.09,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -258.60, 1438.70, 109.09,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -235.36, 1422.56, 109.09,   0.00, 0.00, 175.40);
	CreateDynamicObject(978, -242.59, 1409.38, 109.09,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -246.19, 1405.73, 109.09,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -251.11, 1405.70, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -257.61, 1412.22, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -263.15, 1417.78, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -268.95, 1423.62, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -272.38, 1431.61, 109.09,   0.00, 0.00, 271.68);
	CreateDynamicObject(978, -272.64, 1440.81, 109.09,   0.00, 0.00, 271.68);
	CreateDynamicObject(978, -272.91, 1450.08, 109.09,   0.00, 0.00, 271.68);
	CreateDynamicObject(978, -258.91, 1432.04, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -253.21, 1426.31, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -226.67, 1419.20, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -221.90, 1414.42, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -230.81, 1405.29, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -215.36, 1408.34, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -210.45, 1403.42, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -235.70, 1410.23, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -230.59, 1398.49, 109.09,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -233.87, 1395.16, 109.09,   0.00, 0.00, 45.41);
	CreateDynamicObject(978, -245.97, 1400.01, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -241.06, 1395.07, 109.09,   0.00, 0.00, 314.89);
	CreateDynamicObject(978, -253.51, 1448.78, 103.42,   0.00, 0.00, 89.04);
	CreateDynamicObject(978, -253.32, 1458.09, 103.42,   0.00, 0.00, 89.04);
	CreateDynamicObject(978, -249.97, 1440.60, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -244.98, 1435.76, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -245.70, 1421.62, 103.42,   0.00, 0.00, 352.19);
	CreateDynamicObject(978, -260.21, 1430.68, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -254.26, 1424.90, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -272.12, 1442.64, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -266.41, 1437.08, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -236.40, 1421.08, 103.42,   0.00, 0.00, 1.21);
	CreateDynamicObject(978, -280.22, 1437.91, 103.42,   0.00, 0.00, 250.03);
	CreateDynamicObject(978, -282.63, 1428.90, 103.42,   0.00, 0.00, 259.90);
	CreateDynamicObject(978, -282.61, 1419.70, 103.42,   0.00, 0.00, 280.24);
	CreateDynamicObject(978, -277.83, 1444.45, 103.42,   0.00, 0.00, 250.03);
	CreateDynamicObject(978, -239.22, 1435.16, 103.51,   0.00, 0.00, 226.46);
	CreateDynamicObject(978, -232.79, 1441.93, 103.51,   0.00, 0.00, 226.46);
	CreateDynamicObject(978, -255.30, 1412.30, 103.42,   0.00, 0.00, 357.36);
	CreateDynamicObject(978, -246.00, 1411.68, 103.42,   0.00, 0.00, 354.94);
	CreateDynamicObject(978, -227.88, 1418.01, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -222.91, 1413.15, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -220.46, 1392.75, 103.42,   0.00, 0.00, 315.71);
	CreateDynamicObject(978, -227.10, 1399.22, 103.42,   0.00, 0.00, 315.71);
	CreateDynamicObject(978, -233.74, 1405.69, 103.42,   0.00, 0.00, 315.71);
	CreateDynamicObject(978, -237.09, 1408.94, 103.42,   0.00, 0.00, 315.71);
	CreateDynamicObject(978, -263.92, 1415.94, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -268.89, 1420.85, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -264.35, 1402.65, 103.42,   0.00, 0.00, 357.36);
	CreateDynamicObject(978, -255.19, 1402.05, 103.42,   0.00, 0.00, 354.94);
	CreateDynamicObject(978, -274.25, 1406.13, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -279.21, 1411.00, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -246.42, 1399.07, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -241.42, 1394.21, 103.42,   0.00, 0.00, 135.77);
	CreateDynamicObject(978, -242.29, 1380.41, 103.42,   0.00, 0.00, 351.35);
	CreateDynamicObject(978, -233.19, 1379.01, 103.42,   0.00, 0.00, 351.35);
	CreateDynamicObject(978, -255.50, 1388.34, 103.42,   0.00, 0.00, 314.21);
	CreateDynamicObject(978, -250.89, 1383.48, 103.42,   0.00, 0.00, 314.21);
	CreateDynamicObject(978, -262.18, 1388.51, 103.51,   0.00, 0.00, 46.03);
	CreateDynamicObject(978, -267.38, 1383.06, 103.51,   0.00, 0.00, 46.03);
	CreateDynamicObject(978, -230.01, 1382.82, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -255.49, 1412.32, 98.07,   0.00, 0.00, 357.93);
	CreateDynamicObject(978, -246.14, 1411.94, 98.07,   0.00, 0.00, 357.93);
	CreateDynamicObject(978, -234.35, 1423.91, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -239.38, 1428.63, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -257.82, 1446.66, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -264.61, 1453.01, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -250.95, 1439.77, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -245.62, 1434.69, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -255.00, 1425.19, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -261.74, 1431.58, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -268.45, 1437.91, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -275.01, 1444.55, 98.07,   0.00, 0.00, 132.49);
	CreateDynamicObject(978, -248.80, 1425.26, 98.07,   0.00, 0.00, 225.74);
	CreateDynamicObject(978, -245.15, 1429.01, 98.07,   0.00, 0.00, 225.74);
	CreateDynamicObject(978, -227.98, 1417.32, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -223.64, 1413.25, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -232.31, 1403.40, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -237.36, 1408.21, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -235.07, 1387.61, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -241.93, 1393.43, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -247.00, 1398.22, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -253.86, 1404.75, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -260.61, 1411.10, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -265.66, 1415.88, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -270.29, 1420.30, 98.07,   0.00, 0.00, 135.98);
	CreateDynamicObject(978, -225.96, 1397.71, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -220.77, 1392.80, 98.07,   0.00, 0.00, 136.68);
	CreateDynamicObject(978, -339.54, 1311.55, 51.25,   0.00, 0.00, 332.55);
	CreateDynamicObject(978, -354.87, 1470.42, 63.50,   0.00, 0.00, 162.22);
	CreateDynamicObject(978, -363.82, 1470.91, 62.99,   0.00, 0.00, 191.70);
	CreateDynamicObject(978, -372.85, 1468.51, 62.07,   0.00, 0.00, 199.31);
	CreateDynamicObject(978, -380.45, 1463.67, 61.67,   0.00, 0.00, 226.41);
	CreateDynamicObject(978, -385.05, 1455.73, 61.35,   0.00, 0.00, 252.90);
	CreateDynamicObject(978, -347.14, 1316.89, 50.85,   0.00, 0.00, 317.26);
	CreateDynamicObject(978, -402.84, 1444.89, 36.04,   0.00, 0.00, 128.56);
	CreateDynamicObject(978, -409.88, 1450.76, 35.43,   0.00, 6.00, 152.00);
	CreateDynamicObject(978, -418.63, 1453.76, 34.37,   0.00, 6.00, 170.15);
	CreateDynamicObject(0, -427.75, 1454.17, 33.56,   4.00, 4.00, 184.00);
	CreateDynamicObject(978, -1174.14, 1802.22, 40.09,   0.00, 0.00, 226.53);
	CreateDynamicObject(978, -1178.03, 1794.15, 40.09,   0.00, 0.00, 261.97);
	CreateDynamicObject(978, -1166.23, 1805.71, 40.09,   0.00, 0.00, 181.13);
	CreateDynamicObject(978, -1174.94, 1786.70, 40.09,   0.00, 0.00, 323.17);
	CreateDynamicObject(978, -845.43, 1844.67, 59.61,   0.00, 0.00, 91.96);
	CreateDynamicObject(978, -845.90, 1835.36, 59.61,   0.00, 0.00, 82.35);
	CreateDynamicObject(978, -847.90, 1826.25, 59.61,   0.00, 0.00, 72.89);
	CreateDynamicObject(978, -851.00, 1817.43, 59.61,   0.00, 0.00, 68.26);
	CreateDynamicObject(978, -855.28, 1809.20, 59.61,   0.00, 0.00, 56.94);
	CreateDynamicObject(978, -887.17, 2001.40, 60.12,   0.00, 0.00, 227.58);
	CreateDynamicObject(978, -892.26, 1993.69, 60.12,   0.00, 0.00, 245.48);
	CreateDynamicObject(978, -894.19, 1984.75, 60.12,   0.00, 0.00, 270.06);
	CreateDynamicObject(978, -403.77, 2087.43, 61.28,   0.00, 0.00, 195.92);
	CreateDynamicObject(978, -394.64, 2088.07, 61.12,   0.00, -2.00, 172.17);
	CreateDynamicObject(978, -386.05, 2084.92, 60.79,   0.00, -2.00, 147.32);
	CreateDynamicObject(978, -378.80, 2079.10, 60.47,   0.00, -2.00, 135.06);
	CreateDynamicObject(978, -373.71, 2071.44, 60.30,   0.00, 0.00, 112.00);
	CreateDynamicObject(978, -479.53, 1960.55, 84.74,   0.00, -8.00, 243.91);
	CreateDynamicObject(978, -483.59, 1952.26, 85.89,   0.00, -8.00, 244.00);
	CreateDynamicObject(978, -486.26, 1943.55, 86.52,   0.00, 0.00, 261.64);
	CreateDynamicObject(978, -472.82, 1768.12, 72.73,   0.00, 2.00, 300.00);
	CreateDynamicObject(978, -467.55, 1760.42, 72.43,   0.00, 2.00, 308.50);
	CreateDynamicObject(978, -460.35, 1754.79, 72.29,   0.00, 0.00, 335.00);
	CreateDynamicObject(978, -451.45, 1752.39, 72.29,   0.00, 0.00, 355.00);
	CreateDynamicObject(978, -442.27, 1753.26, 71.99,   0.00, 0.00, 15.77);
	CreateDynamicObject(978, -433.61, 1756.71, 71.99,   0.00, 0.00, 27.60);
	CreateDynamicObject(978, -426.22, 1762.21, 71.99,   0.00, 0.00, 45.65);
	CreateDynamicObject(978, -420.44, 1769.49, 71.74,   0.00, 3.00, 57.00);
	CreateDynamicObject(978, -393.97, 1745.84, 42.18,   0.00, -6.00, 65.19);
	CreateDynamicObject(18761, -446.65, 1481.42, 38.13,   0.00, 0.00, 187.00);
	//Farm
	CreateDynamicObject(5028, -2760.5646972656, 2090.5073242188, 47.677398681641, 0, 0, 272);
	CreateDynamicObject(5112, -2813.7604980469, 1962.7210693359, 27.524959564209, 0, 8, 268);
	CreateDynamicObject(5191, -2817.798828125, 1849.7335205078, 16.799964904785, 0, 0, 358);
	CreateDynamicObject(5297, -2819.9189453125, 1729.3466796875, 18.061765670776, 0, 0, 90);
	CreateDynamicObject(3330, -2820.0297851563, 1676.7259521484, 2.1816372871399, 0, 0, 0);
	CreateDynamicObject(3330, -2819.8415527344, 1784.9442138672, 12.390468597412, 0, 0, 0);
	CreateDynamicObject(3330, -2813.5378417969, 1969.5579833984, 23.233688354492, 0, 0, 358);
	CreateDynamicObject(3330, -2811.1169433594, 2038.0471191406, 31.590847015381, 0, 0, 358);
	CreateDynamicObject(3330, -2803.5405273438, 2083.279296875, 37.370109558105, 0, 0, 342);
	CreateDynamicObject(4016, -2822.2685546875, 1645.01171875, -36.179904937744, 0, 0, 0);
	CreateDynamicObject(4016, -2820.2136230469, 1624.2156982422, -36.238555908203, 0, 0, 179.99993896484);
	CreateDynamicObject(4016, -2822.36328125, 1580.8193359375, -36.165004730225, 0, 0, 0);
	CreateDynamicObject(4016, -2821.9096679688, 1559.5073242188, -36.179904937744, 0, 0, 180);
	CreateDynamicObject(4016, -2759.1474609375, 1622.6094970703, -36.177619934082, 0, 0, 270);
	CreateDynamicObject(4016, -2783.1760253906, 1560.3798828125, -36.197196960449, 0, 0, 178);
	CreateDynamicObject(3214, -2779.7888183594, 1662.2044677734, 21.432235717773, 0, 0, 0);
	CreateDynamicObject(3255, -2762.9035644531, 1660.9514160156, 12.399885177612, 0, 0, 0);
	CreateDynamicObject(3256, -2859.3933105469, 1654.8415527344, 12.472599029541, 0, 0, 0);
	CreateDynamicObject(3257, -2862.9348144531, 1638.8154296875, 12.472595214844, 0, 0, 0);
	CreateDynamicObject(3257, -2862.845703125, 1621.8544921875, 12.476345062256, 0, 0, 0);
	CreateDynamicObject(3258, -2869.0905761719, 1615.1527099609, 12.476345062256, 0, 0, 0);
	CreateDynamicObject(3258, -2869.3022460938, 1627.2221679688, 12.476345062256, 0, 0, 0);
	CreateDynamicObject(3258, -2869.5161132813, 1645.7520751953, 12.472595214844, 0, 0, 0);
	CreateDynamicObject(3259, -2871.5065917969, 1634.8991699219, 12.476345062256, 0, 0, 0);
	CreateDynamicObject(3427, -2784.3090820313, 1601.3903808594, 12.491245269775, 0, 0, 0);
	CreateDynamicObject(3427, -2794.990234375, 1601.1501464844, 12.487499237061, 0, 0, 0);
	CreateDynamicObject(3427, -2804.4025878906, 1601.1619873047, 12.487499237061, 0, 0, 0);
	CreateDynamicObject(3637, -2773.8469238281, 1607.3505859375, 20.577362060547, 0, 0, 0);
	CreateDynamicObject(3636, -2859.8295898438, 1543.9915771484, 20.028190612793, 0, 0, 0);
	CreateDynamicObject(3636, -2861.2272949219, 1569.2241210938, 20.093090057373, 0, 0, 0);
	CreateDynamicObject(3636, -2862.5107421875, 1594.6383056641, 20.064344406128, 0, 0, 0);
	CreateDynamicObject(3637, -2796.4138183594, 1615.7882080078, 20.500064849854, 0, 0, 90);
	CreateDynamicObject(3673, -2754.5078125, 1537.3211669922, 36.455753326416, 0, 0, 0);
	CreateDynamicObject(6929, -2788.5900878906, 1543.4326171875, 21.54615020752, 0, 0, 90);
	CreateDynamicObject(16076, -2799.8000488281, 1662.0744628906, 16.989301681519, 0, 0, 0);
	CreateDynamicObject(3675, -2791.4731445313, 1663.7486572266, 21.034826278687, 0, 0, 180);
	CreateDynamicObject(16267, -2566.5163574219, 1546.1719970703, 1.4289102554321, 0, 2, 0);
	CreateDynamicObject(16267, -2704.3745117188, 1546.2116699219, 1.3749996423721, 0, 0, 0);
	CreateDynamicObject(10814, -2831.513671875, 1552.3154296875, 16.350898742676, 0, 0, 0);
	CreateDynamicObject(10675, -2754.75390625, 1550.5607910156, 15.789030075073, 0, 0, 269.99996948242);
	CreateDynamicObject(12983, -2834.4599609375, 1619.3786621094, 12.313949584961, 0, 0, 0);
	CreateDynamicObject(3763, -2860.1616210938, 1665.564453125, 45.665134429932, 0, 0, 0);
	CreateDynamicObject(8040, -2848.3957519531, 1714.5872802734, 13.222583770752, 0, 0, 270);
	CreateDynamicObject(16133, -2791.6174316406, 1675.0988769531, 0, 0, 0, 266);
	CreateDynamicObject(16133, -2748.8786621094, 1669.2257080078, 0, 0, 0, 244);
	CreateDynamicObject(16133, -2874.5285644531, 1685.7796630859, 0, 0, 0, 356);
	CreateDynamicObject(16133, -2875.5927734375, 1724.5964355469, -0.17500001192093, 0, 0, 348);
	CreateDynamicObject(16133, -2875.3461914063, 1650.1412353516, 0, 0, 0, 336);
	CreateDynamicObject(16133, -2876.466796875, 1604.1136474609, 0, 0, 0, 352);
	CreateDynamicObject(16133, -2875.044921875, 1555.0322265625, 0, 0, 0, 352);
	CreateDynamicObject(16133, -2848.6149902344, 1528.7235107422, 0, 0, 0, 78);
	CreateDynamicObject(16133, -2801.2106933594, 1527.9680175781, 0, 0, 0, 84);
	CreateDynamicObject(16133, -2754.8698730469, 1529.5511474609, 0, 0, 0, 80);
	CreateDynamicObject(16133, -2731.8210449219, 1555.5267333984, 0, 0, 0, 156);
	CreateDynamicObject(16133, -2722.8676757813, 1598.353515625, 0, 0, 0, 172);
	CreateDynamicObject(16133, -2723.3764648438, 1642.3930664063, 0, 0, 0, 174);
	CreateDynamicObject(16133, -2856.556640625, 1761.1403808594, 0, 0, 0, 266);
	CreateDynamicObject(7023, -2806.3308105469, 1672.4742431641, 12.472591400146, 0, 0, 269.99996948242);
	CreateDynamicObject(8168, -2827.3608398438, 1671.0623779297, 14.245574951172, 0, 0, 108);
	CreateDynamicObject(5244, -2787.728515625, 1567.291015625, 14.964256286621, 0, 0, 0);
	CreateDynamicObject(3378, -2812.6286621094, 1562.6340332031, 13.661170005798, 0, 0, 0);
	CreateDynamicObject(3378, -2812.6284179688, 1562.6473388672, 16.01198387146, 0, 0, 0);
	CreateDynamicObject(17055, -2822.22265625, 1549.4930419922, 14.833419799805, 0, 0, 0);
	CreateDynamicObject(17055, -2836.5876464844, 1549.7375488281, 14.81477355957, 0, 0, 0);
	CreateDynamicObject(3066, -2803.2182617188, 1564.4534912109, 15.306811332703, 0, 0, 0);
	CreateDynamicObject(3066, -2792.6611328125, 1563.9721679688, 15.306811332703, 0, 0, 0);
	CreateDynamicObject(2062, -2826.390625, 1551.9467773438, 13.059878349304, 0, 0, 0);
	CreateDynamicObject(3474, -2738.6752929688, 1647.5120849609, 19.39485168457, 0, 0, 0);
	CreateDynamicObject(3571, -2739.7653808594, 1643.7939453125, 16.072843551636, 0, 0, 270);
	CreateDynamicObject(3573, -2737.7409667969, 1626.9858398438, 15.166575431824, 0, 0, 0);
	CreateDynamicObject(3573, -2737.7255859375, 1618.8220214844, 15.166575431824, 0, 0, 0);
	CreateDynamicObject(3630, -2735.0832519531, 1612.5955810547, 13.967506408691, 0, 0, 0);
	CreateDynamicObject(3630, -2735.0932617188, 1612.5198974609, 16.960256576538, 0, 0, 0);
	CreateDynamicObject(3722, -2733.2563476563, 1599.6030273438, 16.618160247803, 0, 0, 0);
	CreateDynamicObject(1358, -2739.3054199219, 1608.7668457031, 13.678430557251, 0, 0, 0);
	CreateDynamicObject(1358, -2738.8420410156, 1605.1500244141, 13.678430557251, 0, 0, 0);
	CreateDynamicObject(1344, -2737.9514160156, 1603.1640625, 13.283102035522, 0, 0, 0);
	CreateDynamicObject(2671, -2739.6638183594, 1602.2224121094, 12.474880218506, 0, 0, 0);
	CreateDynamicObject(2673, -2741.0908203125, 1606.6751708984, 12.562711715698, 0, 0, 0);
	CreateDynamicObject(18248, -2736.021484375, 1600.2766113281, 20.41640663147, 0, 0, 174);
	CreateDynamicObject(1237, -2732.8972167969, 1588.3195800781, 12.880639076233, 0, 0, 0);
	CreateDynamicObject(1301, -2739.732421875, 1643.9334716797, 17.422227859497, 0, 0, 0);
	CreateDynamicObject(1237, -2733.8796386719, 1588.2890625, 12.880639076233, 0, 0, 0);
	CreateDynamicObject(1237, -2732.0119628906, 1588.3201904297, 12.880639076233, 0, 0, 0);
	CreateDynamicObject(1237, -2733.4519042969, 1587.4812011719, 12.880639076233, 0, 0, 0);
	CreateDynamicObject(1237, -2731.0444335938, 1588.2938232422, 12.880639076233, 0, 0, 0);
	CreateDynamicObject(1243, -2592.3200683594, 1580.3587646484, -2.5, 0, 0, 0);
	CreateDynamicObject(1243, -2676.9450683594, 1758.6331787109, -2.5000009536743, 0, 0, 0);
	CreateDynamicObject(3515, -2827.0786132813, 1636.6857910156, 16.227945327759, 0, 0, 0);
	CreateDynamicObject(3877, -2814.5163574219, 1674.6566162109, 14.182544708252, 0, 0, 0);
	CreateDynamicObject(3463, -2819.93359375, 1701.4916992188, 12.645586013794, 0, 0, 0);
	CreateDynamicObject(3463, -2819.8010253906, 1731.8167724609, 16.89800453186, 0, 0, 0);
	CreateDynamicObject(3463, -2819.8564453125, 1757.6577148438, 20.809228897095, 0, 0, 0);
	CreateDynamicObject(3463, -2819.8771972656, 1784.2430419922, 22.691654205322, 0, 0, 0);
	CreateDynamicObject(3463, -2818.9675292969, 1813.1732177734, 22.508373260498, 0, 0, 0);
	CreateDynamicObject(3463, -2818.1677246094, 1835.9504394531, 22.508373260498, 0, 0, 0);
	CreateDynamicObject(3463, -2817.2219238281, 1861.9158935547, 22.508373260498, 0, 0, 0);
	CreateDynamicObject(3463, -2816.1462402344, 1894.2315673828, 22.508373260498, 0, 0, 0);
	CreateDynamicObject(3463, -2814.8291015625, 1932.4892578125, 28.633184432983, 0, 0, 0);
	CreateDynamicObject(3463, -2813.693359375, 1965.6108398438, 33.350296020508, 0, 0, 0);
	CreateDynamicObject(3463, -2812.7568359375, 1991.2553710938, 36.683826446533, 0, 0, 0);
	CreateDynamicObject(3463, -2811.8498535156, 2018.0362548828, 39.854667663574, 0, 0, 0);
	CreateDynamicObject(3463, -2810.9836425781, 2042.6215820313, 42.472076416016, 0, 0, 0);
	CreateDynamicObject(3463, -2808.3862304688, 2064.736328125, 45.203750610352, 0, 0, 0);
	CreateDynamicObject(3463, -2804.0122070313, 2081.4584960938, 47.510875701904, 0, 0, 0);
	CreateDynamicObject(3463, -2797.5185546875, 2098.3703613281, 49.959648132324, 0, 0, 0);
	CreateDynamicObject(3463, -2787.1789550781, 2117.3845214844, 52.749271392822, 0, 0, 0);
	CreateDynamicObject(3463, -2776.2470703125, 2132.36328125, 54.808609008789, 0, 0, 336);
	CreateDynamicObject(3463, -2761.7907714844, 2147.7294921875, 56.571838378906, 0, 0, 322);
	CreateDynamicObject(3463, -2746.4099121094, 2160.1333007813, 57.430980682373, 0, 0, 308);
	CreateDynamicObject(3463, -2729.5671386719, 2170.4182128906, 57.351455688477, 0, 0, 302);
	CreateDynamicObject(3463, -2714.1052246094, 2177.4846191406, 56.544120788574, 0, 0, 298);
	CreateDynamicObject(1696, -2699.6511230469, 2202.3986816406, 54.998416900635, 0, 0, 200);
	CreateDynamicObject(1696, -2703.9001464844, 2200.8464355469, 54.998138427734, 0, 0, 200);
	CreateDynamicObject(18452, -2700.2624511719, 2195.1774902344, 52.641639709473, 0, 0, 110);
	CreateDynamicObject(18452, -2698.220703125, 2187.9641113281, 52.638599395752, 0, 0, 284);
	CreateDynamicObject(18452, -2696.7229003906, 2180.5061035156, 52.633670806885, 0, 0, 280);
	CreateDynamicObject(18452, -2696.1403808594, 2175.9296875, 52.629642486572, 0, 0, 276);
	CreateDynamicObject(1696, -2693.4162597656, 2169.6459960938, 55.011890411377, 0, 0, 6);
	CreateDynamicObject(1696, -2697.6115722656, 2169.2326660156, 55.028728485107, 0, 0, 6);
	CreateDynamicObject(1237, -2689.845703125, 2168.0258789063, 54.4296875, 0, 0, 0);
	CreateDynamicObject(1237, -2689.8791503906, 2173.0759277344, 54.4296875, 0, 0, 0);
	CreateDynamicObject(1237, -2690.3559570313, 2177.7233886719, 54.4296875, 0, 0, 0);
	CreateDynamicObject(1237, -2691.4780273438, 2185.0634765625, 54.395774841309, 0, 0, 0);
	CreateDynamicObject(1237, -2693.3627929688, 2192.6096191406, 54.346618652344, 0, 0, 0);
	CreateDynamicObject(1237, -2697.8376464844, 2205.5732421875, 54.283195495605, 0, 0, 0);
	CreateDynamicObject(1237, -2695.3132324219, 2199.3125, 54.301372528076, 0, 0, 0);
	CreateDynamicObject(982, -2693.2412109375, 2186.5290527344, 56.703071594238, 0, 0, 12);
	CreateDynamicObject(1290, -2696.3781738281, 2200.1201171875, 62.047874450684, 0, 0, 22);
	CreateDynamicObject(1290, -2693.6782226563, 2191.787109375, 62.044834136963, 0, 0, 18);
	CreateDynamicObject(1290, -2691.9191894531, 2183.5915527344, 62.039905548096, 0, 0, 12);
	CreateDynamicObject(1290, -2690.7565917969, 2172.8525390625, 62.035877227783, 0, 0, 10);
	CreateDynamicObject(1237, -2701.5759277344, 2171.5244140625, 55.950572967529, 0, 0, 0);
	CreateDynamicObject(1237, -2705.3889160156, 2170.3891601563, 56.308216094971, 0, 0, 0);
	CreateDynamicObject(1237, -2709.0886230469, 2168.9321289063, 56.601974487305, 0, 0, 0);
	CreateDynamicObject(1237, -2712.7761230469, 2167.603515625, 56.890956878662, 0, 0, 0);
	CreateDynamicObject(1237, -2716.5295410156, 2166.2434082031, 57.185352325439, 0, 0, 0);
	CreateDynamicObject(1237, -2720.6115722656, 2164.3571777344, 57.385467529297, 0, 0, 0);
	CreateDynamicObject(1237, -2723.9255371094, 2162.4724121094, 57.488422393799, 0, 0, 0);
	CreateDynamicObject(1237, -2727.3054199219, 2160.6840820313, 57.5915184021, 0, 0, 0);
	CreateDynamicObject(1237, -2731.4052734375, 2158.4948730469, 57.716857910156, 0, 0, 0);
	CreateDynamicObject(1237, -2735.3881835938, 2156.2985839844, 57.785789489746, 0, 0, 0);
	CreateDynamicObject(1237, -2739.25390625, 2153.5883789063, 57.659313201904, 0, 0, 0);
	CreateDynamicObject(1237, -2742.4064941406, 2151.2136230469, 57.552772521973, 0, 0, 0);
	CreateDynamicObject(1237, -2745.7365722656, 2148.7922363281, 57.441715240479, 0, 0, 0);
	CreateDynamicObject(1237, -2750.0610351563, 2145.6247558594, 57.276744842529, 0, 0, 0);
	CreateDynamicObject(1237, -2753.4284667969, 2142.5336914063, 56.945846557617, 0, 0, 0);
	CreateDynamicObject(1237, -2756.939453125, 2139.2067871094, 56.588092803955, 0, 0, 0);
	CreateDynamicObject(1237, -2760.4582519531, 2135.8532714844, 56.228511810303, 0, 0, 0);
	CreateDynamicObject(1237, -2763.6362304688, 2132.8854980469, 55.895248413086, 0, 0, 0);
	CreateDynamicObject(1237, -2766.623046875, 2129.2727050781, 55.385360717773, 0, 0, 0);
	CreateDynamicObject(1237, -2769.4313964844, 2125.6020507813, 54.882881164551, 0, 0, 0);
	CreateDynamicObject(1237, -2772.2817382813, 2122.3029785156, 54.410617828369, 0, 0, 0);
	CreateDynamicObject(1237, -2775.2297363281, 2118.705078125, 53.905742645264, 0, 0, 0);
	CreateDynamicObject(1237, -2777.7958984375, 2114.6286621094, 53.284118652344, 0, 0, 0);
	CreateDynamicObject(1237, -2780.0493164063, 2110.8928222656, 52.707679748535, 0, 0, 0);
	CreateDynamicObject(1237, -2782.5114746094, 2106.9270019531, 52.091377258301, 0, 0, 0);
	CreateDynamicObject(970, -2810.2749023438, 1684.3404541016, 13.035655975342, 0, 0, 92);
	CreateDynamicObject(970, -2829.5229492188, 1789.7772216797, 23.346506118774, 0, 0, 88);
	CreateDynamicObject(970, -2829.3234863281, 1785.6684570313, 23.327249526978, 0, 0, 278);
	CreateDynamicObject(970, -2810.107421875, 1789.0612792969, 23.299638748169, 0, 0, 88);
	CreateDynamicObject(970, -2810.3969726563, 1784.9195556641, 23.31516456604, 0, 0, 84);
	CreateDynamicObject(1237, -2784.8845214844, 2102.8544921875, 51.468170166016, 0, 0, 0);
	CreateDynamicObject(1237, -2786.9848632813, 2098.4125976563, 50.759998321533, 0, 0, 0);
	CreateDynamicObject(1237, -2788.6848144531, 2094.8151855469, 50.189525604248, 0, 0, 0);
	CreateDynamicObject(1237, -2790.5847167969, 2090.4416503906, 49.504367828369, 0, 0, 0);
	CreateDynamicObject(1237, -2792.912109375, 2085.3491210938, 48.705902099609, 0, 0, 0);
	CreateDynamicObject(1237, -2794.5981445313, 2079.7873535156, 47.869148254395, 0, 0, 0);
	CreateDynamicObject(1237, -2796.3161621094, 2073.9709472656, 46.989501953125, 0, 0, 0);
	CreateDynamicObject(1237, -2797.9865722656, 2067.9895019531, 46.088035583496, 0, 0, 0);
	CreateDynamicObject(1237, -2798.8811035156, 2062.6867675781, 45.350681304932, 0, 0, 0);
	CreateDynamicObject(1237, -2800.0026855469, 2056.7023925781, 44.520324707031, 0, 0, 0);
	CreateDynamicObject(1237, -2801.078125, 2050.357421875, 43.641418457031, 0, 0, 0);
	CreateDynamicObject(1237, -2801.3134765625, 2045.1472167969, 42.994636535645, 0, 0, 0);
	CreateDynamicObject(1237, -2801.4645996094, 2039.9265136719, 42.367782592773, 0, 0, 0);
	CreateDynamicObject(1237, -2801.8791503906, 2034.0589599609, 41.664287567139, 0, 0, 0);
	CreateDynamicObject(1237, -2820.6062011719, 2034.9636230469, 41.792110443115, 0, 0, 0);
	CreateDynamicObject(1237, -2820.6591796875, 2040.1131591797, 42.334358215332, 0, 0, 0);
	CreateDynamicObject(1237, -2820.6413574219, 2044.5257568359, 42.798778533936, 0, 0, 0);
	CreateDynamicObject(1237, -2820.4572753906, 2049.861328125, 43.348964691162, 0, 0, 0);
	CreateDynamicObject(1237, -2819.6938476563, 2055.3227539063, 43.999893188477, 0, 0, 0);
	CreateDynamicObject(1237, -2818.87890625, 2060.3950195313, 44.615528106689, 0, 0, 0);
	CreateDynamicObject(1237, -2818.029296875, 2065.5170898438, 45.237525939941, 0, 0, 0);
	CreateDynamicObject(1237, -2817.14453125, 2070.857421875, 45.883987426758, 0, 0, 0);
	CreateDynamicObject(1237, -2815.9230957031, 2075.494140625, 46.502948760986, 0, 0, 0);
	CreateDynamicObject(1237, -2814.4729003906, 2080.2678222656, 47.13712310791, 0, 0, 0);
	CreateDynamicObject(1237, -2813.1862792969, 2084.2983398438, 47.674362182617, 0, 0, 0);
	CreateDynamicObject(1237, -2811.869140625, 2088.7358398438, 48.2629737854, 0, 0, 0);
	CreateDynamicObject(1237, -2810.4416503906, 2093.185546875, 48.864234924316, 0, 0, 0);
	CreateDynamicObject(1237, -2808.7817382813, 2096.8256835938, 49.368049621582, 0, 0, 0);
	CreateDynamicObject(1237, -2807.1467285156, 2100.3315429688, 49.854869842529, 0, 0, 0);
	CreateDynamicObject(1237, -2805.4638671875, 2104.2395019531, 50.391380310059, 0, 0, 0);
	CreateDynamicObject(1237, -2803.9284667969, 2107.734375, 50.872489929199, 0, 0, 0);
	CreateDynamicObject(1237, -2802.3442382813, 2111.4025878906, 51.37313079834, 0, 0, 0);
	CreateDynamicObject(1237, -2799.6704101563, 2115.7072753906, 51.977027893066, 0, 0, 0);
	CreateDynamicObject(1237, -2797.2551269531, 2119.5122070313, 52.498611450195, 0, 0, 0);
	CreateDynamicObject(1237, -2795.1174316406, 2123.0764160156, 52.980381011963, 0, 0, 0);
	CreateDynamicObject(1237, -2792.638671875, 2127.0187988281, 53.519538879395, 0, 0, 0);
	CreateDynamicObject(1237, -2789.7521972656, 2130.9924316406, 54.058235168457, 0, 0, 0);
	CreateDynamicObject(1237, -2786.9689941406, 2134.4807128906, 54.483856201172, 0, 0, 0);
	CreateDynamicObject(1237, -2784.1130371094, 2137.9521484375, 54.912212371826, 0, 0, 0);
	CreateDynamicObject(970, -2812.5334472656, 1674.9298095703, 13.068151473999, 0, 0, 0);
	CreateDynamicObject(982, -2856.4787597656, 1662.3428955078, 13.159899711609, 0, 0, 0);
	CreateDynamicObject(984, -2856.5090332031, 1643.1149902344, 13.109278678894, 0, 0, 0);
	CreateDynamicObject(983, -2856.5268554688, 1633.4271240234, 13.159899711609, 0, 0, 0);
	CreateDynamicObject(982, -2822.4267578125, 1638.0324707031, 13.198327064514, 0, 0, 90);
	CreateDynamicObject(984, -2850.0383300781, 1638.1486816406, 13.113024711609, 0, 0, 90);
	CreateDynamicObject(987, -2797.8967285156, 1627.8662109375, 12.417694091797, 0, 0, 179.99993896484);
	CreateDynamicObject(987, -2785.9858398438, 1628.3033447266, 12.478630065918, 0, 0, 181.99996948242);
	CreateDynamicObject(987, -2809.6538085938, 1588.4014892578, 12.487499237061, 0, 0, 0);
	CreateDynamicObject(987, -2797.6926269531, 1588.3939208984, 12.491245269775, 0, 0, 0);
	CreateDynamicObject(987, -2785.705078125, 1588.3803710938, 12.491245269775, 0, 0, 0);
	CreateDynamicObject(987, -2773.7543945313, 1588.3725585938, 12.491245269775, 0, 0, 28);
	CreateDynamicObject(3941, -2844.4240722656, 1565.9265136719, 15.649959564209, 0, 0, 0);
	CreateDynamicObject(3939, -2847.376953125, 1581.0924072266, 14.255921363831, 0, 0, 0);
	CreateDynamicObject(3939, -2847.3693847656, 1586.9647216797, 14.255921363831, 0, 0, 0);
	CreateDynamicObject(1684, -2804.7426757813, 1593.2331542969, 14.077375411987, 0, 0, 0);
	CreateDynamicObject(1684, -2794.6564941406, 1593.2067871094, 14.081121444702, 0, 0, 0);
	CreateDynamicObject(16001, -2776.5109863281, 1620.8624267578, 12.478630065918, 0, 0, 182);
	CreateDynamicObject(11099, -2801.779296875, 1578.0174560547, 12.491245269775, 0, 0, 0);
	CreateDynamicObject(3666, -2824.6364746094, 1638.9869384766, 17.296384811401, 0, 0, 0);
	CreateDynamicObject(3666, -2844.3041992188, 1638.9989013672, 17.296384811401, 0, 0, 0);
	CreateDynamicObject(2780, -2747.9697265625, 1537.1624755859, 62.17720413208, 0, 0, 0);
	CreateDynamicObject(2780, -2859.4677734375, 1654.7868652344, 48.316349029541, 0, 0, 0);
	CreateDynamicObject(8855, -2848.2526855469, 1704.2154541016, 12.869149208069, 0, 0, 0);
	CreateDynamicObject(8855, -2848.2236328125, 1724.9614257813, 12.869149208069, 0, 0, 0);
	CreateDynamicObject(8557, -2848.6286621094, 1752.203125, 18.193935394287, 0, 0, 0);
	CreateDynamicObject(3934, -2829.9020996094, 1599.2282714844, 21.514776229858, 0, 0, 0);
	CreateDynamicObject(3934, -2818.6533203125, 1615.7899169922, 21.514776229858, 0, 0, 0);
	CreateDynamicObject(3876, -2853.3000488281, 1607.9113769531, 17.517072677612, 0, 0, 0);
	CreateDynamicObject(2921, -2808.3249511719, 1672.5321044922, 17.748575210571, 0, 0, 0);
	CreateDynamicObject(2886, -2825.1350097656, 1667.5723876953, 14.156094551086, 0, 0, 0);
	CreateDynamicObject(5822, -2834.7587890625, 1595.7768554688, 16.207036972046, 0, 0, 92);
	CreateDynamicObject(3666, -2833.8430175781, 1595.7030029297, 22.028461456299, 0, 0, 0);
	CreateDynamicObject(3666, -2826.1657714844, 1602.4927978516, 22.028461456299, 0, 0, 0);
	CreateDynamicObject(3666, -2826.1608886719, 1595.7406005859, 22.028461456299, 0, 0, 0);
	CreateDynamicObject(3666, -2833.7912597656, 1602.5128173828, 22.028461456299, 0, 0, 0);
	CreateDynamicObject(3666, -2822.5942382813, 1619.0714111328, 22.028461456299, 0, 0, 0);
	CreateDynamicObject(3666, -2814.9389648438, 1619.1219482422, 22.028461456299, 0, 0, 0);
	CreateDynamicObject(3666, -2822.6196289063, 1612.2596435547, 22.028461456299, 0, 0, 0);
	CreateDynamicObject(3666, -2814.9694824219, 1612.2926025391, 22.028461456299, 0, 0, 0);
	CreateDynamicObject(7922, -2853.2143554688, 1630.5706787109, 18.914413452148, 0, 0, 0);
	CreateDynamicObject(8674, -2846.9243164063, 1631.2067871094, 18.983989715576, 0, 0, 0);
	CreateDynamicObject(8674, -2836.5842285156, 1631.2114257813, 18.983989715576, 0, 0, 0);
	CreateDynamicObject(8674, -2853.951171875, 1624.482421875, 18.983989715576, 0, 0, 90);
	CreateDynamicObject(8674, -2853.9182128906, 1614.1754150391, 18.983989715576, 0, 0, 269.99996948242);
	CreateDynamicObject(8674, -2848.7268066406, 1609.0278320313, 18.983989715576, 0, 0, 0);
	CreateDynamicObject(8674, -2838.3833007813, 1609.0406494141, 18.983989715576, 0, 0, 0);
	CreateDynamicObject(7922, -2830.4770507813, 1630.7967529297, 18.914413452148, 0, 0, 272);
	CreateDynamicObject(7922, -2830.6989746094, 1620.3560791016, 18.914413452148, 0, 0, 179.99993896484);
	CreateDynamicObject(7922, -2853.2797851563, 1609.7546386719, 18.914413452148, 0, 0, 88);
	CreateDynamicObject(7922, -2835.4189453125, 1609.7612304688, 18.914413452148, 0, 0, 181.99996948242);
	CreateDynamicObject(7922, -2853.19921875, 1619.6156005859, 18.914413452148, 0, 0, 0);
	CreateDynamicObject(7922, -2835.0405273438, 1619.4916992188, 18.914413452148, 0, 0, 272);
	CreateDynamicObject(1594, -2851.5927734375, 1611.3709716797, 17.994066238403, 0, 0, 0);
	CreateDynamicObject(1594, -2852.3713378906, 1614.3514404297, 17.994066238403, 0, 0, 0);
	CreateDynamicObject(1594, -2848.2077636719, 1610.7296142578, 17.994066238403, 0, 0, 0);
	CreateDynamicObject(2009, -2852.9899902344, 1618.2640380859, 17.517074584961, 0, 0, 0);
	CreateDynamicObject(2637, -2841.9631347656, 1611.2482910156, 17.921815872192, 0, 0, 0);
	CreateDynamicObject(2784, -2825.5236816406, 1631.2878417969, 18.840602874756, 0, 0, 0);
	CreateDynamicObject(2800, -2828.60546875, 1630.7863769531, 18.497581481934, 0, 0, 0);
	CreateDynamicObject(1723, -2847.35546875, 1626.9685058594, 17.517074584961, 0, 0, 266);
	CreateDynamicObject(1723, -2848.5615234375, 1623.0653076172, 17.517074584961, 0, 0, 213.99996948242);
	CreateDynamicObject(2571, -2851.388671875, 1629.1121826172, 17.517074584961, 0, 0, 0);
	CreateDynamicObject(2179, -2853.6203613281, 1621.0070800781, 19.227151870728, 0, 0, 0);
	CreateDynamicObject(1958, -2841.1494140625, 1611.5559082031, 18.381055831909, 0, 0, 0);
	CreateDynamicObject(1958, -2841.5593261719, 1611.5556640625, 18.381055831909, 0, 0, 0);
	CreateDynamicObject(1709, -2837.2392578125, 1629.5460205078, 17.517074584961, 0, 0, 0);
	CreateDynamicObject(14820, -2841.9775390625, 1610.9541015625, 18.440870285034, 0, 0, 0);
	CreateDynamicObject(14720, -2834.9926757813, 1621.8735351563, 17.517074584961, 0, 0, 0);
	CreateDynamicObject(14805, -2846.5483398438, 1617.4222412109, 18.403827667236, 0, 0, 0);
	CreateDynamicObject(1649, -2842.1413574219, 1621.3334960938, 18.657825469971, 0, 0, 0);
	CreateDynamicObject(1649, -2842.1142578125, 1624.6179199219, 18.657825469971, 0, 0, 180);
	CreateDynamicObject(7921, -2845.3486328125, 1622.9786376953, 18.914413452148, 0, 0, 0);
	CreateDynamicObject(7921, -2838.9287109375, 1622.9654541016, 18.914413452148, 0, 0, 179.99993896484);
	CreateDynamicObject(1601, -2841.2060546875, 1621.8551025391, 17.909118652344, 0, 0, 269.99996948242);
	CreateDynamicObject(1605, -2842.763671875, 1623.0573730469, 19.02950668335, 0, 0, 90);
	CreateDynamicObject(1717, -2853.1137695313, 1629.220703125, 17.517074584961, 0, 0, 0);
	CreateDynamicObject(1808, -2838.1142578125, 1630.9425048828, 17.517074584961, 0, 0, 0);
	CreateDynamicObject(1808, -2838.5864257813, 1630.9426269531, 17.517074584961, 0, 0, 0);
	CreateDynamicObject(1808, -2839.0517578125, 1630.9470214844, 17.517074584961, 0, 0, 0);
	CreateDynamicObject(2190, -2842.4311523438, 1611.8612060547, 18.331142425537, 0, 0, 0);
	CreateDynamicObject(2229, -2843.4780273438, 1611.4693603516, 17.46307182312, 0, 0, 179.99993896484);
	CreateDynamicObject(2231, -2840.9106445313, 1611.4193115234, 17.517074584961, 0, 0, 180);
	CreateDynamicObject(14806, -2853.2548828125, 1625.4766845703, 18.603097915649, 0, 0, 90);
	CreateDynamicObject(640, -2842.0734863281, 1624.9898681641, 18.214107513428, 0, 0, 270);
	CreateDynamicObject(640, -2842.1606445313, 1620.9287109375, 18.214107513428, 0, 0, 269.99996948242);
	CreateDynamicObject(2898, -2842.2412109375, 1623.1353759766, 17.539016723633, 0, 0, 270);
	CreateDynamicObject(3930, -2843.9291992188, 1621.7585449219, 17.570205688477, 0, 0, 0);
	CreateDynamicObject(2936, -2840.5173339844, 1623.8146972656, 18.019237518311, 0, 0, 0);
	CreateDynamicObject(902, -2839.7658691406, 1622.9252929688, 18.950721740723, 0, 268, 0);
	CreateDynamicObject(1610, -2841.8776855469, 1624.3663330078, 17.56894493103, 0, 0, 0);
	CreateDynamicObject(1610, -2842.4465332031, 1624.3511962891, 17.56894493103, 0, 0, 0);
	CreateDynamicObject(1603, -2843.708984375, 1623.7249755859, 18.803688049316, 0, 0, 0);
	CreateDynamicObject(2395, -2839.8549804688, 1624.0812988281, 20.321388244629, 270, 180.68241882324, 0.68240356445313);
	CreateDynamicObject(2395, -2844.4201660156, 1621.3312988281, 20.341411590576, 270, 180, 180);
	CreateDynamicObject(2395, -2842.3132324219, 1621.8537597656, 20.321388244629, 270, 180, 180);
	CreateDynamicObject(2395, -2844.474609375, 1621.8586425781, 20.321388244629, 270, 180, 180);
	CreateDynamicObject(8613, -2822.0563964844, 1621.8345947266, 21.888496398926, 0, 0, 0);
	//Mechatroniker Base
	CreateDynamicObject(7520, -2527.6025390625, 2368.958984375, 3.9516916275024, 0, 0, 0);
	CreateDynamicObject(11392, -2536.0126953125, 2365.8286132813, 3.9867687225342, 0, 0, 0);
	CreateDynamicObject(11392, -2516.2739257813, 2363.4399414063, 3.9864807128906, 0, 0, 318);
	CreateDynamicObject(14826, -2532.14453125, 2354.220703125, 4.7487535476685, 0, 0, 0);
	CreateDynamicObject(3096, -2507.21875, 2353.6142578125, 8.5171394348145, 0, 0, 0);
	tm1 = CreateDynamicObject(16092, -2549.8999023438, 2353.1999511719, -4.3000001907349, 0.5, 0, 0);
	tm2 = CreateDynamicObject(16092, -2542.8999023438, 2353.3000488281, -4.4000000953674, 0, 0, 0);
	tm3 = CreateDynamicObject(17055, -2546.0920410156, 2369.5224609375, 6.3418111801147, 0, 0, 182);
	tm4 = CreateDynamicObject(1466, -2549.3000488281, 2360.1000976563, 3, 0, 0, 0);
	tm5 = CreateDynamicObject(1466, -2549.3000488281, 2358.6000976563, 3, 0, 0, 0);
	tm6 = CreateDynamicObject(1466, -2546.3999023438, 2360.1000976563, 3, 0, 0, 0);
	tm7 = CreateDynamicObject(1466, -2546.3999023438, 2358.6000976563, 3, 0, 0, 0);
	tm8 = CreateDynamicObject(1466, -2549.3999023438, 2357.1000976563, 3, 0, 0, 0);
	tm9 = CreateDynamicObject(1466, -2549.3999023438, 2355.6000976563, 3, 0, 0, 0);
	tm10 = CreateDynamicObject(1466, -2549.3999023438, 2354.1000976563, 3, 0, 0, 0);
	tm11 = CreateDynamicObject(1466, -2549.3999023438, 2352.6000976563, 3, 0, 0, 0);
	tm12 = CreateDynamicObject(1466, -2546.3999023438, 2357.1000976563, 3, 0, 0, 0);
	tm13 = CreateDynamicObject(1466, -2546.5, 2355.6000976563, 3, 0, 0, 0);
	tm14 = CreateDynamicObject(1466, -2546.5, 2354.1000976563, 3, 0, 0, 0);
	tm15 = CreateDynamicObject(1466, -2546.3999023438, 2352.6000976563, 3, 0, 0, 0);
	tm16 = CreateDynamicObject(1466, -2543.5, 2360.1000976563, 3, 0, 0, 0);
	tm17 = CreateDynamicObject(1466, -2543.5, 2358.6000976563, 3, 0, 0, 0);
	tm18 = CreateDynamicObject(1466, -2543.5, 2357.1000976563, 3, 0, 0, 0);
	tm19 = CreateDynamicObject(1466, -2543.5, 2355.6000976563, 3, 0, 0, 0);
	tm20 = CreateDynamicObject(1466, -2543.5, 2354.1000976563, 3, 0, 0, 0);
	tm21 = CreateDynamicObject(1466, -2543.5, 2352.6000976563, 3, 0, 0, 0);
	tm22 = CreateDynamicObject(970, -2544.1000976563, 2360.6999511719, 4.5, 0, 0, 0);
	tm23 = CreateDynamicObject(970, -2548.3000488281, 2360.6999511719, 4.5, 0, 0, 0);
	tm24 = CreateDynamicObject(970, -2550.6000976563, 2358.6000976563, 4.5, 0, 0, 90);
	tm25 = CreateDynamicObject(970, -2550.6000976563, 2354.3999023438, 4.5, 0, 0, 269.99450683594);
	CreateDynamicObject(1290, -2551.6171875, 2351.896484375, 10.007796287537, 0, 0, 0);
	CreateDynamicObject(1319, -2511.0869140625, 2340.9326171875, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2511.0244140625, 2336.2407226563, 4.5317516326904, 0, 0, 0);
	CreateDynamicObject(1319, -2512.85546875, 2336.2077636719, 4.5318002700806, 0, 0, 0);
	CreateDynamicObject(1319, -2514.7307128906, 2336.2009277344, 4.5318274497986, 0, 0, 0);
	CreateDynamicObject(1319, -2511.9182128906, 2336.2109375, 4.531795501709, 0, 0, 0);
	CreateDynamicObject(1319, -2513.8288574219, 2336.2021484375, 4.5318083763123, 0, 0, 0);
	CreateDynamicObject(1319, -2511.0329589844, 2339.9311523438, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2510.9743652344, 2337.2263183594, 4.5303077697754, 0, 0, 0);
	CreateDynamicObject(1319, -2510.9389648438, 2338.5363769531, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2502.3088378906, 2341.0346679688, 4.602126121521, 0, 0, 0);
	CreateDynamicObject(1319, -2498.8657226563, 2336.185546875, 4.5318326950073, 0, 0, 0);
	CreateDynamicObject(1319, -2499.7702636719, 2337.0361328125, 4.5305862426758, 0, 0, 0);
	CreateDynamicObject(1319, -2500.8610839844, 2338.2463378906, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2501.9406738281, 2339.6433105469, 4.53125, 0, 0, 0);
	CreateDynamicObject(1211, -2494.92578125, 2336.2434082031, 4.3956785202026, 0, 0, 0);
	CreateDynamicObject(1237, -2510.9594726563, 2341.2661132813, 3.98797082901, 0, 0, 0);
	CreateDynamicObject(1237, -2502.6088867188, 2341.6840820313, 3.7897987365723, 0, 0, 0);
	CreateDynamicObject(1237, -2511.0207519531, 2352.3422851563, 3.7879998683929, 0, 0, 0);
	CreateDynamicObject(1237, -2510.9348144531, 2355.537109375, 3.8018856048584, 0, 0, 0);
	CreateDynamicObject(1237, -2511.0876464844, 2353.904296875, 3.7630321979523, 0, 0, 0);
	CreateDynamicObject(1237, -2503.0451660156, 2355.5393066406, 3.9791345596313, 0, 0, 0);
	CreateDynamicObject(983, -2528.458984375, 2355.5451660156, 4.6678128242493, 0, 0, 0);
	CreateDynamicObject(983, -2524.1730957031, 2355.4733886719, 4.6677951812744, 0, 0, 0);
	CreateDynamicObject(983, -2520.0041503906, 2355.6022949219, 4.6678266525269, 0, 0, 0);
	CreateDynamicObject(983, -2515.8115234375, 2355.5817871094, 4.6678218841553, 0, 0, 0);
	//Fahrschulhaus
	CreateDynamicObject(5626, -2513.806640625, 2459.6005859375, 19.585636138916, 0, 2, 316);
	CreateDynamicObject(1522, -2516.8845214844, 2457.6120605469, 17.354961395264, 0, 2, 318);
	CreateDynamicObject(1363, -2512.1381835938, 2447.7351074219, 17.428173065186, 0, 0, 0);
	CreateDynamicObject(1290, -2514.4401855469, 2451.2241210938, 22.797197341919, 0, 0, 308);
	CreateDynamicObject(1215, -2521.8415527344, 2458.4821777344, 17.924768447876, 0, 0, 0);
	CreateDynamicObject(1215, -2522.0017089844, 2458.6474609375, 21.364135742188, 0, 0, 0);
	CreateDynamicObject(638, -2520.6271972656, 2459.4296875, 18.033893585205, 0, 0, 316);
	CreateDynamicObject(638, -2513.8884277344, 2452.9348144531, 17.721479415894, 0, 0, 318);
	CreateDynamicObject(638, -2520.1958007813, 2457.2143554688, 17.986452102661, 0, 0, 46);
	CreateDynamicObject(638, -2516.125, 2453.2819824219, 17.788381576538, 0, 0, 44);
	CreateDynamicObject(631, -2519.0334472656, 2456.1323242188, 18.133052825928, 0, 0, 0);
	CreateDynamicObject(631, -2517.2575683594, 2454.4030761719, 18.046504974365, 0, 0, 0);
	//Kirche
	CreateObject(3997, 3147.66, -3010.05, 12.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(9931, 3166.26, -3003.18, 27.61,   0.00, 0.00, 182.00);
	CreateDynamicObject(4048, 3134.66, -3045.53, 16.06,   0.00, 0.00, 90.00);
	CreateDynamicObject(10974, 3127.03, -3014.69, 25.49,   56.00, 0.00, 0.00);
	CreateDynamicObject(10974, 3125.44, -2994.19, 25.71,   305.00, 0.00, 0.00);
	CreateDynamicObject(4048, 3132.97, -2962.51, 16.08,   0.00, 0.00, 270.00);
	CreateDynamicObject(4048, 3117.61, -2962.51, 16.08,   0.00, 0.00, 270.00);
	CreateDynamicObject(4048, 3116.67, -3045.54, 16.03,   0.00, 0.00, 90.00);
	CreateDynamicObject(9931, 3084.09, -3004.17, 28.11,   0.00, 0.00, 0.00);
	CreateDynamicObject(9931, 3097.97, -2997.12, 41.80,   0.00, 0.00, 270.00);
	CreateDynamicObject(9931, 3152.33, -2997.76, 41.98,   0.00, 0.00, 270.00);
	CreateDynamicObject(3657, 3124.15, -2999.99, 12.56,   0.00, 0.00, 270.00);
	CreateDynamicObject(3657, 3125.97, -3000.03, 12.56,   0.00, 0.00, 270.00);
	CreateDynamicObject(3657, 3118.54, -2999.98, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3657, 3120.40, -2999.92, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3657, 3122.34, -2999.97, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3657, 3127.77, -2999.97, 12.56,   0.00, 0.00, 270.00);
	CreateDynamicObject(3657, 3118.22, -3008.68, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3657, 3120.02, -3008.72, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3657, 3121.87, -3008.78, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3657, 3123.66, -3008.80, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3657, 3125.86, -3008.81, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3657, 3127.73, -3008.83, 12.56,   0.00, 0.00, 268.00);
	CreateDynamicObject(3440, 3106.01, -3006.18, 27.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(3440, 3106.11, -3005.51, 24.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(3440, 3106.24, -3004.31, 24.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(3440, 3106.11, -3002.73, 24.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(3440, 3106.06, -3002.05, 27.11,   0.00, 0.00, 0.00);
	CreateDynamicObject(2631, 3119.94, -3004.37, 12.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2631, 3123.81, -3004.38, 12.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2631, 3127.47, -3004.38, 12.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2631, 3131.21, -3004.38, 12.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(2869, 3110.25, -3005.91, 12.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(2357, 3110.26, -3004.44, 12.44,   0.00, 0.00, 270.00);
	CreateDynamicObject(2869, 3110.27, -3004.67, 12.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(2869, 3110.39, -3003.56, 12.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(2975, 3115.47, -3004.32, 11.37,   0.00, 0.00, 90.00);
	CreateDynamicObject(1952, 3115.67, -3004.00, 13.13,   41.89, 338.27, 170.91);
	CreateDynamicObject(1955, 3115.66, -3004.80, 13.10,   44.00, 0.00, 90.00);
	CreateDynamicObject(11489, 3105.06, -3004.25, 20.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(3462, 3109.78, -3016.33, 13.33,   0.00, 0.00, 212.00);
	CreateDynamicObject(3462, 3110.08, -2991.82, 13.25,   0.00, 0.00, 154.00);
	CreateDynamicObject(3462, 3105.76, -3009.44, 14.26,   0.00, 0.00, 180.00);
	CreateDynamicObject(3462, 3105.58, -2998.87, 14.25,   0.00, 0.00, 178.00);
	CreateDynamicObject(10244, 3135.39, -3014.54, 14.24,   0.00, 0.00, 2.00);
	CreateDynamicObject(1723, 3138.98, -2998.06, 17.79,   0.00, 0.00, 272.00);
	CreateDynamicObject(1723, 3139.08, -3001.78, 17.79,   0.00, 0.00, 272.00);
	CreateDynamicObject(1723, 3140.92, -2998.05, 17.79,   0.00, 0.00, 272.00);
	CreateDynamicObject(1723, 3139.17, -3005.60, 17.79,   0.00, 0.00, 272.00);
	CreateDynamicObject(2773, 3141.74, -3015.35, 18.30,   0.00, 0.00, 0.00);
	kabsperr = CreateDynamicObject(2773, 3137.73, -3015.15, 18.28,   0.00, 0.00, 1.21);
	CreateDynamicObject(16151, 3142.78, -3005.62, 18.09,   0.00, 0.00, 2.00);
	CreateDynamicObject(1247, 3106.22, -3004.26, 28.17,   0.00, 0.00, 84.00);
	CreateDynamicObject(11489, 3125.53, -2987.96, 12.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(11489, 3125.26, -3019.93, 12.60,   0.00, 0.00, 180.00);
	CreateDynamicObject(2894, 3115.37, -3004.39, 12.97,   0.00, 0.00, 270.00);
	CreateDynamicObject(3095, 3141.83, -3000.95, 17.25,   0.00, 0.00, 2.00);
	CreateDynamicObject(3095, 3142.11, -3008.99, 17.23,   0.00, 0.00, 2.00);
	CreateDynamicObject(3529, 3137.94, -2997.24, 14.04,   0.25, 180.00, 180.00);
	CreateDynamicObject(3529, 3138.90, -3013.12, 14.02,   1.00, 180.00, 180.00);
	CreateDynamicObject(994, 3138.26, -3009.15, 17.98,   0.00, 0.00, 91.87);
	CreateDynamicObject(994, 3137.01, -3003.01, 17.96,   0.00, 0.00, 271.28);
	CreateDynamicObject(994, 3136.93, -2999.76, 17.94,   0.00, 0.00, 271.60);
	CreateDynamicObject(994, 3140.77, -2997.11, 17.94,   0.00, 0.00, 1.76);
	//Flughafen
	CreateObject(3980, -2389.33984375, 2282.552734375, -6.75, 0, 0, 271.99853515625);
	CreateObject(3980, -2376.5275878906, 2289.8833007813, -6.7750010490417, 0, 0, 90);
	CreateDynamicObject(10767, -2327.8234863281, 2200.9614257813, -11.308471679688, 0, 0, 70);
	CreateDynamicObject(10766, -2336.1486816406, 2220.3129882813, 1.3607887029648, 0, 0, 205.99996948242);
	CreateDynamicObject(8251, -2413.666015625, 2244.1689453125, 7.2193284034729, 0, 0, 0);
	CreateDynamicObject(7981, -2351.3076171875, 2322.6787109375, 8.264856338501, 0, 0, 0);
	CreateDynamicObject(1682, -2345.8044433594, 2322.6303710938, 19.419088363647, 0, 0, 229.99996948242);
	CreateDynamicObject(987, -2426.9016113281, 2308.4387207031, 5.2776985168457, 0, 0, 269.99996948242);
	CreateDynamicObject(987, -2426.888671875, 2296.4321289063, 5.2716808319092, 0, 0, 269.99996948242);
	CreateDynamicObject(987, -2426.8723144531, 2284.4392089844, 5.2756481170654, 0, 0, 269.99996948242);
	CreateDynamicObject(987, -2426.8715820313, 2272.4528808594, 5.2881031036377, 0, 0, 269.99996948242);
	CreateDynamicObject(987, -2426.8974609375, 2260.4455566406, 5.2886543273926, 0, 0, 269.99996948242);
	CreateDynamicObject(987, -2426.927734375, 2231.4790039063, 5.2871246337891, 0, 0, 344);
	CreateDynamicObject(987, -2416.1938476563, 2228.3825683594, 5.291540145874, 0, 0, 346);
	CreateDynamicObject(987, -2404.7426757813, 2225.5485839844, 5.2876892089844, 0, 0, 352);
	CreateDynamicObject(987, -2393.0310058594, 2223.9692382813, 5.2798118591309, 0, 0, 356);
	CreateDynamicObject(987, -2382.5205078125, 2223.3149414063, 5.2889251708984, 0, 0, 0);
	CreateDynamicObject(987, -2370.4086914063, 2223.0366210938, 5.2817859649658, 0, 0, 269.99996948242);
	CreateDynamicObject(987, -2340.1745605469, 2289.7482910156, 5.3032245635986, 0, 0, 90);
	CreateDynamicObject(987, -2328.0595703125, 2289.6201171875, 2.4997930526733, 0, 0, 180);
	CreateDynamicObject(987, -2340.1682128906, 2301.7565917969, 5.3032245635986, 0, 0, 90);
	CreateDynamicObject(987, -2340.1042480469, 2313.7661132813, 5.3032245635986, 0, 0, 90);
	CreateDynamicObject(987, -2415.033203125, 2320.794921875, 5.2975273132324, 0, 0, 189.99996948242);
	CreateDynamicObject(987, -2403.3903808594, 2323.2854003906, 5.300500869751, 0, 0, 191.99996948242);
	CreateDynamicObject(987, -2391.8752441406, 2325.7097167969, 5.2787570953369, 0, 0, 191.99996948242);
	CreateDynamicObject(987, -2380.2546386719, 2328.1574707031, 5.2811756134033, 0, 0, 191.99996948242);
	CreateDynamicObject(987, -2368.4089355469, 2329.8500976563, 5.3014392852783, 0, 0, 187.99996948242);
	CreateDynamicObject(987, -2356.5012207031, 2329.853515625, 5.3610482215881, 0, 0, 179.99993896484);
	CreateDynamicObject(1251, -2427.220703125, 2313.4729003906, 3.9578356742859, 0, 0, 0);
	CreateDynamicObject(3666, -2400.5478515625, 2256.6442871094, 10.113673210144, 0, 0, 0);
	CreateDynamicObject(3666, -2400.4812011719, 2231.6140136719, 10.095870018005, 0, 0, 0);
	CreateDynamicObject(3666, -2363.4765625, 2319.1245117188, 8.6794500350952, 0, 0, 0);
	CreateDynamicObject(5032, -2320.5615234375, 2186.1240234375, 4.1050424575806, 0, 0, 295.99914550781);
	CreateDynamicObject(3970, -2418.73046875, 2304.232421875, 4.3811311721802, 0, 0, 0);
	CreateDynamicObject(16101, -2341.3295898438, 2317.1945800781, 3.2665133476257, 0, 0, 0);
	CreateDynamicObject(1681, -2412.8681640625, 2244.0961914063, 13.122890472412, 0, 0, 272);
	CreateDynamicObject(2773, -2411.1616210938, 2305.5302734375, 3.8087418079376, 0, 0, 0);
	CreateDynamicObject(2773, -2411.212890625, 2308.080078125, 3.8087418079376, 0, 0, 0);
	CreateDynamicObject(2773, -2411.2351074219, 2310.5563964844, 3.8087418079376, 0, 0, 0);
	CreateDynamicObject(2773, -2411.2250976563, 2312.9782714844, 3.8087418079376, 0, 0, 0);
	CreateDynamicObject(2773, -2411.2321777344, 2315.4072265625, 3.8087418079376, 0, 0, 0);
	CreateDynamicObject(2773, -2411.2546386719, 2317.8779296875, 3.8141033649445, 0, 0, 0);
	CreateDynamicObject(2773, -2411.2836914063, 2320.2902832031, 3.8141033649445, 0, 0, 0);
	CreateDynamicObject(3658, -2405.6489257813, 2322.0002441406, 3.9404091835022, 0, 0, 10);
	CreateDynamicObject(3658, -2399.4340820313, 2323.271484375, 3.9404091835022, 0, 0, 12);
	CreateDynamicObject(3881, -2414.3330078125, 2315.8718261719, 5.1430759429932, 0, 0, 0);
	CreateDynamicObject(3882, -2414.1274414063, 2316.2963867188, 4.1893081665039, 0, 0, 90);
	CreateDynamicObject(982, -2399.9174804688, 2268.5288085938, 3.9750680923462, 0, 0, 358);
	CreateDynamicObject(982, -2399.44140625, 2294.1767578125, 3.9750680923462, 0, 0, 0);
	CreateDynamicObject(984, -2399.4416503906, 2313.4255371094, 3.933554649353, 0, 0, 0);
	CreateDynamicObject(3287, -2342.3347167969, 2297.1491699219, 8.0055589675903, 0, 0, 0);
	CreateDynamicObject(10675, -2355.3666992188, 2315.4113769531, 6.1714873313904, 0, 0, 6);
	CreateDynamicObject(3675, -2342.1333007813, 2300.2255859375, 3.3727107048035, 0, 0, 174);
	CreateDynamicObject(2790, -2415.330078125, 2315.353515625, 8.316198348999, 0, 0, 289.9951171875);
	CreateDynamicObject(2789, -2387.9599609375, 2309.0783691406, 7.5045413970947, 0, 0, 278);
	CreateDynamicObject(2773, -2416.3046875, 2311.6071777344, 3.8087418079376, 0, 0, 0);
	CreateDynamicObject(3935, -2425.5275878906, 2307.6804199219, 5.3181123733521, 0, 0, 4);
	CreateDynamicObject(1290, -2393.5861816406, 2324.8696289063, 9.3202962875366, 0, 0, 14);
	CreateDynamicObject(1290, -2341.2150878906, 2316.4035644531, 9.2899341583252, 0, 0, 20);
	CreateDynamicObject(1290, -2328.142578125, 2289.8510742188, 8.5234212875366, 0, 0, 0);
	CreateDynamicObject(1290, -2371.09765625, 2209.8422851563, 10.007796287537, 0, 0, 30);
	CreateDynamicObject(1290, -2377.8757324219, 2223.9526367188, 9.3202962875366, 0, 0, 0);
	CreateDynamicObject(1290, -2390.4853515625, 2224.4616699219, 9.3202962875366, 0, 0, 0);
	CreateDynamicObject(1290, -2403.7436523438, 2225.984375, 9.3202962875366, 0, 0, 0);
	CreateDynamicObject(1290, -2415.4458007813, 2228.6516113281, 9.3149347305298, 0, 0, 0);
	CreateDynamicObject(1290, -2403.734375, 2257.1904296875, 9.3149347305298, 0, 0, 0);
	CreateDynamicObject(1340, -2408.5561523438, 2318.2290039063, 4.4244613647461, 0, 0, 0);
	CreateDynamicObject(1341, -2408.8610839844, 2314.3049316406, 4.2994613647461, 0, 0, 0);
	CreateDynamicObject(1342, -2408.2307128906, 2310.5092773438, 4.3305687904358, 0, 0, 0);
	CreateDynamicObject(3660, -2398.7102050781, 2310.0017089844, 5.9499425888062, 0, 0, 90);
	CreateDynamicObject(3660, -2398.2143554688, 2291.0122070313, 5.9445810317993, 0, 0, 269.99996948242);
	CreateDynamicObject(640, -2410.8649902344, 2308.2102050781, 3.9885473251343, 0, 0, 0);
	CreateDynamicObject(640, -2410.8569335938, 2313.9367675781, 3.9939088821411, 0, 0, 0);
	CreateDynamicObject(640, -2410.8544921875, 2319.2041015625, 3.9939088821411, 0, 0, 0);
	CreateDynamicObject(644, -2409.9309082031, 2321.1557617188, 3.296875, 0, 0, 0);
	CreateDynamicObject(3877, -2261.6899414063, 2132.7409667969, 4.9718422889709, 0, 0, 0);
	CreateDynamicObject(3877, -2312.7373046875, 2107.9577636719, 4.9718422889709, 0, 0, 0);
	CreateDynamicObject(3877, -2287.7607421875, 2120.1640625, 4.9718422889709, 0, 0, 0);
	CreateDynamicObject(3877, -2274.3684082031, 2126.564453125, 4.9718422889709, 0, 0, 0);
	CreateDynamicObject(3877, -2300.6899414063, 2113.7412109375, 4.9718422889709, 0, 0, 0);
	CreateDynamicObject(3877, -2416.1733398438, 2319.4916992188, 8.4722566604614, 0, 0, 0);
	CreateDynamicObject(1363, -2418.5615234375, 2318.1208496094, 4.1278762817383, 0, 0, 0);
	CreateDynamicObject(1319, -2397.0808105469, 2293.5227050781, 3.8383884429932, 0, 0, 0);
	CreateDynamicObject(1319, -2395.4851074219, 2293.4660644531, 3.8383884429932, 0, 0, 0);
	CreateDynamicObject(1319, -2393.8002929688, 2293.4660644531, 3.84375, 0, 0, 0);
	CreateDynamicObject(1319, -2392.0017089844, 2293.58984375, 3.84375, 0, 0, 0);
	CreateDynamicObject(1319, -2390.2619628906, 2293.7954101563, 3.84375, 0, 0, 0);
	CreateDynamicObject(1319, -2388.6455078125, 2294.1811523438, 3.84375, 0, 0, 0);
	CreateDynamicObject(1319, -2387.0502929688, 2294.7038574219, 3.84375, 0, 0, 0);
	CreateDynamicObject(1319, -2385.8205566406, 2295.2524414063, 3.84375, 0, 0, 0);
	CreateDynamicObject(8251, -2375.9853515625, 2314.5888671875, 7.2246899604797, 0, 0, 277.998046875);
	CreateDynamicObject(8550, -2414.0888671875, 2283.0544433594, 7.4895963668823, 0, 0, 0);
	CreateDynamicObject(10757, -2412.3239746094, 2283.0686035156, 10.551259994507, 0, 0, 186);
	CreateDynamicObject(3515, -2401.44140625, 2300.9365234375, 3.6367144584656, 0, 0, 0);
	CreateDynamicObject(2895, -2400.8933105469, 2302.3676757813, 4.8056836128235, 0, 0, 0);
	CreateDynamicObject(2895, -2402.3640136719, 2299.9270019531, 4.7806835174561, 0, 0, 334);
	CreateDynamicObject(2895, -2402.6162109375, 2301.6638183594, 4.7556834220886, 0, 0, 64);
	CreateDynamicObject(991, -2423.1853027344, 2301.892578125, 4.5067539215088, 0, 0, 0);
	CreateDynamicObject(991, -2416.5187988281, 2301.8935546875, 4.5067539215088, 0, 0, 0);
	CreateDynamicObject(4724, -2421.0275878906, 2301.0297851563, 5.2184896469116, 0, 0, 0);
	CreateDynamicObject(7922, -2412.0485839844, 2300.900390625, 4.688853263855, 0, 0, 0);
	CreateDynamicObject(7922, -2412.0405273438, 2302.7744140625, 6.9638619422913, 270, 180.04396057129, 180.04396057129);
	CreateDynamicObject(7922, -2412.0393066406, 2304.8979492188, 4.688853263855, 0, 0, 180);
	CreateDynamicObject(3920, -2411.6010742188, 2256.8610839844, 8.8764476776123, 0, 0, 0);
	CreateDynamicObject(3920, -2420.5637207031, 2256.8610839844, 8.9002513885498, 0, 0, 0);
	CreateDynamicObject(3439, -2400.9829101563, 2257.4201660156, 7.4048633575439, 0, 0, 0);
	CreateDynamicObject(3439, -2426.0434570313, 2257.1318359375, 7.4048633575439, 0, 0, 0);
	CreateDynamicObject(3660, -2413.2854003906, 2258.1340332031, 5.9445810317993, 0, 0, 0);
	CreateDynamicObject(744, -2424.2138671875, 2264.5773925781, 3.1915149688721, 0, 0, 0);
	CreateDynamicObject(1290, -2409.048828125, 2278.0073242188, 9.3149347305298, 0, 0, 0);
	CreateDynamicObject(1290, -2409.0197753906, 2288.1081542969, 9.3149347305298, 0, 0, 0);
	CreateDynamicObject(1290, -2419.2026367188, 2288.0239257813, 9.3149347305298, 0, 0, 0);
	CreateDynamicObject(1290, -2419.0988769531, 2278.0520019531, 9.3149347305298, 0, 0, 0);
	//Jefferson Motel
	CreateObject(3260, 2217.1999511719, -1145, 1024.8000488281, 272.06155395508, 194.0393371582, 193.7808380127);
	//Waffenautomaten
	CreateDynamicObject(18885, -2547.038330, 2309.470459, 4.627275+0.39, 0.0000, 0.0000, 276.6347);
	CreateDynamicObject(18885, -2346.068604, 2391.680664, 5.733989+0.39, 0.0000, 0.0000, 146.8598);
	CreateDynamicObject(18885, -2573.633789, 2436.588135, 15.817941+0.39, 0.0000, 358.2811, 325.6227);
	CreateDynamicObject(18885, -2429.841064, 2472.716064, 13.392377+0.39, 0.0000, 358.2811, 178.7632);
	CreateDynamicObject(18885, -2397.377441, 2223.967285, 4.577274+0.39, 0.0000, 358.2811, 352.3691);
	//Elektroladen aKa Handyladen
	CreateObject(14665, 1008.4794921875, 52.234375, 56.306488037109, 0, 0, 0);
	CreateDynamicObject(1885, 1004.6247558594, 50.385612487793, 54.272109985352, 0, 0, 0);
	CreateDynamicObject(1984, 1006.7548217773, 54.020992279053, 54.29711151123, 0, 0, 179.19000244141);
	CreateDynamicObject(2362, 1006.3051757813, 54.299133300781, 55.243225097656, 0, 0, 0);
	CreateDynamicObject(2412, 1004.018371582, 53.526058197021, 54.303943634033, 0, 0, 270.67498779297);
	CreateDynamicObject(2412, 1004.0288085938, 50.219703674316, 54.303943634033, 0, 0, 270.67016601563);
	CreateDynamicObject(2413, 1013.728515625, 56.2158203125, 54.322113037109, 0, 0, 270.35705566406);
	CreateDynamicObject(2413, 1013.732421875, 54.6181640625, 54.322113037109, 0, 0, 270.3515625);
	CreateDynamicObject(2413, 1013.7228393555, 53.020587921143, 54.322113037109, 0, 0, 270.35705566406);
	CreateDynamicObject(2413, 1013.7186889648, 51.395408630371, 54.322113037109, 0, 0, 270.35705566406);
	CreateDynamicObject(2434, 1010.0641479492, 46.379676818848, 54.322113037109, 0, 0, 0);
	CreateDynamicObject(2434, 1010.257019043, 47.481441497803, 54.322113037109, 0, 0, 87.340026855469);
	CreateDynamicObject(2435, 1009.1736450195, 46.389083862305, 54.322113037109, 0, 0, 359.86502075195);
	CreateDynamicObject(2435, 1009.1673583984, 47.674949645996, 54.322113037109, 0, 0, 180.63500976563);
	CreateDynamicObject(2434, 1008.2761230469, 47.677783966064, 54.322113037109, 0, 0, 178.64587402344);
	CreateDynamicObject(2434, 1008.0795288086, 46.566669464111, 54.322113037109, 0, 0, 269.953125);
	CreateDynamicObject(2403, 1008.9747924805, 46.528907775879, 54.277614593506, 0, 0, 274.64498901367);
	CreateDynamicObject(2403, 1008.9617919922, 46.531074523926, 55.452686309814, 0, 0, 274.64172363281);
	CreateDynamicObject(2403, 1008.341796875, 46.399440765381, 55.452686309814, 0, 0, 183.33184814453);
	CreateDynamicObject(2403, 1008.3327636719, 46.376113891602, 54.277614593506, 0, 0, 183.32885742188);
	CreateDynamicObject(2125, 1004.633972168, 55.098648071289, 54.631988525391, 0, 0, 0);
	CreateDynamicObject(1954, 1013.5696411133, 51.374397277832, 54.659740447998, 0, 0, 90);
	CreateDynamicObject(1954, 1013.5821533203, 53.969097137451, 54.64599609375, 0, 0, 89.549987792969);
	CreateDynamicObject(3031, 1012.8862915039, 62.28394317627, 55.875865936279, 0, 0, 246.22497558594);
	CreateDynamicObject(1958, 1013.5943603516, 51.530609130859, 55.388771057129, 0, 0, 0);
	CreateDynamicObject(1429, 1013.6365966797, 46.334949493408, 56.379890441895, 0, 0, 260.74987792969);
	CreateDynamicObject(1429, 1006.4923706055, 42.151214599609, 56.379890441895, 0, 0, 157.52990722656);
	CreateDynamicObject(2199, 1013.8822631836, 48.288608551025, 54.300388336182, 0, 0, 270.67504882813);
	CreateDynamicObject(2606, 1013.8779296875, 53.529296875, 56.697822570801, 0, 0, 270.67016601563);
	CreateDynamicObject(5061, 1003.0541381836, 57.756401062012, 56.234741210938, 0, 0, 0);
	CreateDynamicObject(5061, 1003.0595703125, 62.007362365723, 56.234741210938, 0, 0, 0);
	CreateDynamicObject(5061, 1003.067199707, 46.830707550049, 55.938343048096, 0, 0, 0);
	CreateDynamicObject(1500, 1003.0399780273, 52.224220275879, 54.322113037109, 0, 0, 270.67504882813);
	CreateDynamicObject(1500, 1003.0323486328, 53.718196868896, 54.322113037109, 0, 0, 270.67016601563);
	CreateDynamicObject(1717, 1009.8856201172, 48.040817260742, 54.802646636963, 0, 0, 131.14501953125);
	CreateDynamicObject(1718, 1013.6285400391, 55.510692596436, 55.398300170898, 0, 0, 272.65997314453);
	CreateDynamicObject(1719, 1013.2874145508, 55.992618560791, 54.728824615479, 0, 0, 270.67498779297);
	CreateDynamicObject(1747, 1007.8092651367, 41.547313690186, 54.953121185303, 0, 0, 175.35498046875);
	CreateDynamicObject(1747, 1012.5316772461, 43.282791137695, 54.953121185303, 0, 0, 230.93280029297);
	CreateDynamicObject(1748, 1005.0981445313, 42.766033172607, 56.153408050537, 0, 0, 143.46002197266);
	CreateDynamicObject(1749, 1009.3641357422, 46.65397644043, 55.377681732178, 0, 0, 0);
	CreateDynamicObject(1750, 1011.2998046875, 42.423671722412, 56.168262481689, 0, 0, 208.59997558594);
	CreateDynamicObject(1750, 1009.8143920898, 41.715194702148, 54.943187713623, 0, 0, 194.70239257813);
	CreateDynamicObject(1752, 1009.9076538086, 41.756565093994, 56.114242553711, 0, 0, 190.59999084473);
	CreateDynamicObject(1782, 1012.4247436523, 43.610050201416, 55.904621124268, 0, 0, 224.65997314453);
	CreateDynamicObject(1785, 1005.3237304688, 43.01708984375, 55.620323181152, 0, 0, 318.31500244141);
	CreateDynamicObject(1786, 1004.1694335938, 43.978206634521, 56.134971618652, 0, 0, 119.46002197266);
	CreateDynamicObject(1786, 1013.5067749023, 44.841270446777, 56.109970092773, 0, 0, 246.85986328125);
	CreateDynamicObject(1787, 1013.1893310547, 44.823848724365, 55.930294036865, 0, 0, 248.3450012207);
	CreateDynamicObject(1788, 1006.5707397461, 42.208351135254, 55.012817382813, 0, 0, 157.40002441406);
	CreateDynamicObject(1791, 1004.1968994141, 44.151081085205, 54.93643951416, 0, 0, 121.44500732422);
	CreateDynamicObject(1792, 1012.7001342773, 43.381408691406, 56.059097290039, 358.01498413086, 0, 226.55499267578);
	CreateDynamicObject(1792, 1008.0020141602, 41.513710021973, 56.059097290039, 358.01147460938, 0, 172.95953369141);
	CreateDynamicObject(1809, 1008.0253295898, 47.105110168457, 55.377681732178, 0, 0, 272.3450012207);
	CreateDynamicObject(1839, 1010.1583251953, 47.169872283936, 55.377681732178, 0, 0, 180.58499145508);
	CreateDynamicObject(1840, 1013.4704589844, 46.4118309021, 54.972938537598, 0, 0, 0);
	CreateDynamicObject(1840, 1013.4637451172, 45.914138793945, 54.972938537598, 0, 0, 346.10501098633);
	CreateDynamicObject(2028, 1013.5832519531, 56.230407714844, 55.447189331055, 0, 0, 270.31506347656);
	CreateDynamicObject(2099, 1003.3759765625, 47.476779937744, 54.322113037109, 0, 0, 91.670013427734);
	CreateDynamicObject(2101, 1003.8056030273, 45.642032623291, 56.098937988281, 0, 0, 105.56500244141);
	CreateDynamicObject(2102, 1013.6087646484, 52.679920196533, 55.363857269287, 0, 0, 270.31500244141);
	CreateDynamicObject(2103, 1013.589050293, 54.30647277832, 55.338855743408, 0, 0, 270.49499511719);
	CreateDynamicObject(2104, 1014.0087280273, 49.258529663086, 54.322113037109, 0, 0, 270.31500244141);
	CreateDynamicObject(2190, 1013.8237304688, 50.563175201416, 55.350170135498, 0, 0, 268.51000976563);
	CreateDynamicObject(2202, 171.55242919922, 95.825950622559, 483.48162841797, 0, 0, 0);
	CreateDynamicObject(2224, 1004.1817626953, 48.307910919189, 54.322113037109, 0, 0, 43.670013427734);
	CreateDynamicObject(2226, 1013.4945678711, 52.709354400635, 54.528991699219, 0, 0, 270.67498779297);
	CreateDynamicObject(2229, 1013.7427978516, 58.605464935303, 54.329193115234, 0, 0, 266.70498657227);
	CreateDynamicObject(2230, 1013.7711791992, 59.19083404541, 54.272109985352, 0, 0, 270.67498779297);
	CreateDynamicObject(2231, 1013.728515625, 59.832714080811, 54.29711151123, 0, 0, 270.49499511719);
	CreateDynamicObject(2232, 1013.5407714844, 60.872482299805, 54.894989013672, 0, 0, 268.41998291016);
	CreateDynamicObject(2344, 1008.5733032227, 47.805744171143, 55.387760162354, 0, 0, 0);
	CreateDynamicObject(2596, 1003.5746459961, 53.884910583496, 57.266845703125, 0, 0, 91.535003662109);
	CreateDynamicObject(14391, 1006.7827148438, 62.394119262695, 55.257194519043, 0, 0, 268.51000976563);
	CreateDynamicObject(14604, 1010.7539672852, 61.880905151367, 55.302757263184, 0, 0, 179.28002929688);
	CreateDynamicObject(16377, 1011.8562011719, 61.87670135498, 55.277442932129, 0, 0, 179.36999511719);
	CreateDynamicObject(1208, 1003.6091308594, 59.882507324219, 54.322113037109, 0, 0, 270.45001220703);
	CreateDynamicObject(16779, 1009.0192260742, 56.205593109131, 58.454364776611, 0, 0, 0);
	CreateDynamicObject(16779, 1008.6109619141, 50.105739593506, 58.454364776611, 0, 0, 0);
	CreateDynamicObject(2413, 1003.5005493164, 58.249187469482, 54.322113037109, 0, 0, 89.541137695313);
	CreateDynamicObject(2413, 1003.5, 56.643264770508, 54.322113037109, 0, 0, 89.53857421875);
	CreateDynamicObject(2413, 1013.7235107422, 57.80485534668, 54.322113037109, 0, 0, 270.35705566406);
	CreateDynamicObject(2966, 1003.6441040039, 58.029689788818, 54.91491317749, 0, 0, 91.310028076172);
	CreateDynamicObject(2966, 1003.6490478516, 56.621398925781, 54.91491317749, 0, 0, 91.307373046875);
	CreateDynamicObject(2966, 1003.6578369141, 59.158416748047, 54.91491317749, 0, 0, 91.307373046875);
	CreateDynamicObject(2967, 1003.5950927734, 58.566429138184, 54.87525177002, 0, 0, 87.340026855469);
	CreateDynamicObject(2967, 1003.5338745117, 56.959575653076, 54.87525177002, 0, 0, 87.335815429688);
	CreateDynamicObject(2967, 1003.5602416992, 57.357349395752, 54.87525177002, 0, 0, 87.335815429688);
	CreateDynamicObject(2422, 1005.6001586914, 54.331302642822, 55.218223571777, 0, 0, 17.864990234375);
	CreateDynamicObject(2495, 1006.1470947266, 53.504039764404, 55.038238525391, 0, 0, 0);
	CreateDynamicObject(2593, 1006.7326660156, 53.990615844727, 56.095134735107, 0, 0, 0);
	CreateDynamicObject(2506, 1006.8340454102, 53.743251800537, 56.274677276611, 0, 0, 0);
	CreateDynamicObject(2506, 1006.6600952148, 54.289237976074, 56.274677276611, 0, 0, 179.19000244141);
	CreateDynamicObject(2506, 1007.0347900391, 54.137962341309, 56.274677276611, 0, 0, 95.280029296875);
	CreateDynamicObject(2506, 1006.4329833984, 53.947975158691, 56.274677276611, 0, 0, 270.67498779297);
	//Rathaus
	//Pfeile und Türen in der Rathaus
	CreateDynamicObject(1318, 385.2116394043, 173.7880859375, 1007.356262207, 0, 88, 0);//Pfeil
	CreateDynamicObject(1318, 378.09643554688, 173.72537231445, 1007.331237793, 0, 90, 0);//Pfeil
	CreateDynamicObject(1318, 371.06182861328, 173.7658996582, 1007.3630371094, 0, 91.999969482422, 0.000244140625);//Pfeil
	CreateDynamicObject(1318, 364.36288452148, 173.70355224609, 1007.3565063477, 0, 91.999969482422, 0);//Pfeil
	CreateDynamicObject(1318, 366.77001953125, 177.56143188477, 1007.3309936523, 0, 270, 91.999389648438);//Pfeil
	CreateDynamicObject(1318, 366.67733764648, 185.95118713379, 1007.3314819336, 0, 270, 89.999938964844);//Pfeil
	CreateDynamicObject(1318, 366.75564575195, 190.49865722656, 1010.9860839844, 0, 0, 0);//Pfeil
	CreateDynamicObject(1318, 366.54061889648, 193.12771606445, 1007.3557739258, 0, 90.500061035156, 269.99996948242);
	CreateDynamicObject(1318, 366.74407958984, 202.86454772949, 1007.3557739258, 0, 270, 89.999938964844);//Pfeil
	CreateDynamicObject(1318, 365.36740112305, 207.0104675293, 1007.3307495117, 0, 90, 0); //Pfeil
	CreateDynamicObject(1491, 371.26, 166.65, 1007.40,   -0.02, -0.04, 0.00); //Tür
	//Quest Haus
	CreateDynamicObject(3461, -2606.185546875, 2362.4870605469, 10.62603187561, 0, 0, 0);
	CreateDynamicObject(3461, -2606.0104980469, 2381.1076660156, 11.506614685059, 0, 0, 0);
	CreateDynamicObject(3461, -2573.9479980469, 2341.40234375, 10.043736457825, 0, 0, 0);
	CreateDynamicObject(3461, -2605.98828125, 2341.294921875, 10.131344795227, 0, 0, 0);
	CreateDynamicObject(3877, -2590.9289550781, 2354.7229003906, 19.716556549072, 0, 0, 0);
	CreateDynamicObject(3877, -2590.8166503906, 2366.3154296875, 19.752040863037, 0, 0, 0);
	CreateDynamicObject(13667, -2583.0695800781, 2359.291015625, 24.591827392578, 0, 0, 8);
	CreateDynamicObject(3534, -2582.8229980469, 2358.4833984375, 29.595537185669, 0, 88, 0);
	CreateDynamicObject(3534, -2582.6691894531, 2360.3857421875, 29.567384719849, 0, 93.999969482422, 0);
	CreateDynamicObject(3920, -2597.6955566406, 2360.4655761719, 15.283182144165, 0, 0, 87.999969482422);
	CreateDynamicObject(9321, -2597.2065429688, 2351.8010253906, 9.4812211990356, 0, 0, 179.99993896484);
	CreateDynamicObject(9321, -2597.2263183594, 2345.4069824219, 8.9497137069702, 0, 0, 180);
	CreateDynamicObject(3030, -2594.826171875, 2363.52734375, 17.038118362427, 0, 0, 0);
	CreateDynamicObject(869, -2603.7878417969, 2379.6657714844, 9.0386867523193, 0, 0, 0);
	CreateDynamicObject(869, -2603.9702148438, 2377.3422851563, 8.7279348373413, 0, 0, 0);
	CreateDynamicObject(869, -2600.78515625, 2379.7775878906, 9.1279201507568, 0, 0, 0);
	CreateDynamicObject(869, -2601.2939453125, 2377.5971679688, 8.709771156311, 0, 0, 0);
	CreateDynamicObject(870, -2604.3654785156, 2378.2045898438, 8.6727247238159, 0, 0, 0);
	CreateDynamicObject(870, -2603.9597167969, 2379.626953125, 8.8197040557861, 0, 0, 0);
	CreateDynamicObject(870, -2601.4296875, 2377.5087890625, 8.4820852279663, 0, 0, 0);
	CreateDynamicObject(870, -2603.6765136719, 2376.3200683594, 8.4246816635132, 0, 0, 0);
	CreateDynamicObject(870, -2600.7880859375, 2379.6804199219, 8.9016466140747, 0, 0, 0);
	CreateDynamicObject(1364, -2600.517578125, 2360.8686523438, 8.7697734832764, 0, 0, 269.99996948242);
	CreateDynamicObject(3461, -2600.767578125, 2362.359375, 8.3776187896729, 0, 0, 0);
	CreateDynamicObject(3461, -2600.791015625, 2359.3715820313, 8.3026151657104, 0, 0, 0);
	CreateDynamicObject(3515, -2604.0466308594, 2379.5693359375, 8.9167470932007, 0, 0, 0);
	lturm = CreateDynamicObject(6295, -2382.8098144531, 2216.0661621094, 27.666767120361, 0, 0, 90);
	CreateDynamicObject(970, -2603.66015625, 2358.72265625, 8.4310894012451, 0, 0, 0);
	CreateDynamicObject(3408, -2605.8264160156, 2358.7893066406, 7.7621097564697, 0, 0, 266);
	CreateDynamicObject(2600, -2580.2084960938, 2342.3764648438, 8.1573314666748, 0, 0, 26);
	CreateDynamicObject(1319, -2611.0842285156, 2341.0258789063, 7.90625, 0, 0, 0);
	CreateDynamicObject(1319, -2610.7485351563, 2339.3605957031, 7.90625, 0, 0, 0);
	CreateDynamicObject(1319, -2606.1772460938, 2336.2351074219, 7.9137001037598, 0, 0, 0);
	CreateDynamicObject(1319, -2602.8706054688, 2336.1520996094, 7.6453709602356, 0, 0, 0);
	CreateDynamicObject(1319, -2606.1459960938, 2326.0541992188, 7.9109649658203, 0, 0, 0);
	CreateDynamicObject(1319, -2603.0788574219, 2326.0256347656, 7.6622576713562, 0, 0, 0);
	CreateDynamicObject(1319, -2611.0393066406, 2321.1032714844, 7.90625, 0, 0, 0);
	CreateDynamicObject(1319, -2610.6704101563, 2322.9582519531, 7.90625, 0, 0, 0);
	CreateDynamicObject(1214, -2610.9633789063, 2362.0854492188, 7.8525190353394, 0, 0, 0);
	CreateDynamicObject(1214, -2611.0046386719, 2366.6369628906, 8.082878112793, 0, 0, 0);
	CreateDynamicObject(1214, -2608.6711425781, 2366.5812988281, 8.0798101425171, 0, 0, 0);
	CreateDynamicObject(1214, -2611.0417480469, 2364.2490234375, 7.9620189666748, 0, 0, 0);
	CreateDynamicObject(1214, -2610.994140625, 2359.9077148438, 7.7772827148438, 0, 0, 0);
	CreateDynamicObject(1214, -2610.9953613281, 2357.6567382813, 7.7283592224121, 0, 0, 0);
	CreateDynamicObject(1214, -2610.9645996094, 2355.4123535156, 7.6795787811279, 0, 0, 0);
	CreateDynamicObject(1214, -2608.7780761719, 2355.5070800781, 7.6816377639771, 0, 0, 0);
	CreateDynamicObject(1214, -2606.1403808594, 2355.1928710938, 7.6611404418945, 0, 0, 0);
	CreateDynamicObject(1232, -2610.9924316406, 2368.7805175781, 10.828006744385, 0, 0, 0);
	CreateDynamicObject(2921, -2599.822265625, 2355.3725585938, 11.83087348938, 0, 0, 0);
	//Pennersiedlung
	CreateDynamicObject(2669, -2416.3012695313, 2491.71875, 13.047306060791, 0, 358, 179.99993896484);
	CreateDynamicObject(2669, -2416.2983398438, 2486.0668945313, 13.079216003418, 0, 2, 0);
	CreateDynamicObject(2678, -2417.1064453125, 2483.4443359375, 12.978345870972, 0, 2, 58);
	CreateDynamicObject(7025, -2405.8684082031, 2487.7141113281, 13.786638259888, 0, 0, 269.99996948242);
	CreateDynamicObject(926, -2422.9953613281, 2486.5085449219, 12.448340415955, 0, 0, 0);
	CreateDynamicObject(854, -2422.3688964844, 2485.1220703125, 12.294924736023, 0, 0, 0);
	CreateDynamicObject(850, -2422.2497558594, 2481.6086425781, 12.379086494446, 0, 0, 0);
	CreateDynamicObject(920, -2418.2514648438, 2485.0561523438, 12.392141342163, 0, 0, 268);
	CreateDynamicObject(1635, -2418.2971191406, 2488.8967285156, 13.101402282715, 0, 0, 0);
	CreateDynamicObject(2890, -2484.8366699219, 2537.9194335938, 17.0625, 0, 0, 0);
	CreateDynamicObject(1440, -2487.2553710938, 2540.6689453125, 17.575284957886, 0, 0, 0);
	CreateDynamicObject(1439, -2489.2387695313, 2535.9289550781, 17.056171417236, 0, 0, 88);
	CreateDynamicObject(1264, -2462.7680664063, 2509.7609863281, 16.34202003479, 0, 0, 0);
	CreateDynamicObject(17550, -2381.3991699219, 2530.2390136719, 17.631418228149, 0, 354, 92);
	CreateDynamicObject(18368, -2286.6484375, 2561.6689453125, 17.669227600098, 0, 0, 296);
	CreateDynamicObject(1223, -2432.224609375, 2480.4819335938, 12.807355880737, 0, 0, 235.99996948242);
	CreateDynamicObject(1223, -2439.767578125, 2479.5012207031, 12.827464103699, 0, 0, 0);
	CreateDynamicObject(1223, -2439.3354492188, 2497.7170410156, 12.850280761719, 0, 0, 0);
	CreateDynamicObject(1223, -2439.3364257813, 2504.9436035156, 12.829511642456, 0, 0, 0);
	CreateDynamicObject(1223, -2439.3811035156, 2521.98046875, 13.282802581787, 0, 0, 0);
	CreateDynamicObject(1223, -2482.9709472656, 2521.70703125, 17.054130554199, 0, 0, 160);
	CreateDynamicObject(1223, -2483.2800292969, 2497.8447265625, 17.032199859619, 0, 0, 150);
	CreateDynamicObject(1223, -2482.953125, 2479.2592773438, 17.067455291748, 0, 0, 239.99998474121);
	CreateDynamicObject(1223, -2395.0161132813, 2489.0390625, 10.718812942505, 0, 0, 0);
	CreateDynamicObject(1223, -2391.7717285156, 2500.1455078125, 15.022747039795, 0, 0, 0);
	CreateDynamicObject(1223, -2389.7416992188, 2507.587890625, 17.749872207642, 0, 0, 0);
	CreateDynamicObject(1223, -2387.4973144531, 2515.7600097656, 20.06036567688, 0, 0, 0);
	CreateDynamicObject(1223, -2385.0112304688, 2525.1384277344, 21.907096862793, 0, 0, 0);
	CreateDynamicObject(1223, -2382.4638671875, 2533.9555664063, 22.894348144531, 0, 0, 0);
	CreateDynamicObject(1223, -2380.3474121094, 2542.3015136719, 23.172500610352, 0, 0, 0);
	CreateDynamicObject(1223, -2377.8449707031, 2551.5012207031, 22.760848999023, 0, 0, 0);
	CreateDynamicObject(8483, -2353.6064453125, 2584.3674316406, 27.422294616699, 0, 344, 274);
	CreateDynamicObject(16133, -2310.5844726563, 2583.0361328125, 21.425495147705, 0, 0, 80);
	CreateDynamicObject(16133, -2402.3742675781, 2574.310546875, 22.017080307007, 0, 0, 86);
	CreateDynamicObject(670, -2436.1936035156, 2565.28125, 22.797170639038, 0, 0, 0);
	CreateDynamicObject(1461, -2292.0432128906, 2519.6779785156, 1.8672285079956, 0, 0, 0);
	CreateDynamicObject(1461, -2312.8381347656, 2515.9729003906, 1.799090385437, 0, 0, 0);
	CreateDynamicObject(1461, -2273.9594726563, 2533.2165527344, 1.7922716140747, 0, 0, 0);
	CreateDynamicObject(1598, -2304.2673339844, 2526.7534179688, 3.4574792385101, 0, 0, 0);
	CreateDynamicObject(1606, -2270.6520996094, 2499.5561523438, -5.3419570922852, 0, 0, 0);
	CreateDynamicObject(1607, -2262.8532714844, 2503.2287597656, 0, 0, 0, 0);
	CreateDynamicObject(1610, -2292.2412109375, 2530.0278320313, 2.8839473724365, 0, 0, 0);
	CreateDynamicObject(1611, -2289.1628417969, 2528.2729492188, 2.2877712249756, 0, 0, 0);
	CreateDynamicObject(1637, -2308.8229980469, 2535.6306152344, 6.1777672767639, 0, 0, 316);
	CreateDynamicObject(1641, -2309.2319335938, 2523.3754882813, 2.5151352882385, 11.992584228516, 357.9553527832, 2.4250183105469);
	CreateDynamicObject(1641, -2311.8796386719, 2522.6877441406, 2.3909034729004, 14, 0, 0);
	CreateDynamicObject(1642, -2284.6787109375, 2531.7612304688, 2.5897536277771, 14, 0, 54);
	CreateDynamicObject(2406, -2294.2622070313, 2534.0122070313, 5.1016268730164, 0, 0, 0);
	CreateDynamicObject(2404, -2293.6164550781, 2534.1120605469, 5.0717539787292, 0, 0, 0);
	CreateDynamicObject(2405, -2292.9880371094, 2534.15625, 5.0319094657898, 0, 0, 0);
	CreateDynamicObject(2404, -2292.3559570313, 2534.1779785156, 4.9872069358826, 0, 0, 0);
	CreateDynamicObject(1281, -2312.7822265625, 2529.435546875, 4.7904663085938, 0, 0, 0);
	CreateDynamicObject(1281, -2298.2490234375, 2539.2375488281, 5.9488201141357, 0, 0, 0);
	CreateDynamicObject(1281, -2320.8784179688, 2520.6467285156, 2.8410165309906, 0, 0, 0);
	CreateDynamicObject(1281, -2320.4228515625, 2535.9318847656, 5.9830856323242, 0, 0, 0);
	CreateDynamicObject(1340, -2291.9904785156, 2539.4982910156, 5.9183025360107, 0, 0, 255.99996948242);
	CreateDynamicObject(1341, -2314.1149902344, 2537.4448242188, 6.3552017211914, 0, 0, 269.99996948242);
	CreateDynamicObject(2710, -2264.5358886719, 2563.8837890625, 4.7495799064636, 0, 0, 0);
	CreateDynamicObject(3170, -2494.4323730469, 2513.3405761719, 17.086833953857, 0, 0, 0);
	CreateDynamicObject(3173, -2502.974609375, 2513.7497558594, 17.649831771851, 0, 0, 0);
	CreateDynamicObject(3174, -2508.2358398438, 2516.68359375, 17.778867721558, 0, 0, 0);
	CreateDynamicObject(3175, -2513.9763183594, 2515.9895019531, 17.813816070557, 0, 0, 0);
	CreateDynamicObject(1223, -2490.4807128906, 2521.869140625, 17.081298828125, 0, 0, 0);
	CreateDynamicObject(1223, -2490.501953125, 2505.1032714844, 17.091320037842, 0, 0, 310);
	CreateDynamicObject(1223, -2516.5412597656, 2504.9260253906, 17.914161682129, 0, 0, 239.99998474121);
	CreateDynamicObject(1223, -2516.5375976563, 2522.1108398438, 17.777669906616, 0, 0, 134);
	CreateDynamicObject(1319, -2388.7268066406, 2477.1723632813, 9.0344676971436, 0, 0, 0);
	CreateDynamicObject(1319, -2385.3464355469, 2476.6457519531, 8.3832340240479, 0, 0, 0);
	CreateDynamicObject(1319, -2382.19140625, 2476.1694335938, 7.7766036987305, 0, 0, 0);
	CreateDynamicObject(1319, -2378.63671875, 2475.5952148438, 7.0916137695313, 0, 0, 0);
	CreateDynamicObject(1319, -2375.0522460938, 2474.5412597656, 6.6208305358887, 0, 0, 0);
	CreateDynamicObject(1319, -2371.6159667969, 2473.4916992188, 6.1964321136475, 0, 0, 0);
	CreateDynamicObject(1319, -2368.4641113281, 2472.5854492188, 5.8129482269287, 0, 0, 0);
	CreateDynamicObject(1319, -2365.482421875, 2471.6555175781, 5.4427223205566, 0, 0, 0);
	CreateDynamicObject(1319, -2362.9152832031, 2470.8903808594, 5.1276111602783, 0, 0, 0);
	CreateDynamicObject(1319, -2360.4912109375, 2470.1528320313, 4.8285179138184, 0, 0, 0);
	CreateDynamicObject(1319, -2358.2287597656, 2469.4123535156, 4.5440216064453, 0, 0, 0);
	CreateDynamicObject(1319, -2353.9887695313, 2473.1987304688, 4.5330085754395, 0, 0, 0);
	CreateDynamicObject(1319, -2356.1328125, 2471.240234375, 4.5324611663818, 0, 0, 0);
	CreateDynamicObject(1319, -2643.7355957031, 2493.4655761719, 30.169826507568, 0, 0, 0);
	CreateDynamicObject(1319, -2634.6137695313, 2496.2351074219, 28.587575912476, 0, 0, 0);
	CreateDynamicObject(1319, -2625.0642089844, 2496.6325683594, 27.466146469116, 0, 0, 0);
	CreateDynamicObject(1319, -2615.0544433594, 2495.1098632813, 26.114330291748, 0, 0, 0);
	CreateDynamicObject(1319, -2604.2800292969, 2491.2861328125, 23.666606903076, 0, 0, 0);
	CreateDynamicObject(1319, -2593.7775878906, 2486.6508789063, 21.962688446045, 0, 0, 0);
	CreateDynamicObject(1319, -2582.0859375, 2480.3759765625, 20.196628570557, 0, 0, 0);
	CreateDynamicObject(11503, -2429.4790039063, 2510.8332519531, 13.026062965393, 0, 0, 0);
	CreateObject(8947, -2378.7163085938, 2369.4943847656, 6.4884328842163, 0, 0, 191.99996948242);
	CreateObject(8947, -2374.017578125, 2370.59765625, 6.5069303512573, 0, 0, 190);
	CreateObject(8947, -2370.2224121094, 2372.9401855469, 6.5051383972168, 0, 0, 233.99993896484);
	CreateObject(8947, -2362.1596679688, 2382.4699707031, 6.5157933235168, 0, 0, 233.99996948242);
	CreateObject(8947, -2368.150390625, 2374.2302246094, 6.5114603042603, 0, 0, 233.99996948242);
	CreateObject(8947, -2357.03125, 2389.5236816406, 6.4985671043396, 0, 0, 233.99996948242);
	CreateObject(8947, -2375.3957519531, 2396.2565917969, 6.5040888786316, 0, 0, 328);
	CreateObject(8947, -2409.4230957031, 2382.72265625, 6.5040373802185, 0, 0, 12);
	CreateObject(8947, -2389.9353027344, 2382.2556152344, 6.5008797645569, 0, 0, 102);
	CreateObject(8947, -2395.1584472656, 2385.0437011719, 6.5072093009949, 0, 0, 70);
	CreateObject(8947, -2399.5471191406, 2359.7646484375, 3.7597889900208, 0, 336, 102);
	CreateObject(8947, -2386.5107421875, 2367.94921875, 6.4947538375854, 0, 0, 191.9970703125);
	CreateObject(8947, -2402.2431640625, 2372.369140625, 6.5006132125854, 0, 0, 101.99710083008);
	CreateDynamicObject(13059, -2362.681640625, 2389.25390625, 13.682167053223, 0, 0, 143.99780273438);
	CreateDynamicObject(1411, -2388.6982421875, 2355.3984375, 11.157552719116, 0, 0, 12);
	CreateDynamicObject(1411, -2383.6184082031, 2356.5437011719, 11.157552719116, 0, 0, 14);
	CreateDynamicObject(1411, -2378.5405273438, 2357.7141113281, 11.169729232788, 0, 0, 12);
	CreateDynamicObject(1411, -2373.4853515625, 2358.7983398438, 11.169729232788, 0, 0, 12);
	CreateDynamicObject(1411, -2368.5200195313, 2360.1364746094, 11.169729232788, 0, 0, 18);
	CreateDynamicObject(1411, -2363.8491210938, 2362.2163085938, 11.169729232788, 0, 0, 30);
	CreateDynamicObject(1411, -2360.0847167969, 2365.4926757813, 11.174259185791, 0, 0, 52);
	CreateDynamicObject(1411, -2357.0151367188, 2369.6164550781, 11.174259185791, 0, 0, 54);
	CreateDynamicObject(1411, -2353.9765625, 2373.8254394531, 11.178592681885, 0, 0, 54);
	CreateDynamicObject(1411, -2350.8942871094, 2378.0163574219, 11.178592681885, 0, 0, 54);
	CreateDynamicObject(1411, -2347.8542480469, 2382.1809082031, 11.178592681885, 0, 0, 54);
	CreateDynamicObject(1411, -2344.8295898438, 2386.3676757813, 11.161365509033, 0, 0, 54);
	CreateDynamicObject(1411, -2345.3425292969, 2389.7138671875, 11.161365509033, 0, 0, 144);
	CreateDynamicObject(1411, -2349.5598144531, 2392.6926269531, 11.161365509033, 0, 0, 144);
	CreateDynamicObject(1411, -2353.7294921875, 2395.7885742188, 11.161365509033, 0, 0, 144);
	CreateDynamicObject(1411, -2357.9172363281, 2398.8322753906, 11.161365509033, 0, 0, 144);
	CreateDynamicObject(1411, -2362.1401367188, 2401.8232421875, 11.161366462708, 0, 0, 146);
	CreateDynamicObject(1411, -2366.4943847656, 2404.6511230469, 11.166887283325, 0, 0, 148);
	CreateDynamicObject(1411, -2370.8405761719, 2407.4855957031, 11.166887283325, 0, 0, 146);
	CreateDynamicObject(1411, -2372.7648925781, 2408.7622070313, 11.166887283325, 0, 0, 148);
	CreateDynamicObject(1411, -2376.1330566406, 2408.0439453125, 11.166887283325, 0, 0, 235.99996948242);
	CreateDynamicObject(1411, -2378.8564453125, 2403.6557617188, 11.166887283325, 0, 0, 239.99998474121);
	CreateDynamicObject(1411, -2381.1982421875, 2399.0498046875, 11.166887283325, 0, 0, 246);
	CreateDynamicObject(1411, -2383.3005371094, 2394.3061523438, 11.166887283325, 0, 0, 245.99998474121);
	CreateDynamicObject(1411, -2384.4282226563, 2391.7548828125, 11.166887283325, 0, 0, 244);
	CreateDynamicObject(1411, -2388.2006835938, 2390.4108886719, 11.170007705688, 0, 0, 344);
	CreateDynamicObject(1411, -2393.1159667969, 2391.9934082031, 11.170007705688, 0, 0, 340);
	CreateDynamicObject(1411, -2398.0168457031, 2393.6459960938, 11.170007705688, 0, 0, 342);
	CreateDynamicObject(1411, -2403.0380859375, 2394.8332519531, 11.170007705688, 0, 0, 352);
	CreateDynamicObject(1411, -2408.2587890625, 2394.9470214844, 11.166835784912, 0, 0, 6);
	CreateDynamicObject(1411, -2413.3598632813, 2394.0681152344, 11.166835784912, 0, 0, 14);
	CreateDynamicObject(1411, -2416.3266601563, 2393.3598632813, 11.166835784912, 0, 0, 14);
	CreateDynamicObject(1411, -2418.4409179688, 2389.9460449219, 11.166835784912, 0, 0, 102);
	CreateDynamicObject(1411, -2417.375, 2384.8942871094, 11.166835784912, 0, 0, 102);
	CreateDynamicObject(1411, -2416.3051757813, 2379.8234863281, 11.166835784912, 0, 0, 102);
	CreateDynamicObject(1411, -2415.2998046875, 2374.7626953125, 11.166835784912, 0, 0, 100);
	CreateDynamicObject(1411, -2414.2307128906, 2369.6936035156, 11.163412094116, 0, 0, 104);
	CreateDynamicObject(1411, -2413.2116699219, 2365.1806640625, 11.163412094116, 0, 0, 102);
	CreateDynamicObject(1237, -2409.5458984375, 2350.5554199219, 3.916383266449, 0, 0, 0);
	CreateDynamicObject(1237, -2391.1726074219, 2354.3586425781, 3.984375, 0, 0, 0);
	CreateDynamicObject(11461, -2373.9504394531, 2405.7878417969, 1.8076324462891, 0, 0, 0);
	CreateDynamicObject(958, -2368.4423828125, 2401.4658203125, 10.434471130371, 0, 0, 0);
	CreateDynamicObject(1353, -2371.1240234375, 2402.9953613281, 10.2281665802, 0, 0, 233.99996948242);
	CreateDynamicObject(1635, -2368.3937988281, 2400.8142089844, 15.018543243408, 0, 0, 233.99996948242);
	CreateDynamicObject(1687, -2364.296875, 2402.4033203125, 10.369028091431, 0, 0, 322);
	CreateDynamicObject(1691, -2352.365234375, 2384.3081054688, 15.086310386658, 0, 0, 54);
	CreateDynamicObject(2653, -2358.1032714844, 2396.5825195313, 10.284049987793, 0, 0, 56);
	CreateDynamicObject(2653, -2353.5998535156, 2393.580078125, 10.284049987793, 0, 0, 56);
	CreateDynamicObject(3273, -2378.1682128906, 2399.7265625, 9.5076332092285, 0, 0, 58);
	CreateDynamicObject(3287, -2390.7900390625, 2360.9450683594, 14.287343978882, 0, 0, 12);
	CreateDynamicObject(939, -2379.7526855469, 2395.0466308594, 12.000858306885, 0, 0, 56);
	CreateDynamicObject(3630, -2416.2282714844, 2388.1198730469, 11.050203323364, 0, 0, 282);
	CreateDynamicObject(5259, -2384.31640625, 2360.7941894531, 11.273271560669, 0, 0, 12);
	CreateDynamicObject(8886, -2411.8005371094, 2377.9096679688, 12.985361099243, 0, 0, 282);
	CreateDynamicObject(3577, -2412.7893066406, 2387.5144042969, 10.340087890625, 0, 0, 282);
	CreateDynamicObject(3576, -2413.78125, 2391.4609375, 11.050253868103, 0, 0, 282);
	CreateDynamicObject(3567, -2395.2666015625, 2389.9606933594, 10.439498901367, 0, 0, 249.99998474121);
	CreateDynamicObject(3066, -2397.6437988281, 2390.6821289063, 12.376317977905, 0, 0, 70);
	CreateDynamicObject(2973, -2391.5844726563, 2388.3933105469, 11.322041511536, 0, 0, 340);
	CreateDynamicObject(930, -2381.0568847656, 2391.6784667969, 10.033508300781, 0, 0, 52);
	CreateDynamicObject(2973, -2388.7783203125, 2387.4016113281, 11.322041511536, 0, 0, 340);
	CreateDynamicObject(16003, -2406.0544433594, 2364.9035644531, 10.951774597168, 0, 0, 12);
	CreateDynamicObject(3504, -2360.3349609375, 2396.4399414063, 10.894474029541, 0, 0, 52);
	CreateDynamicObject(1468, -2409.9377441406, 2363.2719726563, 10.823066711426, 0, 0, 12);
	CreateDynamicObject(3875, -2386.01953125, 2390.0629882813, 16.894250869751, 0, 0, 0);
	CreateDynamicObject(3463, -2393.7927246094, 2366.6472167969, 9.3870325088501, 0, 0, 0);
	CreateDynamicObject(3463, -2415.7272949219, 2382.5368652344, 9.557580947876, 0, 0, 282);
	CreateDynamicObject(3463, -2355.0593261719, 2395.8420410156, 9.5521106719971, 0, 0, 324);
	CreateDynamicObject(3463, -2364.7497558594, 2362.2668457031, 9.5586824417114, 0, 0, 32);
	CreateDynamicObject(1319, -2368.6010742188, 2352.9091796875, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2362.6618652344, 2355.5241699219, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2358.3828125, 2358.3295898438, 4.5985045433044, 0, 0, 0);
	CreateDynamicObject(1319, -2351.1311035156, 2351.0986328125, 4.5947046279907, 0, 0, 0);
	CreateDynamicObject(1319, -2357.5988769531, 2346.625, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2354.4768066406, 2348.8286132813, 4.5631632804871, 0, 0, 0);
	CreateDynamicObject(1319, -2365.9816894531, 2343.041015625, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2362.068359375, 2344.73046875, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2365.7663574219, 2354.099609375, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2360.4506835938, 2356.8828125, 4.5693879127502, 0, 0, 0);
	CreateDynamicObject(11384, -2381.3662109375, 2393.1801757813, 9.6405639648438, 0, 0, 0);
	CreateDynamicObject(1442, -2405.3933105469, 2366.3015136719, 10.152640342712, 0, 0, 0);
	CreateDynamicObject(1440, -2409.1259765625, 2372.9523925781, 10.076697349548, 0, 0, 0);
	CreateDynamicObject(1439, -2411.599609375, 2372.8088378906, 9.557580947876, 0, 0, 16);
	CreateDynamicObject(1438, -2413.193359375, 2371.4423828125, 9.557580947876, 0, 0, 98);
	CreateDynamicObject(1358, -2411.5964355469, 2368.4831542969, 10.757703781128, 0, 0, 12);
	CreateDynamicObject(1357, -2412.9645996094, 2369.7458496094, 9.8245973587036, 0, 0, 0);
	CreateDynamicObject(1265, -2412.873046875, 2372.5717773438, 10.026624679565, 0, 0, 0);
	CreateDynamicObject(1264, -2413.1923828125, 2372.509765625, 10.447132110596, 0, 0, 0);
	CreateDynamicObject(1264, -2412.6945800781, 2371.8022460938, 10.584139823914, 0, 0, 0);
	CreateDynamicObject(2670, -2411.4694824219, 2370.2412109375, 9.6496343612671, 0, 0, 0);
	CreateDynamicObject(2672, -2410.7175292969, 2371.0571289063, 9.8370428085327, 0, 0, 0);
	CreateDynamicObject(2674, -2410.1296386719, 2365.8273925781, 9.5758972167969, 0, 0, 0);
	CreateDynamicObject(852, -2412.0200195313, 2366.0947265625, 9.5541572570801, 0, 0, 0);
	CreateDynamicObject(3066, -2374.4084472656, 2360.1101074219, 10.614750862122, 0, 0, 284);
	CreateDynamicObject(2991, -2377.9799804688, 2362.0842285156, 10.188208580017, 0, 0, 12);
	CreateDynamicObject(2991, -2378.0073242188, 2362.0510253906, 11.446001052856, 0, 0, 12);
	CreateDynamicObject(1431, -2379.4401855469, 2363.525390625, 10.108087539673, 0, 0, 0);
	CreateDynamicObject(1431, -2379.654296875, 2364.4165039063, 10.108087539673, 0, 0, 0);
	CreateDynamicObject(1685, -2377.4624023438, 2364.3205566406, 10.310474395752, 0, 0, 12);
	CreateDynamicObject(3633, -2375.2026367188, 2362.2426757813, 10.035276412964, 0, 0, 8);
	CreateDynamicObject(1290, -2370.5703125, 2382.8784179688, 15.592759132385, 0, 0, 0);
	CreateDynamicObject(1216, -2368.69921875, 2384.9208984375, 10.261340141296, 0, 0, 0);
	//Calligullas
	CreateDynamicObject(14820, 476.43911743164, -14.970683097839, 1003.5988769531, 0, 0, 89.25);
	CreateDynamicObject(2229, 476.38577270508, -16.85525894165, 1002.6953125, 0, 0, 240);
	CreateDynamicObject(2229, 476.44152832031, -13.594132423401, 1002.9964599609, 0, 0, 312);
	djtor = CreateObject(2773, 478.54, -18.98, 1000.20,   0.00, 0.00, 265.46);
	CreateDynamicObject(14391, 473.515625, -13.124806404114, 1003.6553955078, 0, 0, 0);
	CreateDynamicObject(2700, 477.30679321289, -21.39623260498, 1004.7790527344, 0, 8, 324);
	CreateDynamicObject(2229, 483.84112548828, -3.2400131225586, 1001.078125, 0, 0, 0);
	CreateDynamicObject(2229, 491.67269897461, -3.2281684875488, 1001.0706787109, 0, 0, 0);
	CreateDynamicObject(2229, 479.81301879883, -21.207992553711, 1002.109375, 0, 0, 32);
	CreateDynamicObject(2229, 489.21041870117, -21.517070770264, 1002.109375, 0, 0, 312);
	CreateDynamicObject(1808, 476.96127319336, -21.53021812439, 1002.109375, 0, 0, 0);
	CreateDynamicObject(1736, 475.97180175781, -21.65446472168, 1004.1271972656, 0, 0, 0);
	CreateDynamicObject(1212, 487.26287841797, -24.566806793213, 1002.5737304688, 0, 0, 0);
	CreateDynamicObject(1279, 485.89761352539, -21.94095993042, 1002.5413818359, 0, 0, 0);
	CreateDynamicObject(1279, 484.86178588867, -21.913040161133, 1002.5413818359, 0, 0, 0);
	CreateDynamicObject(1550, 486.98904418945, -21.426961898804, 1002.502746582, 0, 0, 0);
	CreateDynamicObject(1575, 485.39971923828, -21.874841690063, 1002.7799682617, 0, 0, 0);
	CreateDynamicObject(1579, 486.01013183594, -21.82511138916, 1002.8173217773, 0, 0, 0);
	CreateDynamicObject(1582, 486.36184692383, -24.833658218384, 1003.0051269531, 0, 0, 0);
	CreateDynamicObject(2044, 482.91278076172, -24.440496444702, 1002.6012573242, 0, 0, 0);
	CreateDynamicObject(2037, 482.55078125, -24.401071548462, 1002.6461181641, 0, 0, 0);
	CreateDynamicObject(2036, 482.72009277344, -24.921905517578, 1002.6076660156, 0, 0, 0);
	CreateDynamicObject(1549, 488.75625610352, -26.534425735474, 1002.109375, 0, 0, 0);
	CreateDynamicObject(1549, 473.71795654297, -26.652603149414, 1002.109375, 0, 0, 0);
	CreateDynamicObject(3092, 476.23098754883, -21.062501907349, 1003.5561523438, 0, 0, 0);
	CreateDynamicObject(1549, 476.82690429688, -20.733106613159, 1002.6953125, 0, 0, 0);
	CreateDynamicObject(1549, 480.94454956055, -20.588655471802, 999.6796875, 0, 0, 0);
	CreateDynamicObject(1549, 500.36584472656, -9.9320249557495, 999.6796875, 0, 0, 0);
	CreateDynamicObject(1549, 500.38101196289, -7.9525489807129, 999.6796875, 0, 0, 0);
	CreateDynamicObject(1549, 496.95452880859, -24.236238479614, 999.6796875, 0, 0, 0);
	CreateDynamicObject(7313, 487.39559936523, -2.8370370864868, 1004.5575561523, 0, 0, 0);
	CreateDynamicObject(3471, 490.65502929688, -24.231327056885, 1000.9041748047, 0, 4, 90);
	CreateDynamicObject(2921, 493.34375, -14.362787246704, 1004.2426757813, 0, 0, 0);
	CreateDynamicObject(1622, 490.11856079102, -24.617321014404, 1005.4883422852, 0, 342, 287.99996948242);
	CreateDynamicObject(1616, 507.3671875, -8.0929050445557, 1003.1268920898, 0, 0, 0);
	//Feuerwehr Interior Veränderungen
	fwtor1 = CreateDynamicObject(1495,250.60000610,61.79999924,1002.59997559,0.00000000,0.00000000,88.50000000); //nach rechts tür 1
	fwtor2 = CreateDynamicObject(1495,250.60000610,64.80000305,1002.59997559,0.00000000,0.00000000,270.50000000); //nach links tür 2 bissle
	fwtor4 = CreateDynamicObject(1495,247.89999390,72.59999847,1002.59997559,0.00000000,0.00000000,179.75000000); //nach rechts tür 4
	fwtor3 = CreateDynamicObject(1495,244.89999390,72.59999847,1002.59997559,0.00000000,0.00000000,359.25000000); //nach links tür 3
	CreateDynamicObject(2634,259.10000610,90.80000305,1002.59997559,0.00000000,0.00000000,91.99951172);
	CreateDynamicObject(3859,250.50000000,67.69999695,1005.59997559,0.00000000,359.25000000,197.00000000);
	//Feuerwehr
	CreateObject(11008, -2441.6987304688, 2372.3950195313, 10.691123962402, 0, 0, 282);
	CreateDynamicObject(3877, -2420.9907226563, 2348.0395507813, 5.6344909667969, 0, 0, 12);
	CreateDynamicObject(3877, -2449.7736816406, 2341.9543457031, 5.5989322662354, 0, 0, 12);
	CreateDynamicObject(3864, -2415.2946777344, 2361.7438964844, 9.7523460388184, 0, 0, 0);
	CreateObject(3872, -2422.1042480469, 2361.4477539063, 10.72601890564, 0, 0, 2);
	CreateObject(17065, -2446.6137695313, 2389.0161132813, 11.793025016785, 0, 0, 12);
	CreateDynamicObject(3666, -2440.9538574219, 2394.748046875, 13.363089561462, 0, 0, 0);
	CreateDynamicObject(3666, -2454.1572265625, 2391.6665039063, 13.363089561462, 0, 0, 0);
	CreateDynamicObject(2794, -2444.2492675781, 2360.3737792969, 8.9384117126465, 0, 0, 10);
	CreateDynamicObject(2793, -2435.4968261719, 2362.2595214844, 8.8922805786133, 0, 0, 12);
	CreateDynamicObject(2792, -2426.6657714844, 2364.1364746094, 8.950122833252, 0, 0, 12);
	CreateDynamicObject(4003, -2435.197265625, 2361.7961425781, 15.476154327393, 0, 0, 191.99996948242);
	CreateObject(3934, -2446.5690917969, 2388.4379882813, 12.849404335022, 0, 0, 12);
	CreateDynamicObject(1215, -2456.2280273438, 2341.1594238281, 5.4743947982788, 0, 0, 0);
	CreateDynamicObject(1319, -2456.2404785156, 2336.1804199219, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2453.5632324219, 2336.4812011719, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2451.3520507813, 2336.7534179688, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2448.4799804688, 2337.1638183594, 4.5389757156372, 0, 0, 0);
	CreateDynamicObject(1319, -2461.1401367188, 2341.8852539063, 4.5867857933044, 0, 0, 0);
	CreateDynamicObject(1319, -2461.3039550781, 2344.5109863281, 4.7651476860046, 0, 0, 0);
	CreateDynamicObject(1319, -2460.9069824219, 2339.9077148438, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2461.3901367188, 2347.1137695313, 4.9405879974365, 0, 0, 0);
	CreateDynamicObject(1283, -2408.5004882813, 2344.2060546875, 7.0661449432373, 0, 0, 104);
	CreateDynamicObject(1568, -2420.4711914063, 2349.23046875, 3.96875, 0, 0, 10);
	CreateDynamicObject(1262, -2420.44921875, 2349.3608398438, 7.4809913635254, 0, 0, 0);
	CreateObject(4199, -2436.0744628906, 2350.3784179688, 1.8812272548676, 0, 0, 282);
	CreateObject(4199, -2437.4187011719, 2359.2468261719, 1.8733341693878, 0, 0, 278);
	//Puff aka Wohnmobil
	CreateDynamicObject(3172, -2621.2385253906, 2439.65234375, 14.262322425842, 0, 0, 158);
	CreateDynamicObject(3174, -2634.5888671875, 2436.7932128906, 14.4873046875, 0, 8, 258);
	CreateDynamicObject(7093, -2625.5170898438, 2450.0378417969, 24.322244644165, 0, 0, 40);
	CreateDynamicObject(2714, -2620.0876464844, 2438.7170410156, 16.665132522583, 0, 0, 68);
	CreateDynamicObject(2685, -2619.2490234375, 2440.7316894531, 15.936594963074, 0, 0, 70);
	CreateDynamicObject(8676, -2600.6384277344, 2443.4658203125, 18.853702545166, 0, 0, 262);
	CreateDynamicObject(3785, -2620.9135742188, 2436.7380371094, 16.881916046143, 0, 0, 0);
	CreateDynamicObject(3785, -2619.0266113281, 2441.408203125, 16.799541473389, 0, 0, 0);
	CreateDynamicObject(1347, -2617.0261230469, 2441.7888183594, 14.923517227173, 0, 0, 0);
	CreateDynamicObject(1264, -2631.3310546875, 2434.9453125, 14.83833026886, 0, 0, 0);
	CreateDynamicObject(1264, -2632.4479980469, 2434.7514648438, 14.802597045898, 0, 0, 0);
	CreateDynamicObject(1265, -2631.7678222656, 2434.0170898438, 14.689611434937, 0, 0, 0);
	CreateDynamicObject(869, -2628.8293457031, 2434.0991210938, 14.698307037354, 0, 0, 0);
	CreateDynamicObject(869, -2626.4650878906, 2433.6477050781, 14.640862464905, 0, 0, 0);
	CreateDynamicObject(870, -2628.9975585938, 2432.2868652344, 14.209857940674, 0, 0, 0);
	CreateDynamicObject(870, -2624.3859863281, 2433.1528320313, 14.367523193359, 0, 0, 0);
	CreateDynamicObject(870, -2626.3049316406, 2432.130859375, 14.199736595154, 0, 0, 0);
	CreateDynamicObject(871, -2626.8129882813, 2434.5444335938, 14.610781669617, 0, 0, 0);
	CreateDynamicObject(871, -2629.5522460938, 2434.9255371094, 14.655424118042, 0, 0, 0);
	CreateDynamicObject(1232, -2611.6254882813, 2427.7124023438, 16.396953582764, 0, 0, 0);
	CreateDynamicObject(1319, -2604.6179199219, 2437.7629394531, 14.426940917969, 0, 0, 0);
	CreateDynamicObject(1319, -2609.0705566406, 2434.3928222656, 14.419221878052, 0, 0, 0);
	CreateDynamicObject(1319, -2606.8891601563, 2436.0119628906, 14.423368453979, 0, 0, 0);
	CreateDynamicObject(1319, -2611.1303710938, 2429.4846191406, 14.408655166626, 0, 0, 0);
	CreateDynamicObject(1319, -2610.1789550781, 2431.73046875, 14.412558555603, 0, 0, 0);
	CreateDynamicObject(1319, -2599.3698730469, 2437.814453125, 14.420771598816, 0, 0, 0);
	CreateDynamicObject(1319, -2601.8500976563, 2437.7573242188, 14.424987792969, 0, 0, 0);
	CreateDynamicObject(1232, -2598.7839355469, 2437.7819824219, 16.506984710693, 0, 0, 0);
	CreateDynamicObject(1293, -2617.1398925781, 2424.1491699219, 14.111034393311, 0, 0, 258);
	CreateDynamicObject(1291, -2616.9392089844, 2424.9516601563, 14.05890750885, 0, 0, 80);
	CreateDynamicObject(1346, -2616.1333007813, 2426.62890625, 14.98829460144, 0, 0, 78);
	CreateDynamicObject(3407, -2619.4116210938, 2432.3901367188, 14.03342628479, 0, 0, 0);
	//Disco
	CreateDynamicObject(8399, -2485.5217285156, 2291.0725097656, 8.724702835083, 0, 0, 179.99993896484);
	CreateDynamicObject(18275, -2485.8459472656, 2270.4133300781, 6.2325439453125, 0, 0, 0);
	CreateDynamicObject(16091, -2485.8149414063, 2270.275390625, 3.984375, 0, 0, 270);
	CreateDynamicObject(18102, -2482.0617675781, 2268.400390625, 10.923973083496, 0, 0, 0);
	CreateDynamicObject(14434, -2491.9440917969, 2265.9301757813, 11.142249107361, 0, 0, 92);
	CreateDynamicObject(2176, -2481.1633300781, 2270.0241699219, 6.826563835144, 0, 0, 0);
	CreateDynamicObject(1533, -2486.6296386719, 2272.4279785156, 3.984375, 0, 0, 0);
	CreateDynamicObject(14628, -2485.9663085938, 2268.2534179688, 12.777640342712, 0, 0, 180);
	CreateDynamicObject(14611, -2674.6401367188, 2289.6672363281, 36.493347167969, 0, 58, 0);
	CreateDynamicObject(2921, -2479.7868652344, 2269.5966796875, 10.062637329102, 0, 344, 56);
	CreateDynamicObject(2773, -2487.0012207031, 2271.1286621094, 4.5016031265259, 0, 0, 0);
	CreateDynamicObject(2773, -2484.8918457031, 2271.0815429688, 4.5016031265259, 0, 0, 0);
	CreateDynamicObject(4199, -2494.2033691406, 2288.8981933594, 1.8968479633331, 0, 0, 0);
	CreateDynamicObject(3472, -2496.1315917969, 2271.8542480469, 3.9410209655762, 0, 0, 0);
	CreateDynamicObject(2045, -2484.3002929688, 2271.5747070313, 4.0820479393005, 0, 0, 0);
	//Tankstelle & und sontiges Verschiedenes
	CreateDynamicObject(2942, -2492.56, 2358.55, 9.77,   0.38, 0.00, 85.54); //ATM 24/7
	CreateDynamicObject(12853, -2323.7734375, 2352.2817382813, 5.9493989944458, 0, 0, 272);
	CreateDynamicObject(1676, -2318.7307128906, 2363.4450683594, 5.6958193778992, 0, 0, 0);
	CreateDynamicObject(1686, -2328.7333984375, 2363.2004394531, 4.0902924537659, 0, 0, 272);
	CreateDynamicObject(1695, -2330.7778320313, 2352.673828125, 8.7323656082153, 0, 0, 0);
	CreateDynamicObject(1695, -2317.0395507813, 2352.8056640625, 8.7323656082153, 0, 0, 0);
	CreateDynamicObject(1214, -2326.0219726563, 2376.8647460938, 4.9298667907715, 0, 0, 0);
	CreateDynamicObject(1214, -2316.3291015625, 2370.1967773438, 4.7663149833679, 0, 0, 0);
	CreateDynamicObject(1214, -2331.5903320313, 2369.1257324219, 4.7183046340942, 0, 0, 0);
	CreateDynamicObject(1290, -2311.7416992188, 2357.4748535156, 10.018701553345, 0, 0, 316);
	CreateDynamicObject(1319, -2329.9848632813, 2379.6564941406, 5.4768009185791, 0, 0, 0);
	CreateDynamicObject(1319, -2323.1313476563, 2380.8527832031, 5.4771356582642, 0, 0, 0);
	CreateDynamicObject(1319, -2324.8989257813, 2381.6184082031, 5.4765625, 0, 0, 0);
	CreateDynamicObject(1319, -2338.33203125, 2385.5517578125, 5.4765763282776, 0, 0, 0);
	CreateDynamicObject(1319, -2339.5803222656, 2392.3735351563, 5.4820518493652, 0, 0, 0);
	CreateDynamicObject(1319, -2338.2575683594, 2390.9736328125, 5.4765625, 0, 0, 0);
	CreateDynamicObject(984, -2322.9072265625, 2369.7238769531, 4.9100842475891, 0, 0, 94);
	CreateDynamicObject(983, -2328.2873535156, 2369.3400878906, 4.9408082962036, 0, 0, 94);
	CreateDynamicObject(983, -2319.03125, 2372.0021972656, 5.3509440422058, 0, 0, 56);
	CreateDynamicObject(983, -2323.3762207031, 2374.9538574219, 5.3958048820496, 0, 0, 56);
	CreateDynamicObject(983, -2327.9641113281, 2374.1672363281, 5.3720817565918, 0, 0, 324);
	CreateDynamicObject(983, -2329.8081054688, 2371.638671875, 5.3230748176575, 0, 0, 324);
	CreateDynamicObject(869, -2322.2365722656, 2371.6694335938, 5.0476522445679, 0, 0, 0);
	CreateDynamicObject(869, -2325.0349121094, 2373.4638671875, 5.0955481529236, 0, 0, 0);
	CreateDynamicObject(870, -2325.3510742188, 2371.3190917969, 4.7571659088135, 0, 0, 0);
	CreateDynamicObject(870, -2320.078125, 2371.3049316406, 4.9253606796265, 0, 0, 0);
	CreateDynamicObject(870, -2325.6684570313, 2374.8649902344, 5.0205268859863, 0, 0, 0);
	CreateDynamicObject(869, -2327.2749023438, 2371.5034179688, 5.0913968086243, 0, 0, 0);
	CreateDynamicObject(870, -2328.9348144531, 2370.8903808594, 4.9375925064087, 0, 0, 0);
	CreateDynamicObject(870, -2323.1411132813, 2373.0859375, 4.937349319458, 0, 0, 0);
	CreateDynamicObject(870, -2327.3681640625, 2373.0815429688, 4.9978227615356, 0, 0, 0);
	CreateDynamicObject(750, -2324.5593261719, 2372.3798828125, 4.4421319961548, 0, 0, 0);
	CreateObject(3350, -2336.1633300781, 2356.8112792969, 8.5637760162354, 0, 0, 239.99998474121);
	CreateDynamicObject(2942, -2335.1997070313, 2357.2175292969, 4.7479043006897, 0, 0, 179.99993896484);
	CreateDynamicObject(1616, -2315.1198730469, 2357.5849609375, 8.1338605880737, 0, 0, 316);
	CreateDynamicObject(1984, -2335.1945800781, 2350.080078125, 3.984375, 0, 0, 0);
	CreateDynamicObject(2012, -2325.2048339844, 2356.2019042969, 3.994597196579, 0, 0, 0);
	CreateDynamicObject(2362, -2335.5173339844, 2349.9106445313, 4.9114751815796, 0, 0, 158);
	CreateDynamicObject(2368, -2332.2824707031, 2350.2436523438, 3.9920861721039, 0, 0, 0);
	CreateDynamicObject(2412, -2333.1389160156, 2356.0698242188, 4.0508117675781, 0, 0, 0);
	CreateDynamicObject(2412, -2330.7023925781, 2356.13671875, 3.9945695400238, 0, 0, 0);
	CreateDynamicObject(2422, -2332.6401367188, 2349.9826660156, 5.0333986282349, 0, 0, 180);
	CreateDynamicObject(2578, -2333.0327148438, 2348.06640625, 6.3346519470215, 0, 0, 182);
	CreateDynamicObject(2579, -2331.8217773438, 2348.1086425781, 6.3318915367126, 0, 0, 183.99996948242);
	CreateDynamicObject(2582, -2324.6179199219, 2351.224609375, 4.8595247268677, 0, 0, 181.99996948242);
	CreateDynamicObject(2622, -2329.4240722656, 2350.38671875, 4.7769045829773, 0, 0, 0);
	CreateDynamicObject(14687, -2327.4333496094, 2350.6110839844, 6.3174061775208, 0, 0, 6);
	CreateDynamicObject(1843, -2335.4262695313, 2354.015625, 3.9369730949402, 0, 0, 92);
	CreateDynamicObject(1290, -2336.1071777344, 2356.5581054688, 9.1004428863525, 0, 0, 52);
	CreateDynamicObject(1306, -2339.4140625, 2347.9089355469, 11.546211242676, 0, 0, 0);
	CreateDynamicObject(1346, -2337.0502929688, 2355.8981933594, 5.4873361587524, 0, 0, 269.99996948242);
	CreateDynamicObject(1232, -2325.8601074219, 2376.4360351563, 7.5370535850525, 0, 0, 0);
	CreateDynamicObject(1232, -2330.9919433594, 2369.4360351563, 7.3479399681091, 0, 0, 0);
	CreateDynamicObject(1232, -2317.0109863281, 2370.4006347656, 7.4003057479858, 0, 0, 0);
	CreateDynamicObject(1365, -2339.4011230469, 2349.4182128906, 5.2285542488098, 0, 0, 0);
	CreateDynamicObject(1265, -2336.86328125, 2351.2487792969, 4.5139555931091, 0, 0, 0);
	CreateDynamicObject(1265, -2337.8041992188, 2351.2336425781, 4.5468983650208, 0, 0, 0);
	CreateDynamicObject(1264, -2336.6508789063, 2351.9575195313, 4.5285849571228, 0, 0, 0);
	CreateDynamicObject(2672, -2337.6025390625, 2352.4582519531, 4.3830971717834, 0, 0, 0);
	CreateDynamicObject(1359, -2336.6743164063, 2357.4916992188, 4.9276452064514, 0, 0, 0);
	CreateDynamicObject(1359, -2317.1215820313, 2363.5173339844, 4.8135099411011, 0, 0, 0);
	CreateDynamicObject(1440, -2343.9831542969, 2347.583984375, 4.5918478965759, 0, 0, 184);
	CreateDynamicObject(1256, -2322.0581054688, 2374.7399902344, 5.5281381607056, 0, 0, 235.99996948242);
	CreateDynamicObject(12978, -2306.3103027344, 2343.2741699219, 3.8843746185303, 0, 0, 92);
	CreateDynamicObject(13027, -2306.2995605469, 2343.2707519531, 7.1993765830994, 0, 0, 272);
	CreateDynamicObject(3096, -2298.1857910156, 2343.4963378906, 9.7030277252197, 0, 0, 272);
	CreateDynamicObject(3877, -2297.8071289063, 2339.30859375, 5.9096074104309, 0, 0, 0);
	CreateDynamicObject(8843, -2326.564453125, 2360.30859375, 4.2634358406067, 0, 0, 272);
	CreateDynamicObject(8843, -2323.6286621094, 2366.7878417969, 4.5230088233948, 0, 0, 96);
	CreateDynamicObject(1214, -2297.154296875, 2339.3332519531, 4.264760017395, 0, 0, 0);
	CreateDynamicObject(1214, -2295.1030273438, 2340.3461914063, 4.3729877471924, 0, 0, 0);
	CreateDynamicObject(1214, -2293.1447753906, 2341.5610351563, 4.5079364776611, 0, 0, 0);
	CreateDynamicObject(1214, -2291.060546875, 2342.9294433594, 4.6612339019775, 0, 0, 0);
	CreateDynamicObject(1214, -2288.9724121094, 2344.466796875, 4.8444786071777, 0, 0, 0);
	CreateDynamicObject(1214, -2287.7810058594, 2345.8825683594, 4.6533498764038, 0, 0, 0);
	CreateDynamicObject(1214, -2287.162109375, 2347.3701171875, 4.4469652175903, 0, 0, 0);
	CreateDynamicObject(1214, -2286.5727539063, 2349.1010742188, 4.2175531387329, 0, 0, 0);
	psgate= CreateDynamicObject(1966, -2298.4157714844, 2343.5158691406, 0.4969425201416, 0, 0, 272); // Z = 5
	CreateDynamicObject(16003, -2296.5686035156, 2354.6999511719, 5.7846865653992, 0, 0, 54);
	CreateDynamicObject(10631, -2289.6928710938, 2328.8767089844, 8.2338562011719, 0, 0, 269.99450683594);
	CreateDynamicObject(16092, -2292.4482421875, 2352.4682617188, 4.4753074645996, 0, 0, 56);
	CreateDynamicObject(1690, -2305.5476074219, 2343.6296386719, 11.438546180725, 0, 0, 0);
	CreateDynamicObject(18452, -2307.0324707031, 2343.2080078125, 0.64554965496063, 0, 0, 272);
	CreateDynamicObject(970, -2303.4035644531, 2341.0329589844, 4.5779495239258, 0, 0, 0);
	CreateDynamicObject(970, -2307.5461425781, 2341.0334472656, 4.5779495239258, 0, 0, 0);
	CreateDynamicObject(970, -2309.6994628906, 2343.1430664063, 4.5779495239258, 0, 0, 272);
	CreateDynamicObject(970, -2307.7158203125, 2345.1865234375, 4.5779495239258, 0, 0, 0);
	CreateDynamicObject(970, -2303.5617675781, 2345.2119140625, 4.5779495239258, 0, 0, 0);
	CreateDynamicObject(3096, -2291.0935058594, 2352.4592285156, 11.790101051331, 0, 0, 326);
	CreateDynamicObject(8843, -2300.7697753906, 2343.3979492188, 4.0510277748108, 0, 0, 92);
	CreateDynamicObject(1522, -2280.7033691406, 2327.537109375, 4.2572937011719, 0, 0, 92);
	CreateObject(16564, -2281.2893066406, 2298.0417480469, 3.8943295478821, 0, 0, 270);
	CreateDynamicObject(8854, -2247.845703125, 2293.9323730469, 4.2138471603394, 0, 0, 0);
	CreateDynamicObject(8854, -2247.8491210938, 2315.0969238281, 4.213960647583, 0, 0, 0);
	CreateDynamicObject(3934, -2279.9099121094, 2313.201171875, 10.172428131104, 0, 0, 0);
	CreateDynamicObject(1232, -2273.0043945313, 2292.7075195313, 6.4568562507629, 0, 0, 0);
	CreateDynamicObject(1232, -2272.951171875, 2297.6967773438, 6.4568562507629, 0, 0, 0);
	CreateDynamicObject(1232, -2279.3991699219, 2318.2111816406, 4.8761324882507, 0, 0, 0);
	CreateDynamicObject(1232, -2279.4133300781, 2310.0224609375, 4.8511118888855, 0, 0, 0);
	CreateDynamicObject(1290, -2267.8850097656, 2318.5407714844, 9.7686357498169, 0, 0, 320);
	CreateDynamicObject(1319, -2280.4353027344, 2341.7727050781, 4.5098533630371, 0, 0, 0);
	CreateDynamicObject(1319, -2280.5639648438, 2344.4814453125, 4.5022134780884, 0, 0, 0);
	CreateDynamicObject(1319, -2281.5393066406, 2345.6237792969, 4.5519919395447, 0, 0, 0);
	CreateDynamicObject(1319, -2283.6467285156, 2347.0463867188, 4.6440720558167, 0, 0, 0);
	CreateDynamicObject(1319, -2275.7231445313, 2345.8256835938, 4.5165996551514, 0, 0, 0);
	CreateDynamicObject(1319, -2276.388671875, 2347.5947265625, 4.5164890289307, 0, 0, 0);
	CreateDynamicObject(1319, -2277.7114257813, 2348.98828125, 4.5153484344482, 0, 0, 0);
	CreateDynamicObject(3463, -2274.3454589844, 2352.8239746094, 3.6625003814697, 0, 0, 54);
	CreateDynamicObject(3030, -2275.638671875, 2288.3762207031, 10.172428131104, 0, 0, 0);
	CreateDynamicObject(967, -2268.7170410156, 2307.666015625, 10.172428131104, 0, 0, 0);
	CreateObject(6159, -2294.0681152344, 2307.7531738281, 11.131233215332, 0, 0, 269.99996948242);
	CreateDynamicObject(1215, -2287.9030761719, 2278.6701660156, 5.6628332138062, 0, 0, 0);
	CreateDynamicObject(1215, -2300.2749023438, 2278.7026367188, 5.6628332138062, 0, 0, 0);
	CreateDynamicObject(1319, -2248.4404296875, 2283.2922363281, 4.5212783813477, 0, 0, 0);
	CreateDynamicObject(1319, -2251.2709960938, 2280.8681640625, 4.5254259109497, 0, 0, 0);
	CreateDynamicObject(1319, -2254.3410644531, 2278.6176757813, 4.529923915863, 0, 0, 0);
	CreateDynamicObject(1319, -2249.7429199219, 2282.1337890625, 4.5231866836548, 0, 0, 0);
	CreateDynamicObject(1319, -2252.751953125, 2279.7600097656, 4.5275955200195, 0, 0, 0);
	CreateDynamicObject(1319, -2257.3137207031, 2278.5568847656, 4.5342798233032, 0, 0, 0);
	CreateDynamicObject(1319, -2260.5803222656, 2278.5915527344, 4.5355367660522, 0, 0, 0);
	CreateDynamicObject(1319, -2263.568359375, 2278.5910644531, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2265.6247558594, 2276.8359375, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2267.3977050781, 2275.1821289063, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2268.5837402344, 2272.8403320313, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2268.5856933594, 2271.0490722656, 4.53125, 0, 0, 0);
	CreateDynamicObject(1297, -2248.556640625, 2304.49609375, 7.2067403793335, 0, 0, 0);
	CreateDynamicObject(1297, -2248.556640625, 2298.51953125, 7.2067403793335, 0, 0, 0);
	CreateDynamicObject(1297, -2248.556640625, 2292.505859375, 7.2067403793335, 0, 0, 0);
	CreateDynamicObject(1297, -2248.556640625, 2286.4919433594, 7.2067403793335, 0, 0, 0);
	CreateDynamicObject(1297, -2248.5600585938, 2310.4331054688, 7.2067403793335, 0, 0, 0);
	CreateDynamicObject(1297, -2248.5600585938, 2316.412109375, 7.2067403793335, 0, 0, 0);
	CreateDynamicObject(1297, -2248.5600585938, 2322.4038085938, 7.2067403793335, 0, 0, 0);
	CreateDynamicObject(2795, -2271.3801269531, 2318.8937988281, 8.5194292068481, 0, 0, 0);
	CreateDynamicObject(3666, -2276.1418457031, 2316.5563964844, 10.686113357544, 0, 0, 0);
	CreateDynamicObject(3666, -2276.1845703125, 2309.7133789063, 10.686113357544, 0, 0, 0);
	CreateDynamicObject(3666, -2283.8918457031, 2309.6784667969, 10.686113357544, 0, 0, 0);
	CreateDynamicObject(3666, -2283.8244628906, 2316.4936523438, 10.686113357544, 0, 0, 0);
	CreateDynamicObject(3877, -2281.0437011719, 2319.5144042969, 14.212097167969, 0, 0, 0);
	CreateDynamicObject(3877, -2274.7331542969, 2280.9782714844, 11.8381690979, 0, 0, 0);
	CreateDynamicObject(7073, -2302.7495117188, 2330.9099121094, 22.251125335693, 0, 0, 0);
	CreateDynamicObject(3534, -2304.6401367188, 2332.3422851563, 32.050331115723, 0, 271.99996948242, 0);
	CreateDynamicObject(3534, -2304.7895507813, 2331.2028808594, 32.117721557617, 0, 274, 0);
	CreateDynamicObject(3528, -2304.8884277344, 2332.0737304688, 18.525047302246, 0, 0, 176);
	CreateDynamicObject(1892, -2279.4890136719, 2298.4794921875, 4.5002150535583, 0, 0, 269.99996948242);
	CreateDynamicObject(1892, -2279.4509277344, 2301.5090332031, 4.5002150535583, 0, 0, 269.99996948242);
	CreateDynamicObject(1808, -2278.5202636719, 2305.9909667969, 4.5002150535583, 0, 0, 0);
	CreateDynamicObject(11455, -2258.9001464844, 2278.3801269531, 6.7815074920654, 0, 0, 0);
	CreateDynamicObject(11455, -2280.9123535156, 2371.2265625, 7.418363571167, 0, 0, 272);
	CreateDynamicObject(1997, -2278.2822265625, 2293.8513183594, 4.4752149581909, 0, 0, 178);
	CreateDynamicObject(2921, -2268.1320800781, 2311.7631835938, 7.0146398544312, 0, 0, 0);
	CreateDynamicObject(3471, -2294.0649414063, 2280.0227050781, 6.3730502128601, 0, 0, 269.99996948242);
	CreateDynamicObject(16563, -2242.3740234375, 2362.08203125, 2.6549773216248, 0, 0, 223.99996948242);
	CreateDynamicObject(982, -2222.25390625, 2347.5881347656, 4.667929649353, 0, 358, 312);
	CreateDynamicObject(984, -2238.1967773438, 2339.0209960938, 4.621054649353, 0, 0, 90);
	CreateDynamicObject(1237, -2269.1069335938, 2361.087890625, 3.9730935096741, 0, 0, 0);
	CreateDynamicObject(1251, -2273.7277832031, 2352.0822753906, 3.7998974323273, 0, 0, 326);
	CreateDynamicObject(640, -2249.140625, 2362.2565917969, 4.6800122261047, 0, 0, 0);
	CreateDynamicObject(640, -2244.451171875, 2354.6223144531, 4.6744298934937, 0, 0, 320);
	CreateDynamicObject(640, -2248.0666503906, 2349.7883300781, 4.9918751716614, 0, 0, 330);
	CreateDynamicObject(631, -2249.3713378906, 2347.1940917969, 4.9051666259766, 0, 0, 0);
	CreateDynamicObject(631, -2246.4670410156, 2352.3837890625, 5.05406665802, 0, 0, 0);
	CreateDynamicObject(3876, -2186.435546875, 2421.89453125, 4.0804443359375, 0, 0, 0);
	CreateDynamicObject(10183, -2266.9909667969, 2398.8601074219, 3.9747695922852, 0, 0, 0);
	CreateDynamicObject(1214, -2254.5981445313, 2350.8132324219, 3.9660978317261, 0, 0, 0);
	CreateDynamicObject(1214, -2251.7973632813, 2348.8850097656, 3.9905362129211, 0, 0, 0);
	CreateDynamicObject(1214, -2255.3491210938, 2353.0983886719, 3.9697008132935, 0, 0, 0);
	CreateDynamicObject(1214, -2255.478515625, 2355.4421386719, 3.9730081558228, 0, 0, 0);
	CreateDynamicObject(1214, -2254.9350585938, 2357.794921875, 3.9769840240479, 0, 0, 0);
	CreateDynamicObject(1214, -2253.9396972656, 2359.7119140625, 3.9807643890381, 0, 0, 0);
	CreateDynamicObject(1214, -2252.4528808594, 2361.9873046875, 3.9873104095459, 0, 0, 0);
	CreateDynamicObject(1214, -2249.9885253906, 2364.2502441406, 3.9859008789063, 0, 0, 0);
	CreateDynamicObject(1346, -2243.9436035156, 2338.1286621094, 5.3161344528198, 0, 0, 269.99996948242);
	CreateDynamicObject(1350, -2258.3422851563, 2347.4157714844, 3.8308954238892, 0, 0, 0);
	CreateDynamicObject(1478, -2250.0690917969, 2347.3181152344, 4.6115717887878, 0, 0, 322);
	CreateDynamicObject(1215, -2249.1352539063, 2359.3818359375, 7.7797193527222, 0, 0, 0);
	CreateDynamicObject(1215, -2245.27734375, 2355.380859375, 7.7797193527222, 0, 0, 0);
	CreateDynamicObject(1215, -2248.4353027344, 2364.8337402344, 7.119836807251, 0, 0, 0);
	CreateDynamicObject(1211, -2276.4643554688, 2360.7866210938, 4.5456318855286, 0, 0, 326);
	CreateDynamicObject(751, -2269.4816894531, 2364.2670898438, 4.561635017395, 0, 0, 0);
	CreateDynamicObject(3578, -2263.4916992188, 2351.2038574219, 3.0978031158447, 0, 0, 324);
	CreateObject(5154, -2211.8784179688, 2366.0983886719, 0.50000005960464, 0, 0, 42);
	CreateObject(5154, -2235.103515625, 2390.4169921875, 0.57499998807907, 0, 0, 46);
	CreateDynamicObject(3934, -2209.0991210938, 2363.0454101563, 3.6720294952393, 0, 0, 0);
	CreateDynamicObject(3934, -2232.2961425781, 2387.556640625, 3.747029542923, 0, 0, 0);
	CreateDynamicObject(3666, -2228.6086425781, 2390.9318847656, 4.2607145309448, 0, 0, 0);
	CreateDynamicObject(3666, -2228.5551757813, 2384.0266113281, 4.2607145309448, 0, 0, 0);
	CreateDynamicObject(3666, -2236.2470703125, 2384.0402832031, 4.2607145309448, 0, 0, 0);
	CreateDynamicObject(3666, -2236.1987304688, 2390.8532714844, 4.2607145309448, 0, 0, 0);
	CreateDynamicObject(3666, -2205.3918457031, 2359.5637207031, 4.1857147216797, 0, 0, 0);
	CreateDynamicObject(3666, -2205.3940429688, 2366.3747558594, 4.1857147216797, 0, 0, 0);
	CreateDynamicObject(3666, -2213.0268554688, 2366.3598632813, 4.1857147216797, 0, 0, 0);
	CreateDynamicObject(3666, -2213.0451660156, 2359.5473632813, 4.1857147216797, 0, 0, 0);
	CreateDynamicObject(10281, -2290.3327636719, 2340, 8.5420188903809, 0, 0, 181.99996948242);
	CreateDynamicObject(1692, -2285.0556640625, 2324.4265136719, 13.37389755249, 0, 0, 0);
	CreateDynamicObject(1692, -2284.947265625, 2332.7600097656, 13.37389755249, 0, 0, 0);
	CreateDynamicObject(3437, -2248.244140625, 2363.4909667969, 3.8949332237244, 0, 0, 286);
	CreateDynamicObject(3437, -2267.4794921875, 2367.0502929688, 5.5819530487061, 0, 0, 266);
	CreateDynamicObject(669, -2275.3386230469, 2375.5798339844, 4.9296875, 0, 0, 0);
	CreateDynamicObject(673, -2271.1242675781, 2372.8454589844, 4.9296875, 0, 0, 0);
	CreateDynamicObject(673, -2275.0085449219, 2371.1931152344, 4.9287433624268, 0, 0, 0);
	CreateDynamicObject(673, -2277.8247070313, 2379.9831542969, 4.9296875, 0, 0, 0);
	CreateDynamicObject(673, -2280.802734375, 2374.8969726563, 4.918607711792, 0, 0, 0);
	CreateDynamicObject(673, -2277.75, 2372.9926757813, 4.9296875, 0, 0, 0);
	CreateDynamicObject(703, -2294.5883789063, 2392.3349609375, 4.9296875, 0, 0, 0);
	bbaum = CreateDynamicObject(714, -2290.6105957031, 2385.2478027344, 4.7796869277954, 0, 0, 0);
	CreateDynamicObject(737, -2243.05859375, 2310.2124023438, 4.165472984314, 0, 0, 0);
	CreateDynamicObject(16061, -2555.8303222656, 2520.3483886719, 20.765625, 0, 0, 0);
	CreateDynamicObject(817, -2279.6364746094, 2379.7932128906, 5.372241973877, 0, 0, 0);
	CreateDynamicObject(818, -2282.6672363281, 2382.8510742188, 8.7203416824341, 0, 0, 0);
	CreateDynamicObject(821, -2285.8371582031, 2385.4562988281, 6.4218635559082, 0, 0, 0);
	CreateDynamicObject(869, -2269.3625488281, 2369.4174804688, 5.2660036087036, 0, 0, 0);
	CreateDynamicObject(869, -2273.5798339844, 2367.6879882813, 5.1369633674622, 0, 0, 0);
	CreateDynamicObject(870, -2270.7756347656, 2366.2875976563, 4.9432220458984, 0, 0, 0);
	CreateDynamicObject(870, -2272.7131347656, 2365.6437988281, 4.6262016296387, 0, 0, 0);
	CreateDynamicObject(870, -2269.3376464844, 2366.6938476563, 4.9489612579346, 0, 0, 0);
	CreateDynamicObject(871, -2272.5017089844, 2370.3935546875, 5.1613759994507, 0, 0, 0);
	CreateDynamicObject(871, -2270.3420410156, 2371.6948242188, 5.1976957321167, 0, 0, 0);
	CreateDynamicObject(874, -2542.9770507813, 2537.1225585938, 20.094552993774, 0, 0, 0);
	CreateDynamicObject(875, -2530.728515625, 2539.9877929688, 19.883123397827, 0, 0, 0);
	CreateDynamicObject(5706, -2230.5678710938, 2326.998046875, 0.23867484927177, 0, 0, 90);
	CreateDynamicObject(5706, -2224.3115234375, 2327.1149902344, 0.21366912126541, 0, 0, 269.99996948242);
	CreateDynamicObject(5716, -2438.7082519531, 2276.3754882813, 17.33966255188, 0, 0, 270);
	CreateDynamicObject(5706, -2445.8598632813, 2303.6135253906, 0.19336101412773, 0, 0, 270);
	CreateDynamicObject(2773, -2456.2729492188, 2296.8576660156, 4.5323829650879, 0, 0, 0);
	CreateDynamicObject(2773, -2456.1950683594, 2294.2290039063, 4.5375185012817, 0, 0, 0);
	CreateDynamicObject(2773, -2456.1315917969, 2291.6750488281, 4.5425071716309, 0, 0, 0);
	CreateDynamicObject(2773, -2456.3762207031, 2265.369140625, 4.5375967025757, 0, 0, 0);
	CreateDynamicObject(2773, -2456.3757324219, 2268.0014648438, 4.5376167297363, 0, 0, 0);
	CreateDynamicObject(2773, -2456.3662109375, 2270.6591796875, 4.5380058288574, 0, 0, 0);
	CreateDynamicObject(2773, -2456.3569335938, 2273.2175292969, 4.538384437561, 0, 0, 0);
	CreateDynamicObject(2773, -2456.1286621094, 2289.1206054688, 4.547700881958, 0, 0, 0);
	CreateDynamicObject(2773, -2456.1889648438, 2286.5341796875, 4.5452394485474, 0, 0, 0);
	CreateDynamicObject(2773, -2456.3498535156, 2275.947265625, 4.5386724472046, 0, 0, 0);
	CreateDynamicObject(3666, -2456.4084472656, 2311.1142578125, 14.64241027832, 0, 0, 0);
	CreateDynamicObject(3666, -2456.4143066406, 2298.4243164063, 14.712337493896, 0, 0, 0);
	CreateDynamicObject(3666, -2456.4345703125, 2263.9208984375, 14.653039932251, 0, 0, 0);
	CreateDynamicObject(3666, -2456.3569335938, 2251.2282714844, 14.64241027832, 0, 0, 0);
	CreateDynamicObject(2773, -2456.2338867188, 2284.0187988281, 4.5434055328369, 0, 0, 0);
	CreateDynamicObject(2773, -2456.3332519531, 2278.5036621094, 4.5393505096436, 0, 0, 0);
	CreateDynamicObject(2773, -2457.6147460938, 2283.0520019531, 4.5016031265259, 0, 0, 90);
	CreateDynamicObject(2773, -2457.7309570313, 2279.4636230469, 4.5016031265259, 0, 0, 88);
	CreateDynamicObject(6205, -2227.5366210938, 2316.8596191406, 12.033899307251, 0, 0, 0);
	CreateDynamicObject(3715, -2701.3588867188, 2372.802734375, 79.254447937012, 0, 0, 324);
	CreateDynamicObject(1215, -2246.2629394531, 2338.9787597656, 4.5355358123779, 0, 0, 0);
	CreateDynamicObject(1215, -2248.4262695313, 2338.9833984375, 4.5387058258057, 0, 0, 0);
	CreateDynamicObject(1215, -2248.5124511719, 2333.7673339844, 4.5388317108154, 0, 0, 0);
	CreateDynamicObject(1214, -2248.3896484375, 2330.2822265625, 3.974328994751, 0, 0, 0);
	CreateDynamicObject(1214, -2248.4260253906, 2327.1782226563, 3.9743814468384, 0, 0, 0);
	CreateDynamicObject(1291, -2243.7204589844, 2334.5798339844, 4.4818873405457, 0, 0, 272);
	CreateDynamicObject(3877, -2242.9702148438, 2328.439453125, 12.289733886719, 0, 0, 0);
	CreateDynamicObject(3877, -2242.9985351563, 2316.6647949219, 12.289733886719, 0, 0, 0);
	CreateDynamicObject(3920, -2243.2204589844, 2320.7822265625, 9.5992050170898, 0, 359.25, 90);
	CreateDynamicObject(640, -2243.0378417969, 2325.2231445313, 11.321026802063, 0, 0, 0);
	CreateDynamicObject(640, -2243.0483398438, 2319.7932128906, 11.321026802063, 0, 0, 0);
	CreateDynamicObject(949, -2243.6286621094, 2328.9907226563, 4.6954426765442, 0, 0, 0);
	CreateDynamicObject(1361, -2243.2248535156, 2311.8332519531, 4.8025016784668, 0, 0, 0);
	CreateDynamicObject(1364, -2242.9077148438, 2315.130859375, 4.8432803153992, 0, 0, 269.99996948242);
	CreateDynamicObject(1360, -2243.107421875, 2327.6123046875, 4.8311796188354, 0, 0, 0);
	CreateDynamicObject(1360, -2243.1140136719, 2324.8310546875, 4.8311796188354, 0, 0, 0);
	CreateDynamicObject(1361, -2241.1108398438, 2324.1511230469, 4.9460601806641, 0, 0, 0);
	CreateDynamicObject(1361, -2241.1213378906, 2316.8037109375, 4.9434871673584, 0, 0, 0);
	CreateDynamicObject(2194, -2242.1943359375, 2317.1794433594, 4.5531783103943, 0, 0, 0);
	CreateDynamicObject(1274, -2294.0642089844, 2281.2604980469, 8.5044364929199, 0, 0, 0);
	CreateDynamicObject(1274, -2294.8342285156, 2281.2648925781, 8.5023756027222, 0, 0, 0);
	CreateDynamicObject(1274, -2293.2719726563, 2281.2646484375, 8.525520324707, 0, 0, 0);
	CreateDynamicObject(2064, -2248.8376464844, 2350.029296875, 4.9230885505676, 0, 0, 292);
	CreateDynamicObject(2061, -2249.6296386719, 2350.0236816406, 4.6858348846436, 0, 0, 0);
	CreateDynamicObject(2061, -2249.6828613281, 2350.2346191406, 4.6708645820618, 0, 0, 0);
	CreateDynamicObject(2061, -2249.6791992188, 2350.380859375, 4.6372861862183, 0, 0, 0);
	CreateDynamicObject(1808, -2243.5095214844, 2312.763671875, 4.0591588020325, 0, 0, 269.99996948242);
	CreateDynamicObject(16605, -2444.3464355469, 2313.6364746094, 3.984375, 0, 0, 179.99993896484);
	CreateDynamicObject(1232, -2456.0766601563, 2320.9116210938, 6.6210179328918, 0, 0, 0);
	CreateDynamicObject(1232, -2427.6486816406, 2322.9721679688, 6.6287693977356, 0, 0, 0);
	CreateDynamicObject(1232, -2427.4377441406, 2319.2023925781, 6.6408410072327, 0, 0, 0);
	CreateDynamicObject(1232, -2427.6303710938, 2325.9108886719, 6.6194500923157, 0, 0, 0);
	CreateDynamicObject(1319, -2430.5061035156, 2330.3891601563, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2432.9448242188, 2329.8779296875, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2435.7741699219, 2329.3623046875, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2438.7788085938, 2328.78515625, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2441.505859375, 2328.2404785156, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2444.3403320313, 2327.7126464844, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2447.3217773438, 2327.1220703125, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2427.921875, 2330.9250488281, 4.53125, 0, 0, 0);
	CreateDynamicObject(1214, -2410.6818847656, 2322.5908203125, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2411.3103027344, 2326.3771972656, 3.9832649230957, 0, 0, 0);
	CreateDynamicObject(1214, -2410.9538574219, 2324.357421875, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2411.9816894531, 2329.296875, 3.9797019958496, 0, 0, 0);
	CreateDynamicObject(1214, -2411.708984375, 2327.8520507813, 3.9866638183594, 0, 0, 0);
	CreateDynamicObject(17042, -2456.1804199219, 2319.6684570313, 9.2075939178467, 0, 0, 304);
	CreateDynamicObject(17042, -2412.0065917969, 2329.2966308594, 4.6771011352539, 0, 0, 32);
	//Ballon
	ballonx = CreateObject(19335, -2089.66, 2314.26, 24.90, 0.00, 0.00, 203.52); // 365.6774, 2537.0381, 15.7855
	//Feuer an Ballon
	Fire = CreateObject(18692, 0,0,0,   0.00, 0.00, 0.00);
	Fire1 = CreateObject(18692, 0,0,0,   0.00, 0.00, 0.00);
	AttachObjectToObject(Fire, ballonx, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1);
    AttachObjectToObject(Fire1, ballonx, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 1);
	//BSN Bayside
	CreateObject(6257, -2471.41796875, 2230.345703125, 11.093607902527, 0, 0, 90);
	CreateDynamicObject(1522, -2474.4411621094, 2239.2309570313, 3.7877719402313, 0, 0, 0);
	CreateDynamicObject(1319, -2461.1579589844, 2250.9660644531, 4.4609375, 0, 0, 0);
	CreateDynamicObject(1319, -2460.7619628906, 2249.0974121094, 4.4686412811279, 0, 0, 0);
	CreateDynamicObject(1319, -2459.6628417969, 2247.5502929688, 4.4609375, 0, 0, 0);
	CreateDynamicObject(1319, -2458.0788574219, 2246.462890625, 4.4609375, 0, 0, 0);
	CreateDynamicObject(1319, -2456.2048339844, 2246.05859375, 4.4609375, 0, 0, 0);
	CreateDynamicObject(1319, -2439.2836914063, 2245.9672851563, 4.5048651695251, 0, 0, 0);
	CreateDynamicObject(1315, -2476.1650390625, 2263.0153808594, 7.2534551620483, 0, 0, 90);
	CreateDynamicObject(1226, -2440.1955566406, 2241.4038085938, 7.7181701660156, 0, 0, 0);
	CreateDynamicObject(1226, -2440.2106933594, 2235.1982421875, 7.7181701660156, 0, 0, 0);
	CreateDynamicObject(1226, -2440.2270507813, 2229.1857910156, 7.7181701660156, 0, 0, 0);
	CreateDynamicObject(1226, -2440.2177734375, 2222.9838867188, 7.7181701660156, 0, 0, 0);
	CreateDynamicObject(5821, -2475.2067871094, 2218.5322265625, 5.9766812324524, 0, 0, 88);
	CreateDynamicObject(984, -2445.73828125, 2245.986328125, 4.550742149353, 0, 0, 269.99996948242);
	CreateDynamicObject(983, -2452.8840332031, 2245.9841308594, 4.597617149353, 0, 0, 270);
	CreateDynamicObject(982, -2439.2509765625, 2233.1447753906, 4.667929649353, 0, 0, 0);
	CreateDynamicObject(983, -2442.4523925781, 2220.20703125, 4.667929649353, 0, 0, 272);
	CreateDynamicObject(1214, -2463.1730957031, 2221.2575683594, 3.84375, 0, 0, 0);
	CreateDynamicObject(1214, -2462.7224121094, 2219.0234375, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2462.0266113281, 2216.8935546875, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2460.2844238281, 2215.01171875, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2458.2873535156, 2214.8149414063, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2456.408203125, 2215.7990722656, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2454.7985839844, 2216.9287109375, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2453.2529296875, 2218.0974121094, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2451.841796875, 2219.1982421875, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2450.6860351563, 2220.8676757813, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2448.2707519531, 2220.4345703125, 3.984375, 0, 0, 0);
	CreateDynamicObject(1214, -2445.7275390625, 2220.1184082031, 3.984375, 0, 0, 0);
	CreateDynamicObject(1215, -2476.4436035156, 2250.6635742188, 5.548698425293, 0, 0, 0);
	CreateDynamicObject(1215, -2480.6860351563, 2250.6027832031, 5.548698425293, 0, 0, 0);
	CreateDynamicObject(1215, -2484.1030273438, 2250.5886230469, 5.5410346984863, 0, 0, 0);
	CreateDynamicObject(1215, -2487.1733398438, 2250.5537109375, 5.548698425293, 0, 0, 0);
	CreateDynamicObject(1215, -2490.2810058594, 2250.7724609375, 5.548698425293, 0, 0, 0);
	CreateDynamicObject(3578, -2476.0451660156, 2261.130859375, 3.163969039917, 0, 0, 2);
	CreateDynamicObject(3578, -2476.0480957031, 2258.7712402344, 3.163969039917, 0, 0, 0);
	CreateDynamicObject(3578, -2476.0520019531, 2256.8662109375, 3.1639699935913, 0, 0, 0);
	CreateDynamicObject(3578, -2476.0146484375, 2263.353515625, 3.1389698982239, 0, 0, 0);
	CreateDynamicObject(3578, -2476.0354003906, 2265.0727539063, 3.1639709472656, 0, 0, 0);
	CreateDynamicObject(1226, -2455.9111328125, 2245.1274414063, 7.6468782424927, 0, 0, 92);
	CreateDynamicObject(1226, -2450.0187988281, 2245.0197753906, 7.6414685249329, 0, 0, 90);
	CreateDynamicObject(1226, -2443.0151367188, 2245.0129394531, 7.7884826660156, 0, 0, 88);
	CreateDynamicObject(2942, -2477.4274902344, 2239.6962890625, 4.4855952262878, 0, 0, 180);
	CreateDynamicObject(2641, -2478.4748535156, 2236.9790039063, 5.6206169128418, 0, 0, 180);
	CreateDynamicObject(2642, -2479.7189941406, 2236.9296875, 5.3958487510681, 0, 0, 180);
	CreateDynamicObject(1445, -2475.4243164063, 2240.1721191406, 4.4497804641724, 0, 0, 0);
	CreateDynamicObject(2430, -2458.9692382813, 2226.1166992188, 6.1687502861023, 18, 0, 182);
	CreateDynamicObject(2456, -2456.8522949219, 2235.2348632813, 3.84375, 0, 0, 18);
	CreateDynamicObject(2714, -2475.3774414063, 2239.3601074219, 6.5044760704041, 0, 0, 180);
	CreateDynamicObject(984, -2473.9099121094, 2235.4458007813, 10.45685005188, 0, 0, 268);
	CreateDynamicObject(983, -2465.3471679688, 2235.1264648438, 10.511228561401, 0, 0, 268);
	CreateDynamicObject(984, -2462.2006835938, 2228.6130371094, 10.45685005188, 0, 0, 0);
	CreateDynamicObject(983, -2462.1733398438, 2223.4592285156, 10.50372505188, 0, 0, 0);
	CreateDynamicObject(984, -2486.3215332031, 2226.7297363281, 10.45685005188, 0, 0, 0);
	CreateDynamicObject(983, -2483.0876464844, 2229.9020996094, 10.50372505188, 0, 0, 269.99996948242);
	CreateDynamicObject(983, -2465.4399414063, 2220.2622070313, 10.511228561401, 0, 0, 269.99996948242);
	CreateDynamicObject(983, -2467.5451660156, 2220.2526855469, 10.511228561401, 0, 0, 269.99996948242);
	CreateDynamicObject(983, -2476.677734375, 2220.2561035156, 10.511228561401, 0, 0, 90);
	CreateDynamicObject(983, -2483.1020507813, 2220.263671875, 10.50372505188, 0, 0, 269.99996948242);
	CreateDynamicObject(643, -2484.3791503906, 2222.2678222656, 10.290641784668, 0, 0, 0);
	CreateDynamicObject(643, -2480.3391113281, 2222.3342285156, 10.290641784668, 0, 0, 0);
	CreateDynamicObject(16151, -2480.62109375, 2228.7565917969, 10.152669906616, 0, 0, 89.999938964844);
	CreateDynamicObject(1486, -2474.7231445313, 2230.4899902344, 9.9651193618774, 0, 0, 0);
	CreateDynamicObject(12842, -2464.7836914063, 2231.3664550781, 10.274842262268, 0, 0, 0);
	CreateDynamicObject(12842, -2471.48828125, 2231.4230957031, 10.274842262268, 0, 0, 0);
	CreateDynamicObject(11665, -2477.1372070313, 2233.5036621094, 10.518834114075, 0, 0, 178);
	CreateDynamicObject(643, -2469.5368652344, 2222.4016113281, 10.298145294189, 0, 0, 0);
	CreateDynamicObject(643, -2465.490234375, 2222.4916992188, 10.298145294189, 0, 0, 0);
	CreateDynamicObject(3461, -2462.09375, 2224.9221191406, 11.395181655884, 0, 0, 0);
	CreateDynamicObject(3461, -2462.0520019531, 2227.6879882813, 11.395181655884, 0, 0, 0);
	CreateDynamicObject(3461, -2462.0446777344, 2230.5141601563, 11.395181655884, 0, 0, 0);
	CreateDynamicObject(3461, -2461.9904785156, 2233.51953125, 11.395181655884, 0, 0, 0);
	CreateDynamicObject(3461, -2488.1655273438, 2231.55859375, 11.395181655884, 0, 0, 0);
	CreateDynamicObject(3461, -2486.2216796875, 2230.0622558594, 11.395181655884, 0, 0, 0);
	CreateDynamicObject(3461, -2478.4379882813, 2235.6701660156, 11.395181655884, 0, 0, 0);
	CreateDynamicObject(3461, -2473.9243164063, 2235.5297851563, 11.395181655884, 0, 0, 0);
	CreateDynamicObject(3461, -2469.033203125, 2235.6325683594, 11.402685165405, 0, 0, 0);
	CreateDynamicObject(16613, -2154.078125, 2655.0866699219, 150.32244873047, 0, 0, 190);
	CreateDynamicObject(7347, -2127.3605957031, 2490.990234375, 6.1621351242065, 0, 0, 132);
	CreateDynamicObject(979, -2457.490234375, 2229.271484375, 4.6839699745178, 0, 0, 90);
	CreateDynamicObject(978, -2457.5817871094, 2229.2805175781, 4.6839699745178, 0, 0, 269.99996948242);
	CreateDynamicObject(934, -2486.3928222656, 2230.0297851563, 5.1720294952393, 0, 0, 0);
	CreateDynamicObject(958, -2485.8764648438, 2226.2106933594, 4.7205882072449, 0, 0, 90);
	CreateDynamicObject(1353, -2486.2534179688, 2224.1691894531, 4.514283657074, 0, 0, 0);
	CreateDynamicObject(1623, -2485.3889160156, 2222.4528808594, 5.8333187103271, 0, 0, 0);
	CreateDynamicObject(1687, -2489.1086425781, 2233.2204589844, 4.7957701683044, 0, 0, 0);
	CreateDynamicObject(1691, -2482.5485839844, 2232.8000488281, 13.244695663452, 0, 0, 0);
	CreateDynamicObject(1691, -2479.9985351563, 2232.8337402344, 13.244695663452, 0, 0, 0);
	CreateDynamicObject(1372, -2488.0700683594, 2234.4348144531, 3.984375, 0, 0, 179.99993896484);
	CreateDynamicObject(1365, -2490.4787597656, 2235.6833496094, 4.6022853851318, 0, 358, 269.99996948242);
	CreateDynamicObject(1359, -2463.1833496094, 2226.3298339844, 10.518727302551, 0, 0, 0);
	CreateDynamicObject(1359, -2478.2727050781, 2230.3461914063, 10.526230812073, 0, 0, 0);
	CreateDynamicObject(1359, -2477.7521972656, 2220.9216308594, 10.518727302551, 0, 0, 0);
	CreateDynamicObject(1359, -2485.7917480469, 2225.6684570313, 10.518727302551, 0, 0, 0);
	CreateDynamicObject(1359, -2491.4230957031, 2250.0444335938, 4.6829323768616, 0, 0, 0);
	CreateDynamicObject(1359, -2445.775390625, 2219.3315429688, 4.6829323768616, 0, 0, 0);
	CreateDynamicObject(1265, -2487.5861816406, 2235.2924804688, 4.4534182548523, 0, 0, 0);
	CreateDynamicObject(1265, -2488.5866699219, 2235.3569335938, 4.4534182548523, 0, 0, 0);
	CreateDynamicObject(2672, -2463.4826660156, 2224.3842773438, 10.099632263184, 0, 0, 0);
	CreateDynamicObject(2673, -2477.3596191406, 2231.291015625, 9.9155015945435, 0, 0, 0);
	CreateDynamicObject(2675, -2471.5495605469, 2229.8869628906, 9.8919353485107, 0, 0, 0);
	CreateDynamicObject(2676, -2483.39453125, 2223.9846191406, 9.9234943389893, 0, 0, 0);
	CreateDynamicObject(2677, -2490.8486328125, 2248.8056640625, 4.2563924789429, 0, 0, 0);
	CreateDynamicObject(1319, -2471.2858886719, 2251.0307617188, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2471.677734375, 2252.8530273438, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2471.7277832031, 2249.1044921875, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2472.751953125, 2247.5329589844, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2474.3168945313, 2246.4904785156, 4.53125, 0, 0, 0);
	CreateDynamicObject(1319, -2476.2084960938, 2246.0705566406, 4.53125, 0, 0, 0);
	//Zivispawn
	CreateDynamicObject(2600, -2592.0017089844, 2235.3403320313, 4.9050850868225, 0, 0, 0);
	CreateDynamicObject(2600, -2609.732421875, 2235.2729492188, 4.7544751167297, 0, 0, 28);
	CreateDynamicObject(1231, -2629.3391113281, 2247.1672363281, 11.03547668457, 0, 0, 0);
	CreateDynamicObject(1231, -2624.1616210938, 2247.1745605469, 10.95329284668, 0, 0, 0);
	CreateDynamicObject(1231, -2620.4309082031, 2245.3493652344, 10.992425918579, 0, 0, 0);
	CreateDynamicObject(1231, -2611.1345214844, 2245.3193359375, 11.032232284546, 0, 0, 0);
	CreateDynamicObject(1231, -2606.1127929688, 2247.1784667969, 11.029951095581, 0, 0, 0);
	CreateDynamicObject(1231, -2592.5588378906, 2248.7033691406, 6.7147679328918, 0, 0, 0);
	CreateDynamicObject(1231, -2598.6389160156, 2242.5581054688, 6.7147679328918, 0, 0, 0);
	CreateDynamicObject(1211, -2619.3239746094, 2278.8310546875, 7.6170554161072, 0, 0, 0);
	CreateDynamicObject(1319, -2619.2065429688, 2276.0632324219, 7.828125, 0, 0, 0);
	CreateDynamicObject(1319, -2619.6369628906, 2274.150390625, 7.828125, 0, 0, 0);
	CreateDynamicObject(1319, -2620.751953125, 2272.5510253906, 7.828125, 0, 0, 0);
	CreateDynamicObject(1319, -2622.2917480469, 2271.5083007813, 7.8205890655518, 0, 0, 0);
	CreateDynamicObject(1319, -2624.1105957031, 2271.1025390625, 7.8205890655518, 0, 0, 0);
	CreateDynamicObject(1319, -2610.6384277344, 2274.1357421875, 7.90625, 0, 0, 0);
	CreateDynamicObject(1319, -2609.544921875, 2272.5786132813, 7.90625, 0, 0, 0);
	CreateDynamicObject(1319, -2611.0114746094, 2275.9606933594, 7.90625, 0, 0, 0);
	CreateDynamicObject(1319, -2607.9831542969, 2271.4741210938, 7.90625, 0, 0, 0);
	CreateDynamicObject(1214, -2615.1359863281, 2275.9870605469, 7.2006883621216, 0, 0, 0);
	CreateDynamicObject(1214, -2617.3510742188, 2276.0075683594, 7.165415763855, 0, 0, 0);
	CreateDynamicObject(1214, -2612.9506835938, 2276.0075683594, 7.2074775695801, 0, 0, 0);
	CreateDynamicObject(1363, -2601.1943359375, 2274.9167480469, 8.1957378387451, 0, 0, 0);
	CreateDynamicObject(1436, -2604.4306640625, 2278.7958984375, 8.789587020874, 0, 0, 0);
	CreateDynamicObject(9833, -2629.1677246094, 2197.8979492188, 18.115734100342, 0, 72, 0);
	CreateDynamicObject(1251, -2615.0434570313, 2276.0886230469, 7.2262487411499, 0, 0, 90);
	CreateDynamicObject(982, -2596.9423828125, 2269.0708007813, 7.6647791862488, 0, 0, 0);
	CreateDynamicObject(617, -2635.2021484375, 2248.1552734375, 11.046949386597, 0, 0, 0);
	CreateDynamicObject(617, -2628.2028808594, 2237.5056152344, 11.656500816345, 0, 0, 0);
	CreateDynamicObject(618, -2639.7421875, 2259.4484863281, 12.974159240723, 0, 0, 0);
	CreateDynamicObject(615, -2635.7763671875, 2255.2497558594, 11.603353500366, 0, 0, 0);
	CreateDynamicObject(616, -2630.9377441406, 2242.9318847656, 11.425033569336, 0, 0, 2);
	CreateDynamicObject(656, -2640.2482910156, 2266.7131347656, 11.888631820679, 0, 0, 0);
	CreateDynamicObject(698, -2638.1203613281, 2262.4426269531, 12.553733825684, 0, 0, 0);
	CreateDynamicObject(700, -2634.8454589844, 2277.2622070313, 7.3407554626465, 0, 0, 0);
	CreateDynamicObject(11489, -2630.8327636719, 2272.0307617188, 7.2170543670654, 0, 0, 58);
	CreateDynamicObject(3935, -2629.8005371094, 2268.6257324219, 8.8882598876953, 0, 0, 233.99996948242);
	CreateDynamicObject(3935, -2626.7634277344, 2272.3793945313, 8.9765129089355, 0, 0, 229.99996948242);
	CreateDynamicObject(16442, -2638.1938476563, 2258.8022460938, 14.61496925354, 0, 0, 108);
	CreateDynamicObject(1319, -2624.1455078125, 2272.4226074219, 7.8244009017944, 0, 0, 0);
	CreateDynamicObject(1319, -2624.1550292969, 2274.0185546875, 7.8244633674622, 0, 0, 0);
	CreateDynamicObject(1319, -2623.7387695313, 2275.6875, 7.828125, 0, 0, 0);
	CreateDynamicObject(1290, -2630.3369140625, 2271.7109375, 5.3654756546021, 0, 0, 56);
	CreateDynamicObject(1214, -2631.0798339844, 2264.6049804688, 7.2005767822266, 0, 0, 0);
	CreateDynamicObject(1214, -2629.5173339844, 2265.4311523438, 7.1837482452393, 0, 0, 0);
	CreateDynamicObject(1214, -2628.0432128906, 2266.5087890625, 7.167573928833, 0, 0, 0);
	CreateDynamicObject(1214, -2626.8942871094, 2267.6760253906, 7.15354347229, 0, 0, 0);
	CreateDynamicObject(1214, -2625.8630371094, 2268.9475097656, 7.1399440765381, 0, 0, 0);
	CreateDynamicObject(1214, -2624.9692382813, 2270.1896972656, 7.132303237915, 0, 0, 0);
	CreateDynamicObject(869, -2629.0895996094, 2270.0610351563, 7.6173405647278, 0, 0, 0);
	CreateDynamicObject(869, -2630.1691894531, 2267.4020996094, 7.6380209922791, 0, 0, 0);
	CreateDynamicObject(869, -2627.1762695313, 2271.0986328125, 7.7551684379578, 0, 0, 0);
	CreateDynamicObject(869, -2626.3767089844, 2274.4401855469, 7.8670063018799, 0, 0, 0);
	CreateDynamicObject(6296, -2630.4243164063, 2255.95703125, 9.2206687927246, 0, 0, 0);
	CreateDynamicObject(3660, -2615.1545410156, 2248.2314453125, 9.6408224105835, 0, 0, 0);
	CreateDynamicObject(1364, -2612.8813476563, 2257.1560058594, 7.9950590133667, 0, 0, 0);
	CreateDynamicObject(1364, -2615.8818359375, 2259.2177734375, 7.9756321907043, 0, 0, 290);
	CreateDynamicObject(1364, -2614.87890625, 2262.6079101563, 7.9950590133667, 0, 0, 214);
	CreateDynamicObject(1364, -2609.9392089844, 2259.1965332031, 7.9950590133667, 0, 0, 74);
	CreateDynamicObject(1364, -2611.248046875, 2262.5751953125, 7.9950590133667, 0, 0, 146);
	CreateDynamicObject(6965, -2613.0092773438, 2260.3498535156, 9.6984329223633, 0, 0, 0);
	CreateDynamicObject(3472, -2612.9306640625, 2260.3757324219, 2.0153241157532, 0, 0, 0);
	CreateDynamicObject(870, -2614.2746582031, 2260.9055175781, 7.6301927566528, 0, 0, 0);
	CreateDynamicObject(870, -2613.4838867188, 2258.9619140625, 7.4530591964722, 0, 0, 0);
	CreateDynamicObject(870, -2612.8522949219, 2261.8303222656, 7.4530591964722, 0, 0, 0);
	CreateDynamicObject(870, -2611.6892089844, 2259.5847167969, 7.4530591964722, 0, 0, 0);
	CreateDynamicObject(870, -2611.5788574219, 2260.2707519531, 7.54723072052, 0, 0, 0);
	CreateDynamicObject(870, -2613.69921875, 2259.3283691406, 7.8536748886108, 0, 0, 0);
	CreateDynamicObject(3660, -2595.982421875, 2268.0795898438, 9.749454498291, 0, 0, 269.99996948242);
	CreateDynamicObject(1549, -2605.4450683594, 2275.0466308594, 7.359375, 0, 0, 0);
	CreateDynamicObject(1549, -2625.2561035156, 2252.1799316406, 7.1431589126587, 0, 0, 0);
	CreateDynamicObject(1549, -2625.2985839844, 2259.7875976563, 7.1437931060791, 0, 0, 0);
	CreateDynamicObject(1359, -2604.3063964844, 2248.3754882813, 7.9015197753906, 0, 0, 0);
	CreateDynamicObject(1549, -2610.4809570313, 2256.8642578125, 7.2109375, 0, 0, 0);
	CreateDynamicObject(1549, -2615.1789550781, 2256.9880371094, 7.1957907676697, 0, 0, 336);
	CreateDynamicObject(1549, -2616.8049316406, 2261.3010253906, 7.1954708099365, 0, 0, 70);
	CreateDynamicObject(1549, -2613.0581054688, 2263.9526367188, 7.2109375, 0, 0, 0);
	CreateDynamicObject(1549, -2609.2644042969, 2261.4018554688, 7.2109375, 0, 0, 298);
	CreateDynamicObject(1231, -2603.0539550781, 2279.6459960938, 10.089767456055, 0, 0, 0);
	//Objekte zählen
	printf("Es wurden erfolgreich [%d] Objekte geladen!",CountDynamicObjects());
	//Ein und Ausgang Erstellung
	for(new i=0; i<sizeof(pckCoords); i++)
	{
		IDsafePickups[i] = CreatePickup(19198, 1, pckCoords[i][posxx], pckCoords[i][posyy], pckCoords[i][poszz],0);
		IDsafeLabels[i] = CreateDynamic3DTextLabel(pckCoords[i][labeltext],pckCoords[i][labelcolor],pckCoords[i][posxx],pckCoords[i][posyy],(pckCoords[i][poszz]+ 0.7),10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	//Feuerwerk
 	for(new id = 0; id < MAX_FIREWORKS; id++)
  	{
   		Firework[id][fwid]   = INVALID_OBJECT_ID;
     	Firework[id][fwX]    = 0.000000;
      	Firework[id][fwY]    = 0.000000;
       	Firework[id][fwZ]    = 0.000000;
        Firework[id][fwA]    = 0.000000;
        Firework[id][fwLoop] = 0;
        FireworkObj[id][Object0] = INVALID_OBJECT_ID;
        FireworkObj[id][Object1] = INVALID_OBJECT_ID;
        FireworkObj[id][Object2] = INVALID_OBJECT_ID;
        FireworkObj[id][Object3] = INVALID_OBJECT_ID;
        FireworkObj[id][Object4] = INVALID_OBJECT_ID;
        FireworkObj[id][Object5] = INVALID_OBJECT_ID;
        FireworkObj[id][Object6] = INVALID_OBJECT_ID;
  	}
   	FireworkCount = 0;
	return 1;
}

public OnGameModeExit()
{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			SaveSpieler(i);
		}
		//Gangfight
		Fight_Close();
		//Pferderennen
  		TextDrawDestroy(BG2);
	    TextDrawDestroy(BG1);
	    TextDrawDestroy(Start2);
	    TextDrawDestroy(Finish2);
	    TextDrawDestroy(Horse1);
	    TextDrawDestroy(Horse2);
	    TextDrawDestroy(Horse3);
	    TextDrawDestroy(Horse4);
	    TextDrawDestroy(HorseNum1);
	    TextDrawDestroy(HorseNum2);
	    TextDrawDestroy(HorseNum3);
	    TextDrawDestroy(HorseNum4);
	    TextDrawDestroy(Start);
	    TextDrawDestroy(Finish);
	    //No dm zone
	    TextDrawDestroy(NoDMTextdraw);
	    //Fraktionsautohaus
	    STOP_FRAC();
		//Baum löschen
		DestroyObject(baum1);
		DestroyObject(baum2);
		DestroyObject(baum3);
		//Slotmachine
		for(new i = 0; i < sizeof(BanditLocs); i++)
		{
			Delete3DTextLabel(GambleLabel[i]);
		}
		//Bankautomaten
		for(new i = 0; i < sizeof(Bankautomaten); i++)
		{
			Delete3DTextLabel(Bankautomatenl[i]);
		}
		//Poker
		for(new i = 0; i < sizeof(PokerPositions); i++)
		{
			Delete3DTextLabel(PokerLabel[i]);
		}
		TextDrawDestroy(Digit1[0]);
		TextDrawDestroy(Digit2[0]);
		TextDrawDestroy(Digit3[0]);

		TextDrawDestroy(Digit1[1]);
		TextDrawDestroy(Digit2[1]);
		TextDrawDestroy(Digit3[1]);

		TextDrawDestroy(Digit1[2]);
		TextDrawDestroy(Digit2[2]);
		TextDrawDestroy(Digit3[2]);

		TextDrawDestroy(Digit1[3]);
		TextDrawDestroy(Digit2[3]);
		TextDrawDestroy(Digit3[3]);

		TextDrawDestroy(Digit1[4]);
		TextDrawDestroy(Digit2[4]);
		TextDrawDestroy(Digit3[4]);

		TextDrawDestroy(Digit1[5]);
		TextDrawDestroy(Digit2[5]);
		TextDrawDestroy(Digit3[5]);

		TextDrawDestroy(Box);
		TextDrawDestroy(ReadyText);
		TextDrawDestroy(VerText);

  		//Alle Nagelbänder löschen
    	DeleteAllStrip();

	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			TextDrawDestroy(BetText[i]);
		}

		//Feuerwerk
	 	for(new id = 0; id < MAX_FIREWORKS; id++)
	  	{
	   		Firework[id][fwid]   = INVALID_OBJECT_ID;
	     	Firework[id][fwX]    = 0.000000;
	      	Firework[id][fwY]    = 0.000000;
	       	Firework[id][fwZ]    = 0.000000;
	        Firework[id][fwA]    = 0.000000;
	        Firework[id][fwLoop] = 0;
	        FireworkObj[id][Object0] = INVALID_OBJECT_ID;
	        FireworkObj[id][Object1] = INVALID_OBJECT_ID;
	        FireworkObj[id][Object2] = INVALID_OBJECT_ID;
	        FireworkObj[id][Object3] = INVALID_OBJECT_ID;
	        FireworkObj[id][Object4] = INVALID_OBJECT_ID;
	        FireworkObj[id][Object5] = INVALID_OBJECT_ID;
	        FireworkObj[id][Object6] = INVALID_OBJECT_ID;
	  	}
	   	FireworkCount = 0;

		return 1;
}



public OnPlayerRequestClass(playerid, classid)
{
	//Überprüfung auf NPCs
	if(IsPlayerNPC(playerid)) return 1;
	//Bitte Warten
	ClearChat(playerid);
	SetPlayerVirtualWorld(playerid,1+playerid);
	//Accountabfrage
	if(AccountExists[playerid] == 1)
	{
	    //Startbildschirm setzen
	    SetStartbildschirm(playerid);
		//Musik abspielen
		PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/startsound.mp3");
		ClearChat(playerid);
		SendClientMessage(playerid,Weiß,"Herzlich Willkommen auf dem {FF9600}Bayside-Roleplay Server!");
		SendClientMessage(playerid,Weiß,"Besuch auch unser Forum auf {FF9600}www.bayside-roleplay.de.");
		SendClientMessage(playerid,Weiß,"Dieser Gamemode wurde von {FF9600}Nemesus.de entwickelt.");
		SendClientMessage(playerid,Weiß,"");
		ShowPlayerDialog(playerid,LOGIN,DIALOG_STYLE_PASSWORD,"Login","{FEFEFE}Dein {FF9600}Account {FEFEFE}wurde in unserer Datenbank gefunden, bitte gebe nun dein Passwort ein und logge dich somit ein.","Login","");
		return 1;
	}
	else
	{
 		//Startbildschirm setzen
	    SetStartbildschirm(playerid);
		//Musik abspielen
		PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/startsound.mp3");
		ClearChat(playerid);
		SendClientMessage(playerid,Weiß,"Herzlich Willkommen auf dem {FF9600}Bayside-Roleplay Server!");
		SendClientMessage(playerid,Weiß,"Besuch auch unser Forum auf {FF9600}www.bayside-roleplay.de.");
		SendClientMessage(playerid,Weiß,"Dieser Gamemode wurde von {FF9600}Nemesus.de entwickelt.");
		SendClientMessage(playerid,Weiß,"");
		ShowPlayerDialog(playerid, ERSTELLUNG, DIALOG_STYLE_MSGBOX, "Authentifizierung", "{FFFFFF}Herzlich Willkommen auf dem {FF9600}Bayside-Roleplay Server.{FFFFFF}\num auf diesem Server spielen zu können benötigst du einen Account.\nMöchtest du einen erstellen?", "Ja","");
		return 1;
	}
}

public OnPlayerConnect(playerid)
{
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128];
	//Überprüfung auf NPCs
	if(IsPlayerNPC(playerid)) return 1;
	//Pokertextdraw
 	PP_Info[playerid][LastBackGround] = 3;
  	Start3[playerid] = PlayerText:INVALID_TEXT_DRAW;
	//Geld und Speedotextdraw laden
	LoadSpeedoSystem(playerid);
	//Interviews
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999;
	//Detektiv
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; UsedFind[playerid] = 0;
	//Anti Bhop
	PlayerPressedJump[playerid] = 0;
	//Strafzettel
	TicketOffer[playerid] = 0; TicketMoney[playerid] = 0;
	//Sanitäter
	HealOffer[playerid] = 999; HealPrice[playerid] = 999;
	//Cuffed
	SetPVarInt(playerid,"Cuffed",0);
	//DJ Musik
	SetPVarInt(playerid,"ListenToDJ",0);
	//Sonnenbrille
	SetPVarInt(playerid,"Angezogen",0);
	//Einweisung
	InEinweisung[playerid] = 0;DeinEinweisung[playerid] = 0;
	//Autohaus
	InAutoHaus[playerid] = 0;
	//Admin Firepunch
	S[playerid] = -1;
	Fires[playerid] = 0;
	//Paintball
	PlayerPaintballing[playerid] = 0; PlayerPaintballKills[playerid] = 0; PaintballWinner = 999;
	//Mautstelle
	mautstelle[playerid] = 0;
	//BigEars
	BigEar[playerid] = 0;
	//Supportsystem
	DeinSupport[playerid] = 0;
	//Slotmachine
	Gambling[playerid] = G_STATE_NOT_GAMBLING;
	SlotTimer[playerid] = -1;
	//Leave Join Nachrichten
	ConnectMessage[playerid] = 1;
	//Variabelen Resetzen
	ResetSpieler(playerid);
	//Airbreake Variabele
	SetPVarInt(playerid,"Airbrake", 0);
	//AntiFakekill
	XDeaths[playerid] = 0;
	LastDeath[playerid] = 0;
	//Handysystem
	Mobile[playerid] = 255;
	//24/7 Laden
	StoreRobed[playerid] = 0;
	Robber[playerid] = 0;
	//Wohnwagen
	Injourney[playerid] = 0;
	//Farmer
	FarmerCP[playerid] = 0;
	//Feuerwehr
	DeinFW[playerid] = 0;
	//WhatzzApp
	DeinChat[playerid] = 0;
	//Sanitäter
	DeinS[playerid] = 0;
	//Polizei
	DeinP[playerid] = 0;
	//Drogenhändler
	DrogenId[playerid] = 0; DrogenTr[playerid] = 0; DrogenPr[playerid] = 0;
	//Mechatroniker
	DeinM[playerid] = 0;
	//Waffenkaufen
	WaffenAngebot[playerid] = 0; Waffe[playerid] = 0; WaffenPreis[playerid] = 0;
	//Matsverkaufen
	MatsId[playerid] = 0; MatsTr[playerid] = 0; MatsPr[playerid] = 0;
	//Autoverkaufen
	FahrId[playerid] = 0; FahrTr[playerid] = 0; FahrPr[playerid] = 0;
	//GangInvite
	InviteId[playerid] = 0; InviteTr[playerid] = 0; InvitePr[playerid] = 0;
	//Wohnwagenverkaufen
	WohnId[playerid] = 0; WohnTr[playerid] = 0; WohnPr[playerid] = 0;
	//Hausverkaufen
	HausId[playerid] = 0; HausTr[playerid] = 0; HausPr[playerid] = 0;
	//Gefesselt
	PlayerTied[playerid] = 0;
	//Werbetestdraw verstecken
	TextDrawHideForPlayer(playerid,Ad1);
	TextDrawHideForPlayer(playerid,Ad2);
	//Autoradio
	SetPVarInt(playerid,"ID_HideRadioTextdraw",-1);
	SetPVarInt(playerid,"ID_OldVehicle",-1);
	//Drift
	Driftzeit[playerid] = 0;
	Score[playerid] = 0;
	//Waffenprüfung
	Getroffen[playerid] = 0;
	WaffenscheinSchuss[playerid] = 0;
	WaffenscheinStep[playerid] = 0;
	Targets[playerid] = 0;
	//Überprüfen ob es den Account gibt
	if(CheckAccountExists(GetName(playerid)))
	{
		AccountExists[playerid] = 1;
	}
	else
	{
		AccountExists[playerid] = 0;
	}
	//Anti BadNames
 	for(new p = 0; p < MAX_PLAYERS; p++)
 	{
		for(new i=0;i<sizeof(badnames);i++)
		{
			if(!strcmp(GetName(p),badnames[i],true))
			{
				SendClientMessage(p,Rot,"Dein Name ist unpassend bitte ändere diesen!");
				format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gekickt. Grund: Verbotener Name", GetNameEx(p));
				SendClientMessageToAll(Rot, string);
				format(string, sizeof(string), "Warnung: %s[%d] wurde vom Server gekickt, weil er einen verbotenen Namen hatte!", GetNameEx(p),p);
				SendAdminMessage(Rot, string);
				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gekickt. Grund: Verbotener Name",day,month,year,hour,minute,second,GetNameEx(playerid));
				CheatLog(string);
				TogglePlayerControllable(p, false);
				SaveSpieler(p);
				Kick(p);
				return 1;
			}
		}
	}

	//Pferderennen
	Watching[playerid] = 0;
	MoneyBet[playerid] = 0;
	BetOnHorse[playerid] = 0;

	//Slotmachine
	BetText[playerid]=TextDrawCreate(195.0,168.0+58,"~y~Einsatz: 5 E");
	TextDrawFont(BetText[playerid],2);
	TextDrawLetterSize(BetText[playerid],0.35,0.8);
	TextDrawSetShadow(BetText[playerid],0);
	TextDrawSetOutline(BetText[playerid],1);

	//Anti-Waffen Cheat
	for(new i=0;i<47;i++) PlayerWeapons[playerid][i]=false;
	Spawned[playerid]=false;

	//Anti IP
	pIPWarns[playerid] = 0;

	//Mapicons
	SetPlayerMapIcon( playerid, 0, -2240.7173,2319.9229,5.2307, 12, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 1, -2280.3191,2328.4468,5.0776, 6, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 2, -2279.5220,2299.5134,5.5002, 22, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 3, -2293.3003,2280.9180,6.0922, 52, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 4, -2245.5969,2359.1565,4.9838, 30, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 5, -2324.0857,2363.3208,4.9922, 42, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 6, -2434.9890,2362.7759,4.9868, 20, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 7, -2442.9324,2316.9763,5.0138, 35, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 8, -2447.1216,2281.0801,5.0479, 25, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 9, -2485.8503,2270.9365,4.9844, 48, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 10, -2476.2847,2240.0469,4.8416, 10, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 11, -2626.0417,2255.9839,8.1549, 38, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 12, -2537.5479,2318.6868,4.9844, 45, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 13, -2492.4592,2363.1697,10.2773, 17, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 14, -2370.1558,2273.0798,4.3087, 5, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 15, -2525.7529,2365.3091,4.9866, 27, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 16, -2353.8096,2574.5952,24.4739, 53, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 17, -2516.5688,2456.7678,18.3349, 55, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 18, -2620.1670,2437.6504,15.2599, 21, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 19, -2373.6345,2380.5928,10.5650, 51, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 20, -2818.5352,1621.8585,20.3505, 51, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 21, -1502.4486,980.8204,7.2254, 12, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 22, 1922.6871,-2403.6550,13.5469, 5, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 23, 1328.5789,1346.5066,10.8203, 5, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 24, -1322.3187,-204.6739,14.1484, 5, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 25, -1969.0144,273.3822,35.1719, 55, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 26, -2735.2834,87.6949,4.2161, 58, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 27, -2482.8521,2004.0331,10.6211, 29, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 28, -2482.7048,1928.5189,10.5785, 54, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 29, -2290.3059,1958.2678,1.7871, 48, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 30, -2275.4775,1997.7756,3.8759, 27, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 31, -2478.4971,-152.3384,33.9496, 61, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 32, -2382.8447,2446.1174,10.1694, 55, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 33, -1624.5436,46.6929,3.5495, 55, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 34, -1536.8639,2636.1816,55.8359, 27, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 35, -1862.0784,-145.2836,11.8984, 18, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 36, -2026.7339,72.9138,28.3444,  20, 0, MAPICON_LOCAL );
	SetPlayerMapIcon( playerid, 37, 1769.6951,2108.5576,10.8386,  20, 0, MAPICON_LOCAL );
	return 1;
}


public OnPlayerDisconnect(playerid, reason)
{
	if(IsPlayerNPC(playerid)) return 1;
	new string[128];
	new bot = GetNearestBot(playerid, 5);
	new vehicleid = GetPlayerVehicleID(playerid);
	//Auto
	for(new i = 0; i < sStats[playerid][sAutos]; i++)
	{
		DestroyVehicle(PlayerCar[playerid][i][cId]);
	}
	//Todessystem
	if(sStats[playerid][sTod] == 1)
	{
	    DeleteTotenkopf(playerid);
	}
	//Autofabrik
	if(GetPVarInt(playerid, "Pate") == 1 && Pate == 1)
	{
 		SetPVarInt(playerid, "Pate", 0);
 		Pate = 0;
	}
	//DJ Textdraw
	PlayerTextDrawDestroy(playerid, DJText1[playerid]);
	PlayerTextDrawDestroy(playerid, DJText2[playerid]);
	//Einweisung
	InEinweisung[playerid] = 0;	DeinEinweisung[playerid] = 0;
	//No DM Zone
	TextDrawShowForPlayer(playerid,NoDMTextdraw);
	//UnloadGeldSystem
	UnloadGeldSystem(playerid);
	//Quest
	if(sStats[playerid][sQuest] == 4)
	{
	    SetPVarInt(playerid,"SniperQuest",0);
	    sStats[playerid][sQuest] = 3;
 	}
	if(sStats[playerid][sQuest] == 6)
	{
	    SetPVarInt(playerid,"Fotos",0);
	    SetPVarInt(playerid,"Kamera",0);
	    sStats[playerid][sQuest] = 5;
 	}
	if(sStats[playerid][sQuest] == 8)
	{
	    SetPVarInt(playerid,"Daten",0);
	    SetPVarInt(playerid,"Laptop",0);
	    sStats[playerid][sQuest] = 7;
 	}
	if(sStats[playerid][sQuest] == 10)
	{
	    SetPVarInt(playerid,"RainerMission",0);
	    sStats[playerid][sQuest] = 9;
   		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    Mission = 0;
	    KickQuestBots();
 	}
 	//Autofabrik 2
	if(GetPVarInt(playerid, "AutoPate") == 1)
	{
		new rand = random(sizeof(PatenSpawns));
		new carslotidd = GetPVarInt(playerid, "Carslotid");
	    PlayerCar[playerid][carslotidd][cORotate] = PatenSpawns[rand][3];
		PlayerCar[playerid][carslotidd][cPos_x] = PatenSpawns[rand][0];
		PlayerCar[playerid][carslotidd][cPos_y] = PatenSpawns[rand][1];
		PlayerCar[playerid][carslotidd][cPos_z] = PatenSpawns[rand][2];
		PlayerCar[playerid][carslotidd][cNeon] = 0;
		PlayerCar[playerid][carslotidd][cTuev] = 0;
		Neonlichter[PlayerCar[playerid][carslotidd][cId]] = 0;
		UpdatePlayerCar(playerid);
		SetPVarInt(playerid, "Autopate", 0);
		SetPVarInt(playerid, "Carslot", 0);
		SetPVarInt(playerid, "Carslotid", 0);
	}
	//Tüv
	if(GetPVarInt(playerid, "InTuev") == 1)
	{
 		SetPVarInt(playerid, "InTuev", 0);
 		Tuev = 0;
	}
	//Autohaus
	InAutoHaus[playerid] = 0;
	//Admin disconecct
	if(GetPVarInt(playerid, "Adminduty") == 1 && sStats[playerid][sAdminlevel] > 0)
	{
			DeletePVar(playerid, "Adminduty");
			new ftext[30];
			if(sStats[playerid][sAdminlevel] == 1) { ftext = "Moderator/Scout"; }
			else if(sStats[playerid][sAdminlevel] == 2) { ftext = "Supporter"; }
			else if(sStats[playerid][sAdminlevel] == 3) { ftext = "Administrator"; }
			else if(sStats[playerid][sAdminlevel] == 4) { ftext = "Hauptsupporter"; }
			else if(sStats[playerid][sAdminlevel] == 5) { ftext = "Projektleiter"; }
			format(string, sizeof(string), "{FFFF00}Admin: {FF4C4C}%s[%d] {FFFF00}ist nicht mehr als %s im Einsatz.", GetName(playerid), playerid,ftext);
			TextDrawHideForPlayer(playerid, OTickets);
			SendClientMessageToAll(Gelb,string);
			DeletePlayer3DTextLabel(playerid,DutyLabel[playerid]);
	}
	//Hausautofarbe speichern
	if(sStats[playerid][sHaus] != 255)
	{
	    new farbe1,farbe2;
	    GetVehicleColor(HouseInfo[sStats[playerid][sHaus]][hVec], farbe1, farbe2);
	    HouseInfo[sStats[playerid][sHaus]][hVcol1] = farbe1;
	    HouseInfo[sStats[playerid][sHaus]][hVcol1] = farbe2;
	}
	//Wähernd Notruf Server verlassen
	//Feuerwehr
	if(DeinFW[playerid] != 0)
	{
	    SendClientMessage(DeinFW[playerid],Gelb,"Dein Notruf Gesprächspartner hat den Server verlassen!");
		SetPVarInt(DeinFW[playerid], "InFW", 0);
		SetPVarInt(playerid, "InFW", 0);
		DeletePVar(DeinFW[playerid], "FW");
		DeletePVar(DeinFW[playerid], "FW2");
		DeletePVar(playerid, "FW");
		DeletePVar(playerid, "FW2");
		DeinFW[DeinFW[playerid]] = 0;
		DeinFW[playerid] = 0;
	}
	//Chatten WhatzzApp
	if(DeinChat[playerid] != 0)
	{
	    SendClientMessage(DeinFW[playerid],Weiß,"{00FF3C}[WhatzzApp] {FFFFFF}Dein Chatpartner hat den Server verlassen!");
		SetPVarInt(DeinChat[playerid], "pChat", 0);
		SetPVarInt(playerid, "pChat", 0);
		DeinChat[DeinChat[playerid]] = 0;
		DeinChat[playerid] = 0;
	}
	//Sanitäter
	if(DeinS[playerid] != 0)
	{
	    SendClientMessage(DeinS[playerid],Gelb,"Dein Notruf Gesprächspartner hat den Server verlassen!");
		SetPVarInt(DeinS[playerid], "InS", 0);
		SetPVarInt(playerid, "InS", 0);
		DeletePVar(DeinS[playerid], "S");
		DeletePVar(DeinS[playerid], "S2");
		DeletePVar(playerid, "S");
		DeletePVar(playerid, "S2");
		DeinS[DeinS[playerid]] = 0;
		DeinS[playerid] = 0;
	}
	//Polizei
	if(DeinP[playerid] != 0)
	{
	    SendClientMessage(DeinP[playerid],Gelb,"Dein Notruf Gesprächspartner hat den Server verlassen!");
		SetPVarInt(DeinP[playerid], "InP", 0);
		SetPVarInt(playerid, "InP", 0);
		DeletePVar(DeinP[playerid], "P");
		DeletePVar(DeinP[playerid], "P2");
		DeletePVar(playerid, "P");
		DeletePVar(playerid, "P2");
		DeinP[DeinP[playerid]] = 0;
		DeinP[playerid] = 0;
	}
	//Mechatroniker
	if(DeinM[playerid] != 0)
	{
	    SendClientMessage(DeinM[playerid],Gelb,"Dein Notruf Gesprächspartner hat den Server verlassen!");
		SetPVarInt(DeinM[playerid], "InM", 0);
		SetPVarInt(playerid, "InM", 0);
		DeletePVar(DeinM[playerid], "M");
		DeletePVar(DeinM[playerid], "M2");
		DeletePVar(playerid, "M");
		DeletePVar(playerid, "M2");
		DeinM[DeinM[playerid]] = 0;
		DeinM[playerid] = 0;
	}
	//Support
	if(DeinSupport[playerid] != 0)
	{
	    SendClientMessage(DeinSupport[playerid],Gelb,"Dein Support Gesprächspartner hat den Server verlassen!");
		SetPVarInt(DeinSupport[playerid], "InSupport", 0);
		SetPVarInt(playerid, "InSupport", 0);
		DeletePVar(playerid, "Support");
		DeletePVar(playerid, "Supportt");
		DeletePVar(DeinSupport[playerid], "Supportt");
		DeletePVar(DeinSupport[playerid], "Support");
		DeinSupport[DeinSupport[playerid]] = 0;
		DeinSupport[playerid] = 0;
		new count=0;
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			if(IsPlayerConnected(i) && sStats[i][sAdminlevel] == 0 && GetPVarInt(i, "Supportt") == 1)
			{
			    count ++;
			}
		}
		format(string, sizeof(string), "Offene Tickets = %d", count);
		TextDrawSetString(OTickets, string);
	}
	if(GetPVarInt(playerid, "Supportt") == 1)
	{
	    DeletePVar(playerid, "Supportt");
		new count=0;
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			if(IsPlayerConnected(i) && sStats[i][sAdminlevel] == 0 && GetPVarInt(i, "Supportt") == 1)
			{
			    count ++;
			}
		}
		format(string, sizeof(string), "Offene Tickets = %d", count);
		TextDrawSetString(OTickets, string);
	}
	//Jailed
	if(sStats[playerid][sJailTime] <= 0 && sStats[playerid][sJailed] == 1)
	{
		sStats[playerid][sJailed] = 0;
		sStats[playerid][sJailTime] = 0;
	}
	if(sStats[playerid][sJailTime] == 0)
	{
		sStats[playerid][sJailed] = 0;
		sStats[playerid][sJailTime] = 0;
 	}
	//Fahrradverleih
	if(GetPVarInt(playerid, "Fahrrad") == 1)
	{
	    DestroyVehicle(fahrrad[playerid]);
		KillTimer(fatimer[playerid]);
	    DeletePVar(playerid, "Fahrrad");
	    DeletePVar(playerid, "Fahrradstatus");
	}
	//Maske
	if(sStats[playerid][sMaske] == 1 && sStats[playerid][sPremium] < 2)
 	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
    		ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
   			RemovePlayerAttachedObject(playerid, 5);
   			SetPVarInt(playerid,"Maske",0);
   			sStats[playerid][sMaske] = 0;
 	}
	//Maske
	if(sStats[playerid][sMaske] == 1 && sStats[playerid][sPremium] > 1)
 	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
    		ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
   			RemovePlayerAttachedObject(playerid, 5);
   			SetPVarInt(playerid,"Maske",0);
 	}
	//Pokertextdraw
	Delete_PokerTextDraw(playerid);
	//Anti Bhop
	PlayerPressedJump[playerid] = 0;
	//Hausverkaufen
	HausId[playerid] = 0; HausTr[playerid] = 0; HausPr[playerid] = 0;
	//Handy
	Mobile[playerid] = 255;
	//Sanitäter
 	DeinS[playerid] = 0;
	//Polizei
 	DeinP[playerid] = 0;
 	//WhatzzApp
 	DeinChat[playerid] = 0;
	//Feuerwehr
 	DeinFW[playerid] = 0;
	DeletePVar(playerid, "InFW");
	DeletePVar(playerid, "FW");
	//Mautstelle
	mautstelle[playerid] = 0;
	//Mechatroniker
	DeinM[playerid] = 0;
	DeletePVar(playerid, "InM");
	DeletePVar(playerid, "M");
	//Wohnwagen
	Injourney[playerid] = 0;
	//AntiFakekill
 	XDeaths[playerid] = 0;
    LastDeath[playerid] = 0;
    //BigEars
   	BigEar[playerid] = 0;
	//Interview
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999;
	//Sanitäter
	HealOffer[playerid] = 999; HealPrice[playerid] = 999;
	//Wohnwagen
	if(sStats[playerid][sWohnwagen] == 1)
	{
	    DeleteWohnwagen(playerid);
	}
   	//Farmer
	if(GetPVarInt(playerid, "Drogenanbauen") == 1)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		FarmerCP[playerid] = 0;
		DeletePVar(playerid, "Drogenanbauen");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}
	if(GetPVarInt(playerid, "Drogenabbauen") == 1)
	{
		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		FarmerCP[playerid] = 0;
		DeletePVar(playerid, "Drogenabbauen");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}
	if(GetPVarInt(playerid, "Kuhmelken") == 1)
	{
		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		FarmerCP[playerid] = 0;
		DeletePVar(playerid, "Kuhmelken");
	}
	//Paintball
   	if(PlayerPaintballing[playerid] != 0)
	{
	    PaintballPlayers --;
	    TextDrawHideForPlayer(playerid,PBText);
    	TextDrawShowForPlayer(playerid,Ad1);
		TextDrawShowForPlayer(playerid,Ad2);
	    sStats[playerid][sPwaffe] = 0;
	    PlayerPaintballing[playerid] = 0;
	}
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
 		if(PlayerPaintballing[i] != 0)
   		{
   			format(string,sizeof(string), "Der Spieler %s[%d] hat das Paintballmatch verlassen",GetName(playerid),playerid);
    		SendClientMessage(i, Weiß, string);
   		}
	}
	//Autoscooter
	if(GetPVarInt(playerid, "Autoscooter") == 1)
	{
	    AutoscooterPlayers --;
		DeletePVar(playerid, "Autoscooter");
	}
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(GetPVarInt(i, "Autoscooter") == 1)
		{
   			format(string,sizeof(string), "Der Spieler %s[%d] hat das Autoscootermatch verlassen",GetName(playerid),playerid);
    		SendClientMessage(i, Weiß, string);
   		}
	}
    //Supportsystem
    DeinSupport[playerid] = 0;
	//Waffenkaufen
	WaffenAngebot[playerid] = 0; Waffe[playerid] = 0; WaffenPreis[playerid] = 0;
	//Uhr Textdraw
	TextDrawHideForPlayer(playerid, Clock);
	TextDrawHideForPlayer(playerid, Script1);
	TextDrawHideForPlayer(playerid, Script2);
	//Nutte SM
	if(GetPVarInt(playerid, "SMSpiel") == 1)
	{
		if(!strcmp(GetName(bot),"Dominiquee",true))
		{
            UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{7fff00}Frei{FFFFFF}| <--");
			SetPVarInt(playerid,"SMSpiel",0);
			nutte = 0;
			Kick(bot);
			ConnectNPC("Dominique","nutte1");
		}
	}
	//Nutte Blowjob
	if(GetPVarInt(playerid, "InDerShow") == 1)
	{
		if(!strcmp(GetName(bot),"Dominiqueee",true))
		{
			UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{7fff00}Frei{FFFFFF}| <--");
			SetPVarInt(playerid,"InDerShow",0);
			nutte = 0;
			Kick(bot);
			ConnectNPC("Dominique","nutte1");
		}
	}
	//Gangsterauto
	if (GetPVarInt(playerid, "GMusik") == 1)
	{
		StopAudioStreamForPlayer(playerid);
		SetPVarInt(playerid, "GMusik", 0);
	}
	//Speedo
	if(GetPVarInt(playerid, "Speedometer") == 1)
	{
		KillTimer(timer2[playerid]);
	}
	//Helm System
	if(sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 1)
	{
		RemovePlayerHelm(playerid);
 		SetPVarInt(playerid, "Helm", 0);
	}
	//Sonnenbrille
	if(GetPVarInt(playerid, "Angezogen") == 1)
	{
 		RemovePlayerAttachedObject(playerid,2);
   		SetPVarInt(playerid,"Angezogen",0);
	}
	//Warnlicht
	if(Olicht[GetPlayerVehicleID(playerid)] == 1)
	{
		DestroyObject(light1[GetPlayerVehicleID(playerid)]);
		DestroyObject(light2[GetPlayerVehicleID(playerid)]);
		DestroyObject(light3[GetPlayerVehicleID(playerid)]);
		DestroyObject(light4[GetPlayerVehicleID(playerid)]);
		DestroyObject(light5[GetPlayerVehicleID(playerid)]);
		Olicht[GetPlayerVehicleID(playerid)] = 0;
	}
	//Sirene
	if(UCL[GetPlayerVehicleID(playerid)] == 1)
	{
	    DestroyObject(sirene[GetPlayerVehicleID(playerid)]);
	    DestroyObject(sirene1[GetPlayerVehicleID(playerid)]);
	    DestroyObject(sirene2[GetPlayerVehicleID(playerid)]);
	    DestroyObject(sirene3[GetPlayerVehicleID(playerid)]);
	    DestroyObject(sirene4[GetPlayerVehicleID(playerid)]);
	    UCL[GetPlayerVehicleID(playerid)] = 0;
	}
 	//Drift
 	if(GetPVarInt(playerid, "InDrift") == 1)
	{
	    SetPVarInt(playerid,"InDrift",0);
    	if(GetPVarInt(playerid, "StartDrift") == 1)
 		{
 		    DisablePlayerCheckpoint(playerid);
 	    	DestroyVehicle(DriftAuto[playerid]);
 	    	SetPVarInt(playerid,"StartDrift",0);
 	    	SetPlayerVirtualWorld(playerid,0);
 	    	DestroyAllDriftCP(playerid);
 	    	Driftzeit[playerid] = 0;
 	    	Score[playerid] = 0;
 	    	return 1;
 		}
    }
	//Reinigungsmission
 	if(sStats[playerid][sMission] > 0)
  	{
 		ClearChat(playerid);
 		DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
   		sStats[playerid][sMission] = 0;
   		sStats[playerid][sMissionZeit] = gettime()+(2*60);
   		RemovePlayerFromVehicle(playerid);
   		DestroyVehicle(Sweeper[playerid]);
  	}
   	//Fahrschule Führescheinprüfung
	if(GetPVarInt(playerid, "InFschein") > 0)
 	{
  		DisablePlayerCheckpoint(playerid);
		FscheinCP[playerid] = 0;
		Tankmenge[vehicleid] = GasMax[GetVehicleModel(vehicleid)-400];
   		SetVehicleToRespawn(vehicleid);
   		sStats[playerid][sAutoschein] = 0;
   		GivePlayerEuro(playerid,600);
		SetPVarInt(playerid, "InFschein", 0);
	}
	//Fahrschule Truckprüfung
	if(GetPVarInt(playerid, "InTschein") > 0)
 	{
  		DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
   		DestroyVehicle(Truck[vehicleid]);
   		GivePlayerEuro(playerid,3500);
		SetPVarInt(playerid, "InTschein", 0);
	}
	//Fahrschule Motorradprüfung
	if(GetPVarInt(playerid, "InMschein") > 0)
 	{
  		DisablePlayerCheckpoint(playerid);
  		DestroyVehicle(MotorAuto[playerid]);
		FscheinCP[playerid] = 0;
   		sStats[playerid][sMotorradschein] = 0;
   		RemovePlayerHelm(playerid);
   		SetPVarInt(playerid, "Helm", 0);
   		sStats[playerid][sHelm] = 0;
   		GivePlayerEuro(playerid,2500);
		SetPVarInt(playerid, "InMschein", 0);
	}
	//Fahrschule Anglerlizens
	if(GetPVarInt(playerid, "InAschein") == 1)
	{
		ClearChat(playerid);
		SetPVarInt(playerid,"AVersuche",0);
		SetPVarInt(playerid, "FGefangen", 0);
		SetPVarInt(playerid, "Angela", 0);
		SetPVarInt(playerid, "InAschein", 0);
		sStats[playerid][sFisch] = 0;
		GivePlayerEuro(playerid,1600);
		KillTimer(AngelTimer[playerid]);
	}
	//Fahrschule Waffenscheinprüfung
	if(GetPVarInt(playerid, "InWschein") > 0)
 	{
		//Durchgefallen
		ClearChat(playerid);
		GivePlayerEuro(playerid,5000);
   		sStats[playerid][sWaffenschein] = 0;
		SetPVarInt(playerid, "InWschein", 0);
		DeletePlayer3DTextLabel(playerid,Target);
		Getroffen[playerid] = 0;
		WaffenscheinSchuss[playerid] = 0;
		WaffenscheinStep[playerid] = 0;
		Targets[playerid] = 0;
	}
	//Wenn Farmer den Server verlässt
	if(GetPVarInt(playerid, "FMDienst") == 1)
	{
	    SetPlayerSkin(playerid,GetPVarInt(playerid, "FMSkin"));
	    DeletePVar(playerid, "FMDienst");
	}
	//Wenn Spedition den Server verlässt
	if(GetPVarInt(playerid, "SDienst") >= 1)
	{
	    SetPlayerSkin(playerid,GetPVarInt(playerid, "SSkin"));
	    DeletePVar(playerid, "SDienst");
	}
	//Wenn Feuerwehr den Server verlässt
	if(GetPVarInt(playerid, "FDienst") == 1)
	{
	    SetPlayerSkin(playerid,GetPVarInt(playerid, "FSkin"));
	    DeletePVar(playerid, "FDienst");
	    DeletePVar(playerid,"FSkin");
	    DeletePVar(playerid,"Pieper");
	    FeuerwehrOn --;
	}
	//Wenn Mechatroniker den Server verlässt
	if(GetPVarInt(playerid, "MechaDienst") == 1)
	{
		SetPlayerSkin(playerid,GetPVarInt(playerid, "MSkin"));
		DeletePVar(playerid, "MechaDienst");
		MechaOn -= 1;
	}
	//Autounfall
	if(GetPVarInt(playerid, "Unfall") == 1)
	{
	 	TogglePlayerControllable(playerid, true);
	    DeletePVar(playerid, "Unfall");
	    DeletePVar(playerid, "FW");
	   	new Float:xP,Float:xY,Float:xZ;
		GetPlayerPos(playerid, xP, xY, xZ);
		RemovePlayerFromVehicle(playerid);
		SetPlayerHealth(playerid,0.0);
		CreateExplosion(xP, xY, xZ, 12, 3.0);
		sStats[playerid][sTod] = 1;
		if(GetPVarInt(playerid, "FW") == 1)
		{
		    SetPVarInt(DeinFW[playerid], "FW2", 1);
		    DeinFW[DeinFW[playerid]] = 0;
			DeinFW[playerid] = 0;
			DeletePVar(playerid, "InFW");
			DeletePVar(playerid, "FW");
		}
	}
	//Wenn DJ den Server verlässt
	if(GetPVarInt(playerid, "DJPult") == 1)
	{
 		Delete3DTextLabel(DJLabel[playerid]);
 		DestroyDynamicObject(Mischpult[playerid]);
 		DestroyDynamicObject(Tisch[playerid]);
 		TogglePlayerControllable(playerid, true);
 		DeletePVar(playerid, "DJPult");
 		DeletePVar(playerid, "DJMusik");
		KillTimer(DJTimer[playerid]);
		UnSetDJStatus(playerid);
		if(GetPVarInt(playerid, "DJDienst") == 1)
		{
	 		DeletePVar(playerid, "DJDienst");
		 	SetPlayerSkin(playerid,GetPVarInt(playerid, "DJSkin"));
		 	DeletePVar(playerid,"DJSkin");
		}
	 	for(new p = 0; p < MAX_PLAYERS; p++)
	 	{
			if(IsPlayerConnected(p) && sStats[playerid][sTutorial] == 1)
			{
				if(GetPVarInt(p, "ListenToDJ") == 1)
				{
					StopAudioStreamForPlayer(p);
					SetPVarInt(playerid,"ListenToDJ",0);
 				}
			}
		}
 	}
	//Anti Spawnkill
	if(GetPVarInt(playerid, "Spawnkill") == 1)
	{
		DeletePVar(playerid, "Spawnkill");
		Delete3DTextLabel(SpawnKilllabel[playerid]);
	}
	//Pferderennen
	if (Watching[playerid] == 1)
	{
 		Watching[playerid] = 0;
   		TextDrawHideForPlayer(playerid,BG2);
     	TextDrawHideForPlayer(playerid,BG1);
      	TextDrawHideForPlayer(playerid,Start2);
       	TextDrawHideForPlayer(playerid,Finish2);
        TextDrawHideForPlayer(playerid, Horse1);
        TextDrawHideForPlayer(playerid,Horse2);
        TextDrawHideForPlayer(playerid,Horse3);
        TextDrawHideForPlayer(playerid,Horse4);
        TextDrawHideForPlayer(playerid,HorseNum1);
        TextDrawHideForPlayer(playerid,HorseNum2);
        TextDrawHideForPlayer(playerid,HorseNum3);
        TextDrawHideForPlayer(playerid,HorseNum4);
        TextDrawHideForPlayer(playerid,Start);
        TextDrawHideForPlayer(playerid,Finish);
		TogglePlayerControllable(playerid, true);
		PlayerTextDrawShow(playerid,Money3[playerid]);
		PlayerTextDrawShow(playerid,Money[playerid]);
		PlayerTextDrawShow(playerid,Money2[playerid]);
		TextDrawShowForPlayer(playerid,Clock);
		TextDrawShowForPlayer(playerid, Script1);
		TextDrawShowForPlayer(playerid, Script2);
		SetCameraBehindPlayer(playerid);
		MoneyBet[playerid] = 0;
		BetOnHorse[playerid] = 0;
	}
	//24/7 Rob
	if(reason == 2 || reason == 1)
	{
		if(Robber[playerid] == 1)
		{
			format(string, sizeof(string), "Der gesuchte 24/7 Laden Räuber %s ist offline gegangen, somit ist sein Raub fehlgeschlagen.",GetName(playerid));
			SendRadioMessage(1,COLOR_DBLUE,string);
			SetPVarInt(playerid,"247Cash",0);
			Robber[playerid] = 0;
			sStats[playerid][s247Rob] = 1;
			SetPlayerWantedLevel(playerid,1);
	 		sStats[playerid][sWanteds] = 1;
		}
		//Bankraub
		if(GetPVarInt(playerid, "Bankraub") == 1)
	 	{
			DisablePlayerCheckpoint(playerid);
		 	QuestCP[playerid] = 0;
	 		SetPlayerWantedLevel(playerid,1);
	 		sStats[playerid][sWanteds] = 1;
		 	format(string, sizeof(string), "Der Bankraub des Spielers %s ist fehlgeschlagen, da er den Server verlassen hat!",GetName(playerid));
		 	SendRadioMessage(1,COLOR_DBLUE,string);
		 	DeletePVar(playerid, "BankGeld");
		 	DeletePVar(playerid, "BankRaub");
		 	sStats[playerid][sBankRaub] = 1;
		}
	}
	if(reason == 0)
	{
		if(Robber[playerid] == 1)
		{
			format(string, sizeof(string), "Der gesuchte 24/7 Laden Räuber %s hatte einen TimeOut, seine Wanteds wurden gespeichert.",GetName(playerid));
			SendRadioMessage(1,COLOR_DBLUE,string);
			Robber[playerid] = 0;
			sStats[playerid][s247Rob] = GetPVarInt(playerid, "247Cash");
			SetPVarInt(playerid,"247Cash",0);
		}
		//Bankraub
		if(GetPVarInt(playerid, "Bankraub") == 1)
	 	{
	 	    sStats[playerid][sBankRaub] = GetPVarInt(playerid, "BankGeld");
			DisablePlayerCheckpoint(playerid);
		 	QuestCP[playerid] = 0;
		 	format(string, sizeof(string), "Der Bankräuber %s hatte einen TimeOut, seine Wanteds wurden gespeichert.",GetName(playerid));
		 	SendRadioMessage(1,COLOR_DBLUE,string);
		 	DeletePVar(playerid, "BankGeld");
		 	DeletePVar(playerid, "BankRaub");
		}
	}
	//DriveIN
	if(GetPVarInt(playerid, "Bestellung") > 0)
	{
	DriveinMenBusy = 0;
	}

	//Musik aus
	StopAudioStreamForPlayer(playerid);

	//Angehängte Objecte entfernen
	RemovePlayerAttachedObject(playerid,0);
	RemovePlayerAttachedObject(playerid,1);
	RemovePlayerAttachedObject(playerid,2);
	RemovePlayerAttachedObject(playerid,3);
	RemovePlayerAttachedObject(playerid,4);
	RemovePlayerAttachedObject(playerid,5);
	RemovePlayerAttachedObject(playerid,6);
	RemovePlayerAttachedObject(playerid,7);
	RemovePlayerAttachedObject(playerid,8);
	RemovePlayerAttachedObject(playerid,9);

	//Slotmachine
	ExitPlayerFromSlotMachine(playerid);

	TextDrawHideForPlayer(playerid,Digit1[0]);
	TextDrawHideForPlayer(playerid,Digit2[0]);
	TextDrawHideForPlayer(playerid,Digit3[0]);

	TextDrawHideForPlayer(playerid,Digit1[1]);
	TextDrawHideForPlayer(playerid,Digit2[1]);
	TextDrawHideForPlayer(playerid,Digit3[1]);

	TextDrawHideForPlayer(playerid,Digit1[2]);
	TextDrawHideForPlayer(playerid,Digit2[2]);
	TextDrawHideForPlayer(playerid,Digit3[2]);

	TextDrawHideForPlayer(playerid,Digit1[3]);
	TextDrawHideForPlayer(playerid,Digit2[3]);
	TextDrawHideForPlayer(playerid,Digit3[3]);

	TextDrawHideForPlayer(playerid,Digit1[4]);
	TextDrawHideForPlayer(playerid,Digit2[4]);
	TextDrawHideForPlayer(playerid,Digit3[4]);

	TextDrawHideForPlayer(playerid,Digit1[5]);
	TextDrawHideForPlayer(playerid,Digit2[5]);
	TextDrawHideForPlayer(playerid,Digit3[5]);

	TextDrawHideForPlayer(playerid,Box);
	TextDrawHideForPlayer(playerid,ReadyText);

	if(SlotTimer[playerid] != -1) KillTimer(SlotTimer[playerid]);

	//Supportveh deleten
	if(GetPVarInt(playerid, "Supportveh") == 1)
	{
		DestroyVehicle(SupportVeh[playerid]);
		Delete3DTextLabel(supveh[playerid]);
		DestroyObject(SupportVehLight[playerid]);
		SetPVarInt(playerid, "Supportveh", 0);
	}
	sStats[playerid][sHausE] = 0;

	//Handysystem
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  Rot, "Tüt - Tüt - Tüt die Leitung ist tod!");
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
	}
	Mobile[playerid] = 255;

	//Spawnvariable GF
	DeletePVar(playerid,"Spawneddd");

	//Sachen die vor dem Speichern gesetzt werden müssen.
	sStats[playerid][sLastOnline] = gettime();
	//Spieler speichern Sicherung
 	switch(reason)
    {
        case 0: SaveSpieler(playerid);
        case 1: SaveSpieler(playerid);
        case 2: SaveSpieler(playerid);
    }
	//Eingeloggt nein
	sStats[playerid][sEingeloggt] = 0;
	SetPVarInt(playerid,"Eingeloggt",0);
   	//Gangwar
	GW_OnPlayerDisconnect(playerid);

	//Speedo unloaden
	UnloadSpeedoSystem(playerid);
	printf("Spieler %s hat den Server erfolgreich verlassen!",GetName(playerid));
	return 1;
}

public OnPlayerSpawn(playerid)
{
	new string[155];
	new house = sStats[playerid][sHaus];
	if(IsPlayerNPC(playerid))
	{
		new npcname[MAX_PLAYER_NAME];
		GetPlayerName(playerid, npcname, sizeof(npcname));
		Mobile[playerid] = 255;
		PreloadAnims(playerid);
		if(!strcmp(npcname, "Mike", true))
		{
			SetPlayerSkin(playerid,240);
		}
		if(!strcmp(npcname, "Tatjana", true))
		{
			SetPlayerSkin(playerid,205);
		}
		if(!strcmp(npcname, "Dennis", true))
		{
			SetPlayerSkin(playerid,163);
			GivePlayerWeaponEx(playerid,3,1);
		}
		if(!strcmp(npcname, "Ralle", true))
		{
			SetPlayerSkin(playerid,164);
			GivePlayerWeaponEx(playerid,3,1);
		}
		if(!strcmp(npcname, "Michael", true))
		{
			SetPlayerSkin(playerid,165);
			GivePlayerWeaponEx(playerid,3,1);
		}
		if(!strcmp(npcname, "DJ_Paddy", true))
		{
			SetPlayerSkin(playerid,83);
		}
		if(!strcmp(npcname, "Phillip", true))
		{
			SetPlayerSkin(playerid,240);
		}
		if(!strcmp(npcname, "Jan", true))
		{
			SetPlayerSkin(playerid,240);
		}
		if(!strcmp(npcname, "Roman", true))
		{
			SetPlayerSkin(playerid,240);
		}
		if(!strcmp(npcname, "Lumar", true))
		{
			SetPlayerSkin(playerid,152);
		}
		if(!strcmp(npcname, "Susanna", true))
		{
			SetPlayerSkin(playerid,131);
		}
		if(!strcmp(npcname, "Alberto", true))
		{
			SetPlayerSkin(playerid,122);
		}
		if(!strcmp(npcname, "James", true))
		{
			SetPlayerSkin(playerid,240);
		}
		if(!strcmp(npcname, "Semaj", true))
		{
			SetPlayerSkin(playerid,240);
		}
		if(!strcmp(npcname, "Melanie", true))
		{
			SetPlayerSkin(playerid,190);
		}
		if(!strcmp(npcname, "Charlie", true))
		{
			SetPlayerSkin(playerid,179);
		}
		if(!strcmp(npcname, "Martin", true))
		{
			SetPlayerSkin(playerid,217);
		}
		if(!strcmp(npcname, "Anna", true))
		{
			SetPlayerSkin(playerid,172);
		}
		if(!strcmp(npcname, "Marie", true))
		{
			SetPlayerSkin(playerid,150);
		}
		if(!strcmp(npcname, "Christina", true))
		{
			SetPlayerSkin(playerid,141);
		}
		if(!strcmp(npcname, "Pascal", true))
		{
			SetPlayerSkin(playerid,166);
			GivePlayerWeaponEx(playerid, 3, 1);
		}
		if(!strcmp(npcname, "Jeremy", true))
		{
			SetPlayerSkin(playerid,165);
			GivePlayerWeaponEx(playerid, 3, 1);
		}
		if(!strcmp(npcname, "Vivienn", true))
		{
			SetPlayerSkin(playerid,141);
		}
		if(!strcmp(npcname, "Jack", true))
		{
			SetPlayerSkin(playerid,33);
		}
		if(!strcmp(npcname, "Maya", true))
		{
			SetPlayerSkin(playerid,93);
		}
		if(!strcmp(npcname, "Joeline", true))
  		{
			SetPlayerSkin(playerid,	41);
		}
		if(!strcmp(npcname, "Daniel", true))
  		{
			SetPlayerSkin(playerid,	99);
		}
		if(!strcmp(npcname, "Michaela", true))
  		{
			SetPlayerSkin(playerid,	225);
			SetTimerEx("SetSonnenbrille",3121,false,"i",playerid);
		}
		if(!strcmp(npcname, "Tom", true))
  		{
			SetPlayerSkin(playerid,	200);
		}
		if(!strcmp(npcname, "PaulDerBarkeeper", true))
  		{
  		    SetPlayerVirtualWorld(playerid,1);
			SetPlayerSkin(playerid,	240);
		}
		if(!strcmp(npcname, "Peter", true))
  		{
			SetPlayerSkin(playerid,	24);
			new Text3D:peterl;
			peterl = Create3DTextLabel("{FFFFFF}Wachposten {FFFF00}Peter", 0xAAAAFFF ,0.0,0.0,0.6, 50.0, 0, 0);
			Attach3DTextLabelToPlayer(peterl, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Rainer", true))
  		{
			SetPlayerSkin(playerid,	135);
			new Text3D:rr;
			rr = Create3DTextLabel("{FFFFFF}Rainer",0xAAAAFFFF,0.0,0.0,0.65, 50, -1, 1);
			Attach3DTextLabelToPlayer(rr, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Fernandez", true))
  		{
			SetPlayerSkin(playerid,	116);
			GivePlayerWeapon(playerid,31,500);
		}
		if(!strcmp(npcname, "Stefania", true))
  		{
			SetPlayerSkin(playerid,	11);
			new Text3D:stl;
			stl = Create3DTextLabel("{FFFFFF}Stewardess\n {FFFF00}Stefania\n\nLOS BEEIL DICH!",0xAAAAFFFF,0.0,0.0,0.6, 50.0, 0, 0);
			Attach3DTextLabelToPlayer(stl, playerid, 0.0,0.0,0.4);
			GivePlayerWeaponEx(playerid,46,1);
		}
		if(!strcmp(npcname, "Patrick", true))
  		{
			SetPlayerSkin(playerid,	163);
		}
		if(!strcmp(npcname, "Lissa", true))
  		{
			SetPlayerSkin(playerid,	141);
		}
		if(!strcmp(npcname, "Dominique", true))
  		{
			SetPlayerSkin(playerid,	63);
			SetTimerEx("RefreshBot",2111,false,"i",playerid);
			ClearAnimations(playerid);
		}
		if(!strcmp(npcname, "Dominiquee", true))
  		{
			SetPlayerSkin(playerid,	63);
			SetTimerEx("SexAnimation",3109,false,"i",playerid);
			ClearAnimations(playerid);
		}
		if(!strcmp(npcname, "Dagmar", true))
  		{
			SetPlayerSkin(playerid,	39);
			ClearAnimations(playerid);
		}
		if(!strcmp(npcname, "Dominiqueee", true))
  		{
			SetPlayerSkin(playerid,	63);
			ClearAnimations(playerid);
		}
		if(!strcmp(npcname, "Dominiqueeee", true))
  		{
			SetPlayerSkin(playerid,	63);
			ClearAnimations(playerid);
		}
		if(!strcmp(npcname, "John", true))
  		{
			SetPlayerSkin(playerid,	29);
		}
		if(!strcmp(npcname, "DDealer", true))
  		{
			SetPlayerSkin(playerid,	29);
		}
		if(!strcmp(npcname, "DDDealer", true))
  		{
			SetPlayerSkin(playerid,	29);
		}
		if(!strcmp(npcname, "Leo", true))
  		{
			SetPlayerSkin(playerid,	141);
		}
		if(!strcmp(npcname, "Magger", true))
  		{
			SetPlayerSkin(playerid,	61);
			sStats[playerid][sFlugschein] = 1;
			PutPlayerInVehicle(playerid, flugbot, 0);
		}
		if(!strcmp(npcname, "Eddy", true))
  		{
			SetPlayerSkin(playerid,	34);
			new Text3D:eddyl;
			eddyl = Create3DTextLabel("{FFFFFF}Wohnwagenverkäufer\n{FFFF00}Eddy",0xAAAAFFFF,0.0,0.0,0.65, 50.0, 0, 0);
			Attach3DTextLabelToPlayer(eddyl, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Hagermann", true))
  		{
			SetPlayerSkin(playerid,	81);
			new Text3D:haga;
			haga = Create3DTextLabel("{FFFFFF}Hagermann",0xAAAAFFFF,0.0,0.0,0.65, 50.0, 0, 0);
			Attach3DTextLabelToPlayer(haga, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Nils", true))
  		{
			SetPlayerSkin(playerid,	98);
			sStats[playerid][sBootschein] = 1;
			PutPlayerInVehicle(playerid, pveh, 0);
			new Text3D:nils;
			nils = Create3DTextLabel("{FFFFFF}Premiumlieferservice",0xAAAAFFFF,0.0,0.0,0.65, 50.0, 0, 0);
			Attach3DTextLabelToPlayer(nils, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Laura", true))
  		{
			SetPlayerSkin(playerid,	11);
			new Text3D:laura;
			laura = Create3DTextLabel("{FFFFFF}Sektempfang\n{FFFF00}Laura Da Silva",0xAAAAFFFF,0,0,0.65, 50.0, 0);
			Attach3DTextLabelToPlayer(laura, playerid, 0,0,0);
		}
		if(!strcmp(npcname, "Otto", true))
  		{
  		    SetPlayerAttachedObject(playerid,9,19421,2,0.057999,-0.000000,-0.001000,90.699882,-15.900001,-92.400032,1.000000,1.000000);
			SetPlayerSkin(playerid,	84);
		}
		if(!strcmp(npcname, "Hugo", true))
  		{
			SetPlayerSkin(playerid,	155);
		}
		if(!strcmp(npcname, "Norbert", true))
  		{
			SetPlayerSkin(playerid,	204);
			new Text3D:nor;
			nor = Create3DTextLabel("{FFFFFF}Kampfmeister\n{FFFF00}Norbert",0xAAAAFFFF,0.0,0.0,0.65, 50.0, 0);
			Attach3DTextLabelToPlayer(nor, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Wanni", true))
  		{
			SetPlayerSkin(playerid,	242);
			new Text3D:w;
			w = Create3DTextLabel("{FFFFFF}HIGHSWAG",0xAAAAFFFF,0.0,0.0,0.65, 3.0, 0, 0);
			Attach3DTextLabelToPlayer(w, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "AutoPate", true))
  		{
			SetPlayerSkin(playerid,	126);
			new Text3D:wwww;
			wwww = Create3DTextLabel("{FFFFFF}Der Autopate",0xAAAAFFFF,0,0,0.65, 10.0, 0, 0);
			Attach3DTextLabelToPlayer(wwww, playerid, 0,0,0);
		}
		if(!strcmp(npcname, "WannisVater", true))
  		{
			SetPlayerSkin(playerid,	137);
			new Text3D:wv;
			wv = Create3DTextLabel("{FFFFFF}Roland",0xAAAAFFFF,0.0,0.0,0.65, 10.0, 0, 0);
			Attach3DTextLabelToPlayer(wv, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Volker", true))
  		{
			SetPlayerSkin(playerid,	208);
			new Text3D:vvv;
			vvv = Create3DTextLabel("{FFFFFF}Volker\n{FFFF00}Bodyguard von dem Autopaten!",0xAAAAFFFF,0.0,0.0,0.65, 10.0, 0);
			Attach3DTextLabelToPlayer(vvv, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Neko", true))
  		{
			SetPlayerSkin(playerid,	60);
			SetPlayerAttachedObject(playerid, 5, 18943, 2, SkinCapOffset[60][0], SkinCapOffset[60][1], SkinCapOffset[60][2], SkinCapOffset[60][3], SkinCapOffset[60][4], SkinCapOffset[60][5]);
			new Text3D:n;
			n = Create3DTextLabel("{FFFFFF}Neko_Less",0xAAAAFFFF,0.0,0.0,0.65, 3.0, 0, 0);
			Attach3DTextLabelToPlayer(n, playerid, 0.0,0.0,0.0);
		}
		if(!strcmp(npcname, "Shootiii", true))
  		{
			SetPlayerSkin(playerid,	5);
			new Text3D:sh;
			sh = Create3DTextLabel("{FFFFFF}Codename\n {FFFF00}Brauche noch mehr Cheeseburger!",0xAAAAFFFF,0.0,0.0,0.6, 50.0, 0);
			Attach3DTextLabelToPlayer(sh, playerid, 0.0,0.0,0.4);
		}
		if(!strcmp(npcname, "Jackson", true))
  		{
			SetPlayerSkin(playerid,	32);
			new Text3D:jacksss;
			jacksss = Create3DTextLabel("{FFFFFF}Jackson\n {FFFF00}Der Ballonführer\n/buyticket für eine Ballonrundfahrt!",0xAAAAFFFF,0.0,0.0,0.6, 50.0, 0);
			Attach3DTextLabelToPlayer(jacksss, playerid, 0.0,0.0,0.4);
		}
		if(!strcmp(npcname, "Sasa", true))
  		{
			SetPlayerSkin(playerid,	264);
		}
	}
	if(IsPlayerNPC(playerid)) return 1;
	//Gangwar
	GW_OnPlayerSpawn(playerid);
	//Skin setzen
	SetPlayerSkinEx(playerid);
	//UnSetStartBildschirm
	UnSetStartbildschirm(playerid);
	//Farbe des Spielers setzen
	SetSpielerFarbe(playerid);
	//Animationen vorladen
	PreloadAnims(playerid);
	//Chat säubern
	ClearChat(playerid);
   	//Erster Spawn Variable setzen
	if(GetPVarInt(playerid, "ImIntro") == 1 && sStats[playerid][sTutorial] <= 0)
	{
		PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/intro.wav");
		ClearChat(playerid);
		SetPVarInt(playerid,"Flugzeugluke2",0);
	   	SetPlayerHealth(playerid,100.0);
	   	SetPlayerVirtualWorld(playerid,1);
		TogglePlayerControllable(playerid, false);
		SetPlayerInterior(playerid,0);
		TextDrawHideForPlayer(playerid, Clock);
		TextDrawHideForPlayer(playerid, Script1);
		TextDrawHideForPlayer(playerid, Script2);
		PlayerTextDrawHide(playerid,Money3[playerid]);
		PlayerTextDrawHide(playerid,Money2[playerid]);
		PlayerTextDrawHide(playerid,Money[playerid]);
		TextDrawShowForPlayer(playerid,lbt);
		TextDrawShowForPlayer(playerid,lbb);
		TextDrawShowForPlayer(playerid,Intro);
	    InterpolateCameraPos(playerid, -2613.518798, 2375.457763, 15.573554, -2614.698730, 2205.049072, 25.768188, 11000);
		InterpolateCameraLookAt(playerid, -2613.665039, 2370.536865, 14.699165, -2614.263916, 2209.742919, 24.101488, 11000);
		SetPlayerPosEx(playerid,-2635.2686,2310.3191,8.3407);
		SetTimerEx("StartIntro2",10733,false,"i",playerid);
		return 1;
	}
	if(GetPVarInt(playerid, "Clown") == 1 && sStats[playerid][sTutorial] <= 0)
 	{
 		StopAudioStreamForPlayer(playerid);
 		SetTimerEx("StartClown",1511,false,"i",playerid);
 		SetTimerEx("SpawnPlayerr",24019,false,"i",playerid);
		ClearChat(playerid);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerPosEx(playerid,-1833.4006,6.0167,1061.1436);
		SetPlayerCameraPos(playerid,-1832.9889,14.8789,1061.1436);
		SetPlayerCameraLookAt(playerid,-1833.0021,16.0452,1061.1436);
		TogglePlayerControllable(playerid, false);
		SetPVarInt(playerid,"Clown",0);
		SetPVarInt(playerid,"FlugzeugStart",1);
		SetPlayerInterior(playerid, 14);
		//Textdraws
		//Uhr
		TextDrawShowForPlayer(playerid, Clock);
		TextDrawShowForPlayer(playerid, Script1);
		TextDrawShowForPlayer(playerid, Script2);
		//Geld Textdraw anzeigen
		PlayerTextDrawShow(playerid,Money3[playerid]);
		PlayerTextDrawShow(playerid,Money2[playerid]);
		PlayerTextDrawShow(playerid,Money[playerid]);
		return 1;
 	}
	if(GetPVarInt(playerid, "Flugzeugluke") == 1 && sStats[playerid][sTutorial] <= 0)
	{
		ClearChat(playerid);
		SetPlayerSkin(playerid,sStats[playerid][sSkin]);
	    TogglePlayerControllable(playerid, true);
	    SetPlayerHealth(playerid,900.0);
	    SetPlayerVirtualWorld(playerid,0);
	    SetPVarInt(playerid,"Flugzeugluke",0);
	    SetPVarInt(playerid,"Flugzeugluke2",1);
		SetPlayerPosEx(playerid,3562.4211,-980.9969,616.9543);
		SetPlayerFacingAngle(playerid,359.0699);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,9);
		GivePlayerWeaponEx(playerid,46,1);
	    SendClientMessage(playerid,Weiß,"Das Flugzeug wird es nicht mehr lange aushalten, verlieren Sie keine Zeit springen SIE. LOS! LOS! LOS!");
		SetPlayerCheckpoint(playerid, 3562.2759,-936.7173,606.4752, 7.0);
		QuestCP[playerid] = 190;
		return 1;
	}
	if(GetPVarInt(playerid, "FlugzeugStart") == 1 && sStats[playerid][sTutorial] <= 0)
 	{
	  	StopAudioStreamForPlayer(playerid);
		ClearChat(playerid);
		SetPlayerSkin(playerid,sStats[playerid][sSkin]);
		SetPlayerVirtualWorld(playerid,playerid+1);
		SetPlayerPosEx(playerid,0.6985,27.5042,1199.5938);
		SetPlayerFacingAngle(playerid,354.8517);
		SetPlayerCameraPos(playerid,2.0753,31.0642,1199.6012);
		SetPlayerCameraLookAt(playerid,1.8925,30.6527,1199.5938);
		TogglePlayerControllable(playerid, false);
		ApplyAnimation(playerid, "PED","SEAT_down", 4.0, 0, 1, 1, 1, 0, 0);
		SendClientMessage(playerid,Weiß,"Sehr geehrte Fluggäste,");
		SendClientMessage(playerid,Weiß,"Wir werden in kürze den Airport von Bayside erreichen,");
		SendClientMessage(playerid,Weiß,"bitte machen Sie sich bereit für die Landung.");
		SendClientMessage(playerid,Weiß,"Vielen Dank für Ihr Vertrauen und weiterhin einen schönen Aufenthalt wünscht");
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"Ihnen die Fluglinie Juank Air!");
		SetTimerEx("FlugzeugBrand", 19073, false, "d", playerid);
		SetPlayerInterior(playerid, 1);
		SetPVarInt(playerid,"FlugzeugStart",0);
		return 1;
	}
	//Normales Zeug setzen
	//Anti-Waffen Cheat
	for(new i;i<3;i++) PlayerWeapons[playerid][ClassWeapons[PlayerClass[playerid]][i]]=true;
	SetTimerEx("RealSpawn",829,false,"i",playerid);
	//Admin Sachen setzen
	if(GetPVarInt(playerid, "Adminduty") == 1 && sStats[playerid][sAdminlevel] >= 1 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
	{
	        new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			if(sStats[playerid][sAdminlevel] == 5)
			{
				format(string,84,"{FFFFFF}[{FF0000}Projektleiter{FFFFFF}]");
				DutyLabel[playerid] = CreatePlayer3DTextLabel(playerid,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,playerid, INVALID_VEHICLE_ID, 0);
				RemovePlayerAttachedObject(playerid,5);
				RemovePlayerAttachedObject(playerid,6);
				SetPlayerAttachedObject(playerid, 5, 19079, 17, 0.054798, -0.068864, 0.143832, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				SetPlayerAttachedObject(playerid, 6, 1276, 1, 0.026707, 0.049716, 0.044027, 0.000000, 166.186828, 295.838226, -0.335559, 1.000000, 0.018289);
				return 1;
			}
			else if(sStats[playerid][sAdminlevel] == 4)
			{
				format(string,84,"{FFFFFF}[{FF0000}Hauptsupporter{FFFFFF}]");
				DutyLabel[playerid] = CreatePlayer3DTextLabel(playerid,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,playerid, INVALID_VEHICLE_ID, 0);
				return 1;
			}
			else if(sStats[playerid][sAdminlevel] == 3)
			{
				format(string,84,"{FFFFFF}[{FF0000}Administrator{FFFFFF}]");
				DutyLabel[playerid] = CreatePlayer3DTextLabel(playerid,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,playerid, INVALID_VEHICLE_ID, 0);
				return 1;
			}
			else if(sStats[playerid][sAdminlevel] == 2)
			{
				format(string,84,"{FFFFFF}[{FF0000}Supporter{FFFFFF}]");
				DutyLabel[playerid] = CreatePlayer3DTextLabel(playerid,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,playerid, INVALID_VEHICLE_ID, 0);
				return 1;
			}
			else if(sStats[playerid][sAdminlevel] == 1)
			{
				format(string,84,"{FFFFFF}[{FF0000}Moderator/Scout{FFFFFF}]");
				DutyLabel[playerid] = CreatePlayer3DTextLabel(playerid,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,playerid, INVALID_VEHICLE_ID, 0);
				return 1;
			}
			SetPVarInt(playerid, "Adminduty", 1);
			SetPlayerColor(playerid, Rot);
	}
	//NoTod
	if(sStats[playerid][sTod] == 0 && GetPVarInt(playerid, "NoTod") == 1)
	{
	    SetPVarInt(playerid,"NoTod",0);
	}
	//Wenn Haus = 0 aber Spawnchange = 1 gleiche auch bei Wohnwagen
	if(sStats[playerid][sHaus] == 255 && sStats[playerid][sSpawnChange] == 1 && sStats[playerid][sTutorial] == 1)
	{
		sStats[playerid][sSpawnChange] = 0;
	}
	if(sStats[playerid][sWohnwagen] == 0 && sStats[playerid][sSpawnChange] == 2 && sStats[playerid][sTutorial] == 1)
	{
		sStats[playerid][sSpawnChange] = 0;
	}
	//Spawnnachricht
	new nxtlevel = sStats[playerid][sLevel]+1;
	new expamount = nxtlevel*levelexp;
	new ptext[22];
	if(sStats[playerid][sPremium] == 1) { ptext = "{663300}Bronze"; }
	else if(sStats[playerid][sPremium] == 2) { ptext = "{999999}Silber"; }
	else if(sStats[playerid][sPremium] == 3) { ptext = "{FFcc00}Gold"; }
	else if(sStats[playerid][sPremium] == 0) { ptext = "{FFFFFF}Nein"; }
	if(sStats[playerid][sTutorial] == 1 && GetPVarInt(playerid, "Spawned") == 1 && GetPVarInt(playerid, "Spawnedlol") == 0 && GetPVarInt(playerid, "Ersterspawn") == 0 && PlayerPaintballing[playerid] == 0)
	{
		SetPVarInt(playerid, "Spawnedlol", 1);
		//Premiuminselmusik
		if(sStats[playerid][sPremium] > 0)
		{
			PlayAudioStreamForPlayer(playerid, "http://listen.housetime.fm/dsl.pls", -2290.3059,1958.2678,1.7871, 35.0, 1);
		}
		SendClientMessage(playerid, Gruen, "");
		SendClientMessage(playerid, Gruen, "--------------------------------------------------------------------------------");
		format(string, sizeof(string), "Willkommen bei {FFCC00}Bayside-Roleplay.de{FFFFFF}, {FFFFFF}%s.",GetName(playerid));
		SendClientMessage(playerid, Gelb,string);
		format(string, sizeof(string), "Level: {FFFFFF}%d.",sStats[playerid][sLevel]);
		SendClientMessage(playerid, Gelb,string);
		format(string, sizeof(string), "Erfahrungspunkte: {FFFFFF}%d/%d.",sStats[playerid][sErf],expamount);
		SendClientMessage(playerid, Gelb,string);
		if (sStats[playerid][sAdminlevel] > 0) {
			format(string, sizeof(string), "Adminlevel: {FFFFFF}%s",GetPlayerAdminRank(playerid));
			SendClientMessage(playerid, Gelb,string);
		}
		if (sStats[playerid][sPremium] > 0)
		{
			format(string, sizeof(string), "Premium: %s.",ptext);
			SendClientMessage(playerid, Gelb,string);
		}
		if(sStats[playerid][sPremiumZeit] > 0 && sStats[playerid][sPremium] > 0)
		{
		    new days,hours,mins;
		 	new premiumzeit = sStats[playerid][sPremiumZeit];
			new restzeit= premiumzeit -gettime();
		    days = floatround(restzeit / 86400,floatround_floor);
		    hours = restzeit - (days * 86400);
		    hours = floatround(hours / 3600,floatround_floor);
		    mins = restzeit - ( (days * 86400) + (hours * 3600) );
		    mins = floatround(mins / 60,floatround_floor);
			format(string, sizeof(string), "Verbleibende Premiumzeit: %d {FFFFFF}Tage.",days);
			SendClientMessage(playerid, Gelb,string);
		}
			SendClientMessage(playerid, Gruen, "---------------------------------------------------------------------------------");
	 		//Textdraws
			//Geld setzen
			GivePlayerEuro(playerid, sStats[playerid][sGeld]);
			//Geld Textdraw anzeigen
			PlayerTextDrawShow(playerid,Money3[playerid]);
			PlayerTextDrawShow(playerid,Money2[playerid]);
			PlayerTextDrawShow(playerid,Money[playerid]);
			//Uhr
			TextDrawShowForPlayer(playerid, Clock);
			TextDrawShowForPlayer(playerid, Script1);
			TextDrawShowForPlayer(playerid, Script2);
			//ad
	 		TextDrawShowForPlayer(playerid,Ad1);
			TextDrawShowForPlayer(playerid,Ad2);
			//Erster Spawn Variable setzen
		 	SetPVarInt(playerid, "Ersterspawn", 1);
		 	if(sStats[playerid][sGB] == 5)
		 	{
    			PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/bd.wav");
    			ClearChat(playerid);
			    SendClientMessage(playerid,Weiß,"Das Bayside-Roleplay.de Administratoren Team wünscht dir Happy Birthday,");
			    SendClientMessage(playerid,Weiß,"anbei erhältst du noch ein kleines Geldgeschenkt von uns!");
			    new randtime = 1250 + random (321);
			    GivePlayerEuro(playerid,randtime);
			    sStats[playerid][sGB] = 1;
			 	for(new i = 0; i < MAX_PLAYERS; i++)
			 	{
				    if(IsPlayerConnected(i) && sStats[i][sTutorial] == 1)
				    {
				        format(string, sizeof(string), "%s hat heute Geburtstag, herzlichen Glückwunsch und alles Gute ;)",GetName(playerid));
						SendClientMessage(i, Gelb,string);
					}
				}
		 	}
	}
 	//24/7 Rob wenn Server verlassen
 	if(sStats[playerid][sTutorial] == 1)
 	{
		if(sStats[playerid][s247Rob] == 1)
		{
		    sStats[playerid][s247Rob] = 0;
		    SendClientMessage(playerid,Gelb,"Dein 24/7 Überfall ist fehlgeschlagen da du den Server verlassen hast, 1 Wanted bleibt dir wegen versuchten Überfall!");
		}
		//Bank Rob wenn Server verlassen
		if(sStats[playerid][sBankRaub] == 1)
		{
		    sStats[playerid][sBankRaub] = 0;
		    SendClientMessage(playerid,Gelb,"Dein Bankraub ist fehlgeschlagen da du den Server verlassen hast, 1 Wanted bleibt dir wegen versuchten Überfall!");
		}
		//24/7 Rob wenn TimeOut
		if(sStats[playerid][s247Rob] > 0)
		{
		    Robber[playerid] = 1;
			format(string, sizeof(string), "Der gesuchte 24/7 Laden Räuber %s ist wieder online.",GetName(playerid));
			SendRadioMessage(1, COLOR_BLUE, string);
			SetPVarInt(playerid,"247Cash",sStats[playerid][s247Rob]);
			SetTimerEx("RobEndee247", 1500127, false, "d", playerid); // 25 Minuten
			SendClientMessage(playerid,Rot,"-----------------------------------------------------------------------------");
			SendClientMessage(playerid,Weiß,"Deine Statistik nach dem 24/7 Laden Überfall wurde wieder geladen,");
			SendClientMessage(playerid,Weiß,"du musst jetzt insg. 25 Minuten vor der Polizei flüchten damit sich deine Wanteds mindern.");
			SendClientMessage(playerid,Rot,"-----------------------------------------------------------------------------");
			sStats[playerid][s247Rob] = 0;
		}
		//Bankraub Rob wenn TimeOut
		if(sStats[playerid][sBankRaub] > 1)
		{
		    Robber[playerid] = 1;
			format(string, sizeof(string), "Der gesuchte Bankräuber %s ist wieder online.",GetName(playerid));
			SendRadioMessage(1, COLOR_BLUE, string);
			SetPVarInt(playerid,"BankGeld",sStats[playerid][sBankRaub]);
			SetPVarInt(playerid,"BankRaub",1);
			SendClientMessage(playerid,Rot,"-----------------------------------------------------------------------------");
			SendClientMessage(playerid,Weiß,"Deine Statistik nach dem Bankraub wurde wieder geladen,");
			SendClientMessage(playerid,Weiß,"du musst das Geld jetzt waschen, begebe dich dazu zur Geldwäscherei.");
			SendClientMessage(playerid,Rot,"-----------------------------------------------------------------------------");
	  		SetPlayerAttachedObject( playerid, 0, 1550, 1, 0.000000, -0.220224, 0.000000, 1.166815, 85.423309, 0.000000, 1.000000, 1.000000, 1.000000 ); //Geldsack an den Spieler hängen
			SetPlayerCheckpoint(playerid, 1026.5580,2365.8740,10.8203, 2.0); //Geld Wäsche
			QuestCP[playerid] = 955;
		}
	}
	//Wenn der Spieler einen anderen Spieler geworben hat
	if(sStats[playerid][sGeworbenNach] == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0)
	{
		SendClientMessage(playerid,Gelb2, "Einen Spieler welchen du geworben hast, hat erfolgreich Level 5 erreicht somit erhältst du deinen Premiumaccount im Wert von +1 Woche!");
		sStats[playerid][sGeworbenNach] = 0;
	    new days,hours,mins;
	 	new premiumzeit = sStats[playerid][sPremiumZeit];
		new restzeit= premiumzeit -gettime();
	    days = floatround(restzeit / 86400,floatround_floor);
	    hours = restzeit - (days * 86400);
	    hours = floatround(hours / 3600,floatround_floor);
	    mins = restzeit - ( (days * 86400) + (hours * 3600) );
	    mins = floatround(mins / 60,floatround_floor);
		format(string, sizeof(string), "Verbleibende Premiumlaufzeit : %d {FFFFFF}Tage.",days);
		SendClientMessage(playerid,Weiß,string);
	}
	//AntiSpawnkill
	if(sStats[playerid][sLevel] <= 3 && GetPVarInt(playerid, "Spawnkill") <= 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sJailed] == 0)
	{
	    new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPVarInt(playerid, "Spawnkill", 1);
		SpawnKilllabel[playerid] = Create3DTextLabel("SpawnKillSchutz aktiv",0x0C9BCBFF,X,Y,Z-0.4,15.0,0);
		Attach3DTextLabelToPlayer(SpawnKilllabel[playerid], playerid, 0.0, 0.0, 0.8);
		SetPlayerHealth(playerid,999.9);
		SetTimerEx("SpawnKillSchutzende", 15077, false, "d", playerid);
		SendClientMessage(playerid,Blau,"Dein Spawnkillschutz ist nun für 15 Sekunden aktiv!");
	}
	//Spawns
	//Bayside-Newstime Spawn
	if(sStats[playerid][sTutorial] == 1 && sStats[playerid][sSpawnChange] == 0 && sStats[playerid][sHotel] == 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0 ) //Fraktionsspawn und Normaler Spawn
	{
		SetFraktionsSpawn(playerid);
	}
	//Tod Krankenhausspawn
	if(sStats[playerid][sTod] == 1 && sStats[playerid][sTutorial] == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && sStats[playerid][sKrankenver] > 0)
	{
	    ClearChat(playerid);
	    SetPlayerVirtualWorld(playerid,playerid+1);
		SetPlayerPosEx(playerid,1230.0480,317.2171,-10.6867);
		SetPlayerFacingAngle(playerid,337.5666);
		SetPlayerCameraPos(playerid,1233.3658,322.7894,-11.7422);
		SetPlayerCameraLookAt(playerid,1233.1150,322.3973,-11.7422);
		TogglePlayerControllable(playerid, false);
		ApplyAnimation(playerid, "CRACK","crckdeth1", 4.0, 0, 1, 1, 1, 0, 1);
		SendClientMessage(playerid,Weiß,"Du bist gestorben und wirst nun im Krankenhaus behandelt.");
		SendClientMessage(playerid,Gelb2,"Die Behandlung dauert nur 30 Sekunden da du eine Krankenversicherung hast.");
		TodTimer[playerid] = SetTimerEx("NachBehandlung2",60133,false,"i",playerid);
		return 1;
	}
	//Tod Krankenhausspawn
	if(sStats[playerid][sTod] == 1 && sStats[playerid][sTutorial] == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && sStats[playerid][sKrankenver] == 0)
	{
	    ClearChat(playerid);
	    SetPlayerVirtualWorld(playerid,playerid+1);
		SetPlayerPosEx(playerid,1230.0480,317.2171,-10.6867);
		SetPlayerFacingAngle(playerid,337.5666);
		SetPlayerCameraPos(playerid,1233.3658,322.7894,-11.7422);
		SetPlayerCameraLookAt(playerid,1233.1150,322.3973,-11.7422);
		TogglePlayerControllable(playerid, false);
		SendClientMessage(playerid,Weiß,"Du bist gestorben und wirst nun im Krankenhaus behandelt.");
		SendClientMessage(playerid,Gelb2,"Die Behandlung dauert etwa 1 Minute.");
		TodTimer[playerid] = SetTimerEx("NachBehandlung2",120000,false,"i",playerid);
		ApplyAnimation(playerid, "CRACK","crckdeth1", 4.0, 0, 1, 1, 1, 0, 1);
		return 1;
	}
	//Gefängnissspawn
	if(sStats[playerid][sJailed] > 0 && sStats[playerid][sJailTime] > 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sTutorial] == 1)
	{
 		SetPlayerInterior(playerid, 10);
		new rand = random(sizeof(JailSpawns));
		SetPlayerPosEx(playerid, JailSpawns[rand][0], JailSpawns[rand][1], JailSpawns[rand][2]);
		SetPlayerFacingAngle(playerid,JailSpawns[rand][3]);
		format(string, sizeof(string), "Du hast deine Haftstrafe noch nicht abgesessen, und bist noch für %d Minuten im Gefängnis.",sStats[playerid][sJailTime]/60);
		SendClientMessage(playerid,Gelb2, string);
		return 1;
 	}
	//Im Haus spawnen
	if(sStats[playerid][sSpawnChange] == 2 && sStats[playerid][sWohnwagen] != 0 && sStats[playerid][sHotel] == 0 && sStats[playerid][sTutorial] == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0)
	{
		SetPlayerPosEx(playerid, 2404.993164, -1512.187500, 898.142944);
 		SetPlayerFacingAngle(playerid, 0);
  		SetCameraBehindPlayer(playerid);
    	SetPlayerInterior(playerid, 1);
		Injourney[playerid] = wohnwagen[playerid];
 		SetPlayerVirtualWorld(playerid,wohnwagen[playerid]);
		return 1;
	}
	//Im Haus spawnen
	if(sStats[playerid][sSpawnChange] == 1 && sStats[playerid][sHaus] != 255 && sStats[playerid][sHotel] == 0 && sStats[playerid][sTutorial] == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0)
	{
		SetPlayerInterior(playerid,HouseInt_Interior[HouseInfo[house][hInteriorID]]);
		SetPlayerPosEx(playerid, HouseInt_Spawn_X[HouseInfo[house][hInteriorID]],HouseInt_Spawn_Y[HouseInfo[house][hInteriorID]],HouseInt_Spawn_Z[HouseInfo[house][hInteriorID]]);
		SetPlayerVirtualWorld(playerid, house);
		return 1;
	}
	//Hotel Spawn
	if(sStats[playerid][sHotel] > 0 && sStats[playerid][sHaus] == -1 && sStats[playerid][sTutorial] == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0)
	{
		SetHotelSpawn(playerid);
		SetPlayerInterior(playerid, 15);
		return 1;
	}
	//Autoscooter Spawn
	if(GetPVarInt(playerid, "Autoscooter") != 0 && PlayerPaintballing[playerid] == 0 && sStats[playerid][sTutorial] == 1 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0)
	{
	    SetPVarInt(playerid, "Autoscooter", 0);
	    ClearChat(playerid);
	    SetPlayerPosEx(playerid,-2458.4407,2257.5825,4.9538);
	    SetPlayerFacingAngle(playerid,91.7514);
	    SendClientMessage(playerid,Gelb2,"Du bist aus dem Autoscootermatch ausgeschieden da du gestorben bist!");
	    ResetPlayerWeapons(playerid);
	    return 1;
	}
	//Paintball Spawn
	if(PlayerPaintballing[playerid] != 0 && sStats[playerid][sTutorial] == 1 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0)
	{
		 	ResetPlayerWeapons(playerid);
			SetPlayerWeather(playerid, 9);
			SetPaintballSpawn(playerid);
			SetPlayerHealth(playerid,100.0);
			TextDrawShowForPlayer(playerid,PBText);
			TextDrawHideForPlayer(playerid,Ad1);
			TextDrawHideForPlayer(playerid,Ad2);
			SetPVarInt(playerid, "Funmodus", 0);
			SetPVarInt(playerid, "Feuerpunch", 0);
			if(sStats[playerid][sPwaffe] == 2)
			{
				GivePlayerWeaponEx(playerid, 29, 999);
				return 1;
			}
			else if(sStats[playerid][sPwaffe] == 3)
			{
				GivePlayerWeaponEx(playerid, 28, 999);
				return 1;
			}
			else  if(sStats[playerid][sPwaffe] == 4)
			{
				GivePlayerWeaponEx(playerid, 25, 500);
				return 1;
			}
			else if(sStats[playerid][sPwaffe] == 5)
			{
				GivePlayerWeaponEx(playerid, 31, 500);
				return 1;
			}
			else if(sStats[playerid][sPwaffe] == 6)
			{
				ResetPlayerWeapons(playerid);
				SetPVarInt(playerid, "Superfaust", 1);
				return 1;
			}
		return 1;
	}
	//Wegen Airbrake
	SetPVarInt(playerid,"Airbrake", 0);
	SetPVarInt(playerid,"Airbrakew", 0);
	return 1;
}



public OnPlayerDeath(playerid, killerid, reason)
{
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new vehicleid;
	new vehiclemodel;
	new string[128];
	new bot = GetNearestBot(playerid, 5);
	//Debug Tod
	if(PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "NoTod") == 0)
	{
		//Todesvariabele setzen
		sStats[playerid][sTod] = 1;
		if (GetPVarInt(playerid, "CopDuty") == 1 || GetPVarInt(playerid, "SwatDuty") == 1)
		{
			if(sStats[playerid][sAdminlevel] < 5)
			{
				RemovePlayerAttachedObject(playerid,5);
			}
		}
		//Debug Animation
		ApplyAnimation(playerid, "CRACK","crckdeth1", 4.0, 1, 1, 1, 1, 0, 1);
	}
	//Swatduty
	SetPVarInt(playerid, "SwatDuty", 0);
	//Kadaver System
	if(PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "NoTod") == 0 && sStats[playerid][sTod] == 1 && GetPVarInt(playerid, "Adminduty") == 0)
	{
		new Float:pX,Float:pY,Float:pZ;
		GetPlayerPos(playerid, pX, pY, pZ);
		TotenKopf[playerid] = CreateDynamicPickup(1254,1, pX, pY, pZ);
		KadaverX[playerid] = pX;
		KadaverY[playerid] = pY;
		KadaverZ[playerid] = pZ;
		format(string, sizeof(string), "{FFFFFF}Leichnam von {FFFF00}%s",GetName(playerid));
		TotenKopfLabel[playerid] = CreateDynamic3DTextLabel(string,0xAAAAFFFF,pX,pY,pZ+1.0,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		if(sStats[playerid][sKrankenver] == 0)
		{
			Totentimer[playerid] = SetTimerEx("DeleteTotenkopf",60337,false,"i",playerid);
		}
		else if(sStats[playerid][sKrankenver] == 1)
		{
		    Totentimer[playerid] = SetTimerEx("DeleteTotenkopf",30029,false,"i",playerid);
		}
	}
	//Drogentod
	if(high[playerid] == 1)
	{
	    DrugsOff(playerid);
	    KillTimer(drugtimer[playerid]);
	}
	//NO DM
	if(sStats[killerid][sLevel] < 3 && !IsACop(killerid) && PlayerPaintballing[killerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && !IstInGangFight(killerid))
	{
		PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
		sStats[killerid][sJailed] = 1;
		sStats[killerid][sJailTime] = 300;
		sStats[killerid][sWanteds] = 0;
		SetPlayerWantedLevel(killerid,0);
		format(string, sizeof(string), "Dein Mörder %s wurde wegen SDM eingesperrt", GetName(playerid));
		SendClientMessage(playerid, Weiß, string);
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Warnung: Der Spieler %s wurde wegen SDM unter Level 2 eingesperrt", GetName(killerid));
		SendAdminMessage(Rot, string);
		format(string, sizeof(string), "* Du bist für %d Sekunden eingesperrt, wegen SDM unter Level 2.", sStats[killerid][sJailTime]);
		SendClientMessage(killerid, COLOR_LIGHTRED, string);
		SetPlayerInterior(killerid, 10);
		new rand = random(sizeof(JailSpawns));
		SetPlayerPosEx(killerid, JailSpawns[rand][0], JailSpawns[rand][1], JailSpawns[rand][2]);
		SetPlayerFacingAngle(killerid,JailSpawns[rand][3]);
		SaveSpieler(killerid);
	}
	if(IsPlayerInZonee(killerid,-2639.2, 2230.474, -2592.488, 2277.186))
	{
		PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
		sStats[killerid][sJailed] = 1;
		sStats[killerid][sJailTime] = 300;
		sStats[killerid][sWanteds] = 0;
		SetPlayerWantedLevel(killerid,0);
		format(string, sizeof(string), "Dein Mörder %s wurde wegen Mord in der NO-DM Zone eingesperrt", GetName(playerid));
		SendClientMessage(playerid, Weiß, string);
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Warnung: Der Spieler %s wurde wegen Mord in der NO DM-ZONE eingesperrt", GetName(killerid));
		SendAdminMessage(Rot, string);
		format(string, sizeof(string), "* Du bist für %d Sekunden eingesperrt, wegen Mord in der NO-DM Zone.", sStats[killerid][sJailTime]);
		SendClientMessage(killerid, COLOR_LIGHTRED, string);
		SpawnPlayer(killerid);
	}
	//Quest
	if(sStats[playerid][sQuest] == 4)
	{
	    SetPVarInt(playerid,"SniperQuest",0);
	    sStats[playerid][sQuest] = 3;
 	}
	if(sStats[playerid][sQuest] == 6)
	{
	    SetPVarInt(playerid,"Fotos",0);
	    SetPVarInt(playerid,"Kamera",0);
	    sStats[playerid][sQuest] = 5;
 	}
	if(sStats[playerid][sQuest] == 8)
	{
	    SetPVarInt(playerid,"Daten",0);
	    SetPVarInt(playerid,"Laptop",0);
	    sStats[playerid][sQuest] = 7;
 	}
	if(sStats[playerid][sQuest] == 10)
	{
	    SendClientMessage(playerid,Rot,"Quest fehlgeschlagen!");
	    SetPVarInt(playerid,"RainerMission",0);
   		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    Mission = 0;
    	for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	if(!strcmp(GetName(i),"Fernandez",true))
			{
				Kick(i);
	  		}
		 	if(!strcmp(GetName(i),"Rainer",true))
			{
				Kick(i);
	  		}
		}
 	}
	//Angelsystem
	if(GetPVarInt(playerid, "Angela") == 1)
	{
	    SetPVarInt(playerid,"Angela",0);
	}
	//Autofabrik 2
	if(GetPVarInt(playerid, "AutoPate") == 1)
	{
	    new rand = random(sizeof(PatenSpawns));
		new carslotidd = GetPVarInt(playerid, "Carslotid");
	    PlayerCar[playerid][carslotidd][cORotate] = PatenSpawns[rand][3];
		PlayerCar[playerid][carslotidd][cPos_x] = PatenSpawns[rand][0];
		PlayerCar[playerid][carslotidd][cPos_y] = PatenSpawns[rand][1];
		PlayerCar[playerid][carslotidd][cPos_z] = PatenSpawns[rand][2];
		PlayerCar[playerid][carslotidd][cNeon] = 0;
		PlayerCar[playerid][carslotidd][cTuev] = 0;
		Neonlichter[PlayerCar[playerid][carslotidd][cId]] = 0;
		UpdatePlayerCar(playerid);
		SetPVarInt(playerid, "Autopate", 0);
		SetPVarInt(playerid, "Carslot", 0);
		SetPVarInt(playerid, "Carslotid", 0);
	}
	//Tüv
	if(GetPVarInt(playerid, "InTuev") == 1)
	{
 		SetPVarInt(playerid, "InTuev", 0);
 		Tuev = 0;
	}
	//Wenn man im Intro stirbt
	if(GetPVarInt(playerid, "Flugzeugluke") == 1 && sStats[playerid][sTutorial] <= 0)
	{
 		SetPVarInt(playerid,"ImIntro",0);
 		SetPVarInt(playerid,"Flugzeugluke",1);
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    KillTimer(IntroTimer[playerid]);
	}
	//Wohnwagen
	Injourney[playerid] = 0;
	//Autoscooter
	if(GetPVarInt(playerid, "Autoscooter") != 0)
	{
		AutoscooterPlayers -= 1;
	}
	//Maske
	if(sStats[playerid][sMaske] == 1)
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
		RemovePlayerAttachedObject(playerid, 5);
		SetPVarInt(playerid,"Maske",0);
		sStats[playerid][sMaske] = 0;
	}
	//Farmer
	if(GetPVarInt(playerid, "Drogenanbauen") == 1)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		FarmerCP[playerid] = 0;
		DeletePVar(playerid, "Drogenanbauen");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,Rot,"Dein Drogenanbau wurde abgebrochen, da du gestorben bist!");
	}
	if(GetPVarInt(playerid, "Drogenabbauen") == 1)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		FarmerCP[playerid] = 0;
		DeletePVar(playerid, "Drogenabbauen");
		SendClientMessage(playerid,Rot,"Dein Drogenabbau wurde abgebrochen, da du gestorben bist!");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}
	if(GetPVarInt(playerid, "Kuhmelken") == 1)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		FarmerCP[playerid] = 0;
		DeletePVar(playerid, "Kuhmelken");
		SendClientMessage(playerid,Rot,"Dein Kuhmelken wurde abgebrochen, da du gestorben bist!");
	}
	//Nutte SM
	if(GetPVarInt(playerid, "SMSpiel") == 1)
	{
		if(!strcmp(GetName(bot),"Dominiquee",true))
		{
			UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{7fff00}Frei{FFFFFF}| <--");
			SetPVarInt(playerid,"SMSpiel",0);
			nutte = 0;
			Kick(bot);
			ConnectNPC("Dominique","nutte1");
		}
	}
	//Paintball
	if(PlayerPaintballing[playerid] != 0)
	{
		if(sStats[playerid][sPkills] > 0)
		{
			sStats[playerid][sPkills] -= 1;
		}
		sStats[killerid][sPkills] += 1;
		sStats[playerid][sPdeaths] += 1;
		sStats[killerid][sPpunkte] += 1;
		TextDrawHideForPlayer(playerid,PBText);
		TextDrawShowForPlayer(playerid,Ad1);
		TextDrawShowForPlayer(playerid,Ad2);
		{
			PlayerPaintballKills[killerid] ++;
			if(PlayerPaintballKills[killerid] > PaintballWinnerKills)
			{
				PaintballWinner = killerid;
				PaintballWinnerKills = PlayerPaintballKills[killerid];
				for(new i = 0; i < GetMaxPlayers(); i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerPaintballing[i] != 0)
						{
							format(string, sizeof(string), "* %s ist mit %d Kills in Führung.",GetName(killerid),PaintballWinnerKills);
							SendClientMessage(i, COLOR_WHITE, string);
							format(string,124,"~w~Paintball gerade am gewinnen: ~y~%s ~w~mit ~y~%d Kills.",GetName(killerid),PaintballWinnerKills);
							TextDrawSetString(PBText,string);
						}
					}
				}
			}
		}
		return 1;
	}
	//Nutte Blowjob
	if(GetPVarInt(playerid, "InDerShow") == 1)
	{
		if(!strcmp(GetName(bot),"Dominiqueee",true))
		{
			UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{7fff00}Frei{FFFFFF}| <--");
			SetPVarInt(playerid,"InDerShow",0);
			nutte = 0;
			Kick(bot);
			ConnectNPC("Dominique","nutte1");
		}
	}
	//Helm System
	if(sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 1)
	{
		RemovePlayerHelm(playerid);
		SetPVarInt(playerid, "Helm", 0);
	}
	//Sonnenbrille
	if(GetPVarInt(playerid, "Angezogen") == 1)
	{
		RemovePlayerAttachedObject(playerid,2);
		SetPVarInt(playerid,"Angezogen",0);
	}
	//Gangsterauto
	if (GetPVarInt(playerid, "GMusik") == 1)
	{
		StopAudioStreamForPlayer(playerid);
		SetPVarInt(playerid, "GMusik", 0);
	}
	//Speedo
	if(GetPVarInt(playerid, "Speedometer") == 1)
	{
		HideSpeedometer(playerid);
		KillTimer(timer2[playerid]);
	}
	//Drift
	if(GetPVarInt(playerid, "InDrift") == 1)
	{
		SetPVarInt(playerid,"InDrift",0);
		if(GetPVarInt(playerid, "StartDrift") == 1)
		{
			DisablePlayerCheckpoint(playerid);
			DestroyVehicle(DriftAuto[playerid]);
			SetPVarInt(playerid,"StartDrift",0);
			SetPlayerVirtualWorld(playerid,0);
			Driftzeit[playerid] = 0;
			Score[playerid] = 0;
			DestroyAllDriftCP(playerid);
			return 1;
		}
	}
	//Warnlicht
	if(Olicht[GetPlayerVehicleID(playerid)] == 1)
	{
		DestroyObject(light1[GetPlayerVehicleID(playerid)]);
		DestroyObject(light2[GetPlayerVehicleID(playerid)]);
		DestroyObject(light3[GetPlayerVehicleID(playerid)]);
		DestroyObject(light4[GetPlayerVehicleID(playerid)]);
		DestroyObject(light5[GetPlayerVehicleID(playerid)]);
		GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Warnlicht ~r~deaktiviert",3000, 5);
		Olicht[GetPlayerVehicleID(playerid)] = 0;
	}
	//Sirene
	if(UCL[GetPlayerVehicleID(playerid)] == 1)
	{
	    DestroyObject(sirene[GetPlayerVehicleID(playerid)]);
	    DestroyObject(sirene1[GetPlayerVehicleID(playerid)]);
	    DestroyObject(sirene2[GetPlayerVehicleID(playerid)]);
	    DestroyObject(sirene3[GetPlayerVehicleID(playerid)]);
	    DestroyObject(sirene4[GetPlayerVehicleID(playerid)]);
	    UCL[GetPlayerVehicleID(playerid)] = 0;
	}
	//Flugticket verlieren
	SetPVarInt(playerid,"Flugticket",0);
	//Arztkosten
	if(sStats[playerid][sKrankenver] > 0)
	{
		sStats[playerid][sArztkosten] = 0;
	}
	else
	{
		sStats[playerid][sArztkosten] += 100;
	}
	//Reinigungsmission
	if(sStats[playerid][sMission] > 0)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
		sStats[playerid][sMission] = 0;
		sStats[playerid][sMissionZeit] = gettime()+(2*60);
		RemovePlayerFromVehicle(playerid);
   		DestroyVehicle(Sweeper[playerid]);
		SendClientMessage(playerid,Weiß,"Deine Reinigungsmission wurde beendet, da du gestorben bist!");
	}
	//Fahrschule Führerscheinprüfung
	if(GetPVarInt(playerid, "InFschein") > 0)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		FscheinCP[playerid] = 0;
		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Führerscheines leider nicht bestanden, da du gestorben bist!");
		SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Führerschein Preises zurück bekommen!");
		KillTimer(rtimer[playerid]);
		SetPVarInt(playerid,"Nachricht",0);
		SetVehicleToRespawn(vehicleid);
		sStats[playerid][sAutoschein] = 0;
		GivePlayerEuro(playerid,600);
		SetPVarInt(playerid, "InFschein", 0);
	}
	//Fahrschule Truckerscheinprüfung
	if(GetPVarInt(playerid, "InTschein") > 0)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Truckerscheines leider nicht bestanden, da du gestorben bist!");
		SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Truckerschein Preises zurück bekommen!");
		DestroyVehicle(Truck[playerid]);
		GivePlayerEuro(playerid,4500);
		SetPVarInt(playerid, "InTschein", 0);
	}
	//Fahrschule Motorradprüfung
	if(GetPVarInt(playerid, "InMschein") > 0)
	{
		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Du bist leider bei der Motorradscheinprüfung durchgefallen, da du gestorben bist!");
		SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Motorradschein Preises zurück bekommen!");
		DisablePlayerCheckpoint(playerid);
		DestroyVehicle(MotorAuto[playerid]);
		FscheinCP[playerid] = 0;
		sStats[playerid][sMotorradschein] = 0;
		RemovePlayerHelm(playerid);
		SetPVarInt(playerid, "Helm", 0);
		sStats[playerid][sHelm] = 0;
		GivePlayerEuro(playerid,2500);
		SetPVarInt(playerid, "InMschein", 0);
	}
	//Fahrschule Anglerlizens
	if(GetPVarInt(playerid, "InAschein") == 1)
	{
		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil der Anglerlizens leider nicht bestanden, da du gestorben bist!");
		SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Anglerlizens Preises zurück bekommen!");
		SetPVarInt(playerid,"AVersuche",0);
		SetPVarInt(playerid, "FGefangen", 0);
		SetPVarInt(playerid, "Angela", 0);
		SetPVarInt(playerid, "InAschein", 0);
		sStats[playerid][sFisch] = 0;
		GivePlayerEuro(playerid,1600);
		KillTimer(AngelTimer[playerid]);
	}
	//Fahrschule Waffenscheinprüfung
	if(GetPVarInt(playerid, "InWschein") > 0)
	{
		//Durchgefallen
		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Du bist leider bei der Waffenscheinprüfung durchgefallen, da du gestorben bist!");
		SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Waffenschein Preises zurück bekommen!");
		GivePlayerEuro(playerid,5000);
		sStats[playerid][sWaffenschein] = 0;
		SetPVarInt(playerid, "InWschein", 0);
		DeletePlayer3DTextLabel(playerid,Target);
		Getroffen[playerid] = 0;
		WaffenscheinSchuss[playerid] = 0;
		WaffenscheinStep[playerid] = 0;
		Targets[playerid] = 0;
	}
	//Pferderennen
	if (Watching[playerid] == 1)
	{
		Watching[playerid] = 0;
		TextDrawHideForPlayer(playerid,BG2);
		TextDrawHideForPlayer(playerid,BG1);
		TextDrawHideForPlayer(playerid,Start2);
		TextDrawHideForPlayer(playerid,Finish2);
		TextDrawHideForPlayer(playerid, Horse1);
		TextDrawHideForPlayer(playerid,Horse2);
		TextDrawHideForPlayer(playerid,Horse3);
		TextDrawHideForPlayer(playerid,Horse4);
		TextDrawHideForPlayer(playerid,HorseNum1);
		TextDrawHideForPlayer(playerid,HorseNum2);
		TextDrawHideForPlayer(playerid,HorseNum3);
		TextDrawHideForPlayer(playerid,HorseNum4);
		TextDrawHideForPlayer(playerid,Start);
		TextDrawHideForPlayer(playerid,Finish);
		TogglePlayerControllable(playerid, true);
		PlayerTextDrawShow(playerid,Money3[playerid]);
		PlayerTextDrawShow(playerid,Money[playerid]);
		PlayerTextDrawShow(playerid,Money2[playerid]);
		TextDrawShowForPlayer(playerid,Clock);
		TextDrawShowForPlayer(playerid, Script1);
		TextDrawShowForPlayer(playerid, Script2);
		SetCameraBehindPlayer(playerid);
		MoneyBet[playerid] = 0;
		BetOnHorse[playerid] = 0;
	}
	//Anti Cheat Fake Kill
	if(XDeaths[playerid] == 0 && sStats[playerid][sLevel] <= 1)
	{
		LastDeath[playerid] = gettime();
	}
	XDeaths[playerid]++;
	if(XDeaths[playerid] == 5 && sStats[playerid][sLevel] <= 1)
	{
		if((gettime() - LastDeath[playerid]) <= 5)
		{
			SendClientMessage(playerid,Rot,"Du wurdest wegen Fake Killing vom Server gebannt!");
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gebannt. Grund: Fake Kill",day,month,year,hour,minute,second,GetName(playerid));
			CheatLog(string);
			SendClientMessageToAll(Rot,string);
			TogglePlayerControllable(playerid, false);
			SaveSpieler(playerid);
			BanEx(playerid,"Fake Kill");
		}else
		if((gettime() - LastDeath[playerid]) > 5)
		{
			XDeaths[playerid]=0;
		}
	}
	//Verbrecher jagt
	if(sStats[playerid][sWanteds] > 3 && IsACop(killerid))
	{
		ClearChat(playerid);
		PlayerPlaySound(killerid, 1139, 0.0, 0.0, 0.0);
		SendClientMessage(killerid,Gelb2,"Du hast den gesuchten Verbrecher geschnappt!");
		SendClientMessage(killerid,Gelb2,"Dir wird eine Prämie für den nächsten Zahltag gutgeschrieben.");
		SendClientMessage(playerid,Gelb2,"Du wurdest von der Polizei gestoppt!");
		sStats[playerid][sJailed] = 1;
		sStats[playerid][sJailTime] = sStats[playerid][sWanteds]*180;
		GivePlayerEuro(playerid,-sStats[playerid][sWanteds]*950);
		Staatskasse+=sStats[playerid][sWanteds]*950/2;
		sStats[killerid][sPreamie] += sStats[playerid][sWanteds]*950/2;
		sStats[playerid][sWanteds] = 0;
		SetPlayerWantedLevel(playerid,0);
		format(string, sizeof(string), "%s hat den Verbrecher %s geschnappt!", GetName(killerid), GetName(playerid));
		SendRadioMessage(1, COLOR_BLUE, string);
		new rand = random(sizeof(JailSpawns));
		SetPlayerPosEx(playerid, JailSpawns[rand][0], JailSpawns[rand][1], JailSpawns[rand][2]);
		SaveSpieler(playerid);
	}
	//24/7 Rob
	if(Robber[playerid] == 1 && IsACop(killerid))
	{
		ClearChat(playerid);
		PlayerPlaySound(killerid, 1139, 0.0, 0.0, 0.0);
		SendClientMessage(killerid,Gelb2,"Du hast den gesuchten 24/7 Räuber geschnappt!");
		SendClientMessage(killerid,Gelb2,"Dir wird eine Prämie für den nächsten Zahltag gutgeschrieben.");
		SendClientMessage(playerid,Gelb2,"Du wurdest von der Polizei gestoppt, dein Geld wird dir abgezogen!");
		StoreRobed[playerid] = 0;
		Robber[playerid] = 0;
		SetPlayerWantedLevel(playerid,0);
		sStats[killerid][sPreamie] += 1000;
		sStats[playerid][sWanteds] = 0;
		sStats[playerid][sJailed] = 1;
		sStats[playerid][sJailTime] = 900;
		sStats[playerid][s247Rob] = 0;
		format(string, sizeof(string), "%s hat den gesuchten 24/7 Laden Räuber %s geschnappt!", GetName(killerid), GetName(playerid));
		SendRadioMessage(1, COLOR_BLUE, string);
		GivePlayerEuro(playerid,-GetPVarInt(playerid, "247Cash"));
		Staatskasse+=GetPVarInt(playerid, "247Cash");
		BizzInfo[1][bTill] += GetPVarInt(playerid, "247Cash");
		SetPVarInt(playerid,"247Cash",0);
		SaveSpieler(playerid);
	}
	//24/7 Rob
	if(Robber[playerid] == 1 && killerid == playerid)
	{
		SendClientMessage(playerid,Gelb2,"Du bist gestorben,Dein 24/7 Überfall ist fehlgeschlagen, dein Geld wird dir abgezogen!");
		StoreRobed[playerid] = 0;
		Robber[playerid] = 0;
		SetPlayerWantedLevel(playerid,0);
		sStats[playerid][sWanteds] = 0;
		sStats[playerid][s247Rob] = 0;
		format(string, sizeof(string), "Der gesuchte 24/7 Laden Räuber %s ist gestorben!",GetName(playerid));
		SendRadioMessage(1, COLOR_BLUE, string);
		GivePlayerEuro(playerid,-GetPVarInt(playerid, "247Cash"));
		SetPVarInt(playerid,"247Cash",0);
	}
	//Bankraub
	if(GetPVarInt(playerid, "BankRaub") > 0 && IsACop(killerid))
	{
		ClearChat(playerid);
		PlayerPlaySound(killerid, 1139, 0.0, 0.0, 0.0);
		SendClientMessage(killerid,Gelb2,"Du hast den gesuchten Bankräuber geschnappt!");
		SendClientMessage(killerid,Gelb2,"Dir wird eine Prämie für den nächsten Zahltag gutgeschrieben.");
		SendClientMessage(playerid,Gelb2,"Du wurdest von der Polizei gestoppt, dein Geld wird dir abgezogen!");
		SetPlayerWantedLevel(playerid,0);
		sStats[killerid][sPreamie] += 1500;
		sStats[playerid][sWanteds] = 0;
		sStats[playerid][sJailed] = 1;
		sStats[playerid][sJailTime] = 1200;
		sStats[playerid][sBankRaub] = 0;
		format(string, sizeof(string), "%s hat den gesuchten Bankräuber %s geschnappt!", GetName(killerid), GetName(playerid));
		SendRadioMessage(1, COLOR_BLUE, string);
		GivePlayerEuro(playerid,-GetPVarInt(playerid, "BankGeld"));
		Staatskasse+=GetPVarInt(playerid, "BankGeld");
		SetPVarInt(playerid,"BankGeld",0);
		DeletePVar(playerid, "BankRaub");
		DisablePlayerCheckpoint(playerid);
		//Angehängte Objecte entfernen
		RemovePlayerAttachedObject(playerid,0);
		QuestCP[playerid] = 0;
		SaveSpieler(playerid);
	}
	//Bankräuber
	if(GetPVarInt(playerid, "BankRaub") > 0 && killerid == playerid)
	{
		DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
		SendClientMessage(playerid,Gelb2,"Du bist gestorben,dein Bankraub ist fehlgeschlagen, dein Geld wird dir abgezogen!");
		SetPlayerWantedLevel(playerid,0);
		sStats[playerid][sWanteds] = 0;
		sStats[playerid][sBankRaub] = 0;
		format(string, sizeof(string), "Der gesuchte Bankräuber %s ist gestorben!",GetName(playerid));
		SendRadioMessage(1, COLOR_BLUE, string);
		GivePlayerEuro(playerid,-GetPVarInt(playerid, "BankGeld"));
		DeletePVar(playerid, "BankGeld");
		DeletePVar(playerid, "BankRaub");
		//Angehängte Objecte entfernen
		RemovePlayerAttachedObject(playerid,0);
	}
	//Anti-Driveby
	if(GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
	{
		vehicleid = GetPlayerVehicleID(killerid);
		vehiclemodel = GetVehicleModel(vehicleid);
		if(IsPlayerInAnyVehicle(playerid)) { return true; }
		if(vehiclemodel == 425) { return true; } // Hunter
		if(vehiclemodel == 432) { return true; } // Rhino
		if(vehiclemodel == 447) { return true; } // Seasparrow
		if(vehiclemodel == 472) { return true; } // Not shure, I think Coastguard can shoot ?!?
		if(vehiclemodel == 520) { return true; } // Hydra
		SetPVarInt(playerid,"DriveBys",GetPVarInt(playerid, "DriveBys")+1);
		if(GetPVarInt(killerid, "DriveBys") > 3 && sStats[killerid][sAdminlevel] < 1)
		{
			getdate(year,month,day);
			gettime(hour,minute,second);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gekickt. Grund: Fahrer DriveBy",day,month,year,hour,minute,second,GetName(killerid));
			CheatLog(string);
			format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gekickt. Grund: Fahrer DriveBy", GetName(killerid));
			TogglePlayerControllable(killerid, false);
			SetPVarInt(killerid,"DriveBys",0);
			SaveSpieler(killerid);
			Kick(killerid);
			SendClientMessageToAll(Rot, string);
		}
		else
		{
			format(string, sizeof(string), "Warnung: %s[%d] ist im Verdacht Fahrer DriveBy zu machen!", GetName(killerid), killerid);
			SendAdminMessage(Rot, string);
			format(string, sizeof(string), "Warnung : Bitte unterlasse Fahrer DriveBys. Aktuelle Warnungen (%d/3).", GetPVarInt(killerid, "DriveBys"));
			SendClientMessage(playerid,Rot,string);
			RemovePlayerFromVehicle(killerid);
		}
	}
	if(GetPVarInt(playerid, "Adminduty") == 1 && sStats[playerid][sAdminlevel] > 0)
	{
 		DeletePlayer3DTextLabel(playerid,DutyLabel[playerid]);
	}
	//Brecheisen wegnehmen
	SetPVarInt(playerid,"Brecheisen",0);
	//Musik aus
	StopAudioStreamForPlayer(playerid);
	//Gangwar
	//Wenn mann im Gangfight stirbt
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsFightTime]){
			if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction]||
			GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction]) {
				sStats[playerid][sTod] = 0;
			}
		}
	}
	//Angehängte Objecte entfernen
	RemovePlayerAttachedObject(playerid,0);
	RemovePlayerAttachedObject(playerid,1);
	RemovePlayerAttachedObject(playerid,2);
	RemovePlayerAttachedObject(playerid,3);
	RemovePlayerAttachedObject(playerid,4);
	RemovePlayerAttachedObject(playerid,5);
	RemovePlayerAttachedObject(playerid,6);
	RemovePlayerAttachedObject(playerid,7);
	RemovePlayerAttachedObject(playerid,8);
	RemovePlayerAttachedObject(playerid,9);
	//Gangwar
	GW_OnPlayerDeath(playerid, killerid, reason);
	return 1;
}


public OnVehicleSpawn(vehicleid)
{
	//Hausfahrzeuge
	for(new h = 0; h < Houses_Index; h++)
	{
	    if(vehicleid == HouseInfo[h][hCID])
	    {
			Tankmenge[HouseInfo[h][hCID]] = GasMax[HouseInfo[h][hVec]-400];
			SetVehicleNumberPlate(HouseInfo[h][hCID], HouseInfo[h][hOwner]);
			SetVehicleLock(HouseInfo[h][hCID],0);
			HouseInfo[h][hCarlock] = 1;
			if(HouseInfo[h][hNitro] != 0)
			{
				if(CompatibleWithNitro(HouseInfo[h][hVec]))
				{
					if(HouseInfo[h][hNitro] == 1) { AddVehicleComponent(HouseInfo[h][hCID], 1009); } //Nitro 2x
					if(HouseInfo[h][hNitro] == 2) { AddVehicleComponent(HouseInfo[h][hCID], 1008); } //Nitro 5x
					if(HouseInfo[h][hNitro] == 3) { AddVehicleComponent(HouseInfo[h][hCID], 1010); } //Nitro 10x
				}
			}
		}
	}
	if(Neonlichter[vehicleid] > 0)
	{
	    if(Neonlichter[vehicleid] == 1)
	    {
    		rot1[vehicleid] = CreateObject(18647,0,0,0,0,0,0);
			rot2[vehicleid] = CreateObject(18647,0,0,0,0,0,0);
			AttachObjectToVehicle(rot1[vehicleid], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(rot2[vehicleid], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[vehicleid] = 1;
	    }
	    if(Neonlichter[vehicleid] == 2)
	    {
    		blau1[vehicleid] = CreateObject(18648,0,0,0,0,0,0);
			blau2[vehicleid] = CreateObject(18648,0,0,0,0,0,0);
			AttachObjectToVehicle(blau1[vehicleid], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(blau2[vehicleid], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[vehicleid] = 2;
	    }
	    if(Neonlichter[vehicleid] == 3)
	    {
    		gelb1[vehicleid] = CreateObject(18650,0,0,0,0,0,0);
			gelb2[vehicleid] = CreateObject(18650,0,0,0,0,0,0);
			AttachObjectToVehicle(gelb1[vehicleid], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(gelb2[vehicleid], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[vehicleid] = 3;
	    }
	    if(Neonlichter[vehicleid] == 4)
	    {
    		weis1[vehicleid] = CreateObject(18652,0,0,0,0,0,0);
			weis2[vehicleid] = CreateObject(18652,0,0,0,0,0,0);
			AttachObjectToVehicle(weis1[vehicleid], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(weis2[vehicleid], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[vehicleid] = 4;
	    }
	    if(Neonlichter[vehicleid] == 5)
	    {
    		pinke1[vehicleid] = CreateObject(18651,0,0,0,0,0,0);
			pinke2[vehicleid] = CreateObject(18651,0,0,0,0,0,0);
			AttachObjectToVehicle(pinke1[vehicleid], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(pinke2[vehicleid], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[vehicleid] = 5;
	    }
	    if(Neonlichter[vehicleid] == 6)
	    {
	       	grun1[vehicleid] = CreateObject(18649,0,0,0,0,0,0);
			grun2[vehicleid] = CreateObject(18649,0,0,0,0,0,0);
			AttachObjectToVehicle(grun1[vehicleid], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(grun2[vehicleid], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[vehicleid] = 6;
	    }
	}
	if(vehicleid == transporter)
	{
		SetVehicleLock(transporter,1);
		transporterwaffen = 0;
		transporterstatus = 1;
	}
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		//Wohnwagen
	 	if(sStats[i][sWohnwagen] == 1)
	  	{
		   	if(vehicleid == wohnwagen[i])
		    {
		        SetVehiclePos(wohnwagen[i],wohnwagenx[i], wohnwageny[i], wohnwagenz[i]);
		        SetVehicleZAngle(wohnwagen[i], wohnwagena[i]);
			}
		}
	}
	//Flugbot
	if(vehicleid == flugbot)
	{
 		new lightss,alarm,doors,bonnet,boot,objective;
		VehicleStarted[vehicleid] = 1;
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
 		SetVehicleNumberPlate(vehicleid,"Flughafen");
	    Tankmenge[vehicleid] = GasMax[GetVehicleModel(vehicleid)-400];
	}
	//Flugbot
	if(vehicleid == pveh)
	{
 		new lightss,alarm,doors,bonnet,boot,objective;
		VehicleStarted[vehicleid] = 1;
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
 		SetVehicleNumberPlate(vehicleid,"Premium");
	    Tankmenge[vehicleid] = GasMax[GetVehicleModel(vehicleid)-400];
	}
	//Tuning bei Fahrzeugen
	//Shooticar Adminbase
	if(vehicleid == shooticar)
	{
		AddVehicleComponent(shooticar,1026);//lsideskirt
		AddVehicleComponent(shooticar,1027);//rsideskirt
		AddVehicleComponent(shooticar,1028);//exhaust
		AddVehicleComponent(shooticar,1032);//roof vent
		AddVehicleComponent(shooticar,1138);//spoiler
		AddVehicleComponent(shooticar,1141);//rbumper
		AddVehicleComponent(shooticar,1141);//fbumper
		AddVehicleComponent(shooticar,1087);//hydrolics
		AddVehicleComponent(shooticar,1010);//nitro x10
		ChangeVehiclePaintjob(shooticar,1);
		neonshooti1 = CreateObject(18648,0,0,0,0,0,0);
		neonshooti2 = CreateObject(18648,0,0,0,0,0,0);
		AttachObjectToVehicle(neonshooti1, shooticar, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
  		AttachObjectToVehicle(neonshooti2, shooticar,  0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	}
	//Nemecar Adminbase
	if(vehicleid == nemecar)
	{
		AddVehicleComponent(nemecar,1026);//lsideskirt
		AddVehicleComponent(nemecar,1027);//rsideskirt
		AddVehicleComponent(nemecar,1028);//exhaust
		AddVehicleComponent(nemecar,1032);//roof vent
		AddVehicleComponent(nemecar,1138);//spoiler
		AddVehicleComponent(nemecar,1141);//rbumper
		AddVehicleComponent(nemecar,1141);//fbumper
		AddVehicleComponent(nemecar,1087);//hydrolics
		AddVehicleComponent(nemecar,1010);//nitro x10
		ChangeVehiclePaintjob(nemecar,0);
		neonneme1 = CreateObject(18648,0,0,0,0,0,0);
		neonneme2 = CreateObject(18648,0,0,0,0,0,0);
		AttachObjectToVehicle(neonneme1, nemecar, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	  	AttachObjectToVehicle(neonneme2, nemecar, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	}
	if(vehicleid == nemecar)
	{
	  	//Gangsterauto
		boxxen1 = CreateObject(2229,0.0,-0.0,-90.0,0,0,0);
		boxxen2 = CreateObject(2229,-0.0,-0.0,-90.0,0,0,0);
		gweiss1 = CreateObject(18652,0,0,0,0,0,0);
	 	gweiss2 = CreateObject(18652,0,0,0,0,0,0);
		AddVehicleComponent(gangstercar,1087);//hydrolics
		AddVehicleComponent(gangstercar,1010);//nitro x10
		AddVehicleComponent(gangstercar,1086);//soundanlage
		AttachObjectToVehicle(gweiss1, gangstercar, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	  	AttachObjectToVehicle(gweiss2, gangstercar, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(boxxen1, gangstercar, 0.10,-0.50,0.50,0,0,180);
	  	AttachObjectToVehicle(boxxen2, gangstercar,-0.69,-0.50,0.50,0,0,180);
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		new Float:Leben;
		GetPlayerHealth(i,Leben);
	    //Supportauto
	    if(GetPVarInt(i,"Supportveh") == 1)
	    {
		    if(vehicleid == SupportVeh[i])
		    {
				//Supportveh deleten
				DestroyVehicle(SupportVeh[i]);
				Delete3DTextLabel(supveh[i]);
				DestroyObject(SupportVehLight[i]);
				SendClientMessage(i,Gelb,"Dein Supportauto wurde zerstört!");
				SetPVarInt(i, "Supportveh", 0);
			}
		}
		//Garagen BSPD Autos
		if(Garagenauto[vehicleid])
		{
		    DestroyVehicle(Garagenauto[vehicleid]);
		}
		//Journey
	  	if(GetVehicleModel(vehicleid) == 519)
	    {
	        if(vehicleid == Injourney[i])
	        {
	        	if(Injourney[i] != 0)
	         	{
	 	      		new Float:pX,Float:pY,Float:pZ;
				 	GetPlayerPos(i, pX, pY, pZ);
				 	CreateExplosion(pX, pY, pZ, 1, 100.00);
				 	SetPlayerHealth(i,0.0);
				 	SetPlayerVirtualWorld(i,0);
	         	}
			}
      	}
		//Driftauto
  		if(GetPVarInt(i,"StartDrift") == 1)
	    {
		    if(vehicleid == DriftAuto[i] && Leben > 0.0)
		    {
				//Supportveh deleten
				DestroyVehicle(DriftAuto[i]);
				ClearChat(i);
				SendClientMessage(i,Weiß,"Dein Drift Fahrzeug wurde zerstört, somit endet dein Driftrennen!");
				SendClientMessage(i,Gelb2,"In 5 Sekunden wirst du zurück in die Driftlobby teleportiert!");
		        SetTimerEx("DriftRespawn",5101,false,"i",i);
			}
		}
	}
	//Sirene
	if(UCL[vehicleid] == 1)
	{
	    DestroyObject(sirene[vehicleid]);
	    DestroyObject(sirene1[vehicleid]);
	    DestroyObject(sirene2[vehicleid]);
	    DestroyObject(sirene3[vehicleid]);
	    DestroyObject(sirene4[vehicleid]);
	    UCL[vehicleid] = 0;
	}
	if(Neonlichter[vehicleid] > 0)
	{
	    if(Neonlichter[vehicleid] == 1)
	    {
	    	DestroyObject(rot1[vehicleid]);
	    	DestroyObject(rot2[vehicleid]);
	    }
	    if(Neonlichter[vehicleid] == 2)
	    {
	    	DestroyObject(blau1[vehicleid]);
	    	DestroyObject(blau2[vehicleid]);
	    }
	    if(Neonlichter[vehicleid] == 3)
	    {
	    	DestroyObject(gelb1[vehicleid]);
	    	DestroyObject(gelb2[vehicleid]);
	    }
	    if(Neonlichter[vehicleid] == 4)
	    {
	    	DestroyObject(weis1[vehicleid]);
	   	 	DestroyObject(weis2[vehicleid]);
	    }
	    if(Neonlichter[vehicleid] == 5)
	    {
	    	DestroyObject(pinke1[vehicleid]);
	    	DestroyObject(pinke2[vehicleid]);
	    }
	    if(Neonlichter[vehicleid] == 6)
	    {
	    	DestroyObject(grun1[vehicleid]);
	    	DestroyObject(grun2[vehicleid]);
	    }
	}
	if(vehicleid == nemecar)
	{
		DestroyObject(neonneme1);
		DestroyObject(neonneme1);
	}
	if(vehicleid == shooticar)
	{
		DestroyObject(neonshooti1);
		DestroyObject(neonshooti2);
	}
	if(vehicleid == gangstercar)
	{
		DestroyObject(gweiss1);
		DestroyObject(gweiss2);
		DestroyObject(boxxen1);
		DestroyObject(boxxen2);
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			if(GetPVarInt(i, "GMusik") == 1)
			{
		        StopAudioStreamForPlayer(i);
		        SetPVarInt(i, "GMusik", 0);
			}
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	//String
	new string[128];
	//Spielerleben ermitteln
	new Float:Leben;
	GetPlayerHealth(playerid,Leben);
	//Den Bot ermitteln
	new bot = GetNearestBot(playerid, 5);
	//AntiIP
	if(CheckPlayerText(playerid,text) == 0) { return 0; }
	//Während er beobachtet
	if(GetPVarInt(playerid, "Spectate") > 0)
	{
		SendClientMessage(playerid,Rot,"Du kannst während du jemanden beobachtest, nix schreiben!");
		return 0;
	}
	//Wenn der Spieler gemutet ist
	if(sStats[playerid][sMute] == 1)
	{
		SendClientMessage(playerid,Rot,"Du kannst nix schreiben, da du gemutet bist!");
		return 0;
	}
	//Noch nicht eingellogt
	if(sStats[playerid][sEingeloggt] == 0)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nix schreiben, solange du nicht eingeloggt bist!");
	    return 0;
 	}
	//Im Tutorial
	if(sStats[playerid][sTutorial] == 0)
	{
		SendClientMessage(playerid,Rot,"Du kannst nix schreiben, da du im Tutorial bist!");
		return 0;
	}
	//Im Tutorial
	if(sStats[playerid][sTod] == 1)
	{
		SendClientMessage(playerid,Rot,"Du kannst während du Tod bist nix schreiben!");
		return 0;
	}
	//Anti BadWords
	for(new i=0;i<sizeof(badwords);i++)
	{
		if(strfind(text,badwords[i],true) != -1 && sStats[playerid][sMute] == 0 && !IsPlayerNPC(playerid))
		{
			SendClientMessage(playerid,Rot,"Bitte unterlasse diese beledigenden Worte!");
			SetPVarInt(playerid, "Beleidigung", GetPVarInt(playerid, "Beleidigung")+1);
			format(string, sizeof(string), "Warnung: %s[%d] hat das Schimpfwort %s geschrieben!", GetName(playerid),playerid, badwords[i]);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat das Schimpfwort %s geschrieben.",day,month,year,hour,minute,second,GetName(playerid),badwords[i]);
			CheatLog(string);
			return 0;
		}
		if(GetPVarInt(playerid, "Beleidigung") == 3 && sStats[playerid][sMute] == 0)
		{
			format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gemutet für 5 Minuten. Grund: 3fache Beleidigung", GetName(playerid));
			SendClientMessageToAll(Rot, string);
			SendClientMessage(playerid,Rot,"Du wurdest wegen 3facher Beleidigung für 5 Minuten vom Server gemutet!");
			SetTimerEx("EndMute",300000,false,"i",playerid);
			sStats[playerid][sMute] = 1;
			SetPVarInt(playerid, "Beleidigung", 99);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gemutet. Grund: 3fache Beleidigung",day,month,year,hour,minute,second,GetName(i));
			CheatLog(string);
			return 0;
		}
	}
	//Handy Chat
	if(Mobile[playerid] != 255)
	{
		format(string, sizeof(string), "%s sagt (Handy): %s", GetName(playerid), text);
		ProxDetector(8.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		if(Mobile[Mobile[playerid]] == playerid && IsPlayerConnected(Mobile[playerid]))
		{
			SendClientMessage(Mobile[playerid],Gelb,string);
		}
		else
		{
			SendClientMessage(playerid, Rot,"TüT - TüT - Tüt die Leitung ist tod!");
			Mobile[playerid] = 0;
		}
		return 0;
	}
	//Premium Chat
	else if(text[0] == '!' && sStats[playerid][sPremium] > 0)
	{
	    new ptext[22];
		if(sStats[playerid][sPremium] == 1) { ptext = "{663300}Bronze"; }
		else if(sStats[playerid][sPremium] == 2) { ptext = "{999999}Silber"; }
		else if(sStats[playerid][sPremium] == 3) { ptext = "{FFcc00}Gold"; }
		format(string, sizeof(string), "{FFFFFF}Premium Chat | %s (%s{FFFFFF}) :{008080} %s.", GetName(playerid), ptext, text[1]);
		SendPremiumMessage(Weiß, string, 0);
		return 0;
	}
	//Adminchat
	else if(text[0] == '@' && sStats[playerid][sAdminlevel] >= 1)
	{
 		if(GetPVarInt(playerid, "Adminduty") == 0)
 		{
			SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um im Adminchat schreiben zu können!");
			return 0;
		}
		format(string, sizeof(string), "Admin Chat %s[%d]: %s.", GetName(playerid), playerid, text[1]);
		SendAdminMessage(Admin, string);
		return 0;
	}
	//Supportchat
	else if(GetPVarInt(playerid, "Support") == 1 || GetPVarInt(playerid, "Supportt") == 1)
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
	        if(DeinSupport[i] == playerid)
			{
		        new str[128];
		        format(str,sizeof(str),"Supportchat | %s: %s.",GetName(playerid),text);
		        SendClientMessage(i,COLOR_PURPLE,str);
		        SendClientMessage(playerid,COLOR_PURPLE,str);
		        return 0;
	        }
	    }
	}
	else if(GetPVarInt(playerid, "pChatten") == 1)
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
	        if(DeinChat[i] == playerid)
			{
		        new str[128];
		        format(str,sizeof(str),"{00FF3C}[WhatzzApp] {FFFFFF}%s: %s.",GetName(playerid),text);
		        SendClientMessage(i,Weiß,str);
		        return 0;
	        }
	    }
	}
	//Einweisungs Chat
	else if(GetPVarInt(playerid, "Einweisung") == 1 || GetPVarInt(playerid, "Einweisung2") == 1)
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
	        if(DeinEinweisung[i] == playerid)
			{
		        format(string,sizeof(string),"Einweisungschat | %s: %s.",GetName(playerid),text);
          		SendClientMessage(i,Gruen,string);
          		SendClientMessage(playerid,Gruen,string);
		        return 0;
	        }
	    }
	}
	//Notruf Feuerwehrchat
	else if(GetPVarInt(playerid, "InFW") == 1 || GetPVarInt(playerid, "FW2") == 1)
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
	        if(DeinFW[i] == playerid)
			{
		        format(string,sizeof(string),"Feuerwehrnotruf | %s: %s.",GetName(playerid),text);
          		SendClientMessage(i,Rot,string);
          		SendClientMessage(playerid,Rot,string);
		        return 0;
	        }
	    }
	}
	//Notruf Feuerwehrchat
	else if(GetPVarInt(playerid, "InP") == 1 || GetPVarInt(playerid, "P") == 1)
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
	        if(DeinP[i] == playerid)
			{
		        format(string,sizeof(string),"BSPD Notruf | %s: %s.",GetName(playerid),text);
          		SendClientMessage(i,Rot,string);
          		SendClientMessage(playerid,Rot,string);
		        return 0;
	        }
	    }
	}
	//Notruf Sanitäterchat
	else if(GetPVarInt(playerid, "InS") == 1 || GetPVarInt(playerid, "S2") == 1)
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
	        if(DeinS[i] == playerid)
			{
		        format(string,sizeof(string),"Bayside Medical-Center Notruf | %s: %s.",GetName(playerid),text);
          		SendClientMessage(i,SANIFARBE,string);
          		SendClientMessage(playerid,SANIFARBE,string);
		        return 0;
	        }
	    }
	}
	//Interview
	else if(TalkingLive[playerid] != 255)
	{
		if(IsACNN(playerid))
		{
		    format(string, sizeof(string), "BSNT %s: %s", GetName(playerid), text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		else
		{
		    format(string, sizeof(string), "BSNT Gast %s: %s", GetName(playerid), text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		return 0;
	}
	//Anruf Mechatroniker
	else if(GetPVarInt(playerid, "InM") == 1 || GetPVarInt(playerid, "M2") == 1)
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
	        if(DeinM[i] == playerid)
			{
		        format(string,sizeof(string),"Mechatronikeranruf | %s: %s.",GetName(playerid),text);
          		SendClientMessage(i,Rot,string);
          		SendClientMessage(playerid,Rot,string);
		        return 0;
	        }
	    }
	}
	//Normaler Chat
	if (realchat == 1)
	{
		//Botsystem
		//Beschäftigt
		if(sStats[playerid][sKrankheit] > 0 && IsAtRestaurant(playerid))
		{
		    SendClientMessage(playerid,Rot,"Du fühlst dich sehr Krank du willst jetzt nix mehr essen!");
		    return 0;
		}
		if(sStats[playerid][sKrankheit] > 0 && IsAtBar(playerid))
		{
		    SendClientMessage(playerid,Rot,"Du fühlst dich sehr Krank du willst jetzt nix mehr trinken!");
		    return 0;
		}
		if(BsnMenBusy == 1 && IsAtRestaurant(playerid))
		{
			SendClientMessage(playerid,0xFFFF00DD,"Burger Shot: {FFFFFF}Die Kassiererin ist gerade beschäftigt!");
			return 0;
		}
		if(PizzaMenBusy == 1 && IsAtRestaurant(playerid))
		{
			SendClientMessage(playerid,0xFFFF00DD,"Well Stacked Pizza: {FFFFFF}Der Kassierer ist gerade beschäftigt!");
			return 0;
		}
		if(BarMenBusy == 1 && IsAtBar(playerid))
		{
			SendClientMessage(playerid,0xFFFF00DD,"Barkeeper: {FFFFFF}Ich bin gerade beschäftigt tut mir leid!");
			return 0;
		}
		if(NorbertBusy == 1 && IsPlayerInRangeOfPoint(playerid,3,769.6943,-63.3271,1000.6635))
		{
			SendClientMessage(playerid,0xFFFF00DD,"Norbert: {FFFFFF}Warte kurz, ich trainiere gerade schon jemanden!");
			return 0;
		}
		if(BarMenBusy2 == 1 && IsAtBar(playerid))
		{
			SendClientMessage(playerid,0xFFFF00DD,"Barkeeper: {FFFFFF}Ich bin gerade beschäftigt tut mir leid!");
			return 0;
		}
		if(BarMenBusy2 == 3 && IsAtBar(playerid))
		{
			SendClientMessage(playerid,0xFFFF00DD,"Barkeeper: {FFFFFF}Ich bin gerade beschäftigt tut mir leid!");
			return 0;
		}
		if(MayaBusy == 1)
		{
			SendClientMessage(playerid,0xFFFF00DD,"Maya: Warte kurz ich bin gerade beschäftigt!");
			return 0;
		}
		if(DriveinMenBusy == 1 && IsPlayerInRangeOfPoint(playerid,3,-2460.5554,2231.0063,4.8438))
		{
		SendClientMessage(playerid,0xFFFF00DD,"DriveIn: {FFFFFF}Bitte warten Sie kurz!");
		return 0;
		}
		//Peter Dealer
		if(!strcmp(GetName(bot),"DDealer",true))
		{
			if(!strcmp(text,"Apple",true))
			{
					SetPlayerChatBubble(bot,"{FFFF00}Peter: {FFFFFF}Apple > alles",0xFFFF00DD,35.0,7020);
			}
		}
		//Der Pate
		if(!strcmp(GetName(bot),"AutoPate",true))
		{
			if(!strcmp(text,"Wo ist Dagmar?",true))
			{
			    if(Pate == 1)
			    {
			        SendClientMessage(playerid,Weiß,"{FFFF00}Autopate: {FFFFFF}Beruhige dich Ollum, siehste nicht das ich grade beschäftigt bin!");
			        return 0;
			    }
				SetPlayerChatBubble(bot,"{FFFF00}AutoPate: {FFFFFF}Der AutoPate kann jeden besamen muhahaha!",0xFFFF00DD,35.0,5009);
				ConnectNPC("Dagmar","dagmar");
				Pate = 1;
				SetTimer("StartDagmar", 5281, false);
				SetTimer("StopDagmar", 35051, false);
			}
		}
		//Driftstrecke Maya
		if(!strcmp(GetName(bot),"Maya",true))
		{
			if(!strcmp(text,"Ficken",true) || !strcmp(text,"ficken",true))
			{
				if(sStats[playerid][sGeschlecht] == 2)
				{
    			SendClientMessage(playerid,Rot,"Maya: Dieses Angebot gilt leider nicht Frauen!");
			    return 0;
				}
				    ClearAnimations(bot);
					SetPlayerChatBubble(bot,"{FFFF00}Maya: {FFFFFF}Ja habe gleich Feierabend geh schonmal ein Hotelzimmer mieten <3.",0xFFFF00DD,35.0,5020);
					SetTimerEx("MayaUnBusy",5119,false,"ii",bot,playerid);
					ApplyAnimation(bot, "GANGS","Invite_Yes", 4.0, 0, 1, 1, 1, 1, 1);
					MayaBusy = 1;
			}
			if(!strcmp(text,"Ellbogen zusammendrücken",true))
			{
				    ClearAnimations(bot);
					SetPlayerChatBubble(bot,"{FFFF00}Maya: {FFFFFF}hahaha guter Witz >.<.",0xFFFF00DD,35.0,5020);
					SetTimerEx("MayaUnBusy",5059,false,"ii",bot,playerid);
					ApplyAnimation(bot, "RAPPING","RAP_A_Loop", 4.0, 0, 1, 1, 1, 1, 1);
					MayaBusy = 1;
			}
			if(!strcmp(text,"Bitchslap",true))
			{
					SetPlayerChatBubble(bot,"{FFFF00}Maya: {FFFFFF}Aua :/",0xFFFF00DD,35.0,2020);
					SetTimerEx("MayaUnBusy",2281,false,"ii",bot,playerid);
					SetTimerEx("CleanAnimations",2333,false,"ii",playerid,playerid);
					ApplyAnimation(bot, "Attractors","Stepsit_loop", 4.0, 0, 1, 1, 1, 1, 1);
					ApplyAnimation(playerid, "MISC","bitchslap", 4.0, 0, 1, 1, 1, 1, 1);
					PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
					MayaBusy = 1;
			}
			if(!strcmp(text,"Blowjob",true) || !strcmp(text,"blasen",true) || !strcmp(text,"Keule schmatzen",true))
			{
				if(sStats[playerid][sGeschlecht] == 2)
				{
    				SendClientMessage(playerid,Rot,"Maya: Dieses Angebot gilt leider nicht Frauen!");
				    return 0;
				}
        			ClearAnimations(bot);
					SetPlayerChatBubble(bot,"{FFFF00}Maya: {FFFFFF}Immer her mit dem Prachtstück.",0xFFFF00DD,35.0,5192);
					ApplyAnimation(bot, "BLOWJOBZ","BJ_COUCH_START_W", 4.0, 0, 1, 1, 1, 1, 1);
					SetTimer("StartMayaBlow", 5693, false);
					SetTimerEx("MayaBlowEnd", 16091, false, "d", playerid);
					MayaBusy = 1;
					//Spieler
					TogglePlayerControllable(playerid, false);
					SetPlayerPosEx(playerid,-255.7990,1443.8947,119.6025);
					SetPlayerFacingAngle(playerid,235.2736);
					SetPlayerCameraPos(playerid,-260.7240,1440.9111,120.2559);
					SetPlayerCameraLookAt(playerid,-260.0539,1441.2477,120.2559);
			}
		}
		//Bars
		//Kirchen Bar
		if(!strcmp(GetName(bot),"Roman",true) && IsAtBar(playerid))
	    {
	    	if(!strcmp(text,"bier",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "bier";
			    SetPlayerChatBubble(bot,"Roman: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle7",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"champagner",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "champagner";
			    SetPlayerChatBubble(bot,"Roman: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle7",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"wein",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "wein";
			   	SetPlayerChatBubble(bot,"Roman: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle7",3121,false,"ii",bot,playerid);
			}
   			if(!strcmp(text,"vodka",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "vodka";
			    SetPlayerChatBubble(bot,"Roman: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle7",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"sprunk",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "sprunk";
			    SetPlayerChatBubble(bot,"Roman: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle7",3121,false,"ii",bot,playerid);
			}
		}
		//Adminbase Bar
		if(!strcmp(GetName(bot),"PaulDerBarkeeper",true) && IsAtBar(playerid))
	    {
	    	if(!strcmp(text,"bier",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "bier";
			    SetPlayerChatBubble(bot,"Paul: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle6",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"champagner",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "champagner";
			    SetPlayerChatBubble(bot,"Paul: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle6",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"wein",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "wein";
			   	SetPlayerChatBubble(bot,"Paul: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle6",3121,false,"ii",bot,playerid);
			}
   			if(!strcmp(text,"vodka",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "vodka";
			    SetPlayerChatBubble(bot,"Paul: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle6",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"sprunk",true))
			{
			    BarMenBusy = 1;
			    PlayerOrder[playerid] = "sprunk";
			    SetPlayerChatBubble(bot,"Paul: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
            	ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
            	SetTimerEx("GetBottle6",3121,false,"ii",bot,playerid);
			}
		}
		//Casino Bar1
		if(!strcmp(GetName(bot),"James",true) && IsAtBar(playerid))
		{
			if(!strcmp(text,"bier",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "bier";
				SetPlayerChatBubble(bot,"James: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle4",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"champagner",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "champagner";
				SetPlayerChatBubble(bot,"James: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle4",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"wein",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "wein";
				SetPlayerChatBubble(bot,"James: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle4",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"vodka",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "vodka";
				SetPlayerChatBubble(bot,"James: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle4",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"sprunk",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "sprunk";
				SetPlayerChatBubble(bot,"James: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle4",3121,false,"ii",bot,playerid);
			}
		}
		//Casino Bar2
		if(!strcmp(GetName(bot),"Semaj",true) && IsAtBar(playerid))
		{
			if(!strcmp(text,"bier",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "bier";
				SetPlayerChatBubble(bot,"Semaj: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle5",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"champagner",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "champagner";
				SetPlayerChatBubble(bot,"Semaj: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle5",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"wein",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "wein";
				SetPlayerChatBubble(bot,"Semaj: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle5",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"vodka",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "vodka";
				SetPlayerChatBubble(bot,"Semaj: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle5",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"sprunk",true))
			{
				BarMenBusy2 = 1;
				PlayerOrder[playerid] = "sprunk";
				SetPlayerChatBubble(bot,"Semaj: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle5",3121,false,"ii",bot,playerid);
			}
		}
		//Bsn Bar
		if(!strcmp(GetName(bot),"Jan",true) && IsAtBar(playerid))
		{
			if(!strcmp(text,"bier",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "bier";
				SetPlayerChatBubble(bot,"Jan: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle2",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"champagner",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "champagner";
				SetPlayerChatBubble(bot,"Jan: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle2",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"wein",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "wein";
				SetPlayerChatBubble(bot,"Jan: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle2",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"vodka",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "vodka";
				SetPlayerChatBubble(bot,"Jan: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle2",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"sprunk",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "sprunk";
				SetPlayerChatBubble(bot,"Jan: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle2",3121,false,"ii",bot,playerid);
			}
		}
		//Calligullas
		if(!strcmp(GetName(bot),"Phillip",true) && IsAtBar(playerid))
		{
			if(!strcmp(text,"bier",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "bier";
				SetPlayerChatBubble(bot,"Phillip: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle3",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"champagner",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "champagner";
				SetPlayerChatBubble(bot,"Phillip: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle3",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"wein",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "wein";
				SetPlayerChatBubble(bot,"Phillip: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle3",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"vodka",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "vodka";
				SetPlayerChatBubble(bot,"Phillip: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle3",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"sprunk",true))
			{
				BarMenBusy = 1;
				PlayerOrder[playerid] = "sprunk";
				SetPlayerChatBubble(bot,"Phillip: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBottle3",3121,false,"ii",bot,playerid);
			}
		}
		//Restaurants
		if(Leben == 100 && IsAtRestaurant(playerid))
		{
			SendClientMessage(playerid,Rot,"Du hast schon genug gegessen!");
			return 0;
		}
		//BSN
		if(!strcmp(GetName(bot),"Tatjana",true) && IsAtRestaurant(playerid))
		{
			if(!strcmp(text,"KidsMenü",true))
			{
			    if(BizzInfo[7][bProducts] < 15)
				{
				    SetPlayerChatBubble(bot,"Tatjana: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				BsnMenBusy = 1;
				PlayerOrder[playerid] = "KidsMenü";
				SetPlayerChatBubble(bot,"Tatjana: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBsn",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"MaxiMenü",true))
			{
   				if(BizzInfo[7][bProducts] < 15)
				{
				    SetPlayerChatBubble(bot,"Tatjana: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				BsnMenBusy = 1;
				PlayerOrder[playerid] = "MaxiMenü";
				SetPlayerChatBubble(bot,"Angelina: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBsn",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Cheeseburger ohne Cheese",true))
			{
   				if(BizzInfo[7][bProducts] < 15)
				{
				    SetPlayerChatBubble(bot,"Tatjana: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				BsnMenBusy = 1;
				PlayerOrder[playerid] = "Cheeseburger ohne Cheese";
				SetPlayerChatBubble(bot,"Angelina: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBsn",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Salat",true))
			{
   				if(BizzInfo[7][bProducts] < 15)
				{
				    SetPlayerChatBubble(bot,"Tatjana: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				BsnMenBusy = 1;
				PlayerOrder[playerid] = "Salat";
				SetPlayerChatBubble(bot,"Angelina: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBsn",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"KingMenü",true))
			{
   				if(BizzInfo[7][bProducts] < 15)
				{
				    SetPlayerChatBubble(bot,"Tatjana: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				BsnMenBusy = 1;
				PlayerOrder[playerid] = "KingMenü";
				SetPlayerChatBubble(bot,"Angelina: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetBsn",3121,false,"ii",bot,playerid);
			}

		}
		//Pizza
		if(!strcmp(GetName(bot),"Hugo",true) && IsAtRestaurant(playerid))
		{
			if(!strcmp(text,"Margarita",true))
			{
				if(BizzInfo[7][bProducts] < 16)
				{
				    SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				PizzaMenBusy = 1;
				PlayerOrder[playerid] = "Margarita";
				SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetPizza",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Salami",true))
			{
				if(BizzInfo[7][bProducts] < 16)
				{
				    SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				PizzaMenBusy = 1;
				PlayerOrder[playerid] = "Salami";
				SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetPizza",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Thunfisch",true))
			{
				if(BizzInfo[7][bProducts] < 16)
				{
				    SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				PizzaMenBusy = 1;
				PlayerOrder[playerid] = "Thunfisch";
				SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetPizza",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Peperoni",true))
			{
				if(BizzInfo[7][bProducts] < 16)
				{
				    SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				PizzaMenBusy = 1;
				PlayerOrder[playerid] = "Peperoni";
				SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetPizza",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Hawaii",true))
			{
				if(BizzInfo[7][bProducts] < 16)
				{
				    SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Tut mir leid wir haben keine Zutaten mehr",0xFFFF00DD,35.0,3000);
				    return 1;
				}
				PizzaMenBusy = 1;
				PlayerOrder[playerid] = "Hawaii";
				SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Kleinen Moment bitte...",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "BAR","Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetPizza",3121,false,"ii",bot,playerid);
			}

		}
		//MCFit
		if(!strcmp(GetName(bot),"Norbert",true) && IsPlayerInRangeOfPoint(playerid,3,769.6943,-63.3271,1000.6635))
		{
			if(!strcmp(text,"Boxxen",true))
			{
				NorbertBusy = 1;
				PlayerOrder[playerid] = "Boxxen";
				SetPlayerChatBubble(bot,"Norbert: {FFFFFF}Kleinen Moment bitte, ich muss noch meine Muskeln anspannen .... Huarrr!",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "FIGHT_B","FightB_block", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetKampf",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Kungfu",true))
			{
				NorbertBusy = 1;
				PlayerOrder[playerid] = "Kungfu";
				SetPlayerChatBubble(bot,"Norbert: {FFFFFF}Kleinen Moment bitte, ich muss noch meine Muskeln anspannen .... Huarrr!",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "FIGHT_B","FightB_block", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetKampf",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Ellbogen",true))
			{
				NorbertBusy = 1;
				PlayerOrder[playerid] = "Ellbogen";
				SetPlayerChatBubble(bot,"Norbert: {FFFFFF}Kleinen Moment bitte, ich muss noch meine Muskeln anspannen .... Huarrr!",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "FIGHT_B","FightB_block", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetKampf",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Grabkick",true))
			{
				NorbertBusy = 1;
				PlayerOrder[playerid] = "Grabkick";
				SetPlayerChatBubble(bot,"Norbert: {FFFFFF}Kleinen Moment bitte, ich muss noch meine Muskeln anspannen .... Huarrr!",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "FIGHT_B","FightB_block", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetKampf",3121,false,"ii",bot,playerid);
			}
			if(!strcmp(text,"Kneehead",true))
			{
				NorbertBusy = 1;
				PlayerOrder[playerid] = "Kneehead";
				SetPlayerChatBubble(bot,"Norbert: {FFFFFF}Kleinen Moment bitte, ich muss noch meine Muskeln anspannen .... Huarrr!",0xFFFF00DD,35.0,3000);
				ApplyAnimation(bot, "FIGHT_B","FightB_block", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("GetKampf",3121,false,"ii",bot,playerid);
			}

		}
		//UC Chat
		if(GetPVarInt(playerid,"Maske") == 0)
		{
			format(string, sizeof(string), "%s sagt: %s", GetName(playerid), text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			return 0;
		}
		else
		{
			format(string, sizeof(string), "? sagt: %s", text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			return 0;
		}
		//return 0;
	}
	return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}

//Quest
command(questwh, playerid, params[])
{
	if(sStats[playerid][sQuest] == 0)
	{
	    SendClientMessage(playerid,Rot,"Zurzeit befindest du dich in keiner Quest!");
	    return 1;
	}
    //Quests
    #pragma unused params
 	if(sStats[playerid][sQuest] == 3 && sStats[playerid][sLevel] > 1 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
    {
        sStats[playerid][sQuest] = 4;
   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: jo Bro, es gibt da ein kleines Problem um das du dich kümmern müsstest!");
	    SendClientMessage(playerid, COLOR_YELLOW, "Son Azzlack verkauft Drogen in meinem Revier ich hab dem schon öfters gesagt das er sich aus meiner Hood verpissen soll.");
	    SendClientMessage(playerid, COLOR_YELLOW, "Aber er will nicht lernen, begib dich bitte zum Startower, und erledige diesen **** für mich!");
	    SendClientMessage(playerid, COLOR_ORANGE, "Meine Männer haben da schon alles vorbereitet. Viel Glück!");
   		SetPlayerCheckpoint(playerid, 1544.3213,-1354.3120,329.4726, 4.0);
		QuestCP[playerid] = 800;
		return 1;
    }
    if(sStats[playerid][sQuest] == 5 && sStats[playerid][sLevel] > 2  && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
    {
        sStats[playerid][sQuest] = 6;
   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Es gibt große Probleme komm am besten mal dringen vorbei!");
	    SendClientMessage(playerid, COLOR_ORANGE, "Info: Begebe dich nach Jack und benutze /jackr");
	    return 1;
    }
    if(sStats[playerid][sQuest] == 7 && sStats[playerid][sLevel] > 3 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
    {
        sStats[playerid][sQuest] = 8;
        SetPVarInt(playerid,"Laptop",0);
   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Ich habe da eine Idee wie wir mehr über den Leader der MS-14 Gang herrausbekommen.");
	    SendClientMessage(playerid, COLOR_YELLOW, "Komm mal bei mir vorbei und hole dir meinen Laptop ab, mithilfe dessen du versuchen kannst den Hauptcomputer des Bayside Police Department zu hacken,");
	    SendClientMessage(playerid, COLOR_YELLOW, "um einige Informationen herraus zu finden. Also bis gleich !!! (/laptop)");
	    return 1;
    }
    if(sStats[playerid][sQuest] == 9 && sStats[playerid][sLevel] > 3 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
    {
        sStats[playerid][sQuest] = 10;
   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Ey komm schnell vorbei ich brauche dringend deine Hilfe!");
	    SendClientMessage(playerid, COLOR_YELLOW, "Meine Freund Rainer wurde von der MS-14 Gang entführt und wird auf deren Transportschiff festgehalten.");
	    SendClientMessage(playerid, COLOR_YELLOW, "du musst ihm umbedingt befreien, komm zu mir und ich bringe dich zu diesem Schiff. (/startmission)");
	    return 1;
    }
    return 1;
}
//Licht
command(licht, playerid, params[])
{
    #pragma unused params
	new vid = GetPlayerVehicleID(playerid);
	new engine,lightss,alarm,doors,bonnet,boot,objective;
	if(IsPlayerInAnyVehicle(playerid) && MotorKaputt[vid] == 0 && GetVehicleModel(vid) != 481 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleStarted[vid] == 1)
	{
		if(VehicleStarted[vid] == 0)
		{
		    SendClientMessage(playerid,Rot,"Bitte starte zuerst deinen Motor!");
		    return 1;
		}
		if(VehicleLights[vid] == 0)
		{
		    VehicleLights[vid] = 1;
		    GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
   			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Licht ~r~an!", 2000, 5);
			return 1;
		}
		else
		{
		    VehicleLights[vid] = 0;
		    GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Licht ~r~aus!", 2000, 5);
		    return 1;
		}
	}
	return 1;
}

//Motorsystem
command(motor, playerid, params[])
{
    #pragma unused params
    new engine,lightss,alarm,doors,bonnet,boot,objective;
	new vid = GetPlayerVehicleID(playerid),string[128];
	if(IsPlayerInAnyVehicle(playerid) && MotorKaputt[vid] == 0 && GetVehicleModel(vid) != 481 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(Tankmenge[GetPlayerVehicleID(playerid)] <= 0)
		{
			SendClientMessage(playerid,Rot,"Du kannst den Motor dieses Fahrzeuges nicht starten, der Tank ist leer!");
			return 1;
		}
		if(VehicleStarted[vid] == 1)
		{
			VehicleStarted[vid] = 0;
			SetRadioStation(GetPlayerVehicleID(playerid),0);
			format(string, sizeof(string), "* %s hat den Motor seinen Fahrzeuges ausgeschaltet!", GetName(playerid));
			ProxDetector(5.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessage(playerid,Rot,"Du hast deinen Motor ausgeschaltet!");
			GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vid,VEHICLE_PARAMS_OFF,lightss,alarm,doors,bonnet,boot,objective);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Motor ~r~aus!", 2000, 5);
			HideSpeedometer(playerid);
			return 1;
		}
		else if(VehicleStarted[vid] == 0)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new Float:vhealth;
			GetVehicleHealth(vehicleid,vhealth);
			if(vhealth >= 200)
			{
				//Towtruck Nachricht
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525 && sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1)
				{
					SetTimerEx("TowtruckAnzeige",941,false,"i",playerid);
				}
				//Helmsystem
				if(IsAHelmBike(GetPlayerVehicleID(playerid)) && sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 0)
				{
					SetPlayerHelm(playerid);
					SetPVarInt(playerid, "Helm", 1);
				}
				if(!IsABoat(vid) && !IsAPlane(vid))
				{
					PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motoryes.wav");
				}
				VehicleStarted[vid] = 1;
				format(string, sizeof(string), "* %s hat den Motor seines Fahrzeuges erfolgreich gestartet!", GetName(playerid));
				ProxDetector(5.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid,Gruen,"Du hast den Motor erfolgreich gestartet!");
				GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Motor ~g~an!", 2000, 5);
				ShowSpeedometer(playerid);
				UpdateSpeedometer(playerid);
				//Tanksystem
				if(IsABike(GetPlayerVehicleID(playerid)))
				{
					KillTimer(timer2[playerid]);
					timer2[playerid] = SetTimerEx("TankTimer",50231,true,"i",playerid);
				}
				else
				{
					KillTimer(timer2[playerid]);
					timer2[playerid] = SetTimerEx("TankTimer",25169,true,"i",playerid);
				}
				return 1;
			}
			else
			{
				new rand = random(7);
				if(rand < 3)
				{
					if(!IsABoat(vid) && !IsAPlane(vid))
					{
						PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motorno.wav");
					}
					VehicleStarted[vid] = 0;
					format(string, sizeof(string), "* %s versucht den Motor seines Fahrzeuges zu starten!", GetName(playerid));
					ProxDetector(5.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,Rot,"Starten des Motors fehlgeschlagen!");
					return 1;
				}
				else
				{
					if(!IsABoat(vid) && !IsAPlane(vid))
					{
						PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motorno.wav");
					}
					//Towtruck Nachricht
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525 && sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1)
					{
						SetTimerEx("TowtruckAnzeige",991,false,"i",playerid);
					}
					//Helmsystem
					if(IsAHelmBike(GetPlayerVehicleID(playerid)) && sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 0)
					{
						SetPlayerHelm(playerid);
						SetPVarInt(playerid, "Helm", 1);
					}
					if(!IsABoat(vid) && !IsAPlane(vid))
					{
						PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motoryes.wav");
					}
					VehicleStarted[vid] = 1;
					format(string, sizeof(string), "* %s hat den Motor seines Fahrzeuges erfolgreich gestartet!", GetName(playerid));
					ProxDetector(5.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,Gruen,"Du hast den Motor erfolgreich gestartet!");
					GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Motor ~g~an!", 2000, 5);
					ShowSpeedometer(playerid);
					UpdateSpeedometer(playerid);
					//Tanksystem
					if(IsABike(GetPlayerVehicleID(playerid)))
					{
						KillTimer(timer2[playerid]);
						timer2[playerid] = SetTimerEx("TankTimer",50587,true,"i",playerid);
					}
					else
					{
						KillTimer(timer2[playerid]);
						timer2[playerid] = SetTimerEx("TankTimer",23899,true,"i",playerid);
					}
					return 1;
				}
			}
		}
	}
	return 1;
}

//BSPD Klingel
command(klingeln, playerid, params[])
{
    #pragma unused params
	new string[128];
	new days,hours,mins;
	new wartezeit = GetPVarInt(playerid, "Cooldown4");
	new restzeit= wartezeit -gettime();
	days = floatround(restzeit / 86400,floatround_floor);
	hours = restzeit - (days * 86400);
	hours = floatround(hours / 3600,floatround_floor);
	mins = restzeit - ( (days * 86400) + (hours * 3600) );
	mins = floatround(mins / 60,floatround_floor);
	if(IsPlayerInRangeOfPoint(playerid,3.5, 1563.4691,-1683.8550,1724.4288))
	{
		format(string, sizeof(string), "%s betätigt die Klingel.", GetName(playerid));
		ProxDetector(7.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		if(GetPVarInt(playerid, "Cooldown4") != 0)
		{
			format(string, sizeof(string), "Du musst noch %d Minuten warten, bevor du wieder klingeln kannst!",mins);
			SendClientMessage(playerid,Rot,string);
			return 1;
		}
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
  		    if(GetPlayerInterior(i) == 10)
  		    {
				PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/klingel.wav");
			}
		}
		SetPVarInt(playerid,"Cooldown4",gettime()+(60*5));
		format(string, sizeof(string), "%s hat die Klingel, in der Eingangshalle betätigt.", GetName(playerid));
		SendRadioMessage(1,COLOR_DBLUE,string);
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht bei der Klingel!");
	    return 1;
	}
}
//Setage
command(setage,playerid,params[])
{
	new alter,string[128];
	if(sStats[playerid][sAlter] > 17)
	    return SendClientMessage(playerid,Rot,"Du kannst dein Alter nicht mehr verändern!");
	if(sStats[playerid][sLevel] > 2)
	    return SendClientMessage(playerid,Rot,"Du kannst dein Alter nicht mehr verändern!");
    if(sscanf(params,"d",alter))return SendClientMessage(playerid, Weiß,"Befehl: /setage [Alter]");

    sStats[playerid][sAlter] = alter;
	format(string, sizeof(string), "Du hast dein Alter erfolgreich auf %d Jahre gesetzt", alter);
	SendClientMessage(playerid,Gelb, string);
	return 1;
}
//Flüstern
command(w, playerid, params[])
{
	new string[128],id;

	if(sscanf(params,"su",string,id))return SendClientMessage(playerid, Weiß,"Befehl: /f [Nachricht] [Name/Spielerid]");

	if(CheckPlayerText(playerid,string) == 0) { return 1; }

	if(sStats[playerid][sMute] == 1)
	    return SendClientMessage(playerid,Rot,"Du kannst diesen Chat nicht nutzen solange du gemutet bist!");

	if (ProxDetectorS(3.0, playerid, id))
	{
		format(string, sizeof(string), "%s(ID: %d) flüstert: %s", GetName(playerid), playerid, string);
		SendClientMessage(id, Gelb, string);
		format(string, sizeof(string), "Du flüsterst zu %s(ID: %d).", GetName(id), id);
		SendClientMessage(playerid,  Gelb, string);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe des Spielers!");
	    return 1;
	}
}
//Schreien
command(s, playerid, params[])
{
	new string[128];

	if(sscanf(params,"s",string))return SendClientMessage(playerid, Weiß,"Befehl: /s [Nachricht]");

	if(CheckPlayerText(playerid,string) == 0) { return 1; }

	if(sStats[playerid][sMute] == 1)
	    return SendClientMessage(playerid,Rot,"Du kannst diesen Chat nicht nutzen solange du gemutet bist!");

	format(string, sizeof(string), "%s schreit: %s",GetName(playerid),string);
	ProxDetector(12.0, playerid, string,Weiß,Weiß,Weiß,Weiß,Weiß);
	return 1;
}
command(b, playerid, params[])
{
	new string[128];
	if(sStats[playerid][sSpielstunden] < 1)
	    return SendClientMessage(playerid,Rot,"Du benötigst mind. 1 Spielstunde um diesen Chat benutzen zu können!");

	if(sscanf(params,"s",string))return SendClientMessage(playerid, Weiß,"Befehl: /b [Nachricht]");

	if(CheckPlayerText(playerid,string) == 0) { return 1; }

	if(nob == 1) return SendClientMessage(playerid, Rot, "Der /b Chat wurde von einem Administrator gesperrt.");

	if(sStats[playerid][sMute] == 1)
	    return SendClientMessage(playerid,Rot,"Du kannst diesen Chat nicht nutzen solange du gemutet bist!");

	format(string, sizeof(string), "(( %s: %s ))",GetName(playerid),string);
	ProxDetector(12.0, playerid, string,0xD2D2D2FF,0xD2D2D2FF,0xD2D2D2FF,0xD2D2D2FF,0xD2D2D2FF);
	return 1;
}
//ID
command(id, playerid, params[])
{
    #pragma unused params
	new id,string[130];
	if(sscanf(params,"u",id))return SendClientMessage(playerid, Weiß,"Befehl: /id [Name/ID]");
	if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(id))
	    return SendClientMessage(playerid,Rot,"Du kannst diesen Befehl, nicht auf einen NPC/Bot ausführen!");

	SendClientMessage(playerid,Weiß,"Spielerinformationen:");
	format(string, sizeof(string), "Spielername: %s",GetName(id));
	SendClientMessage(playerid,Gelb,string);
	format(string, sizeof(string), "Spielerid: %d",id);
	SendClientMessage(playerid,Gelb,string);
	return 1;
}
//Für unsere Videomaker
command(videomode, playerid, params[])
{
    #pragma unused params
    if(sStats[playerid][sTutorial] == 0)
        return 1;
   	if(GetPVarInt(playerid, "Videomode") == 0)
	{
	    ClearChat(playerid);
	    SendClientMessage(playerid,Gelb,"Videomode aktiviert!");
	    SetPVarInt(playerid,"Videomode",1);
   		PlayerTextDrawHide(playerid,Money3[playerid]);
		PlayerTextDrawHide(playerid,Money2[playerid]);
		PlayerTextDrawHide(playerid,Money[playerid]);
		TextDrawHideForPlayer(playerid, Clock);
		TextDrawHideForPlayer(playerid, Script1);
		TextDrawHideForPlayer(playerid, Script2);
		TextDrawHideForPlayer(playerid,Ad1);
		TextDrawHideForPlayer(playerid,Ad2);
		return 1;
	}
	else if(GetPVarInt(playerid, "Videomode") == 1)
	{
	    ClearChat(playerid);
	    SendClientMessage(playerid,Gelb,"Videomode deaktiviert!");
	    SetPVarInt(playerid,"Videomode",0);
		PlayerTextDrawShow(playerid,Money3[playerid]);
		PlayerTextDrawShow(playerid,Money2[playerid]);
		PlayerTextDrawShow(playerid,Money[playerid]);
		TextDrawShowForPlayer(playerid, Clock);
		TextDrawShowForPlayer(playerid, Script1);
		TextDrawShowForPlayer(playerid, Script2);
		TextDrawShowForPlayer(playerid,Ad1);
		TextDrawShowForPlayer(playerid,Ad2);
		return 1;
	}
	return 1;
}
//Waffenpakete
command(wpablegen, playerid, params[])
{
	#pragma unused params
   	if (!IsAGang(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist in keiner Gang!");
		return 1;
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid,Rot,"Du befindest dich nicht im Transporter!");
	    return 1;
	}
	if(GetPlayerVehicleID(playerid) != transporter)
	{
	    SendClientMessage(playerid,Rot,"Du befindest dich nicht im Transporter!");
	    return 1;
	}
 	if(transporterwaffen == 0)
  	{
   		SendClientMessage(playerid,Rot,"Im Transporter liegen keine Waffen zum abladen!");
     	return 1;
   	}
	if(IsAMS(playerid))
	{
		if(IsPlayerInZonee(playerid,-2792.539, 61.49159, -2695.972, 168.0056))
		{
			ClearChat(playerid);
			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		    transporterwaffen = 0;
		    RemovePlayerFromVehicle(playerid);
		    SetVehicleToRespawn(transporter);
		    SendClientMessage(playerid,Weiß,"Du hast die Waffen erfolgreich verladen.(Baseballschläger, Deagle, MP5, M4A1, Counter Rifle)");
		    SendClientMessage(playerid,Gelb2,"Und kannst dich absofort damit ausrüsten!");
		    MS14Waffen = 15;
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du befindest dich nicht in der Nähe deiner Gangbase!");
		    return 1;
		}
	}
	else if(IsACrip(playerid))
	{
		if(IsPlayerInZonee(playerid,-2483.524, -183.0962, -2421.721, -60.80231))
		{
			ClearChat(playerid);
			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		    transporterwaffen = 0;
		    RemovePlayerFromVehicle(playerid);
		    SetVehicleToRespawn(transporter);
		    SendClientMessage(playerid,Weiß,"Du hast die Waffen erfolgreich verladen.");
		    SendClientMessage(playerid,Gelb2,"Und kannst dich absofort damit ausrüsten!");
		    CODWaffen = 15;
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du befindest dich nicht in der Nähe deiner Gangbase!");
		    return 1;
		}
	}
	return 1;
}
command(buywp, playerid, params[])
{
	#pragma unused params
   	if (!IsAGang(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist in keiner Gang!");
		return 1;
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid,Rot,"Du befindest dich nicht im Transporter!");
	    return 1;
	}
	if(GetPlayerVehicleID(playerid) != transporter)
	{
	    SendClientMessage(playerid,Rot,"Du befindest dich nicht im Transporter!");
	    return 1;
	}
	if(GetPlayerEuros(playerid) < 6000)
	{
	    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei! (6000)");
	    return 1;
 	}
	if(IsPlayerInRangeOfPoint(playerid,3.0, -1862.0784,-145.2836,11.8984))
	{
	    if(transporterwaffen == 2)
	 	{
	 	    SendClientMessage(playerid,Rot,"Dein Waffenpaket wird gerade für die Übergabe vorbereitet!");
	 	    return 1;
	 	}
	    if(transporterwaffen > 0)
	    {
	        SendClientMessage(playerid,Rot,"Im Transporter liegen schon Waffen, lager diese in deiner Gangbase mit /wpablegen ab!");
	        return 1;
	    }
	    else
	    {
	        ClearChat(playerid);
	        SendClientMessage(playerid,Weiß,"Das Waffenpaket wird für die Übergabe vorbereitet. Bitte warte 1 Minute!");
	        SetTimerEx("BUYWPP",60037 ,false,"i",playerid);
	        transporterwaffen = 2;
	        return 1;
	    }
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht beim Transporter Waffenpaket Kaufpunkt!");
	}
	return 1;
}
command(aufknacken, playerid, params[])
{
    #pragma unused params
	new string[128];
   	if (!IsAGang(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist in keiner Gang!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid,Rot,"Du befindest dich auf/in einem Fahrzeug, du kannst den Transporter nicht aufknacken!");
	    return 1;
	}
 	if(IsPlayerNearVehicle(playerid,201,3.5))
  	{
  	    if(transporterstatus == 0)
  	    {
			SendClientMessage(playerid,Rot,"Der Transporter wurde schon aufgeknackt!");
  	        return 1;
  	    }
  	    if(sStats[playerid][sDietrich] == 0)
  	    {
  	        SendClientMessage(playerid,Rot,"Du hast keine Dietriche dabei!");
  	        return 1;
  	    }
		new wvv = random(7);
		switch(wvv)
		{
			case 0:
			{
				SendClientMessage(playerid,Rot,"Du hast es nicht geschafft den Transporter aufzuknacken!");
				sStats[playerid][sDietrich] -= 1;
				return 1;
			}
			case 1:
			{
				SendClientMessage(playerid,Rot,"Du hast es nicht geschafft den Transporter aufzuknacken!");
				sStats[playerid][sDietrich] -= 1;
				return 1;
			}
			case 2:
			{
				SendClientMessage(playerid,Rot,"Du hast es nicht geschafft den Transporter aufzuknacken!");
				sStats[playerid][sDietrich] -= 1;
				return 1;
			}
			case 3:
			{
				SendClientMessage(playerid,Rot,"Du hast es nicht geschafft den Transporter aufzuknacken!");
				sStats[playerid][sDietrich] -= 1;
				return 1;
			}
			case 4:
			{
			    ClearChat(playerid);
				SendClientMessage(playerid,Gruen,"Du hast den Transporter erfolgreich aufgeknackt!");
				SendClientMessage(playerid,Weiß,"Begebe dich zum Transporter Waffenpaketen Punkt und benutze /buywp!");
				SetVehicleLock(transporter,0);
				transporterstatus = 0;
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				sStats[playerid][sDietrich] -= 1;
  				format(string, sizeof(string), "Waffentransporter Einbruch ---> %s.",GetName(playerid));
				SendRadioMessage(1,COLOR_DBLUE,string);
	 			sStats[playerid][sWanteds] += 1;
				SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
			 	for(new i = 0; i < MAX_PLAYERS; i++)
			 	{
  				    if(IsAGang(i))
  				    {
      					format(string, sizeof(string), "%s hat den Waffentransporter aufgeknackt!", GetName(playerid));
      					SendClientMessage(i,Gelb,string);
  				    }
  				}
				return 1;
			}
			case 5:
			{
				SendClientMessage(playerid,Rot,"Du hast es nicht geschafft den Transporter aufzuknacken!");
				sStats[playerid][sDietrich] -= 1;
				return 1;
			}
			case 6:
			{
			    ClearChat(playerid);
				SendClientMessage(playerid,Gruen,"Du hast den Transporter erfolgreich aufgeknackt!");
				SendClientMessage(playerid,Weiß,"Begebe dich zum Transporter Waffenpaketen Punkt und benutze /buywp!");
				SetVehicleLock(transporter,0);
				transporterstatus = 0;
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				sStats[playerid][sDietrich] -= 1;
				format(string, sizeof(string), "Waffentransporter Einbruch ---> %s.",GetName(playerid));
				SendRadioMessage(1,COLOR_DBLUE,string);
 				sStats[playerid][sWanteds] += 1;
				SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
			 	for(new i = 0; i < MAX_PLAYERS; i++)
			 	{
  				    if(IsAGang(i))
  				    {
      					format(string, sizeof(string), "%s hat den Waffentransporter aufgeknackt!", GetName(playerid));
      					SendClientMessage(i,Gelb,string);
  				    }
  				}
				return 1;
			}
			case 7:
			{
				SendClientMessage(playerid,Rot,"Du hast es nicht geschafft den Transporter aufzuknacken!");
				sStats[playerid][sDietrich] -= 1;
				return 1;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du befindest dich nicht in Nähe des Transporters welchen du klauen möchtest!");
	    return 1;
	}
    return 1;
}
//Ballonrundfahrt
command(buyticket, playerid, params[])
{
    #pragma unused params
    if(sStats[playerid][sTutorial] == 0)
        return 1;
	new bot = GetNearestBot(playerid, 3);
	if(GetPlayerEuros(playerid) < 1000)
	{
	    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei! (1000)");
	    return 1;
	}
	if(GetPVarInt(playerid, "BTicket") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du besitzt schon ein Ballonrundfahrtticket!");
	    return 1;
	}
	if(!strcmp(GetName(bot),"Jackson",true))
	{
	    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	    SetPVarInt(playerid,"BTicket",1);
	    ClearChat(playerid);
	    GivePlayerEuro(playerid,-1000);
	    SendClientMessage(playerid,Gelb,"{FFFFFF}Jackson: {FFFF00}Du hast dir erfolgreich ein Ballonrundfahrtticket erworben!");
	    SendClientMessage(playerid,Gelb,"{FFFFFF}Jackson: {FFFF00}Dieses ist solange gültig, bis du den Server verlässt!");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe vom Ballonführer Jackson!");
	}
    return 1;
}
//Handsup
command(handsup, playerid, params[])
{
    #pragma unused params
    if(sStats[playerid][sTutorial] == 0)
        return 1;
   	if(GetPVarInt(playerid, "Cuffed") == 1)
		return SendClientMessage(playerid, Rot, "Du dich die Hände nicht hochnehmen während du Handschellen an hast!");
    if(PlayerTied[playerid] > 0)
        return SendClientMessage(playerid, Rot, "DDu dich die Hände nicht hochnehmen  während du gefesselt bist!");

    SetPlayerSpecialAction(playerid, 10);
    SetPVarInt(playerid,"handsup",1);
    SendClientMessage(playerid,Gelb,"Linke Maustaste drücken um die Hände runter zu nehmen!");
    return 1;
}
//AdminPM
command(adminpm, playerid, params[])
{
	#pragma unused params
	return cmd_apm(playerid, params);
}
command(apm, playerid, params[])
{
  new string[128],pid;
  if(sStats[playerid][sAdminlevel] < 1)
  	return SendClientMessage(playerid, Weiß, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
  if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl nutzen zu können!");
  if(sscanf(params,"us",pid,string))
 	return SendClientMessage(playerid,Weiß,"Befehl: /apm [Name/ID] [Nachricht]");
  if(!IsPlayerConnected(pid))
  	return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
  if(IsPlayerNPC(pid))
  	return SendClientMessage(playerid,Rot,"Du kannst keinem NPC/Bot eine Nachricht schicken!");
  if(sStats[pid][sAdminlevel] > 0)
  	return SendClientMessage(playerid,Rot,"Du kannst keinem Administrator eine Nachricht schicken!");
  if(pid == playerid)
    return SendClientMessage(playerid,Rot,"Du kannst dir nicht selber eine Nachricht schicken!");

  SendClientMessage(playerid,Gelb,"Nachricht wurde erfolgreich versendet!");
  format(string,sizeof(string),"Administrator Nachricht von %s(%d): %s",GetName(playerid),playerid,string);
  SendClientMessage(pid,COLOR_DBLUE,string);
  PlayerPlaySound(pid,1054,0,0,0);
  PlayerPlaySound(playerid,1054,0,0,0);
  return 1;
}
//Kirche
command(opengatekirche, playerid, params[])
{
    #pragma unused params
	if(IsPlayerInRangeOfPoint(playerid,4.0,3137.3284,-3015.1643,18.7373))
	{
		if(sStats[playerid][sPremium] < 1)
			return SendClientMessage(playerid,Rot,"Du hast keinen Premiumaccount (mind. Silber)!");
		if(ksuse == 1)
			return SendClientMessage(playerid, Rot, "Die Absperrung wurde schon geöffnet!");

		MoveDynamicObject(kabsperr,  3140.13, -3015.15, 18.28, 1.7);
		SetTimer("kirchezu", 7019, false);
		ksuse = 1;
		SendClientMessage(playerid, Gelb2, "Du hast die Absperrung erfolgreich geöffnet, diese schließt automatisch in 7 sekunden!");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe der Türe!");
	    return 1;
	}
}
//Business System
command(bussihelp, playerid, params[])
{
	#pragma unused params
	new string[560];
	if(sStats[playerid][sBizz] == 255 && sStats[playerid][sAdminlevel] < 1)
	{
		SendClientMessage(playerid,Rot,"Du besitzt kein Business!");
		return 1;
	}
	format(string,sizeof(string),
	"{FFFFFF}/enter -- {C0C0C0}Ein Haus betreten.\n{FFFFFF}/exit -- {C0C0C0}Ein Haus verlassen.\n{FFFFFF}/hauskaufen -- {C0C0C0}Ein Haus kaufen.\n{FFFFFF}/sellhouse -- {C0C0C0}Ein Haus verkaufen.\n{FFFFFF}/einmieten -- {C0C0C0}Du mietest dich in das jeweilige Haus ein.\n{FFFFFF}/setrentable -- {C0C0C0}Mieten an/aus.\n{FFFFFF}/setrent -- {C0C0C0}Mietpreis.\n{FFFFFF}/hausstatus -- {C0C0C0}Du öffnest/verriegelst deine Haustür.\n{FFFFFF}/vupgrade -- {C0C0C0}Du öffnest das Hausauto Upgrade Menü.");
	ShowPlayerDialog(playerid,BUSSIHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Business Hilfebox",string,">>","Abbrechen");
	return 1;
}
//Drogendealer
command(djob, playerid, params[])
{
	#pragma unused params
	if(IsPlayerInRangeOfPoint(playerid,1.0,-1112.2057,-1676.2168,76.3672))
	{
		if(sStats[playerid][sLink] == 0)
		{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
		}
		if(sStats[playerid][sPersonalausweis] == 0)
		{
			SendClientMessage(playerid,Rot,"Du benötigst einen Personalausweis!");
			return 1;
		}
		if(sStats[playerid][sLevel] < 2)
		{
			SendClientMessage(playerid,Rot,"Du musst mind. Level 2 sein um diesen Job annehmen zu können!");
			return 1;
		}
		if(sStats[playerid][sJob] > 0)
		{
			SendClientMessage(playerid,Rot,"Du hast schon einen Job!");
			return 1;
		}
		if(sStats[playerid][sArbeitslosengeld] > 0)
		{
			SendClientMessage(playerid,Rot,"Du beziehst Arbeitslosengeld du kannst keinen Job annehmen!");
			return 1;
		}
			ShowPlayerDialog(playerid,DROGEN,DIALOG_STYLE_MSGBOX,"Drogenhändler Job","{00FF00}Job Drogenhändler.\n\n{FFFFFF}Als Drogenhändler hast du die Aufgabe Drogen unter die Leute zu bringen.\nBei diesem Job bis du auf die Farmen angewiesen, welche die Drogen abbauen und ernten.\nKlicke auf {FF0000}Annehmen{FFFFFF} um den Job anzunehmen.\n\n{FF0000}INFO : Du unterschreibst somit einen 2h Vertrag.","Annehmen","Zurück");
	}
	else
	{
 		SendClientMessage(playerid,Rot,"Du bist nicht bei der Drogenstelle!");
   		return 1;
	}
	return 1;
}
command(drogenhelp, playerid, params[])
{
	#pragma unused params
	return cmd_drughelp(playerid, params);
}
command(drughelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] != 7)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Drogenhändler!");
		return 1;
	}
	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/selldrugs -- {C0C0C0}Drogen verkaufen an andere Spieler.\n{FFFFFF}/usedrugs -- {C0C0C0}Drogen benutzen.\n{FFFFFF}/getdrugs -- {C0C0C0}Drogen kaufen.");
	ShowPlayerDialog(playerid,DROGENHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Drogenhändler Hilfebox",string,"OK","");
	return 1;
}
command(getdrugs,playerid, params[])
{
	new drogen,string[128];
	if(IsPlayerInRangeOfPoint(playerid,3,-1114.0348,-1637.1726,76.3672))
	{
		if(sStats[playerid][sJob] != 7)
		{
			SendClientMessage(playerid,Rot,"Du bist kein Drogenhändler!");
			return 1;
		}
		if(sStats[playerid][sDrogen] >= 5000)
		{
		    SendClientMessage(playerid,Rot,"Du hast keine Drogen mehr tragen!");
		    return 1;
		}
		if(sscanf(params, "d", drogen))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /getdrugs [Menge]");
			SendClientMessage(playerid, Gelb, "Wieviele Drogen möchtest du kaufen?.");
			return 1;
		}
		if(drogen > Drogenn)
		{
		    SendClientMessage(playerid,Rot,"Soviele Drogen sind nicht verfügbar!");
		    return 1;
		}
		new preis = drogen * 500;
		if(preis > GetPlayerEuros(playerid))
		{
		    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
		    return 1;
	  	}
		SetPlayerCheckpoint(playerid, -1105.2843,-1637.4150,76.3672, 3.0);
		QuestCP[playerid] = 833;
	  	ClearChat(playerid);
	  	GivePlayerEuro(playerid,-preis);
	  	sStats[playerid][sDrogen] += drogen;
		format(string,sizeof(string), "Du hast erfolgreich %d Drogen für %d gekauft!",drogen,preis);
		SendClientMessage(playerid, Weiß, string);
		Drogenn -= drogen;
		SaveSonstiges();
		format(string, sizeof(string), "{FFFF00}Drogenstelle /getdrugs.\n{FFFFFF}Verfügbare Drogen: {FFFF00}0\n{FFFFFF}Preis pro Gramm: {FFFF00}500.", Drogenn);
		UpdateDynamic3DTextLabelText(drugss, 0x0C9BCBFF, string);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht bei der Drogenabholstelle!");
	    return 1;
	}
}

command(usedrugs, playerid, params[])
{
    new drogen,Float:Leben,Float:Rusi;
	if(sStats[playerid][sDrogen] < 1)
	{
	    SendClientMessage(playerid,Rot,"Du hast keine Drogen dabei!");
	    return 1;
	}
	if(sscanf(params, "d", drogen))
	{
		SendClientMessage(playerid, Weiß, "Befehl: /usedrugs [Menge]");
		SendClientMessage(playerid, Gelb, "Wieviele Drogen möchtest du einehmen?.");
		return 1;
	}
	if(drogen > sStats[playerid][sDrogen])
	{
	    SendClientMessage(playerid,Rot,"Soviele Drogen hast du nicht dabei!");
	    return 1;
	}
	if(sStats[playerid][sKrankheit] > 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist Krank, du solltest lieber keine Drogen nehmen!");
	    return 1;
	}
	if(high[playerid] == 1)
	{
	    SendClientMessage(playerid,Rot,"Du hast gerade erst Drogen eingenommen, warte bevor du wieder neue einnimmst!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Cuffed") == 1)
		return SendClientMessage(playerid, Rot, "Du kannst keine Drogen einehmen während du Handschellen an hast!");
    if(PlayerTied[playerid] > 0)
        return SendClientMessage(playerid, Rot, "Du kannst keine Drogen einehmen während du gefesselt bist!");
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid,Rot,"Du kannst in einem Fahrzeug keine Drogen einehmen!");
	if(drogen < 10)
	{
 		ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Durch die Einnahme der Drogen erhältst du +25 Leben");
	    SetPlayerHealth(playerid,Leben+25);
     	sStats[playerid][sDrogen] -= drogen;
       	SetPlayerWeather(playerid, -66);
        SetPlayerDrunkLevel(playerid, 10000);
        SetPlayerTime(playerid,12,00);
        high[playerid] = 1;
        drugtimer[playerid] = SetTimerEx("DrugsOff", 60943, false, "i", playerid);
        return 1;
	}
	if(drogen > 10 && drogen < 20)
	{
	    ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Durch die Einnahme der Drogen erhältst du +35 Rüstung");
	    SetPlayerArmour(playerid,Rusi+35);
     	sStats[playerid][sDrogen] -= drogen;
       	SetPlayerWeather(playerid, -66);
        SetPlayerDrunkLevel(playerid, 10000);
        SetPlayerTime(playerid,12,00);
        high[playerid] = 1;
        drugtimer[playerid] = SetTimerEx("DrugsOff", 60943, false, "i", playerid);
        return 1;
	}
	if(drogen > 20 && drogen < 30)
	{
 		ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Durch die Einnahme der Drogen erhältst du +70 Rüstung und +50 Leben");
	    SetPlayerArmour(playerid,Rusi+70);
	    SetPlayerHealth(playerid,Leben+50);
     	sStats[playerid][sDrogen] -= drogen;
       	SetPlayerWeather(playerid, -66);
        SetPlayerDrunkLevel(playerid, 10000);
        SetPlayerTime(playerid,12,00);
        high[playerid] = 1;
        drugtimer[playerid] = SetTimerEx("DrugsOff", 60943, false, "i", playerid);
        return 1;
	}
	if(drogen > 30)
	{
 		ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Du hast zuviele Drogen eingenommen du fühlst dich garnicht gut!");
     	sStats[playerid][sDrogen] -= drogen;
       	SetPlayerWeather(playerid, -66);
        SetPlayerDrunkLevel(playerid, 10000);
        SetPlayerTime(playerid,12,00);
        high[playerid] = 1;
        drugtimer[playerid] = SetTimerEx("DrugsOff2", 60943, false, "i", playerid);
   		TogglePlayerControllable(playerid, false);
		ApplyAnimation(playerid, "CRACK","crckdeth1", 4.0, 0, 1, 1, 1, 0, 1);
		return 1;
	}
	return 1;
}

command(drogenverkaufen, playerid, params[])
{
	#pragma unused params
	return cmd_selldrugs(playerid, params);
}

command(acceptdrugs, playerid, params[])
{
	#pragma unused params
	return cmd_acceptdrogen(playerid, params);
}

command(acceptdrogen, playerid, params[])
{
	new string[128];
	#pragma unused params
	if(DrogenTr[playerid] < 1)
	{
		SendClientMessage(playerid,Rot,"Du hast kein Drogenangebot erhalten!");
		return 1;
	}
	if(GetPlayerEuros(playerid) < DrogenPr[playerid])
	{
		format(string, sizeof(string), "Käufer %s hat nicht genug Geld um die Drogen zu bezahlen.", GetName(playerid));
		SendClientMessage(MatsId[playerid], Rot, string);
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um die Drogen zu bezahlen!");
		DrogenId[playerid] = 0; DrogenTr[playerid] = 0; DrogenPr[playerid] = 0;
		return 1;
	}
	if(sStats[playerid][sDrogen] >= 5000)
	{
		SendClientMessage(playerid,Rot,"Du kannst nicht mehr wie 5.000 Drogen tragen!");
		format(string, sizeof(string), "Käufer %s kann keine weiteren Drogen tragen.", GetName(playerid));
		SendClientMessage(MatsId[playerid], Rot, string);
		DrogenId[playerid] = 0; DrogenTr[playerid] = 0; DrogenPr[playerid] = 0;
		return 1;
	}
	if(DrogenTr[playerid] > 0)
	{
		if (ProxDetectorS(5.0, playerid, DrogenId[playerid]))
		{
			GivePlayerEuro(playerid,-DrogenPr[playerid]);
			GivePlayerEuro(DrogenId[playerid],DrogenPr[playerid]);
			sStats[playerid][sDrogen] +=DrogenTr[playerid];
			sStats[DrogenId[playerid]][sDrogen] -=DrogenTr[playerid];
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Du hast erfolgreich die Drogen von Waffenhändler %s abgekauft.", GetName(DrogenId[playerid]));
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s hat dir deine Drogen erfolgreich abgekauft.", GetName(playerid));
			SendClientMessage(DrogenId[playerid], Weiß, string);
			DrogenId[playerid] = 0; DrogenTr[playerid] = 0; DrogenPr[playerid] = 0;
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist zu weit von dem Drogenhändler entfernt!");
		return 1;
	}
	return 1;
}

command(selldrugs, playerid, params[])
{
	if(sStats[playerid][sJob] != 7)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Drogenhändler!");
		return 1;
	}
	if(sStats[playerid][sDrogen] < 1)
	{
		SendClientMessage(playerid,Rot,"Du hast keine Drogen mehr!");
		return 1;
	}
	new string[128], id, mats, preis;
	if(sscanf(params, "udd", id, mats, preis))
	{
	SendClientMessage(playerid, Weiß, "Befehl: /selldrugs [Name/ID] [Menge] [Preis]");
	SendClientMessage(playerid, Gelb, "Verkauft Drogen an einen anderen Spieler.");
	return 1;
	}
	if(mats > sStats[playerid][sDrogen])
	{
		SendClientMessage(playerid,Rot,"Soviele Drogen stehen dir nicht zur Verfügung!");
		return 1;
	}
	if(mats > 5000)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nicht mehr als 5000 Drogen aufeinmal verkaufen!");
	    return 1;
	}
	if(IsPlayerNPC(id))
	{
	    SendClientMessage(playerid,Rot,"Du kannst keine Drogen an NPC/Bots verkaufen!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(preis < 1 || preis > 50000)
	{
	    SendClientMessage(playerid,Rot,"Der Preis kann nicht kleiner als 1 und größer als 50.000 sein!");
	    return 1;
	}
	if(sStats[id][sSpielstunden] < 3)
	{
		SendClientMessage(playerid,Rot,"Der Spieler benötigt mind. 3 Spielstunden bevor du ihm Drogen verkaufen kannst!");
		return 1;
	}
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst dir nicht selber Drogen verkaufen!");
	    return 1;
	}
	if(DrogenTr[id] > 0)
	{
 		SendClientMessage(playerid,Rot,"Der Spieler hat schon ein Drogenangebot erhalten!");
   		return 1;
	}
	if (ProxDetectorS(5.0, playerid, id) && id != playerid)
	{
		DrogenId[id] = playerid; DrogenTr[id] = mats; DrogenPr[id] = preis;
		format(string, sizeof(string), "* Du bietest %s, {FFFF00}%d{FFFFFF} Drogen für {FFFF00}%d{FFFFFF} an.", GetName(id),mats,preis);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "* %s bietet dir {FFFF00}%d{FFFFFF} Drogen für {FFFF00}%d{FFFFFF} an, tippe /acceptdrogen um anzunehmen.", GetName(playerid),mats,preis);
		SendClientMessage(id, Weiß, string);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Der angegebene Spieler ist nicht in deiner Nähe!");
	    return 1;
	}
}

//Feuerwerk ty to GIGI
command(checkfw, playerid, params[])
{
        new id,string[60];
       	if(sStats[playerid][sAdminlevel] < 4)
			return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		if(GetPVarInt(playerid, "Adminduty") == 0)
			return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
        if(sscanf(params,"d",id))  SendClientMessage(playerid, Weiß, "Befehl: /checkfw [ID]");
        else
        {
                format(string,sizeof(string),"ID:%d | X:%f | Y:%f | Z:%f | A:%f",id,Firework[id][fwX],Firework[id][fwY],Firework[id][fwZ],Firework[id][fwA]);
                SendClientMessage(playerid,Weiß,string);
        }
        return 1;
}

command(createfw, playerid, params[])
{
        new loop,Float:pX,Float:pY,Float:pZ,Float:altitude,string[70];
       	if(sStats[playerid][sAdminlevel] < 4)
			return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		if(GetPVarInt(playerid, "Adminduty") == 0)
			return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
        if(sscanf(params,"fd",altitude,loop)) SendClientMessage(playerid, Weiß, "Befehl: /createfw [Höhe] [Wiederholungen]");
        else
        {
                if(altitude > MAX_HEIGHT) return SendClientMessage(playerid,Rot,"Setze deine Höhe runter, diese ist zu hoch!");
                if(altitude < MIN_HEIGHT) return SendClientMessage(playerid,Rot,"Setze deine Höhe höher, diese ist zu niedrig!");
                if(FireworkCount >= MAX_FIREWORKS) return SendClientMessage(playerid,Rot,"Das Feuerwerk Limit wurde erreich!");
                if(loop < 1) return SendClientMessage(playerid,COLOR_GREY,"Falsche Wiederholungszahl!");
                GetPlayerPos(playerid,pX,pY,pZ);
                pX = pX + 1.000000;//offset X
                pZ = pZ - 0.800000;//offset Z
                CreateFirework(FireworkCount,pX,pY,pZ,altitude,loop);
                format(string,sizeof(string),"Feuerwerk %d erstellt!",FireworkCount);
                SendClientMessage(playerid,Gelb,string);
                FireworkCount ++;
        }
        return 1;
}

command(createfwall, playerid, params[])
{
        new rand,loop,Float:pX,Float:pY,Float:pZ,string[70];
       	if(sStats[playerid][sAdminlevel] < 4)
			return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		if(GetPVarInt(playerid, "Adminduty") == 0)
		    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
        if(sscanf(params,"d",loop)) SendClientMessage(playerid, Weiß, "Befehl: /createfwall [Wiederholungen]");
        else
        {
            	if(loop < 1) return SendClientMessage(playerid,Rot,"Falsche Wiederholungszahl!");
                GetPlayerPos(playerid,pX,pY,pZ);
                pX = pX + 1.000000;//offset X
                pZ = pZ - 0.800000;//offset Z
                for(new i = 0; i < 16; i++)
                {
                    if(i != 4 && i != 8 && i != 12) pX = pX + 4.00;
                        else
                        {
                                pX = pX - 12.00;
                                pY = pY + 4.00;
                        }
                    rand = random(20) + 25;
                    CreateFirework(FireworkCount,pX,pY,pZ,rand,loop);
                    FireworkCount ++;
                }
                format(string,sizeof(string),"Es wurden %d Feuerwerkskörper erstellt!",FireworkCount);
                SendClientMessage(playerid,Gelb,string);
        }
        return 1;
}

command(firefw, playerid, params[])
{
        new id,string[70];
       	if(sStats[playerid][sAdminlevel] < 4)
			return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		if(GetPVarInt(playerid, "Adminduty") == 0)
		    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
        if(sscanf(params,"d",id)) SendClientMessage(playerid, Weiß, "Befehl: /firefw [ID]");
        else
        {
                if(Firework[id][fwA] == 0) return SendClientMessage(playerid,Rot,"Falsche Feuerwerks ID!");
                format(string,sizeof(string),"Feuerwerk %d gestartet!",id);
                SendClientMessage(playerid,Gelb,string);
                LaunchFirework(id);
        }
        return 1;
}
command(firefwall, playerid, params[])
{
        #pragma unused params
		if(sStats[playerid][sAdminlevel] < 4)
			return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		if(GetPVarInt(playerid, "Adminduty") == 0)
		    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
        SendClientMessage(playerid,COLOR_WHITE,"Alle Feuerwerksköroper wurden gestartet!");
        for(new i = 0; i < MAX_FIREWORKS; i++)
        {
                if(Firework[i][fwA] != 0 && Firework[i][fwLoop] != 0) LaunchFirework(i);
        }
        return 1;
}

command(destroyfwall, playerid, params[])
{
        #pragma unused params
		if(sStats[playerid][sAdminlevel] < 4)
			return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		if(GetPVarInt(playerid, "Adminduty") == 0)
		    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
        for(new id = 0; id < MAX_FIREWORKS; id++)
        {
            DestroyObject(Firework[id][fwid]);
            Firework[id][fwid]   = INVALID_OBJECT_ID;
            Firework[id][fwX]    = 0.000000;
            Firework[id][fwY]    = 0.000000;
            Firework[id][fwZ]    = 0.000000;
            Firework[id][fwA]    = 0.000000;
            Firework[id][fwLoop] = 0;
        }
        FireworkCount = 0;
        SendClientMessage(playerid,COLOR_WHITE,"Alle Feuerwerkskörper wurden gelöscht!");
        return 1;
}

command(fwhelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sAdminlevel] < 4)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
 		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/checkfw -- {C0C0C0}Überprüft das gewählt Feuerwerk.\n{FFFFFF}/createfw -- {C0C0C0}Erstellt ein Feuerwerk.\n{FFFFFF}/createfwall -- {C0C0C0}Erstellt das komplette Feuerwerk.\n{FFFFFF}/firefw -- {C0C0C0}Startet ein Feuerwerk.\n{FFFFFF}/firefwall -- {C0C0C0}Startet das komplette Feuerwerk.\n{FFFFFF}/destroyfwall -- {C0C0C0}Löscht das komplette Feuerwerk.");
	ShowPlayerDialog(playerid,DJHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Feuerwerk Hilfebox",string,"OK","");
	return 1;
}

//Tie für die Gangs
command(tie, playerid, params[])
{
	if(!IsAGang(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied einer Gang!");
		return 1;
	}
	if(sStats[playerid][sRank] < 3)
	{
		SendClientMessage(playerid, Rot, "Du brauchst Rank 3 oder höher um jemanden zu fesseln!");
		return 1;
	}
	new giveplayerid,string[128];
	if(sscanf(params, "u", giveplayerid))
	{
		SendClientMessage(playerid, Weiß, "Befehl: /tie [Name/ID]");
		SendClientMessage(playerid, Gelb, "Fesselt einen anderen Spieler.");
		return 1;
	}
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		if(IsPlayerNPC(giveplayerid))
		{
			SendClientMessage(playerid,Rot,"Du kannst keinen NPC/Bot fesseln!");
			return 1;
		}
		if(PlayerTied[giveplayerid] > 0)
		{
			SendClientMessage(playerid, Rot, "Der Spieler wurde bereits gefesselt!");
			return 1;
		}
		if(sStats[playerid][sLevel] < 2)
		{
			SendClientMessage(playerid, Rot, "Der Spieler muss mind. Level 2 sein!");
			return 1;
		}
		if (ProxDetectorS(4.0, playerid, giveplayerid))
		{
			new car = GetPlayerVehicleID(playerid);
			if(giveplayerid == playerid) { SendClientMessage(playerid, Rot, "Du kannst dich nicht selbst fesseln!"); return 1; }
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car)) {
				format(string, sizeof(string), "Du wurdest von %s gefesselt.", GetName(playerid));
				SendClientMessage(giveplayerid, Weiß, string);
				format(string, sizeof(string), "Du hast %s gefesselt.", GetName(giveplayerid));
				SendClientMessage(playerid, Weiß, string);
				format(string, sizeof(string), "%s hat %s gefesselt, damit er nirgens hingehen kann.", GetName(playerid) ,GetName(giveplayerid));
				ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(giveplayerid, "~r~Gefesselt", 2500, 3);
				TogglePlayerControllable(giveplayerid, false);
				PlayerTied[giveplayerid] = 1;
			}
			else
			{
				SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe des angegebenen Spielers!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid,Rot,"Ungültiger Spieler!");
			return 1;
		}
	}
	return 1;
}
//untie für die Gangs
command(untie, playerid, params[])
{
	if(!IsAGang(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied einer Gang!");
		return 1;
	}
	if(sStats[playerid][sRank] < 3)
	{
		SendClientMessage(playerid, Rot, "Du brauchst Rank 3 oder höher um jemanden zu etfesseln!");
		return 1;
	}
	new giveplayerid,string[128];
	if(sscanf(params, "u", giveplayerid))
	{
		SendClientMessage(playerid, Weiß, "Befehl: /untie [Name/ID]");
		SendClientMessage(playerid, Gelb, "Entfesselt einen anderen Spieler.");
		return 1;
	}
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		if(IsPlayerNPC(giveplayerid))
		{
			SendClientMessage(playerid,Rot,"Du kannst keinen NPC/Bot enfesseln!");
			return 1;
		}
		if(PlayerTied[giveplayerid] == 0)
		{
			SendClientMessage(playerid, Rot, "Der Spieler wurde nicht gefesselt!");
			return 1;
		}
		if(sStats[playerid][sLevel] < 2)
		{
			SendClientMessage(playerid, Rot, "Der Spieler muss mind. Level 2 sein!");
			return 1;
		}
		if (ProxDetectorS(4.0, playerid, giveplayerid))
		{
			new car = GetPlayerVehicleID(playerid);
			if(giveplayerid == playerid) { SendClientMessage(playerid, Rot, "Du kannst dich nicht selbst enfesseln!"); return 1; }
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car)) {
				format(string, sizeof(string), "Du wurdest von %s enfesselt.", GetName(playerid));
				SendClientMessage(giveplayerid, Weiß, string);
				format(string, sizeof(string), "Du hast %s enfesselt.", GetName(giveplayerid));
				SendClientMessage(playerid, Weiß, string);
				format(string, sizeof(string), "%s hat %s enfesselt.", GetName(playerid) ,GetName(giveplayerid));
				ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(giveplayerid, "~g~Enfesselt", 2500, 3);
				TogglePlayerControllable(giveplayerid, true);
				PlayerTied[giveplayerid] = 0;
			}
			else
			{
				SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe des angegebenen Spielers!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid,Rot,"Ungültiger Spieler!");
			return 1;
		}
	}
	return 1;
}
//Tüv
command(kfz, playerid, params[])
{
    #pragma unused params
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist in keinem Fahrzeug!");
		return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(Kennzeichen[vehicleid] == 1)
	{
	    SendClientMessage(playerid,Rot,"Dieses Fahrzeug hat schon eine KFZ-Zulassung!");
	    return 1;
	}
	if(GetPlayerEuros(playerid) < 300)
	{
	    SendClientMessage(playerid,Rot,"Eine neue KFZ-Zulassung kostet 300!");
	    return 1;
	}
	if(Tuev == 1)
	{
	    SendClientMessage(playerid,Rot,"Die Prüfstelle ist gerade besetzt, bitte warten Sie einen Augenblick!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,7,-1536.1880,2636.2961,55.8359))
	{
	    ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Bitte fahren Sie auf die rechte Hebebühne in den roten Checkpoint!");
   		SetPlayerCheckpoint(playerid, -1525.6344,2631.4502,56.8359, 5.0);
		QuestCP[playerid] = 378;
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht bei der KFZ-Zulassungsstelle!");
	    return 1;
	}
}
//Autosystem
command(autohelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sAutos] == 0)
  		return SendClientMessage(playerid, Rot, "Du besitzt kein Fahrzeug!");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/parken -- {C0C0C0}Parkt dein Fahrzeug an der gewünschten Stelle.\n{FFFFFF}/clock -- {C0C0C0}Öffnet/Schließt dein Fahrzeug.\n{FFFFFF}/sellcar -- {C0C0C0}Fahrzeug an den Autopaten verkaufen.\n{FFFFFF}/sellpcar -- {C0C0C0}Fahrzeug an einen anderen Spieler verkaufen.\n");
	ShowPlayerDialog(playerid,AUTOHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Fahrzeug Hilfebox",string,"OK","");
	return 1;
}
command(parken, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sAutos] != 0) {
		if(!IsPlayerInAnyVehicle(playerid)) {
			SendClientMessage(playerid,Rot,"Du bist in keinem Fahrzeug!");
			return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
		for(new i=0;i<sStats[playerid][sAutos];i++) {
			if(vehicleid == PlayerCar[playerid][i][cId]) {
				check = 1;
				new Float:A,Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
				GetVehicleZAngle(vehicleid, A);
				PlayerCar[playerid][i][cPos_x] = X;
				PlayerCar[playerid][i][cPos_y] = Y;
				PlayerCar[playerid][i][cPos_z] = Z;
				PlayerCar[playerid][i][cORotate] = A;
				UpdatePlayerCar(playerid);
				SendClientMessage(playerid, Gelb, "Du hast dein Fahrzeug hier geparkt, ab nun kannst du dein Fahrzeug hier finden!");
				return 1;
			}

		}
		if(check == 0) {
			SendClientMessage(playerid,Rot,"Dieses Fahrzeug gehört nicht dir!");
			return 1;
		}
	}
	else {
		SendClientMessage(playerid,Rot,"Du hast kein Fahrzeug!");
		return 1;
	}
	return 1;
}

command(sellpcar,playerid, params[])
{
	new string[128],id,preis;
	if(sStats[playerid][sAutos] != 0) {
			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid,Rot,"Du bist in keinem Fahrzeug!");
				return 1;
			}
			if(sscanf(params, "ud", id,preis))
			{
				SendClientMessage(playerid, Weiß, "Befehl: /sellpcar [Name/ID] [Preis]");
				SendClientMessage(playerid, Gelb, "Du verkaufst dein Fahrzeug an einen anderen Spieler.");
				return 1;
			}
			if(IsPlayerNPC(id))
			{
				SendClientMessage(playerid,Rot,"Du kannst dein Fahrzeug nicht an NPC/Bots verkaufen!");
				return 1;
			}
			if(id == INVALID_PLAYER_ID)
			{
				SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
				return 1;
			}
			if(id == playerid)
			{
				SendClientMessage(playerid,Rot,"Du kannst dein Fahrzeug nicht an dich selber verkaufen!");
				return 1;
			}
			if(sStats[id][sAutoschein] < 1)
			{
			    SendClientMessage(playerid,Rot,"Der angegebene Spieler hat keinen Führerschein!");
			    return 1;
			}
	    	if(sStats[id][sSpielstunden] < 3)
			{
				SendClientMessage(playerid,Rot,"Der Spieler kann dir dieses Fahrzeug jetzt nicht abkaufen!");
				return 1;
			}
			if(sStats[id][sAutos] == 5) {
				SendClientMessage(playerid,Rot,"Der Spieler hat schon genügend Fahrzeuge!");
				return 1;
			}
			check = 0;
			new vehicleid = GetPlayerVehicleID(playerid);
			for(new i=0;i<sStats[playerid][sAutos];i++) {
				if(vehicleid == PlayerCar[playerid][i][cId]) {
					check = 1;
					if(check == 0) {
						SendClientMessage(playerid,Rot,"Dieses Fahrzeug gehört nicht dir!");
						return 1;
					}
					if (ProxDetectorS(5.0, playerid, id))
					{
						FahrId[id] = playerid; FahrTr[id] = vehicleid; FahrPr[id] = preis;
						format(string, sizeof(string), "* Du bietest %s, dein Fahrzeug (%s) für {FFFF00}%d{FFFFFF} an.", GetName(id),VehicleNames[vehicleid-400],preis);
						SendClientMessage(playerid, Weiß, string);
						format(string, sizeof(string), "* %s bietet dir sein Fahrzeug (%s) für {FFFF00}%d{FFFFFF} an, tippe /acceptfahrzeug um anzunehmen.", GetName(playerid),VehicleNames[vehicleid-400],preis);
						SendClientMessage(id, Weiß, string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid,Rot,"Der angegebene Spieler ist nicht in deiner Nähe!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid,Rot,"Du besitzt kein Fahrzeug!");
					return 1;
				}
   			}
  		}
		return 1;
}

command(acceptfahrzeug, playerid, params[])
{
	new string[128];
	#pragma unused params
	if(FahrTr[playerid] < 1)
	{
		SendClientMessage(playerid,Rot,"Du hast kein Fahrzeugangebot erhalten!");
		return 1;
	}
	if(GetPlayerEuros(playerid) < FahrPr[playerid])
	{
		format(string, sizeof(string), "Käufer %s hat nicht genug Geld um das Fahrzeug zu bezahlen.", GetName(playerid));
		SendClientMessage(FahrId[playerid], Rot, string);
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um das Fahrzeug zu bezahlen!");
		FahrId[playerid] = 0; FahrTr[playerid] = 0; FahrPr[playerid] = 0;
		return 1;
	}
	if(sStats[playerid][sAutos] == 6)
	{
		SendClientMessage(playerid,Rot,"Du hast die maximale Anzahl an Fahrzeugen erreicht!");
		format(string, sizeof(string), "Käufer %s kann keine weiteren Fahrzeuge kaufen.", GetName(playerid));
		SendClientMessage(FahrId[playerid], Rot, string);
		FahrId[playerid] = 0; FahrTr[playerid] = 0; FahrPr[playerid] = 0;
		return 1;
	}
	if(FahrTr[playerid] > 0)
	{
		if (ProxDetectorS(5.0, playerid, FahrId[playerid]))
		{
			for(new i=0;i<sStats[FahrId[playerid]][sAutos];i++) {
				if(FahrTr[playerid] == PlayerCar[FahrId[playerid]][i][cId]) {
					GivePlayerEuro(playerid,-FahrPr[playerid]);
					GivePlayerEuro(FahrId[playerid],FahrPr[playerid]);
					format(string, sizeof(string), "Du hast erfolgreich das Fahrzeug von %s abgekauft.", GetName(FahrId[playerid]));
					SendClientMessage(playerid, Weiß, string);
					format(string, sizeof(string), "* %s hat dir das Fahrzeug erfolgreich abgekauft.", GetName(playerid));
					SendClientMessage(FahrId[playerid], Weiß, string);

					new carslot = sStats[playerid][sAutos];
					PlayerCar[playerid][carslot][cPos_x] = PlayerCar[FahrId[playerid]][i][cPos_x];
					PlayerCar[playerid][carslot][cPos_y] = PlayerCar[FahrId[playerid]][i][cPos_y];
					PlayerCar[playerid][carslot][cPos_z] = PlayerCar[FahrId[playerid]][i][cPos_z];
					PlayerCar[playerid][carslot][cPos_a] = PlayerCar[FahrId[playerid]][i][cPos_a];
					PlayerCar[playerid][carslot][cPj] = PlayerCar[FahrId[playerid]][i][cPj];
					PlayerCar[playerid][carslot][cMod1] = PlayerCar[FahrId[playerid]][i][cMod1];
					PlayerCar[playerid][carslot][cMod2] = PlayerCar[FahrId[playerid]][i][cMod2];
					PlayerCar[playerid][carslot][cMod3] = PlayerCar[FahrId[playerid]][i][cMod3];
					PlayerCar[playerid][carslot][cMod4] = PlayerCar[FahrId[playerid]][i][cMod4];
					PlayerCar[playerid][carslot][cMod5] = PlayerCar[FahrId[playerid]][i][cMod5];
					PlayerCar[playerid][carslot][cMod6] = PlayerCar[FahrId[playerid]][i][cMod6];
					PlayerCar[playerid][carslot][cMod7] = PlayerCar[FahrId[playerid]][i][cMod7];
					PlayerCar[playerid][carslot][cMod8] = PlayerCar[FahrId[playerid]][i][cMod8];
					PlayerCar[playerid][carslot][cMod9] = PlayerCar[FahrId[playerid]][i][cMod9];
					PlayerCar[playerid][carslot][cMod10] = PlayerCar[FahrId[playerid]][i][cMod10];
					PlayerCar[playerid][carslot][cMod11] = PlayerCar[FahrId[playerid]][i][cMod11];
					PlayerCar[playerid][carslot][cMod12] = PlayerCar[FahrId[playerid]][i][cMod12];
					PlayerCar[playerid][carslot][cMod13] = PlayerCar[FahrId[playerid]][i][cMod13];
					PlayerCar[playerid][carslot][cMod14] = PlayerCar[FahrId[playerid]][i][cMod14];
					PlayerCar[playerid][carslot][cMod15] = PlayerCar[FahrId[playerid]][i][cMod15];
					PlayerCar[playerid][carslot][cMod16] = PlayerCar[FahrId[playerid]][i][cMod16];
					PlayerCar[playerid][carslot][cMod17] = PlayerCar[FahrId[playerid]][i][cMod17];
					PlayerCar[playerid][carslot][cLock] = PlayerCar[FahrId[playerid]][i][cLock];
					PlayerCar[playerid][carslot][cNeon] = PlayerCar[FahrId[playerid]][i][cNeon];
					PlayerCar[playerid][carslot][cTuev] = PlayerCar[FahrId[playerid]][i][cTuev];
					sStats[playerid][sAutos] ++;
					PlayerCar[playerid][carslot][cModel] = PlayerCar[FahrId[playerid]][i][cModel];
					PlayerCar[playerid][carslot][cPreis] = PlayerCar[FahrId[playerid]][i][cPreis];
					PlayerCar[playerid][carslot][cC1] = PlayerCar[FahrId[playerid]][i][cC1];
					PlayerCar[playerid][carslot][cC2] = PlayerCar[FahrId[playerid]][i][cC2];

					DestroyVehicle(PlayerCar[FahrId[playerid]][i][cId]);
					format(string, sizeof(string), "/Autos/%s%d.bscar", GetName(FahrId[playerid]),i);
					fremove(string);
					PlayerCar[FahrId[playerid]][i][cId] = PlayerCar[FahrId[playerid]][i][cId];
					PlayerCar[FahrId[playerid]][i][cModel] = PlayerCar[FahrId[playerid]][i][cModel];
					PlayerCar[FahrId[playerid]][i][cC1] = PlayerCar[FahrId[playerid]][i][cC1];
					PlayerCar[FahrId[playerid]][i][cC2] = PlayerCar[FahrId[playerid]][i][cC2];
					PlayerCar[FahrId[playerid]][i][cPj] = PlayerCar[FahrId[playerid]][i][cPj];
					PlayerCar[FahrId[playerid]][i][cPreis] = PlayerCar[FahrId[playerid]][i][cPreis];
					PlayerCar[FahrId[playerid]][i][cPos_x] = PlayerCar[FahrId[playerid]][i][cPos_x];
					PlayerCar[FahrId[playerid]][i][cPos_y] = PlayerCar[FahrId[playerid]][i][cPos_y];
					PlayerCar[FahrId[playerid]][i][cPos_z] = PlayerCar[FahrId[playerid]][i][cPos_z];
					PlayerCar[FahrId[playerid]][i][cPos_a] = PlayerCar[FahrId[playerid]][i][cPos_a];
					PlayerCar[FahrId[playerid]][i][cMod1] = PlayerCar[FahrId[playerid]][i][cMod1];
					PlayerCar[FahrId[playerid]][i][cMod2] = PlayerCar[FahrId[playerid]][i][cMod2];
					PlayerCar[FahrId[playerid]][i][cMod3] = PlayerCar[FahrId[playerid]][i][cMod3];
					PlayerCar[FahrId[playerid]][i][cMod4] = PlayerCar[FahrId[playerid]][i][cMod4];
					PlayerCar[FahrId[playerid]][i][cMod5] = PlayerCar[FahrId[playerid]][i][cMod5];
					PlayerCar[FahrId[playerid]][i][cMod6] = PlayerCar[FahrId[playerid]][i][cMod6];
					PlayerCar[FahrId[playerid]][i][cMod7] = PlayerCar[FahrId[playerid]][i][cMod7];
					PlayerCar[FahrId[playerid]][i][cMod8] = PlayerCar[FahrId[playerid]][i][cMod8];
					PlayerCar[FahrId[playerid]][i][cMod9] = PlayerCar[FahrId[playerid]][i][cMod9];
					PlayerCar[FahrId[playerid]][i][cMod10] = PlayerCar[FahrId[playerid]][i][cMod10];
					PlayerCar[FahrId[playerid]][i][cMod10] = PlayerCar[FahrId[playerid]][i][cMod11];
					PlayerCar[FahrId[playerid]][i][cMod12] = PlayerCar[FahrId[playerid]][i][cMod12];
					PlayerCar[FahrId[playerid]][i][cMod13] = PlayerCar[FahrId[playerid]][i][cMod13];
					PlayerCar[FahrId[playerid]][i][cMod14] = PlayerCar[FahrId[playerid]][i][cMod14];
					PlayerCar[FahrId[playerid]][i][cMod15] = PlayerCar[FahrId[playerid]][i][cMod15];
					PlayerCar[FahrId[playerid]][i][cMod16] = PlayerCar[FahrId[playerid]][i][cMod16];
					PlayerCar[FahrId[playerid]][i][cMod17] = PlayerCar[FahrId[playerid]][i][cMod17];
					PlayerCar[FahrId[playerid]][i][cLock] = PlayerCar[FahrId[playerid]][i][cLock];
					PlayerCar[FahrId[playerid]][i][cNeon] = PlayerCar[FahrId[playerid]][i][cNeon];
					PlayerCar[playerid][carslot][cTuev] = PlayerCar[FahrId[playerid]][i][cTuev];
					sStats[FahrId[playerid]][sAutos] --;

					UpdatePlayerCar(playerid);
					UpdatePlayerCar(FahrId[playerid]);

					SpawnCar(playerid,carslot);

					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerPlaySound(FahrTr[playerid], 1052, 0.0, 0.0, 0.0);
					FahrId[playerid] = 0; FahrTr[playerid] = 0; FahrPr[playerid] = 0;
					return 1;
				}
			}
		}
  		else return SendClientMessage(playerid,Rot,"Du bist zu weit von dem Fahrzeughändler entfernt!");
	}
	return 1;
}

command(sellcar, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(sStats[playerid][sAutos] != 0) {
		if(!IsPlayerInAnyVehicle(playerid)) {
			SendClientMessage(playerid,Rot,"Du bist in keinem Fahrzeug!");
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid,15,-2383.8774,2438.4946,9.5949))
		{
		}
		else
		{
			SendClientMessage(playerid,Rot,"Begebe dich zum Haus von dem Autopaten um dein Fahrzeug wieder zu verkaufen!");
			return 1;
		}
		check = 0;
		new vehicleid = GetPlayerVehicleID(playerid);
		for(new i=0;i<sStats[playerid][sAutos];i++) {
			if(vehicleid == PlayerCar[playerid][i][cId]) {
				check = 1;
				DestroyVehicle(PlayerCar[playerid][i][cId]);
				new string3[32];
				new preis = PlayerCar[playerid][i][cPreis]/3;
				if(BizzInfo[5][bTill] < preis)
				{
				    SendClientMessage(playerid,Rot,"Der Autopate hat nicht genug Geld um dir das Fahrzeug abzukaufen!");
				    return 1;
				}
				preis = preis*2;
				GivePlayerEuro(playerid,preis);
				format(string3, sizeof(string3), "/Autos/%s%d.bscar", GetName(playerid),i);
				fremove(string3);
				if(i != sStats[playerid][sAutos]-1) {
					if(i == 0) {
						for(new x=0;x<sStats[playerid][sAutos];x++) {
							if(x>i) {
								format(string3, sizeof(string3), "/Autos/%s%d.bscar", GetName(playerid),x);
								fremove(string3);
								PlayerCar[playerid][x-1][cId] = PlayerCar[playerid][x][cId];
								PlayerCar[playerid][x-1][cModel] = PlayerCar[playerid][x][cModel];
								PlayerCar[playerid][x-1][cC1] = PlayerCar[playerid][x][cC1];
								PlayerCar[playerid][x-1][cC2] = PlayerCar[playerid][x][cC2];
								PlayerCar[playerid][x-1][cPj] = PlayerCar[playerid][x][cPj];
								PlayerCar[playerid][x-1][cPreis] = PlayerCar[playerid][x][cPreis];
								PlayerCar[playerid][x-1][cPos_x] = PlayerCar[playerid][x][cPos_x];
								PlayerCar[playerid][x-1][cPos_y] = PlayerCar[playerid][x][cPos_y];
								PlayerCar[playerid][x-1][cPos_z] = PlayerCar[playerid][x][cPos_z];
								PlayerCar[playerid][x-1][cPos_a] = PlayerCar[playerid][x][cPos_a];
								PlayerCar[playerid][x-1][cMod1] = PlayerCar[playerid][x][cMod1];
								PlayerCar[playerid][x-1][cMod2] = PlayerCar[playerid][x][cMod2];
								PlayerCar[playerid][x-1][cMod3] = PlayerCar[playerid][x][cMod3];
								PlayerCar[playerid][x-1][cMod4] = PlayerCar[playerid][x][cMod4];
								PlayerCar[playerid][x-1][cMod5] = PlayerCar[playerid][x][cMod5];
								PlayerCar[playerid][x-1][cMod6] = PlayerCar[playerid][x][cMod6];
								PlayerCar[playerid][x-1][cMod7] = PlayerCar[playerid][x][cMod7];
								PlayerCar[playerid][x-1][cMod8] = PlayerCar[playerid][x][cMod8];
								PlayerCar[playerid][x-1][cMod9] = PlayerCar[playerid][x][cMod9];
								PlayerCar[playerid][x-1][cMod10] = PlayerCar[playerid][x][cMod10];
								PlayerCar[playerid][x-1][cMod11] = PlayerCar[playerid][x][cMod11];
								PlayerCar[playerid][x-1][cMod12] = PlayerCar[playerid][x][cMod12];
								PlayerCar[playerid][x-1][cMod13] = PlayerCar[playerid][x][cMod13];
								PlayerCar[playerid][x-1][cMod14] = PlayerCar[playerid][x][cMod14];
								PlayerCar[playerid][x-1][cMod15] = PlayerCar[playerid][x][cMod15];
								PlayerCar[playerid][x-1][cMod16] = PlayerCar[playerid][x][cMod16];
								PlayerCar[playerid][x-1][cMod17] = PlayerCar[playerid][x][cMod17];
								PlayerCar[playerid][x-1][cLock] = PlayerCar[playerid][x][cLock];
								PlayerCar[playerid][x-1][cNeon] = PlayerCar[playerid][x][cNeon];
								PlayerCar[playerid][x-1][cTuev] = PlayerCar[playerid][x][cTuev];
							}
						}
					}
				}
				sStats[playerid][sAutos]--;
				UpdatePlayerCar(playerid);
				format(string,sizeof(string),"Du hast dein Fahrzeug erfolgreich für %d an den Autopaten verkauft!",preis);
				SendClientMessage(playerid, Weiß, string);
				BizzInfo[5][bTill] -= preis;
				BizzInfo[5][bProducts] += 50;
				return 1;
			}
		}
		if(check == 0) {
			SendClientMessage(playerid,Rot,"Dieses Fahrzeug gehört nicht dir!");
			return 1;
		}
	}
	else {
		SendClientMessage(playerid,Rot,"Du hast kein Fahrzeug!");
		return 1;
	}
	return 1;
}

command(clock, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sAutos] != 0) {
		check = 0;
		for(new i=0;i<sStats[playerid][sAutos];i++) {
			new Float:CX,Float:CY,Float:CZ;
			GetVehiclePos(PlayerCar[playerid][i][cId],CX,CY,CZ);
			if(IsPlayerInRangeOfPoint(playerid,3,CX,CY,CZ)) {
				check = 1;
				new Status = PlayerCar[playerid][i][cLock];
				switch (Status) {
					case 0:
					{
						PlayerCar[playerid][i][cLock] = 1;
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Fahrzeug ~r~abgeschlossen",3000, 5);
						SetVehicleLock(PlayerCar[playerid][i][cId],1);
						return 1;
					}
					case 1:
					{
						PlayerCar[playerid][i][cLock] = 0;
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Fahrzeug ~g~aufgeschlossen",3000, 5);
						SetVehicleLock(PlayerCar[playerid][i][cId],0);
						return 1;

					}
				}
				return 1;
			}
		}
		if(check == 0) {
			SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe einer deiner Fahrzeuge!");
			return 1;
		}
	}
	else {
		SendClientMessage(playerid,Rot,"Du hast kein Fahrzeug!");
		return 1;
	}
	return 1;
}

//Questsystem
command(rbefreien, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sQuest] != 10)
	{
	    return 1;
	}
	if(GetPVarInt(playerid,"JackMission") == 0)
	{
 		SendClientMessage(playerid,Rot,"Du bist nicht in der Rainer Befreiungsmission!");
	    return 1;
	}
	new bot = GetNearestBot(playerid, 5);
	if(!strcmp(GetName(bot),"Rainer",true))
	{
	    ClearChat(playerid);
		Kick(bot);
		Mission = 0;
		SetPVarInt(playerid,"JackMission",0);
		sStats[playerid][sQuest] = 11;
		SetPlayerPosEx(playerid,-2618.6848,2261.6169,8.1786);
		SetPlayerFacingAngle(playerid,259.2011);
		ResetPlayerWeapons(playerid);
		PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		SetCameraBehindPlayer(playerid);
		ShowPlayerDialog(playerid, JACK7, DIALOG_STYLE_MSGBOX, "Quest erfolgreich abgeschlossen!", "{FFFFFF}Rettung in letzer Sekunde puhh.\nDanke das du ihn befreit hast, er hat manchmal eine {00FFFF}große Klappe und nichts dahinter{FFFFFF}.\nAber ich sage DIR und dafür stehe ich mit meinem Namen.\nDAFÜR werden die büßen . . .\n\n {FF00FF}FORTSETZUNG FOLGT!", "OK","");
		SendClientMessage(playerid,Orange,"Du erhältst 3500 als Belohnung von Jack!");
		GivePlayerEuro(playerid,3500);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	if(!strcmp(GetName(i),"Fernandez",true))
			{
				Kick(i);
	  		}
		 	if(!strcmp(GetName(i),"Rainer",true))
			{
				Kick(i);
	  		}
		}
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Rainer!");
		return 1;
	}
}
command(startmission, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sQuest] != 10)
	{
	    return 1;
	}
	if(Mission == 1)
	{
	    SendClientMessage(playerid,Rot,"Du kannst die Mission jetzt nicht starten, ein anderer Spieler befindet sich schon in der Mission!");
	    return 1;
	}
	if(GetPVarInt(playerid,"Daten") == 1)
	{
 		SendClientMessage(playerid,Rot,"Du bist schon in der Mission!");
	    return 1;
	}
	new bot = GetNearestBot(playerid, 5);
	if(!strcmp(GetName(bot),"Jack",true))
	{
	    ClearChat(playerid);
		SendClientMessage(playerid,Gelb,"So hier sind wir auf dem Schiff, Rainer ist unten in dem Laderaum, bitte befreie ihn doch pass auf die MS-14 Gangmitglieder auf!");
		SendClientMessage(playerid,Gelb,"Du weisst ich kann dir leider nicht helfen, ich muss ähhhmmm einen anderen wichtigen Auftrag durchführen!");
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"Doch hier haste meine M4A1 damit kannst du nur gewinnen. Bis Später . . .");
		GivePlayerWeaponEx(playerid,31,250);
		SetPlayerPosEx(playerid,-1476.5192,1488.8466,8.2501);
		Mission = 1;
		SetPVarInt(playerid,"JackMission",1);
		SetPlayerCheckpoint(playerid, -1461.7488,1489.1290,8.2501, 4.0);
		QuestCP[playerid] = 600;
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Jack!");
		return 1;
	}
}

command(daten, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sQuest] != 8)
	{
	    return 1;
	}
 	new bot = GetNearestBot(playerid, 5);
	if(GetPVarInt(playerid,"Daten") == 1)
	{
		if(!strcmp(GetName(bot),"Jack",true))
		{
		    PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	 		SetPVarInt(playerid,"Daten",0);
	 		SetPVarInt(playerid,"Laptop",0);
	 		sStats[playerid][sQuest] = 9;
	 		GivePlayerEuro(playerid,2500);
	   		ClearChat(playerid);
			ShowPlayerDialog(playerid, JACK6, DIALOG_STYLE_MSGBOX, "Quest erfolgreich abgeschlossen!", "{FFFFFF}Danke für die Daten.\n{FF0005}DAFFFFFUUUUQ!\n{00FFFF}Fuc* {FFFFFF}das ist wirklich ein harter Brocken, wir müssen unsere geballte Kraft bündeln um gegen seine Gang bestehen zu können.\nIch werde sehen was sich machen lässt!\n\n\n {FF00FF}Jack.", "OK","");
			SendClientMessage(playerid,Orange,"Du erhältst 2500 als Belohnung von Jack!");
	  		return 1;
		}
		else
		{
	 		SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Jack!");
	   		return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du hast nicht die Daten dabei!");
		return 1;
	}
}
command(ulaptop, playerid, params[])
{
	#pragma unused params
	new player = GetNearestPlayer(playerid, 7);
	if(sStats[playerid][sQuest] != 8)
	{
	    return 1;
	}
	if(GetPVarInt(playerid,"Laptop") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du hast den Laptop von Jack nicht dabei!");
	    return 1;
	}
	if(IsAStaat(player))
	{
	    SendClientMessage(playerid, Rot,"Du kannst den Laptop nicht benutzen, solange ein Polizist in deiner nähe ist!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,1.5,1553.4856,-1690.7633,1723.1094)) //Tür
	{
	    ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Hackvorgang der Tür gestartet:");
	    Hacktimer[playerid] = SetTimerEx("HackSchrott",2003,true,"i",playerid);
	    SetTimerEx("HackVorgang",20029,false,"i",playerid);
	    TogglePlayerControllable(playerid, false);
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,1570.0225,-1660.9668,1730.1094)) //Server
	{
		if(GetPVarInt(playerid,"Daten") == 1)
		{
		    SendClientMessage(playerid,Rot,"Du hast schon die Daten, begebe dich nach Jack!");
		    return 1;
		}
	    ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Hackvorgang des Servers gestartet:");
	    Hacktimer[playerid] = SetTimerEx("HackSchrott",2003,true,"i",playerid);
	    SetTimerEx("HackVorgang2",30029,false,"i",playerid);
	    TogglePlayerControllable(playerid, false);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du kannst hier nichts hacken!");
	    return 1;
	}
}
command(laptop, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sQuest] != 8)
	{
	    return 1;
	}
	if(GetPVarInt(playerid,"Laptop") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du hast den Laptop von Jack schon erhalten!");
	    return 1;
	}
 	new bot = GetNearestBot(playerid, 5);
	if(!strcmp(GetName(bot),"Jack",true))
	{
   		ClearChat(playerid);
		SendClientMessage(playerid,Gelb,"Jack: Begebe dich jetzt zum Bayside Police-Department und versuche irgendwie mithilfe die Türen aufzubekommen, um danach Zugang zum Serverraum zu bekommen!");
		SendClientMessage(playerid,Gelb,"Info: Du kannst den Laptop mit /ulaptop benutzen!");
		SetPVarInt(playerid,"Laptop",1);
		SetPlayerCheckpoint(playerid, -2249.1072,2355.6904,4.9734, 4.0);
		QuestCP[playerid] = 798;
  		return 1;
	}
	else
	{
 		SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Jack!");
   		return 1;
	}
}
command(jackr, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sQuest] != 6)
	{
	    return 1;
	}
 	new bot = GetNearestBot(playerid, 5);
	if(!strcmp(GetName(bot),"Jack",true))
	{
 		SetPVarInt(playerid,"Kamera",1);
   		ClearChat(playerid);
		ShowPlayerDialog(playerid, JACK4, DIALOG_STYLE_MSGBOX,
"Spionageaufgabe", "{FFFFFF}Wir haben ein verdammt großes Problem, den Drogendealer den du umgelegt hast war ein Mitglied der {00FFFF}MS-14{FFFFFF}.\nWelche jetzt auf uns aufmerksam geworden sind, ich glaube es kommt bald zu {00FFFF}heftigen Turbulenzen{FFFFFF}.\nIch habe eine wichtige Aufgabe für dich.\nBegebe dich zur Basis der {00FFFF}MS-14{FFFFFF} und Spioniere ein bisschen rum,\nd.H mach mir insgesamt 5 Fotos mit der Spiegelreflexkamera.\n\nIch danke dir!", "OK","");
		GivePlayerWeaponEx(playerid,43,10);
		SetPlayerCheckpoint(playerid, -2717.6428,84.3313,4.1803, 4.0);
		QuestCP[playerid] = 799;
		SetPVarInt(playerid,"Schuss",10);
		SendClientMessage(playerid,Orange,"Wichtige Info: Benutze die Kamera nur in der MS-14 Zone, mit der linken Maustaste, nicht mit der rechten (also nicht anzoomen!");
  		return 1;
	}
	else
	{
 		SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Jack!");
   		return 1;
	}
}

command(fotos, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sQuest] != 6)
	{
	    return 1;
	}
 	new bot = GetNearestBot(playerid, 5);
	if(GetPVarInt(playerid,"Fotos") == 5)
	{
		if(!strcmp(GetName(bot),"Jack",true))
		{
		    PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	 		SetPVarInt(playerid,"Kamera",0);
	 		SetPVarInt(playerid,"Fotos",0);
	 		sStats[playerid][sQuest] = 7;
	 		GivePlayerEuro(playerid,3500);
	   		ClearChat(playerid);
			ShowPlayerDialog(playerid, JACK5, DIALOG_STYLE_MSGBOX, "Quest erfolgreich abgeschlossen!", "{FFFFFF}Oh verdammt, kniffliger als ich dachte, wir müssen den ersten Schritt machen.\nDanke für die Fotos ich werde diese auswerten und mich anschließend bei dir melden.\n\n{FFFF00}Tschau{FFFFFF}!", "OK","");
	  		return 1;
		}
		else
		{
	 		SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Jack!");
	   		return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genügend Fotos dabei!");
		return 1;
	}
}

command(jackuhr, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sQuest] != 1)
	{
	    return 1;
	}
	if(GetPVarInt(playerid,"Jackuhr") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du hast die Uhr von Jack schon gefunden!");
	    return 1;
	}
	if(GetPVarInt(playerid,"Jackuhr") == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,1.5,-2264.4639,2563.7598,5.5760))
		{
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SetPVarInt(playerid,"Jackuhr",1);
		    ClearChat(playerid);
		    SendClientMessage(playerid,Weiß,"Ah, das ist also die Rolex von Jack, hmm die sieht ein bisschen gefälscht aus, die Uhr ist bestimmt von Abdulla!");
		    SendClientMessage(playerid,Weiß,"Du hast die Uhr von Jack gefunden, bringe ihm diese zurück! (/uhrback)");
		    sStats[playerid][sQuest] = 2;
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Hier liegt nicht die Uhr von Jack!");
		    return 1;
		}
	}
	return 1;
}

command(kofferback, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sQuest] != 4)
	{
	    return 1;
	}
	if(GetPVarInt(playerid, "Koffer") == 1)
	{
	    new bot = GetNearestBot(playerid, 5);
		if(!strcmp(GetName(bot),"Jack",true))
		{
		    PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		    SetPVarInt(playerid,"Koffer",0);
		    ClearChat(playerid);
			ShowPlayerDialog(playerid, JACK3, DIALOG_STYLE_MSGBOX, "Quest erfolgreich abgeschlossen!", "{FFFFFF}Danke, für den Koffer hier sind locker{FFFF00} 1kg{FFFFFF} Crystal Meth drinnen!\nAlso schon ein ordentliches Sümmchen, natürlich bekommst du auch eine Belohnung von mir {9600FF}(4500){FFFFFF}.\nIch melde mich bei dir wenn es wieder was zu tun gibt.\n\n\n {00FF0A}Jack.", "OK","");
			GivePlayerEuro(playerid,3500);
		    sStats[playerid][sQuest] = 5;
		    RemovePlayerAttachedObject(playerid, 9);
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Jack!");
		    return 1;
		}
 	}
 	else
	{
	    SendClientMessage(playerid,Rot,"Du hast den Drogenkoffer für Jack nicht dabei!");
 	    return 1;
 	}
}

command(uhrback, playerid, params[])
{
	#pragma unused params
	new bot = GetNearestBot(playerid, 5);
	if(sStats[playerid][sQuest] != 2)
	{
	    return 1;
	}
	if(GetPVarInt(playerid,"Jackuhr") == 1)
	{
		if(!strcmp(GetName(bot),"Jack",true))
		{
		    PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		    SetPVarInt(playerid,"Jackuhr",0);
		    ClearChat(playerid);
			ShowPlayerDialog(playerid, JACK2, DIALOG_STYLE_MSGBOX, "Quest erfolgreich abgeschlossen!", "{FFFFFF}Herzlichen Dank, du hast meine Rolex von {FFFF00}Abdul..{FFFFFF} *Hust* von einem  {FFFF00}zertifizierten Rolexshop{FFFFFF} wiedergefunden!\nHier mein kleines Dankeschön an dich für deine große Mühe {9600FF}(1500){FFFFFF}.\nIch melde mich bei dir wenn es wieder was zu tun gibt.\n\n\n {00FF0A}Jack.", "OK","");
			GivePlayerEuro(playerid,1500);
		    sStats[playerid][sQuest] = 3;
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Jack!");
		    return 1;
		}
	}
	else
	{
 		SendClientMessage(playerid,Rot,"Du hast nicht die Uhr von Jack dabei!");
   		return 1;
	}
}
//Leaderbefehle
//GiveRank
command(giverank, playerid, params[])
{
	#pragma unused params
	return cmd_setrank(playerid, params);
}

//SetRank
command(setrank, playerid, params[])
{
	new id,level,string[128];
 	if(sStats[playerid][sLeiter] < 0)
		return SendClientMessage(playerid, Rot, "Du bist kein Leader!");
	if(sscanf(params, "ud", id, level))
		return SendClientMessage(playerid, Weiß, "Befehl: /setrank [Name/ID] [RankID]");
	if(level > 6 || level < 1)
	    return SendClientMessage(playerid, Rot, "Es gibt nur 6 Ränge!");
	if(playerid == id)
	{
	    SendClientMessage(playerid,Rot,"Du kannst dich nicht selber befördern!");
	    return 1;
	}
	if(sStats[playerid][sLeiter] == sStats[id][sMitglied])
	{
		sStats[id][sRank] = level;
		format(string, sizeof(string), "Du wurdest von %s befördert. Mach weiter so! [Dein aktueller Rank: %d]", GetName(playerid),sStats[id][sRank]);
		SendClientMessage(id, Weiß, string);
		format(string, sizeof(string), "Du hast %s den Rang %d gegeben.", GetName(id),sStats[id][sRank]);
		SendClientMessage(playerid, Weiß, string);
		return 1;
	}
	else
	{
 		SendClientMessage(playerid,Rot,"Der Spieler ist nicht in deiner Fraktion!");
	}
	return 1;
}

//uninvite
command(uninvite, playerid, params[])
{
	new id,string[128];
 	if(sStats[playerid][sRank] < 5)
		return SendClientMessage(playerid, Rot, "Du bist kein Leader oder Co-Leader!");
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, Weiß, "Befehl: /uninvite [Name/ID]");
 	if (id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler exisitert nicht!");
	if(IsPlayerNPC(id))
		return SendClientMessage(playerid, Rot,"Du kannst keine NPC/Bots uninviten!");
 	if(sStats[playerid][sLeiter] == sStats[id][sMitglied])
	{
		sStats[id][sMitglied] = 0;
		sStats[id][sRank] = 0;
		format(string, sizeof(string), "Du hast %s aus deiner Fraktion geworfen!", GetName(id));
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "Du wurdest von %s aus der Fraktion %s geworfen!", GetName(playerid),GetPlayerFraktion(playerid));
		SendClientMessage(id, Weiß, string);
		SetPVarInt(id, "CopDuty", 0);
		if(sStats[id][sGeschlecht] == 1)
		{
		    sStats[id][sSkin] = 58;
		}
		else
		{
		    sStats[id][sSkin] = 56;
		}
		if(IsPlayerInAnyVehicle(id))
	 	{
			RemovePlayerFromVehicle(id);
	 	}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler ist nicht in deiner Fraktion!");
	    return 1;
	}
	return 1;
}

//invite
command(invite, playerid, params[])
{
	new id,string[128];
 	if(sStats[playerid][sRank] < 5)
		return SendClientMessage(playerid, Rot, "Du bist kein Leader oder Co-Leader!");
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, Weiß, "Befehl: /invite [Name/ID]");
	if(sStats[playerid][sLeiter] == sStats[id][sMitglied])
	{
	    SendClientMessage(playerid,Rot,"Der Spieler ist schon in deiner Fraktion!");
		return 1;
	}
	if(sStats[id][sLeiter] > 0 || sStats[id][sMitglied] > 0)
	{
	    SendClientMessage(playerid,Rot,"Der Spieler ist schon in einer Fraktion!");
	    return 1;
	}
	if(sStats[playerid][sTutorial] == 0)
	{
	    SendClientMessage(playerid,Rot,"Der Spieler befindet sich zurzeit im Tutorial!");
	    return 1;
 	}
	if(playerid == id)
	{
	    SendClientMessage(playerid,Rot,"Du kannst dich nicht selber einladen!");
	    return 1;
	}
	if(InviteTr[id] > 0)
	{
 		SendClientMessage(playerid,Rot,"Der Spieler hat schon ein Fraktionsangebot erhalten!");
   		return 1;
	}
	InviteId[id] = playerid; InviteTr[id] = sStats[playerid][sLeiter]; InvitePr[id] = id;
	format(string, sizeof(string), "* Du bietest %s an, deiner Fraktion %s beizutreten.", GetName(id),GetPlayerFraktion(playerid));
	SendClientMessage(playerid, Weiß, string);
	format(string, sizeof(string), "* %s bietet dir an, seine Fraktion %s beizutreten. /acceptinvite.", GetName(playerid),GetPlayerFraktion(playerid));
	SendClientMessage(id, Weiß, string);
	return 1;
}

//Roland
command(treten, playerid, params[])
{
    new bot = GetNearestBot(playerid, 5);
	if(!strcmp(GetName(bot),"WannisVater",true))
	{
	    SendClientMessage(playerid,Weiß,"Du hast Roland erfolgreich einen Turnadokick verpasst ;D!");
	    ApplyAnimation(playerid, "FIGHT_E","FightKick_B", 4.0, 0, 1, 1, 1, 0, 1);
	    ApplyAnimation(bot, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	    SetPlayerChatBubble(bot,"{FFFFFF}Ah! Du scheiss Penner . . .",Gelb2,10.0,2020);
	    SetTimerEx("ClearAnimationssw",1733,false,"d",playerid);
	    wwv = 1;
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe von Roland!");
	    return 1;
	}
    #pragma unused params
}
//Premiumbefehle
command(deleteneonlichter, playerid, params[])
{
    #pragma unused params
    new vehicleid = GetPlayerVehicleID(playerid);
   	if(sStats[playerid][sPremium] < 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Premium!");
	    return 1;
	}
	if(!IsPlayerInAnyVehicle(playerid))
 	{
  		SendClientMessage(playerid,Rot,"Du musst in/auf einem Fahrzeug sitzen!");
	    return 1;
 	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
 	{
  		SendClientMessage(playerid,Rot,"Du bist nicht der Fahrer des Fahrzeuges!");
    	return 1;
 	}
 	if(Neonlichter[vehicleid] > 0)
	{
	    if(Neonlichter[vehicleid] == 1)
	    {
	        SendClientMessage(playerid,Weiß,"Du hast deine Neonlichter erfolgreich abmontiert!");
	    	DestroyObject(rot1[vehicleid]);
	    	DestroyObject(rot2[vehicleid]);
	    	Neonlichter[vehicleid] = 0;
	    	return 1;
	    }
	    if(Neonlichter[vehicleid] == 2)
	    {
	        SendClientMessage(playerid,Weiß,"Du hast deine Neonlichter erfolgreich abmontiert!");
	    	DestroyObject(blau1[vehicleid]);
	    	DestroyObject(blau2[vehicleid]);
	    	Neonlichter[vehicleid] = 0;
	    	return 1;
	    }
	    if(Neonlichter[vehicleid] == 3)
	    {
	        SendClientMessage(playerid,Weiß,"Du hast deine Neonlichter erfolgreich abmontiert!");
	    	DestroyObject(gelb1[vehicleid]);
	    	DestroyObject(gelb2[vehicleid]);
	    	Neonlichter[vehicleid] = 0;
	    	return 1;
	    }
	    if(Neonlichter[vehicleid] == 4)
	    {
	        SendClientMessage(playerid,Weiß,"Du hast deine Neonlichter erfolgreich abmontiert!");
	    	DestroyObject(weis1[vehicleid]);
	   	 	DestroyObject(weis2[vehicleid]);
	   	 	Neonlichter[vehicleid] = 0;
	   	 	return 1;
	    }
	    if(Neonlichter[vehicleid] == 5)
	    {
	        SendClientMessage(playerid,Weiß,"Du hast deine Neonlichter erfolgreich abmontiert!");
	    	DestroyObject(pinke1[vehicleid]);
	    	DestroyObject(pinke2[vehicleid]);
	    	Neonlichter[vehicleid] = 0;
	    	return 1;
	    }
	    if(Neonlichter[vehicleid] == 6)
	    {
	        SendClientMessage(playerid,Weiß,"Du hast deine Neonlichter erfolgreich abmontiert!");
	    	DestroyObject(grun1[vehicleid]);
	    	DestroyObject(grun2[vehicleid]);
	    	Neonlichter[vehicleid] = 0;
	    	return 1;
	    }
	}
	return 1;
}
command(fahrzeugue, playerid, params[])
{
	#pragma unused params
    new vehicleid = GetPlayerVehicleID(playerid);
	if(sStats[playerid][sPremium] < 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Premium!");
	    return 1;
	}
	if(!IsPlayerInAnyVehicle(playerid))
 	{
  		SendClientMessage(playerid,Rot,"Du musst in/auf einem Fahrzeug sitzen!");
	    return 1;
 	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
 	{
  		SendClientMessage(playerid,Rot,"Du bist nicht der Fahrer des Fahrzeuges!");
    	return 1;
 	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,-2336.2256,2051.0430,10.4132) || IsPlayerInRangeOfPoint(playerid,3.0,-2294.0964,2233.5754,4.9822))
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,-2336.2256,2051.0430,10.4132))
		{
		    SendClientMessage(playerid,Weiß,"Dein Fahrzeug wurde erfolgreich zurück auf Bayside transportiert!");
      		SetVehiclePos(vehicleid,-2292.5137,2244.2327,4.9822);
        	SetVehicleZAngle(vehicleid, 359.4554);
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid,3.0,-2294.0964,2233.5754,4.9822))
		{
  			SendClientMessage(playerid,Weiß,"Dein Fahrzeug wurde erfolgreich auf Premiuminsel transportiert!");
      		SetVehiclePos(vehicleid,-2336.7224,2045.5791,11.5132);
        	SetVehicleZAngle(vehicleid, 175.8404);
		    return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht am Fahrzeugsübertragungspunkt!");
	    return 1;
	}
	return 1;
}
command(tuning, playerid, params[])
{
    #pragma unused params
    new vehicleid = GetPlayerVehicleID(playerid);
	if(sStats[playerid][sPremium] < 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Premium!");
	    return 1;
	}
	if(!IsPlayerInAnyVehicle(playerid))
 	{
  		SendClientMessage(playerid,Rot,"Du musst in einem Fahrzeug sitzen, um dein Fahrzeug tunen zu können!");
	    return 1;
 	}
   	if(VehicleStarted[vehicleid] == 1)
    {
	    SendClientMessage(playerid,Rot,"Du musst zuerst den Motor ausschalten, um dein Fahrzeug tunen zu können!");
	    return 1;
    }
	if(IsPlayerInRangeOfPoint(playerid,4.7,-2275.4775,1997.7756,3.8759))
	{
	    if(Tuninggarage == 1)
	    {
	        SendClientMessage(playerid,Rot,"Die Tuninggarage wird gerade schon genutzt!");
	        return 1;
	    }
	    Tuninggarage = 1;
	    SetPVarInt(playerid, "Garage", 1);
		TogglePlayerControllable(playerid, false);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Tuninggarage!");
	    return 1;
	}
}
command(premhelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sPremium] < 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Premium!");
	    return 1;
	}
	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/tuning -- {C0C0C0}Tuning des Fahrzeuges in der Tuninggarage.\n{FFFFFF}/fahrzeugue -- {C0C0C0}Fahrzeugübertragung.\n{FFFFFF}/deleteneonlichter -- {C0C0C0}Neonlichter löschen.\n{FFFFFF}/fightstylenormal -- {C0C0C0}Normalen Fightstyle wieder erlernen.\n{FFFFFF}/sekt -- {C0C0C0}Sektempfang.");
	ShowPlayerDialog(playerid,PREMIUMHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Premium Hilfebox",string,"OK","");
	return 1;
}
//Spielerbefehle
//Pay
command(pay, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new pID,Betrag,string[128];
		if(sscanf(params, "ud", pID,Betrag))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /pay [Name/ID] [Betrag]");
			SendClientMessage(playerid, Gelb, "Du gibst einem anderen Spieler einen gewissen Geld Betrag.");
			return 1;
		}
		if(pID == playerid)
		{
		    SendClientMessage(playerid,Rot,"Du kannst dir nicht selber Geld geben1");
		    return 1;
		}
		if(Betrag > 1000 && sStats[playerid][sLevel] < 3)
		{
			SendClientMessage(playerid, Rot, "Du musst mindestens Level 3 sein, um über Beträge 1000 abgeben zu können!");
			return 1;
		}
		if(Betrag < 1 || Betrag > 99999)
		{
			SendClientMessage(playerid, Rot, "Der Betrag muss zwischen 1 und 99999 liegen!");
			return 1;
		}
		if(Betrag > GetPlayerEuros(playerid))
		{
		    SendClientMessage(playerid,Rot,"Soviel Geld hast du nicht dabei!");
		    return 1;
		}
		if (IsPlayerConnected(pID))
		{
			if(pID != INVALID_PLAYER_ID)
			{
				if(IsPlayerNPC(pID))
				{
					SendClientMessage(playerid, Rot, "Du kannst einem NPC/Bot kein Geld geben.");
					return 1;
				}
				if (ProxDetectorS(5.0, playerid, pID))
				{
					if (Betrag > 0)
					{
						GivePlayerEuro(playerid,-Betrag);
						GivePlayerEuro(pID,Betrag);
						format(string, sizeof(string), "Du hast %s(%d), %d gegeben.", GetName(pID),pID, Betrag);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, Weiß, string);
						format(string, sizeof(string), "Du hast %d von %s(%d) bekommen.", Betrag, GetName(playerid), playerid);
						SendClientMessage(pID, Weiß, string);
						format(string, sizeof(string), "%s hat %d dem Spieler %s gegeben.", GetName(playerid), Betrag, GetName(pID));
						PayLog(string);
						if(Betrag >= 100000)
						{
							SendAdminMessage(Rot, string);
						}
						PlayerPlaySound(pID, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "* %s nimmt Geld aus seiner Tasche und gibt es %s.", GetName(playerid) ,GetName(pID));
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, Rot, "Ungültiger Betrag.");
					}
				}
				else
				{
					SendClientMessage(playerid, Rot, "Du musst in der nähe des angebenen Spielers sein!");
				}
			}
		}
		else
		{
			format(string, sizeof(string), "%s ist kein aktiver Spieler.", GetName(pID));
			SendClientMessage(playerid, Rot, string);
		}
	}
	return 1;
}
//Me
command(me, playerid, params[])
{
	new string[128];
	if(sStats[playerid][sTutorial] == 0)
 	{
 	    return 1;
 	}
	//Wenn der Spieler gemutet ist
	if(sStats[playerid][sMute] == 1)
	{
		SendClientMessage(playerid,Rot,"Du kannst diesen Befehl nicht nutzen, da du gemutet bist!");
		return 0;
	}
	if(CheckPlayerText(playerid,params) == 0) { return 1; }
    if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /me [Aktion]");
 	if(sStats[playerid][sMaske] == 0)
	{
		format(string, sizeof(string), "* %s %s", GetName(playerid), params);
	}
	else if(sStats[playerid][sMaske] == 1)
	{
	    format(string, sizeof(string), "* ? %s", params);
	}
	ProxDetector(10.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}
//Stats
//Departmentchat
command(statistik, playerid, params[])
{
    #pragma unused params
    return cmd_stats(playerid, params);
}
command(stats, playerid, params[])
{
    #pragma unused params
    if(sStats[playerid][sTutorial] == 0)
        return 1;

	ShowPlayerStats(playerid);
	return 1;
}
//Fightstyle clearen
command(fightstylenormal, playerid, params[])
{
    #pragma unused params
    SendClientMessage(playerid,Gelb2,"Du hast deinen alten Kampfstil verlernt, und kämpfst jetzt wieder Normal!");
    return 1;
}
command(sekt, playerid, params[])
{
    #pragma unused params
	if(IsPlayerInRangeOfPoint(playerid,4.0,-2500.6572,2074.1755,1.3516))
	{
		if(GetPVarInt(playerid, "Sekt") == 1)
		{
		    SendClientMessage(playerid,Rot,"Du hast schon einen Sekt erhalten!");
		    return 1;
		}
		ClearChat(playerid);
		PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
		SetPVarInt(playerid,"Sekt",1);
		SendClientMessage(playerid,Gelb2,"Willkommen auf der Premiuminsel!");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht beim Sektempfang auf der Premiuminsel!");
	    return 1;
	}
}
//Departmentchat
command(d, playerid, params[])
{
    #pragma unused params
    return cmd_department(playerid, params);
}

command(department,playerid, params[])
{
	if(!IsAStaat(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist keine Staatsmitglied!");
    if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /department [Nachricht]");
	if(sStats[playerid][sMute] != 0)
		return SendClientMessage(playerid, Rot,"Du kannst das Radio nicht benutzen da du gemutet bist.");
	if(sStats[playerid][sFraktion] == 4 && IsAGang(playerid))
	    return SendClientMessage(playerid,Rot,"Du bist nicht berechtigt den Staatsfunk zu benutzen!");

	new string[128];
	if(CheckPlayerText(playerid,params) == 0) { return 1; }
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
    	if(sStats[i][sMitglied] == 1 || sStats[i][sLeiter] == 1 || sStats[i][sMitglied] == 3 || sStats[i][sLeiter] == 3 || sStats[i][sMitglied] == 2 || sStats[i][sLeiter] == 2)
     	{
      		format(string, sizeof(string), "[Staatsfunk] %s %s: %s", GetPlayerRank(playerid),GetName(playerid), params);
        	SendClientMessage(i, Gelb, string);
      	}
    }
	return 1;
}
//Atombombe
command(atombombe, playerid, params[])
{
    #pragma unused params
  	if(IsPlayerInAnyVehicle(playerid))
 		return SendClientMessage(playerid,Rot,"Du kannst in/auf einem Fahrzeug keine Atombombe legen!");
  	if(sStats[playerid][sAdminlevel] < 5)
  	    return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um eine Atombombe legen zu können.");
	if(GetPVarInt(playerid, "Funmodus") == 0)
	    return SendClientMessage(playerid, Rot, "Bitte aktiviere deinen Funmodus, um Atombomben legen zu können!");
	if(IsPlayerInZonee(playerid,-455.4371, 1261.211, -303.6248, 1448.057))
 	{
 	    SendClientMessage(playerid,Rot,"Du kannst im Atomschutzbunker keine Atombombe legen!");
 	    return 1;
 	}
	if(IsPlayerInZonee(playerid,-2639.2, 2230.474, -2592.488, 2277.186))
	{
		SendClientMessage(playerid,Rot,"Du kannst in einer NO DM-ZONE keine Atombombe legen!");
	    return 1;
	}
	if(Abombe == 1)
		return SendClientMessage(playerid,Rot,"Es wurde schon eine Atombombe gelegt bitte warte erst bis diese explodiert ist!");
	GetPlayerPos(playerid, PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1]);
	ApplyAnimation(playerid, "BOMBER","BOM_Plant", 4.0, 0, 1, 1, 1, 0, 1);
	MoveDynamicObject(atomgate1,-395.33563232422, 1257.5810546875, 1.195314407349,0.5);
	MoveDynamicObject(atomgate2,-394.24423217773, 1255.4013671875, 1.894744873047,0.5);
	MoveDynamicObject(atomgate3,-394.78442382813, 1254.3929443359, 1.856538772583,0.5);
	MoveDynamicObject(atomgate4,-394.62783813477, 1252.5374755859, 1.802545547485,0.5);
	MoveDynamicObject(atomgate5,-394.37945556641, 1251.6022949219, 1.777733802795,0.5);
	MoveDynamicObject(atomgate6,-395.05053710938, 1248.0109863281, 1.9105672836304,0.5);
	MoveDynamicObject(atomgate7,-394.90997314453, 1246.9406738281, 1.8817310333252,0.5);
	MoveDynamicObject(atomgate8,-386.84042358398, 1243.66796875, 1.8132982254028,0.5);
	Abombeo = CreateDynamicObject(1636, PlayerExplosionX[1]+0.2, PlayerExplosionY[1], PlayerExplosionZ[1]-0.5, 85.9437, 85.9437, 0.0000);
	ClearChat(playerid);
	SendClientMessage(playerid,Weiß,"Du hast erfolgreich eine Atombombe gelegt, diese wird automatisch in 5 Minuten hochgehen!");
	SendClientMessage(playerid,COLOR_LIGHTRED,"Also geh und such das weite, diese Atombombe hat eine nicht vorhersehbare Kraft!");
	SendClientMessageToAll(COLOR_CNN,"Es wurde eine Atombombe gelegt, suche den Schutzbunker und verstecke dich dort!");
	SendClientMessageToAll(COLOR_CNN,"Der Schutzbunker ist für 4 Minuten offen, dieser wurde rot auf der Karte makiert!");
	SendClientMessageToAll(COLOR_CNN,"Die Atombombe geht in 5 Minuten hoch!");
	Abombe = 1;
	SetTimer("bombtor",240551,false);
	SetTimer("bombexplode",301672,false);
	SetTimerEx("ClearAnimationss",5573,false,"i",playerid);
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		SetPlayerCheckpoint(i, -395.4190,1241.1606,6.3002, 3.0); //Atombombe
		QuestCP[i] = 456;
 	}
 	return 1;
 }
//Fraktionsautohaus
command(fpark, playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		new fc;while(fc<sizeof(FactionCars)){
			if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
				if(GetPlayerVehicleID(playerid) == FactionCars[fc][fCarid]){
					if(sStats[playerid][sAdminlevel] >= NEEDED_ADMINLEVEL || GetPlayerLeader(playerid) == FactionCars[fc][fFaction]){
						GetVehiclePos(FactionCars[fc][fCarid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2]);
						GetVehicleZAngle(FactionCars[fc][fCarid],FactionCars[fc][fPos][3]);
						SaveFactionCars(false);
						SendClientMessage(playerid,Weiß,"Du hast das Fraktionsfahrzeug erfolgreich umgeparkt.");
					}else SendClientMessage(playerid,Rot,"Du bist dazu nicht berechtigt dieses Fahrzeug umzuparken.");
					return true;
				}
			}fc++;
		}SendClientMessage(playerid,Rot,"Du sitzt in keinem Fraktionsfahrzeug.");
		}else SendClientMessage(playerid,Rot,"Du sitzt in keinem Fahrzeug oder bist nicht der Fahrer.");
	return true;
}

command(fcsell, playerid, params[])
{
	if(GetPlayerLeader(playerid))
	{
		if(IsAllowedFactionToBuy(GetPlayerFaction(playerid)))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new Carid1 = GetPlayerVehicleID(playerid);
				for(new fc;fc<sizeof(FactionCars);fc++)
				{
					if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611)
					{
						if(Carid1 == FactionCars[fc][fCarid]){
							if(FactionCars[fc][fFaction][0] == GetPlayerLeader(playerid))
							{
		    					if(IsPlayerInRangeOfPoint(playerid,17.0,-1979.4679,287.9782,34.7437))
								{
									FactionCars[fc][fVehid] = -255;
									if(DestroyVehicle(FactionCars[fc][fCarid]))
									FactionCars[fc][fCarid] = -255;
									new fText[178];
									format(fText,sizeof(fText),"Du hast das Fraktionsfahrzeug erfolgreich für %d(50%% vom Kaufpreis) verkauft.",(FactionCars[fc][fPrice]/2));
									SendClientMessage(playerid,Weiß,fText);
									GivePlayerEuro(playerid,FactionCars[fc][fPrice]/2);
									SaveFactionCars(false);
								}
								else SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe des Gangautohauses!");
							}
							else SendClientMessage(playerid,Rot,"Du bist nicht der Besitzer dieses Fahrzeuges.");
						return true;
					}
				}
			}
			SendClientMessage(playerid,Rot,"Du sitzt in keinem Fraktionsfahrzeug.");
		}
		else SendClientMessage(playerid,Rot,"Du musst der Fahrer eines Fahrzeuges sein.");
	}
	else SendClientMessage(playerid,Rot,"Deine Fraktion ist dazu nicht berechtigt.");
	}
	else SendClientMessage(playerid,Rot,"Du bist nicht berechtigt diesen Befehl anzuwenden.");
return 1;
}

//Gangfight
command(ctf, playerid, params[])
{
	if(IsAFightFaction(GetPlayerFaction(playerid)))
	{
		new TempZone = GetPlayerFightzone(playerid);
		if(TempZone != -255)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			return SendClientMessage(playerid,Rot,"Du bist auf einem Fahrzeug, du kannst die Flagge nicht erobern!");
			if(!FightSystem[TempZone][fsFightTime] || FightSystem[TempZone][fsAttackFaction] == -255)
			return SendClientMessage(playerid,Rot,"Du kannst zurzeit keine Flagge einnehmen!");

			if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid))
			{
				if(IsPlayerInRangeOfPoint(playerid,5.0,FightSystem[TempZone][fsCTFx],FightSystem[TempZone][fsCTFy],FightSystem[TempZone][fsCTFz]))
				{
					if(FightSystem[TempZone][fsCTF][0] != -255)
					{
						if(GetPlayerFaction(FightSystem[TempZone][fsCTF][0]) != GetPlayerFaction(playerid))
						SendClientMessage(playerid,Rot,"Die Flagge wird von deinen Feinden gehalten, töte sie zuerst!");
						else
						SendClientMessage(playerid,Rot,"Deine Gang hält bereits die Flagge!");
						return 1;
					}
					FightSystem[TempZone][fsCTF][0] = playerid;
					new fsName[MAX_PLAYER_NAME];
					GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
					new fsText[128];
					format(fsText,sizeof(fsText),"--> Gangfight <-- | %s hat begonnen die Flagge zu erobern!",fsName);
					for(new i;i<MAX_PLAYERS;i++)
					{
						if(IsPlayerConnected(i))
						{
							if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[TempZone][fsAttackFaction])
							{
								PlayerPlaySound(i,1058,0.0,0.0,0.0);
								SendClientMessage(i,Weiß,fsText);
							}
						}
					}
				}
				else
				{
					SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe der Flagge!");
				}
			}
			else
			{
				SendClientMessage(playerid,Rot,"Du bist nicht in diesem Gangfight verwickelt!");
			}
		}
		else
		{
			SendClientMessage(playerid,Rot,"Du bist in keinem Gebiet!");
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist in keiner Gang!");
	}
	return 1;
}
command(invade, playerid, params[])
{
	#pragma unused params
	return cmd_erobern(playerid, params);
}
command(erobern, playerid, params[])
{
    #pragma unused params
    new stringx[128];
	if(IsAFightFaction(GetPlayerFaction(playerid))){
		for(new fs;fs<sizeof(FightSystem);fs++){
			if((FightSystem[fs][fsOwnerFaction] == GetPlayerFaction(playerid) && FightSystem[fs][fsFightTime]) || FightSystem[fs][fsAttackFaction] == GetPlayerFaction(playerid))
			return SendClientMessage(playerid,Rot,"Deine Gang / Mafia ist bereits in einem Gangfight.");
		}
		new on[2];
		on[0] = 0;
		on[1] = 0;
		for(new fs;fs<sizeof(FightSystem);fs++){
	 	for(new p = 0; p < MAX_PLAYERS; p++)
	 	{
				if(GetPlayerFaction(p) == FightSystem[fs][fsOwnerFaction] && Desktop_Status[p] == 0) {
					on[0]++;
				}
				if(GetPlayerFaction(p) == GetPlayerFaction(playerid) && Desktop_Status[p] == 0)
				{
					on[1]++;
				}
			}
		}
		if(testphase == 0) {
		if(on[0] <= 2) return SendClientMessage(playerid, Rot, "Es sind nicht genügend Gegner Online (mind. 3)!");
		if(on[1] <= 2) return SendClientMessage(playerid, Rot, "Es sind nicht genügend Mitglieder deiner Fraktion Online (mindestens 3)!");
		}
		new TempZone = GetPlayerFightzone(playerid);
		if(TempZone != -255){
			if(FightSystem[TempZone][fsFightTimeCool] != 0) {
				format(stringx, sizeof(stringx), "Das Gebiet kann erst wieder in ca. %d Minuten erobert werden!", FightSystem[TempZone][fsFightTimeCool]);
				return SendClientMessage(playerid, Rot,stringx);
			}

			if(!IsAFightFaction(FightSystem[TempZone][fsOwnerFaction]))
			return SendClientMessage(playerid,Rot,"Dieses Gebiet ist nicht für eine Eroberung verfügbar.");
			if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid))
			return SendClientMessage(playerid,Rot,"Du kannst nicht deine eigene Fraktion angreifen.");
			if(FightSystem[TempZone][fsFightTime] || FightSystem[TempZone][fsAttackFaction] != -255)
			return SendClientMessage(playerid,Rot,"In diesem Gebiet herrscht schon ein Gangfight.");
			if(FightSystem[TempZone][fsLastFight]){
				new fsText[178];
				format(fsText,sizeof(fsText),"Ganggebiet: Dieses Ganggebiet wurde bereits Angegriffen, wartet noch: '%d' Minuten.",FightSystem[TempZone][fsLastFight]);
				SendClientMessage(playerid,Rot,fsText);
				return 1;
			}
			for(new fs;fs<sizeof(FightSystem);fs++){
				if(FightSystem[fs][fsOwnerFaction] == FightSystem[TempZone][fsOwnerFaction] && (FightSystem[fs][fsFightTime] || FightSystem[fs][fsAttackFaction] != -255))
				return SendClientMessage(playerid,Rot,"Ganggebiet: Die Gang / Mafia der das Ganggebiet gehört hat bereits ein Kampf.");
			}
			new fsTextToOwner[255];
			format(fsTextToOwner,sizeof(fsTextToOwner),"--> Gangfight <-- | Ihr werden von: %s angegriffen, setzt euch zur wehr!",GetFactionNameOfFaction(GetPlayerFaction(playerid)));
			new fsName[MAX_PLAYER_NAME];
			GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
			new fsTextToAttack[255];
			format(fsTextToAttack,sizeof(fsTextToAttack),"--> Gangfight <-- | %s hat ein Kampf mit: %s begonnen, macht sie platt!",fsName,GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
			new fsText[64];
			format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
			TextDrawSetString(FightSystem[TempZone][fsWinKills],"~y~00 Punkte");
			format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(GetPlayerFaction(playerid)));
			TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
			TextDrawSetString(FightSystem[TempZone][fsLoseKills],"~y~00 Punkte");
			TextDrawSetString(FightSystem[TempZone][fsTime],"Verbl. Zeit: 25 Minuten");//ZEIT
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
				if(IsPlayerConnected(i)){
					GangZoneFlashForPlayer(i,FightSystem[TempZone][fsZoneID],GetZoneColorOfFaction(GetPlayerFaction(playerid)));
					if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction]){
						PlayerPlaySound(i,1058,0.0,0.0,0.0);
						SendClientMessage(i,Weiß,fsTextToOwner);
						TextDrawShowForPlayer(i,Fight);
						TextDrawShowForPlayer(i,FightUnderline);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinFaction]);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinKills]);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseFaction]);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseKills]);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsTime]);
					}
					if(GetPlayerFaction(i) == GetPlayerFaction(playerid)){
						PlayerPlaySound(i,1058,0.0,0.0,0.0);
						SendClientMessage(i,Weiß,fsTextToAttack);
						TextDrawShowForPlayer(i,Fight);
						TextDrawShowForPlayer(i,FightUnderline);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinFaction]);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsWinKills]);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseFaction]);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsLoseKills]);
						TextDrawShowForPlayer(i,FightSystem[TempZone][fsTime]);
					}
				}
			}
			FightSystem[TempZone][fsAttackFaction] = GetPlayerFaction(playerid);
			FightSystem[TempZone][fsKillsOfOwner] = 0;
			FightSystem[TempZone][fsKillsOfAttack] = 0;
			FightSystem[TempZone][fsFightTime] = 25;//ZEIT
			FightSystem[TempZone][fsFightTimeCool] = 60;//ZEIT
			FightSystem[TempZone][fsCTF][0] = -255;
			FightSystem[TempZone][fsCTF][1] = 0;
			FightSystem[TempZone][fsCTF][2] = 0;
			return 1;
		}return SendClientMessage(playerid,Rot,"Du bist in keinem Gebiet!");
		}else SendClientMessage(playerid,Rot,"Du bist in keiner Gang / Mafia.");
	return 1;
}
//Crip or Die
command(bier, playerid, params[])
{
	#pragma unused params
	if(IsPlayerInRangeOfPoint(playerid,4.0,-98.5003,-252.6311,2701.6553))
	{
		if(!IsACrip(playerid))
			return SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Crip or Die Gang!");

		ClearChat(playerid);
		SendClientMessage(playerid,Gelb,"Du hast dir erfolgreich ein kühles Blondes aus der Bar genommen!");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht an der Crip or Die Bar!");
	    return 1;
	}
}

command(cripf, playerid, params[])
{
	#pragma unused params
	return cmd_cripchat(playerid, params);
}

command(cripchat, playerid, params[])
{
    if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /cripf [Nachricht]");
	if(sStats[playerid][sMute] == 1)
		return SendClientMessage(playerid, Rot,"Du kannst das Radio nicht benutzen da du gemutet bist.");
	if(!IsACrip(playerid))
		return SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Crip or Die Gang!");

	new string[128];
	if(CheckPlayerText(playerid,params) == 0) { return 1; }
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
    	if(sStats[i][sMitglied] == 6 || sStats[i][sLeiter] == 6)
     	{
      		format(string, sizeof(string), "[Crip or Die Chat] %s %s: %s", GetPlayerRank(playerid),GetName(playerid), params);
        	SendClientMessage(i, Gelb, string);
      	}
    }
	return 1;
}

command(criponline, playerid, params[])
{
    #pragma unused params
	new count = 1,string[428];
	if(!IsACrip(playerid))
		return SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Crip or Die Gang!");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sMitglied] == 6 || sStats[i][sLeiter] == 6)
		{
		    format(string, sizeof(string),"{FFFFFF}Rank: {FFFF00}%s {FFFFFF}| {FFFFFF}Name: {FFFF00}%s {FFFFFF}\n%s", GetPlayerRank(i) ,GetName(i),string);
		    count ++;
		}
	}

	if(count != 1)
	{
	    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}Crip or Die Mitglieder Onlineliste", string, "Abbrechen", "");
	    return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}Crip or Die Mitglieder Onlineliste", "{FFFFFF}Kein BSPD Mitglied online!", "Abbrechen", "");
		return 1;
	}
}

command(criphelp, playerid, params[])
{
	#pragma unused params
	if(!IsACrip(playerid))
		return SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Crip or Die Gang!");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/cripf -- {C0C0C0}Gangchat.\n{FFFFFF}/criponline -- {C0C0C0}Mitglieder Onlineanzeige.\n{FFFFFF}/ctf -- {C0C0C0}Flagge erobern.\n{FFFFFF}/erobern -- {C0C0C0}Ganggebiet erobern.\n{FFFFFF}/fpark -- {C0C0C0}Gangfahrzeug umparken.\n{FFFFFF}/fcsell -- {C0C0C0}Gangfahrzeug verkaufen.\n{FFFFFF}/tie -- {C0C0C0}Spieler fesseln.\n{FFFFFF}/untie -- {C0C0C0}Spieler enfesseln.");
	ShowPlayerDialog(playerid,CRIPHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Crip or Die Gang Hilfebox",string,"OK","");
	return 1;
}
//MS-14
command(opengatems, playerid, params[])
{
    #pragma unused params
	if(IsPlayerInRangeOfPoint(playerid,3.0,-2757.8999, 84.8000, 7.3000))
	{
		if(!IsAMS(playerid))
			return SendClientMessage(playerid,Rot,"Du bist kein Mitglied der MS-14 Gang!");
		if(Msuse == 1)
			return SendClientMessage(playerid, Rot, "Die Tür ist schon in Benutzung!");

		MoveDynamicObject(msdoor,  -2758.8480, 84.5407, 7.3000, 1.2);
		SetTimer("MSZU", 5641, false);
		Msuse = 1;
		SendClientMessage(playerid, Gelb2, "Du hast die Tür erfolgreich geöffnet, diese schließt automatisch in 5 sekunden!");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe der Türe!");
	    return 1;
	}
}
command(msf, playerid, params[])
{
	#pragma unused params
	return cmd_mschat(playerid, params);
}

command(mschat, playerid, params[])
{
    if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /msf [Nachricht]");
	if(sStats[playerid][sMute] == 1)
		return SendClientMessage(playerid, Rot,"Du kannst das Radio nicht benutzen da du gemutet bist.");
	if(!IsAMS(playerid))
		return SendClientMessage(playerid,Rot,"Du bist kein Mitglied der MS-14 Gang!");

	new string[128];
	if(CheckPlayerText(playerid,params) == 0) { return 1; }
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
    	if(sStats[i][sMitglied] == 5 || sStats[i][sLeiter] == 5)
     	{
      		format(string, sizeof(string), "[MS-14 Chat] %s %s: %s", GetPlayerRank(playerid),GetName(playerid), params);
        	SendClientMessage(i, Gelb, string);
      	}
    }
	return 1;
}

command(msonline, playerid, params[])
{
    #pragma unused params
	new count = 1,string[1024];
	if(!IsAMS(playerid))
		return SendClientMessage(playerid,Rot,"Du bist kein Mitglied der MS-14 Gang!");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sMitglied] == 5 || sStats[i][sLeiter] == 5)
		{
		    format(string, sizeof(string),"{FFFFFF}Rank: {FFFF00}%s {FFFFFF}| {FFFFFF}Name: {FFFF00}%s {FFFFFF}\n%s", GetPlayerRank(i) ,GetName(i),string);
		    count ++;
		}
	}

	if(count != 1)
	{
	    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}MS-14 Mitglieder Onlineliste", string, "Abbrechen", "");
	    return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}MS-14 Mitglieder Onlineliste", "{FFFFFF}Kein BSPD Mitglied online!", "Abbrechen", "");
		return 1;
	}
}

command(mshelp, playerid, params[])
{
	#pragma unused params
	if(!IsAMS(playerid))
		return SendClientMessage(playerid,Rot,"Du bist kein Mitglied der MS-14 Gang!");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/msf -- {C0C0C0}Gangchat.\n{FFFFFF}/msonline -- {C0C0C0}Mitglieder Onlineanzeige.\n{FFFFFF}/ctf -- {C0C0C0}Flagge erobern.\n{FFFFFF}/erobern -- {C0C0C0}Ganggebiet erobern.\n{FFFFFF}/fpark -- {C0C0C0}Gangfahrzeug umparken.\n{FFFFFF}/fcsell -- {C0C0C0}Gangfahrzeug verkaufen.\n{FFFFFF}/tie -- {C0C0C0}Spieler fesseln.\n{FFFFFF}/untie -- {C0C0C0}Spieler enfesseln.");
	ShowPlayerDialog(playerid,MSHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}MS-14 Gang Hilfebox",string,"OK","");
	return 1;
}
//Detektiv
command(dethelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] != 6)
  		return SendClientMessage(playerid, Rot, "Du bist kein Detektiv!");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/suchen -- {C0C0C0}Du suchst einen Spieler.\n{FFFFFF}/skill -- {C0C0C0}Blendet dein aktuelles Skilllevel ein.");
	ShowPlayerDialog(playerid,DETHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Detektiv Hilfebox",string,"OK","");
	return 1;
}
command(skill, playerid, params[])
{
    #pragma unused params
    new string[128];
	if(sStats[playerid][sJob] != 6)
		return SendClientMessage(playerid,Rot,"Du bist kein Detektiv!");

	ClearChat(playerid);
	SendClientMessage(playerid,Weiß,"----> Detektiv Skill Level <----");
	format(string,sizeof(string),
	"Skill Level : %d",sStats[playerid][sDetSkill]);
	SendClientMessage(playerid,Gelb,string);
	if(sStats[playerid][sDetSkill] < 50)
	{
		SendClientMessage(playerid, Gelb2, "* Dein aktuelles Detektiv Skill beträgt Level 1.");
	}
	else if(sStats[playerid][sDetSkill] == 50)
	{
		SendClientMessage(playerid, Gelb2, "* Dein aktuelles Detektiv Skill beträgt Level 2.");
	}
	else if(sStats[playerid][sDetSkill] == 100)
	{
		SendClientMessage(playerid, Gelb2, "* Dein aktuelles Detektiv Skill beträgt Level 3.");
	}
	else if(sStats[playerid][sDetSkill] == 200)
	{
		SendClientMessage(playerid, Gelb2, "* Dein aktuelles Detektiv Skill beträgt Level 4.");
	}
	else if(sStats[playerid][sDetSkill] == 400)
	{
		SendClientMessage(playerid, Gelb2, "* Dein aktuelles Detektiv Skill beträgt Level 5.");
	}
	return 1;

}
command(find, playerid, params[])
{
	#pragma unused params
	return cmd_suchen(playerid, params);
}
command(suchen, playerid, params[])
{
	new pid,pid2;
	if(sStats[playerid][sJob] != 6)
		return SendClientMessage(playerid,Rot,"Du bist kein Detektiv!");
	if(sscanf(params,"uu",pid,pid2))
		return SendClientMessage(playerid,Weiß,"Befehl: /suchen [Spieler] [Gesuchten Spieler]");
	if(UsedFind[playerid] > 0)
		return SendClientMessage(playerid,Rot,"Du musst 60 Sekunden warten bevor du wieder einen anderen Spieler suchen kannst!");
	if(pid2 == playerid)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber suchen!");
	if(pid == INVALID_PLAYER_ID || pid2 == INVALID_PLAYER_ID )
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(pid) || IsPlayerNPC(pid2) ) return 1;

	new points;
	new level = sStats[playerid][sDetSkill];
	if(level <= 0)
	{ points = 4; }
	if(level >= 0 && level <= 50)
	{ points = 4; }
	else if(level >= 51 && level <= 100)
	{ points = 6; }
	else if(level >= 101 && level <= 200)
	{ points = 8; }
	else if(level >= 201 && level <= 400)
	{ points = 10; }
	else if(level >= 401)
	{ points = 12; }
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(pid2, X,Y,Z);
	SetPlayerCheckpoint(pid, X,Y,Z, 6);
	QuestCP[pid] = 96;
	FindTime[playerid] = 1;
	FindTimePoints[playerid] = points;
	sStats[playerid][sDetSkill] ++;
	UsedFind[playerid] = 1;
	if(sStats[playerid][sDetSkill] == 50)
	{ SendClientMessage(playerid, Gelb2, "* Dein Detektiv Skill ist nun Level 2."); }
	else if(sStats[playerid][sDetSkill] == 100)
	{ SendClientMessage(playerid, Gelb2, "* Dein Detektiv Skill ist nun Level 3."); }
	else if(sStats[playerid][sDetSkill] == 200)
	{ SendClientMessage(playerid, Gelb2, "* Dein Detektiv Skill ist nun Level 4."); }
	else if(sStats[playerid][sDetSkill] == 400)
	{ SendClientMessage(playerid, Gelb2, "* Dein Detektiv Skill ist nun Level 5."); }
	return 1;
}

//Angel
command(angelhelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sAngel] != 1)
  		return SendClientMessage(playerid, Rot, "Du hast keine Angel!");

	new string[260];
	format(string,sizeof(string),
	"{FFFFFF}/angel -- {C0C0C0}Angel ausrüsten/wegpacken.\n{FFFFFF}/angeln -- {C0C0C0}Angel auswerfen.\n{FFFFFF}/sellfische -- {C0C0C0}Geangelte Fische verkaufen.\n{FFFFFF}/wfische -- {C0C0C0}Geangelte Fische zurück ins Wasser werfen.\n");
	ShowPlayerDialog(playerid,ANGELHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Angel Hilfebox",string,"OK","");
	return 1;
}
command(wfische, playerid, params[])
{
    #pragma unused params
    if(sStats[playerid][sFisch] < 1)
    {
		SendClientMessage(playerid,Rot,"Du hast keine Fische dabei, geh erst welche angeln!");
        return 1;
    }
    if(IsAtAngel(playerid))
	{
	    ClearChat(playerid);
	    sStats[playerid][sFisch] = 0;
	    SendClientMessage(playerid,Weiß,"Du hast all deine Fische zurück ins Wasser geworfen!");
	    SendClientMessage(playerid,Gelb2,"Oh Warte! Ein Fisch zwinkt mit den Augen und bedankt sich sozusagen bei dir.");
	    return 1;
 	}
 	else
 	{
 	    SendClientMessage(playerid,Rot,"Du bist nicht beim Bayside Angelplatz!");
 	    return 1;
  	}
}
command(sellfische, playerid, params[])
{
    #pragma unused params
    new string[128];
    if(sStats[playerid][sFisch] < 1)
    {
		SendClientMessage(playerid,Rot,"Du hast keine Fische dabei, geh erst welche angeln!");
        return 1;
    }
   	if(IsPlayerInRangeOfPoint(playerid,3.5, -28.0107,-185.1465,1003.5469))
	{
	    new preis = random(50)*sStats[playerid][sFisch];
	    if(BizzInfo[1][bTill] < preis)
	    {
	        SendClientMessage(playerid,Rot,"Das 24/7 Geschäft hat nicht genug Geld in der Kasse um dir die Fische abzukaufen!");
	    }
		format(string, sizeof(string), "Du hast erfolgreich %d Fische für %d verkauft",sStats[playerid][sFisch],preis);
		SendClientMessage(playerid,Weiß,string);
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		GivePlayerEuro(playerid,preis);
		BizzInfo[1][bTill] -= preis;
		BizzInfo[1][bProducts] += sStats[playerid][sFisch];
		sStats[playerid][sFisch] = 0;
		return 1;
	}
	else
	{
		SendClientMessage(playerid, Rot,"Du bist nicht im 24/7 Shop bei der Kasse!");
		return 1;
	}
}
command(angel, playerid, params[])
{
    #pragma unused params
    if(sStats[playerid][sAngel] == 0)
	{
	    SendClientMessage(playerid,Rot,"Du hast keine Angel!");
	    return 1;
	}
	if(GetPVarInt(playerid, "InAschein") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du kannst deine Angel nicht wegpacken, wenn du in der Praktischen Prüfung für die Anglerlizens bist!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Angela") == 0)
	{
	    SetPVarInt(playerid,"Angela",1);
	    SetPlayerAttachedObject(playerid,9,18632,5,0.078999,0.048000,0.003000,-8.899996,4.900001,-4.600000,1.000000,1.000000,1.000000);
	    SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Angel ausgerüstet, du kannst diese jetzt mit /angeln benutzen!");
	    return 1;
	}
	else
	{
	    RemovePlayerAttachedObject(playerid, 9);
	    SetPVarInt(playerid,"Angela",0);
	    SendClientMessage(playerid,Weiß,"Du hast deine Angel zurück ins Inventar gelegt!");
	    return 1;
	}
}
command(angeln, playerid, params[])
{
    #pragma unused params
    if(sStats[playerid][sAngel] == 0 && GetPVarInt(playerid, "InAschein") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du hast keine Angel!");
	    return 1;
	}
	if(sStats[playerid][sFisch] > 5)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nicht mehr wie 5 Fische tragen!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Angela") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du hast deine Angel noch nicht ausgerüstet /angel!");
	    return 1;
	}
	if(GetPVarInt(playerid, "InAschein") == 1 && GetPVarInt(playerid, "FGefangen") < 2 && GetPVarInt(playerid, "AVersuche") == 0)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil der Anglerlizens leider nicht bestanden!");
		SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Anglerlizens Preises zurück bekommen!");
		SetPVarInt(playerid,"AVersuche",0);
		SetPVarInt(playerid, "FGefangen", 0);
		SetPVarInt(playerid, "Angela", 0);
		SetPVarInt(playerid, "InAschein", 0);
		sStats[playerid][sFisch] = 0;
		GivePlayerEuro(playerid,1600);
  		RemovePlayerAttachedObject(playerid, 5);
  		RemovePlayerAttachedObject(playerid, 6);
  		ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		KillTimer(AngelTimer[playerid]);
 		if(GetPVarInt(playerid, "Adminduty") == 1 && sStats[playerid][sAdminlevel] == 5)
		{
			SetPlayerAttachedObject(playerid, 5, 19079, 17, 0.054798, -0.068864, 0.143832, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetPlayerAttachedObject(playerid, 6, 1276, 1, 0.026707, 0.049716, 0.044027, 0.000000, 166.186828, 295.838226, -0.335559, 1.000000, 0.018289);
		}
		return 1;
	}
	if(GetPVarInt(playerid, "InAschein") == 1 && GetPVarInt(playerid, "FGefangen") >= 2)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid,Gelb2,"Du hast den praktischen Anglertest erfolgreich bestanden!");
		SendClientMessage(playerid,Weiß,"Viel Spass mit der Anglerlizens!");
		sStats[playerid][sAnglerschein] = 1;
		SetPVarInt(playerid,"AVersuche",0);
		SetPVarInt(playerid, "FGefangen", 0);
		SetPVarInt(playerid, "Angela", 0);
		SetPVarInt(playerid, "InAschein", 0);
		sStats[playerid][sFisch] = 0;
  		RemovePlayerAttachedObject(playerid, 5);
  		RemovePlayerAttachedObject(playerid, 6);
  		ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		KillTimer(AngelTimer[playerid]);
 		if(GetPVarInt(playerid, "Adminduty") == 1 && sStats[playerid][sAdminlevel] == 5)
		{
			SetPlayerAttachedObject(playerid, 5, 19079, 17, 0.054798, -0.068864, 0.143832, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetPlayerAttachedObject(playerid, 6, 1276, 1, 0.026707, 0.049716, 0.044027, 0.000000, 166.186828, 295.838226, -0.335559, 1.000000, 0.018289);
		}
		return 1;
	}
	if(IsAtAngel(playerid))
 	{
 	    if(sStats[playerid][sKoeder] < 1)
		{
		    SendClientMessage(playerid,Rot,"Du hast keine Köder mehr!");
		    return 1;
		}
		if(GetPVarInt(playerid, "InAschein") == 0)
		{
			SendClientMessage(playerid,Weiß,"Du packst einen Köder an deine Angel und schwingst die Angel ins Wasser!");
			TogglePlayerControllable(playerid, false);
			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Plyr", 4.0, 0, 1, 1, 1, 0, 1);
			sStats[playerid][sKoeder] -= 1;
			new randtime = 15101 + random (4001);
			SetTimerEx("Fisch",randtime,false,"i",playerid);
			return 1;
		}
		else
		{
   			SendClientMessage(playerid,Weiß,"Du packst einen Köder an deine Angel und schwingst die Angel ins Wasser!");
   			TogglePlayerControllable(playerid, false);
   			SetCameraBehindPlayer(playerid);
			ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Plyr", 4.0, 0, 1, 1, 1, 0, 1);
			sStats[playerid][sKoeder] -= 1;
			new randtime = 15101 + random (4001);
			SetTimerEx("Fisch",randtime,false,"i",playerid);
			return 1;
		}
 	}
 	else
 	{
 	    SendClientMessage(playerid,Rot,"Du bist nicht am Bayside Angelplatz!");
 	    return 1;
 	}
}
//BSPD Befehle
command(backup, playerid, params[])
{
    #pragma unused params
	new string[128];
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um ein Hilferuf starten zu können.");
	if(backup == 1 && GetPVarInt(playerid, "Backup") == 0)
	    return SendClientMessage(playerid, Rot,"Es wurde schon ein Hilferuf gestartet, bitte warte bis dieser zuende ist!");
 	if (GetPVarInt(playerid, "Backup") == 0)
	{
	    format(string, sizeof(string), "An alle Einheiten: %s %s braucht umgehend Verstärkung, begibt euch zum roten Punkt auf der Karte.", GetPlayerRank(playerid),GetName(playerid));
	    SendRadioMessage(1,COLOR_DBLUE,string);
	    SendClientMessage(playerid,Weiß,"Du hast erfolgreich ein Hilferuf gestartet, benutze nochmal /backup um diesen zu beenden!");
	    SetPVarInt(playerid,"Backup",1);
	    backup = 1;
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
		    if(IsACop(i) && GetPVarInt(i, "InMschein") <= 0 && GetPVarInt(i, "InWschein") <= 0 && GetPVarInt(i, "InTschein") <= 0 && GetPVarInt(i, "InFschein") <= 0 && GetPVarInt(i, "InBschein") <= 0 && GetPVarInt(i, "StartDrift") <= 0)
		    {
				SetPlayerCheckpoint(i,X,Y,Z,3.0);
				QuestCP[i] = 96;
				return 1;
		    }
		}
	}
	else
	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
		    if(IsACop(i) && GetPVarInt(i, "InMschein") <= 0 && GetPVarInt(i, "InWschein") <= 0 && GetPVarInt(i, "InTschein") <= 0 && GetPVarInt(i, "InFschein") <= 0 && GetPVarInt(i, "InBschein") <= 0  && GetPVarInt(i, "StartDrift") <= 0)
		    {
		        DisablePlayerCheckpoint(i);
		        QuestCP[i] = 0;
		    }
		}
  		format(string, sizeof(string), "An alle Einheiten: %s %s's braucht keine Verstärkung mehr.", GetPlayerRank(playerid),GetName(playerid));
	    SendRadioMessage(1,COLOR_DBLUE,string);
	    backup = 0;
	    SetPVarInt(playerid,"Backup",0);
	    return 1;
	}
	return 1;
}
command(horten, playerid, params[])
{
	new nummer,string[128];
	new days,hours,mins;
	new wartezeit = GetPVarInt(playerid, "Cooldown2");
	new restzeit= wartezeit -gettime();
	days = floatround(restzeit / 86400,floatround_floor);
	hours = restzeit - (days * 86400);
	hours = floatround(hours / 3600,floatround_floor);
	mins = restzeit - ( (days * 86400) + (hours * 3600) );
	mins = floatround(mins / 60,floatround_floor);
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um Handys orten zu können.");
  	if(sStats[playerid][sRank] < 3)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 3 sein, um Handys orten zu können!");
   	if(!IsACopCar(GetPlayerVehicleID(playerid)))
		return SendClientMessage(playerid, Rot,"Du sitzt in keinem Einsatzwagen!");
	if(GetPVarInt(playerid, "Cooldown2") != 0)
	{
		format(string, sizeof(string), "Du musst noch %d Minuten warten, bevor du wieder ein Handy orten kannst!",mins);
		SendClientMessage(playerid,Rot,string);
		return 1;
	}
 	if(sscanf(params,"u",nummer))
		return SendClientMessage(playerid,Weiß,"Befehl: /horten [Handynummer]");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
 		if(Handy[i][Nummer] == nummer)
   		{
		    if(sStats[i][sHandy] > 0)
		    {
		        if(GetPVarInt(i, "HandyStatus") == 1)
		        {
		            new Float:X,Float:Y,Float:Z;
					GetPlayerPos(i, X, Y, Z);
					ClearChat(playerid);
					SendClientMessage(playerid,Weiß,"Der aktuelle Standpunkte des Handys mit der angegeben Nummer, ist nun für 7 Sekunden auf der Karte rot markiert!");
					SetPlayerCheckpoint(playerid,X,Y,Z,3.0);
					SetTimerEx("CheckpointWeg", 7177, false, "d", playerid);
					QuestCP[playerid] = 96;
					SetPVarInt(playerid,"Cooldown2",gettime()+(60*7));
					return 1;
		        }
		        else
		        {
		            SendClientMessage(playerid,Rot,"Das Handy mit der dazugehörigen Nummer wurde ausgeschaltet!");
		            return 1;
		        }
		    }
		    else
		    {
      				SendClientMessage(playerid,Rot,"Diese Nummer wurde keinem Handy zugeordnet!");
		            return 1;
		    }
		}
		else
		{
  			SendClientMessage(playerid,Rot,"Lokalisierung fehlgeschlagen!");
     		return 1;
		}
	}
	return 1;
}
command(sirene, playerid ,params[])
{
    #pragma unused params
    new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um eine Sirene auf dein Auto setzen zu können.");
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot,"Du musst auf/in einem Fahrzeug sitzen, um eine Sirene auf dein Auto setzen zu können.");
 	if(spawncar_job[vehicleid] == 1 && GetVehicleModel(vehicleid) == 560)
	{
	    if(UCL[GetPlayerVehicleID(playerid)] == 0)
	    {
	 		sirene[GetPlayerVehicleID(playerid)] = CreateObject(19419,0,0,0,0,0,0,100);
	 		sirene3[GetPlayerVehicleID(playerid)] = CreateObject(19288,0,0,0,0,0,0,100);
	 		sirene4[GetPlayerVehicleID(playerid)] = CreateObject(19292,0,0,0,0,0,0,100);
			AttachObjectToVehicle(sirene[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),0, 0, 0.80, 0, 0, 0);//Vorne Mitte
			AttachObjectToVehicle(sirene3[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),-0.7,2.6,0,0,0,0);//Vorne Licht Fahrerseite
			AttachObjectToVehicle(sirene4[GetPlayerVehicleID(playerid)],GetPlayerVehicleID(playerid),0,0.9,0.4,0,0,0);//Mittig im Fenster
			UCL[GetPlayerVehicleID(playerid)] = 1;
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Sirene ~g~aktiviert",3000, 5);
			SendClientMessage(playerid, Weiß, "Du kannst die Sirene mit /sirene wieder ausschalten!");
			return 1;
		}
		else
		{
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Sirene ~r~deaktiviert",3000, 5);
      		DestroyObject(sirene[vehicleid]);
		    DestroyObject(sirene1[vehicleid]);
		    DestroyObject(sirene2[vehicleid]);
		    DestroyObject(sirene3[vehicleid]);
		    DestroyObject(sirene4[vehicleid]);
		    UCL[GetPlayerVehicleID(playerid)] = 0;
		    return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du musst in einem Undercover Dienstwagen sitzen!");
	    return 1;
 	}
}
command(closepoli, playerid ,params[])
{
    #pragma unused params
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um ein Notruf beenden zu können.");
	if(GetPVarInt(playerid, "P2") == 1)
 	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
		 	if(DeinP[i] == playerid)
		    {
		    	new string[128];
				format(string,sizeof(string),"%s %s hat deinen Notruf beendet.",GetPlayerRank(i),GetName(playerid));
				SendClientMessage(i,Gruen,string);
				SendClientMessage(playerid,Weiß,"Du hast den Notruf beendet!");
				SetPVarInt(i, "InP", 0);
				DeinP[i] = 0;
		  		SetPVarInt(playerid, "InP", 0);
				DeinP[playerid] = 0;
		  		DeletePVar(i, "P");
		  		DeletePVar(playerid, "P2");
		  		return 1;
 			}
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du hast keinen Notruf angenommen!");
	    return 1;
	}
	return 1;
}
command(acceptpoli, playerid, params[])
{
	new id;
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um ein Notruf annehmen zu können.");
	if(sscanf(params,"u",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /acceptpoli [ID/Name]");
  	if(GetPVarInt(playerid, "P2") == 1)
		return SendClientMessage(playerid, Rot, "Du kannst nicht mehr als einen Notruf bearbeiten!");
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nicht deinen eigenen Notruf bearbeiten!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(GetPVarInt(id, "Psend") == 1)
 	{
	    new Name[MAX_PLAYER_NAME], string[128];
	    GetPlayerName(playerid,Name,sizeof(Name));
	    SendClientMessage(playerid,Gruen,"Du kannst nun mit dem Anrufer kommunizieren, benutze /closepoli um den Anruf zu beenden.");
		format(string,sizeof(string),"%s %s hat deinen Anruf angenommen. Du kannst nun mit ihm im Chat kommunizieren!",GetPlayerRank(playerid),Name);
		SendClientMessage(id,Gruen,string);
		SendClientMessage(playerid,Weiß,"Außerdem wurde ein roter Marker auf die Karte gesetzt wo sich der Anrufer befindet! (20 Sekunden)");
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(id, X, Y, Z);
		SetPlayerCheckpoint(playerid,X,Y,Z,4.0);
		SetTimerEx("CheckpointWeg", 20047, false, "d", playerid);
		QuestCP[playerid] = 96;
	 	SetPVarInt(id, "InP", 1);
	 	SetPVarInt(playerid, "P2", 1);
		DeinP[id] = playerid;
		DeinP[playerid] = id;
		DeletePVar(id, "Psend");
    }
    else
    {
        SendClientMessage(playerid,Rot,"Der Spieler hat keinen Notruf gesendet!");
        return 1;
	}
		return 1;
}
command(take, playerid, params[])
{
	new pID,string[128],option[30];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um Türen auftreten zu können.");
	if(sscanf(params, "us",pID,option))
  	{
		SendClientMessage(playerid, Weiß, "Befehl: /showmarke [Name/ID] [Option]");
		SendClientMessage(playerid, Gelb, "Verfügbare Optionen: Autoschein, Flugschein, Bootsschein, Waffenschein, Motorradschein, Truckschein, Angelschein, Materialien");
		SendClientMessage(playerid, Gelb, "Verfügbare Optionen: Drogen, Waffen, Bombe, Maske");
		return 1;
	}
  	if(sStats[playerid][sRank] < 1)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 1 sein, um Sachen wegnehmen zu können!");
  	if(playerid == pID)
	 	return SendClientMessage(playerid, Rot,"Du kannst kannst dir nicht deine eigenen Sachen wegnehmen.");
   	if (pID == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler exisitert nicht!");
	if(IsPlayerNPC(pID))
		return SendClientMessage(playerid, Rot,"Du kannst keinem NPC/Bots Sachen wegnehmen!");
	if(IsACop(pID))
		return SendClientMessage(playerid, Rot,"Du kannst keinem Polizist Sachen wegnehmen!");
 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	    return SendClientMessage(playerid, Rot,"Der Spieler ist Fahrer eines Fahrzeuges du kannst ihm keine Sachen wegnehmen!");
	if(strcmp(option, "Autoschein", true) == 0)
	{
		if(sStats[pID][sAutoschein] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keinen Führerschein!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deinen Führerschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Führerschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sAutoschein] = 0;
			return 1;
 	}
	if(strcmp(option, "Flugschein", true) == 0)
	{
		if(sStats[pID][sFlugschein] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keinen FüFlugschein!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deinen Flugschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Flugschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sFlugschein] = 0;
			return 1;
 	}
	if(strcmp(option, "Bootsschein", true) == 0)
	{
		if(sStats[pID][sBootschein] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keinen Bootsschein!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deinen Bootsschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Bootsschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sBootschein] = 0;
			return 1;
 	}
	if(strcmp(option, "Waffenschein", true) == 0)
	{
		if(sStats[pID][sWaffenschein] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keinen Waffenschein!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deinen Waffenschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Waffenschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sWaffenschein] = 0;
			return 1;
 	}
	if(strcmp(option, "Anglerschein", true) == 0)
	{
		if(sStats[pID][sAnglerschein] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keinen Anglerschein!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deinen Anglerschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Anglerschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sAnglerschein] = 0;
			return 1;
 	}
	if(strcmp(option, "Motorradschein", true) == 0)
	{
		if(sStats[pID][sMotorradschein] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keinen Motorradschein!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deinen Motorradschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Motorradschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sMotorradschein] = 0;
			return 1;
 	}
	if(strcmp(option, "Truckschein", true) == 0)
	{
		if(sStats[pID][sTruckschein] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keinen Motorradschein!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deinen Truckschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Truckschein sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sTruckschein] = 0;
			return 1;
 	}
	if(strcmp(option, "Materialien", true) == 0)
	{
		if(sStats[pID][sMats] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keine Materialien!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deine Materialien sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Materialien sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sMats] = 0;
			return 1;
 	}
	if(strcmp(option, "Drogen", true) == 0)
	{
		if(sStats[pID][sDrogen] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keine Drogen!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deine Drogen sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Drogen sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sDrogen] = 0;
			return 1;
 	}
	if(strcmp(option, "Bombe", true) == 0)
	{
		if(sStats[pID][sBombe] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keine Bombe!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deine Bombe sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Bombe sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sBombe] = 0;
			return 1;
 	}
	if(strcmp(option, "Maske", true) == 0)
	{
		if(sStats[pID][sMaske] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler hat keine Maske!");
		    return 1;
		}
			format(string, sizeof(string), "%s %s hat deine Maske sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Maske sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			sStats[pID][sMaske] = 0;
			return 1;
 	}
	if(strcmp(option, "Waffen", true) == 0)
	{
			format(string, sizeof(string), "%s %s hat deine Waffen sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			format(string, sizeof(string), "Du hast %s's Waffen sichergestellt.(Entzogen)", GetPlayerRank(playerid),GetName(playerid));
			SendClientMessage(pID,Weiß, string);
			ResetPlayerWeapons(pID);
			return 1;
 	}
 	return 1;
}
command(ram, playerid, params[])
{
    #pragma unused params
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um Türen auftreten zu können.");
  	if(sStats[playerid][sRank] < 2)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 2 sein um Türen eintreten zu können!");
   	for(new i = 0; i < Houses_Index; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			SetPlayerInterior(playerid,HouseInt_Interior[HouseInfo[i][hInteriorID]]);
			SetPlayerPosEx(playerid,HouseInt_Spawn_X[HouseInfo[i][hInteriorID]],HouseInt_Spawn_Y[HouseInfo[i][hInteriorID]],HouseInt_Spawn_Z[HouseInfo[i][hInteriorID]]);
			GameTextForPlayer(playerid, "~r~Tuer eingetreten", 5000, 1);
			SetPlayerVirtualWorld(playerid, i);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe einer Türe welche, du auftreten kannst!");
		    return 1;
		}
	}
	return 1;
}
command(showmarke, playerid, params[])
{
	new pID,string[230];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um anderen deine Dienstmarke zeigen zu können.");
	if(sscanf(params, "u",pID))
		return SendClientMessage(playerid, Weiß, "Befehl: /showmarke [Name/ID]");
  	if(playerid == pID)
	 	return SendClientMessage(playerid, Rot,"Du kannst kannst dir nicht deine eigene Dienstmarke zeigen nutze, /stats.");
   	if (pID == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler exisitert nicht!");
	if(IsPlayerNPC(pID))
		return SendClientMessage(playerid, Rot,"Du kannst keinem NPC/Bots deine Dienstmarke zeigen!");
 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	    return SendClientMessage(playerid, Rot,"Der Spieler ist Fahrer eines Fahrzeuges du kannst ihm deine Dienstmarke jetzt nicht zeigen!");
 	if (ProxDetectorS(5.0, playerid, pID))
	{
		format(string, sizeof(string), "* %s %s zeigt %s seinen Personalausweis.",GetPlayerRank(playerid), GetName(playerid),GetName(pID));
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string,sizeof(string),"Du zeigst %s deinen Personalausweis.",GetName(pID));
		SendClientMessage(playerid,Weiß,string);
		format(string,sizeof(string),"%s %s zeigt dir seine Dienstmarke.",GetPlayerRank(playerid),GetName(playerid));
		SendClientMessage(pID,Weiß,string);
		format(string,sizeof(string),"{C0C0C0}Dienstmarke: \n\n{C0C0C0}Name : {FFF2F2}%s\n{C0C0C0}Fraktion : {FFF2F2}%s\n{C0C0C0}Rang : {FFF2F2}%s\n{C0C0C0}Staatszugehörigkeit : {FFF2F2}Bayside",GetName(playerid),GetPlayerFraktion(playerid),GetPlayerRank(playerid));
		ShowPlayerDialog(pID,DIENSTMARKE,DIALOG_STYLE_MSGBOX,"Dienstmarke",string,"OK","");
		return 1;
	}
	else
	{
		SendClientMessage(playerid, Rot, "Der Spieler ist nicht in deiner nähe!");
		return 1;
	}
}
command(frisk, playerid, params[])
{
	new pID,string[200];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um andere Spieler durchsuchen zu können.");
	if(sscanf(params, "u",pID))
		return SendClientMessage(playerid, Weiß, "Befehl: /frisk [Name/ID]");
	if(IsACop(pID))
	   	return SendClientMessage(playerid, Rot,"Du kannst keinen Polizisten durchsuchen.");
    if(playerid == pID)
	 	return SendClientMessage(playerid, Rot,"Du kannst dich nicht selber durchsuchen.");
   	if (pID == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler exisitert nicht!");
	if(IsPlayerNPC(pID))
		return SendClientMessage(playerid, Rot,"Du kannst keinem NPC/Bots durchsuchen!");
	if (ProxDetectorS(5.0, playerid, pID))
	{
	    ClearChat(playerid);
		new text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[20], text8[20], text9[20];
		if(sStats[pID][sDrogen] > 0) { text1 = "| Drogen."; } else { text1 = "| Leere Tasche."; }
		if(sStats[pID][sMats] > 0) { text2 = "| Materialien."; } else { text2 = "| Leere Tasche."; }
		if(sStats[pID][sFisch] > 0) { text4 = "| Fische."; } else { text4 = "| Leere Tasche."; }
		if(sStats[pID][sTelefonBuch] > 0) { text4 = "| Telefonbuch."; } else { text4 = "| Leere Tasche."; }
		if(sStats[pID][sMP3Player] > 0) { text5 = "| MP3Player."; } else { text5 = "| Leere Tasche."; }
		if(sStats[pID][sBombe] > 0) { text6 = "| Bombe."; } else { text6 = "| Leere Tasche."; }
		if(sStats[pID][sPfand] > 0) { text7 = "| Pfandflaschen."; } else { text7 = "| Leere Tasche."; }
		if(sStats[pID][sMaske] > 0) { text9 = "| Maske."; } else { text9 = "| Leere Tasche."; }
		format(string, sizeof(string), "|__________ Items von %s __________|", GetName(pID));
		SendClientMessage(playerid, Gelb2, string);
		format(string, sizeof(string), "%s.", text1);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "%s.", text2);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "%s.", text3);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "%s.", text4);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "%s.", text5);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "%s.", text6);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "%s.", text7);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "%s.", text8);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "%s.", text9);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "* %s %s hat %s nach illegalen Dingen durchsucht.", GetPlayerRank(playerid),GetName(playerid),GetName(pID));
		ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, Rot, "Dieser Spieler ist nicht in deiner Nähe!");
		return 1;
	}
}
command(bspdhelp, playerid, params[])
{
	#pragma unused params
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/bspdonline -- {C0C0C0}Onlineanzeige der Mitglieder.\n{FFFFFF}/duty -- {C0C0C0}Start des Dienstes.\n{FFFFFF}/opengate -- {C0C0C0}Öffnet die Türen.\n{FFFFFF}/r -- {C0C0C0}Funkchat.\n{FFFFFF}/clear -- {C0C0C0}Aktenlöschung.\n{FFFFFF}/arrest -- {C0C0C0}Sperrt einen Verbrechen ein.\n{FFFFFF}/wanteds -- {C0C0C0}Verbrecherkartei.");
	ShowPlayerDialog(playerid,BSPDHELP1,DIALOG_STYLE_MSGBOX,"{FFFF00}Bayside Police-Department Hilfebox",string,"Weiter","Abbrechen");
	return 1;
}

command(gsperre, playerid, params[])
{
    #pragma unused params
    new string[128];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um eine Straßensperre errichten/löschen zu können.");
	if(sStats[playerid][sRank] < 3)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 3 sein, um eine Straßensperre errichten zu können!");
	if(GetPlayerInterior(playerid) > 0)
	    return SendClientMessage(playerid,Rot,"Du kannst in Gebäuden keine Absperrung aufbauen!");
  	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot,"Du kannst keine Straßensperre errichten/löschen während du auf/in einem Fahrzeug sitzt.");
	if(RoadBlock == 1)
	{
		DestroyDynamicObject(RoadBlockId);
		SendClientMessage(playerid, Weiß, "Du hast die Straßensperre erfolgreich abgebaut!");
		format(string, sizeof(string), "%s %s hat erfolgreich die Straßensperre abgebaut.",GetPlayerRank(playerid),GetName(playerid));
		SendRadioMessage(1,COLOR_LIGHTBLUE,string);
		RoadBlock = 0;
		return 1;
	}
		new Float:A,Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		GetXYInFrontOfPlayer(playerid, X, Y, Z, A, 1);
		RoadBlockId = CreateDynamicObject(981, X, Y, Z-0.1, 0.0, 0.0, A+180);
		SetPlayerPosEx(playerid, X, Y, Z+4);
		SendClientMessage(playerid, Weiß, "Du hast erfolgreich eine Straßensperre erstellt. (/sperre um diese wieder zu entfernen!)");
		RoadBlock = 1;
		format(string, sizeof(string), "%s %s hat erfolgreich eine Straßensperre errichtet.",GetPlayerRank(playerid),GetName(playerid));
		SendRadioMessage(1,COLOR_LIGHTBLUE,string);
		return 1;
}

command(ksperre, playerid, params[])
{
    #pragma unused params
    new string[128];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um eine Straßensperre errichten/löschen zu können.");
	if(sStats[playerid][sRank] < 3)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 3 sein, um eine Straßensperre errichten zu können!");
	if(GetPlayerInterior(playerid) > 0)
	    return SendClientMessage(playerid,Rot,"Du kannst in Gebäuden keine Absperrung aufbauen!");
  	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot,"Du kannst keine Straßensperre errichten/löschen während du auf/in einem Fahrzeug sitzt.");
	if(RoadBlockk == 1)
	{
		DestroyDynamicObject(RoadBlockIdk);
		SendClientMessage(playerid, Weiß, "Du hast die kleine Straßensperre erfolgreich abgebaut!");
		format(string, sizeof(string), "%s %s hat erfolgreich die kleine Straßensperre abgebaut.",GetPlayerRank(playerid),GetName(playerid));
		SendRadioMessage(1,COLOR_LIGHTBLUE,string);
		RoadBlockk = 0;
		return 1;
	}
		new Float:A,Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		GetXYInFrontOfPlayer(playerid, X, Y, Z, A, 1);
		RoadBlockIdk = CreateDynamicObject(1459, X, Y, Z-0.4, 0.0, 0.0, A+180);
		SetPlayerPosEx(playerid, X, Y, Z+4);
		SendClientMessage(playerid, Weiß, "Du hast erfolgreich eine kleine Straßensperre erstellt. (/ksperre um diese wieder zu entfernen!)");
		RoadBlockk = 1;
		format(string, sizeof(string), "%s %s hat erfolgreich eine kleine Straßensperre errichtet.",GetPlayerRank(playerid),GetName(playerid));
		SendRadioMessage(1,COLOR_LIGHTBLUE,string);
		return 1;
}

command(createnagelband, playerid, params[])
{
    #pragma unused params
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um Nagelbänder legen zu können.");
   	if(sStats[playerid][sRank] < 3)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 3 sein, um Nagelbänder erstellen zu können!");
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot,"Du kannst während du in/auf einem Fahrzeug bist keine Nagelbänder legen.");
	if(GetPlayerInterior(playerid) >= 1)
 		return SendClientMessage(playerid, Rot, "Du kannst in einem Gebäude nicht springen!");
	if (nagelband >= 20)
		return SendClientMessage(playerid, Rot,"Es können nicht mehr wie 20 Nagelbänder gelegt werden.");
	if (GetPVarInt(playerid, "NagelbandGelegt") == 1)
		return SendClientMessage(playerid, Rot,"Du musst erst eine(1) Minute warten bevor du ein neues Nagelband legen kannst.");

 	new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
    GetPlayerPos(playerid, plocx, plocy, plocz);
    GetPlayerFacingAngle(playerid,ploca);
   	CreateStrip(plocx,plocy,plocz,ploca);
    SendClientMessage(playerid, Weiß, "Das Nagelband wurde erfolgreich aufgestellt, mit /deletenagelband kannst du dieses wieder löschen.");
   	SetPVarInt(playerid,"NagelbandGelegt" ,1);
   	SetTimerEx("NagelBandUpdate", 60127, false, "d", playerid);
   	return 1;
}

command(deletenagelband, playerid, params[])
{
    #pragma unused params
	for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
  	{
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um Nagelbänder wegnehmen zu können.");
	if(sStats[playerid][sRank] < 3)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 3 sein, um Nagelbänder löschen zu können!");
	if(GetPlayerInterior(playerid) >= 1)
 		return SendClientMessage(playerid, Rot, "Du kannst in einem Gebäude keine Nagelbänder entfernen!");
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot,"Du kannst während du in/auf einem Fahrzeug bist keine Nagelbänder wegnehmen.");
	if (nagelband == 0)
		return SendClientMessage(playerid, Rot,"Es wurden keine Nagelbänder gelegt.");

 	DeleteClosestStrip(playerid);
	SendClientMessage(playerid, Weiß, "Du hast das Nagelband, welches in deiner Nähe war gelöscht.");
   	return 1;
   	}
   	else return SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe eines Nagelbandes!");
	}
	return 1;
}

command(jailtime, playerid, params[])
{
    #pragma unused params
   	if(sStats[playerid][sJailed] != 1)
	  	return SendClientMessage(playerid, Rot,"Du bist nicht im Gefängnis!");

	  	new string[128];
	  	format(string, sizeof(string), "Deine Restliche Gefängniszeit beträgt: %d Sekunden.[%d Minuten].",sStats[playerid][sJailTime],floatround(sStats[playerid][sJailTime]/60));
	  	SendClientMessage(playerid,Gelb2,string);
	  	return 1;
}

command(kaution, playerid, params[])
{
    #pragma unused params
   	if(sStats[playerid][sJailed] != 1)
	  	return SendClientMessage(playerid, Rot,"Du bist nicht im Gefängnis!");

	new geld;
 	geld = GetPlayerEuros(playerid);
  	if(geld < GetPVarInt(playerid, "Kaution")) {
   		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
     	return 1;
      }
      if(GetPVarInt(playerid, "Kaution") == 0)
      	return SendClientMessage(playerid, Rot, "Du kannst keine Kaution mehr bezahlen!");

        new string[128];
	  	format(string, sizeof(string), "Du hast die Kaution[%d] bezahlt und bist nun ein freier Bürger.",GetPVarInt(playerid, "Kaution"));
	  	SendClientMessage(playerid,Gelb2,string);
		SetPlayerInterior(playerid,0);
  		SetPlayerPosEx(playerid,-2249.1746,2355.4294,4.9730);
    	SetPlayerFacingAngle(playerid,132.2612);
    	GivePlayerEuro(playerid, -GetPVarInt(playerid, "Kaution"));
    	new Geld = GetPVarInt(playerid, "Kaution");
    	Staatskasse+=Geld;
	  	DeletePVar(playerid, "Kaution");
	  	sStats[playerid][sJailTime] = 0;
	  	sStats[playerid][sJailed] = 0;
	  	return 1;
}
command(verbrecher, playerid, params[])
{
	#pragma unused params
	return cmd_arrest(playerid, params);
}

command(strafzettel, playerid, params[])
{
	#pragma unused params
	return cmd_ticket(playerid, params);
}

command(ticket, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(IsACop(playerid))
		{
		}
		else
		{
			SendClientMessage(playerid, Rot, "Du bist kein Mitglied des Bayside Police-Department.");
			return 1;
		}
		new pID,Preis,Grund[64],string[128];
		if(sscanf(params, "uds",pID,Preis,Grund))
			return SendClientMessage(playerid, Weiß, "Befehl: /ticket [Name/ID] [Preis] [Grund]");
		if(Preis < 1 || Preis > 9999) { SendClientMessage(playerid, Rot, "Das Strafgeld darf nicht kleiner als 1 oder größer als 9999 !"); return 1; }
		if(IsPlayerConnected(pID))
		{
 			if(IsACop(pID))
				return SendClientMessage(playerid, Rot,"Du kannst keinem Polizisten einen Strafzettel verpassen.");
			if(playerid == pID)
				return SendClientMessage(playerid, Rot,"Du kannst dir nicht selber einen Strafzettel verpassen.");
			if(IsPlayerNPC(pID))
				return SendClientMessage(playerid, Rot,"Du kannst einem NPC/Bot keinen Strafzettel verpassen.");
			if(TicketMoney[pID] > 0)
				return SendClientMessage(playerid, Rot,"Der angegebene Spieler hat schon ein Stafzettel erhalten.");
			if(pID != INVALID_PLAYER_ID)
			{
				if (ProxDetectorS(5.0, playerid, pID))
				{
					format(string, sizeof(string), "* Du gibst %s einen Strafzettel in höhe von $%d, Grund: %s", GetName(pID), Preis, Grund);
					SendClientMessage(playerid, Weiß, string);
					format(string, sizeof(string), "* %s %s gibt dir ein Strafzettel in höhe von $%d, Grund: %s", GetPlayerRank(playerid),GetName(playerid), Preis, Grund);
					SendClientMessage(pID, Weiß, string);
					SendClientMessage(pID, Gelb2, "* Benutze /acceptticket um den Strafzettel zu bezahlen!");
					TicketOffer[pID] = playerid;
					TicketMoney[pID] = Preis;
					return 1;
				}
				else
				{
					SendClientMessage(playerid, Rot, "Der angegebene Spieler ist nicht in deiner Nähe!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, Rot, "Der angegebene Spieler ist offline !");
			return 1;
		}
	}
	return 1;
}

command(acceptstrafzettel, playerid, params[])
{
	#pragma unused params
	return cmd_acceptticket(playerid, params);
}

command(acceptticket, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(TicketMoney[playerid] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast keinen Strafzettel erhalten!");
		return 1;
	}
	if(GetPlayerEuros(playerid) < TicketMoney[playerid])
	{
		format(string, sizeof(string), "s hat nicht genug Geld um den Strafzettel zu bezahlen.", GetName(playerid));
		SendClientMessage(MatsId[playerid], Rot, string);
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um den Strafzettel bezahlen zu können!");
		TicketOffer[playerid] = 0; TicketMoney[playerid] = 0;
		return 1;
	}
	if(TicketMoney[playerid] > 0)
	{
		if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
		{
			GivePlayerEuro(playerid,-TicketMoney[playerid]);
			GivePlayerEuro(TicketOffer[playerid],TicketMoney[playerid]/2);
			Staatskasse+=TicketMoney[playerid]/2;
			PlayerPlaySound(TicketOffer[playerid], 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Du hast den Strafzettel vom %s %s bezahlt.", GetPlayerRank(TicketOffer[playerid]),GetName(TicketOffer[playerid]));
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s hat den Strafzettel bezahlt.", GetName(playerid));
			SendClientMessage(TicketOffer[playerid], Weiß, string);
			TicketOffer[playerid] = 0; TicketMoney[playerid] = 0;
			return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist zu weit vom Polizisten entfernt!");
	    return 1;
	}
	return 1;
}
command(fahrzeugback, playerid, params[])
{
	if(!IsACop(playerid))
		return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um diesen Befehl nutzen zu können.");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInRangeOfPoint(playerid,5.0, -2259.4861,2385.7375,4.9885))
	{
	 	if(spawncar_job[vehicleid] == 1 && !IsAPlane(vehicleid) && !IsABoat(vehicleid))
		{
		    RemovePlayerFromVehicle(playerid);
		    SendClientMessage(playerid,Weiß,"Du hast das Fahrzeug erfolgreich zurück in die Garage gefahren!");
		    SetPVarInt(playerid,"Cooldown",0);
		    DestroyVehicle(vehicleid);
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du kannst dieses Fahrzeug nicht zurück in die Garage fahren!");
		    return 1;
		}
	}
 	return 1;
}
command(switchtazer, playerid, params[])
{
	if(!IsACop(playerid))
		return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um diesen Befehl nutzen zu können.");
	if (GetPVarInt(playerid, "Tazer") == 0)
		return SendClientMessage(playerid, Rot,"Du besitzt keinen Tazer!");
 	if (GetPVarInt(playerid, "Tazerr") == 1)
 	{
 	    SendClientMessage(playerid,Weiß,"Du hast deinen Tazer weggelegt!");
 	    GivePlayerWeaponEx(playerid,24,60);
 	    SetPVarInt(playerid,"Tazerr",0);
 	    return 1;
 	}
 	else
 	{
  		SendClientMessage(playerid,Weiß,"Du hast dich erfolgreich mit deinem Tazer ausgerüstet!");
 	    GivePlayerWeaponEx(playerid,23,30);
 	    SetPVarInt(playerid,"Tazerr",1);
 	    return 1;
 	}
}
command(arrest, playerid, params[])
{
	new pID,Zeit,Geld,Kaution,string[128];
	if(sscanf(params, "udd",pID,Zeit,Geld))
	{
		SendClientMessage(playerid, Weiß, "Befehl: /arrest [Name/ID] [Zeit] [Geld]");
		SendClientMessage(playerid, Gelb,"Zeit in Minuten.");
		return 1;
	}
	if(!IsACop(playerid))
	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1)
	return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um Verbrecher einsperren zu können.");
	if(IsACop(pID))
	return SendClientMessage(playerid, Rot,"Du kannst keinen Polizisten einsperren.");
	if(playerid == pID)
	return SendClientMessage(playerid, Rot,"Du kannst dich nicht selber einsperren.");
	if (pID == INVALID_PLAYER_ID)
	return SendClientMessage(playerid, Rot, "Dieser Spieler exisitert nicht");
	if(GetPlayerWantedLevel(pID) < 1)
	return SendClientMessage(playerid, Rot, "Dieser Spieler ist kein Verbrecher!");
	if(Zeit > 120)
	return SendClientMessage(playerid,Rot,"Du kannst den Spieler nicht länger wie 120 Minuten einsperren!");
	if(Zeit <=0)
	return SendClientMessage(playerid,Rot,"Du musst den Spieler mindestens eine Minute einsperren!");
	if(Geld > 50000)
	return SendClientMessage(playerid,Rot,"Die max. Einsatzkosten betragen 50.000!");
	if(IsAtZelle(playerid))
	{
		if (ProxDetectorS(6.0, playerid, pID))
		{
			Kaution = GetPlayerWantedLevel(pID)*5000;
			SetPVarInt(playerid, "Kaution", GetPlayerWantedLevel(pID)*5000);
			Staatskasse+=GetPlayerWantedLevel(pID)*800/2;
			GivePlayerEuro(playerid, Geld/2);
			GivePlayerEuro(pID, -Geld);
			sStats[pID][sJailTime] = Zeit*60;
			sStats[pID][sJailed] = 1;
			new rand = random(sizeof(JailSpawns));
			SetPlayerPosEx(pID, JailSpawns[rand][0], JailSpawns[rand][1], JailSpawns[rand][2]);
			SetPlayerFacingAngle(pID,JailSpawns[rand][3]);
			SetPlayerInterior(pID,10);
			SetPlayerWantedLevel(pID,0);
			sStats[pID][sWanteds] = 0;
			if (GetPVarInt(pID, "Cuffed") == 1)
			{
				DeletePVar(pID, "Cuffed");
				SetPlayerSpecialAction(pID, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 3);
			}
			ClearChat(pID);
			format(string, sizeof(string), "Du wurdest von %s[%d] für %d Minuten eingesperrt. Einsatzkosten: %d Kaution: %d", GetName(playerid),playerid,floatround(Zeit/60),Geld,Kaution);
			SendClientMessage(pID,COLOR_LIGHTRED,string);
			SendClientMessage(pID,Weiß,"Benutze: /jailtime um deine restliche Gefängnis Zeit zu sehen, oder /kaution um deine Kaution zu bezahlen.");
			format(string, sizeof(string), "** %s[%d] hat den gesuchten Verbrecher: %s[%d] verhaftet!", GetName(playerid),playerid,GetName(pID),pID);
			SendRadioMessage(1,COLOR_LIGHTBLUE,string);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Der angegebene Spieler ist nicht in deiner nähe!");
			return 1;
		}
	}
 	else
	{
		SendClientMessage(playerid,Rot,"Du bist nicht beim Einsperrpunkt!");
		return 1;
	}
	return 1;
}


command(bspdradio, playerid, params[])
{
	#pragma unused params
	return cmd_bspdr(playerid, params);
}

command(radio, playerid, params[])
{
	#pragma unused params
	return cmd_bspdr(playerid, params);
}

command(r, playerid, params[])
{
	#pragma unused params
	return cmd_bspdr(playerid, params);
}

command(bspdr, playerid, params[])
{
    if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /bspdr [Nachricht]");
	if(sStats[playerid][sMute] == 1)
		return SendClientMessage(playerid, Rot,"Du kannst das Radio nicht benutzen da du gemutet bist.");
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um das Radio benutzen zu können.");

	new string[128];
	if(CheckPlayerText(playerid,params) == 0) { return 1; }
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
    	if(sStats[i][sMitglied] == 1 || sStats[i][sLeiter] == 1)
     	{
      		format(string, sizeof(string), "[Bayside Police-Department Radio] %s %s: %s", GetPlayerRank(playerid),GetName(playerid), params);
        	SendClientMessage(i, COLOR_LIGHTBLUE, string);
      	}
    }
	return 1;
}
command(checkwanteds, playerid, params[])
{
    #pragma unused params
	new id,string[130];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um diesen Befehl nutzen zu können.");
	if(sscanf(params,"u",id))return SendClientMessage(playerid, Weiß,"Befehl: /checkwanteds [Name/ID]");
	if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(id))
	    return SendClientMessage(playerid,Rot,"Du kannst diesen Befehl, nicht auf einen NPC/Bot ausführen!");

	SendClientMessage(playerid,Weiß,"Wantedinformationen:");
	format(string, sizeof(string), "Spielername: %s",GetName(id));
	SendClientMessage(playerid,Gelb,string);
	format(string, sizeof(string), "Wanteds: %d",sStats[id][sWanteds]);
	SendClientMessage(playerid,Gelb,string);
	return 1;
}
command(wanted, playerid, params[])
{
    #pragma unused params
	new count = 1,string[1023];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um diesen Befehl nutzen zu können.");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sWanteds] > 0)
		{
			new atext[6];
			if (Desktop_Status[i] >=1 ) { atext = "Ja"; }
			else if (Desktop_Status[i] == 0) { atext = "Nein"; }
			format(string, sizeof(string), "{FFFFFF}Verbrecher: {FFFF00}%s[%d] {FFFFFF}| {FFFFFF}Wanteds: {FFFF00}%d {FFFFFF}| {FFFFFF}AFK: {FFFF00}%s\n%s",GetName(i),i,sStats[i][sWanteds],atext,string);
		    count ++;
		}
	}

	if(count != 1)
	{
	    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}Gesuchte Verbrecher", string, "Abbrechen", "");
	    return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}Gesuchte Verbrecher", "{FFFFFF}Zurzeit gibe es keine Verbrecher!", "Abbrechen", "");
		return 1;
	}
}

command(wanteds, playerid, params[])
{
	#pragma unused params
	return cmd_wanted(playerid, params);
}

command(closevr, playerid, params[])
{
    #pragma unused params
    new string[128];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if(sStats[playerid][sRank] < 4)
		return SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 4 um den Verhörungsraum schließen zu können!");

	if(vraum == 0)
	{
		format(string, sizeof(string), "%s %s hat den Verhörungsraum geschlossen!",GetPlayerRank(playerid),GetName(playerid));
		SendRadioMessage(1,COLOR_DBLUE,string);
	    vraum = 1;
	    return 1;
	}
	else
	{
		format(string, sizeof(string), "%s %s hat den Verhörungsraum geöffnet!",GetPlayerRank(playerid),GetName(playerid));
		SendRadioMessage(1,COLOR_DBLUE,string);
		vraum = 0;
		return 1;
	}
}

command(bspdonline, playerid, params[])
{
    #pragma unused params
	new count = 1,string[1024];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sMitglied] == 1 || sStats[i][sLeiter] == 1)
		{
			new duty[5];
			if(GetPVarInt(i, "CopDuty") == 0 || GetPVarInt(playerid, "SwatDuty") == 1) { duty = "Nein"; }
			else if(GetPVarInt(i, "CopDuty") == 1 || GetPVarInt(playerid, "SwatDuty") == 1) { duty = "Ja"; }
		    format(string, sizeof(string),"{FFFFFF}Rank: {FFFF00}%s {FFFFFF}| {FFFFFF}Name: {FFFF00}%s {FFFFFF}| {FFFFFF}Im Einsatz: {FFFF00}%s\n%s", GetPlayerRank(i) ,GetName(i),duty,string);
		    count ++;
		}
	}

	if(count != 1)
	{
	    ShowPlayerDialog(playerid, DIALOG_OBSPD, DIALOG_STYLE_MSGBOX, "{e13333}BSPD Mitglieder Onlineliste", string, "Abbrechen", "");
	    return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_OBSPD, DIALOG_STYLE_MSGBOX, "{e13333}BSPD Mitglieder Onlineliste", "{FFFFFF}Kein BSPD Mitglied online!", "Abbrechen", "");
		return 1;
	}
}

command(ungrab, playerid, params[])
{
	new pID,string[128];
	new car = GetPlayerVehicleID(playerid);
	new carr = GetPlayerVehicleID(pID);
	if(sscanf(params, "u",pID))
		return SendClientMessage(playerid, Weiß, "Befehl: /grab [Name/ID]");
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um andere in dein Fahrzeug ziehen zu können.");
  	if (GetPVarInt(pID, "Cuffed") == 1)
 		return SendClientMessage(playerid, Rot,"Der Spieler muss Handschellen anhaben, damit du ihn aus deinem Fahrzeug werfen kannst.");
   if (pID == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(pID))
		return SendClientMessage(playerid, Rot,"Du kannst keinem NPC/Bots aus deinem Fahrzeug werfen!");
   	if(IsACop(pID))
	  	return SendClientMessage(playerid, Rot,"Du kannst keinen Polizisten aus deinem Fahrzeug werfen!");
	if(car == carr)
	{
		format(string, sizeof(string), "Du wurdest von %s aus/von seinem Fahrzeug geworfen.", GetName(playerid));
		SendClientMessage(pID, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Du hast %s aus/von deinem Fahrzeug geworfen.", GetName(pID));
		SendClientMessage(playerid, Weiß, string);
		RemovePlayerFromVehicle(pID);
		TogglePlayerControllable(pID,true);
		SetPVarInt(pID,"Grabbed",0);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Der Spieler den du aus deinem Fahzeug werfen willst, sitzt nicht in deinem Fahrzeug!");
	    return 1;
	}
}
command(grab, playerid, params[])
{
	new pID;
	new car = GetPlayerVehicleID(playerid);
	if(sscanf(params, "u",pID))
		return SendClientMessage(playerid, Weiß, "Befehl: /grab [Name/ID]");
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um andere in dein Fahrzeug ziehen zu können.");
    if(playerid == pID)
	 	return SendClientMessage(playerid, Rot,"Du kannst dich nicht selber in dein Fahrzeug reinziehen.");
   if (pID == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(pID))
		return SendClientMessage(playerid, Rot,"Du kannst keinem NPC/Bots in dein Fahrzeug reinziehen!");
   	if(IsACop(pID))
	  	return SendClientMessage(playerid, Rot,"Du kannst keinen Polizisten in dein Fahrzeug reinziehen!");
	if(GetPlayerWantedLevel(pID) == 0)
		return SendClientMessage(playerid, Rot, "Dieser Spieler ist kein Verbrecher!");
	if(Desktop_Status[pID] >= 1)
 		return SendClientMessage(playerid, Rot,"Dieser Spieler ist [Away From Keyboard].");
	if(!IsACopCar(car))
		return SendClientMessage(playerid, Rot,"Du sitzt in keinem Einsatzwagen.");
	if (GetPVarInt(pID, "Cuffed") == 0)
 		return SendClientMessage(playerid, Rot,"Der Spieler muss Handschellen anhaben, damit du ihn ins Fahrzeug ziehen kannst.");

	new string[128];
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && !IsPlayerInAnyVehicle(pID) && ProxDetectorS(10.0, playerid, pID))
 	{
	if(IsABike(car))
	{
		PutPlayerInVehicle(pID, car, 2);
	}
		PutPlayerInVehicle(pID, car, 3);
        format(string, sizeof(string), "* Du wurdest in das Fahrzeug von %s gezogen.", GetName(playerid));
        SendClientMessage(pID, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Du ziehst %s in dein Fahrzeug.", GetName(pID));
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* %s zieht %s in sein Fahrzeug.", GetName(playerid) ,GetName(pID));
        ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        TogglePlayerControllable(pID,false);
        SetPVarInt(pID,"Grabbed",1);
		return 1;
}
		else SendClientMessage(playerid, Rot, "Der Spieler sitzt in einem Fahrzeug oder ist nicht in deiner nähe");
		return 1;
}

command(megafon, playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128], Text;
		new car = GetPlayerVehicleID(playerid);
		if(sscanf(params, "s",Text))
			return SendClientMessage(playerid, Weiß, "Befehl: /megafon [Nachricht]");
		if(!IsACop(playerid))
		   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
		if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
	 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um das Megafon benutzen zu können.");
		if(sStats[playerid][sRank] < 1)
			return SendClientMessage(playerid,Rot,"Du musst mind. Rank 1 sein, um das Megafon benutzen zu können!");
		if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != 2)
			return SendClientMessage(playerid, Rot,"Du sitzt in keinem Fahrzeug.");
		if(!IsACopCar(car))
			return SendClientMessage(playerid, Rot,"Du sitzt in keinem Einsatzwagen.");

		format(string,sizeof string,"[MEGAFON] %s %s[%d]: %s.",GetPlayerRank(playerid),GetName(playerid),playerid,Text);
		ProxDetector(15.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		return 1;
	}
	if(IsASani(playerid))
	{
		new string[128], Text;
		new car = GetPlayerVehicleID(playerid);
		if(sscanf(params, "s",Text))
			return SendClientMessage(playerid, Weiß, "Befehl: /megafon [Nachricht]");
		if(!IsASani(playerid))
		   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers.");
		if(sStats[playerid][sRank] < 1)
			return SendClientMessage(playerid,Rot,"Du musst mind. Rank 1 sein, um das Megafon benutzen zu können!");
		if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != 2)
			return SendClientMessage(playerid, Rot,"Du sitzt in keinem Fahrzeug.");
	 	if(spawncar_job[car] != 3)
			return SendClientMessage(playerid, Rot,"Du sitzt in keinem Einsatzwagen.");

		format(string,sizeof string,"[MEGAFON] %s %s[%d]: %s.",GetPlayerRank(playerid),GetName(playerid),playerid,Text);
		ProxDetector(15.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		return 1;
	}
	if(IsAFW(playerid))
	{
		new string[128], Text;
		new car = GetPlayerVehicleID(playerid);
		if(sscanf(params, "s",Text))
			return SendClientMessage(playerid, Weiß, "Befehl: /megafon [Nachricht]");
		if(!IsAFW(playerid))
		   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Fire-Departments.");
		if(sStats[playerid][sRank] < 1)
			return SendClientMessage(playerid,Rot,"Du musst mind. Rank 1 sein, um das Megafon benutzen zu können!");
		if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != 2)
			return SendClientMessage(playerid, Rot,"Du sitzt in keinem Fahrzeug.");
	 	if(spawncar_job[car] != 98)
			return SendClientMessage(playerid, Rot,"Du sitzt in keinem Einsatzwagen.");

		format(string,sizeof string,"[MEGAFON] %s %s[%d]: %s.",GetPlayerRank(playerid),GetName(playerid),playerid,Text);
		ProxDetector(15.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		return 1;
	}
	return 1;
}

command(m, playerid, params[])
{
 	#pragma unused params
 	return cmd_megafon(playerid, params);
}

command(reinziehen, playerid, params[])
{
	#pragma unused params
	return cmd_grab(playerid, params);
}
command(suspect, playerid, params[])
{
	new pID;
	new Grund[64],wanteds;
	if(sscanf(params, "uds",pID,wanteds,Grund))
		return SendClientMessage(playerid, Weiß, "Befehl: /su [Name/ID] [Anzahl der Wanteds] [Grund]");
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein, um Wanteds vergeben zu können.");
    if(playerid == pID)
	 	return SendClientMessage(playerid, Rot,"Du kannst dir nicht selber Wanteds geben.");
   if (pID == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(pID))
		return SendClientMessage(playerid, Rot,"Du kannst keinem NPC/Bots Wanteds geben!");
   	if(IsACop(pID))
	  	return SendClientMessage(playerid, Rot,"Du kannst keinem Polizisten Wanteds geben!");
   	if(wanteds < 0 || wanteds > 6)
		return SendClientMessage(playerid, Rot, "Du kannst dem Spieler nicht mehr wie 6 Wanteds geben!");
	new wantedss = sStats[pID][sWanteds] + wanteds;
	if(wantedss > 6)
		return SendClientMessage(playerid, Rot, "Du kannst dem Spieler nicht mehr wie 6 Wanteds geben!");
	if(GetPlayerWantedLevel(pID) == 6)
		return SendClientMessage(playerid, Rot, "Du kannst dem Spieler nicht mehr wie 6 Wanteds geben!");

	new string[128];
	sStats[pID][sWanteds] += wanteds;
	SetPlayerWantedLevel(pID,sStats[pID][sWanteds]);
	format(string, sizeof(string), "Du hast dem Spieler %s ein Wanted gegeben. Grund: %s. Dieser hat nun %d Wanteds.", GetName(pID),Grund,sStats[pID][sWanteds]);
	SendClientMessage(playerid, Weiß, string);
 	format(string, sizeof(string), "%s %s hat dir ein neues Wantedlevel gegeben. Grund: %s",GetPlayerRank(playerid),GetName(playerid),Grund);
 	SendClientMessage(pID, COLOR_LIGHTRED, string);
 	format(string, sizeof(string), "%s hat ein neues Verbrechen begangen. [%s]",GetName(pID),Grund);
 	SendRadioMessage(1,COLOR_DBLUE,string);
	return 1;
}

command(su, playerid, params[])
{
	#pragma unused params
	return cmd_suspect(playerid, params);
}

command(fesseln, playerid, params[])
{
	#pragma unused params
	return cmd_cuff(playerid, params);
}

command(cuff, playerid, params[])
{
    new pID,string[128];
	if(!IsACop(playerid))
	{
		SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
		return 1;
	}
	if(sscanf(params, "u",pID)) { return SendClientMessage(playerid,Weiß,"Befehl: /cuff [Name/ID]"); }
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um Handschellen anlegen zu können.");
	if(Desktop_Status[playerid] >= 1)
 		return SendClientMessage(playerid, Rot,"Du kannst keinem Spieler Handschellen anlegen während du AFK bist.");
  	if(pID == playerid)
  		return SendClientMessage(playerid, Rot,"Du kannst dir nicht selber Handschellen anlegen.");
	if(IsACop(pID))
	   	return SendClientMessage(playerid, Rot,"Du kannst keinem Polizisten Handschellen anlegen.");
	if (GetPVarInt(pID, "Cuffed") == 1)
 		return SendClientMessage(playerid, Rot,"Der Spieler hat schon Handschellen um.");
   	if (pID == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht!");
  	if(IsPlayerNPC(pID))
		return SendClientMessage(playerid, Rot, "Du kannst von keinem NPC/Bot Handschellen anlegen.");
 	if (ProxDetectorS(5.0, playerid, pID))
	{
	    TogglePlayerControllable(pID,false);
		format(string, sizeof(string), "~> Es klickt und %s wurden Handschellen angelegt.", GetName(pID));
	    ProxDetector(12.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	  	GameTextForPlayer(pID, "Festgenommen!", 3000, 1);
		format(string, sizeof(string), "Du legst dem Spieler %s Handschellen an.", GetName(pID));
		SendClientMessage(playerid,Weiß,string);
		format(string, sizeof(string), "%s %s legt dir Handschellen an.",GetPlayerRank(playerid),GetName(playerid));
		SendClientMessage(pID,Weiß,string);
		SetPVarInt(pID, "Cuffed", 1);
	 	SetPlayerSpecialAction(pID, SPECIAL_ACTION_CUFFED);
	  	SetPlayerAttachedObject(pID, 3, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe des angegebenen Spielers!");
	    return 1;
	}
}

//Goverment
command(gov, playerid, params[])
{
	#pragma unused params
	return cmd_goverment(playerid, params);
}

command(goverment, playerid, params[])
{
	new string[128];
	if(IsACop(playerid))
	{
		if(!IsACop(playerid))
		{
			SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
			return 1;
		}
		if(sStats[playerid][sRank] < 4)
		{
			SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 4 um diesen Befehl nutzen zu können!");
			return 1;
		}
		if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
			return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um Staatliche Meldungen rausgeben zu können!");
	 	if(PlayerTied[playerid] > 0)
	        return SendClientMessage(playerid, Rot, "Du kannst diesen Befehl nicht nutzen während du gefesselt bist!");
		if(sscanf(params, "s",string)) { return SendClientMessage(playerid,Weiß,"Befehl: /goverment [Nachricht]"); }
		if(CheckPlayerText(playerid,string) == 0) { return 1; }
		SendClientMessageToAll(Weiß, "|___________ Staatliche Meldung ___________|");
		format(string, sizeof(string), "%s %s: %s", GetPlayerRank(playerid), GetName(playerid), string);
		SendClientMessageToAll(COLOR_DBLUE, string);
		return 1;
	}
	if(IsAFW(playerid))
	{
		if(!IsAFW(playerid))
		{
			SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Fire-Departments.");
			return 1;
		}
		if(sStats[playerid][sRank] < 4)
		{
			SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 4 um diesen Befehl nutzen zu können!");
			return 1;
		}
		if (GetPVarInt(playerid, "FDienst") == 0)
			return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um Staatliche Meldungen rausgeben zu können!");
	 	if(PlayerTied[playerid] > 0)
	        return SendClientMessage(playerid, Rot, "Du kannst diesen Befehl nicht nutzen während du gefesselt bist!");
		if(sscanf(params, "s",string)) { return SendClientMessage(playerid,Weiß,"Befehl: /goverment [Nachricht]"); }
		if(CheckPlayerText(playerid,string) == 0) { return 1; }
		SendClientMessageToAll(Weiß, "|___________ Staatliche Meldung ___________|");
		format(string, sizeof(string), "%s %s: %s", GetPlayerRank(playerid), GetName(playerid), string);
		SendClientMessageToAll(COLOR_DBLUE, string);
		return 1;
	}
	return 1;
}

//Handschellen wegnehmen
command(unfesseln, playerid, params[])
{
	#pragma unused params
	return cmd_uncuff(playerid, params);
}

command(uncuff, playerid, params[])
{
    new pID,string[128];
   	if(!IsACop(playerid))
	{
		SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
		return 1;
	}
	if(sscanf(params, "u",pID)) { return SendClientMessage(playerid,Weiß,"Befehl: /uncuff [Name/ID]"); }
	if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um Handschellen wegnehmen zu können.");
  	if(pID == playerid)
  		return SendClientMessage(playerid, Rot,"Du kannst dir nicht selber die Handschellen wegnehmen.");
	if(IsACop(pID))
	   	return SendClientMessage(playerid, Rot,"Du kannst keinem Polizisten Handschellen wegnehmen.");
	if (GetPVarInt(pID, "Cuffed") == 0)
 		return SendClientMessage(playerid, Rot,"Der Spieler hat keine Handschellen um.");
   if (pID == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht!");
  	if(IsPlayerNPC(pID))
		return SendClientMessage(playerid, Rot, "Du kannst von keinem NPC/Bot die Handeschellen abnehmen.");
  	if (ProxDetectorS(5.0, playerid, pID))
	{
	    TogglePlayerControllable(pID,true);
		format(string, sizeof(string), "~> Es klickt und %s's Handschellen wurden abgenommen.", GetName(pID));
	    ProxDetector(15.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(string, sizeof(string), "Du nimmst die Handschellen von %s ab.", GetName(playerid));
		SendClientMessage(playerid,Weiß,string);
		format(string, sizeof(string), "Polizist %s nimmt dir deine Handschellen ab.", GetName(playerid));
		SendClientMessage(pID,Weiß,string);
		GameTextForPlayer(pID, "Freigelassen!", 3000, 1);
		DeletePVar(pID, "Cuffed");
		SetPlayerSpecialAction(pID, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, 3);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe des angegebenen Spielers!");
	    return 1;
	}
}
command(opengatebspd,playerid, params[])
{
   	#pragma unused params
	if(!IsACop(playerid))
	{
		SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,3.5,1558.5902, -1677.7805, 1722.1000) && lspduse1 == 1)
	{
	    SendClientMessage(playerid,Rot,"Die Türe wurde schon geöffnet, bitte warte kurz!");
		return 1;
 	}
	if(IsPlayerInRangeOfPoint(playerid,3.5,1553.9800, -1691.5000, 1722.1000) && lspduse2 == 1)
	{
	    SendClientMessage(playerid,Rot,"Die Türe wurde schon geöffnet, bitte warte kurz!");
		return 1;
 	}
	if(IsPlayerInRangeOfPoint(playerid,3.5,1558.5902, -1677.7805, 1722.1000))
	{
		MoveDynamicObject(lspddoor1,1558.5902, -1677.7805, 1722.1000,1);
		SetTimer("Closelspdtor1",5107,false);
	    lspduse1 = 1;
	    SendClientMessage(playerid,Gelb,"Du hast die Türe erfolgreich geöffnet, diese schließt automatisch in 5 Sekunden!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,3.5,1553.9800, -1691.5000, 1722.1000))
	{
		MoveDynamicObject(lspddoor2,1553.9800, -1691.5000, 1722.1000,1);
		SetTimer("Closelspdtor2",5147,false);
	    lspduse2 = 1;
	    SendClientMessage(playerid,Gelb,"Du hast die Türe erfolgreich geöffnet, diese schließt automatisch in 5 Sekunden!");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe einer Türe!");
	    return 1;
	}
}
command(clear, playerid, params[])
{
	new pID,string[128],Want;
	if(sscanf(params, "ud",pID,Want))
		return SendClientMessage(playerid, Weiß, "Befehl: /clear [Name/ID] [Anzahl der Wanteds]");
	if (IsPlayerInRangeOfPoint(playerid,3,1553.1620,-1675.9523,1723.1094))
	{
		if(!IsACop(playerid))
		   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Department.");
		if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
	 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um Akten löschen zu können.");
	    if(playerid == pID)
		 	return SendClientMessage(playerid, Rot,"Du kannst dir nicht selber deine Akten löschen.");
		if(IsACop(pID))
		   	return SendClientMessage(playerid, Rot,"Du kannst von keinem Polizisten die Akten löschen.");
	    if (pID == INVALID_PLAYER_ID)
			return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht!");
	   	if(IsPlayerNPC(pID))
  			return SendClientMessage(playerid, Rot, "Du kannst von keinem NPC/Bot die Akte löschen.");
		if(sStats[pID][sWanteds] == 0)
		    return SendClientMessage(playerid,Rot,"Dieser Spieler ist kein Verbrecher, seine Akten müssen nicht gelöscht werden!");
		if(Want > sStats[pID][sWanteds])
		    return SendClientMessage(playerid,Rot,"Soviele Wanteds hat der Spieler nicht!");

		ClearChat(pID);
		ClearChat(playerid);
		format(string, sizeof(string), "Deine Akten wurden von %s[%d] gelöscht", GetName(playerid),playerid);
	  	SendClientMessage(pID,COLOR_LIGHTRED,string);
	  	format(string, sizeof(string), "** %s[%d] hat die Akten vom Verbrecher: %s[%d] gelöscht!", GetName(playerid),playerid,GetName(pID),pID);
		SendRadioMessage(1,COLOR_LIGHTBLUE,string);
		format(string, sizeof(string), "** Du hast die Akten vom Verbrecher: %s[%d] gelöscht!",GetName(pID),pID);
		SendClientMessage(playerid,Weiß,string);
	 	sStats[pID][sWanteds] -= Want;
	 	SetPlayerWantedLevel(pID,sStats[pID][sWanteds]);
	 	return 1;
	}
	else SendClientMessage(playerid,Rot,"Du bist nicht beim Aktenschrank (/clear Punkt)");
	return 1;
}

command(undercover, playerid, params[])
{
    #pragma unused params
	new string[128];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Departments!");
	if (IsPlayerInRangeOfPoint(playerid,2.0,1565.9390,-1671.6768,1723.1094))
   	{
  		if (GetPVarInt(playerid, "SwatDuty") == 1)
		    return SendClientMessage(playerid,Rot,"Du bist schon als Swat im Einsatz, du kannst nicht Undercover gehen!");
    	if(sStats[playerid][sRank] < 3)
 			return SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 3 um eine Undercover Uniform anziehen zu können!");
		if (GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0)
	 		return SendClientMessage(playerid, Rot,"Du musst erst im Einsatz sein um diesen Befehl nutzen zu können!");
  		if (GetPVarInt(playerid, "Undercover") == 0)
		{
			format(string, sizeof(string), "* %s %s zieht seine Undercover Uniform an.", GetPlayerRank(playerid), GetName(playerid));
			ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(sStats[playerid][sGeschlecht] == 1)
			{
			    new SkinM[] = {1,2,7,15,20,35,37,49,72,73,96,101,171,206};
			    SetPlayerSkin(playerid,SkinM[random(sizeof(SkinM))]);
			}
			if(sStats[playerid][sGeschlecht] == 2)
			{
			    new SkinF[] = {12,11,40,41,55,53,56,69,76,93,131,141,157,169};
			    SetPlayerSkin(playerid,SkinF[random(sizeof(SkinF))]);
			}
			return 1;
		}
		else if (GetPVarInt(playerid, "Undercover") == 1)
		{
			format(string, sizeof(string), "* %s %s zieht seine Undercover Uniform aus.", GetPlayerRank(playerid), GetName(playerid));
			ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    SetPlayerSkin(playerid,sStats[playerid][sSkin]);
		    SetPVarInt(playerid, "Undercover", 0);
		    return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Umkleidekabine des Bayside Police-Departments!");
		return 1;
 	}
 	return 1;
}

command(swatduty, playerid, params[])
{
    #pragma unused params
	new string[128];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Departments!");
	if (IsPlayerInRangeOfPoint(playerid,2.0,1565.9390,-1671.6768,1723.1094))
   	{
   	    if(sStats[playerid][sRank] < 4)
   	    {
   	        SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 4 um als Swat in Einsatz gehen zu können!");
   	        return 1;
   	    }
  		if (GetPVarInt(playerid, "CopDuty") == 1 && GetPVarInt(playerid, "SwatDuty") == 1)
		{
		    SendClientMessage(playerid,Rot,"Du bist schon als Polizist im Einsatz, bitte beende zuerst deinen Einsatz!");
		    return 1;
		}
 		if (GetPVarInt(playerid, "SwatDuty") == 0)
		{
 			format(string, sizeof(string), "* %s %s nimmt seine SWAT Ausrüstung auf dem Schrank.",GetPlayerRank(playerid), GetName(playerid));
			ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(sStats[playerid][sAdminlevel] < 5)
			{
				SetPlayerAttachedObject(playerid,5,19142,1,0.113999,0.033000,0.012000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			}
			SetPlayerHealth(playerid, 100.0);
			AllowArmour[playerid] = 1;
			SetPlayerArmour(playerid, 100.0);
			SetPVarInt(playerid, "SwatDuty", 1);
			PolizistenOn +=1;
            SetPlayerSkin(playerid,285);
			SetPVarInt(playerid, "Undercover", 0);
			SetPVarInt(playerid, "Swat", 1);
			GivePlayerWeaponEx(playerid,3,1);
			GivePlayerWeaponEx(playerid,24,150);
			GivePlayerWeaponEx(playerid,27,50);
			GivePlayerWeaponEx(playerid,31,250);
			GivePlayerWeaponEx(playerid,29,250);
			GivePlayerWeaponEx(playerid,34,35);
			SetSpielerFarbe(playerid);
			SetPVarInt(playerid,"Tazerr",1);
			SetPVarInt(playerid,"Tazer",1);
			sStats[playerid][sMaske] = 1;
			return 1;
		}
		else if (GetPVarInt(playerid, "SwatDuty") == 1)
		{
			format(string, sizeof(string), "* %s %s legt SWAT Ausrüstung in den Schrank.", GetPlayerRank(playerid), GetName(playerid));
			ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(sStats[playerid][sAdminlevel] < 5)
			{
				RemovePlayerAttachedObject(playerid, 5);
			}
			ResetPlayerWeapons(playerid);
			AllowArmour[playerid] = 1;
			SetPlayerArmour(playerid, 0.0);
			SetPVarInt(playerid, "SwatDuty", 0);
			SetPlayerFrakSkin(playerid);
			PolizistenOn -=1;
            SetPVarInt(playerid, "Undercover", 0);
            SetPVarInt(playerid, "Swat", 0);
            SetSpielerFarbe(playerid);
			SetPVarInt(playerid,"Tazerr",0);
			SetPVarInt(playerid,"Tazer",0);
			sStats[playerid][sMaske] = 0;
			return 1;
		}

	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Umkleidekabine des Bayside Police-Departments!");
		return 1;
 	}
 	return 1;
}

command(duty, playerid, params[])
{
    #pragma unused params
	new string[128];
	if(!IsACop(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Police-Departments!");
	if (IsPlayerInRangeOfPoint(playerid,2.0,1565.9390,-1671.6768,1723.1094))
   	{
  		if (GetPVarInt(playerid, "SwatDuty") == 1)
		{
		    SendClientMessage(playerid,Rot,"Du bist schon als Swat im Einsatz, bitte beende zuerst deinen Einsatz!");
		    return 1;
		}
 		if (GetPVarInt(playerid, "CopDuty") == 0)
		{
 			format(string, sizeof(string), "* %s %s nimmt seine Dienstmarke und sein Pfefferspray aus dem Schrank.",GetPlayerRank(playerid), GetName(playerid));
			ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(sStats[playerid][sAdminlevel] < 5)
			{
				SetPlayerAttachedObject(playerid,5,19142,1,0.113999,0.033000,0.012000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
			}
			GivePlayerWeaponEx(playerid, 41, 500);
			SetPlayerHealth(playerid, 100.0);
			AllowArmour[playerid] = 1;
			SetPlayerArmour(playerid, 100.0);
			SetPVarInt(playerid, "CopDuty", 1);
			PolizistenOn +=1;
			SetPlayerFrakSkin(playerid);
			SetSpielerFarbe(playerid);
			return 1;
		}
		else if (GetPVarInt(playerid, "CopDuty") == 1)
		{
			format(string, sizeof(string), "* %s %s legt seine Dienstmarke und sein Pfefferspray in den Schrank.", GetPlayerRank(playerid), GetName(playerid));
			ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(sStats[playerid][sAdminlevel] < 5)
			{
				RemovePlayerAttachedObject(playerid, 5);
			}
			ResetPlayerWeapons(playerid);
			AllowArmour[playerid] = 1;
			SetPlayerArmour(playerid, 0.0);
			SetPVarInt(playerid, "CopDuty", 0);
			PolizistenOn -=1;
			SetSpielerFarbe(playerid);
 			if (GetPVarInt(playerid, "Undercover") == 1)
			{
			    SetPVarInt(playerid, "Undercover", 0);
			    SetPlayerSkin(playerid,sStats[playerid][sSkin]);
			}
			return 1;
		}

	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Umkleidekabine des Bayside Police-Departments!");
		return 1;
 	}
 	return 1;
}

//Sanitäter
command(closesani, playerid ,params[])
{
    #pragma unused params
	if(!IsASani(playerid))
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Mitglied des Bayside Medical-Center!");
	    return 1;
	}
	if(GetPVarInt(playerid, "S2") == 1)
 	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
		 	if(DeinS[i] == playerid)
		    {
		    	new string[128];
				new Name[MAX_PLAYER_NAME];
				GetPlayerName(i,Name,sizeof(Name));
				format(string,sizeof(string),"%s %s hat deinen Notrof beendet.",GetPlayerRank(i),Name);
				SendClientMessage(i,Gruen,string);
				SendClientMessage(playerid,Weiß,"Du hast den Notruf beendet!");
				SetPVarInt(i, "InS", 0);
				DeinS[i] = 0;
		  		SetPVarInt(playerid, "InS", 0);
				DeinS[playerid] = 0;
		  		DeletePVar(i, "S");
		  		DeletePVar(playerid, "S2");
		  		return 1;
 			}
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du hast keinen Notruf angenommen!");
	    return 1;
	}
	return 1;
}
command(acceptsani, playerid, params[])
{
	new id;
	if(!IsASani(playerid))
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Mitglied des Bayside Medical-Center!");
	    return 1;
	}
	if(sscanf(params,"u",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /acceptsani [ID/Name]");
  	if(GetPVarInt(playerid, "S2") == 1)
		return SendClientMessage(playerid, Rot, "Du kannst nicht mehr als einen Notruf bearbeiten!");
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nicht deinen eigenen Notruf bearbeiten!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(GetPVarInt(id, "Ssend") == 1)
 	{
	    new Name[MAX_PLAYER_NAME], string[128];
	    GetPlayerName(playerid,Name,sizeof(Name));
	    SendClientMessage(playerid,Gruen,"Du kannst nun mit dem Anrufer kommunizieren, benutze /closesani um den Anruf zu beenden.");
		format(string,sizeof(string),"%s %s hat deinen Anruf angenommen. Du kannst nun mit ihm im Chat kommunizieren!",GetPlayerRank(playerid),Name);
		SendClientMessage(id,Gruen,string);
		SendClientMessage(playerid,Weiß,"Außerdem wurde ein roter Marker auf die Karte gesetzt wo sich der Anrufer befindet! (20 Sekunden)");
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(id, X, Y, Z);
		SetPlayerCheckpoint(playerid,X,Y,Z,4.0);
		SetTimerEx("CheckpointWeg", 20101, false, "d", playerid);
		QuestCP[playerid] = 96;
	 	SetPVarInt(id, "InS", 1);
	 	SetPVarInt(playerid, "S2", 1);
		DeinS[id] = playerid;
		DeinS[playerid] = id;
		DeletePVar(id, "Ssend");
    }
    else
    {
        SendClientMessage(playerid,Rot,"Der Spieler hat keinen Notruf gesendet!");
        return 1;
	}
		return 1;
}
command(medichelp, playerid, params[])
{
	#pragma unused params
	if(!IsASani(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/heal -- {C0C0C0}Heilt einen anderen Spieler.\n{FFFFFF}/untersuchen -- {C0C0C0}Untersucht einen Spieler auf Krankheiten.\n{FFFFFF}/verabreichen -- {C0C0C0}Verabreichen von Medikamenten.\n{FFFFFF}/bsmconline -- {C0C0C0}Onlineanzeige der Mitglieder.\n{FFFFFF}/bsmcr -- {C0C0C0}Funk.\n{FFFFFF}/todesliste -- {C0C0C0}Todesliste.\n{FFFFFF}/d -- {C0C0C0}Staatsfunk.\n{FFFFFF}/wiederbeleben -- {C0C0C0}Wiederbeleben.\n{FFFFFF}/m -- {C0C0C0}Megafon.");
	ShowPlayerDialog(playerid,MEDICHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Bayside Medical-Center Hilfebox",string,"OK","");
	return 1;
}
command(bsmcr, playerid, params[])
{
	if(!IsASani(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
    if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /bsmcr [Nachricht]");
	if(sStats[playerid][sMute] != 0)
		return SendClientMessage(playerid, Rot,"Du kannst das Radio nicht benutzen da du gemutet bist.");

	new string[128];
	if(CheckPlayerText(playerid,params) == 0) { return 1; }
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
    	if(sStats[i][sMitglied] == 3 || sStats[i][sLeiter] == 3)
     	{
      		format(string, sizeof(string), "[BSMC Radio] %s %s: %s", GetName(playerid), GetPlayerRank(playerid), params);
        	SendClientMessage(i, SANIFARBE, string);
      	}
    }
	return 1;
}
command(bsmconline, playerid, params[])
{
    #pragma unused params
	new count = 1,string[428];
	if(!IsASani(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sMitglied] == 3 || sStats[i][sLeiter] == 3)
		{
		    format(string, sizeof(string),"{FFFFFF}Rank: {FFFF00}%s {FFFFFF}| {FFFFFF}Name: {FFFF00}%s {FFFFFF}\n%s", GetPlayerRank(i) ,GetName(i),string);
		    count ++;
		}
	}

	if(count != 1)
	{
	    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}BSMC Mitglieder Onlineliste", string, "Abbrechen", "");
	    return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}BSMC Mitglieder Onlineliste", "{FFFFFF}Kein BSPD Mitglied online!", "Abbrechen", "");
		return 1;
	}
}
command(verabreichen,playerid, params[])
{
    new id,medi[40], string[120];
   	if(!IsASani(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
	if(sscanf(params, "us", id,medi))
	{
	    SendClientMessage(playerid, Weiß, "Befehl: /verabreichen [Name/ID] [Medizin]");
	    SendClientMessage(playerid, Gelb, "Verwendbare Medizin: Kopfschmerztabletten, Bauchschmerztabletten, Antibiotika");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht.");
 	if(IsPlayerNPC(id))
  		return SendClientMessage(playerid, Rot, "Du kannst keinem NPC/Bot Medizin verabreichen.");
	if(sStats[playerid][sKrankheit] == 0)
	    return SendClientMessage(playerid, Rot, "Der angegebene Spieler ist Kerngesund!");
	if (ProxDetectorS(5.0, playerid, id))
	{
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist zuweit von angegeben Spieler entfernt!");
	    return 1;
	}
	if(strcmp(medi, "Kopfschmerztabletten", true) == 0)
	{
		if(GetPVarInt(playerid,"Kopfschmerztabletten") == 1)
		{
		    if(sStats[playerid][sKrankheit] == 5)
		    {
		        if(GetPlayerEuros(playerid) < 25)
		        {
		            SendClientMessage(playerid,Rot,"Der angegebene Spieler nicht genug dabei! (25!)");
		            return 1;
		        }
		        GivePlayerEuro(id,-25);
		        Staatskasse+=25;
     	    	format(string, sizeof(string), "Du hast %s erfolgreich %s verabreicht.",GetName(id),medi);
	       	    SendClientMessage(playerid,Weiß,string);
	     	    format(string, sizeof(string), "%s %s hat dir erfolgreich %s verabreicht.",GetPlayerRank(playerid),GetName(playerid),medi);
	       	    SendClientMessage(id,Weiß,string);
	       	    SendClientMessage(id,Gelb2,"Du merkst wie deine Kopfschmerzen langsam schwinden. (-25)");
	       	    sStats[id][sKrankheit] = 0;
	       	    SetPVarInt(playerid,"Kopfschmerztabletten",0);
	       	    return 1;
		    }
		    else
		    {
		        SendClientMessage(playerid,Rot,"Der angegebene Spieler hat keine Kopfschmerzen!");
		        return 1;
		    }
  		}
	}
	if(strcmp(medi, "Bauchschmerztabletten", true) == 0)
	{
		if(GetPVarInt(playerid,"Bauchschmerztabletten") == 1)
		{
		    if(sStats[playerid][sKrankheit] == 6)
		    {
		        if(GetPlayerEuros(playerid) < 35)
		        {
		            SendClientMessage(playerid,Rot,"Der angegebene Spieler nicht genug dabei! (35!)");
		            return 1;
		        }
		        GivePlayerEuro(id,-35);
		        Staatskasse+=35;
     	    	format(string, sizeof(string), "Du hast %s erfolgreich %s verabreicht.",GetName(id),medi);
	       	    SendClientMessage(playerid,Weiß,string);
	     	    format(string, sizeof(string), "%s %s hat dir erfolgreich %s verabreicht.",GetPlayerRank(playerid),GetName(playerid),medi);
	       	    SendClientMessage(id,Weiß,string);
	       	    SendClientMessage(id,Gelb2,"Du merkst wie deine Bauchschmerzen langsam schwinden. (-35)");
	       	    sStats[id][sKrankheit] = 0;
	       	    SetPVarInt(playerid,"Bauchschmerztabletten",0);
	       	    return 1;
		    }
		    else
		    {
		        SendClientMessage(playerid,Rot,"Der angegebene Spieler hat keine Lebensmittelvergiftung!");
		        return 1;
		    }
  		}
  		else
  		{
  		    SendClientMessage(playerid,Rot,"Du hast keine Bauchschmerztabletten dabei!");
			return 1;
		}
	}
	if(strcmp(medi, "Antibiotika", true) == 0)
	{
		if(GetPVarInt(playerid,"Antibiotika") == 1)
		{
		    if(sStats[playerid][sKrankheit] == 7)
		    {
		        if(GetPlayerEuros(playerid) < 45)
		        {
		            SendClientMessage(playerid,Rot,"Der angegebene Spieler nicht genug dabei! (45!)");
		            return 1;
		        }
		        GivePlayerEuro(id,-45);
		        Staatskasse+=45;
     	    	format(string, sizeof(string), "Du hast %s erfolgreich %s verabreicht.",GetName(id),medi);
	       	    SendClientMessage(playerid,Weiß,string);
	     	    format(string, sizeof(string), "%s %s hat dir erfolgreich %s verabreicht.",GetPlayerRank(playerid),GetName(playerid),medi);
	       	    SendClientMessage(id,Weiß,string);
	       	    SendClientMessage(id,Gelb2,"Nach der Einnahme des Antibiotikas fühlst du dich sehr gut und könntest Bäume ausreißen. (-35)");
	       	    sStats[id][sKrankheit] = 0;
	       	    SetPVarInt(playerid,"Antibiotika",0);
	       	    return 1;
		    }
		    else
		    {
		        SendClientMessage(playerid,Rot,"Der angegebene Spieler hat keine Erkältung!");
		        return 1;
		    }
  		}
  		else
  		{
  		    SendClientMessage(playerid,Rot,"Du hast kein Antibiotika dabei!");
			return 1;
		}
	}
	return 1;
}

command(untersuchen,playerid, params[])
{
    new id, string[120];
   	if(!IsASani(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
	if(sscanf(params, "u", id))
	    return SendClientMessage(playerid, Weiß, "Befehl: /untersuchen [Name/ID]");
	if(id == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht.");
 	if(IsPlayerNPC(id))
  		return SendClientMessage(playerid, Rot, "Du kannst keinen NPC/Bot untersuchen.");

	format(string, sizeof(string), "* %s %s untersucht %s auf Krankheiten.", GetPlayerRank(playerid),GetName(playerid),GetName(id));
	ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(string, sizeof(string), "* |________ %s's Krankenakte ________|" ,GetName(id));
	SendClientMessage(playerid, Gelb2, string);
	check = 0;
	if(sStats[id][sKrankheit]==1 && check <= 8){check ++;SendClientMessage(playerid, Weiß, "* | - Tripper");}
	if(sStats[id][sKrankheit]==2 && check <= 8){check ++;SendClientMessage(playerid, Weiß, "* | - Hepatitis A");}
	if(sStats[id][sKrankheit]==3 && check <= 8){check ++;SendClientMessage(playerid, Weiß, "* | - Herpes");}
	if(sStats[id][sKrankheit]==4 && check <= 8){check ++;SendClientMessage(playerid, Weiß, "* | - HI-Virus");}
	if(sStats[id][sKrankheit]==5 && check <= 8){check ++;SendClientMessage(playerid, Weiß, "* | - Kopfschmerzen");}
	if(sStats[id][sKrankheit]==6 && check <= 8){check ++;SendClientMessage(playerid, Weiß, "* | - Lebensmittelvergiftung");}
	if(sStats[id][sKrankheit]==7 && check <= 8){check ++;SendClientMessage(playerid, Weiß, "* | - Erkältung");}
	if(check == 0){SendClientMessage(playerid, Weiß, "* | - Keine Krankheiten festgestellt!");}
	return 1;
}

command(wiederbeleben, playerid, params[])
{
	new id, string[128];
	if(!IsASani(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
	if(sscanf(params, "u", id))
	    return SendClientMessage(playerid, Weiß, "Befehl: /wiederbeleben [Name/ID]");
	if(id == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht.");
	if(sStats[id][sTod] == 0)
	    return SendClientMessage(playerid,Rot,"Der angegebene Spieler ist nicht Tod!");
	if(playerid == id)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selbst wiederbelben!");
 	if(IsPlayerNPC(id))
  		return SendClientMessage(playerid, Rot, "Du kannst keinen NPC/Bot wiederbelben.");
   	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot,"Du kannst keinen wiederbelben während du in oder auf einem Fahrzeug bist!");
	if(GetPVarInt(playerid,"Defibrillator") == 0)
		return SendClientMessage(playerid,Rot,"Du hast keinen Defibrillator dabei!");
	if(IsPlayerInRangeOfPoint(playerid,3.0, KadaverX[id],KadaverY[id],KadaverZ[id]))
	{
	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/defri.wav");
	    PlayAudioStreamForPlayer(id, "http://www.bayside-roleplay.de/audiogta/defri.wav");
	    ClearChat(playerid);
	    ClearChat(id);
		format(string, 128, "Du hast %s erfolgreich wiederbelebt!",GetName(id));
		SendClientMessage(playerid, Weiß, string);
		format(string, 128, "%s %s hat dich erfolgreich wiederbelebt!",GetPlayerRank(playerid),GetName(playerid));
		sStats[playerid][sPreamie] += 300;
		SendClientMessage(playerid, Gelb2, "Du bekommst 300 für den nächsten Zahltag gutgeschrieben");
		SendClientMessage(id, Weiß, string);
		sStats[id][sTod] = 0;
		KillTimer(TodTimer[id]);
		SetCameraBehindPlayer(id);
		SetPlayerVirtualWorld(id,0);
		DeleteTotenkopf(id);
		TogglePlayerControllable(id,true);
		SetPlayerHealth(id,35.0);
 		new Float:xP,Float:xY,Float:xZ;
		GetPlayerPos(playerid, xP, xY, xZ);
		SetPlayerPos(id,xP,xY,xZ);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist bei keinem Leichnam!");
	    return 1;
	}
}

command(heal, playerid, params[])
{
	new id, string[120],preis;
	if(!IsASani(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
	if(sscanf(params, "ud", id,preis))
	    return SendClientMessage(playerid, Weiß, "Befehl: /heal [Name/ID] [Preis]");
	if(playerid == id)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber heilen!");
 	if(IsPlayerNPC(id))
  		return SendClientMessage(playerid, Rot, "Du kannst keinen NPC/Bot heilen.");
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot,"Du musst in einem Rettungswagen sitzen um einen anderen heilen zu können!");
	if(id == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 416)
		return SendClientMessage(playerid, Rot,"Du musst in einem Rettungswagen sitzen um einen anderen heilen zu können!");
	if(GetVehicleModel(GetPlayerVehicleID(id)) != 416)
		return SendClientMessage(playerid, Rot,"Der angegebene Spieler muss im gleichen Rettungswagen wie du sitzen, damit du ihn heilen kannst!");
	new Float:Leben;
	GetPlayerHealth(id,Leben);
	if(Leben > 120)
	    return SendClientMessage(playerid,Rot,"Der Spieler hat schon maximales Leben!");
	if(GetPlayerVehicleID(id) == GetPlayerVehicleID(playerid))
	{
		if(HealOffer[id] == 999)
	   	{
  			format(string, sizeof(string), "* Du hast %s angeboten Ihn für %d zu heilen.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s hat dir angeboten dich für %d zu heilen, tippe /acceptheal um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			HealOffer[id] = playerid;
			HealPrice[id] = preis;
		    return 1;
	    }
	    else
	    {
	        SendClientMessage(playerid,Rot,"Der Spieler hat schon Heilangebot erhalten!");
	        return 1;
	    }
	}
	else
	{
	    return SendClientMessage(playerid, Rot,"Der angegebene Spieler muss im gleichen Rettungswagen wie du sitzen, damit du ihn heilen kannst!");
	}
}

command(acceptheal, playerid, params[])
{
	new string[128];
	if(HealOffer[playerid] == 999)
	{
	    SendClientMessage(playerid,Rot,"Du hast kein Heilangebot erhalten!");
	    return 1;
	}
	if(HealOffer[playerid] < 999)
	{
		if (ProxDetectorS(2.0, playerid, HealOffer[playerid]))
		{
		    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/heal.mp3");
			format(string, sizeof(string), "* %s hat dich erfolgreich für %d geheilt. [Aktuelles Leben: 120]", GetName(HealOffer[playerid]),HealPrice[playerid]);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* Du hast %s erfolgreich für %d geheilt.", GetName(playerid),HealPrice[playerid]);
			SendClientMessage(HealOffer[playerid], Weiß, string);
			format(string, sizeof(string), "Info: Du bekommst eine Prämie in höhe von %d für den nächsten Zahltag gutgeschrieben.", HealPrice[playerid]/2);
			SendClientMessage(HealOffer[playerid], Gelb2, string);
			sStats[HealOffer[playerid]][sPreamie] += HealPrice[playerid]/2;
		    SetPlayerHealth(playerid,120.0);
			Staatskasse+=HealPrice[playerid]/2;
			HealOffer[playerid] = 0;
			HealPrice[playerid] = 0;
			return 1;
    	}
			else return SendClientMessage(playerid,Rot,"Du musst im gleichen Rettungswagen wie der Arzt der dich heilen will sein!");
	}
	return 1;
}

//Pfand
command(pfandverkaufen, playerid, params[])
{
	#pragma unused params
	return cmd_sellpfand(playerid, params);
}

command(sellpfand, playerid, params[])
{
    #pragma unused params
    new string[128];
    if(sStats[playerid][sPfand] < 1)
    {
		SendClientMessage(playerid,Rot,"Du hast keine Pfandflaschen, geh erst welche suchen!");
        return 1;
    }
   	if(IsPlayerInRangeOfPoint(playerid,2.5, -28.0107,-185.1465,1003.5469))
	{
	    new preis = sStats[playerid][sPfand] * 4;
	    if(BizzInfo[1][bTill] < preis)
	    {
	        SendClientMessage(playerid,Rot,"Das 24/7 Geschäft hat nicht genug Geld in der Kasse um dir die Pfandflaschen abzukaufen!");
	    }
		format(string, sizeof(string), "Du hast erfolgreich %d Pfandflaschen für %d verkauft",sStats[playerid][sPfand],preis);
		SendClientMessage(playerid,Weiß,string);
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		GivePlayerEuro(playerid,preis);
		BizzInfo[1][bTill] -= preis;
		BizzInfo[1][bProducts] += sStats[playerid][sPfand];
		sStats[playerid][sPfand] = 0;
		return 1;
	}
	else
	{
		SendClientMessage(playerid, Rot,"Du bist nicht im 24/7 Shop bei der Kasse!");
		return 1;
	}
}
//Maskensystem
command(maske, playerid, params[])
{
	#pragma unused params
	if(GetPVarInt(playerid, "DJDienst") == 1 || sStats[playerid][sJailed] > 0)
	{
	    SendClientMessage(playerid,Rot,"Du kannst jetzt keine Maske anziehen!");
	    return 1;
	}
	if(sStats[playerid][sMaske] > 0) {
		if(GetPVarInt(playerid,"Maske") == 0) {
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
				ShowPlayerNameTagForPlayer(i, playerid, 0);
   			}
   			SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine Maske aufgezogen, diese versteckt nun deinen Namen!");
   			SendClientMessage(playerid,Gelb2,"Solltest du dich ausloggen oder sterben so verlierst du deine Maske!");
   			new
		    skin = GetPlayerSkin(playerid)-1;
		    SetPlayerAttachedObject(playerid, 5, 18912, 2, SkinGlassesMaskOffset[skin][0], SkinGlassesMaskOffset[skin][1], SkinGlassesMaskOffset[skin][2], 270.304412, 359.126678, 271.452209);
   			SetPVarInt(playerid,"Maske",1);
   			SetSpielerFarbe(playerid);
		} else {
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
   			    ShowPlayerNameTagForPlayer(i, playerid, 1);
   			}
   			SendClientMessage(playerid,Weiß,"Du hast dir deine Maske wieder abgezogen!");
   			RemovePlayerAttachedObject(playerid, 5);
   			SetPVarInt(playerid,"Maske",0);
   			SetSpielerFarbe(playerid);
		}
	}
	else SendClientMessage(playerid,Rot,"Du besitzt keine Maske!");
	return 1;
}
//Fahrradverleih
command(flock, playerid, params[])
{
	#pragma unused params
	new Float:X,Float:Y,Float:Z;
	if(GetPVarInt(playerid, "Fahrrad") == 0)
  		return SendClientMessage(playerid, Rot, "Du hast dir kein Fahrrad gemietet!");
	GetVehiclePos(fahrrad[playerid], X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid,3,X,Y,Z))
	{
  		if(GetPVarInt(playerid, "Fahrradstatus") == 1)
	    {
	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	        GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~w~Fahrradschloss ~g~geoeffnet",3000, 5);
	        SetPVarInt(playerid,"Fahrradstatus",0);
	        SetVehicleLock(fahrrad[playerid],0);
	        return 1;
	    }
		else
		{
		    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~w~Fahrradschloss ~r~verschlossen",3000, 5);
		    SetPVarInt(playerid,"Fahrradstatus",1);
		    SetVehicleLock(fahrrad[playerid],1);
		    return 1;
		}
	}
	else
	{
	    return SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von deinem gemieteten Fahrrad!");
	}
}
//Wohnwagenbefehle
command(whelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sWohnwagen] != 1)
  		return SendClientMessage(playerid, Rot, "Du besitzt keinen Wohnwagen!");

	new string[360];
	format(string,sizeof(string),
	"{FFFFFF}/wlock -- {C0C0C0}Wohnwagen öffnen/schließen.\n{FFFFFF}/wparken -- {C0C0C0}Wohwagen parken.\n{FFFFFF}/wverkaufen -- {C0C0C0}Wohnwagen weiterverkaufen.");
	ShowPlayerDialog(playerid,EDDY2,DIALOG_STYLE_MSGBOX,"{FFFF00}Wohnwagen Hilfebox",string,"OK","");
	return 1;
}
command(wohnwagenhelp, playerid, params[])
{
	#pragma unused params
	return cmd_whelp(playerid, params);
}
command(wparken, playerid, params[])
{
	#pragma unused params
	return cmd_wpark(playerid, params);
}
command(wverkaufen, playerid, params[])
{
	new id,preis,string[128];
	new Float:X,Float:Y,Float:Z;
	if(sStats[playerid][sWohnwagen] < 1)
  		return SendClientMessage(playerid, Rot, "Du besitzt keinen Wohnwagen!");
	if(sscanf(params, "ud", id,preis))
	    return SendClientMessage(playerid, Weiß, "Befehl: /wverkaufen [Name/ID][Preis]");
	if(playerid == id)
		return SendClientMessage(playerid,Rot,"Du kannst dir nicht selber den Wohnwagen verkaufen!");
 	if(IsPlayerNPC(id))
  		return SendClientMessage(playerid, Rot, "Du kannst keinen NPC/Bot den Wohnwagen verkaufen.");
   	if(id != INVALID_PLAYER_ID)
	    SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht.");
   	if(sStats[id][sWohnwagen] == 1)
	    SendClientMessage(playerid, Rot, "Der Spieler hat schon einen Wohnwagen.");
   	if(sStats[id][sLevel] < 4)
	    SendClientMessage(playerid, Rot, "Der Spieler muss mind. Level 4 sein um einen Wohnwagen kaufen zu können.");
   	if (ProxDetectorS(5.0, playerid, id) && id != playerid)
   	    SendClientMessage(playerid, Rot, "Der Spieler ist nicht in deiner nähe.");
   	if(preis < 1 || preis > 100000)
	    return SendClientMessage(playerid,Rot,"Der Preis kann nicht kleiner als 1 und größer als 100.000 sein!");
   	if(WohnTr[id] > 0)
 		return SendClientMessage(playerid,Rot,"Der Spieler hat schon ein Wohnwagenangebot erhalten!");
	GetVehiclePos(wohnwagen[playerid], X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid,5,X,Y,Z))
	{
		WohnId[id] = playerid; WohnTr[id] = preis; WohnPr[id] = preis;
		format(string, sizeof(string), "* Du bietest %s, einen {FFFF00}Wohnwagen{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "* %s bietet dir einen {FFFF00}Wohnwagen{FFFFFF} für {FFFF00}%d{FFFFFF} an, tippe /acceptwohnwagen um anzunehmen.", GetName(playerid),preis);
		SendClientMessage(id, Weiß, string);
	}
	else
	{
	    return SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von deinem Wohnwagen!");
	}
	return 1;
}
command(acceptwohnwagen, playerid, params[])
{
   	 	#pragma unused params
		new string[128];
		if(WohnTr[playerid] < 1)
  		{
  		    SendClientMessage(playerid,Rot,"Du hast kein Wohnwagenangebot erhalten!");
  		    return 1;
  		}
		if(GetPlayerEuros(playerid) < WohnPr[playerid])
  		{
			format(string, sizeof(string), "Käufer %s hat nicht genug Geld um den Wohnwagen zu bezahlen.", GetName(playerid));
			SendClientMessage(WohnId[playerid], Rot, string);
  		    SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um den Wohnwagen zu bezahlen!");
  			WohnId[playerid] = 0; WohnTr[playerid] = 0; WohnPr[playerid] = 0;
  		    return 1;
  		}
		if(WohnTr[playerid] > 0)
  		{
    		if (ProxDetectorS(5.0, playerid, WohnId[playerid]))
    		{
    		    GivePlayerEuro(playerid,-WohnPr[playerid]);
    		    GivePlayerEuro(WohnId[playerid],WohnPr[playerid]);
    		    sStats[playerid][sWohnwagen] = 1;
    		    sStats[WohnId[playerid]][sWohnwagen] = 0;
    		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Du hast erfolgreich den Wohnwagen von %s abgekauft.", GetName(WohnId[playerid]));
				SendClientMessage(playerid, Weiß, string);
				SendClientMessage(playerid,Gelb2,"Info: Alle nötigen Informationen zum Thema Wohnwagen findest du unter /wohnwagenhelp.");
				format(string, sizeof(string), "* %s hat dir deinen Wohnwagen erfolgreich abgekauft.", GetName(playerid));
				SendClientMessage(WohnId[playerid], Weiß, string);
				wohnwagen[playerid] = wohnwagen[WohnId[playerid]];
				wohnwagenstatus[playerid] = wohnwagenstatus[WohnId[playerid]];
				wohnwagentuev[playerid] = wohnwagentuev[WohnId[playerid]];
				wohnwagen[WohnId[playerid]] = 0;
				wohnwagenstatus[WohnId[playerid]] = 0;
				wohnwagentuev[WohnId[playerid]] = 0;
				if(wohnwagentuev[playerid] == 1)
				{
	   				format(string, sizeof(string), "%s",GetName(playerid));
	    			SetVehicleNumberPlate(wohnwagen[playerid],string);
				}
				Kennzeichen[wohnwagen[playerid]] = wohnwagentuev[playerid];
				WohnId[WohnId[playerid]] = 0; WohnTr[WohnId[playerid]] = 0; WohnPr[WohnId[playerid]] = 0;
				WohnId[playerid] = 0; WohnTr[playerid] = 0; WohnPr[playerid] = 0;
				format(Query, sizeof(Query), "UPDATE `wohnwagen` SET `inhaber` = '%s' WHERE `inhaber` = '%s'", GetName(playerid), GetName(WohnId[playerid]));
				mysql_query(Query);
				mysql_free_result();
				return 1;
  			}
		}
		else
		{
			SendClientMessage(playerid,Rot,"Du bist zu weit von dem Wohnwagenverkäufer entfernt!");
			return 1;
		}
		return 1;
}
command(wpark, playerid, params[])
{
	#pragma unused params
	new vehicleid = GetPlayerVehicleID(playerid);
	new Float:A,Float:X,Float:Y,Float:Z;
	if(sStats[playerid][sWohnwagen] < 1)
  		return SendClientMessage(playerid, Rot, "Du besitzt keinen Wohnwagen!");
	if(vehicleid == wohnwagen[playerid])
	{
 		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        {
            SendClientMessage(playerid,Rot,"Du bist nicht der Fahrer des Wohnwagens!");
            return 1;
        }
		ClearChat(playerid);
		SendClientMessage(playerid,Weiß,"Der Wohnwagen wurde hier erfolgreich geparkt!");
  		GetVehiclePos(wohnwagen[playerid],X,Y,Z);
    	GetVehicleZAngle(wohnwagen[playerid],A);
  		format(Query, sizeof(Query), "UPDATE `wohnwagen` SET `posx`='%f',`posy`='%f',`posz`='%f',`posa`='%f' WHERE `inhaber` = '%s'", X,Y,Z,A, GetName(playerid));
		mysql_query(Query);
    	return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du sitzt nicht in deinem Wohnwagen!");
	    return 1;
	}
}
command(wlock, playerid, params[])
{
	#pragma unused params
	new Float:X,Float:Y,Float:Z;
	if(sStats[playerid][sWohnwagen] < 1)
  		return SendClientMessage(playerid, Rot, "Du besitzt keinen Wohnwagen!");
	GetVehiclePos(wohnwagen[playerid], X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid,5,X,Y,Z))
	{
  		if(wohnwagenstatus[playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	        GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Wohnwagen ~g~geoeffnet",3000, 5);
	        wohnwagenstatus[playerid] = 0;
	        SetVehicleLock(wohnwagen[playerid],0);
	        return 1;
	    }
		else
		{
		    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Wohnwagen ~r~geschlossen",3000, 5);
		    wohnwagenstatus[playerid] = 1;
		    SetVehicleLock(wohnwagen[playerid],1);
		    return 1;
		}
	}
	else
	{
 		SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von deinem Wohnwagen!");
 		return 1;
	}
}
//CNN Befehle
command(interview, playerid, params[])
{
	#pragma unused params
	return cmd_live(playerid, params);
}

command(live, playerid, params[])
{
	new id, string[120];
	if(!IsACNN(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied der Bayside-Newstime a.G!");
	if(sStats[playerid][sRank] < 4)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 4 sein um ein Interview veranstalten zu können!");
	if(sscanf(params, "u", id))
	    return SendClientMessage(playerid, Weiß, "Befehl: /live [Name/ID]");
	if(playerid == id)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber zu einem Interview einladen!");
 	if(IsPlayerNPC(id))
  		return SendClientMessage(playerid, Rot, "Du kannst keinen NPC/Bot zum Interview einladen.");
 	if(TalkingLive[playerid] != 255)
  		return SendClientMessage(playerid, Rot, "Du bist schon in einem Interview.");
	if(id != INVALID_PLAYER_ID)
	    SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht.");
  	if(TalkingLive[playerid] != 255)
   	{
   	SendClientMessage(playerid, Weiß, "Du hast das Interview beendet.");
    SendClientMessage(TalkingLive[playerid], Weiß, "Das Interview wurde beendet.");
    TogglePlayerControllable(playerid, true);
    TogglePlayerControllable(TalkingLive[playerid], true);
    TalkingLive[TalkingLive[playerid]] = 255;
    TalkingLive[playerid] = 255;
    return 1;
    }
    if(id != INVALID_PLAYER_ID)
    {
		if (ProxDetectorS(5.0, playerid, id))
		{
			format(string, sizeof(string), "* Du hast %s zu einem Interview eingeladen.", GetName(id));
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s hat dich zu einem Interview eingeladen, tippe /acceptinterview um anzunehmen.", GetName(playerid));
			SendClientMessage(id, Weiß, string);
			LiveOffer[id] = playerid;
		}
		else return SendClientMessage(playerid,Rot,"Du bist zu weit vom Spieler entfernt");
    }
    else return SendClientMessage(playerid,Rot,"Ungültige/r Name/ID");
    return 1;
}

command(acceptinterview, playerid, params[])
{
	if(LiveOffer[playerid] == 999)
	{
	    SendClientMessage(playerid,Rot,"Du hast kein Interview Angebot erhalten!");
	    return 1;
	}
	if(LiveOffer[playerid] < 999)
	{
		if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
		{
  			SendClientMessage(playerid, Weiß, "Du bist bewegungsunfähig, bis das Interview endet.");
			SendClientMessage(LiveOffer[playerid], Weiß, "Du bist bewegungsunfähig, bis das Interview endet (benutze nochmal /live um es zu beenden).");
			TogglePlayerControllable(playerid, false);
			TogglePlayerControllable(LiveOffer[playerid], false);
			TalkingLive[playerid] = LiveOffer[playerid];
			TalkingLive[LiveOffer[playerid]] = playerid;
			CNNKasse+=25;
			LiveOffer[playerid] = 999;
			return 1;
    	}
			else return SendClientMessage(playerid,Rot,"Du bist zuweit vom Interviewer entfernt!");
	}
	return 1;
}

command(n, playerid, params[])
{
	#pragma unused params
	return cmd_news(playerid, params);
}

command(bsntradio, playerid, params[])
{
	#pragma unused params
	return cmd_bsntr(playerid, params);
}

command(bsntonline, playerid, params[])
{
    #pragma unused params
	new count = 1,string[428];
	if(!IsACNN(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied der Bayside-Newstime a.G!");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sMitglied] == 4 || sStats[i][sLeiter] == 4)
		{
		    format(string, sizeof(string),"{FFFFFF}Rank: {FFFF00}%s {FFFFFF}| {FFFFFF}Name: {FFFF00}%s {FFFFFF}\n%s", GetPlayerRank(i) ,GetName(i),string);
		    count ++;
		}
	}

	if(count != 1)
	{
	    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}BSNT Mitglieder Onlineliste", string, "Abbrechen", "");
	    return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}BSNT Mitglieder Onlineliste", "{FFFFFF}Kein BSPD Mitglied online!", "Abbrechen", "");
		return 1;
 	}
}

command(bsntr, playerid, params[])
{
    if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /bsntr [Nachricht]");
	if(sStats[playerid][sMute] == 1)
		return SendClientMessage(playerid, Rot,"Du kannst das Radio nicht benutzen da du gemutet bist.");
	if(!IsACNN(playerid))
	   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied der Bayside-Newstime a.G!");

	new string[128];
	if(CheckPlayerText(playerid,params) == 0) { return 1; }
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
    	if(sStats[i][sMitglied] == 4 || sStats[i][sLeiter] == 4)
     	{
      		format(string, sizeof(string), "[BSNT Radio] %s %s: %s", GetPlayerRank(playerid),GetName(playerid), params);
        	SendClientMessage(i, CNNFARBE, string);
      	}
    }
	return 1;
}

//DJ Befehle
command(bsnthelp, playerid, params[])
{
	#pragma unused params
	if(!IsACNN(playerid))
    	return SendClientMessage(playerid, Rot, "Du bist kein Mitglied der Bayside-Newstime a.G!");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/news -- {C0C0C0}Schreibt eine News.\n{FFFFFF}/interview -- {C0C0C0}Startet ein Interview.\n{FFFFFF}/bsntr -- {C0C0C0}Funkchat.\n{FFFFFF}/bsntonline -- {C0C0C0}Onlineanzeige der Mitglieder.\n");
	ShowPlayerDialog(playerid,CNN22,DIALOG_STYLE_MSGBOX,"{FFFF00}Bayside-Newstime Hilfebox",string,"OK","");
	return 1;
}

command(news, playerid,params[])
{
	#pragma unused params
	new string[128];
	new newcar = GetPlayerVehicleID(playerid);
	if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /news [Nachricht]");
	if(!IsACNN(playerid))
    	return SendClientMessage(playerid, Rot, "Du bist kein Mitglied der Bayside-Newstime a.G!");
	if(sStats[playerid][sRank] < 2)
  		return SendClientMessage(playerid, Rot, "Du musst mind. Rank 2 sein um News schreiben zu können!");
	if(sStats[playerid][sMute] == 1)
		return SendClientMessage(playerid, Rot, "Du kannst keine News schreiben wenn du gemutet bist!");
	if(spawncar_job[newcar] == 4)
	{
		if(GetVehicleModel(newcar) == 582)
		{
			format(string, sizeof(string), "Newsreporter %s: %s", GetName(playerid), params);
			OOCNews(COLOR_CNN,string);
			CNNKasse+=3;
			return 1;
		}
		else
		{
  			SendClientMessage(playerid,Rot,"Du musst in einem Newsvan sitzen um News schreiben zu können!");
	    	return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du musst in einem Newsvan sitzen um News schreiben zu können!");
	    return 1;
	}
}

//Zeitung kaufen
command(zeitung, playerid,params[])
{
	#pragma unused params
	new string[128];
	new erstelltt;
	new row[128];
	new field[1][32];
	format(string, sizeof(string), "SELECT * FROM zeitungen WHERE id = '1'");
	mysql_query(string);
	mysql_store_result();
	if(!mysql_num_rows())
	{
	}
	else
	{
 		 mysql_fetch_row_format(row, "|");
		explode(row, field, "|");
		erstelltt = strval(field[0]);
		mysql_free_result();
	}
    if(erstelltt == 0 && GetPVarInt(playerid, "Zeitung") == 1)
    {
        SendClientMessage(playerid,Rot,"Du hast keine Zeitung!");
        SetPVarInt(playerid,"Zeitung",0);
        return 1;
    }
	if(GetPVarInt(playerid, "Zeitung") == 0)
	{
 		SendClientMessage(playerid,Rot,"Du hast keine Zeitung!");
	    return 1;
	}
	ShowZeitung(playerid);
	return 1;
}
command(buyzeitung, playerid, params[])
{
    #pragma unused params
	new erstelltt;
	new string[128];
	new row[128];
	new field[1][32];
	format(string, sizeof(string), "SELECT * FROM zeitungen WHERE id = '1'");
	mysql_query(string);
	mysql_store_result();
	if(!mysql_num_rows())
	{
	}
	else
	{
		mysql_fetch_row_format(row, "|");
		explode(row, field, "|");
		erstelltt = strval(field[0]);
		mysql_free_result();
	}
    if(erstelltt == 0)
    {
        SendClientMessage(playerid,Rot,"Der Zeitungsstand ist leer!");
        return 1;
    }
	if(IsACNN(playerid))
	{
	    SendClientMessage(playerid,Rot,"Mitglieder der Bayside-Newstime a.G können keine Zeitungen kaufen!");
	    return 1;
	}
   	if(sStats[playerid][sSpielstunden] < 1)
	{
	    SendClientMessage(playerid,Rot,"Du benötigst mind. 1 Spielstunde um eine Zeitung kaufen zu können!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Zeitung") == 1)
	{
 		SendClientMessage(playerid,Rot,"Du hast schon eine Zeitung!");
	    return 1;
	}
	new geld;
	geld = GetPlayerEuros(playerid);
	if(geld < 30)
	{
	    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (30)!");
	}
	if(IsAtZeitung(playerid))
	{
		ClearChat(playerid);
		GivePlayerEuro(playerid,-30);
		CNNKasse+=30;
		SetPVarInt(playerid,"Zeitung",1);
		SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine Zeitung gekauft!");
		SendClientMessage(playerid,Gelb2,"Diese kannst du mit /zeitung lesen.");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist an keinem Zeitungsstand!");
	    return 1;
	}
}
//AD
command(werbung, playerid, params[])
{
	#pragma unused params
	return cmd_ad(playerid, params);
}

command(ad, playerid, params[])
{
    #pragma unused params
	if(sStats[playerid][sSpielstunden] < 3)
	{
	    SendClientMessage(playerid,Rot,"Du benötigst mind. 3 Spielstunden bevor du eine Werbung schalten lassen kannst!");
	    return 1;
	}
	if(GetPlayerEuros(playerid) < 300)
	{
 		SendClientMessage(playerid,Rot,"Um eine Werbung schalten lassen zu können benötigst du mind. 300!");
	    return 1;
	}
	if(IsAtAD(playerid))
	{
		new text[128], string[128];
		if(adopen == 1) return SendClientMessage(playerid, Rot, "Du kannst noch keine Werbung schalten lassen.");
		if(adopen == 2) return SendClientMessage(playerid, Rot, "Das Werbesystem wurde von einem Administrator deaktiviert.");
	    if(sscanf(params,"s",text)) return SendClientMessage(playerid, Weiß, "Benutzung: /ad [Text]");
	    if(CheckPlayerText(playerid,text) == 0) { return 1; }
	    format(string, sizeof(string), "~g~Werbung: ~w~%s ~b~Kontakt: ~w~%s [%d]", text, GetName(playerid), sStats[playerid][sNummer]);
	    TextDrawSetString(Ad2, string);
	    SendClientMessage(playerid, Gelb, "Werbung erfolgreich verfasst. -300!");
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    GivePlayerEuro(playerid,-300);
	    CNNKasse+=300;
	    adopen = 1;
	    SetTimer("AdWillOpen", 30109, false);
		return 1;
	}
	else
	{
 		SendClientMessage(playerid,Rot,"Du bist an keinem Werbepunkt!");
		return 1;
	}
}

//Admins um zu gucken ob welche online sind
command(afkliste, playerid, params[])
{
	#pragma unused params
	new count = 1,string[428];
	if(Desktop_Status[playerid] >= 1)
	{
		SendClientMessage(playerid,Rot,"Du kannst diesen Befehl nicht nutzen während du AFK bist!");
		return 1;
	}
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && Desktop_Status[i] >= 1)
		{
			format(string, sizeof(string), "{da5905}%s {ffffff}[Away From Keyboard] seit: %d Sekunden. (%d Minuten)n\%s",GetName(i), Desktop_Status[i],Desktop_Status[i]/60,string);
			count ++;
		}
	}

	if(count != 1)
	{
		ShowPlayerDialog(playerid, DIALOG_AFK3, DIALOG_STYLE_MSGBOX, "{e13333}Away From Keyboard Liste", string, "Abbrechen", "");
		return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_AFK3, DIALOG_STYLE_MSGBOX, "{e13333}Away From Keyboard Liste", "{FFFFFF}Zurzeit ist keiner Away From Keyboard!", "Abbrechen", "");
		return 1;
	}
}

//Autoscooter
command(endautoscooter, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(GetPVarInt(playerid, "Autoscooter") == 0)
		return SendClientMessage(playerid,Rot,"Du befindest dich in keinem Autoscootermatch!");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(GetPVarInt(i, "Autoscooter") == 1)
		{
   			format(string,sizeof(string), "Der Spieler %s[%d] hat das Autoscootermatch verlassen",GetName(playerid),playerid);
    		SendClientMessage(i, Weiß, string);
   		}
	}
		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Du bist erfolgreich aus dem Autoscootermatch ausgestiegen!");
    	SetPVarInt(playerid, "Autoscooter",0);
     	SetPlayerPosEx(playerid,-2458.4407,2257.5825,4.9538);
     	SetPlayerFacingAngle(playerid,91.7514);
     	TogglePlayerControllable(playerid, true);
     	SetPlayerInterior(playerid,0);
		AutoscooterPlayers --;
     	return 1;
}

command(autoscooterhelp, playerid, params[])
{
    #pragma unused params
   	new string[128];
	format(string,sizeof(string),
	"{FFFFFF}/endautoscooter -- {C0C0C0}Autoscooter verlassen.");
	ShowPlayerDialog(playerid,AUTOSCOOTERHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Autoscooter Hilfebox",string,"OK","");
	return 1;
}

//Paintball
command(endpaintball, playerid, params[])
{
	#pragma unused params
	new string[135];
 	if(PlayerPaintballing[playerid] < 1)
		return SendClientMessage(playerid,Rot,"Du bist nicht in einem Paintballmatch!");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
 		if(PlayerPaintballing[i] != 0)
   		{
   			format(string,sizeof(string), "Der Spieler %s[%d] hat das Paintballmatch verlassen",GetName(playerid),playerid);
    		SendClientMessage(i, Weiß, string);
   		}
	}
		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Du bist erfolgreich aus dem Paintballmatch ausgestiegen!");
  		ResetPlayerWeapons(playerid);
    	PlayerPaintballing[playerid] = 0;
     	SetPlayerPosEx(playerid,-2459.0935,2304.6450,4.9844);
     	SetPlayerFacingAngle(playerid,86.9723);
     	TogglePlayerControllable(playerid, true);
     	SetPlayerVirtualWorld(playerid, 0);
     	SetPlayerInterior(playerid,0);
        sStats[playerid][sPwaffe] = 0;
        SetPlayerWeather(playerid, 2);
		PaintballPlayers --;
  		SetPVarInt(playerid, "Superfaust", 0);
     	TextDrawHideForPlayer(playerid,PBText);
  		TextDrawShowForPlayer(playerid,Ad1);
		TextDrawShowForPlayer(playerid,Ad2);
     	return 1;
}
command(paintballhelp, playerid, params[])
{
    #pragma unused params
   	new string[280];
	format(string,sizeof(string),
	"{FFFFFF}/endpaintball -- {C0C0C0}Paintballmatch verlassen.\n{FFFFFF}/paintballstats -- {C0C0C0}Eigene Paintballstatistik einsehen.");
	ShowPlayerDialog(playerid,PAINTBALLHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Paintball Hilfebox",string,"OK","");
	return 1;
}
command(pbstats, playerid, params[])
{
	#pragma unused params
	return cmd_paintballstats(playerid, params);
}

command(paintballstats, playerid, params[])
{
	#pragma unused params
	if(PlayerPaintballing[playerid] > 0)
		return SendClientMessage(playerid,Rot,"Du kannst deine Paintballstats nicht während einem Paintballmatch angucken!");
	if(sStats[playerid][sPpunkte] < 1)
		return SendClientMessage(playerid,Rot,"Du hast noch keine Paintballpunkte, deine Statistik kann nicht aufgebaut werden!");

	new persostring[200];
 	format(persostring,sizeof(persostring),"{C0C0C0}Deine Paintball Stats :\n\n{C0C0C0}Name : {FFF2F2}%s\n{C0C0C0}Kills : {FFF2F2}%d\n{C0C0C0}Tode : {FFF2F2}%d\n{C0C0C0}Punkte : {FFF2F2}%d \n{C0C0C0}K/D Rate : {FFF2F2}%d",
 	GetName(playerid),sStats[playerid][sPkills],sStats[playerid][sPdeaths],sStats[playerid][sPpunkte],sStats[playerid][sPkills]/sStats[playerid][sPdeaths]);
 	ShowPlayerDialog(playerid,PAINTBALL3,DIALOG_STYLE_MSGBOX,"Paintballstats:",persostring,"OK","");
 	return 1;
}

//Admins um zu gucken ob welche online sind
command(todesliste, playerid, params[])
{
    #pragma unused params
	new count = 1,string[428];
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sTod] > 0)
		{
		    format(string, sizeof(string), "{FFFFFF}Name: {00FF04}%s\n%s",GetName(i),string);
		    count ++;
		}
	}

	if(count != 1)
	{
	    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}Todesliste", string, "Abbrechen", "");
	    return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}Todesliste", "{FFFFFF}Zurzeit ist keiner Tod!", "Abbrechen", "");
		return 1;
	}
}

//Admins um zu gucken ob welche online sind
command(admins, playerid, params[])
{
    #pragma unused params
	new count = 1,string[1024];
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sAdminlevel] > 0 && GetPVarInt(i, "Admindutyx") == 0)
		{
		    format(string, sizeof(string), "{FFFFFF}Name: {00FF04}%s {FFFFFF}Rang: {00FF04}%s {FFFFFF}Tele: {00FF04}%d\n%s",GetName(i),GetPlayerAdminRank(i), sStats[i][sNummer],string);
		    count ++;
		}
	}

	if(count != 1)
	{
	    ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}Administratoren Liste", string, "Abbrechen", "");
	    return 1;
	}
	else
	{
		ShowPlayerDialog(playerid, DIALOG_ADMINS, DIALOG_STYLE_MSGBOX, "{e13333}Administratoren Liste", "{FFFFFF}Kein Administrator online!", "Abbrechen", "");
		return 1;
	}
}

//PaynSpray
command(pns, playerid, params[])
{
    #pragma unused params
   	new car = GetPlayerVehicleID(playerid);
   	if(sStats[playerid][sLink] == 0)
		return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
	if(GetPlayerEuros(playerid) < 100)
	    return SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei! (100)");
 	if(!IsPlayerInAnyVehicle(playerid))
 	    return SendClientMessage(playerid,Rot,"Du sitzt nicht in oder auf einem Fahrzeug");
 	if(IsABoat(car)|| IsAPlane(car) || IsAFahrrad(car))
	    return SendClientMessage(playerid,Rot,"Fahrräder,Flugzeuge,Helikopter oder Boote können hier nicht umgefärbt werden!");
	if(psn == 1)
	    return SendClientMessage(playerid,Rot,"Jemand anders ist schon im Pay'n'Spray, bitte warte bis er fertig ist!");
 	if(MotorKaputt[car] == 1)
	   return SendClientMessage(playerid,Rot,"Der Motor dieses Fahrzeuges ist kaputt du kannst es nicht umfärben lassen!");
    if(VehicleStarted[car] == 1)
    	return SendClientMessage(playerid,Rot,"Bitte schalte zuerst den Motor deines Fahrzeuges aus!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid,Rot,"Du bist nicht der Fahrer des Fahrzeuges!");
    if(IsPlayerInRangeOfPoint(playerid,5,-2305.4019,2343.3318,4.6533))
	{
	    if(IsACopCar(GetPlayerVehicleID(playerid)))
	    {
	   		psn = 1;
			ClearChat(playerid);
			SendClientMessage(playerid,Weiß,"Bitte warten, dein Fahrzeug wird in 10 Sekunden umgefärbt!");
			SendClientMessage(playerid,Gelb2,"Für Staatsfahrzeuge ist die Umlackierung kostenlos!");
			SetTimerEx("Umlackieren2",10631,false,"i",playerid);
			TogglePlayerControllable(playerid, false);
			MoveDynamicObject(psgate,-2298.4157714844, 2343.5158691406, 5.4969425201416,2);
			Staatskasse-=100;
	        return 1;
	    }
		if(IsSupportCar(GetPlayerVehicleID(playerid)))
		{
			psn = 1;
			ClearChat(playerid);
			SendClientMessage(playerid,Weiß,"Bitte warten, dein Fahrzeug wird in 10 Sekunden umgefärbt!");
			SendClientMessage(playerid,Gelb2,"Für Supportfahrzeuge ist die Umlackierung kostenlos!");
			SetTimerEx("Umlackieren2",10949,false,"i",playerid);
			TogglePlayerControllable(playerid, false);
			MoveDynamicObject(psgate,-2298.4157714844, 2343.5158691406, 5.4969425201416,2);
	        return 1;
		}
		psn = 1;
		ClearChat(playerid);
		SendClientMessage(playerid,Weiß,"Bitte warten, dein Fahrzeug wird in 10 Sekunden umgefärbt!");
		GivePlayerEuro(playerid,-100);
		SetTimerEx("Umlackieren",10973,false,"i",playerid);
		TogglePlayerControllable(playerid, false);
		MoveDynamicObject(psgate,-2298.4157714844, 2343.5158691406, 5.4969425201416,2);
		return 1;
 	}
 	else
 	{
 	    SendClientMessage(playerid,Rot,"Du bist nicht beim Pay'n'Spray!");
 	    return 1;
 	}
}
//Bank
command(robbank, playerid, params[])
{
    #pragma unused params
    return cmd_bankausrauben(playerid, params);
}
command(bankausrauben, playerid, params[])
{
    #pragma unused params
    new string[128];
	new Float:xP,Float:xY,Float:xZ;
	GetPlayerPos(playerid, xP, xY, xZ);
	if(sStats[playerid][sLink] == 0)
		return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
 	if(IsAStaat(playerid))
		return SendClientMessage(playerid, Rot, "Sicherheitskräfte können die Bank nicht ausrauben!");
	if(sStats[playerid][sLevel] < 3)
		return SendClientMessage(playerid, Rot, "Du musst mind. Level 3 sein um die Bank ausrauben zu können!");
 	if((norob))
		return SendClientMessage(playerid, Rot, "Das Robsystem wurde von einem Administrator deaktiviert!");
    if(BankRaub == 0)
        return SendClientMessage(playerid, Rot, "Die Bank wurde schon ausgeraubt!");
   	if(GetPVarInt(playerid, "247Cash") > 0)
	   return SendClientMessage(playerid, Rot,"Du kannst die Bank nicht ausrauben du hast schon den 24/7 Laden überfallen!");
	if(PolizistenOn < 3)
	    return SendClientMessage(playerid, Rot, "Du kannst die Bank nicht ausrauben es sind zu wenig Polizisten online!");
  	if(sStats[playerid][sWanteds] > 0)
        return SendClientMessage(playerid, Rot, "Du hast zuviele Wanteds du kannst die Bank nicht ausrauben!");
   	if(GetPlayerWeapon(playerid) < 22)
   	    return SendClientMessage(playerid, Rot, "Du benötigst eine Waffe um die Bank ausrauben zu können!");
   	new cop = GetNearestPlayer(playerid, 30);
	if(IsACop(cop))
		return SendClientMessage(playerid, Rot, "Du kannst die Bank nicht ausrauben es ist ein Polizist in der nähe!");
   	if(IsPlayerInRangeOfPoint(playerid,1.5,1433.4547,-997.3876,1639.7911))
	{
	new bot = GetNearestBot(playerid, 3);
	if(IsPlayerNPC(bot))
	{
	if(!strcmp(GetName(bot),"Lissa",true))
 	{
 	ClearAnimations(playerid);
 	ClearAnimations(bot);
 	DisablePlayerCheckpoint(playerid);
 	QuestCP[playerid] = 0;
	SetPlayerChatBubble(bot,"Lissa: Bitte töten Sie mich nicht ich gib ihnen das Geld sofort!",COLOR_LIGHTBLUE,35.0,15074);
 	SetTimerEx("BotAnimation",1109,false,"ii",bot,playerid);
	BankRaub = 0;
  	SetTimer( "SetBankRaub" , 21600174, false);
	new randmoney = 4553 + random (25754);
	SetPVarInt(playerid, "BankGeld", randmoney);
	SetPVarInt(playerid,"BankRaub",1);
   	SetTimerEx("BankRaub2", 15217, false, "d", playerid);
   	ClearChat(playerid);
   	SendClientMessage(playerid,Weiß,"Du versuchst die Bank auszurauben, die Bänkerin braucht 15 Sekunden um dir das Geld zu geben!");
   	SendClientMessage(playerid,Weiß,"wenn du erfolgreich bist erhältst du einen Geldsack und musst flüchten!");
   	SendClientMessage(playerid,Weiß,"doch Vorsicht das Wachpersonal will gerade die Polizei benachrichtigen!");
   	SendClientMessage(playerid,COLOR_LIGHTRED,"Achtung: Die Polizei darf bei erfolgreichen Bankraub auf dich schiessen!");
   	BankRaubATM = 1;
   	TogglePlayerControllable(playerid, false);
   	SetPlayerPosEx(playerid,1433.1368,-997.8256,1639.7911);
   	SetPlayerFacingAngle(playerid,178.2903);
	SetPlayerCameraPos(playerid,1428.5248,-998.7820,1640.5585);
	SetPlayerCameraLookAt(playerid,1428.9712,-998.7990,1640.5603);
	ApplyAnimation(playerid, "ON_LOOKERS","point_loop", 4.0, 0, 1, 1, 1, 0, 1);
	sStats[playerid][sWanteds] += 1;
	SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
 	format(string, sizeof(string), "Der Spieler %s[%d] versucht die Bank zu überfallen!", GetName(playerid), playerid);
	SendRadioMessage(1, COLOR_BLUE, string);
	ApplyAnimation(bot, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0, 1);
 	for(new p = 0; p < MAX_PLAYERS; p++)
 	{
		if(IsPlayerInRangeOfPoint(p,30,xP,xY,xZ))
		{
			PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/alarm.mp3");
		}
	}
	}
	}
	}
	else return SendClientMessage(playerid,Rot,"Du bist nicht bei dem Bank Schalter 1!");
	return 1;
}
command(bank, playerid, params[])
{
    #pragma unused params
	if(sStats[playerid][sLink] == 0)
		return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
	if(BankRaubATM > 0)
	    return SendClientMessage(playerid,Rot,"Du kannst zurzeit nicht auf dein Konto zugreifen die Bank wird ausgeraubt!");
   	if(IsPlayerInRangeOfPoint(playerid,1.0,1433.4547,-997.3876,1639.7911))
	{
	SetPVarInt(playerid, "Bank", 0);
	if(sStats[playerid][sKarte] < 1)
		return ShowPlayerDialog(playerid,BANK1,DIALOG_STYLE_MSGBOX,"Konto Erstellung","{FFFFFF}Du hast noch kein {FFFF00}Konto{FFFFFF} möchtest du dir ein erstellen für{FFFFFF} {FFFF00}25{FFFFFF} Gebühren pro Zahltag?","Ja","Nein");
	if(sStats[playerid][sKarte] == 1)
		return ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
	}
	else return SendClientMessage(playerid,Rot,"Du bist nicht bei dem Bank Schalter 1!");
	return 1;
}
//Mechatroniker
command(benzinkanister, playerid, params[])
{
    #pragma unused params
    SetPVarInt(playerid,"NoBK",1);
	new vehicleid = GetClosestVehicle(playerid, 2.5);
	if(sStats[playerid][sLevel] < 2)
	{
	    SetPVarInt(playerid,"NoBK",0);
	    SendClientMessage(playerid,Rot,"Du musst mind. Level 2 sein einen Benzinkanister einsetzen zu können!");
	    return 1;
	}
	if(sStats[playerid][sBenzinkanister] == 0)
	{
	    SetPVarInt(playerid,"NoBK",0);
	    SendClientMessage(playerid,Rot,"Du hast keinen Benzinkanister!");
	    return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
 	{
 	    SetPVarInt(playerid,"NoBK",0);
  		SendClientMessage(playerid,Rot,"Bitte steige aus um dein Fahrzeug mithilfe des Benzinkanisters zu befüllen!");
	    return 1;
 	}
 	if(GetVehicleModel(vehicleid) == 481)
 	{
 	    SetPVarInt(playerid,"NoBK",0);
 	    SendClientMessage(playerid,Rot,"Fahrräder haben keinen Tank!");
 	    return 1;
  	}
   	if(VehicleStarted[vehicleid] == 1)
    {
	    SendClientMessage(playerid,Rot,"Du musst zuerst den Motor ausschalten, um den Tank nachfüllen zu können!");
	    return 1;
    }
	if(Tankmenge[vehicleid] == GasMax[GetVehicleModel(vehicleid)-400])
	{
	    SetPVarInt(playerid,"NoBK",0);
		SendClientMessage(playerid,Rot,"Der Tank dieses Fahrzeuges ist voll!");
		return 1;
	}
	if(vehicleid == -1)
 	{
 	    SetPVarInt(playerid,"NoBK",1);
  		SendClientMessage(playerid,Rot,"Du stehst nicht in der nähe eines Fahrzeuges!");
  		return 1;
 	}
 	    SetPVarInt(playerid,"NoBK",0);
		sStats[playerid][sBenzinkanister] -= 1;
 	    SendClientMessage(playerid,Weiß,"Du hast das Fahrzeug erfolgreich mit dem Benzinkanister betankt!");
 	    Tankmenge[vehicleid] = GasMax[GetVehicleModel(vehicleid)-400];
 	    return 1;
}
command(warnlicht, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] != 1)
	{
 		SendClientMessage(playerid,Rot,"Du bist kein Mechatroniker!");
	    return 1;
	}
	if(GetPVarInt(playerid, "MechaDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(sStats[playerid][sLevel] < 2)
	{
	    SendClientMessage(playerid,Rot,"Du musst mind. Level 2 sein um Warnlichter an dein Fahrzeug anbringen zu können!");
	    return 1;
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
	    SendClientMessage(playerid,Rot,"Du sitzt nicht im Abschleppwagen!");
	    return 1;
	}
    if(MotorKaputt[GetPlayerVehicleID(playerid)] == 1)
    {
	    SendClientMessage(playerid,Rot,"Der Motor dieses Fahrzeuges ist kaputt du kannst kein Warnlicht aufsetzen!");
	    return 1;
    }
    if(VehicleStarted[GetPlayerVehicleID(playerid)] == 0)
    {
	    SendClientMessage(playerid,Rot,"Der Motor dieses Fahrzeuges ist ausgeschaltet du kannst kein Warnlicht aufsetzen!");
	    return 1;
    }
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
	{
		if(Olicht[GetPlayerVehicleID(playerid)] == 0)
		{
			light1[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
			light2[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
			light3[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
			light4[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
			light5[GetPlayerVehicleID(playerid)] = CreateObject(19154,-0.0089111328, 0.273193359, 1.4037838, 0.0, 0.0, 96.0);
			AttachObjectToVehicle(light1[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.0089111328, -0.5, 1.55, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(light2[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.5, -0.5, 1.55, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(light3[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.5, -0.5, 1.55, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(light4[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), -0.5, 2.75, 0.6, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(light5[GetPlayerVehicleID(playerid)], GetPlayerVehicleID(playerid), 0.5, 2.75, 0.6, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Warnlicht ~g~aktiviert",3000, 5);
			SendClientMessage(playerid, Weiß, "Du kannst das Warnlicht mit /warnlicht wieder ausschalten!");
			Olicht[GetPlayerVehicleID(playerid)] = 1;
		}
		else if(Olicht[GetPlayerVehicleID(playerid)] == 1)
		{
			DestroyObject(light1[GetPlayerVehicleID(playerid)]);
			DestroyObject(light2[GetPlayerVehicleID(playerid)]);
			DestroyObject(light3[GetPlayerVehicleID(playerid)]);
			DestroyObject(light4[GetPlayerVehicleID(playerid)]);
			DestroyObject(light5[GetPlayerVehicleID(playerid)]);
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Warnlicht ~r~deaktiviert",3000, 5);
			Olicht[GetPlayerVehicleID(playerid)] = 0;
		}
	}
	return 1;
}
command(acceptbk, playerid, params[])
{
		#pragma unused params
		new string[128];
		if(BkTr[playerid] < 1)
  		{
  		    SendClientMessage(playerid,Rot,"Du hast kein Benzinkanisterangebot erhalten!");
  		    return 1;
  		}
		if(GetPlayerEuros(playerid) < BkPr[playerid])
  		{
			format(string, sizeof(string), "Käufer %s hat nicht genug Geld um den Benzinkanister zu bezahlen.", GetName(playerid));
			SendClientMessage(BkId[playerid], Rot, string);
  		    SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um die Benzinkanister zu bezahlen!");
  			BkId[playerid] = 0; BkTr[playerid] = 0; BkPr[playerid] = 0;
  		    return 1;
  		}
  		if(sStats[playerid][sBenzinkanister] >= 1)
  		{
  		    SendClientMessage(playerid,Rot,"Du kannst nicht mehr wie einen Benzinkanister tragen!");
 			format(string, sizeof(string), "Käufer %s kann keine weiteren Benzinkanister tragen.", GetName(playerid));
			SendClientMessage(BkId[playerid], Rot, string);
			BkId[playerid] = 0; BkTr[playerid] = 0; BkPr[playerid] = 0;
  		    return 1;
  		}
		if(BkTr[playerid] > 0)
  		{
    		if (ProxDetectorS(5.0, playerid, BkId[playerid]))
    		{
    		    GivePlayerEuro(playerid,-BkPr[playerid]);
    		    GivePlayerEuro(BkId[playerid],BkPr[playerid]);
    		    sStats[playerid][sBenzinkanister] +=BkTr[playerid];
    		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Du hast erfolgreich den Benzinkanister von Mechatroniker %s abgekauft.", GetName(BkId[playerid]));
				SendClientMessage(playerid, Weiß, string);
				SendClientMessage(playerid,Gelb2,"Du kannst diesen mit /benzinkanister einsetzen!");
				format(string, sizeof(string), "* %s hat dir den Benzinkanister erfolgreich abgekauft.", GetName(playerid));
				SendClientMessage(WaffenAngebot[playerid], Weiß, string);
				BkId[playerid] = 0; BkTr[playerid] = 0; BkPr[playerid] = 0;
				return 1;
  			}
		}
		else
		{
  			SendClientMessage(playerid,Rot,"Du bist zu weit von dem Mechatroniker entfernt!");
	    	return 1;
		}
		return 1;
}
command(sellbk, playerid, params[])
{
	if(sStats[playerid][sJob] != 1)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mechatroniker!");
		return 1;
	}
	if(GetPVarInt(playerid, "MechaDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(sStats[playerid][sLevel] < 2)
	{
	    SendClientMessage(playerid,Rot,"Du musst mind. Level 2 sein um Benzinkanister verkaufen zu können!");
	    return 1;
	}
	new string[128], id,preis;
	if(sscanf(params, "ud", id,preis))
	{
	SendClientMessage(playerid, Weiß, "Befehl: /sellbk [Name/ID] [Preis]");
	SendClientMessage(playerid, Gelb, "Verkauft einen Benzinkanister an einen anderen Spieler.");
	return 1;
	}
	if(IsPlayerNPC(id))
	{
	    SendClientMessage(playerid,Rot,"Du kannst keine Materialien an NPC/Bots verkaufen!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(preis < 1 || preis > 250)
	{
	    SendClientMessage(playerid,Rot,"Der Preis kann nicht kleiner als 1 und größer als 250 sein!");
	    return 1;
	}
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst dir nicht selber einen Benzinkanister verkaufen!");
	    return 1;
	}
	if(BkTr[id] > 0)
	{
 		SendClientMessage(playerid,Rot,"Der Spieler hat schon ein Benzinkanisterangebot erhalten!");
   		return 1;
	}
	if (ProxDetectorS(5.0, playerid, id) && id != playerid)
	{
		BkId[id] = playerid; BkTr[id] = 1; BkPr[id] = preis;
		format(string, sizeof(string), "* Du bietest %s, einen {FFFF00}Benzinkanister{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "* %s bietet dir einen {FFFF00}Benzinkanister{FFFFFF} für {FFFF00}%d{FFFFFF} an, tippe /acceptbk um anzunehmen.", GetName(playerid),preis);
		SendClientMessage(id, Weiß, string);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Der angegebene Spieler ist nicht in deiner Nähe!");
	    return 1;
	}
}
command(mechanikhelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] != 1)
  		return SendClientMessage(playerid, Rot, "Du bist kein Mechatroniker!");

	new string[490];
	format(string,sizeof(string),
	"{FFFFFF}/mdienst -- {C0C0C0}Du startest deinen Dienst.\n{FFFFFF}/hebeb -- {C0C0C0}Benutzung der Hebebühne.\n{FFFFFF}/sellbk -- {C0C0C0}Benzinkanister verkaufen.\n{FFFFFF}/funk -- {C0C0C0}Kommunikation mit anderen Mechatronikern.\n{FFFFFF}/acceptmecha -- {C0C0C0}Anruf annehmen\n{FFFFFF}/closemecha -- {C0C0C0}Anruf beenden\n{FFFFFF}/warnlicht -- {C0C0C0}Warnlichter am Abschleppwagen befestigen.");
	ShowPlayerDialog(playerid,MHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Mechatroniker Hilfebox",string,"OK","");
	return 1;
}
command(hebeb, playerid, params[])
{
	#pragma unused params
	new car = GetPlayerVehicleID(playerid);
	if(sStats[playerid][sJob] != 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Mechatroniker!");
	    return 1;
	}
	if(GetPVarInt(playerid, "MechaDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(!IsPlayerInAnyVehicle(playerid))
 	{
 	    SendClientMessage(playerid,Rot,"Du befindest dich auf/in keinem Fahrzeug!");
 	    return 1;
 	}
  	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
  	{
  	    SendClientMessage(playerid,Rot,"Du bist nicht der Fahrer dieses Fahrzeuges!");
  	    return 1;
  	}
 	if(IsABoat(car)|| IsAPlane(car) || IsAFahrrad(car))
	{
	    SendClientMessage(playerid,Rot,"Fahrräder,Flugzeuge,Helikopter oder Boote können nicht auf der Hebebühne bearbeitet werden!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,5,-2545.5894,2356.2566,4.6486))
	{
	    Hebean(playerid);
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht auf der Hebebühne!");
	    return 1;
 	}
}
command(closemecha, playerid ,params[])
{
    #pragma unused params
	if(sStats[playerid][sJob] != 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Mechatroniker!");
	    return 1;
	}
	if(GetPVarInt(playerid, "MechaDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(GetPVarInt(playerid, "M2") == 1)
 	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
		 	if(DeinM[i] == playerid)
		    {
		    	new string[128];
				new Name[MAX_PLAYER_NAME];
				GetPlayerName(i,Name,sizeof(Name));
				format(string,sizeof(string),"Der Mechatroniker %s hat deinen Anruf beendet.",Name);
				SendClientMessage(i,COLOR_GREEN,string);
				SendClientMessage(playerid,COLOR_WHITE,"Du hast den Anruf beendet!");
				SetPVarInt(i, "InM", 0);
				DeinM[i] = 0;
		  		SetPVarInt(playerid, "InM", 0);
				DeinM[playerid] = 0;
		  		DeletePVar(i, "M");
		  		DeletePVar(playerid, "M2");
		  		return 1;
 			}
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du hast keinen Notruf angenommen!");
	    return 1;
	}
	return 1;
}
command(stopmecha, playerid, params[])
{
    #pragma unused params
    return cmd_closemecha(playerid, params);
}
command(acceptmecha, playerid, params[])
{
	new id;
	if(sStats[playerid][sJob] != 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Mechatroniker!");
	    return 1;
	}
	if(GetPVarInt(playerid, "MechaDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(sscanf(params,"u",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /acceptmecha [ID/Name]");
  	if(GetPVarInt(playerid, "M2") == 1)
		return SendClientMessage(playerid, Rot, "Du kannst nicht mehr als einen Anruf bearbeiten!");
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nicht deinen eigenen Notruf bearbeiten!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(GetPVarInt(id, "Msend") == 1)
 	{
	    new Name[MAX_PLAYER_NAME], string[128];
	    GetPlayerName(playerid,Name,sizeof(Name));
	    SendClientMessage(playerid,Gruen,"Du kannst nun mit dem Anrufer kommunizieren, benutze /closemecha um den Anruf zu beenden.");
		format(string,sizeof(string),"Mechatroniker %s hat deinen Anruf angenommen. Du kannst nun mit ihm im Chat kommunizieren!",Name);
		SendClientMessage(id,Gruen,string);
		SendClientMessage(playerid,Weiß,"Außerdem wurde ein roter Marker auf die Karte gesetzt wo sich der Kunde befindet! (20 Sekunden)");
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(id, X, Y, Z);
		SetPlayerCheckpoint(playerid,X,Y,Z,4.0);
		SetTimerEx("CheckpointWeg", 20183, false, "d", playerid);
		QuestCP[playerid] = 96;
	 	SetPVarInt(id, "InM", 1);
	 	SetPVarInt(playerid, "M2", 1);
		DeinM[id] = playerid;
		DeinM[playerid] = id;
		DeletePVar(id, "Msend");
    }
    else
    {
        SendClientMessage(playerid,Rot,"Der Spieler hat keinen Notruf gesendet!");
        return 1;
	}
		return 1;
}
//Premiumbefehle
command(sonnenbrille,playerid,params[])
{
    #pragma unused params
	if(sStats[playerid][sLink] == 0)
		return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
	if(sStats[playerid][sPremium] == 0)
		return SendClientMessage(playerid, Rot, "Du hast keinen Premiumaccount!");
	if(sStats[playerid][sSonnenbrille] == 0)
		return SendClientMessage(playerid, Rot, "Du hast keine Sonnenbrille!");
	if(GetPVarInt(playerid, "Helm") == 1)
        return SendClientMessage(playerid, Rot, "Du kannst deine Sonnenbrille nicht aufsetzen solange du einen Helm aufhast!");
	if(GetPVarInt(playerid, "Angezogen") == 0)
 	{
 	    new skin = GetPlayerSkin(playerid);
 	    SetPlayerAttachedObject(playerid, 2, sStats[playerid][sSonnenbrille],2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
 	    SendClientMessage(playerid,Weiß,"Sonnenbrille erfolgreich angezogen!");
 	    SetPVarInt(playerid,"Angezogen",1);
 	    return 1;
  	}
  	else
  	{
  	    RemovePlayerAttachedObject(playerid,2);
   		SendClientMessage(playerid,Weiß,"Sonnenbrille erfolgreich ausgezogen!");
   		SetPVarInt(playerid,"Angezogen",0);
 	    return 1;
  	}
}
command(klingeltonp,playerid,params[])
{
    #pragma unused params
	if(sStats[playerid][sLink] == 0)
		return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
	if(sStats[playerid][sHandy] == 0)
		return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(sStats[playerid][sAkku] == 0)
		return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
	if(sStats[playerid][sPremium] == 0)
	    return SendClientMessage(playerid,Rot,"Du besitzt keinen Premium Account!");
	if(IsPlayerInRangeOfPoint(playerid,20,1012.8786,50.7204,55.3221))
	{
		ShowPlayerDialog(playerid,PREMIUM1,DIALOG_STYLE_INPUT,"Premium Klingelton","{FFFFFF}Bitte gebe nun den {C0C0C0}Link{FFFFFF} zum Klingelton unten ein und drücke auf die Taste bestätigen!\n{FF0000}Beachte bitte die Klingelton Kriterien!","Bestätigen","Abbrechen");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Handyladen!");
	    return 1;
	}
}
//Drift
command(drifthelp, playerid, params[])
{
    #pragma unused params
   	new string[240];
	format(string,sizeof(string),
	"{FFFFFF}/startdrift -- {C0C0C0}Startet das Driftrennen.\n{FFFFFF}/exitdrift -- {C0C0C0}Beendet das Driftrennen.");
	ShowPlayerDialog(playerid,DRIFTHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Driftrennen Hilfebox",string,"OK","");
	return 1;
}

command(startdrift,playerid, params[])
{
    #pragma unused params
	new string[128];
    new bot = GetNearestBot(playerid, 5);
	if(GetPVarInt(playerid, "InDrift") == 1)
	{
		if(GetPVarInt(playerid, "StartDrift") == 1)
		{
		    SendClientMessage(playerid,Rot,"Du hast schon ein Driftrennen begonnen!");
		    return 1;
		}
			if(!strcmp(GetName(bot),"Maya",true))
			{
 				DisablePlayerCheckpoint(playerid);
	    		QuestCP[playerid] = 0;
			    ClearChat(playerid);
				new rand = random(sizeof(DriftSpawns));
				new lightss,alarm,doors,bonnet,boot,objective;
			    DriftAuto[playerid] = CreateServerVehicle(0,562,DriftSpawns[rand][0],DriftSpawns[rand][1],DriftSpawns[rand][2],DriftSpawns[rand][3],-1,-1,96);
		     	PutPlayerInVehicle(playerid, DriftAuto[playerid], 0);
			    TuneVehicleRandomly(DriftAuto[playerid]);
			    SendClientMessage(playerid,Weiß,"Dein Driftrennen beginnt in 10 Sekunden!");
			    SendClientMessage(playerid,Gruen,"Viel Glück!");
			    SetPVarInt(playerid,"StartDrift",1);
				MayaBusy = 1;
				format(string, sizeof(string), "Maya: Wir haben einen neuen Teilnehmer:\n Viel Glück {FFFFFF}%s!",GetName(playerid));
				SetPlayerChatBubble(bot,string,0xFFFF00DD,35.0,7020);
				SetTimer("MayaUnBusy1",7151,false);
				SetTimerEx("StartDriftrennen",10733,false,"i",playerid);
				VehicleStarted[DriftAuto[playerid]] = 1;
				SetVehicleParamsEx(DriftAuto[playerid],VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Driftrennen Organisatorin Maya!");
			    return 1;
			}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du befindest dich nicht auf der Driftstrecke!");
	    return 1;
	}
}
command(exitdrift, playerid, params[])
{
    #pragma unused params
   	if(GetPVarInt(playerid, "InDrift") == 1)
	{
	    ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Du hast die Driftstrecke verlassen!");
	    SetPlayerPosEx(playerid,-2353.4905,2571.8323,24.4437);
	    SetPlayerFacingAngle(playerid,188.1033);
	    SetPVarInt(playerid,"InDrift",0);
		SetPlayerVirtualWorld(playerid,0);
		Driftzeit[playerid] = 0;
		Score[playerid] = 0;
    	if(GetPVarInt(playerid, "StartDrift") == 1)
 		{
 	    	DestroyVehicle(DriftAuto[playerid]);
 	    	SetPVarInt(playerid,"StartDrift",0);
 	    	DestroyAllDriftCP(playerid);
 	    	return 1;
 		}
	    return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du befindest dich nicht auf der Driftstrecke!");
	    return 1;
	}
}
//Quest
command(reden, playerid, params[])
{
    #pragma unused params
   	//Den Bot ermitteln
	new bot = GetNearestBot(playerid, 1);
	if(!strcmp(GetName(bot),"Jack",true))
	{
	    if(sStats[playerid][sQuest] > 0)
	    {
	        SendClientMessage(playerid,Rot,"Tut mir leid, ich habe zurzeit keine Zeit mit dir zu reden!");
	        return 1;
	    }
	    ShowPlayerDialog(playerid,JACK1,DIALOG_STYLE_MSGBOX,
		"{FFFF00}Gepspräch mit Jack","{FFFFFF}Willkommen hier auf {FFFF00}Bayside{FFFFFF}.\nIch habe da ein {FFFF00}unschlagbares{FFFFFF} Angebot für dich,\nwelches du nicht ablehnen kannst,du tritts meinen Untergrund Club,\n{FFFF00}Mahnedron{FFFFFF}, bei und kriegst von mir eine kleine Bezahlung für verschiedene {FFFF00}Aufträge{FFFFFF}.\nAlso sind wir im Geschäft? Ich melde mich bei dir per SMS wenn es Neuigkeiten gibt.","OK","");
     	sStats[playerid][sQuest] = 999;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von Jack!");
	    return 1;
	}
    return 1;
}
//Radio (Funkchat)
command(mr, playerid, params[])
{
    #pragma unused params
    return cmd_funk(playerid, params);
}
command(funk, playerid, params[])
{
	new nachricht[128],string[128];
	if(sscanf(params,"s",nachricht))
		return SendClientMessage(playerid,Weiß,"Befehl: /funk [Nachricht]");
	if(CheckPlayerText(playerid,nachricht) == 0) { return 1; }
	if(sStats[playerid][sMitglied] == 2 || sStats[playerid][sLeiter] == 2)
	{
		if(GetPVarInt(playerid, "FDienst") == 0)
		{
			SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
			return 1;
		}
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			if(IsAFW(i) && GetPVarInt(i, "FDienst") == 1)
			{
				format(string, sizeof(string), "[Feuerwehr Funk] %s %s: %s", GetPlayerRank(playerid),GetName(playerid), params);
				SendClientMessage(i, COLOR_LIGHTBLUE, string);
			}
		}
		return 1;
	}
	if(sStats[playerid][sJob] == 1)
	{
		if(GetPVarInt(playerid, "MechaDienst") == 0)
		{
			SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
			return 1;
		}
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			if(sStats[i][sJob] == 1 && GetPVarInt(i, "MechaDienst") == 1)
			{
				format(string, sizeof(string), "[Mechatroniker Funk] %s: %s", GetName(playerid), params);
				SendClientMessage(i, COLOR_LIGHTBLUE, string);
			}
		}
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du kannst den Funkchat nicht benutzen!");
		return 1;
	}
}
//Service
command(service, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sLink] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
	if(sStats[playerid][sHandy] == 0)
		return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(sStats[playerid][sAkku] == 0)
		return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
	if(Aktiv[playerid] == true)
	{
		SendClientMessage(playerid, Rot, "Du telefonierst bereits.");
		return 1;
	}
 		ShowPlayerDialog(playerid, SERVICE, DIALOG_STYLE_LIST, "Öffentlichen Dienst anrufen","{00AA00}1. {FFFFFF}Polizei\n{00AA00}2. {FFFFFF}Feuerwehr\n{00AA00}3. {FFFFFF}Krankenwagen\n{00AA00}4. {FFFFFF}Mechatroniker\n", "Anrufen", "Abbrechen");
    	return 1;
}
//Aufzug
command(aufzug, playerid, params[])
{
    #pragma unused params
	if(IsPlayerInRangeOfPoint(playerid,12,2500.287354, 2771.257568, 17.868746) & sStats[playerid][sAdminlevel] > 0)
	{
	    return cmd_adminaufzug(playerid, params);
 	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe eines Aufzuges!");
	    return 1;
	}
}
//Opengate
command(opengate, playerid, params[])
{
    #pragma unused params
	//Feuerwehr Türen
	if(IsPlayerInRangeOfPoint(playerid,3.0,250.60000610,61.79999924,1002.59997559) || IsPlayerInRangeOfPoint(playerid,3.0,244.89999390,72.59999847,1002.59997559) && IsAFW(playerid))
	{
	    return cmd_opengatef(playerid, params);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0, 478.6498,-17.9577,1000.6797) && sStats[playerid][sJob] == 2)
	{
		return cmd_opengatedj(playerid, params);
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0, -2757.8999, 84.8000, 7.3000) && IsAMS(playerid))
	{
		return cmd_opengatems(playerid, params);
	}
	if(IsPlayerInRangeOfPoint(playerid,12,2500.287354, 2771.257568, 17.868746) & sStats[playerid][sAdminlevel] > 0)
	{
	    return cmd_adminaufzug(playerid, params);
 	}
	if(IsPlayerInRangeOfPoint(playerid,3.5,1558.5902, -1677.7805, 1722.1000) || IsPlayerInRangeOfPoint(playerid,3.5,1553.9800, -1691.5000, 1722.1000) && IsACop(playerid))
	{
	    return cmd_opengatebspd(playerid, params);
	}
	if(IsPlayerInRangeOfPoint(playerid,4.0, 3137.3284,-3015.1643,18.7373) && sStats[playerid][sPremium] > 1)
	{
		return cmd_opengatekirche(playerid, params);
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist an keinem Tor oder an keiner Tür!");
	    return 1;
	}
}
//Pissbefehl
command(strullern, playerid, params[])
{
    #pragma unused params
    return cmd_pee(playerid, params);
}
command(pipi, playerid, params[])
{
    #pragma unused params
    return cmd_pee(playerid, params);
}
command(pissen, playerid, params[])
{
    #pragma unused params
    return cmd_pee(playerid, params);
}
command(pee, playerid, params[])
{
    #pragma unused params
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
    return 1;
}

//Spedition
command(speditionshelp, playerid, params[])
{
	#pragma unused params
	if (sStats[playerid][sJob] != 3)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Speditions GmbH!");
		return 1;
	}

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/produkte -- {C0C0C0}Produkte kaufen/einlagern.\n{FFFFFF}/benzin -- {C0C0C0}Benzin kaufen/einlagern.\n{FFFFFF}/produkteverkaufen -- {C0C0C0}Produkte verkaufen.\n{FFFFFF}/benzinverkaufen -- {C0C0C0}Benzin verkaufen.\n{FFFFFF}/lkwstatus -- {C0C0C0}Aktueller Status der/des Produkte/Benzines.");
	ShowPlayerDialog(playerid,SPHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Speditions Hilfebox",string,"OK","");
	SendClientMessage(playerid,Gelb2,"Info: Die Ölraffinerie befindet sich rechts neben der Golden Gate Bridge.");
	return 1;
}
command(lkwstatus,playerid,params[])
{
	#pragma unused params
	new string[128];
	new vehicleid = GetPlayerVehicleID(playerid);
	new aID = GetVehicleTrailer(vehicleid);
	if (sStats[playerid][sJob] != 3)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Speditions GmbH!");
		return 1;
	}
	if(GetPVarInt(playerid, "SDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(aID == benzintruck[0])
	{
		format(string, sizeof(string), "{FFFFFF}Aktueller Benzinstatus:\n{FFFF00}%dl von %dl Benzin!",PlayerHaul[vehicleid][pBenzin],PlayerHaul[vehicleid][pCapasity]);
		ShowPlayerDialog(playerid,SPSTATUS,DIALOG_STYLE_MSGBOX,"{FFFF00}Aktueller Benzinstatus:",string,"OK","");
		return 1;
	}
	else
	{
		format(string, sizeof(string), "{FFFFFF}Aktueller Produktstatus:\n{FFFF00}%d von %d Produkten!",PlayerHaul[vehicleid][pLoad],PlayerHaul[vehicleid][pCapasity]);
		ShowPlayerDialog(playerid,SPSTATUS,DIALOG_STYLE_MSGBOX,"{FFFF00}Aktueller Produktstatus:",string,"OK","");
		return 1;
	}
}
command(benzin,playerid,params[])
{
	#pragma unused params
	new vehicleid = GetPlayerVehicleID(playerid);
	new aID = GetVehicleTrailer(vehicleid);
	if (sStats[playerid][sJob] != 3)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Speditions GmbH!");
		return 1;
	}
	if(GetPVarInt(playerid, "SDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Benzin") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist gerade schon dabei Benzin zu kaufen!");
	    return 1;
	}
	if(VehicleStarted[GetPlayerVehicleID(playerid)] == 0)
 	{
 	    SendClientMessage(playerid,Rot,"Bitte schalte zuerst den Motor deines Fahrzeuges ein!");
 	    return 1;
 	}
 	if(!IsASpeditionsCar(vehicleid) && !IsATruck(vehicleid))
 	{
  		SendClientMessage(playerid,Rot,"Bitte setze dich in einen Speditions Truck!");
    	return 1;
 	}
	if(IsASpeditionsCar(vehicleid))
	{
 		if(GetVehicleModel(vehicleid) == 403)
   		{
     		if(!IsTrailerAttachedToVehicle(vehicleid))
			{
   				SendClientMessage(playerid,Rot,"Du benötigst einen Petroleum Anhänger um Benzin kaufen/einlagern zu können!");
			    return 1;
			}
		}
		if(aID == benzintruck[0])
		{
  			ClearChat(playerid);
   			SetPVarInt(playerid,"Benzin",1);
 		    SendClientMessage(playerid,Weiß,"Der Wegpunkt zur Benzinstation wurde gesetzt!");
 		    SendClientMessage(playerid,Gelb2,"Info: Um Benzin kaufen oder einladen zu können fahre in den markierten Checkpoint!");
   			SetPlayerCheckpoint(playerid, -2768.7085,1610.1244,13.5983, 5.0);
			QuestCP[playerid] = 997;
			return 1;
		}
		else
		{
			SendClientMessage(playerid,Rot,"Du benötigst einen Petroleum Anhänger um Benzin kaufen/einlagern zu können!");
  			return 1;
		}
	}
	return 1;
}
command(benzinverkaufen,playerid,params[])
{
	#pragma unused params
	new string[128],cashmade;
	new vehicleid = GetPlayerVehicleID(playerid);
	new aID = GetVehicleTrailer(vehicleid);
	if (sStats[playerid][sJob] != 3)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Speditions GmbH!");
		return 1;
	}
	if(GetPVarInt(playerid, "SDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(!IsASpeditionsCar(vehicleid))
 	{
  		SendClientMessage(playerid,Rot,"Bitte setze dich in einen Speditions Transporter!");
    	return 1;
 	}
	if(aID == benzintruck[0])
	{
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du benötigst einen Petroleum Anhänger um Benzin verkaufen zu können!");
	    return 1;
	}
	if(VehicleStarted[GetPlayerVehicleID(playerid)] == 0)
 	{
 	    SendClientMessage(playerid,Rot,"Bitte schalte zuerst den Motor deines Fahrzeuges ein!");
 	    return 1;
 	}
	if(PlayerHaul[vehicleid][pBenzin] == 0)
	{
		SendClientMessage(playerid, Rot, "Du verfügst aktuell über kein Benzin welches du verkaufen kannst!");
		format(string, sizeof(string), "Aktuelles Benzin: %d/%d.", PlayerHaul[vehicleid][pBenzin],PlayerHaul[vehicleid][pCapasity]);
		SendClientMessage(playerid, Gelb2, string);
		return 1;
	}
		if (IsPlayerInRangeOfPoint(playerid,8.5,BizzInfo[0][bEntranceX], BizzInfo[0][bEntranceY], BizzInfo[0][bEntranceZ]))
		{
			for(new l = PlayerHaul[vehicleid][pBenzin]; l > 0; l--)
			{
				if(BizzInfo[0][bProducts] >= BizzInfo[0][bMaxProducts])
				{
					SendClientMessage(playerid, Rot, "Die Tankstelle kann kein weiteres Benzinkaufen, der Benzinstand ist voll!");
					PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
					return 1;
				}
				if(BizzInfo[0][bPriceProd] > BizzInfo[0][bTill])
				{
					SendClientMessage(playerid, Rot, "Das Business hat nicht genug Geld, um das Benzin kaufen zu können!");
					PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
					return 1;
				}
				PlayerHaul[vehicleid][pBenzin]--;
				BizzInfo[0][bProducts]++;
				cashmade = cashmade+BizzInfo[0][bPriceProd];
				GivePlayerEuro(playerid,BizzInfo[0][bPriceProd]);
				BizzInfo[0][bTill] -= BizzInfo[0][bPriceProd];
				if(PlayerHaul[vehicleid][pBenzin] == 0)
				{
				    ClearChat(playerid);
					GameTextForPlayer(playerid, "~r~Der Anhaenger ist leer. Fuelle ihn wieder auf.", 5000, 1);
					format(string, sizeof(string), "Du hast %d$ verdient.", cashmade);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					format(string, sizeof(string), "Aktuelles Benzin: %d/%d.", PlayerHaul[vehicleid][pBenzin],PlayerHaul[vehicleid][pCapasity]);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					return 1;
				}
			}
			SaveBizz();
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, Rot, "Du bist nicht in der nähe der Tankstelle!");
		    return 1;
		}
}
command(produkteverkaufen,playerid,params[])
{
	#pragma unused params
	new string[128],cashmade;
	new vehicleid = GetPlayerVehicleID(playerid);
	if (sStats[playerid][sJob] != 3)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Speditions GmbH!");
		return 1;
	}
	if(GetPVarInt(playerid, "SDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(!IsASpeditionsCar(vehicleid))
 	{
  		SendClientMessage(playerid,Rot,"Bitte setze dich in einen Speditions Transporter!");
    	return 1;
 	}
	if(VehicleStarted[GetPlayerVehicleID(playerid)] == 0)
 	{
 	    SendClientMessage(playerid,Rot,"Bitte schalte zuerst den Motor deines Fahrzeuges ein!");
 	    return 1;
 	}
	if(PlayerHaul[vehicleid][pLoad] == 0)
	{
		SendClientMessage(playerid, Rot, "Du verfügst aktuell über keine Produkte die du verkaufen kannst!");
		format(string, sizeof(string), "Produkte: %d/%d.", PlayerHaul[vehicleid][pLoad],PlayerHaul[vehicleid][pCapasity]);
		SendClientMessage(playerid, Gelb2, string);
		return 1;
	}
 	if(GetVehicleModel(vehicleid) == 403 && !IsTrailerAttachedToVehicle(vehicleid))
	{
 		SendClientMessage(playerid,Rot,"Du benötigst einen Produkt Anhänger um Produkte verkaufen zu können!");
   		return 1;
	}
	if(GetVehicleTrailer(GetPlayerVehicleID(playerid)) == benzintruck[0])
	{
		SendClientMessage(playerid,Rot,"Du benötigst einen Produkt Anhänger um Produkte verkaufen zu können!");
  		return 1;
	}
	for(new i = 0; i < sizeof(BizzInfo); i++)
	{
		if (IsPlayerInRangeOfPoint(playerid,10.0,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			for(new l = PlayerHaul[vehicleid][pLoad]; l > 0; l--)
			{
				if(BizzInfo[i][bProducts] >= BizzInfo[i][bMaxProducts])
				{
					SendClientMessage(playerid, Rot, "Das Business kann keine weiteren Produkte kaufen, die Lager sind voll!");
					PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
					return 1;
				}
				if(BizzInfo[i][bProducts] <= 0)
				{
					SendClientMessage(playerid, Rot, "Das Business kann keine weiteren Produkte kaufen, die Lager sind voll!");
					PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
					BizzInfo[i][bProducts] = 0;
					return 1;
				}
				if(BizzInfo[i][bPriceProd] > BizzInfo[i][bTill])
				{
					SendClientMessage(playerid, Rot, "Das Business hat nicht genug Geld, um die Produkte kaufen zu können!");
					PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
					return 1;
				}
				if (IsPlayerInRangeOfPoint(playerid,5.0,BizzInfo[0][bEntranceX], BizzInfo[0][bEntranceY], BizzInfo[0][bEntranceZ]))
				{
				    SendClientMessage(playerid,Rot,"Die Tankstelle, benötigt keine Produkte, sondern Benzin!");
				    return 1;
				}
				PlayerHaul[vehicleid][pLoad]--;
				BizzInfo[i][bProducts]++;
				cashmade = cashmade+BizzInfo[i][bPriceProd];
				GivePlayerEuro(playerid,BizzInfo[i][bPriceProd]);
				BizzInfo[i][bTill] -= BizzInfo[i][bPriceProd];
				if(PlayerHaul[vehicleid][pLoad] == 0)
				{
				    ClearChat(playerid);
					GameTextForPlayer(playerid, "~r~Der Truck ist leer. Fuelle ihn wieder auf.", 5000, 1);
					format(string, sizeof(string), "Du hast %d$ verdient.", cashmade);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					format(string, sizeof(string), "Produkte: %d/%d.", PlayerHaul[vehicleid][pLoad],PlayerHaul[vehicleid][pCapasity]);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					return 1;
				}
			}
			SaveBizz();
			return 1;
		}
	}
	SendClientMessage(playerid, Rot, "Du bist nicht in der nähe eines Businesses!");
	return 1;
}
command(produkte,playerid,params[])
{
	#pragma unused params
	new string[128],days,mins,hours;
	new vehicleid = GetPlayerVehicleID(playerid);
	new wartezeit = GetPVarInt(playerid, "Cooldown3");
	new restzeit= wartezeit -gettime();
	days = floatround(restzeit / 86400,floatround_floor);
	hours = restzeit - (days * 86400);
	hours = floatround(hours / 3600,floatround_floor);
	mins = restzeit - ( (days * 86400) + (hours * 3600) );
	mins = floatround(mins / 60,floatround_floor);
	if (sStats[playerid][sJob] != 3)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Speditions GmbH!");
		return 1;
	}
	if(GetPVarInt(playerid, "SDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Produkte") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist gerade schon dabei Produkte zu kaufen!");
	    return 1;
	}
	if(VehicleStarted[GetPlayerVehicleID(playerid)] == 0)
 	{
 	    SendClientMessage(playerid,Rot,"Bitte schalte zuerst den Motor deines Fahrzeuges ein!");
 	    return 1;
 	}
 	if(!IsASpeditionsCar(vehicleid))
 	{
  		SendClientMessage(playerid,Rot,"Bitte setze dich in einen Speditions Transporter!");
    	return 1;
 	}
	if(GetPVarInt(playerid, "Cooldown3") != 0)
	{
		format(string, sizeof(string), "Du musst noch %d Minuten warten, bevor du wieder Produkte kaufen kannst!",mins);
		SendClientMessage(playerid,Rot,string);
		return 1;
	}
	if(IsASpeditionsCar(vehicleid))
	{
	 	if(GetVehicleModel(vehicleid) == 440 || GetVehicleModel(vehicleid) == 459 || GetVehicleModel(vehicleid) == 414)
 		{
 		    ClearChat(playerid);
   			SetPVarInt(playerid,"Produkte",1);
 		    SendClientMessage(playerid,Weiß,"Der Wegpunkt zur Produktstation wurde gesetzt!");
 		    SendClientMessage(playerid,Gelb2,"Info: Um Produkte kaufen oder aufladen zu können fahre in den markierten Checkpoint!");
   			SetPlayerCheckpoint(playerid, -2739.0095,1650.0762,13.0409, 5.0);
			QuestCP[playerid] = 998;
			return 1;
  		}
  		else
  		{
  		    if(GetVehicleModel(vehicleid) == 403)
  		    {
  		        if(!IsTrailerAttachedToVehicle(vehicleid))
				{
				    SendClientMessage(playerid,Rot,"Du benötigst einen Produkt Anhänger um Produkte kaufen/einlagern zu können!");
				    return 1;
				}
    			if(GetVehicleTrailer(GetPlayerVehicleID(playerid)) == benzintruck[0])
            	{
			    	SendClientMessage(playerid,Rot,"Du benötigst einen Produkt Anhänger um Produkte kaufen/einlagern zu können!");
				    return 1;
				}
	    		ClearChat(playerid);
	   			SetPVarInt(playerid,"Produkte",1);
	 		    SendClientMessage(playerid,Weiß,"Der Wegpunkt zur Produktstation wurde gesetzt!");
	 		    SendClientMessage(playerid,Gelb2,"Info: Um Produkte kaufen oder aufladen zu können fahre in den markierten Checkpoint!");
	   			SetPlayerCheckpoint(playerid, -2739.0095,1650.0762,13.0409, 5.0);
				QuestCP[playerid] = 998;
				return 1;
  		    }
  		}
	}
	return 1;
}

command(sdienst, playerid,params[])
{
	#pragma unused params
	new string[128];
	if (sStats[playerid][sJob] != 3)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Speditions GmbH!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,1.5,-2366.0803,2388.4983,11.6310))
	{
		if(GetPVarInt(playerid, "SDienst") == 0)
		{
		    SetPVarInt(playerid,"SDienst",1);
		    SetPVarInt(playerid,"SSkin",GetPlayerSkin(playerid));
		    SetPlayerSkin(playerid,50);
			format(string, sizeof(string), "* Speditions Mitarbeiter %s packt seine Sachen ein und zieht sich um.", GetName(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	 	}
	 	else
	 	{
		 	DeletePVar(playerid, "SDienst");
		 	SetPlayerSkin(playerid,GetPVarInt(playerid, "SSkin"));
		 	DeletePVar(playerid,"SSkin");
			format(string, sizeof(string), "* Speditions Mitarbeiter %s packt seine Sachen in den Schrank und zieht sich um.", GetName(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	  	}
	  	}
  	else
  	{
  	    SendClientMessage(playerid,Rot,"Du bist nicht am Speditions Umkleidepunkt!");
  	    return 1;
  	}
	return 1;
}

//Feuerwehrmann/frau
command(befreien, playerid, params[])
{
   	if (!IsAFW(playerid))
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Feuerwehrmann!");
	    return 1;
	}
	if(GetPVarInt(playerid, "FDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	new id;
	if(sscanf(params,"u",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /befreien [ID/Name]");
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst dich nicht selber befreien!");
	    return 1;
	}
	if(!IsPlayerInAnyVehicle(id))
 	{
 	    SendClientMessage(playerid,Rot,"Der Spieler befindet sich in keinem Fahrzeug!");
 	    return 1;
 	}
	if(IsPlayerInAnyVehicle(playerid))
 	{
 	    SendClientMessage(playerid,Rot,"Du kannst den Spieler nicht befreien solange du in/auf einem Fahrzeug bist!");
 	    return 1;
 	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
 	if(GetPVarInt(playerid, "Brecheisen") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du benötigst ein Brecheisen um jemanden befreien zu können!");
	    return 1;
	}
	if(GetPVarInt(id, "Unfall") == 0)
	{
	    SendClientMessage(playerid,Rot,"Der angebene Spieler muss nicht befreit werden!");
	    return 1;
	}
	new Float:XX,Float:XY,Float:XZ;
	GetPlayerPos(playerid, XX, XY, XZ);
	if (ProxDetectorS(3.0, playerid, id))
	{
		new veh = GetPlayerVehicleID(id);
 		if(veh != INVALID_VEHICLE_ID)
		{
		    SetVehicleHealth(veh, 10.0);
		}
		DeletePVar(id,"Unfall");
	 	SendClientMessage(playerid,Weiß,"Du hast den Spieler erfolgreich befreit!");
	 	SendClientMessage(playerid,COLOR_YELLOW,"Für die erfolgreiche Befreiung wird dir für den nächsten Zahltag eine Prämie angerechnet!");
	 	sStats[playerid][sPreamie] += 120;
	 	SendClientMessage(id,Weiß,"Du wurdest erfolgreich von der Feuerwehr befreit!");
	 	PlayerPlaySound(id, 1137, 0.0, 0.0, 0.0);
	 	SetPlayerPosEx(id,XX,XY,XZ);
	 	SetCameraBehindPlayer(id);
	 	SetPlayerHealth(id,25.0);
	 	KillTimer(FeuerTimer[id]);
	 	TogglePlayerControllable(id, true);
		SetPVarInt(DeinFW[playerid], "InFW", 0);
		DeinFW[DeinFW[playerid]] = 0;
		SetPVarInt(playerid, "InFW", 0);
		DeinFW[playerid] = 0;
		DeletePVar(DeinFW[playerid], "FW");
		DeletePVar(DeinFW[playerid], "FW2");
		DeletePVar(playerid, "FW");
		DeletePVar(playerid, "FW2");
 		return 1;
 	}
 	else
  	{
  	    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe des angegeben Spielers!");
  	}
  	return 1;
}
command(closefeuerwehr, playerid ,params[])
{
    #pragma unused params
   	if (!IsAFW(playerid))
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Feuerwehrmann!");
	    return 1;
	}
	if(GetPVarInt(playerid, "FDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(GetPVarInt(playerid, "FW2") == 1)
 	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
		 	if(DeinFW[i] == playerid)
		    {
		    	new string[128];
				new Name[MAX_PLAYER_NAME];
				GetPlayerName(i,Name,sizeof(Name));
				format(string,sizeof(string),"Der Feuerwehrmann %s hat deinen Notrof beendet.",Name);
				SendClientMessage(i,COLOR_GREEN,string);
				SendClientMessage(playerid,COLOR_WHITE,"Du hast den Notruf beendet!");
				SetPVarInt(i, "InFW", 0);
				DeinFW[i] = 0;
		  		SetPVarInt(playerid, "InFW", 0);
				DeinFW[playerid] = 0;
		  		DeletePVar(i, "FW");
		  		DeletePVar(playerid, "FW2");
		  		return 1;
 			}
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du hast keinen Notruf angenommen!");
	    return 1;
	}
	return 1;
}
command(stopfeuerwehr, playerid, params[])
{
    #pragma unused params
    return cmd_closefeuerwehr(playerid, params);
}
command(acceptfeuerwehr, playerid, params[])
{
	new id;
   	if (!IsAFW(playerid))
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Feuerwehrmann!");
	    return 1;
	}
	if(GetPVarInt(playerid, "FDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(sscanf(params,"u",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /acceptfeuerwehr [ID/Name]");
  	if(GetPVarInt(playerid, "FW2") == 1)
		return SendClientMessage(playerid, Rot, "Du kannst nicht mehr als einen Notruf bearbeiten!");
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nicht deinen eigenen Notruf bearbeiten!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(GetPVarInt(id, "FWsend") == 1)
 	{
	    new Name[MAX_PLAYER_NAME], string[128];
	    GetPlayerName(playerid,Name,sizeof(Name));
	    SendClientMessage(playerid,Gruen,"Du kannst nun mit dem Anrufer kommunizieren, benutze /closefeuerwehr um den Anruf zu beenden.");
		format(string,sizeof(string),"Feuerwehrmann %s hat deinen Anruf angenommen. Du kannst nun mit ihm im Chat kommunizieren!",Name);
		SendClientMessage(id,Gruen,string);
		SendClientMessage(playerid,Weiß,"Außerdem wurde ein roter Marker auf die Karte gesetzt wo sich das Unfallopfer befindet! (20 Sekunden)");
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(id, X, Y, Z);
		SetPlayerCheckpoint(playerid,X,Y,Z,4.0);
		SetTimerEx("CheckpointWeg", 20183, false, "d", playerid);
		QuestCP[playerid] = 96;
	 	SetPVarInt(id, "InFW", 1);
	 	SetPVarInt(playerid, "FW2", 1);
		DeinFW[id] = playerid;
		DeinFW[playerid] = id;
		DeletePVar(id, "FWsend");
    }
    else
    {
        SendClientMessage(playerid,Rot,"Der Spieler hat keinen Notruf gesendet!");
        return 1;
	}
		return 1;
}
command(ausruestung, playerid, params[])
{
    #pragma unused params
   	if (!IsAFW(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist kein Feuerwehrmann!");
		return 1;
	}
	if(GetPVarInt(playerid, "FDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,1.2,240.3112,78.7722,1005.0391))
	{
	    ShowPlayerDialog(playerid, FEUERWEHRA, DIALOG_STYLE_LIST, "Feuerwehr Ausrüstung","{00AA00}1. {FFFFFF}Feuerlöscher\n{00AA00}2. {FFFFFF}Kettensäge\n{00AA00}3. {FFFFFF}Schaufel\n{00AA00}4. {FFFFFF}Brecheisen\n", "Nehmen", "Abbrechen");
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Feuerwehr Zentrale am Ausrüstungspunkt!");
	    return 1;
	}
	return 1;
}
command(ausruesten, playerid, params[])
{
    #pragma unused params
   	if (!IsAFW(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist kein Feuerwehrmann!");
		return 1;
	}
	if(GetPVarInt(playerid, "FDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
 	{
 	    SendClientMessage(playerid,Rot,"Du kannst dich nicht in oder auf einem Fahrzeug ausrüsten!");
 	    return 1;
 	}
 	if(IsPlayerNearVehicle(playerid,8,2.5) || IsPlayerNearVehicle(playerid,9,2.5) || IsPlayerNearVehicle(playerid,10,2.5) || IsPlayerNearVehicle(playerid,11,2.5))
  	{
		ShowPlayerDialog(playerid, FEUERWEHRA, DIALOG_STYLE_LIST, "Feuerwehr Ausrüstung","{00AA00}1. {FFFFFF}Feuerlöscher\n{00AA00}2. {FFFFFF}Kettensäge\n{00AA00}3. {FFFFFF}Schaufel\n{00AA00}4. {FFFFFF}Brecheisen\n", "Nehmen", "Abbrechen");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe eines Einsatzwagens!");
	    return 1;
	}
}
command(feuerwehrtueren, playerid, params[])
{
 	#pragma unused params
	return cmd_opengatef(playerid, params);
}

command(opengatef,playerid, params[])
{
   	#pragma unused params
	if (!IsAFW(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist kein Feuerwehrmann!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,250.60000610,61.79999924,1002.59997559) && fwtor1use == 1)
	{
	    SendClientMessage(playerid,Rot,"Die Türen wurden schon geöffnet, bitte warte kurz!");
		return 1;
 	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,244.89999390,72.59999847,1002.59997559) && fwtor2use == 1)
	{
	    SendClientMessage(playerid,Rot,"Die Türen wurden schon geöffnet, bitte warte kurz!");
		return 1;
 	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,250.60000610,61.79999924,1002.59997559))
	{
		MoveDynamicObject(fwtor1,250.60000610,58.79999924,1002.59997559,1);
		MoveDynamicObject(fwtor2,250.60000610,65.80000305,1002.59997559,1);
		SetTimer("Closefwtor1",5279,false);
	    fwtor1use = 1;
	    SendClientMessage(playerid,Gelb,"Du hast die Türen erfolgreich geöffnet, diese schließen automatisch in 5 Sekunden!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,244.89999390,72.59999847,1002.59997559))
	{
		MoveDynamicObject(fwtor3,239.89999390,72.59999847,1002.59997559,1);
		MoveDynamicObject(fwtor4,252.89999390,72.59999847,1002.59997559,1);
		SetTimer("Closefwtor2",3889,false);
	    fwtor2use = 1;
	    SendClientMessage(playerid,Gelb,"Du hast die Türen erfolgreich geöffnet, diese schließen automatisch in 3 Sekunden!");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der Nähe einer Türe!");
	    return 1;
	}
}
command(fspawnchange, playerid, params[])
{
	#pragma unused params
	new string[128], Usage[45];
	if (!IsAFW(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist kein Feuerwehrmann!");
		return 1;
	}
	if(GetPVarInt(playerid, "FDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(sscanf(params, "s",Usage))
	{
 		ClearChat(playerid);
		SendClientMessage(playerid, Weiß, "Befehl: /fspawnchange [Ort]");
		SendClientMessage(playerid, Gelb2, "Verfügbare Orte: Bayside, San-Fierro, Las-Venturas");
		return 1;
	}
	if(strcmp(Usage, "Bayside", true) == 0)
	{
		format(string, sizeof(string), "Du hast deinen Spawn auf Bayside gesetzt.");
		SendClientMessage(playerid, Gelb, string);
		SetPVarInt(playerid,"FeuerSpawn",1);
		SetPVarInt(playerid,"Feuerwehr",1);
		return 1;
	}
	if(strcmp(Usage, "San-Fierro", true) == 0)
	{
		format(string, sizeof(string), "Du hast deinen Spawn auf San-Fierro gesetzt.");
		SendClientMessage(playerid, Gelb, string);
		SetPVarInt(playerid,"FeuerSpawn",2);
		SetPVarInt(playerid,"Feuerwehr",2);
		return 1;
	}
	if(strcmp(Usage, "Las-Venturas", true) == 0)
	{
		format(string, sizeof(string), "Du hast deinen Spawn auf Las-Venturas gesetzt.");
		SendClientMessage(playerid, Gelb, string);
		SetPVarInt(playerid,"FeuerSpawn",3);
		SetPVarInt(playerid,"Feuerwehr",3);
		return 1;
	}
	return 1;
}
command(fdienst, playerid,params[])
{
	new string[128];
	#pragma unused params
   	if (!IsAFW(playerid))
	{
		SendClientMessage(playerid,Rot,"Du bist kein Feuerwehrmann!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,1.2,255.3144,73.6985,1003.6406))
	{
		if(GetPVarInt(playerid, "FDienst") == 0)
		{
	    SetPVarInt(playerid,"FDienst",1);
	    SetPVarInt(playerid,"Pieper",1);
	    FeuerwehrOn ++;
	    SetPVarInt(playerid,"FSkin",GetPlayerSkin(playerid));
	    if(sStats[playerid][sLevel] > 1 && sStats[playerid][sLevel] < 3)
	 	{
	 	    SetPlayerSkin(playerid,277);
	 	}
	 	else
	 	{
	 	    SetPlayerSkin(playerid,278);
	 	}
		format(string, sizeof(string), "* Feuerwehrmann %s beginnt seinen Dienst und zieht sich um.", GetName(playerid));
		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 	}
 	else
 	{
 	    FeuerwehrOn --;
	 	DeletePVar(playerid, "FDienst");
	 	SetPlayerSkin(playerid,GetPVarInt(playerid, "FSkin"));
	 	DeletePVar(playerid,"FSkin");
		format(string, sizeof(string), "* Feuerwehrmann %s beendet seinen Dienst und zieht sich um.", GetName(playerid));
		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  	}
  	}
  	else
  	{
  	    SendClientMessage(playerid,Rot,"Du bist nicht in der Feuerwehr Umkleidekabine!");
  	    return 1;
  	}
	return 1;
}

command(feuerhelp, playerid, params[])
{
    #pragma unused params
   	if (!IsAFW(playerid))
		return SendClientMessage(playerid, Rot, "Du bist kein/e Feuerwehrmann/frau!");

	new string[560];
	format(string,sizeof(string),
	"{FFFFFF}/opengatef -- {C0C0C0}Öffnet die Türen.\n{FFFFFF}/fdienst -- {C0C0C0}Du startest deinen Dienst.\n{FFFFFF}/ausruestung -- {C0C0C0}Ausrüsten in der Zentrale.\n{FFFFFF}/ausruesten -- {C0C0C0}Ausrüsten an einem Einsatzwagen.\n{FFFFFF}/fspawnchange -- {C0C0C0}Spawn verändern.\n{FFFFFF}/befreien -- {C0C0C0}Befreit(rettet) einen anderen Spieler.\n{FFFFFF}/funk -- {C0C0C0}Funkchat.\n{FFFFFF}/d -- {C0C0C0}Staatsfunk.");
	ShowPlayerDialog(playerid,FEUERHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Feuerwehr Hilfebox",string,"OK","");
    return 1;
}
command(feuerwehrhelp, playerid, params[])
{
    #pragma unused params
    return cmd_feuerhelp(playerid, params);
}
command(feuerwehrmannhelp, playerid, params[])
{
    #pragma unused params
    return cmd_feuerhelp(playerid, params);
}
//Waffenhändler
command(waffendealerhelp, playerid, params[])
{
	#pragma unused params
	return cmd_waffenhelp(playerid, params);
}
command(waffenhaendlerhelp, playerid, params[])
{
	#pragma unused params
	return cmd_waffenhelp(playerid, params);
}
command(waffenhelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] != 8)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Waffenhändler!");
		return 1;
	}
	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/waffenverkaufen -- {C0C0C0}Waffen verkaufen an andere Spieler.\n{FFFFFF}/sellmats -- {C0C0C0}Materialien an andere Spieler verkaufen.\n{FFFFFF}/materialpunkt -- {C0C0C0}Zeigt den Standort des Material Abholepunktes.\n\n{FFFFFF}Außerdem können Materialien an das Ammunation verkauft werden.\n");
	ShowPlayerDialog(playerid,WAFFENHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Waffenhändler Hilfebox",string,"OK","");
	return 1;
}
command(materialpunkt, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] != 8)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Waffenhändler!");
		return 1;
	}
	SendClientMessage(playerid,Weiß,"Der Wegpunkt zum Material Abholepunkt wurde gesetzt!");
	QuestCP[playerid] = 97;
	SetPlayerCheckpoint(playerid,-2514.0281,2291.4368,4.9844,2.0);
	return 1;
}
command(acceptinvite, playerid, params[])
{
		#pragma unused params
		new string[128];
		if(InviteTr[playerid] < 1)
  		{
  		    SendClientMessage(playerid,Rot,"Du hast kein Fraktionsangebot erhalten!");
  		    return 1;
  		}
		if(sStats[playerid][sMitglied] != 0 || sStats[playerid][sLeiter] != 0)
		{
			SendClientMessage(playerid,Rot,"Du bist schon in einer Fraktion!");
			return 1;
		}
		if(InviteTr[playerid] > 0)
  		{
    		sStats[playerid][sMitglied] = InviteTr[playerid];
    		sStats[playerid][sFraktion] = InviteTr[playerid];
		    sStats[playerid][sRank] = 1;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SetPlayerFrakSkin(playerid);
		    SetFraktionsSpawn(playerid);
		    SendClientMessage(playerid,Weiß,"Du hast das Fraktionsangebot angenommen!");
   			format(string, sizeof(string), "Spieler %s hat dein Fraktionsangebot angenommen!", GetName(playerid));
			SendClientMessage(InviteId[playerid], Weiß, string);
			InviteId[playerid] = 0;InviteTr[playerid] = 0; InvitePr[playerid] = 0;
			sStats[playerid][sArbeitslosengeld] = 0;
			return 1;
		}
		return 1;
}
command(acceptmats, playerid, params[])
{
	#pragma unused params
	return cmd_acceptmaterialien(playerid, params);
}
command(acceptmaterialien, playerid, params[])
{
		new string[128];
		#pragma unused params
		if(MatsTr[playerid] < 1)
  		{
  		    SendClientMessage(playerid,Rot,"Du hast kein Materialangebot erhalten!");
  		    return 1;
  		}
		if(sStats[playerid][sJob] != 8)
		{
			SendClientMessage(playerid,Rot,"Du bist kein Waffenhändler!");
			return 1;
		}
		if(GetPlayerEuros(playerid) < MatsPr[playerid])
  		{
			format(string, sizeof(string), "Käufer %s hat nicht genug Geld um die Materialien zu bezahlen.", GetName(playerid));
			SendClientMessage(MatsId[playerid], Rot, string);
  		    SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um die Materialien zu bezahlen!");
  			MatsId[playerid] = 0; MatsTr[playerid] = 0; MatsPr[playerid] = 0;
  		    return 1;
  		}
  		if(sStats[playerid][sMats] >= 25000)
  		{
  		    SendClientMessage(playerid,Rot,"Du kannst nicht mehr wie 25.000 Materialien tragen!");
 			format(string, sizeof(string), "Käufer %s kann keine weiteren Materialien tragen.", GetName(playerid));
			SendClientMessage(MatsId[playerid], Rot, string);
			MatsId[playerid] = 0; MatsTr[playerid] = 0; MatsPr[playerid] = 0;
  		    return 1;
  		}
		if(MatsTr[playerid] > 0)
  		{
    		if (ProxDetectorS(5.0, playerid, MatsId[playerid]))
    		{
    		    GivePlayerEuro(playerid,-MatsPr[playerid]);
    		    GivePlayerEuro(MatsId[playerid],MatsPr[playerid]);
    		    sStats[playerid][sMats] +=MatsTr[playerid];
    		    sStats[MatsId[playerid]][sMats] -=MatsTr[playerid];
    		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Du hast erfolgreich die Materialien von Waffenhändler %s abgekauft.", GetName(MatsId[playerid]));
				SendClientMessage(playerid, Weiß, string);
				format(string, sizeof(string), "* %s hat dir deine Materialien erfolgreich abgekauft.", GetName(playerid));
				SendClientMessage(MatsId[playerid], Weiß, string);
				MatsId[playerid] = 0; MatsTr[playerid] = 0; MatsPr[playerid] = 0;
				return 1;
  			}
		}
		SendClientMessage(playerid,Rot,"Du bist zu weit von dem Waffenhändler entfernt!");
		return 1;
}
command(acceptwaffe, playerid, params[])
{
        #pragma unused params
		new string[128];
		if(WaffenAngebot[playerid] < 1)
  		{
  		    SendClientMessage(playerid,Rot,"Du hast kein Waffenangebot erhalten!");
  		    return 1;
  		}
  		if(GetPlayerEuros(playerid) < WaffenPreis[playerid])
  		{
			format(string, sizeof(string), "Käufer %s hat nicht genug Geld um deine angebotene Waffe zu kaufen.", GetName(playerid));
			SendClientMessage(WaffenAngebot[playerid], Rot, string);
  		    SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um dir die Waffe zu kaufen!");
  		    WaffenAngebot[playerid] = 0; Waffe[playerid] = 0; WaffenPreis[playerid] = 0;
  		    PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
  		    DeletePVar(playerid, "Matsverbrauch");
  		    return 1;
  		}
 		if(WaffenAngebot[playerid] > 0)
  		{
			if (ProxDetectorS(5.0, playerid, WaffenAngebot[playerid]))
			{
				GivePlayerEuro(WaffenAngebot[playerid],WaffenPreis[playerid]);
				GivePlayerEuro(playerid,-WaffenPreis[playerid]);
				sStats[WaffenAngebot[playerid]][sMats] -=GetPVarInt(playerid, "Matsverbrauch");
				GivePlayerWeaponEx(playerid,Waffe[playerid],85);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Du hast erfolgreich die Waffe von Waffenhändler %s abgekauft.", GetName(WaffenAngebot[playerid]));
				SendClientMessage(playerid, Weiß, string);
				format(string, sizeof(string), "* %s hat dir deine Waffe erfolgreich abgekauft.", GetName(playerid));
				SendClientMessage(WaffenAngebot[playerid], Weiß, string);
				DeletePVar(playerid, "Matsverbrauch");
				WaffenAngebot[playerid] = 0; Waffe[playerid] = 0; WaffenPreis[playerid] = 0;
				return 1;
			}
		}
		SendClientMessage(playerid,Rot,"Du bist zu weit von dem Waffenhändler entfernt!");
		return 1;
}
command(sellgun, playerid, params[])
{
	#pragma unused params
	return cmd_waffenverkaufen(playerid, params);
}
command(materialienverkaufen, playerid, params[])
{
	#pragma unused params
	return cmd_matsverkaufen(playerid, params);
}
command(sellmats, playerid, params[])
{
	#pragma unused params
	return cmd_matsverkaufen(playerid, params);
}
command(matsverkaufen, playerid, params[])
{
	if(sStats[playerid][sJob] != 8)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Waffenhändler!");
		return 1;
	}
	if(sStats[playerid][sMats] < 1)
	{
		SendClientMessage(playerid,Rot,"Du hast keine Materialien mehr!");
		return 1;
	}
	new string[128], id, mats, preis;
	if(sscanf(params, "udd", id, mats, preis))
	{
	SendClientMessage(playerid, Weiß, "Befehl: /matsverkaufen [Name/ID] [Menge] [Preis]");
	SendClientMessage(playerid, Gelb, "Verkauft Materialien an einen anderen Spieler.");
	return 1;
	}
	if(mats > sStats[playerid][sMats])
	{
		SendClientMessage(playerid,Rot,"Soviele Materialien stehen dir nicht zur Verfügung!");
		return 1;
	}
	if(mats > 5000)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nicht mehr als 5000 Materialien aufeinmal verkaufen!");
	    return 1;
	}
	if(IsPlayerNPC(id))
	{
	    SendClientMessage(playerid,Rot,"Du kannst keine Materialien an NPC/Bots verkaufen!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(preis < 1 || preis > 50000)
	{
	    SendClientMessage(playerid,Rot,"Der Preis kann nicht kleiner als 1 und größer als 50.000 sein!");
	    return 1;
	}
	if(sStats[id][sSpielstunden] < 3)
	{
		SendClientMessage(playerid,Rot,"Der Spieler benötigt mind. 3 Spielstunden bevor du ihm Materialien verkaufen kannst!");
		return 1;
	}
	if(sStats[id][sJob] != 8)
	{
		SendClientMessage(playerid,Rot,"Der angebene Spieler ist kein Waffenhändler!");
		return 1;
	}
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst dir nicht selber Materialien verkaufen!");
	    return 1;
	}
	if(MatsTr[id] > 0)
	{
 		SendClientMessage(playerid,Rot,"Der Spieler hat schon ein Materialienangebot erhalten!");
   		return 1;
	}
	if (ProxDetectorS(5.0, playerid, id) && id != playerid)
	{
		MatsId[id] = playerid; MatsTr[id] = mats; MatsPr[id] = preis;
		format(string, sizeof(string), "* Du bietest %s, {FFFF00}%d{FFFFFF} Materialien für {FFFF00}%d{FFFFFF} an.", GetName(id),mats,preis);
		SendClientMessage(playerid, Weiß, string);
		format(string, sizeof(string), "* %s bietet dir {FFFF00}%d{FFFFFF} Materialien für {FFFF00}%d{FFFFFF} an, tippe /acceptmaterialien um anzunehmen.", GetName(playerid),mats,preis);
		SendClientMessage(id, Weiß, string);
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Der angegebene Spieler ist nicht in deiner Nähe!");
	    return 1;
	}
}
command(waffenverkaufen, playerid, params[])
{
	if(sStats[playerid][sJob] != 8)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Waffenhändler!");
		return 1;
	}
	if(sStats[playerid][sMats] < 1)
	{
		SendClientMessage(playerid,Rot,"Du hast keine Materialien mehr!");
		return 1;
	}
	new id,waffe,preis,string[128];
	new mats = sStats[playerid][sMats];
	if(sscanf(params, "udd", id, waffe, preis))
	{
		SendClientMessage(playerid, Weiß, "Befehl: /waffenverkaufen [Name/ID] [Waffennummer] [Preis]");
		SendClientMessage(playerid, COLOR_GREY, "--------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, Gelb, "{FFFFFF}Verfügbare Waffen: {FFFFFF}[1]{FFFF00}Baseballschlaeger(25) {FFFFFF}[2]{FFFF00}Schaufel(30) {FFFFFF}[3]{FFFF00}Messer(500)");
		SendClientMessage(playerid, Gelb, "{FFFFFF}Verfügbare Waffen: {FFFFFF}[4]{FFFF00}Blumenstrauß(15) {FFFFFF}[5]{FFFF00}SDPistole(100) {FFFFFF}[6]{FFFF00}Deagle(300)");
		SendClientMessage(playerid, Gelb, "{FFFFFF}Verfügbare Waffen: {FFFFFF}[7]{FFFF00}MP5(350) {FFFFFF}[8]{FFFF00}Schrotflinte(450)");
		SendClientMessage(playerid, Gelb, "{FFFFFF}Verfügbare Waffen: {FFFFFF}[9]{FFFF00}AK47(600) {FFFFFF}[10]{FFFF00}M4(600) {FFFFFF}[11]{FFFF00}Rifle(700)");
		SendClientMessage(playerid, COLOR_GREY, "--------------------------------------------------------------------------------------------");
		return 1;
	}
	if(sStats[id][sSpielstunden] < 3)
	{
		SendClientMessage(playerid,Rot,"Der Spieler benötigt mind. 3 Spielstunden bevor du ihm Waffen verkaufen kannst!");
		return 1;
	}
	if(IsPlayerNPC(id))
	{
	    SendClientMessage(playerid,Rot,"Du kannst keine Waffen an NPC/Bots verkaufen!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(preis < 1 || preis > 10000)
	{
	    SendClientMessage(playerid,Rot,"Der Preis kann nicht kleiner als 1 und größer als 10.000 sein!");
	    return 1;
	}
	if(id == playerid)
	{
		if (waffe == 1)
		{
		    if(mats < 25)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,5,1);
		    sStats[playerid][sMats] -= 25;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich einen Baseballschläger hergestellt!");
  		}
		if (waffe == 2)
		{
		    if(mats < 30)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,6,1);
		    sStats[playerid][sMats] -= 30;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine Schaufel hergestellt!");
  		}
		if (waffe == 3)
		{
		    if(mats < 500)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,4,1);
		    sStats[playerid][sMats] -= 500;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich ein Messer hergestellt!");
  		}
		if (waffe == 4)
		{
		    if(mats < 15)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,15,1);
		    sStats[playerid][sMats] -= 15;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich einen Blumenstrauß hergestellt!");
  		}
		if (waffe == 5)
		{
		    if(mats < 100)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,23,85);
		    sStats[playerid][sMats] -= 100;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine SDPistole hergestellt!");
  		}
		if (waffe == 6)
		{
		    if(mats < 300)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,24,85);
		    sStats[playerid][sMats] -= 300;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine Desert Deagle hergestellt!");
  		}
		if (waffe == 7)
		{
		    if(mats < 350)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,29,85);
		    sStats[playerid][sMats] -= 350;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine MP5 hergestellt!");
  		}
		if (waffe == 8)
		{
		    if(mats < 450)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,25,85);
		    sStats[playerid][sMats] -= 450;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine Schrotflinte hergestellt!");
  		}
		if (waffe == 9)
		{
		    if(mats < 600)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,30,85);
		    sStats[playerid][sMats] -= 600;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine AK47 hergestellt!");
  		}
		if (waffe == 10)
		{
		    if(mats < 600)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,31,85);
		    sStats[playerid][sMats] -= 600;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine M4 hergestellt!");
  		}
		if (waffe == 11)
		{
		    if(mats < 700)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    GivePlayerWeaponEx(playerid,33,85);
		    sStats[playerid][sMats] -= 700;
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich eine Rifle hergestellt!");
  		}
  			return 1;
	}
 	if (ProxDetectorS(5.0, playerid, id) && id != playerid)
	{
	if(WaffenAngebot[id] > 0)
	{
 		SendClientMessage(playerid,Rot,"Der Spieler hat schon ein Waffenangebot erhalten!");
   		return 1;
	}
		if (waffe == 1)
		{
		    if(mats < 25)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",25);
		    WaffenAngebot[id] = playerid; Waffe[id] = 5; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, einen {FFFF00}Baseballschläger{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir einen {FFFF00}Baseballschläger {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
		if (waffe == 2)
		{
		    if(mats < 30)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",30);
		    WaffenAngebot[id] = playerid; Waffe[id] = 6; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, eine {FFFF00}Schaufel{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir eine {FFFF00}Schaufel {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
		if (waffe == 3)
		{
		    if(mats < 500)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",500);
		    WaffenAngebot[id] = playerid; Waffe[id] = 4; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, ein {FFFF00}Messer{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir ein {FFFF00}Messer {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
		if (waffe == 4)
		{
		    if(mats < 15)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",15);
		    WaffenAngebot[id] = playerid; Waffe[id] = 14; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, einen {FFFF00}Blumenstrauß{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir einen {FFFF00}Blumenstrauß {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
		if (waffe == 5)
		{
		    if(mats < 100)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",100);
		    WaffenAngebot[id] = playerid; Waffe[id] = 23; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, eine {FFFF00}SDPistole{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir eine {FFFF00}SDPistole {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
			if (waffe == 6)
		{
		    if(mats < 300)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",300);
		    WaffenAngebot[id] = playerid; Waffe[id] = 24; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, eine {FFFF00}Deagle{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir eine {FFFF00}Deagle {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
			if (waffe == 7)
		{
		    if(mats < 350)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",350);
		    WaffenAngebot[id] = playerid; Waffe[id] = 29; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, eine {FFFF00}MP5{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir eine {FFFF00}MP5 {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
			if (waffe == 8)
		{
		    if(mats < 400)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",400);
		    WaffenAngebot[id] = playerid; Waffe[id] = 25; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, eine {FFFF00}Schrotflinte{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir eine {FFFF00}Schrotflinte {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
			if (waffe == 9)
		{
		    if(mats < 600)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",600);
		    WaffenAngebot[id] = playerid; Waffe[id] = 30; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, eine {FFFF00}AK47{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir eine {FFFF00}AK47 {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
			if (waffe == 10)
		{
		    if(mats < 600)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",600);
		    WaffenAngebot[id] = playerid; Waffe[id] = 31; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, eine {FFFF00}M4{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir eine {FFFF00}M4 {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
			if (waffe == 11)
		{
		    if(mats < 700)
		    {
		        SendClientMessage(playerid,Rot,"Du hast nicht genügend Materialien dabei!");
		        return 1;
		    }
		    SetPVarInt(id,"Matsverbrauch",700);
		    WaffenAngebot[id] = playerid; Waffe[id] = 33; WaffenPreis[id] = preis;
   			format(string, sizeof(string), "* Du bietest %s, eine {FFFF00}Rifle{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "* %s bietet dir eine {FFFF00}Rifle {FFFFFF}für {FFFF00}%d{FFFFFF} an, tippe /acceptwaffe um anzunehmen.", GetName(playerid),preis);
			SendClientMessage(id, Weiß, string);
			return 1;
  		}
 	}
	else
	{
	    SendClientMessage(playerid,Rot,"Der angegebene Spieler ist nicht in deiner Nähe!");
	    return 1;
	}
	return 1;
}
command(wjob, playerid, params[])
{
	#pragma unused params
	if(IsPlayerInRangeOfPoint(playerid,1.0,306.4004,-159.1712,999.5938))
	{
		if(sStats[playerid][sLink] == 0)
		{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
		}
		if(sStats[playerid][sPersonalausweis] == 0)
		{
			SendClientMessage(playerid,Rot,"Du benötigst einen Personalausweis!");
			return 1;
		}
		if(sStats[playerid][sWaffenschein] == 0)
		{
			SendClientMessage(playerid,Rot,"Du benötigst einen Waffenschein!");
			return 1;
		}
		if(sStats[playerid][sLevel] < 3)
		{
			SendClientMessage(playerid,Rot,"Du musst mind. Level 3 sein um diesen Job annehmen zu können!");
			return 1;
		}
		if(sStats[playerid][sJob] > 0)
		{
			SendClientMessage(playerid,Rot,"Du hast schon einen Job!");
			return 1;
		}
		if(sStats[playerid][sArbeitslosengeld] > 0)
		{
			SendClientMessage(playerid,Rot,"Du beziehst Arbeitslosengeld du kannst keinen Job annehmen!");
			return 1;
		}
			ShowPlayerDialog(playerid,WAFFEN,DIALOG_STYLE_MSGBOX,"Waffenhändler Job","{00FF00}Job Waffenhändler.\n\n{FFFFFF}Als Waffenhändler hast du die Aufgabe Waffen unter die Leute zu bringen.\nDu kannst Waffen sowie Rüstungen bauen.\nKlicke auf {FF0000}Annehmen{FFFFFF} um den Job anzunehmen.\n\n{FF0000}INFO : Du unterschreibst somit einen 4h Vertrag.","Annehmen","Zurück");
	}
	else
	{
 		SendClientMessage(playerid,Rot,"Du bist nicht im Ammunation bei der Waffenhändler Jobvergabe!");
   		return 1;
	}
	return 1;
}
//Farmer
command(farmerbase,playerid,params[])
{
    #pragma unused params
   	if (sStats[playerid][sJob] != 5)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Farmer!");
		return 1;
	}
	if(GetPVarInt(playerid, "FWegpunkt") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du hast den Wegpunkt zur Farmerbase schon gesetzt!");
	    return 1;
	}
	SendClientMessage(playerid,Weiß,"Du hast den Wegpunkt zur Farmerbase erfolgreich gesetzt!");
	SetPVarInt(playerid,"FWegpunkt",1);
	DisablePlayerCheckpoint(playerid);
	QuestCP[playerid] = 100;
 	SetPlayerCheckpoint(playerid, -44.2902,75.2676,3.1172, 7.0);
 	return 1;
}
command(drogenduenger, playerid, params[])
{
    #pragma unused params
   	if (sStats[playerid][sJob] != 5)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Farmer!");
		return 1;
	}
	if(GetPVarInt(playerid, "FMDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
   	if(GetPVarInt(playerid, "Drogenernten") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist gerade schon dabei Drogen zu ernten!");
	    return 1;
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 532)
	{
	    SendClientMessage(playerid,Rot,"Du sitzt nicht im Mähdrescher!");
	    return 1;
	}
	if(sStats[playerid][sDrogenAngebaut] == 0)
	{
	    SendClientMessage(playerid,Rot,"Du hast noch keine Drogen angebaut!");
	    return 1;
	}
	if(sStats[playerid][sDrogenDuenger] == 0)
 	{
 	    SendClientMessage(playerid,Rot,"Du hast keinen Drogendünger!");
 	    return 1;
  	}
   	if(IsPlayerInRangeOfPoint(playerid,45,-192.9801,3.5907,3.1094))
	{
  		if(sStats[playerid][sDrogenZeit] > 0)
    	{
	    	ClearChat(playerid);
	  		sStats[playerid][sDrogenZeit] = 0;
	  		SendClientMessage(playerid,Weiß,"Das Dünger bewirkt wahre Wunder, die Drogen sind schon Reif für die Ernte!");
	  		SendClientMessage(playerid,Gelb2,"Steige in einen Mähdrescher, und benutze /drogenabbauen um die Drogen abzubauen!");
	  		sStats[playerid][sDrogenDuenger] -= 1;
	  		return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du hast keine Drogen angebaut!");
		    return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Bitte stelle dich in die mitte des linken Feldes!");
	    return 1;
	}
}
command(drogenabbauen,playerid,params[])
{
    #pragma unused params
    new string[128];
   	new days,hours,mins;
	new premiumzeit = sStats[playerid][sDrogenZeit];
	new restzeit= premiumzeit -gettime();
 	days = floatround(restzeit / 86400,floatround_floor);
  	hours = restzeit - (days * 86400);
   	hours = floatround(hours / 3600,floatround_floor);
    mins = restzeit - ( (days * 86400) + (hours * 3600) );
    mins = floatround(mins / 60,floatround_floor);
   	if (sStats[playerid][sJob] != 5)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Farmer!");
		return 1;
	}
	if(GetPVarInt(playerid, "FMDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(sStats[playerid][sDrogenAngebaut] == 0)
	{
	    SendClientMessage(playerid,Rot,"Du hast noch keine Drogen angebaut!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Drogenabbauen") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist gerade schon dabei die Drogen zu ernten!");
	    return 1;
	}
	if(sStats[playerid][sDrogenZeit] > 0)
 	{
  		format(string, sizeof(string), "Du musst noch %d Minuten warten bis du die Drogen ernten kannst!",mins);
   		SendClientMessage(playerid,Rot,string);
   		return 1;
 	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 532)
	{
	    SendClientMessage(playerid,Rot,"Du sitzt nicht im Mähdrescher!");
	    return 1;
	}
	if(VehicleStarted[GetPlayerVehicleID(playerid)] == 0)
 	{
 	    SendClientMessage(playerid,Rot,"Bitte schalte zuerst den Motor deines Fahrzeuges ein!");
 	    return 1;
 	}
		ClearChat(playerid);
		SendClientMessage(playerid,Weiß,"Bitte fahre jetzt die Checkpoints auf dem Feld ab, um die Drogen zu ernten!");
		StartDrogenAbbau(playerid);
		SetPVarInt(playerid,"Drogenabbauen",1);
		return 1;
}

//farmerhelp
command(farmerhelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] != 5)
  		return SendClientMessage(playerid, Rot, "Du bist kein Farmer!");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/drogenanbauen -- {C0C0C0}Pflanzt Drogen auf dem Feld an.\n{FFFFFF}/drogenabbauen -- {C0C0C0}Erntet die reifen Drogen.\n{FFFFFF}/drogenduenger -- {C0C0C0}Düngt die zu wachsenden Drogen.\n{FFFFFF}/farmerbase -- {C0C0C0}Markiert die Farmerbase.\n{FFFFFF}/kuehemelken -- {C0C0C0}Kühe melken.");
	ShowPlayerDialog(playerid,FARMERHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Farmer Hilfebox",string,"OK","");
	return 1;
}

command(kuehemelken,playerid,params[])
{
	#pragma unused params
 	new string[128];
	new wartezeit = GetPVarInt(playerid, "Cooldown5");
	new restzeit= wartezeit -gettime();
	new days,hours,mins;
	days = floatround(restzeit / 86400,floatround_floor);
	hours = restzeit - (days * 86400);
	hours = floatround(hours / 3600,floatround_floor);
	mins = restzeit - ( (days * 86400) + (hours * 3600) );
	mins = floatround(mins / 60,floatround_floor);
	if (sStats[playerid][sJob] != 5)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Farmer!");
		return 1;
	}
	if(GetPVarInt(playerid, "FMDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Kuhmelken") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist gerade schon dabei die Kühe zu melken!");
	    return 1;
	}
 	if(IsPlayerInAnyVehicle(playerid))
 	{
 	    SendClientMessage(playerid,Rot,"Du kannst die Kühe nicht melken während du auf/in einem Fahrzeug sitzt!");
 	    return 1;
 	}
	if(GetPVarInt(playerid, "Cooldown5") != 0)
	{
		format(string, sizeof(string), "Du musst noch %d Minuten warten, bevor du wieder Kühe melken kannst!",mins);
		SendClientMessage(playerid,Rot,string);
		return 1;
	}
	ClearChat(playerid);
	SendClientMessage(playerid,Weiß,"Bitte begebe dich jetzt zu den Kühen in die Checkpoints und fange an zu melken!");
	SendClientMessage(playerid,Gelb2,"Sei dabei gefühlvoll zu den Kühen!");
	StartKuhMelken(playerid);
	SetPVarInt(playerid,"Kuhmelken",1);
	return 1;
}

command(drogenanbauen,playerid,params[])
{
    #pragma unused params
	if (sStats[playerid][sJob] != 5)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Farmer!");
		return 1;
	}
	if(GetPVarInt(playerid, "FMDienst") == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht im Dienst!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Drogenangebaut") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist gerade schon dabei Drogen anzubauen!");
	    return 1;
	}
	if(sStats[playerid][sDrogenAngebaut] == 1)
	{
	    SendClientMessage(playerid,Rot,"Du hast schon Drogen angebaut, bitte ernte diese zuerst (/drogenabbauen)!");
	    return 1;
	}
	if(sStats[playerid][sDrogenSamen] == 0)
 	{
 	    SendClientMessage(playerid,Rot,"Du hast keine Drogensamen dabei, bitte kaufe dir zuerst welche beim Schwarzmarkt!");
 	    return 1;
  	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 532)
	{
	    SendClientMessage(playerid,Rot,"Du sitzt nicht im Mähdrescher!");
	    return 1;
	}
 	if(VehicleStarted[GetPlayerVehicleID(playerid)] == 0)
 	{
 	    SendClientMessage(playerid,Rot,"Bitte schalte zuerst den Motor deines Fahrzeuges ein!");
 	    return 1;
 	}
	ClearChat(playerid);
	SendClientMessage(playerid,Weiß,"Bitte fahre jetzt die Checkpoints auf dem Feld ab, um die Drogensamen einzupflanzen!");
	SendClientMessage(playerid,Gelb2,"Sofern du fertig bist kannste du deine Drogen mit /drogenabbauen ernten!");
	StartDrogenAnbauen(playerid);
	SetPVarInt(playerid,"Drogenanbauen",1);
	sStats[playerid][sDrogenSamen] -= 1;
	return 1;
}
command(fmdienst, playerid,params[])
{
	#pragma unused params
	new string[128];
	if (sStats[playerid][sJob] != 5)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Farmer!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,1.5,-23.4511,74.4178,3.1096))
	{
		if(GetPVarInt(playerid, "FMDienst") == 0)
		{
		    SetPVarInt(playerid,"FMDienst",1);
		    SetPVarInt(playerid,"FMSkin",GetPlayerSkin(playerid));
		    SetPlayerSkin(playerid,161);
			format(string, sizeof(string), "* Farmer %s packt seine Sachen ein und zieht sich um.", GetName(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	 	}
	 	else
	 	{
		 	DeletePVar(playerid, "FMDienst");
		 	SetPlayerSkin(playerid,GetPVarInt(playerid, "FMSkin"));
		 	DeletePVar(playerid,"FMSkin");
			format(string, sizeof(string), "* Farmer %s packt seine Sachen in den Schrank und zieht sich um.", GetName(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	  	}
	  	}
  	else
  	{
  	    SendClientMessage(playerid,Rot,"Du bist nicht am Farmer Umkleidepunkt!");
  	    return 1;
  	}
	return 1;
}
//Mechatroniker
command(mdienst, playerid,params[])
{
	new string[128];
	#pragma unused params
	if (sStats[playerid][sJob] != 1)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Mechatroniker!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,1.5,-2507.2278,2367.7224,4.9831))
	{
		if(GetPVarInt(playerid, "MechaDienst") == 0)
		{
		    SetPVarInt(playerid,"MechaDienst",1);
		    SetPVarInt(playerid,"MSkin",GetPlayerSkin(playerid));
		    SetPlayerSkin(playerid,16);
		    MechaOn += 1;
			format(string, sizeof(string), "* Mechatroniker %s packt seine Sachen ein und zieht sich um.", GetName(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	 	}
	 	else
	 	{
		 	DeletePVar(playerid, "MechaDienst");
		 	SetPlayerSkin(playerid,GetPVarInt(playerid, "MSkin"));
		 	DeletePVar(playerid,"MSkin");
		 	MechaOn -= 1;
			format(string, sizeof(string), "* Mechatroniker %s packt seine Sachen in den Schrank und zieht sich um.", GetName(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	  	}
	  	}
  	else
  	{
  	    SendClientMessage(playerid,Rot,"Du bist nicht am Mechatroniker Umkleidepunkt!");
  	    return 1;
  	}
	return 1;
}
//DJ Befehle
command(djhelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] != 2)
  		return SendClientMessage(playerid, Rot, "Du bist kein DJ!");

	new string[460];
	format(string,sizeof(string),
	"{FFFFFF}/djpult -- {C0C0C0}Baut dein Mischpult auf.\n{FFFFFF}/djpultab -- {C0C0C0}Baut dein Mischpult ab.\n{FFFFFF}/musik -- {C0C0C0}Startet die Musik(wählbar).\n{FFFFFF}/djdienst -- {C0C0C0}Du startest deinen DJ Dienst.\n");
	ShowPlayerDialog(playerid,DJHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}DJ Hilfebox",string,"OK","");
	SendClientMessage(playerid,Gelb2,"Info: Die DJ Umkleidekabine befindet sich im Caligullas Club.");
	return 1;
}
command(djdienst, playerid,params[])
{
	new string[128];
	#pragma unused params
	if (sStats[playerid][sJob] != 2)
	{
		SendClientMessage(playerid,Rot,"Du bist kein DJ!");
		return 1;
	}
	if(GetPVarInt(playerid,"Maske") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du musst zuerst deine Maske ausziehen bevor du deinen Dienst als DJ startest!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,1.5,476.4065,-18.5188,1003.6953))
	{
		if(GetPVarInt(playerid, "DJDienst") == 0)
		{
		    SetPVarInt(playerid,"DJDienst",1);
		    SetPVarInt(playerid,"DJSkin",GetPlayerSkin(playerid));
		    SetPlayerSkin(playerid,83);
			format(string, sizeof(string), "* DJ %s packt seine Sachen ein und zieht sich um.", GetName(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	 	}
	 	else
	 	{
		 	DeletePVar(playerid, "DJDienst");
		 	SetPlayerSkin(playerid,GetPVarInt(playerid, "DJSkin"));
		 	DeletePVar(playerid,"DJSkin");
			format(string, sizeof(string), "* DJ %s packt seine Sachen in den Schrank und zieht sich um.", GetName(playerid));
			ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	  	}
	  	}
  	else
  	{
  	    SendClientMessage(playerid,Rot,"Du bist nicht in der DJ Umkleidekabine!");
  	    return 1;
  	}
	return 1;
}
command(musik, playerid,params[])
{
    #pragma unused params
	if (sStats[playerid][sJob] != 2)
	{
		SendClientMessage(playerid,Rot,"Du bist kein DJ!");
		return 1;
	}
	if(GetPVarInt(playerid, "DJPult") < 1)
	{
		SendClientMessage(playerid,Rot,"Du musst zuerst dein Mischpult aufbauen!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,MischpultX[playerid],MischpultY[playerid],MischpultZ[playerid]))
	{
	ClearChat(playerid);
	SetPVarInt(playerid,"DJMusik",1);
	TogglePlayerControllable(playerid, false);
	SetCameraBehindPlayer(playerid);
	Delete3DTextLabel(DJLabel[playerid]);
	SetDJStatus(playerid);
	ShowPlayerDialog(playerid, DJSONGS, DIALOG_STYLE_LIST, "Was möchtest du abspielen?","{00AA00}1. {FFFFFF}Technobase.fm\n{00AA00}2. {FFFFFF}Housetime.fm\n{00AA00}3. {FFFFFF}Coretime.fm\n{00AA00}4. {FFFFFF}Clubtime.fm\n{00AA00}5. {FFFFFF}Trancebase.fm\n{00AA00}6. {FFFFFF}Hardbase.fm\n{00AA00}7. {FFFFFF}Ausschalten", "Abspielen", "Abbrechen");
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht an deinem Mischpult!");
	    return 1;
	}
	return 1;
}
command(musik2, playerid,params[])
{
    #pragma unused params
	if (sStats[playerid][sJob] != 2)
	{
		SendClientMessage(playerid,Rot,"Du bist kein DJ!");
		return 1;
	}
	if(GetPVarInt(playerid, "DJDienst") == 0)
	{
		SendClientMessage(playerid,Rot,"Du musst erst den Dienst als DJ starten (/djdienst)!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,3.0,-2477.5090,2000.7181,14.1531))
	{
		ClearChat(playerid);
		TogglePlayerControllable(playerid, false);
		SetCameraBehindPlayer(playerid);
		SetPVarInt(playerid,"DJMusik",1);
		Delete3DTextLabel(DJLabel[playerid]);
		SetDJStatus(playerid);
		ShowPlayerDialog(playerid, DJSONGS2, DIALOG_STYLE_LIST, "Was möchtest du abspielen?","{00AA00}1. {FFFFFF}Technobase.fm\n{00AA00}2. {FFFFFF}Housetime.fm\n{00AA00}3. {FFFFFF}Coretime.fm\n{00AA00}4. {FFFFFF}Clubtime.fm\n{00AA00}5. {FFFFFF}Trancebase.fm\n{00AA00}6. {FFFFFF}Hardbase.fm\n{00AA00}7. {FFFFFF}Ausschalten", "Abspielen", "Abbrechen");
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht an deinem Mischpult!");
	    return 1;
	}
	return 1;
}
command(djpultab, playerid,params[])
{
    #pragma unused params
	if (sStats[playerid][sJob] != 2)
	{
		SendClientMessage(playerid,Rot,"Du bist kein DJ!");
		return 1;
	}
	if(GetPVarInt(playerid, "DJPult") < 1)
	{
		SendClientMessage(playerid,Rot,"Du hast dein Mischpult noch nicht aufgebaut!");
		return 1;
	}
	if(IsPlayerInZonee(playerid,-2580.811, 1669.936, -2008.595, 2113.696))
	{
	    SendClientMessage(playerid,Rot,"Du kannst dein Mischpult nicht auf der Premiuminsel aufbauen!");
	    return 1;
	}
 	ClearChat(playerid);
  	UnSetDJStatus(playerid);
	DestroyDynamicObject(Mischpult[playerid]);
	DestroyDynamicObject(Tisch[playerid]);
	TogglePlayerControllable(playerid, true);
	DeletePVar(playerid, "DJPult");
	DeletePVar(playerid, "DJMusik");
	SendClientMessage(playerid,Weiß,"Du hast dein Mischpult erfolgreich abgebaut!");
	KillTimer(DJTimer[playerid]);
	StopAudioStreamForPlayer(playerid);
 	for(new p = 0; p < MAX_PLAYERS; p++)
 	{
		if(IsPlayerConnected(p) && sStats[playerid][sTutorial] == 1)
		{
			if(GetPVarInt(p, "ListenToDJ") == 1)
			{
				StopAudioStreamForPlayer(p);
				SetPVarInt(playerid,"ListenToDJ",0);
 			}
		}
	}
	return 1;
}
command(djpult, playerid,params[])
{
    #pragma unused params
   	if(GetPVarInt(playerid, "DJPult") == 1)
	{
		SendClientMessage(playerid,Rot,"Du hast dein Mischpult schon aufgebaut!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,25.0,-2477.5090,2000.7181,14.1531) || IsPlayerInRangeOfPoint(playerid,25.0,-2284.1167,1948.9568,1.7533))
	{
	    SendClientMessage(playerid,Rot,"Du kannst dein Mischpult hier nicht aufbauen!");
	    return 1;
	}
 	for(new p = 0; p < MAX_PLAYERS; p++)
 	{
   	if(IsPlayerInRangeOfPoint(playerid,31.0,MischpultX[p],MischpultY[p],MischpultZ[p]) && GetPVarInt(p, "DJPult") == 1)
	{
	    SendClientMessage(playerid,Rot,"Du kannst dein Mischpult hier nicht aufbauen, ein anderer DJ legt schon in unmittelbarer Nähe auf!");
	    return 1;
 	}
 	}
	if (sStats[playerid][sJob] != 2)
	{
		SendClientMessage(playerid,Rot,"Du bist kein DJ!");
		return 1;
	}
	if(GetPlayerInterior(playerid) > 0)
	{
		SendClientMessage(playerid,Rot,"Du kannst dein Mischpult nicht in Gebäuden aufbauen!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid,Rot,"Du kannst dein Mischpult nicht in oder auf einem Fahrzeug aufbauen!");
		return 1;
	}
	if(GetPVarInt(playerid, "DJDienst") == 0)
	{
		SendClientMessage(playerid,Rot,"Du musst erst den Dienst als DJ starten (/djdienst)!");
		return 1;
	}
	new Float:A;
	SetPVarInt(playerid,"ListenToDJ", 0);
	GetPlayerFacingAngle(playerid,A);
	GetPlayerPos(playerid, MischpultX[playerid], MischpultY[playerid], MischpultZ[playerid]);
	SetPVarInt(playerid,"DJPult",1);
	Mischpult[playerid] = CreateDynamicObject(14820, MischpultX[playerid]+0.8, MischpultY[playerid]+0.1, MischpultZ[playerid]-0.1, 0, 0, A);
	Tisch[playerid] = CreateDynamicObject(2637, MischpultX[playerid]+0.8, MischpultY[playerid]+0.1, MischpultZ[playerid]-0.6, 1, 0, A);
	SendClientMessage(playerid,Weiß,"Du hast dein Mischpult erfolgreich aufgestellt!");
	SendClientMessage(playerid,Weiß,"Mit /musik kannst du deine Musik auswählen!");
	SendClientMessage(playerid,Gelb,"Info: Benutze /djpultab um es abzubauen!");
	DJTimer[playerid] = SetTimerEx("DJGeld", 300167, true, "d", playerid);
	return 1;
}
//Hotel
command(auschecken, playerid, params[])
{
    #pragma unused params
    new string[128];
	if(IsPlayerConnected(playerid))
	{
		if (sStats[playerid][sHotel] < 1)
		{
			SendClientMessage(playerid,Rot,"Du verfügst momentan über kein Hotelzimmer!");
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid,1.5,2217.4265,-1147.0909,1025.7969))
		{
  			ClearChat(playerid);
			sStats[playerid][sHotel] = 0;
			Hotelzimmer += 1;
			SendClientMessage(playerid, Weiß,"Rezeption: Vielen Dank für Ihren Aufenthalt!");
			SendClientMessage(playerid, Weiß,"Rezeption: Sie haben erfolgreich {0C9BCB}ausgecheckt!");
			//Hotel 3D text updaten
			format(string, sizeof(string), "[* {FFFFFF}Hotel {0C9BCB} *]\n[* {FFFFFF}Freie Zimmer %d von 8{0C9BCB} *]", Hotelzimmer);
			UpdateDynamic3DTextLabelText(IDsafeLabels[22], 0x0C9BCBFF, string);
			SaveSonstiges();
		}
		else
		{
			SendClientMessage(playerid, Rot, "Du bist nicht im Hotel an der Rezeption!");
			return 1;
		}
	}
	return 1;
 }
command(einchecken, playerid, params[])
{
    #pragma unused params
    new string[128];
	if(IsPlayerConnected(playerid))
	{
		if (sStats[playerid][sHotel] > 0)
		{
			SendClientMessage(playerid,Rot,"Du hast schon ein Hotelzimmer!");
			return 1;
		}
		if (sStats[playerid][sPersonalausweis] == 0)
		{
			SendClientMessage(playerid,Rot,"Du hast keinen Personalausweis!");
			return 1;
		}
		if (sStats[playerid][sHaus] != 255)
		{
			SendClientMessage(playerid,Rot,"Du wohnst schon in einem Haus!");
			return 1;
		}
		if (sStats[playerid][sMieter] != 0)
		{
			SendClientMessage(playerid,Rot,"Du wohnst schon in einem Haus!");
			return 1;
		}
		if(Hotelzimmer < 1)
		{
		    SendClientMessage(playerid,Rot,"Tut mir leid, es sind leider keine Hotelzimmer mehr frei!");
		    return 1;
		}
		new geld;
		geld = GetPlayerEuros(playerid);
		if(geld < 150)
			return SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (150)!");
				if(IsPlayerInRangeOfPoint(playerid,1.5,2217.4265,-1147.0909,1025.7969))
				{
				    ClearChat(playerid);
					GivePlayerEuro(playerid, -150);
					sStats[playerid][sHotel] = Hotelzimmer;
					Hotelzimmer -=1;
					SendClientMessage(playerid, Weiß,"Rezeption: Herzlichen Glückwunsch, du hast erfolgreich ein Hotelzimmer gemietet!");
					SendClientMessage(playerid, Weiß,"Rezeption: Du bezahlst absofort {0C9BCB}250{FFFFFF} pro Zahltag und {0C9BCB}150{FFFFFF} einmalig fürs einchecken!");
					SendClientMessage(playerid, Gelb2,"Information: Kein Interesse mehr am Hotelzimmer? /auschecken um auszuchecken");
					//Hotel 3D text updaten
					format(string, sizeof(string), "[* {FFFFFF}Hotel {0C9BCB} *]\n[* {FFFFFF}Freie Zimmer %d von 8{0C9BCB} *]", Hotelzimmer);
					UpdateDynamic3DTextLabelText(IDsafeLabels[22], 0x0C9BCBFF, string);
					SaveSonstiges();
				}
				else
				{
					SendClientMessage(playerid, Rot, "Du bist nicht im Hotel an der Rezeption!");
					return 1;
				}
	}
	return 1;
}
//Mp3Player
command(mp3, playerid, params[])
{
    #pragma unused params
	if (sStats[playerid][sMP3Player] < 1)
	{
		SendClientMessage(playerid, Rot,"Du hast keinen MP3 Player!");
		return 1;
	}
	if(sStats[playerid][sLink] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
 	{
		SendClientMessage(playerid,Rot,"Du kannst deinen MP3 Player nicht benutzen während du in/auf einem Fahrzeug bist!");
		return 1;
 	}
	ShowPlayerDialog(playerid, MP3, DIALOG_STYLE_LIST, "MP3 Player","{00AA00}1. {FFFFFF}Technobase.fm\n{00AA00}2. {FFFFFF}Housetime.fm\n{00AA00}3. {FFFFFF}Coretime.fm\n{00AA00}4. {FFFFFF}Clubtime.fm\n{00AA00}5. {FFFFFF}Trancebase.fm\n{00AA00}6. {FFFFFF}Hardbase.fm\n{00AA00}7. {FFFFFF}Ausschalten", "Auswählen", "Abbrechen");
    return 1;
}
//24/7 Laden ausrauben
command(rob247, playerid, params[])
{
	#pragma unused params
 	new string[128];
	new weapon;
	new ammo;
	new bot = GetNearestBot(playerid, 5);
	new player = GetNearestPlayer(playerid, 10);
	GetPlayerWeaponData(playerid, 10, weapon, ammo);
	if(weapon > 1 && ammo > 1)
	{
		SendClientMessage(playerid, Rot, "Du brauchst eine Waffe um den 24/7 Shop auszurauben!");
		return 1;
	}
	if ((norob))
	{
		SendClientMessage(playerid, Rot, "Die Ausraub Systeme wurden von einem Administrator deaktiviert!");
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,1.5, -28.0107,-185.1465,1003.5469))
	{
	}
	else
	{
		SendClientMessage(playerid, Rot,"Du bist nicht im 24/7 Shop bei der Kasse!");
		return 1;
	}
	if(PolizistenOn < 3)
	{
		SendClientMessage(playerid, Rot, "Es sind nicht genug Sicherheitskräfte online!");
		return 1;
	}
	if(IsAStaat(player))
	{
	    SendClientMessage(playerid, Rot,"Du kannst den 24/7 Laden nicht ausrauben solange ein Polizist in deiner nähe ist!");
	    return 1;
	}
	if(GetPVarInt(playerid, "BankRaub") == 1)
	{
	    SendClientMessage(playerid, Rot,"Du kannst den 24/7 Laden nicht ausrauben du hast schon die Bank ausgeraubt!");
	    return 1;
	}
	if(IsAFW(playerid))
	{
		SendClientMessage(playerid, Rot,"Als Feuerwehrmann/frau kannst du diesen Laden nicht ausrauben!");
		return 1;
	}
	if (!IsAGang(playerid))
	{
		SendClientMessage(playerid, Rot,"Du kannst diesen Laden nicht ausrauben!");
		return 1;
	}
	if (wait == 1)
	{
		SendClientMessage(playerid, Rot,"Dieser Laden wurde schon ausgeraubt probiere es später nocheinmal!");
		return 1;
	}
	if (robbing == 1)
	{
		SendClientMessage(playerid, Rot,"Der Laden wird gerade schon ausgeraubt!");
		return 1;
	}
	if (sStats[playerid][sWanteds] > 0)
	{
		SendClientMessage(playerid, Rot,"Du wirst schon von der Polizei gesucht, du kannst den Laden nicht ausrauben!");
		return 1;
	}
	if(sStats[playerid][sLink] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
	if(sStats[playerid][sLevel] < 3)
	{
		SendClientMessage(playerid,Rot,"Du musst mind. Level 3 sein um den 24/7 Laden ausrauben zu können!");
		return 1;
	}
 	if(BizzInfo[1][bTill] < 5000)
	{
	    SendClientMessage(playerid,Rot,"Du kannst den 24/7 Laden nicht ausrauben, die Kasse ist leer!");
	    return 1;
	}
		if(StoreRobed[playerid] == 0)
		{
		if(!strcmp(GetName(bot),"Martin",true))
 		{
   			ClearAnimations(bot);
			sStats[playerid][sWanteds] += 2;
			SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
			format(string, sizeof(string), "Überwachungskamera: Der Spieler %s[%d] beginnt einen 24/7 Laden Überfall!", GetName(playerid), playerid);
			SendRadioMessage(1, COLOR_BLUE, string);
			ClearChat(playerid);
			SendClientMessage(playerid, Rot,"--------------------------------------------------------------------------------");
			SendClientMessage(playerid, Weiß,"{FFFFFF}Die Sicherheits-Kameras haben dich entdeckt , die Polizei wurde alarmiert!");
			SendClientMessage(playerid, Weiß,"{FFFFFF}Du musst {FF0000}1 Minute{FFFFFF} im Laden bleiben , um das Geld zu erhalten");
			SendClientMessage(playerid, Rot,"--------------------------------------------------------------------------------");
			Robber[playerid] = 1;
			robbing = 1;
			StoreRobed[playerid] =1;
			SetTimerEx("ClearPlayer", 8311, false, "d", playerid);
			rob = SetTimer("StoreRob1",20047,true);
			new Float:xP,Float:xY,Float:xZ;
			GetPlayerPos(playerid, xP, xY, xZ);
		 	for(new p = 0; p < MAX_PLAYERS; p++)
		 	{
					if(IsPlayerInRangeOfPoint(p,30,xP,xY,xZ))
					{
						PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/alarm.mp3");

					}
   				}
					ApplyAnimation(playerid, "ON_LOOKERS","point_loop", 4.0, 1, 1, 1, 1, 0, 1);
					ApplyAnimation(bot, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 0, 0, 1, 0, 1);
					SetPlayerChatBubble(bot,"Martin: Bitte töten Sie mich nicht ich gib ihnen das Geld warten Sie kurz!",Gelb,35.0,11000);
		}
		}
		else
		{
			SendClientMessage(playerid, Rot,"Du bist nicht im 24/7 Shop bei der Kasse!");
			return 1;
		}
		return 1;
 }
//BSN DriveIN
command(drivein, playerid, params[])
{
	#pragma unused params
	new Float:Leben;
	GetPlayerHealth(playerid,Leben);
		if(GetPVarInt(playerid, "Bestellung") > 0)
            return SendClientMessage(playerid,Rot,"Du hast schon eine Bestellung aufgeben bitte hole diese erst ab!");
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, Rot, "Du bist in keinem Fahrzeug!");
		if(Leben >= 100)
	 		return SendClientMessage(playerid,Rot,"Du hast schon genug gegessen!");
        if(BizzInfo[7][bProducts] < 15)
			return SendClientMessage(playerid,Rot,"Das Burger Shot Lager ist leer!");
		if(IsPlayerInRangeOfPoint(playerid,4,-2460.5554,2231.0063,4.8438))
		{
				ShowPlayerDialog(playerid, BSN, DIALOG_STYLE_LIST, "Burger Shot Nord DriveIn","{00AA00}1. {FFFFFF}KidsMenü\n{00AA00}2. {FFFFFF}MaxiMenü\n{00AA00}3. {FFFFFF}CheeseburgerOhneCheese\n{00AA00}4. {FFFFFF}Salat\n{00AA00}5. {FFFFFF}KingMenü", "Bestellen", "Abbrechen");
				SetPVarInt(playerid, "Bestellung", 1);
				SetPVarInt(playerid, "Bestellungw", 0);
				QuestCP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				return 1;
		}
			else return SendClientMessage(playerid,Rot,"Du bist nicht beim DriveIn, beim Burger Shot Nord!");
}
//Handy
command(auflegen, playerid, params[])
{
	#pragma unused params
	return cmd_hangup(playerid, params);
}
command(hangup, playerid, params[])
{
    #pragma unused params
	new caller = Anderer[playerid];
	if(sStats[playerid][sHandy] == 0)
		return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(Aktiv[playerid] == true)
	{
		SendClientMessage(playerid,Weiß, "Du hast das Telefonat beendet.");
  		Anderer[playerid] = -1;
    	wirdangerufen[playerid] = -1;
     	Aktiv[playerid] = false;
      	ClearHandy(playerid);
       	Mobile[playerid] = 255;
	if(caller > 0)
	{
		Mobile[caller] = 255;
 		Aktiv[caller] = false;
  		Anderer[caller] = -1;
   		SendClientMessage(caller,Weiß, "Der Gesprächspartner hat das Telefonat beendet.");
	   	ClearHandy(caller);
    }
    	return 1;
    }
    	else return SendClientMessage(playerid,Rot,"Du befindest dich in keinem Telefonat!");
}
command(annehmen, playerid, params[])
{
	#pragma unused params
	return cmd_pickup(playerid, params);
}

command(pickup, playerid, params[])
{
            #pragma unused params
			new string[128];
			if(sStats[playerid][sHandy] == 0)
	  			return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
			if(sStats[playerid][sAkku] == 0)
  				return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
			if(IsPlayerInAnyVehicle(playerid))
  				return SendClientMessage(playerid, Rot, "Du kannst in/auf einem Fahrzeug nicht telefonieren!");
  			if(PlayerTied[playerid] > 0)
        		return SendClientMessage(playerid, Rot, "Du kannst dein Handy nicht benutzen, während du gefesselt bist!");
            if (GetPVarInt(playerid, "Cuffed") == 1)
                return SendClientMessage(playerid, Rot, "Du kannst dein Handy nicht benutzen, während du Handschellen an hast!");
			if(Aktiv[playerid] == true)
			{
				SendClientMessage(playerid, Rot, "Du telefonierst bereits.");
				return 1;
			}
 			if(wirdangerufen[playerid] == -1)
			{
				SendClientMessage(playerid, Rot, "Du wurdest nicht angerufen.");
				return 1;
			}
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
        		if(wirdangerufen[playerid] >= 0)
        		{
        		    if(i == Mobile[playerid])
        		    {
          				Anderer[playerid] = wirdangerufen[playerid];
		                Anderer[wirdangerufen[playerid]] = playerid;
		                wirdangerufen[playerid] = 0;
		                Mobile[i] = playerid;
        		        Aktiv[playerid] = true;
        		        Aktiv[i] = true;
        		        DeletePVar(i, "Anrufen");
        		        DeletePVar(playerid, "Anrufen");
						SendClientMessage(i, Weiß, "Dein Anruf wurde angenommen, du kannst jetzt im Chat telefonieren. Tippe /auflegen um aufzulegen!");
  						if(sStats[i][sVertrag] == 0)
        				{
         				sStats[i][sGuthaben] -= 5;
          				GameTextForPlayer(i, "~w~Guthaben ~r~-5", 3000, 1);
           				}
						new uhrname[20];
						if(sStats[playerid][sHandy] == 7) { format(uhrname, sizeof(uhrname), "iPhone"); }
						else if(sStats[playerid][sHandy] == 6) { format(uhrname, sizeof(uhrname), "Samsung Galaxy S3"); }
						else if(sStats[playerid][sHandy] == 5) { format(uhrname, sizeof(uhrname), "Motorola Q9h"); }
			  			else if(sStats[playerid][sHandy] == 4) { format(uhrname, sizeof(uhrname), "Sony Ericsson C905"); }
			  			else if(sStats[playerid][sHandy] == 3) { format(uhrname, sizeof(uhrname), "Nokia N95"); }
			            else if(sStats[playerid][sHandy] == 2) { format(uhrname, sizeof(uhrname), "Nokia 6500"); }
						else { format(uhrname, sizeof(uhrname), "Nokia 3330"); }
						SetHandy(playerid);
						StopRingTone(playerid);
						format(string, sizeof(string), "* %s geht an sein %s.", GetName(playerid), uhrname);
						ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						KillTimer(anruftimer[playerid]);
						return 1;
					}
				}

			}
			return 1;
	}
command(klingelton, playerid, params[])
{
	#pragma unused params
	return cmd_ringtone(playerid, params);
}
command(ringtone, playerid, params[])
{
        #pragma unused params
		if(IsPlayerInRangeOfPoint(playerid,2,1012.8786,50.7204,55.3221))
		{
			if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
			if(sStats[playerid][sPremium] == 0)
		  		return SendClientMessage(playerid, Rot, "Du hast kein Premium!");
			if(sStats[playerid][sHandy] == 0)
		  		return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
			if(sStats[playerid][sAkku] == 0)
	  			return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");

			SendClientMessage(playerid,Gelb,"Info: Jeder Klingelton kostet 1000!");
			ShowPlayerDialog(playerid, HANDY6, DIALOG_STYLE_LIST, "Klingelton Auswahl","{00AA00}1. {FFFFFF}Higher\n{00AA00}2. {FFFFFF}I'am On You\n{00AA00}3. {FFFFFF}Dynamite\n{00AA00}4. {FFFFFF}Never Say Never\n{00AA00}5. {FFFFFF}Nossa Nossa Assim Voce Me Mata\n{00AA00}6. {FFFFFF}Welcome to St'Tropez\n{00AA00}7. {FFFFFF}Knall diese Schlampe", "Kaufen", "Abbrechen");
			return 1;
		}
		else return SendClientMessage(playerid,Rot,"Du bist nicht im Handy Laden!");
}
command(call, playerid, params[])
{
	new nummer,string[150];
	if(sscanf(params,"d",nummer))return SendClientMessage(playerid, Weiß,"Befehl: /call [Nummer]");
	if(sStats[playerid][sHandy] == 0)
	return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(GetPVarInt(playerid, "HandyStatus") == 0)
	return SendClientMessage(playerid, Rot, "Dein Handy ist aus bitte schalte es zuerst ein!");
	if(sStats[playerid][sAkku] == 0)
	return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
	if(sStats[playerid][sGuthaben] <= 0 && sStats[playerid][sVertrag] == 0)
	return SendClientMessage(playerid, Rot, "Du hast kein Guthaben mehr auf deinem Handy!");
	if(IsPlayerInAnyVehicle(playerid))
	return SendClientMessage(playerid, Rot, "Du kannst in/auf einem Fahrzeug nicht telefonieren!");
	if(sStats[playerid][sJailed] > 0)
	return SendClientMessage(playerid, Rot, "Du kannst während du im Gefängnis sitzt nicht telefonieren!");
	if(Desktop_Status[playerid] >= 1)
	return SendClientMessage(playerid, Rot, "Du kannst während du AFK bist nicht telefonieren!");
	if(sStats[playerid][sMute] == 1)
	return SendClientMessage(playerid, Rot, "Du kannst nicht telefonieren wenn du gemutet bist!");
	if(GetPVarInt(playerid, "Cuffed") == 1)
	return SendClientMessage(playerid, Rot, "Du kannst nicht telefonieren während du Handschellen an hast!");
	if(PlayerTied[playerid] > 0)
	return SendClientMessage(playerid, Rot, "Du kannst nicht telefonieren während du gefesselt bist!");
	if(GetPVarInt(playerid, "Anrufen") > 0)
	return SendClientMessage(playerid, Rot, "Du versuchst gerade schon jemanden anzurufen!");
	if(Aktiv[playerid] == true)
	return SendClientMessage(playerid,Rot,"Du bist schon am telefonieren!");
	if(nummer == sStats[playerid][sNummer])
	return SendClientMessage(playerid, Rot, "Du kannst dich nicht selber anrufen!");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(Handy[i][Nummer] == nummer)
		{
			if(sStats[i][sHandy] == 0)
			return SendClientMessage(playerid, Rot, "Du kannst den Spieler nicht anrufen er besitzt kein Handy!");
			if(Desktop_Status[i] >= 1)
			return SendClientMessage(playerid, Rot, "Du kannst den Spieler nicht anrufen da er AFK ist!");
			if(sStats[i][sMute] == 1)
			return SendClientMessage(playerid, Rot, "Du kannst den Spieler nicht anrufen da er gemutet ist!");
			if(IsPlayerNPC(i))
			return SendClientMessage(playerid, Rot, "Du kannst keinen NPC/Bot anrufen!");
			if(sStats[i][sAkku] == 0)
			return SendClientMessage(playerid, Rot, "Du kannst den Spieler nicht anrufen da sein Handy Akku leer ist!");
			if(GetPVarInt(i, "HandyStatus") == 0)
			return SendClientMessage(playerid, Rot, "Du kannst den Spieler nicht anrufen da sein Handy aus ist!");
			if (Mobile[i] == 255)
			{
			    Mobile[i] = playerid;
	    		SetPVarInt(playerid, "Anrufen", 1);
				SetTimerEx("Anruf", 22073, false, "d", playerid);
				new uhrname[20];
				if(sStats[playerid][sHandy] == 7) { format(uhrname, sizeof(uhrname), "iPhone"); }
			else if(sStats[playerid][sHandy] == 6) { format(uhrname, sizeof(uhrname), "Samsung Galaxy S3"); }
			else if(sStats[playerid][sHandy] == 5) { format(uhrname, sizeof(uhrname), "Motorola Q9h"); }
			else if(sStats[playerid][sHandy] == 4) { format(uhrname, sizeof(uhrname), "Sony Ericsson C905"); }
			else if(sStats[playerid][sHandy] == 3) { format(uhrname, sizeof(uhrname), "Nokia N95"); }
			else if(sStats[playerid][sHandy] == 2) { format(uhrname, sizeof(uhrname), "Nokia 6500"); }
			else { format(uhrname, sizeof(uhrname), "Nokia 3330"); }
				format(string, sizeof(string), "* %s nimmt sein %s raus.", GetName(playerid), uhrname);
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPVarInt(playerid, "Anrufen", 1);
				anruftimer[playerid] = SetTimerEx("Anruf", 15737, false, "i", playerid);
				format(string, sizeof(string), "Dein Handy klingelt. Tippe /annehmen. Anrufer: %s", GetName(playerid));
				SendClientMessage(i, Gelb2, string);
				PlayRingTone(i);
				if(sStats[i][sHandy] == 7) { format(uhrname, sizeof(uhrname), "iPhone"); }
			else if(sStats[i][sHandy] == 6) { format(uhrname, sizeof(uhrname), "Samsung Galaxy S3"); }
			else if(sStats[i][sHandy] == 5) { format(uhrname, sizeof(uhrname), "Motorola Q9h"); }
			else if(sStats[i][sHandy] == 4) { format(uhrname, sizeof(uhrname), "Sony Ericsson C905"); }
			else if(sStats[i][sHandy] == 3) { format(uhrname, sizeof(uhrname), "Nokia N95"); }
			else if(sStats[i][sHandy] == 2) { format(uhrname, sizeof(uhrname), "Nokia 6500"); }
			else { format(uhrname, sizeof(uhrname), "Nokia 3330"); }
				format(string, sizeof(string), "* %s's %s klingelt.", GetName(i),uhrname);
				ProxDetector(8.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetHandy(playerid);
				wirdangerufen[i] = playerid;
				return 1;
			}
			else
			{
				SendClientMessage(playerid,Rot,"Tüt - Tüt - Tüt kein Anschluss unter dieser Nummer!");
				ClearHandy(playerid);
				SetPVarInt(playerid, "Anrufen", 0);
				return 1;
			}
		}
	}
	return 1;
}

command(sms, playerid, params[])
{
	new nummer, string[150],string2[120];
	if(sscanf(params, "ds", nummer,string2))
 		return SendClientMessage(playerid, Weiß, "Befehl: /sms [Nummer] [Nachricht]");
	if(sStats[playerid][sHandy] == 0)
  		return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(sStats[playerid][sAkku] == 0)
  		return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
	if(sStats[playerid][sGuthaben] <= 0 && sStats[playerid][sVertrag] == 0)
  		return SendClientMessage(playerid, Rot, "Du hast kein Guthaben mehr auf deinem Handy!");
	if(IsPlayerInAnyVehicle(playerid))
  		return SendClientMessage(playerid, Rot, "Du kannst in/auf einem Fahrzeug keine SMS's schreiben!");
	if(sStats[playerid][sJailed] > 0)
  		return SendClientMessage(playerid, Rot, "Du kannst während du im Gefängnis sitzt keine SMS schreiben!");
	if(Desktop_Status[playerid] >= 1)
  		return SendClientMessage(playerid, Rot, "Du kannst während du AFK bist keine SMS schreiben");
	if(sStats[playerid][sMute] == 1)
		return SendClientMessage(playerid, Rot, "Du kannst keine SMS schreiben wenn du gemutet bist!");
	if(GetPVarInt(playerid, "Cuffed") == 1)
		return SendClientMessage(playerid, Rot, "Du kannst keine SMS schreiben während du Handschellen an hast!");
  	if(PlayerTied[playerid] > 0)
        return SendClientMessage(playerid, Rot, "Du kannst keine SMS schreiben während du gefesselt bist!");
	if(Aktiv[playerid] == true)
		return SendClientMessage(playerid, Rot, "Du bist gerade am telefonieren du kannst keine SMS schreiben!");
	if(GetPVarInt(playerid, "HandyStatus") == 0)
		return SendClientMessage(playerid, Rot, "Dein Handy ist aus!");
	if(Handy[playerid][Nummer] == nummer)
		return SendClientMessage(playerid, Rot, "Du kannst dir selber keine SMS schicken!");
	new uhrname[20];
	if(sStats[playerid][sHandy] == 7) { format(uhrname, sizeof(uhrname), "iPhone"); }
	else if(sStats[playerid][sHandy] == 6) { format(uhrname, sizeof(uhrname), "Samsung Galaxy S3"); }
	else if(sStats[playerid][sHandy] == 5) { format(uhrname, sizeof(uhrname), "Motorola Q9h"); }
	else if(sStats[playerid][sHandy] == 4) { format(uhrname, sizeof(uhrname), "Sony Ericsson C905"); }
	else if(sStats[playerid][sHandy] == 3) { format(uhrname, sizeof(uhrname), "Nokia N95"); }
	else if(sStats[playerid][sHandy] == 2) { format(uhrname, sizeof(uhrname), "Nokia 6500"); }
	else { format(uhrname, sizeof(uhrname), "Nokia 3330"); }
	format(string, sizeof(string), "* %s nimmt sein %s herraus.", GetName(playerid), uhrname);
	ProxDetector(8.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
                if(Handy[i][Nummer] == nummer)
                {
							if(Aktiv[i] == true)
							{
								SendClientMessage(playerid, Rot, "Der Spieler ist am telefonieren du kannst ihm keine SMS´s schicken.");
								return 1;
							}
	        					if(nummer == sStats[playerid][sNummer])
								{
									SendClientMessage(playerid, Rot, "Du kannst dir nicht selber SMS´s schreiben!");
									return 1;
								}
        						if(IsPlayerNPC(i))
								{
						        	SendClientMessage(playerid, Rot, "Du kannst keinem NPC/Bot eine SMS Schreiben!");
									return 1;
						    	}
     							if(Desktop_Status[i] >= 1)
								{
						        	SendClientMessage(playerid, Rot, "Der Spieler kann keine SMS enmpfangen da er AFK ist!");
									return 1;
						    	}
					    		if(sStats[i][sAkku] < 1)
					    		{
  								 	SendClientMessage(playerid, Rot, "Das Akku vom Handy des Spielers ist leer!");
  								 	return 1;
  								}
          						if(Handy[i][Nummer] == nummer)
                				{
									PlaySMSTone(i);
									new uhrnamen[55];
									if(sStats[i][sHandy] == 7) { format(uhrnamen, sizeof(uhrnamen), "iPhone"); }
									else if(sStats[i][sHandy] == 6) { format(uhrnamen, sizeof(uhrnamen), "Samsung Galaxy S3"); }
									else if(sStats[i][sHandy] == 5) { format(uhrnamen, sizeof(uhrnamen), "Motorola Q9h"); }
						  			else if(sStats[i][sHandy] == 4) { format(uhrnamen, sizeof(uhrnamen), "Sony Ericsson C905"); }
						  			else if(sStats[i][sHandy] == 3) { format(uhrnamen, sizeof(uhrnamen), "Nokia N95"); }
						            else if(sStats[i][sHandy] == 2) { format(uhrnamen, sizeof(uhrnamen), "Nokia 6500"); }
									else { format(uhrnamen, sizeof(uhrnamen), "Nokia 3330"); }
									format(string, sizeof(string), "* %s's %s piept.", GetName(i),uhrnamen);
									ProxDetector(10.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SendClientMessage(playerid, COLOR_WHITE, "Nachricht erfolgreich gesendet!");
        							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);


									format(string2, sizeof(string2), "SMS: %s, Sender: %s [%d]", string2,GetName(playerid),sStats[playerid][sNummer]);
									SendClientMessage(i, Gelb, string2);

    						        if(sStats[playerid][sVertrag] == 0)
						        	{
						           		sStats[playerid][sGuthaben] -= 3;
						           		GameTextForPlayer(playerid, "~w~Guthaben ~r~-3", 3000, 1);
					           		}
          							return 1;
						}
	            	}
}
return 1;
}
command(gps, playerid, params[])
{
	#pragma unused params
	return cmd_navigation(playerid, params);
}
command(navi, playerid, params[])
{
	#pragma unused params
	return cmd_navigation(playerid, params);
}
command(closechat, playerid ,params[])
{
    #pragma unused params
	if(GetPVarInt(playerid, "pChat") == 1)
 	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
		 	if(DeinChat[i] == playerid)
		    {
		    	new string[128];
				new Name[MAX_PLAYER_NAME];
				GetPlayerName(i,Name,sizeof(Name));
				format(string,sizeof(string),"{00FF3C}[WhatzzApp] {FFFFFF}%s hat den Chat beendet.",Name);
				SendClientMessage(i,Weiß,string);
				SendClientMessage(playerid,Weiß,"{00FF3C}[WhatzzApp] {FFFFFF}Du hast den Chat beendet!");
				SetPVarInt(i, "pChat", 0);
				DeinChat[i] = 0;
		  		SetPVarInt(playerid, "pChat", 0);
				DeinChat[playerid] = 0;
		  		return 1;
 			}
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht am chatten!");
	    return 1;
	}
	return 1;
}
command(acceptchatten, playerid, params[])
{
	new id;
	if(sscanf(params,"u",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /acceptchatten [ID/Name]");
  	if(GetPVarInt(playerid, "pChat") == 1)
		return SendClientMessage(playerid, Rot, "Du bist schon am chatten!");
	if(id == playerid)
	{
	    SendClientMessage(playerid,Rot,"Du kannst nicht deine eigene Chateinladung annehmen!");
	    return 1;
	}
	if(id == INVALID_PLAYER_ID)
	{
	    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	    return 1;
	}
	if(GetPVarInt(id, "pChatten") == 1)
 	{
	    new Name[MAX_PLAYER_NAME], string[128];
	    GetPlayerName(playerid,Name,sizeof(Name));
	    SendClientMessage(playerid,Gruen,"{00FF3C}[WhatzzApp] {FFFFFF}Du kannst nun mit deinem Chatpartner kommunizieren.");
		format(string,sizeof(string),"{00FF3C}[WhatzzApp] {FFFFFF}%s hat deine Chatanfrage angenommen, du kannst nun mit ihm im Chat kommunizieren",Name);
		SendClientMessage(id,Gruen,string);
	 	SetPVarInt(id, "pChatten", 0);
	 	SetPVarInt(playerid, "pChat", 1);
	 	SetPVarInt(id, "pChat", 1);
		DeinChat[id] = playerid;
		DeinChat[playerid] = id;
		return 1;
    }
    else
    {
        SendClientMessage(playerid,Rot,"Der Spieler hat dir keine Chatanfrage gesenden!");
        return 1;
	}
}
command(chat, playerid, params[])
{
	new id;
	new string[128];
	if(sStats[playerid][sWA] < 1)
	    return SendClientMessage(playerid, Rot,"Du verfügst nicht über die WhatzzApp App!");
	if(sStats[playerid][sAkku] == 0)
  		return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
   	if(Aktiv[playerid] == true)
		return SendClientMessage(playerid, Rot, "Dein Handy ist aus!");
 	if(sStats[playerid][sHandy] == 0)
		return SendClientMessage(playerid, Rot, "Du besitzt kein Handy!");
    if(sscanf(params,"u",id))return SendClientMessage(playerid, Weiß,"Befehl: /chat [Name/ID]");
	if(IsPlayerNPC(id))
		return SendClientMessage(playerid, Rot, "NPC/Bots können nicht chatten!");
 	if(sStats[id][sHandy] == 0)
		return SendClientMessage(playerid, Rot, "Der Spieler hat kein Handy!");
	if(sStats[id][sWA] < 1)
	    return SendClientMessage(playerid, Rot,"Der Spieler verfügt nicht über die WhatzzApp App!");
	if(id == playerid)
	    return SendClientMessage(playerid, Rot, "Du kannst nicht mit dir selber chatten!");
	if(sStats[id][sAkku] == 0)
  		return SendClientMessage(playerid, Rot, "Der Handy Akku des Spielers ist leer!");
   	if(Aktiv[id] == true)
		return SendClientMessage(playerid, Rot, "Das Handy vom Spieler ist abgeschaltet!");
 	if(id == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(GetPVarInt(playerid, "pChatten") == 1)
	    return SendClientMessage(playerid, Rot, "Der Spieler ist schon am chatten!");
	format(string,sizeof(string),"Du hast eine Chateinladung von %s[%d] bekommen, benutze /acceptchatten um diese anzunehmen",GetName(playerid),playerid);
	SendClientMessage(id,Weiß,string);
	SendClientMessage(playerid,Weiß,"Du hast dem angegebenen Spieler eine Chateinladung geschickt!");
	SetPVarInt(playerid, "pChatten", 1);
	return 1;
}
command(navigation, playerid, params[])
{
	if(sStats[playerid][sLevel] > 1)
	{
		if(sStats[playerid][sHandy] == 0)
			return SendClientMessage(playerid, Rot, "Du besitzt kein Handy!");
		if(sStats[playerid][sGPS] < 1)
		    return SendClientMessage(playerid, Rot,"Du verfügst nicht über die GPS App!");
		if(sStats[playerid][sAkku] == 0)
	  		return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
	   	if(Aktiv[playerid] == true)
			return SendClientMessage(playerid, Rot, "Dein Handy ist aus!");
	}
	ShowPlayerDialog(playerid, GPS, DIALOG_STYLE_LIST,
	"Global Positioning System","{FFFFFF}Zivispawn\nKleidungsladen\nHandyladen\nBurgershot\nClub\nCasino\nPaintballarena\n24/7 Shop\nHotel\nLotto\nFahrschule\nProstituierte\nKirche\nTankstelle\nAmmunation\nPay'and'Spray\n", "Auswählen", "Weiter");
	return 1;
}
command(nummer, playerid, params[])
{
	#pragma unused params
	return cmd_number(playerid, params);
}
command(number, playerid, params[])
{
	new id,string[130];
	if(sscanf(params,"u",id))return SendClientMessage(playerid, Weiß,"Befehl: /number [Name/ID]");
	if(sStats[playerid][sTelefonBuch] == 0)
  		return SendClientMessage(playerid, Rot, "Du hast kein Telefonbuch!");
	if(IsPlayerNPC(id))
		return SendClientMessage(playerid, Rot, "NPC/Bots haben keine Handynummern!");
 	if(sStats[id][sHandy] == 0)
		return SendClientMessage(playerid, Rot, "Der Spieler hat kein Handy!");
	if(id == playerid)
	    return SendClientMessage(playerid, Rot, "Du kannst deine eigene Nummer nicht rausfinden, benutze /hstats!");

	if(id != INVALID_PLAYER_ID)
	{
		format(string,sizeof(string), "{FFFFFF}Name: {FFFF00}%s, {FFFFFF}Nummer: {FFFF00}%d.",GetName(id),sStats[id][sNummer]);
		SendClientMessage(playerid, Weiß, string);
		return 1;
	}
	return 1;
}
command(handyhelp, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sHandy] == 0)
  		return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(sStats[playerid][sAkku] == 0)
  		return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
	if(Aktiv[playerid] == true)
		return SendClientMessage(playerid, Rot, "Dein Handy ist aus!");

	new string[560];
	format(string,sizeof(string),
	"{FFFFFF}/anrufen -- {C0C0C0}Ruft einen anderen Spieler an.\n{FFFFFF}/sms -- {C0C0C0}Schreibt eine SmS.\n{FFFFFF}/annehmen -- {C0C0C0}Du nimmst einen Anruf an.\n{FFFFFF}/auflegen -- {C0C0C0}Du legst auf.\n{FFFFFF}/klingelton -- {C0C0C0}Klingelton Auswahl.\n{FFFFFF}/handy -- {C0C0C0}Du schaltest dein Handy an/aus.\n{FFFFFF}/akkuladen -- {C0C0C0}Du ladest deinen Akku auf.\n{FFFFFF}/hstats -- {C0C0C0}Ruft die Handy Statistik auf.\n{FFFFFF}/nummer -- {C0C0C0}Telefonbuch.");
	ShowPlayerDialog(playerid,HANDY7,DIALOG_STYLE_MSGBOX,"{FFFF00}Handy Hilfebox",string,"Weiter","Abbrechen");
	return 1;
}
command(hstats, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sHandy] == 0)
  		return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(sStats[playerid][sAkku] == 0)
  		return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
   	if(GetPVarInt(playerid, "HandyStatus") == 0)
		return SendClientMessage(playerid, Rot, "Dein Handy ist aus!");

    new pakku[9];
    new pstatss[4];
    new pvertrag[5];
    if(sStats[playerid][sAkku] == 0) { pakku = "Leer"; }
 		else if(sStats[playerid][sAkku]  >= 8) { pakku = "Sehr Gut"; }
 		else if(sStats[playerid][sAkku]  >= 5) { pakku = "Gut"; }
 		else if(sStats[playerid][sAkku]  >= 2) { pakku = "Schwach"; }
   if(sStats[playerid][sVertrag] == 0) { pvertrag = "Nein"; }
 		else if(sStats[playerid][sVertrag] == 1) { pvertrag = "Ja"; }
   if(GetPVarInt(playerid, "HandyStatus") == 0) { pstatss = "Aus"; }
 		else if(GetPVarInt(playerid, "HandyStatus") == 1) { pstatss = "An"; }
	new string[460];
	format(string,sizeof(string),
	"{FFFF00}Deine Handy Statistik: \n\n{FFFFFF}Rufnummer: {C0C0C0}%d.\n{FFFFFF}Akkustatus: {C0C0C0}%s.\n{FFFFFF}Guthaben: {C0C0C0}%d.\n{FFFFFF}Vertrag: {C0C0C0}%s.\n{FFFFFF}Handy Status: {C0C0C0}%s.\n",sStats[playerid][sNummer],pakku,sStats[playerid][sGuthaben],pvertrag,pstatss);
	ShowPlayerDialog(playerid,HANDY8,DIALOG_STYLE_MSGBOX,"{FFFF00}Handy Statistik",string,"OK","");
	return 1;
}
command(handy, playerid, params[])
{
    #pragma unused params
	if(sStats[playerid][sHandy] == 0)
  		return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(sStats[playerid][sAkku] == 0)
  		return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
   	if(Aktiv[playerid] == true)
		return SendClientMessage(playerid, Rot, "Dein Handy ist aus!");
	if(GetPVarInt(playerid, "HandyStatus") == 0)
	{
		SetPVarInt(playerid, "HandyStatus", 1);
 		SendClientMessage(playerid,Gelb2,"Du hast dein Handy angeschaltet!");
 		return 1;
	}
	else if(GetPVarInt(playerid, "HandyStatus") == 1)
	{
		SetPVarInt(playerid, "HandyStatus", 0);
 		SendClientMessage(playerid,Gelb2,"Du hast dein Handy ausgeschaltet!");
 		return 1;
	}
	return 1;
}
command(akkuladen, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sHandy] == 0)
	return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
	if(sStats[playerid][sAkku] > 3)
	return SendClientMessage(playerid, Rot, "Dein Handy Akku muss nicht aufgeladen werden!");
	//Akku im Haus aufladen
	for(new i = 0; i <=  Houses_Index; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid,25,HouseInt_Spawn_X[HouseInfo[i][hInteriorID]], HouseInt_Spawn_Y[HouseInfo[i][hInteriorID]],HouseInt_Spawn_Z[HouseInfo[i][hInteriorID]]))
		{
			ClearChat(playerid);
			SendClientMessage(playerid,Gelb2,"Bitte warten Sie, die Aufladung dauert 15 Sekunden!");
			SetTimerEx("AkkuLaden", 15091, false, "d", playerid);
			TogglePlayerControllable(playerid, false);
			sStats[playerid][sAkku] = 0;
			return 1;
		}
	}
	if(sStats[playerid][sHotel] > 0 && GetPlayerInterior(playerid) == 15)
	{
		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Bitte warten Sie, die Aufladung dauert 15 Sekunden!");
		SetTimerEx("AkkuLaden", 15091, false, "d", playerid);
		TogglePlayerControllable(playerid, false);
		sStats[playerid][sAkku] = 0;
		return 1;
	}
	//Akku im Handyladen aufladen
	if(IsPlayerInRangeOfPoint(playerid,2,1009.8480,60.7600,55.3221))
	{
		new geld;
		geld = GetPlayerEuros(playerid);
		if(geld < 55)
		return SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei um dein Handy aufzuladen (55)!");

		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Bitte warten Sie, die Aufladung dauert 15 Sekunden!");
		GivePlayerEuro(playerid,-55);
		SetTimerEx("AkkuLaden", 15091, false, "d", playerid);
		TogglePlayerControllable(playerid, false);
		sStats[playerid][sAkku] = 0;
		BizzInfo[6][bTill] += 55;
		BizzInfo[6][bProducts] -= 12;
		return 1;
	}
	else return SendClientMessage(playerid,Rot,"Du kannst dein Handyakku hier nicht aufladen!");
}
//Poker
command(poker,playerid, params[])
{
	new credit;
	if(!IsAtPokerAutomat(playerid))
		return SendClientMessage(playerid,Rot,"Du bist an keinem Pokerautomat!");
	if(Start3[playerid] != PlayerText:INVALID_TEXT_DRAW) return SendClientMessage(playerid, Rot, "Du bist schon am Poker spielen!");
	if(sscanf(params,"d",credit))return SendClientMessage(playerid, Weiß,"Befehl: /poker [1-100000]");
	if(credit < 1 || credit > 100000) SendClientMessage(playerid, Weiß, "Befehl: /poker [1-100000]");
	if(sStats[playerid][sLevel] < 7) SendClientMessage(playerid,Rot,"Du benötigst mind. Level 7 um Poker spielen zu können!");
	else if(GetPlayerEuros(playerid) < credit) SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei!");
	else
	{
	    //Kamera Ansicht
		SetPlayerCameraPos(playerid,1988.4127,1010.8826,994.4688);
		SetPlayerCameraLookAt(playerid,1988.5066,1009.1513,994.4688,1);
		SetPlayerVirtualWorld(playerid,2+playerid);
		PlayerTextDrawHide(playerid,Money3[playerid]);
		PlayerTextDrawHide(playerid,Money2[playerid]);
		PlayerTextDrawHide(playerid,Money[playerid]);
		// .......................................... BackGround
		Start3[playerid] = CreatePlayerTextDraw(playerid, -0.000, -0.000, "LOADSUK:loadsc7");
		PlayerTextDrawFont(playerid, Start3[playerid], 4);
		PlayerTextDrawTextSize(playerid, Start3[playerid], 640.000, 450.000);
		PlayerTextDrawColor(playerid, Start3[playerid], -1);
		PlayerTextDrawShow(playerid, Start3[playerid]);
		// ..........................................
		new
		PlayerText:txd = Start3[playerid],
		Float:t_x = 167.500000;
		for(new i; i < 5; i++)
		{
			// .......................................... CardsText
			txd = CreatePlayerTextDraw(playerid, t_x, 286.500, "LD_TATT:8poker");
			PlayerTextDrawFont(playerid, txd, 4);
			PlayerTextDrawTextSize(playerid, txd, 59.500, 88.000);
			PlayerTextDrawColor(playerid, txd, -1);
			PlayerTextDrawSetSelectable(playerid, txd, 1);
			PlayerTextDrawShow(playerid, txd);
			t_x += 61.500000;
		}
		t_x = 167.500000;
		for(new i; i < 5; i++)
		{
			// .......................................... HoldsText
			txd = CreatePlayerTextDraw(playerid, t_x, 270.500, "LD_POKE:holdon");
			PlayerTextDrawFont(playerid, txd, 4);
			PlayerTextDrawTextSize(playerid, txd, 59.500, 14.500);
			PlayerTextDrawColor(playerid, txd, -1);
			PlayerTextDrawShow(playerid, txd);
			t_x += 61.500000;
		}
		// .......................................... Win_Text
		txd = CreatePlayerTextDraw(playerid, 167.500000, 154.000000, "Royal Flush~n~Straight Flush~n~4 of a Kind~n~Full House~n~Flush~n~Straight~n~3 of a Kind~n~Two Pair");
		PlayerTextDrawFont(playerid, txd, 1);
		PlayerTextDrawLetterSize(playerid, txd, 0.320000, 1.400000);
		PlayerTextDrawSetOutline(playerid, txd, 1);
		PlayerTextDrawSetProportional(playerid, txd, 1);
		PlayerTextDrawShow(playerid, txd);
		// .......................................... WinText
		txd = CreatePlayerTextDraw(playerid, 247.500000, 154.000000, "_");
		PlayerTextDrawFont(playerid, txd, 1);
		PlayerTextDrawLetterSize(playerid, txd, 0.320000, 1.400000);
		PlayerTextDrawSetOutline(playerid, txd, 1);
		PlayerTextDrawSetProportional(playerid, txd, 1);
		PlayerTextDrawShow(playerid, txd);
		// .......................................... BetCreditText
		txd = CreatePlayerTextDraw(playerid, 320.000000, 379.000000, "_");
		PlayerTextDrawAlignment(playerid, txd, 2);
		PlayerTextDrawBackgroundColor(playerid, txd, 255);
		PlayerTextDrawFont(playerid, txd, 3);
		PlayerTextDrawLetterSize(playerid, txd, 0.300000, 1.600000);
		PlayerTextDrawColor(playerid, txd, -1);
		PlayerTextDrawSetOutline(playerid, txd, 0);
		PlayerTextDrawSetProportional(playerid, txd, 1);
		PlayerTextDrawSetShadow(playerid, txd, 1);
		PlayerTextDrawUseBox(playerid, txd, 1);
		PlayerTextDrawBoxColor(playerid, txd, 335595560);
		PlayerTextDrawTextSize(playerid, txd, 6.000000, 302.000000);
		PlayerTextDrawShow(playerid, txd);
		// .......................................... DealsText
		txd = CreatePlayerTextDraw(playerid, 229.000, 400.500, "LD_POKE:deal");
		PlayerTextDrawFont(playerid, txd, 4);
		PlayerTextDrawTextSize(playerid, txd, 59.500, 14.500);
		PlayerTextDrawColor(playerid, txd, -1);
		PlayerTextDrawSetSelectable(playerid, txd, 1);
		PlayerTextDrawShow(playerid, txd);
		// .......................................... AddCoinsText
		txd = CreatePlayerTextDraw(playerid, 167.500, 400.500, "LD_POKE:addcoin");
		PlayerTextDrawFont(playerid, txd, 4);
		PlayerTextDrawTextSize(playerid, txd, 59.500, 14.500);
		PlayerTextDrawColor(playerid, txd, -1);
		PlayerTextDrawSetSelectable(playerid, txd, 1);
		PlayerTextDrawShow(playerid, txd);
		// .......................................... ExitPoker
		txd = CreatePlayerTextDraw(playerid, 457.000, 253.000, "LD_BEAT:cross");
		PlayerTextDrawFont(playerid, txd, 4);
		PlayerTextDrawTextSize(playerid, txd, 16.000, 16.000);
		PlayerTextDrawColor(playerid, txd, -1);
		PlayerTextDrawSetSelectable(playerid, txd, 1);
		PlayerTextDrawShow(playerid, txd);
		// .......................................... BetText
		txd = CreatePlayerTextDraw(playerid, 167.500, 377.000, "LD_BEAT:circle");
		PlayerTextDrawFont(playerid, txd, 4);
		PlayerTextDrawTextSize(playerid, txd, 16.000, 16.000);
		PlayerTextDrawColor(playerid, txd, -1);
		PlayerTextDrawSetSelectable(playerid, txd, 1);
		PlayerTextDrawShow(playerid, txd);
		// .......................................... ChangeBackGround
		txd = CreatePlayerTextDraw(playerid, 437.000, 253.000, "LD_NONE:warp");
		PlayerTextDrawFont(playerid, txd, 4);
		PlayerTextDrawTextSize(playerid, txd, 16.000, 16.000);
		PlayerTextDrawColor(playerid, txd, -1);
		PlayerTextDrawSetSelectable(playerid, txd, 1);
		PlayerTextDrawShow(playerid, txd);

		if(txd == CHANGEBACKGROUND)
		{
			PP_Info[playerid][Credit] = credit;
			GivePlayerEuro(playerid, -credit);
			TogglePlayerControllable(playerid, false);
			PP_Info[playerid][Bett] = MIN_BET;
			PP_Info[playerid][click_dealbutton] = FIRST_CLICKDEALTEXT;

			BetCredit(playerid);
			WinnText(playerid);

			for(new i; i < 5; i++)
			{
				PP_Info[playerid][fivecards_hand][i] = 0;
				PP_Info[playerid][fivecards_hand][i + 5] = 0;
				PP_Info[playerid][holdstate][i] = HOLDOFF;
			}
			SelectTextDraw(playerid, 0x787ab3bb); //0x9999BBBB);
			ClearChat(playerid);
			SendClientMessage(playerid, -1, "Spielen..");
		} else {
		    ClearChat(playerid);
			SendClientMessage(playerid, -1, "Nocheinmal.");
			Delete_PokerTextDraw(playerid);
		}
	}
	return 1;
}

//Slotmachine
command(slotmachine,playerid, params[])
{
	#pragma unused params
	for(new i = 0; i<sizeof(BanditLocs); i++)
	{
		if(IsAtSlotmachine(playerid))
		{
			new money = GetPlayerEuros(playerid);
			if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
			if(sStats[playerid][sSpielstunden] < 5)
			{
			    SendClientMessage(playerid,Rot,"Du benötigst mind. 5 Spielstunden bevor du die Slotmachine benutzen kannst!");
			    return 1;
   			}
			if(money < 100)
			{
				SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei mind. 100!");
				return 1;
			}
			ShowPlayerDialog(playerid,DIALOG_STARTGAMBLE,DIALOG_STYLE_MSGBOX,"Slot Machine","{FFFFFF}Möchtest du eine Runde spielen {FFFF00}(Starteinsatz: 100){FFFFFF}?","Ja","Nein");
		}
		else
		{
			SendClientMessage(playerid,Rot,"Du stehst vor keiner Slot Machine!");
			return 1;
		}
		return 1;
	}
	return 1;
}
command(geldbug, playerid, params[])
{
	#pragma unused params
	PlayerTextDrawHide(playerid,Money3[playerid]);
	PlayerTextDrawHide(playerid,Money2[playerid]);
	PlayerTextDrawHide(playerid,Money[playerid]);
	PlayerTextDrawShow(playerid,Money3[playerid]);
	PlayerTextDrawShow(playerid,Money2[playerid]);
	PlayerTextDrawShow(playerid,Money[playerid]);
	SendClientMessage(playerid,Gelb2,"Der Geld Bug wurde behoben!");
	return 1;
}
command(test, playerid, params[])
{
	SetPlayerPosEx(playerid,325.50000000,-2523.00000000,15.39999962);
}
//Lotto
command(buylotto, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(sStats[playerid][sMute] == 1 && sStats[playerid][sAdminlevel] < 1)
	{
		SendClientMessage(playerid,Rot,"Du kannst keinen Befehlen nutzen, da du gemutet bist!");
		return 1;
	}
	if(sStats[playerid][sLink] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
	if(BizzInfo[3][bProducts] < 25)
	{
		SendClientMessage(playerid, Rot,"Es sind keine Lotteriescheine mehr verfügbar!");
		return 1;
	}
	if(HaveTicket[playerid] == 1) return SendClientMessage(playerid, Rot, "Du hast schon ein 6/49 Lotterie Ticket!");
	if(GetPlayerEuros(playerid) < 500) return SendClientMessage(playerid, Rot, "Lotterie Tickets kosten 500!");
	if (IsPlayerInRangeOfPoint(playerid,2,-2237.1738,130.1773,1035.4141))
   	{
	GivePlayerEuro(playerid, -500);
	HaveTicket[playerid] = 1;
	MakePlayerNumber(playerid);
    BizzInfo[3][bProducts] -= 25;
    BizzInfo[3][bTill] +=500;
    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
    ClearChat(playerid);
    SendClientMessage(playerid, Gelb, "Du hast dir erfolgreich ein Lotterie Ticket gekauft, /lottoschein um diesen zu sehen.");
	format(string, sizeof(string), "Deine 6/49 Lotto Nummern sind: %d, %d, %d, %d, %d, %d", PlayerNumber[0][playerid], PlayerNumber[1][playerid], PlayerNumber[2][playerid], PlayerNumber[3][playerid], PlayerNumber[4][playerid], PlayerNumber[5][playerid]);
	SendClientMessage(playerid, Weiß, string);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Bitte warte nun bis die nächste Lottoziehung beginnt, diese startet jeden Tag um 17 Uhr.");

	}
	else return SendClientMessage(playerid,Rot,"Du bist nicht in der Lotterie!");
	return 1;
}

command(lottoschein, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(sStats[playerid][sLink] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
	if(HaveTicket[playerid] == 0) return SendClientMessage(playerid, Rot, "Du hast kein 6/49 Lotterie Ticket!");

	format(string, sizeof(string), "Deine 6/49 Lotto Nummern sind: %d, %d, %d, %d, %d, %d", PlayerNumber[0][playerid], PlayerNumber[1][playerid], PlayerNumber[2][playerid], PlayerNumber[3][playerid], PlayerNumber[4][playerid], PlayerNumber[5][playerid]);
	SendClientMessage(playerid, Gelb, string);
	return 1;
}
//Pferdehelp
command(pferdehelp, playerid, params[])
{
	#pragma unused params
	new string[560];
	if(sStats[playerid][sLink] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
	format(string,sizeof(string),
	"{FFFFFF}/meinewetten -- {C0C0C0}Wetteinsicht.\n{FFFFFF}/exitpr -- {C0C0C0}Zuschauermodus verlassen.");
	ShowPlayerDialog(playerid,PFERDEHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Pferderennen Hilfebox",string,"OK","");
	return 1;
}
command(exitpr, playerid,params[])
{
    #pragma unused params
   	if (Watching[playerid] == 0)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Zuschauer in einem Pferderennen!");
		return 1;
 	}
 	if (MoneyBet[playerid] > 0)
	{
	    SendClientMessage(playerid,Rot,"Du hast auf ein Pferd gewettet du kannst nicht aussteigen!");
		return 1;
 	}
	if(sStats[playerid][sLink] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
	if (Watching[playerid] == 1)
	{
		    Watching[playerid] = 0;
            TextDrawHideForPlayer(playerid,BG2);
            TextDrawHideForPlayer(playerid,BG1);
            TextDrawHideForPlayer(playerid,Start2);
            TextDrawHideForPlayer(playerid,Finish2);
            TextDrawHideForPlayer(playerid, Horse1);
            TextDrawHideForPlayer(playerid,Horse2);
            TextDrawHideForPlayer(playerid,Horse3);
            TextDrawHideForPlayer(playerid,Horse4);
            TextDrawHideForPlayer(playerid,HorseNum1);
            TextDrawHideForPlayer(playerid,HorseNum2);
            TextDrawHideForPlayer(playerid,HorseNum3);
            TextDrawHideForPlayer(playerid,HorseNum4);
            TextDrawHideForPlayer(playerid,Start);
            TextDrawHideForPlayer(playerid,Finish);
			TogglePlayerControllable(playerid, true);
			PlayerTextDrawShow(playerid,Money3[playerid]);
			PlayerTextDrawShow(playerid,Money[playerid]);
			PlayerTextDrawShow(playerid,Money2[playerid]);
			TextDrawShowForPlayer(playerid,Clock);
			TextDrawShowForPlayer(playerid, Script1);
			TextDrawShowForPlayer(playerid, Script2);
			SetCameraBehindPlayer(playerid);
			MoneyBet[playerid] = 0;
			BetOnHorse[playerid] = 0;
			SendClientMessage(playerid,Gruen,"Du hast den Zuschauermodus vom Pferderennen erfolgreich verlassen.");
	}
	return 1;
}
command(meinewetten, playerid,params[])
{
    #pragma unused params
   	if(sStats[playerid][sLink] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
    if (MoneyBet[playerid] > 0 && BetOnHorse[playerid] > 0)
    {
    	new string[128];
    	format(string, sizeof(string), "Du hast %d auf Pferd Nummer %d gewettet.",MoneyBet[playerid],BetOnHorse[playerid]);
    	SendClientMessage(playerid, Gelb2, string);
    }
    else
    {
        SendClientMessage(playerid,Rot,"Du hast keine Wetten abgegeben!");
	}
	return 1;
}
command(startpferderennen, playerid, params[])
{
	#pragma unused params
	new string[128];
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 4)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	if(RaceStarted == 1)
	{
		SendClientMessage(playerid,Rot,"Zurzeit ist schon ein Pferderennen im Gange, bitte warte bis dieses zuende ist!");
		return 1;
	}
	if(GetPVarInt(playerid, "Adminduty") == 0)
	{
	    SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um ein Pferderennen starten zu können!");
	    return 1;
	}
	GameTimeTimer();
	SendClientMessage(playerid,Gelb,"Du hast ein neues Pferderennen gestartet!");
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat eine neue Pferderunde gestartet.",day,month,year,hour,minute,second,GetName(playerid));
	AdminLog(string);
	return 1;
}
//Support Konsole öffnen
command(report, playerid, params[])
{
	#pragma unused params
	return cmd_support(playerid, params);
}
command(support,playerid, params[])
{
	#pragma unused params
	new count = 1,count2 = 1,string[128];
	new days,hours,mins;
	new wartezeit = GetPVarInt(playerid, "Cooldown3");
	new restzeit= wartezeit -gettime();
	days = floatround(restzeit / 86400,floatround_floor);
	hours = restzeit - (days * 86400);
	hours = floatround(hours / 3600,floatround_floor);
	mins = restzeit - ( (days * 86400) + (hours * 3600) );
	mins = floatround(mins / 60,floatround_floor);
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sAdminlevel] == 0 && GetPVarInt(i, "Supportt") == 1)
		{
  			count2 ++;
		}
	}
 	if(count2 >= 12)
 	{
      	SendClientMessage(playerid,Rot,"Es können keine weiteren Support-Tickets geöffnet werden, bitte warte bis die aktuellen bearbeitet wurden!");
 		return 1;
 	}
	if(sStats[playerid][sAdminlevel] > 0)
	{
		SendClientMessage(playerid,Rot,"Du kannst als Administrator keine Support-Tickets eröffnen!");
		return 1;
	}
	if(GetPVarInt(playerid, "Supportt") == 1)
	{
		SendClientMessage(playerid,Rot,"Du kannst nur 1 Support-Ticket eröffnen!");
		return 1;
	}
	if(sStats[playerid][sSupportsperre] > 0)
	{
		SendClientMessage(playerid,Rot,"Du kannst kein Support-Ticket eröffnen du hast eine Supportsperre!");
		return 1;
	}
	if(GetPVarInt(playerid, "Cooldown3") != 0)
	{
		format(string, sizeof(string), "Du musst noch %d Minuten warten, bevor du wieder Support-Ticket eröffnen kannst!",mins);
		SendClientMessage(playerid,Rot,string);
		return 1;
	}
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sAdminlevel] > 0)
		{
		    count ++;
		}
	}
	if(count != 1)
	{
	    ShowPlayerDialog(playerid,SUPPORT1,DIALOG_STYLE_LIST,"Support-Zentrale","{C0C0C0}1. {FFFFFF}Allgemeiner Support\n{C0C0C0}2. {FFFFFF}Cheater melden\n{C0C0C0}4. {FFFFFF}Es sind keine Zivibikes mehr da","Auswählen","Abbrechen");
	    return 1;
	}
	else SendClientMessage(playerid,Rot,"Zurzeit ist kein Administrator online!");
	return 1;
}
//Personalausweis
command(personalausweis, playerid, params[])
{
	#pragma unused params
	return cmd_perso(playerid, params);
}
command(perso, playerid, params[])
{
	#pragma unused params
	new string[100];
	new persostring[320];
	new gtext[20];
	if(sStats[playerid][sPersonalausweis] < 1)
	return SendClientMessage(playerid, Rot, "Du hast noch keinen Personalausweis!");
	if(IsPlayerInAnyVehicle(playerid))
	return SendClientMessage(playerid, Rot, "Du kannst dir deinen Personalausweis nicht in/auf einem Fahrzeug ansehen!");
	//Geschlecht
	if(sStats[playerid][sGeschlecht] == 1) { gtext = "Männlich"; }
	else if(sStats[playerid][sGeschlecht] == 2) { gtext = "Weiblich"; }
	format(string, sizeof(string), "* %s schaut auf seinen Personalausweis.", GetName(playerid));
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	new ptext[30];
	if(sStats[playerid][sPremium] == 1) { ptext = "{663300}Bronze"; }
	else if(sStats[playerid][sPremium] == 2) { ptext = "{999999}Silber"; }
	else if(sStats[playerid][sPremium] == 3) { ptext = "{FFcc00}Gold"; }
	else if(sStats[playerid][sPremium] == 0) { ptext = "{FFFFFF}Nein"; }
	format(persostring,sizeof(persostring),"{C0C0C0}Dein Personalausweis :\n\n{C0C0C0}Name : {FFF2F2}%s\n{C0C0C0}Alter : {FFF2F2}%d\n{C0C0C0}Geschlecht : {FFF2F2}%s\n{C0C0C0}Staatszugehörigkeit : {FFF2F2}Bayside\n{C0C0C0}Job : {FFF2F2}%s\n{C0C0C0}Fraktion : {FFF2F2}%s\n{C0C0C0}Premium : {FFF2F2}%s",GetName(playerid),sStats[playerid][sAlter],gtext,GetPlayerJob(playerid),GetPlayerFraktion(playerid),ptext);
	ShowPlayerDialog(playerid,PERSO3,DIALOG_STYLE_MSGBOX,"Personalausweis",persostring,"OK","");
	return 1;
}
//Showperso
command(showpersonalausweis, playerid, params[])
{
	#pragma unused params
	return cmd_perso(playerid, params);
}

command(showperso, playerid, params[])
{
	new string[100];
	new persostring[320];
	new messagestring[125];
	new messagestring2[125];
	new gtext[9];
	new id;
	if(sscanf(params, "u", id))
	return SendClientMessage(playerid, Weiß, "Befehl: /showperso [Name/ID]"),
	SendClientMessage(playerid, Gelb, "Funktion: Zeigt einem anderen Spieler deinen Personalausweis.");
	if(sStats[playerid][sPersonalausweis] < 1)
	return SendClientMessage(playerid, Rot, "Du hast noch keinen Personalausweis!");
	if(IsPlayerInAnyVehicle(id))
	return SendClientMessage(playerid, Rot, "Du kannst dem Spieler deinen Personalausweis nicht zeigen da er in/auf einem Fahrzeug ist!");
	if(IsPlayerInAnyVehicle(playerid))
	return SendClientMessage(playerid, Rot, "Du kannst dem Spieler deinen Personalausweis nicht zeigen da du in/auf einem Fahrzeug ist!");
	if(id == playerid)
	return SendClientMessage(playerid, Rot, "Du kannst dir nicht selber deinen Personalausweis zeigen , benutze {FFFFFF}/perso!");
	//Geschlecht
	if(sStats[playerid][sGeschlecht] == 1) { gtext = "Männlich"; }
	else if(sStats[playerid][sGeschlecht] == 2) { gtext = "Weiblich"; }
	if (ProxDetectorS(5.0, playerid, id))
	{
		new aname[MAX_PLAYER_NAME];
		GetPlayerName(id, aname, sizeof(aname));
		format(string, sizeof(string), "* %s zeigt %s seinen Personalausweis.", GetName(playerid),aname);
		ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(messagestring,sizeof(messagestring),"Du zeigst %s deinen Personalausweis.",aname);
		SendClientMessage(playerid,COLOR_YELLOW,messagestring);
		format(messagestring2,sizeof(messagestring2),"%s zeigt dir seinen Personalausweis.",GetName(playerid));
		SendClientMessage(id,COLOR_YELLOW,messagestring2);
		new ptext[30];
		if(sStats[playerid][sPremium] == 1) { ptext = "{663300}Bronze"; }
		else if(sStats[playerid][sPremium] == 2) { ptext = "{999999}Silber"; }
		else if(sStats[playerid][sPremium] == 3) { ptext = "{FFcc00}Gold"; }
		else if(sStats[playerid][sPremium] == 0) { ptext = "{FFFFFF}Nein"; }
		format(persostring,sizeof(persostring),"{C0C0C0}Dein Personalausweis :\n\n{C0C0C0}Name : {FFF2F2}%s\n{C0C0C0}Alter : {FFF2F2}%d\n{C0C0C0}Geschlecht : {FFF2F2}%s\n{C0C0C0}Staatszugehörigkeit : {FFF2F2}Bayside\n{C0C0C0}Job : {FFF2F2}%s\n{C0C0C0}Fraktion : {FFF2F2}%s\n{C0C0C0}Premium : {FFF2F2}%s",GetName(playerid),sStats[playerid][sAlter],gtext,GetPlayerJob(playerid),GetPlayerFraktion(playerid),ptext);
		ShowPlayerDialog(id,PERSO3,DIALOG_STYLE_MSGBOX,"Personalausweis",persostring,"OK","");
	}
	else
	{
		SendClientMessage(playerid, Rot, "Der Spieler ist nicht in deiner nähe!");
		return 1;
	}
	return 1;
}
//opendj
command(opengatedj, playerid, params[])
{
 	#pragma unused params
	return cmd_opendj(playerid, params);
}
command(opendj, playerid, params[])
{
	#pragma unused params
	if(djopen == 1)
 	{
 	    SendClientMessage(playerid,Rot,"Die Sperrung wurde schon geöffnet, bitte warte kurz!");
 	    return 1;
 	}
	if(sStats[playerid][sJob] != 2)
	return SendClientMessage(playerid,Rot,"Du bist kein DJ!");
	if(IsPlayerInRangeOfPoint(playerid,2.5, 478.6498,-17.9577,1000.6797))
	{
		SetObjectRot(djtor,0.0000, 0.0000, 357.1674);
		SendClientMessage(playerid,Gelb,"Du hast die Sperrung erfolgreich geöffnet, diese schließt automatisch in 5 Sekunden!");
		SetTimer("Closedjtor",5113,false);
		djopen = 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist nicht in der nähe der DJ-Lounge im Club Caligullas!");
		return 1;
	}
	return 1;
}
//Spawnchange
command(spawnchange, playerid, params[])
{
	#pragma unused params
	new string[128], Usage[45];
	if(sscanf(params, "s",Usage))
	{
 		ClearChat(playerid);
		SendClientMessage(playerid, Weiß, "Befehl: /spawnchange [Ort]");
		SendClientMessage(playerid, Gelb2, "Verfügbare Orte: Job, Haus, Wohnwagen");
		return 1;
	}
	if(strcmp(Usage, "Job", true) == 0)
	{
		format(string, sizeof(string), "Du hast deinen Spawn auf Job/Normal gesetzt.");
		SendClientMessage(playerid, Gelb, string);
		sStats[playerid][sSpawnChange] = 0;
		return 1;
	}
	if(strcmp(Usage, "Haus", true) == 0)
	{
 		if(sStats[playerid][sHaus] == 255)
	        return SendClientMessage(playerid,Rot,"Du hast kein Haus oder bist nirgendwo eingemietet!");
		format(string, sizeof(string), "Du hast deinen Spawn auf Haus gesetzt.");
		SendClientMessage(playerid, Gelb, string);
		sStats[playerid][sSpawnChange] = 1;
		return 1;
	}
	if(strcmp(Usage, "Wohnwagen", true) == 0)
	{
	    if(sStats[playerid][sWohnwagen] == 0)
	        return SendClientMessage(playerid,Rot,"Du hast keinen Wohnwagen!");
		format(string, sizeof(string), "Du hast deinen Spawn auf Wohnwagen gesetzt.");
		SendClientMessage(playerid, Gelb, string);
		sStats[playerid][sSpawnChange] = 2;
		return 1;
	}
	return 1;
}

//Mieter rauswerfen
command(allerauswerfen, playerid, params[])
{
	new string[128];
	new bouse = sStats[playerid][sHaus];
	if (bouse != -1 && strcmp(GetName(playerid), HouseInfo[sStats[playerid][sHaus]][hOwner], true) == 0 && sStats[playerid][sMieter] == 0)
	{
		if(IsAtHaus(playerid))
		{
			if(HouseInfo[bouse][hMieter] == 0)
			return SendClientMessage(playerid,Rot,"Du hast keine Mieter in deinem Haus!");
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
				if(i != playerid)
				{
					if (sStats[i][sHaus] == sStats[playerid][sHaus] && sStats[playerid][sMieter] == 1)
					{
						format(string, sizeof(string), "Du wurdest von deinem Vermieter %s aus dem Haus geworfen.",GetName(playerid));
						SendClientMessage(i,Weiß,string);
						SendClientMessage(playerid, Weiß, "Du hast alle Mieter aus deinem Haus geworfen.");
						sStats[i][sHaus] = 0;
						sStats[i][sMieter] = 0;
						HouseInfo[bouse][hMieter] = 0;
						UpdateHouseLabel(i);
						return 1;

					}
					else
					{
						SendClientMessage(playerid, Rot, "Du bist nicht in oder bei deinem Haus!");
						return 1;
					}
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, Rot, "Du besitzt kein Haus!");
		return 1;
	}
	return 1;
}

command(rauswerfen, playerid, params[])
{
    new bouse = sStats[playerid][sHaus];
	new targetid,string[128];
	if (bouse != -1 && strcmp(GetName(playerid), HouseInfo[sStats[playerid][sHaus]][hOwner], true) == 0 && sStats[playerid][sMieter] == 0)
	{
			if(IsAtHaus(playerid))
			{
	 			if(sscanf(params, "u", targetid))
				return SendClientMessage(playerid, Weiß, "Befehl: /rauswerfen [Name/ID]");
				if(targetid == INVALID_PLAYER_ID)
				return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
				if(targetid == playerid)
				return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber rauswerfen!");
				if(IsPlayerNPC(targetid))
				return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots rauswerfen!");
				if(sStats[targetid][sHaus] == sStats[playerid][sHaus])
				{
		       	    format(string, sizeof(string), "Du wurdest von deinem Vermieter %s aus dem Haus geworfen.",GetName(playerid));
		       	    SendClientMessage(targetid,Weiß,string);
		       	    format(string, sizeof(string), "Du hast den Mieter %s erfolgreich aus dem Haus rausgeworfen.",GetName(targetid));
		       	    SendClientMessage(playerid,Weiß,string);
					sStats[targetid][sHaus] = 0;
					HouseInfo[bouse][hMieter] -= 1;
					sStats[targetid][sMieter] = 0;
					UpdateHouseLabel(bouse);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, Rot, "Dieser Spieler ist kein Mieter deines Hauses!");
					return 1;
		  		}
			}
			else
			{
			    SendClientMessage(playerid, Rot, "Du bist nicht in oder bei deinem Haus!");
			    return 1;
			}
	}
	else
	{
			SendClientMessage(playerid, Rot, "Du besitzt kein Haus!");
			return 1;
	}
}

//Haus öffnen
command(hausstatus, playerid, params[])
{
	if(sStats[playerid][sHaus] == 255)
	return SendClientMessage(playerid,Rot,"Du besitzt kein Haus!");
	new bouse = sStats[playerid][sHaus];
	if(IsAtHaus(playerid))
	{
		if(HouseInfo[bouse][hLock] == 1)
		{
			HouseInfo[bouse][hLock] = 0;
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Tuer wurde ~g~geoeffnet",3000, 5);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			return 1;

		}
		if(HouseInfo[bouse][hLock] == 0)
		{
			HouseInfo[bouse][hLock] = 1;
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Tuer wurde ~r~geschlossen",3000, 5);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist nicht in oder bei deinem Haus!");
		return 1;
	}
	return 1;
}

//vupgrade
command(vupgrade, playerid, params[])
{
	#pragma unused params
	if(IsPlayerConnected(playerid))
	{
		if(sStats[playerid][sHaus] == 255 && sStats[playerid][sMieter] != 0)
		return SendClientMessage(playerid,Rot,"Du besitzt kein Haus!");
		new bouse = sStats[playerid][sHaus];
		if(IsAtHaus(playerid))
		{
		}
		else
		{
			SendClientMessage(playerid, Rot, "Du bist nicht in oder bei deinem Haus!");
			return 1;
		}
		if(sStats[playerid][sHaus] == bouse)
		{
			if(sStats[playerid][sLevel] < 2)
			{
				SendClientMessage(playerid,Rot,"Du musst mind. Level 2 sein um dein Fahrzeug aufrüsten zu können!");
				return 1;
			}
			ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
			return 1;
		}
	}
	return 1;
}

//housecarlock
command(hauscarlock, playerid, params[])
{
    #pragma unused params
    return cmd_hausalock(playerid, params);
}

command(hlock, playerid, params[])
{
    #pragma unused params
    return cmd_hausalock(playerid, params);
}

command(hausalock, playerid, params[])
{
	#pragma unused params
	new Float:X,Float:Y,Float:Z;
	if(sStats[playerid][sHaus] == 255)
	return SendClientMessage(playerid, Rot, "Du besitzt kein Haus!");
	GetVehiclePos(HouseInfo[sStats[playerid][sHaus]][hCID], X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid,5,X,Y,Z))
	{
		if(HouseInfo[sStats[playerid][sHaus]][hCarlock] == 1)
		{
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~w~Hausfahrzeug ~g~geoeffnet",3000, 5);
			HouseInfo[sStats[playerid][sHaus]][hCarlock] = 0;
			SetVehicleLock(HouseInfo[sStats[playerid][sHaus]][hCID],0);
			return 1;

		}
		else
		{
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~w~Hausfahrzeug ~r~verschlossen",3000, 5);
			HouseInfo[sStats[playerid][sHaus]][hCarlock] = 1;
			SetVehicleLock(HouseInfo[sStats[playerid][sHaus]][hCID],1);
			return 1;
		}
	}
	else
	{
		return SendClientMessage(playerid,Rot,"Du bist nicht in der nähe von deinem Hausfahrzeug!");
	}
}

//Sellhouse
command(hausverkaufen, playerid, params[])
{
    #pragma unused params
    return cmd_sellhouse(playerid, params);
}

command(sellhouses, playerid, params[])
{
	new id,preis,string[128];
	if(sStats[playerid][sHaus] == 255 || sStats[playerid][sMieter] != 0)
  		return SendClientMessage(playerid, Rot, "Du besitzt kein Haus!");
	if(sscanf(params, "ud", id,preis))
	    return SendClientMessage(playerid, Weiß, "Befehl: /sellhouses [Name/ID][Preis]");
	if(playerid == id)
		return SendClientMessage(playerid,Rot,"Du kannst dir nicht selber dein Haus verkaufen!");
 	if(IsPlayerNPC(id))
  		return SendClientMessage(playerid, Rot, "Du kannst keinem NPC/Bot dein Haus verkaufen.");
   	if(id != INVALID_PLAYER_ID)
	    SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht.");
   	if(sStats[id][sHaus] != 255)
	    SendClientMessage(playerid, Rot, "Der Spieler hat schon ein Haus.");
   	if (ProxDetectorS(5.0, playerid, id) && id != playerid)
   	    SendClientMessage(playerid, Rot, "Der Spieler ist nicht in deiner nähe.");
   	if(preis < 1 || preis > 500000)
	    return SendClientMessage(playerid,Rot,"Der Preis kann nicht kleiner als 1 und größer als 500.000 sein!");
   	if(HausTr[id] > 0)
 		return SendClientMessage(playerid,Rot,"Der Spieler hat schon ein Hausangebot erhalten!");

	HausId[id] = playerid; HausTr[id] = sStats[playerid][sHaus]; HausPr[id] = preis;
	format(string, sizeof(string), "* Du bietest %s, dein {FFFF00}Haus{FFFFFF} für {FFFF00}%d{FFFFFF} an.", GetName(id),preis);
	SendClientMessage(playerid, Weiß, string);
	format(string, sizeof(string), "* %s bietet dir sein {FFFF00}Haus{FFFFFF} für {FFFF00}%d{FFFFFF} an, tippe /accepthaus um anzunehmen.", GetName(playerid),preis);
	SendClientMessage(id, Weiß, string);
	return 1;
}

command(accepthaus, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(HausTr[playerid] < 1)
	{
		SendClientMessage(playerid,Rot,"Du hast kein Hausangebot erhalten!");
		return 1;
	}
	if(GetPlayerEuros(playerid) < HausPr[playerid])
	{
		format(string, sizeof(string), "Käufer %s hat nicht genug Geld um das Haus zu bezahlen.", GetName(playerid));
		SendClientMessage(WohnId[playerid], Rot, string);
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um das Haus zu bezahlen!");
		HausId[playerid] = 0; HausTr[playerid] = 0; HausPr[playerid] = 0;
		return 1;
	}
	if(HausTr[playerid] > 0)
	{
		if (ProxDetectorS(5.0, playerid, HausId[playerid]))
		{
			GivePlayerEuro(playerid,-HausPr[playerid]);
			GivePlayerEuro(WohnId[playerid],HausPr[playerid]);
			sStats[playerid][sWohnwagen] = HausTr[playerid];
			sStats[HausId[playerid]][sHaus] = 255;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Du hast erfolgreich das Haus von %s abgekauft.", GetName(HausId[playerid]));
			SendClientMessage(playerid, Weiß, string);
			SendClientMessage(playerid,Gelb2,"Info: Alle nötigen Informationen zum Thema eigenes Haus findest du unter /haushelp.");
			format(string, sizeof(string), "* %s hat dir dein Haus erfolgreich abgekauft.", GetName(playerid));
			SendClientMessage(HausId[playerid], Weiß, string);
			strmid(HouseInfo[HausTr[playerid]][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);
			SaveSpieler(playerid);
			SaveSpieler(HausId[playerid]);
			HausId[HausId[playerid]] = 0; HausTr[HausId[playerid]] = 0; HausPr[HausId[playerid]] = 0;
			HausId[playerid] = 0; HausTr[playerid] = 0; HausPr[playerid] = 0;
			UpdateHouseLabel(HausId[playerid]);
			return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist zu weit von dem Hausverkäufer entfernt!");
	    return 1;
	}
	return 1;
}

command(sellhouse, playerid, params[])
{
	#pragma unused params
	new string[128];
	for(new i = 0; i < Houses_Index; i++)
	{
		if(sStats[playerid][sHaus] != 255 && strcmp(GetName(playerid), HouseInfo[sStats[playerid][sHaus]][hOwner], true) == 0 && sStats[playerid][sMieter] == 0)
		{
			new house = sStats[playerid][sHaus];
			HouseInfo[house][hLock] = 1;
			HouseInfo[house][hRentabil] = 0;
			HouseInfo[house][hRent] = 0;
			HouseInfo[house][hCarlock] = 0;
			HouseInfo[house][hOwned] = 0;
			HouseInfo[house][hVec] = 589;
			HouseInfo[house][hNitro] = 0;
			HouseInfo[house][hMieter] = 0;
			HouseInfo[house][hVcol1] = -1;
			HouseInfo[house][hVcol2] = -1;
			HouseInfo[house][hTakings]=HouseInfo[house][hTakings]-HouseInfo[house][hTakings];
			strmid(HouseInfo[house][hOwner], "", 0, strlen(""), 255);
			GivePlayerEuro(playerid,HouseInfo[house][hValue]/2);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,Weiß,"Du hast dein Haus erfolgreich verkauft!");
			format(string, sizeof(string), "~w~Herzlichen Glueckwunsch~n~ Du hast dein Haus fuer ~n~~g~%d Euro verkauft", HouseInfo[house][hValue]/2);
			GameTextForPlayer(playerid, string, 10001, 3);
			CreateSellSchild(house);
			sStats[playerid][sHaus] = -1;
			SaveHaus();
			return 1;
		}
		else
		{
			SendClientMessage(playerid, Rot, "Du besitzt kein Haus!");
			return 1;
		}
	}
	return 1;
}

command(asellhouse, playerid, params[])
{
	#pragma unused params
	for(new h = 0; h < Houses_Index; h++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1)
		{
			if(sStats[playerid][sAdminlevel] == 5)
			{
 				if(GetPVarInt(playerid, "Adminduty") == 0)
					return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl nutzen zu können!");
				new house = h;
				HouseInfo[house][hLock] = 1;
				HouseInfo[house][hRentabil] = 0;
				HouseInfo[house][hRent] = 0;
				HouseInfo[house][hCarlock] = 0;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hVec] = 589;
				HouseInfo[house][hNitro] = 0;
				HouseInfo[house][hMieter] = 0;
				HouseInfo[house][hVcol1] = -1;
				HouseInfo[house][hVcol2] = -1;
				CreateSellSchild(house);
				HouseInfo[house][hTakings]=HouseInfo[house][hTakings]-HouseInfo[house][hTakings];
				strmid(HouseInfo[house][hOwner], "", 0, strlen(""), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Gelb2,"Du hast das Haus erfolgreich administrativ entfernt!");
				SaveHaus();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
				return 1;
			}
		}
	}
	return 1;
}

//linkhelp
command(linkhelp, playerid, params[])
{
	#pragma unused params
	new string[360];
	if(sStats[playerid][sLink] == 1 && sStats[playerid][sAdminlevel] < 1)
	{
		SendClientMessage(playerid,Rot,"Du hast dein Account schon verlinkt!");
		return 1;
	}
	format(string,sizeof(string),
	"{FFFFFF}Verlinkungen deines Accountes mit unserem UCP -- {C0C0C0}Die Verlinkung wurde sehr einfach gehalten\nbesuche die Internetseite {FF9600}ucp.bayside-roleplay.de{C0C0C0} logge dich mit deinen Accountdaten ein\nKlicke auf den Reiter Verlinken,und anschließend auf den Button bestätigen\nSchon bist du fertig und kannst alle Funktionen unseres Servers nutzen!");
	ShowPlayerDialog(playerid,LINKHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Verlinkung Hilfebox",string,"OK","");
	return 1;
}

//Haushelp
command(haushelp, playerid, params[])
{
	#pragma unused params
	new string[560];
	if(sStats[playerid][sHaus] == 255 && sStats[playerid][sAdminlevel] < 1)
	{
		SendClientMessage(playerid,Rot,"Du besitzt kein Haus!");
		return 1;
	}
	format(string,sizeof(string),
	"{FFFFFF}/enter -- {C0C0C0}Ein Haus betreten.\n{FFFFFF}/exit -- {C0C0C0}Ein Haus verlassen.\n{FFFFFF}/hauskaufen -- {C0C0C0}Ein Haus kaufen.\n{FFFFFF}/sellhouse -- {C0C0C0}Ein Haus verkaufen.\n{FFFFFF}/einmieten -- {C0C0C0}Du mietest dich in das jeweilige Haus ein.\n{FFFFFF}/setrentable -- {C0C0C0}Mieten an/aus.\n{FFFFFF}/setrent -- {C0C0C0}Mietpreis.\n{FFFFFF}/hausstatus -- {C0C0C0}Du öffnest/verriegelst deine Haustür.\n{FFFFFF}/vupgrade -- {C0C0C0}Du öffnest das Hauscar Upgrade Menü.");
	ShowPlayerDialog(playerid,HAUSHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Haus Hilfebox",string,">>","Abbrechen");
	return 1;
}

//Radiohelp
command(radiohelp, playerid, params[])
{
	#pragma unused params
	new string[380];
	format(string,sizeof(string),
	"{FFFFFF}Benutzung des Radios -- {C0C0C0}Das Radio verfügt über mehrere Sender, um den Sender wechseln zu können benutze einfach\n{FF9600}[z]{C0C0C0} Sender zurück\n{FF9600}[n]{C0C0C0} Sender vor\n{FFFFFF}Information: {C0C0C0}Du kannst das Radio nur mit angeschaltetem Motor nutzen.");
	ShowPlayerDialog(playerid,RADIOHELP2,DIALOG_STYLE_MSGBOX,"{FFFF00}Radio Hilfebox",string,"OK","");
	return 1;
}

//Buyhouse (Hauskaufen) Befehl
command(hauskaufen, playerid, params[])
{
    #pragma unused params
    return cmd_buyhouse(playerid, params);
}

command(buyhouse, playerid, params[])
{
	new string[128];
	for(new h = 0; h < Houses_Index; h++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
		{
			if(sStats[playerid][sPersonalausweis] == 0)
			{
				SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um dieses Haus zu kaufen!");
				return 1;
			}
			if(sStats[playerid][sLevel] < HouseInfo[h][hLevel])
			{
				format(string, sizeof(string), "Du musst mind. Level %d sein um dieses Haus zu kaufen!", HouseInfo[h][hLevel]);
				SendClientMessage(playerid, Rot, string);
				return 1;
			}
			if(sStats[playerid][sHaus] != 255)
			{
				SendClientMessage(playerid,Rot,"Du hast bereits ein Haus!");
				return 1;
			}
			if(sStats[playerid][sHaus] != 255 && strcmp(GetName(playerid), HouseInfo[sStats[playerid][sHaus]][hOwner], true) == 0)
			{
				SendClientMessage(playerid, Rot, "Du hast bereits ein Haus. Benutze /sellhouse um dieses zu verkaufen!");
				return 1;
			}
			new geld = GetPlayerEuros(playerid);
			if(geld < HouseInfo[h][hValue])
			{
				SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
				return 1;
			}
			if(GetPlayerEuros(playerid) > HouseInfo[h][hValue])
			{
				sStats[playerid][sHaus] = h;
				HouseInfo[h][hOwned] = 1;
				strmid(HouseInfo[h][hOwner], GetName(playerid), 0, strlen(GetName(playerid)), 255);
				GivePlayerEuro(playerid,-HouseInfo[h][hValue]);
				SendClientMessage(playerid, Weiß, "{00FF15}Herzlichen Glückwunsch! {FFFFFF}zu deinem neuen Haus!");
				SendClientMessage(playerid, Weiß, "{FFFFFF}Tippe /help um die neuen Hausbefehle zu sehen!");
				DestroyDynamicObject(HouseInfo[sStats[playerid][sHaus]][hObjekt]);
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				CheckHaus(playerid);
				SaveHaus();
				return 1;
			}
			else
			{
				SendClientMessage(playerid, Rot, "Du hast nicht genügend Geld!");
				return 1;
			}
		}
		UpdateHouseLabel(h);
	}
	return 1;
}

//Setrentable Haus zum einmieten setzen
command(setrentable, playerid, params[])
{
	for(new i = 0; i < Houses_Index; i++)
	{
		if(IsAtHaus(playerid))
		{
			new id, string[128];
			new bouse = sStats[playerid][sHaus];
			if(sscanf(params, "d", id))
			{
				SendClientMessage(playerid, Weiß, "Befehl: /setrentable [0/1]");
				SendClientMessage(playerid,Gelb,"Setzt fest ob man sich einmieten kann oder nicht!");
				return 1;
			}
			if(id > 1)
			{
				SendClientMessage(playerid, Rot, "Die Zahl kann nicht größer als 1 sein!");
				return 1;
			}
			if (sStats[playerid][sHaus] != 255 && strcmp(GetName(playerid), HouseInfo[sStats[playerid][sHaus]][hOwner], true) == 0 && sStats[playerid][sMieter] == 0)
			{
				HouseInfo[bouse][hRentabil] = id;
				format(string, sizeof(string), "Hausmieten ist auf %d gesetzt wurden.", HouseInfo[bouse][hRentabil]);
				SendClientMessage(playerid, Weiß, string);
				UpdateHouseLabel(bouse);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, Rot, "Du besitzt kein Haus!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, Rot, "Du bist nicht in oder bei deinem Haus!");
			return 1;
		}
	}
	return 1;
}

//Setrent Mitpreis
command(setrent, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(IsAtHaus(playerid))
		{
			new id, string[128];
			new bouse = sStats[playerid][sHaus];
			if(sscanf(params, "d", id))
			{
				SendClientMessage(playerid, Weiß, "Befehl: /setrent [Preis]");
				SendClientMessage(playerid,Gelb,"Setzt den Mietpreis fest!");
				return 1;
			}
			if(id > 10000 || id < 1)
			{
				SendClientMessage(playerid, Rot, "Der Mietpreis kann nicht unter 1 oder über 10.000 sein!");
				return 1;
			}
			if (bouse != -1 && strcmp(GetName(playerid), HouseInfo[sStats[playerid][sHaus]][hOwner], true) == 0 && sStats[playerid][sMieter] == 0)
			{
				HouseInfo[bouse][hRent] = id;
				format(string, sizeof(string), "Du hast den Mietpreis auf %d gesetzt!", HouseInfo[bouse][hRent]);
				SendClientMessage(playerid, Weiß, string);
				UpdateHouseLabel(bouse);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, Rot, "Du besitzt kein Haus!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, Rot, "Du bist nicht in oder bei deinem Haus!");
			return 1;
		}
	}
	return 1;
}

//stoprent
command(stoprent,playerid,params[])
{
	for(new i = 0; i < Houses_Index; i++)
	{
		if(sStats[playerid][sMieter] == 0)
		{
			SendClientMessage(playerid,Rot,"Du bist kein Mieter!");
			return 1;
		}
		if(IsAtHaus(playerid))
		{
			HouseInfo[sStats[playerid][sHaus]][hMieter] -= 1;
			sStats[playerid][sHaus] = 255;
			sStats[playerid][sMieter] = 0;
			SendClientMessage(playerid,Rot,"Du hast dich erfolgreich ausgemietet!");
			UpdateHouseLabel(sStats[playerid][sHaus]);
			return 1;
		}
		else
		{
			SendClientMessage(playerid,Rot,"Du bist nicht bei dem Haus, wo du Mieter bist!");
			return 1;
		}
	}
	return 1;
}

//mieter
//Rentroom, in ein Haus einmieten
command(mieter, playerid, params[])
{
	new string[128];
	if(IsAtHaus(playerid))
	{
		if (sStats[playerid][sHaus] != 255 && strcmp(GetName(playerid), HouseInfo[sStats[playerid][sHaus]][hOwner], true) == 0)
		{
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
				if(sStats[i][sHaus] == sStats[playerid][sHaus] && sStats[i][sMieter] == 1)
				{
					SendClientMessage(i, Weiß, "Mieter {00FF04}Online:");
					format(string, sizeof(string), "{FFFFFF}Name: {00FF04}%s", GetName(i));
					SendClientMessage(playerid, Gelb2, string);
					return 1;
				}
				else
				{
    				SendClientMessage(playerid,Rot,"Es sind keine Mieter online!");
				    return 1;
				}
    		}
		}
		else
		{
  			SendClientMessage(playerid, Rot, "Du bist nicht der Besitzer dieses Hauses!");
   		}
	}
	else
	{
 		SendClientMessage(playerid, Rot, "Du bist nicht in oder bei deinem Haus!");
   		return 1;
	}
	return 1;
}

//rentroom
command(einmieten, playerid, params[])
{
    #pragma unused params
    return cmd_rentroom(playerid, params);
}

command(rentroom, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		for(new h = 0; h < Houses_Index; h++)
		{
			if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
			{
				if(sStats[playerid][sPersonalausweis] == 0)
				{
					SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um dich in dieses Haus einzumieten!");
					return 1;
				}
				if(sStats[playerid][sMieter] != 0)
				{
				    SendClientMessage(playerid,Rot,"Du bist bereits bei einem anderens Haus eingemietet!");
				    return 1;
				}
				if(sStats[playerid][sHaus] != 255 && strcmp(GetName(playerid), HouseInfo[sStats[playerid][sHaus]][hOwner], true) == 0)
				{
					SendClientMessage(playerid, Rot, "Du hast bereits ein Haus. Benutze /sellhouse um dieses zu verkaufen!");
					return 1;
				}
				if(HouseInfo[h][hMieter] == HouseInfo[h][hMaxMieter])
				{
					SendClientMessage(playerid, Rot, "In diesem Haus sind keine verfügbaren Plätze mehr.");
					return 1;
				}
				if(GetPlayerEuros(playerid) < HouseInfo[h][hRent])
				{
					SendClientMessage(playerid, Rot, "Du hast nicht genug Geld um dich in das Haus einzumieten.");
					return 1;
				}
				if(GetPlayerEuros(playerid) > HouseInfo[h][hRent])
				{
					sStats[playerid][sHaus] = h;
					sStats[playerid][sMieter] = 1;
					GivePlayerEuro(playerid,-HouseInfo[h][hRent]);
					HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
					HouseInfo[h][hMieter] += 1;
					SendClientMessage(playerid, Weiß, "Herzlichen Glückwunsch zu deinem neuen Zuhause!");
					SendClientMessage(playerid, Weiß, "Tippe /haushelp um die neuen Befehle zu sehen!");
					SendClientMessage(playerid, Gelb2, "Benutze /stoprent um dich auszumieten!");
					UpdateHouseLabel(h);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, Rot, "Du hast nicht genug Geld um dich einzumieten!");
					return 1;
				}
			}
		}
	}
	return 1;
}

//Exit Befehl
command(exit, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		for(new i = 0; i <=  Houses_Index; i++)
		{
			if (IsPlayerInRangeOfPoint(playerid,5,HouseInt_Spawn_X[HouseInfo[i][hInteriorID]], HouseInt_Spawn_Y[HouseInfo[i][hInteriorID]],HouseInt_Spawn_Z[HouseInfo[i][hInteriorID]]) && GetPlayerVirtualWorld(playerid) == i)
			{
				SetPlayerInterior(playerid,0);
				SetPlayerPosEx(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
		//Verhörungsraum
		if (IsPlayerInRangeOfPoint(playerid, 1.5, 1554.3945,-1714.8971,1724.5088)) //rein
		{
		    if(vraum == 1)
		    {
		        SendClientMessage(playerid,Rot,"Der Verhörungsraum wurde verschlossen!");
		        return 1;
		    }
		    SetPlayerPos(playerid,1557.3118,-1714.8036,1724.5078);
		    SetPlayerFacingAngle(playerid,269.2133);
		    return 1;
		}
		//Garage raus
		new veh = GetPlayerVehicleID(playerid);
		if (IsPlayerInRangeOfPoint(playerid, 3, 2527.0708,-2673.5742,13.5560))
		{
 			if(IsPlayerInAnyVehicle(playerid))
			{
   				SetVehiclePos(veh,-2551.5442,2298.8938,4.6868);
		        SetVehicleZAngle(veh, 104.1683);
			    return 1;
			}
			else
			{
				SetPlayerPosEx(playerid,-2551.5442,2298.8938,4.6868);
		        SetPlayerFacingAngle(playerid, 104.1683);
			    return 1;
			}
  		}
	}
	return 1;
}
//Enter Befehl (Um in das Haus reinzugehen)
command(enter, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		for(new i = 0; i <= Houses_Index; i++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 3,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				if(sStats[playerid][sHaus] == i || HouseInfo[i][hLock] == 0)
				{
					SetPlayerInterior(playerid,HouseInt_Interior[HouseInfo[i][hInteriorID]]);
					SetPlayerPosEx(playerid,HouseInt_Spawn_X[HouseInfo[i][hInteriorID]],HouseInt_Spawn_Y[HouseInfo[i][hInteriorID]],HouseInt_Spawn_Z[HouseInfo[i][hInteriorID]]);
					GameTextForPlayer(playerid, "~w~Willkommen Zuhause~n~Du kannst das Haus mit /exit verlassen.", 5000, 3);
					SetPlayerVirtualWorld(playerid, sStats[playerid][sHaus]);
				}
				else
				{
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~Verschlossen!", 5000, 5);
				}
			}
		}
		//Verhörungsraum
		if (IsPlayerInRangeOfPoint(playerid, 1.5, 1555.9915,-1714.7013,1724.5078)) //rein
		{
		    if(vraum == 1)
		    {
		        SendClientMessage(playerid,Rot,"Der Verhörungsraum wurde geschlossen!");
		        return 1;
		    }
		    SetPlayerPos(playerid,1553.9741,-1714.8014,1724.5088);
		    SetPlayerFacingAngle(playerid,87.8150);
		    return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid, 1.5, 1554.3945,-1714.8971,1724.5088)) //raus
		{
		    if(vraum == 0)
		    {
		        SendClientMessage(playerid,Rot,"Der Verhörungsraum wurde geschlossen!");
		        return 1;
		    }
		    SetPlayerPos(playerid,1557.3118,-1714.8036,1724.5078);
		    SetPlayerFacingAngle(playerid,269.2133);
		    return 1;
		}
		//Garage rein
		new veh = GetPlayerVehicleID(playerid);
		if (IsPlayerInRangeOfPoint(playerid, 3, -2545.5249,2300.1594,4.9844))
		{
 			if(IsPlayerInAnyVehicle(playerid))
			{
   				SetVehiclePos(veh,2535.3225,-2673.5803,12.4036);
		        SetVehicleZAngle(veh, 268.8120);
			    return 1;
			}
			else
			{
				SetPlayerPosEx(playerid,2535.3225,-2673.5803,12.4036);
		        SetPlayerFacingAngle(playerid, 268.8120);
			    return 1;
			}
  		}
	}
	return 1;
}
//Stopjob
command(stopjob, playerid, params[])
{
    #pragma unused params
	if(sStats[playerid][sJob] == 0)
 		return SendClientMessage(playerid,Rot,"Du hast keinen Job!");
 	if(sStats[playerid][sJobTime] > 0 && sStats[playerid][sPremium] == 0)
		return SendClientMessage(playerid, Rot, "Du steckst noch in deinem Arbeitsvertrag drinnen!");
 	if(sStats[playerid][sJobTime] > 1 && sStats[playerid][sPremium] < 3)
		return SendClientMessage(playerid, Rot, "Du steckst noch in deinem Arbeitsvertrag drinnen!");
 	if(sStats[playerid][sJobTime] > 2 && sStats[playerid][sPremium] < 2)
		return SendClientMessage(playerid, Rot, "Du steckst noch in deinem Arbeitsvertrag drinnen!");
 	if(sStats[playerid][sJobTime] > 3 && sStats[playerid][sPremium] < 1)
		return SendClientMessage(playerid, Rot, "Du steckst noch in deinem Arbeitsvertrag drinnen!");
	if(IsPlayerInRangeOfPoint(playerid,15.0,306.4004,-159.1712,999.5938) && sStats[playerid][sJob] == 8)
	{
 		ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Du hast deinen Job erfolgreich gekündigt!");
	    SendClientMessage(playerid,Gelb2,"Du kannst nun einen neuen Job annehmen, oder Arbeitslosengeld beantragen!");
	    sStats[playerid][sJob] = 0;
	    sStats[playerid][sJobTime] = 0;
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,15.0,306.4004,-159.1712,999.5938) && sStats[playerid][sJob] == 7)
	{
 		ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Du hast deinen Job erfolgreich gekündigt!");
	    SendClientMessage(playerid,Gelb2,"Du kannst nun einen neuen Job annehmen, oder Arbeitslosengeld beantragen!");
	    sStats[playerid][sJob] = 0;
	    sStats[playerid][sJobTime] = 0;
	    return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid,15.0,306.4004,-159.1712,999.5938) && sStats[playerid][sJob] == 8)
	{
	    SendClientMessage(playerid,Rot,"Um den Job als Waffenhändler kündigen zu können musst du im Ammunation sein!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,6.0,-1112.2057,-1676.2168,76.3672) && sStats[playerid][sJob] == 7)
	{
 		SendClientMessage(playerid,Rot,"Um den Job als Drogenhändler kündigen zu können musst du bei der Drogenstelle sein!");
	    return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,30.0,361.8491,173.7037,1008.3828))
	{
	    ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Du hast deinen Job erfolgreich gekündigt!");
	    SendClientMessage(playerid,Gelb2,"Du kannst nun einen neuen Job annehmen, oder Arbeitslosengeld beantragen!");
	    sStats[playerid][sJob] = 0;
	    sStats[playerid][sJobTime] = 0;
	    return 1;
	}
	SendClientMessage(playerid,Rot,"Du bist nicht im Rathaus!");
	return 1;
}
//Help Befehl
command(jobhelp,playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sJob] == 0)
	{
		SendClientMessage(playerid,Rot,"Du hast keinen Job!");
		return 1;
	}
	if(sStats[playerid][sJob] == 1)
	{
	    return cmd_mechanikhelp(playerid, params);
	}
	if(sStats[playerid][sJob] == 2)
	{
		return cmd_djhelp(playerid, params);
	}
	if(sStats[playerid][sJob] == 3)
	{
	    return cmd_speditionshelp(playerid, params);
	}
	if(IsAFW(playerid))
	{
		return 1;
	}
	if(sStats[playerid][sJob] == 5)
	{
		return cmd_farmerhelp(playerid, params);
	}
	if(sStats[playerid][sJob] == 6)
	{
		return cmd_dethelp(playerid, params);
	}
	if(sStats[playerid][sJob] == 7)
	{
		return cmd_drughelp(playerid, params);
	}
	if(sStats[playerid][sJob] == 8)
	{
		return cmd_waffenhelp(playerid, params);
	}
	return 1;
}

//fraktionshelp
command(frakhelp, playerid, params[])
{
	#pragma unused params
	return cmd_fraktionshelp(playerid, params);
}
command(fraktionhelp, playerid, params[])
{
	#pragma unused params
	return cmd_fraktionshelp(playerid, params);
}
command(fraktionshelp,playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sFraktion] == 0)
	{
		SendClientMessage(playerid,Rot,"Du bist in keiner Fraktion!");
		return 1;
	}
	if(sStats[playerid][sFraktion] == 1)
	{
	    return cmd_bspdhelp(playerid, params);
	}
	if(sStats[playerid][sFraktion] == 2)
	{
		return cmd_feuerhelp(playerid, params);
	}
	if(sStats[playerid][sFraktion] == 3)
	{
		return cmd_medichelp(playerid, params);
	}
	if(sStats[playerid][sFraktion] == 4)
	{
		return cmd_bsnthelp(playerid, params);
	}
	if(sStats[playerid][sFraktion] == 5)
	{
		return cmd_mshelp(playerid, params);
	}
	if(sStats[playerid][sFraktion] == 6)
	{
	    return cmd_criphelp(playerid, params);
	}
	return 1;
}

//help
command(hilfe, playerid, params[])
{
	#pragma unused params
	return cmd_help(playerid, params);
}

command(help, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sTutorial] == 0)
	    return 1;

	ShowPlayerDialog(playerid,HELP1,DIALOG_STYLE_LIST,"Hilfezentrum","Allgemeines\nHandy\nHaus\nFirma\nJob\nFraktion\nFahrzeug\nWohnwagen\nRadio\nVerlinkung\nDrift\nPaintball\nAutoscooter","Auswählen","Beenden");
	return 1;
}
//Credits Befehl
command(credits, playerid, params[])
{
	#pragma unused params
	SendClientMessage(playerid,Weiß,"------------------------------------------------------");
	SendClientMessage(playerid,Blau,"{FEFEFE}Copyright by{FFFF00} Nemesus.de!");
	SendClientMessage(playerid,Blau,"{FEFEFE}Scripter:{FFFF00} Nemesus {FFFFFF}| Nemesus.de.");
	SendClientMessage(playerid,Blau,"{FEFEFE}Mapper:{FFFF00} sHoOTi.");
	SendClientMessage(playerid,Weiß,"------------------------------------------------------");
	return 1;
}
command(fcredits, playerid, params[])
{
	#pragma unused params
	SendClientMessage(playerid,Weiß,"------------------------------------------------------");
	SendClientMessage(playerid,Blau,"{FEFEFE}Copyright by{FFFF00} Nemesus.de!");
	SendClientMessage(playerid,Blau,"{FEFEFE}Scripter:{FFFF00} Nemesus {FFFFFF}| Nemesus.de.");
	SendClientMessage(playerid,Blau,"{FEFEFE}Mapper:{FFFF00} sHoOTi.");
	SendClientMessage(playerid,Blau,"{FEFEFE}Weitere Credits gehen an:{FFFF00} [DT]Sniper.");
	SendClientMessage(playerid,Weiß,"------------------------------------------------------");
	return 1;
}

//Gangsterauto
command(gangster, playerid, params[])
{
	#pragma unused params
	if(!IsPlayerInAnyVehicle(playerid))
	return SendClientMessage(playerid,Rot,"Du bist nicht in/auf einem Fahrzeug!");
	if(GetPVarInt(playerid, "NSGesicht") == 1)
	{
 	}
 	else
 	{
 		SendClientMessage(playerid, Rot, "Du bist keiner von meinen Meistern Nemesus oder sHoOTi!");
  		new Float:pX,Float:pY,Float:pZ;
	 	GetPlayerPos(playerid, pX, pY, pZ);
	 	CreateExplosion(pX, pY, pZ, 1, 100.00);
	 	return 1;
 	}
	if(MusikOn == 1 && GetPVarInt(playerid, "Musik") == 0)
	return SendClientMessage(playerid,Rot,"Die Musik ist schon an, bitte warte bis diese aus ist!");
	new aauto = GetPlayerVehicleID(playerid);
	new string[128];
	if(aauto == gangstercar)
	{
		if (GetPVarInt(playerid, "Musik") == 0)
		{
			SendClientMessage(playerid,Weiß,"Du hast die Musik erfolgreich angeschaltet benutze nocheinmal /gangster um diese auszuschalten!");
			format(string, sizeof(string), "* Gangster %s schaltet die Musik an.", GetName(playerid));
			ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "Musik", 1);
			MusikOn = 1;
			PlaySoundCool(playerid);
			return 1;
		}
		if (GetPVarInt(playerid, "Musik") == 1)
		{
			SendClientMessage(playerid,Weiß,"Du hast die Musik erfolgreich ausgeschaltet!");
			format(string, sizeof(string), "* Gangster %s schaltet die Musik aus.", GetName(playerid));
			ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "Musik", 0);
			MusikOn = 0;
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
 				if (GetPVarInt(i, "GMusik") == 1)
				{
					StopAudioStreamForPlayer(i);
					SetPVarInt(i, "GMusik", 0);
				}
			}
			return 1;
		}
	}
	SendClientMessage(playerid,Rot,"Du bist nicht im Gangsterauto!");
	return 1;
}
//Adminaufzug
command(adminaufzug, playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid,12,2500.287354, 2771.257568, 17.868746))
	{
		if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator!");
		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl nutzen zu können!");
		if(AdminAufzugB == 1)
		return SendClientMessage(playerid, Rot, "Der Aufzug ist schon in Benutzung!");

		MoveDynamicObject(adminaufzug1,  2500.287354, 2771.257568, 17.868746, 3.0);
		MoveDynamicObject(adminaufzug2, 2494.605957, 2771.261719, 17.897823, 3.0);
		SetTimer("Adminaufzug", 10331, false);
		AdminAufzugB = 1;
		SendClientMessage(playerid, Gelb2, "Du hast den Aufzug betätigt, dieser wird automatisch in 10 Sekunden wieder runterfahren!");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe des Adminaufzuges!");
	    return 1;
	}
}

//Adminhelp
command(adminhelp, playerid, params[])
{
	#pragma unused params
	return cmd_ahelp(playerid, params);
}
command(ah, playerid, params[])
{
	#pragma unused params
	return cmd_ahelp(playerid, params);
}
command(ahelp, playerid, params[])
{
    #pragma unused params
	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl nutzen zu können!");

	ClearChat(playerid);
	SendClientMessage(playerid, COLOR_GREEN,"---------------------------------------------------------------> Adminhilfe <---------------------------------------------------------------");
	if (sStats[playerid][sAdminlevel] >= 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "*1* Moderator/Scout ** /aduty /kick /accepteinweisung /deleteeinweisung /stopeinweisung /mute /freeze /unfreeze /check /adminmessage");
		SendClientMessage(playerid, COLOR_GRAD1, "*1* Moderator/Scout ** /accepts /closes /deletes /tickets /weiterleiten /tod /checkwaffen /spec /specoff /spawn /apm /prison");
	}
	if (sStats[playerid][sAdminlevel] >= 2)
	{
		SendClientMessage(playerid, COLOR_GRAD2,"*2* Supporter ** /supportveh /deletesupportveh /warn /getip /speichern /fixveh /fillveh /goto /gethere /gotoxyz /supportsperre /timeban");
	}
	if (sStats[playerid][sAdminlevel] >= 3)
	{
		SendClientMessage(playerid, COLOR_GRAD3,"*3* Administrator ** /ban /bigears /startballon /respawnallcars /respawnzivicars /set /agl /deleteallnagelband /weather /checkgm");
	}
	if (sStats[playerid][sAdminlevel] >= 4)
	{
  		SendClientMessage(playerid, COLOR_GRAD4,"*4* Hauptsupporter ** /teleport /a(m)essage /norob /noacheat /noeinweisung /nowerbung /nofire /noevent /startlotto /startpferderennen ");
  		SendClientMessage(playerid, COLOR_GRAD4,"*4* Hauptsupporter ** /bewerbertest /makeleader /fraktionsliste /fwhelp /givepremium /schwarzmarkt /nobchat /givegun");
	}
	if (sStats[playerid][sAdminlevel] >= 5)
	{
		SendClientMessage(playerid, COLOR_GRAD4,"*5* Projektleiter ** /makeadmin /funmodusx /feuerpunch /ztunen /createfire /showint /hauserstellen /veh /vehinfo ");
		SendClientMessage(playerid, COLOR_GRAD4,"*5* Projektleiter ** /payday /hauserstellen /asellhouse");
	}
	SendClientMessage(playerid, COLOR_GREEN,"---------------------------------------------------------------> Adminhilfe <---------------------------------------------------------------");
	return 1;
}
//Kick
command(kick, playerid, params[])
{
	new string[128], reason[105], id;
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um andere Leute kicken zu können!");
	if(sscanf(params, "us", id, reason))
		return SendClientMessage(playerid, Weiß, "Befehl: /kick [Name/ID] [Grund]");
	if(id == playerid)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber kicken!");
	if(IsPlayerNPC(id))
	    return SendClientMessage(playerid,Rot,"Du kannst keinen NPC/Bot kicken!");
	if(id == INVALID_PLAYER_ID)
 		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(sStats[playerid][sAdminlevel] < sStats[id][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator kicken, welcher ein höheres Administratorenlevel hat wie du!");

	format(string, sizeof(string), "* Du wurdest vom Administrator %s vom Server gekickt. Grund: %s", GetName(playerid), reason);
	SendClientMessage(id, Rot, string);
	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s gekickt. Grund: %s", GetName(id),id, GetName(playerid), reason);
	SendClientMessageToAll(Rot, string);
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Administrator %s gekickt. Grund: %s",day,month,year,hour,minute,second,GetName(id),GetName(playerid),reason);
	KickLog(string);
	TogglePlayerControllable(id, false);
	SaveSpieler(id);
	Kick(id);
	return 1;
}
//Prison
command(prison, playerid, params[])
{
	new string[128], reason[105], id, zeit;
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um andere Leute bannen zu können!");
	if(sscanf(params, "uds", id,zeit, reason))
	{
		SendClientMessage(playerid, Weiß, "Befehl: /prison [Name/ID] [Zeit] [Grund]");
		SendClientMessage(playerid, Gelb, "Zeitangabe in Minuten.");
		return 1;
	}
	if(sStats[playerid][sAdminlevel] < 3 && zeit > 180)
	    return SendClientMessage(playerid,Rot,"Du kannst den Spieler nur für max. 180 Minuten ins Prison stecken!");
	if(id == playerid)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber ins Prison stecken!");
	if(IsPlayerNPC(id))
	    return SendClientMessage(playerid,Rot,"Du kannst keinen NPC/Bot ins Prison stecken!");
	if(id == INVALID_PLAYER_ID)
 		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(sStats[playerid][sAdminlevel] < sStats[id][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator ins Prison stecken, welcher ein höheres Administratorenlevel hat wie du!");

	format(string, sizeof(string), "* Du wurdest vom Administrator %s für %d Minuten ins Prison gesteckt. Grund: %s", GetName(playerid),zeit, reason);
	SendClientMessage(id, Rot, string);
	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s für %d Minuten ins Prison gesteckt. Grund: %s", GetName(id),id, GetName(playerid),zeit, reason);
	SendClientMessageToAll(Rot, string);
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Administrator %s fuer %d ins Prison gebannt. Grund: %s",day,month,year,hour,minute,second,GetName(id),GetName(playerid),zeit,reason);
	AdminLog(string);
	new rand = random(sizeof(JailSpawns));
	SetPlayerPosEx(id, JailSpawns[rand][0], JailSpawns[rand][1], JailSpawns[rand][2]);
	SetPlayerFacingAngle(id,JailSpawns[rand][3]);
	SetPlayerInterior(id,10);
	SetPlayerWantedLevel(id,0);
	sStats[id][sWanteds] = 0;
	sStats[id][sJailed] = 1;
	sStats[id][sJailTime] = zeit*60;
	SetPlayerVirtualWorld(id,1);
	SpawnPlayer(id);
	return 1;
}
//Timeban
command(timeban, playerid, params[])
{
	new string[128], reason[105], id, zeit;
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 2)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um andere Leute bannen zu können!");
	if(sscanf(params, "uds", id,zeit, reason))
	{
		SendClientMessage(playerid, Weiß, "Befehl: /timeban [Name/ID] [Zeit] [Grund]");
		SendClientMessage(playerid, Gelb, "Zeitangabe in Minuten.");
		return 1;
	}
	if(sStats[playerid][sAdminlevel] < 3 && zeit > 180)
	    return SendClientMessage(playerid,Rot,"Du kannst den Spieler nur für max. 180 Minuten bannen!");
	if(id == playerid)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber bannen!");
	if(IsPlayerNPC(id))
	    return SendClientMessage(playerid,Rot,"Du kannst keinen NPC/Bot bannen!");
	if(id == INVALID_PLAYER_ID)
 		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(sStats[playerid][sAdminlevel] < sStats[id][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator bannen, welcher ein höheres Administratorenlevel hat wie du!");

	format(string, sizeof(string), "* Du wurdest vom Administrator %s für %d Minuten vom Server gebannt. Grund: %s", GetName(playerid),zeit, reason);
	SendClientMessage(id, Rot, string);
	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s für %d Minuten gebannt. Grund: %s", GetName(id),id, GetName(playerid),zeit, reason);
	SendClientMessageToAll(Rot, string);
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Administrator %s fuer %d Minuten gebannt. Grund: %s",day,month,year,hour,minute,second,GetName(id),GetName(playerid),zeit,reason);
	BanLog(string);
	TogglePlayerControllable(id, false);
	sStats[id][sTimeBan] = gettime()+(60*zeit);
	SaveSpieler(id);
	Kick(id);
	return 1;
}
//Ban
command(ban, playerid, params[])
{
	new string[128], reason[105], id;
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 3)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um andere Leute bannen zu können!");
	if(sscanf(params, "us", id, reason))
		return SendClientMessage(playerid, Weiß, "Befehl: /ban [Name/ID] [Grund]");
	if(id == playerid)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber kicken!");
	if(IsPlayerNPC(id))
	    return SendClientMessage(playerid,Rot,"Du kannst keinen NPC/Bot bannen!");
	if(id == INVALID_PLAYER_ID)
 		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(sStats[playerid][sAdminlevel] < sStats[id][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator kicken, welcher ein höheres Administratorenlevel hat wie du!");

	format(string, sizeof(string), "* Du wurdest vom Administrator %s vom Server gebannt. Grund: %s", GetName(playerid), reason);
	SendClientMessage(id, Rot, string);
	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s gebannt. Grund: %s", GetName(id),id, GetName(playerid), reason);
	SendClientMessageToAll(Rot, string);
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Administrator %s gebannt. Grund: %s",day,month,year,hour,minute,second,GetName(id),GetName(playerid),reason);
	BanLog(string);
	TogglePlayerControllable(id, false);
	BanEx(id,reason);
	return 1;
}
//Feuer Punch aktivieren
command(feuerpunch, playerid, params[])
{
    #pragma unused params
	if(IstSpielerAdmin(playerid, 5))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um den Feuerpunch aktivieren/deaktivieren zu können.");
		if(GetPVarInt(playerid, "Funmodus") < 1)
		return SendClientMessage(playerid, Rot, "Du musst zuerst deinen Funmodus aktivieren, um den Feuerpunch aktivieren/deaktivieren zu können.");
		if(GetPVarInt(playerid, "InDrift") == 1)
		return SendClientMessage(playerid, Rot, "Während du auf der Driftstrecke bist kannst du deinen Feuerpunch nicht aktivieren!");
		if(PlayerPaintballing[playerid] != 0)
		return SendClientMessage(playerid, Rot, "Du kannst deinen Feuerpunch nicht aktivieren während du in einem Paintballmatch bist!");
		if(GetPVarInt(playerid, "Feuerpunch") < 1)
		{
			S[playerid] = 1;
			Fires[playerid] = 10;
			SendClientMessage(playerid,Gelb,"Du hast den Feuerpunch für dich aktiviert!");
			SetPVarInt(playerid,"Feuerpunch",1);
			return 1;
		}
		if(GetPVarInt(playerid, "Feuerpunch") > 0)
		{
			S[playerid] = 0;
			Fires[playerid] = 0;
			SendClientMessage(playerid,Gelb,"Du hast den Feuerpunch für dich deaktiviert!");
			SetPVarInt(playerid,"Feuerpunch",0);
			return 1;
		}
		}
		else
		{
			SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
			return 1;
	  	}
	  	return 1;
}

//Feuererstellen
command(createfire, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sAdminlevel] < 5)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") < 1)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um ein Feuer erstellen zu können.");

	new Float:x, Float:y, Float:z, Float:a;
 	GetXYInFrontOfPlayer(playerid, x, y, z, a, 2.5);
  	AddFireEx(x, y, z);
  	SendClientMessage(playerid,Weiß,"Feuer wurde erfolgreich erstellt!");
	return 1;
}

//Lottoziehung starten
command(startlotto, playerid, params[])
{
	#pragma unused params
	new string[128];
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);

	if(sStats[playerid][sAdminlevel] < 4)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") < 1)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um die Lotto Ziehung starten zu können.");

	TicketDraw();
	SendClientMessage(playerid,Gelb,"Du hast eine neue Lottorunde gestartet!");
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat eine neue Lottorunde gestartet.",day,month,year,hour,minute,second,GetName(playerid));
	AdminLog(string);
 	return 1;
}
//Schwarzmarkt ändern
command(schwarzmarkt, playerid, params[])
{
	#pragma unused params
	new string[128];
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 4)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");

	SendClientMessage(playerid,Gelb,"Du hast die Position des Schwarzmarktes geändert!");
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Position des Schwarzmarktes geändert.",day,month,year,hour,minute,second,GetName(playerid));
	AdminLog(string);
	CreateSchwarzmarkt();
 	return 1;
}

command(deleteallnagelband, playerid, params[])
{
    #pragma unused params
	if(sStats[playerid][sAdminlevel] < 3)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "AdminDuty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um Nagelbänder löschen zu können.");
	if(nagelband == 0)
		return SendClientMessage(playerid, Rot,"Es liegen gerade keine Nagelbänder.");

	new string[128];
    format(string, sizeof(string), "Administrator %s hat alle Nagelbänder gelöscht!", GetName(playerid));
    SendRadioMessage(1,COLOR_LIGHTBLUE,string);
    SendAdminMessage(COLOR_LIGHTRED, string);
    SendClientMessage(playerid,Weiß,"Du hast erfolgreich alle Nagelbänder gelöscht!");
    DeleteAllStrip();
	return 1;
}

//Einweisung
command(accepteinweisung, playerid, params[])
{
	new id;
	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(sscanf(params,"i",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /accepteinweisung [ID/Name]");
	if(InEinweisung[playerid] == 1)
		return SendClientMessage(playerid, Rot, "Du kannst nicht mehr als eine Serverführung gleichzeitig machen!");
 	if(GetPVarInt(playerid, "Adminduty") < 1)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um eine Serverführung machen zu können.");
 	if(GetPVarInt(id, "Einweisung") == 0)
	    return SendClientMessage(playerid, Rot, "Dieser Spieler braucht keine Serverführung.");
	if(GetPVarInt(id, "Einweisung") == 1)
 	{
	    new string[128];
	    SendClientMessage(playerid,Gruen,"Du hast die Serverführung angenommen, bitte begebe dich nun zu dem Spieler, und führe ihn in den Server ein.");
	    SendClientMessage(playerid,Gruen,"Du kannst die Serverführung jederzeit mit /stopeinweisung beenden.");
	    SendClientMessage(playerid,Weiß,"Du kannst während der Einführung jederzeit mit dem zu einweisenden Spieler über einen gesonderten Chat schreiben!");
		format(string,sizeof(string),"Der Administrator %s hat dein Anliegen für eine Serverführung angenommen, er wird in wenigen Sekunden bei dir sein!",GetName(playerid));
		SendClientMessage(id,Weiß,"Du kannst während der Einführung jederzeit mit deinem zuständigen Administrator über einen gesonderten Chat schreiben!");
		SendClientMessage(id,Gruen,string);
		InEinweisung[id] = 1;
		InEinweisung[playerid] = 1;
		DeinEinweisung[id] = playerid;
		DeinEinweisung[playerid] = id;
		DeletePVar(id, "Einweisung");
	 	SetPVarInt(id, "Einweisung2", 1);
	  	SetPVarInt(playerid, "Einweisung2", 1);
    }
	return 1;
}

command(deleteeinweisung, playerid ,params[])
{
	new i;
	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um die Serverführung verweigern zu können.");
	if(sscanf(params,"i",i))
		return SendClientMessage(playerid,Weiß,"Befehl: /deleteeinweisung [ID/Name]");
	if(GetPVarInt(i, "Einweisung") == 1)
 	{
		if(GetPVarInt(i, "Einweisung") == 0)
		    return SendClientMessage(playerid, Rot, "Dieser Spieler braucht keine Serverführung.");
		if(GetPVarInt(i, "Einweisung") == 1)
		{
			new string[128];
			format(string,sizeof(string),"Der Administrator %s hat dein Anliegen auf eine Serverführung verweigert.",GetName(playerid));
			SendClientMessage(i,Weiß,string);
			SendClientMessage(playerid,Weiß,"Du hast dem Spieler die Serverführung verweigert!");
			InEinweisung[i] = 0, DeinEinweisung[i] = 0;
			InEinweisung[playerid] = 0, DeinEinweisung[playerid] = 0;
			DeletePVar(i, "Einweisung");
	   		return 1;
		}
	}
	return 1;
}

command(stopeinweisung, playerid ,params[])
{
    #pragma unused params
	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um eine Serverführung stoppen zu können.");
	if(InEinweisung[playerid] == 1)
 	{
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
		 	if(DeinEinweisung[i] == playerid)
		  	{
		   		new string[128];
				format(string,sizeof(string),"Der Administrator %s hat deine Serverführung beendet.Viel Spass weiterhin.",GetName(playerid));
				SendClientMessage(i,Gruen,string);
				SendClientMessage(playerid,Weiß,"Du hast die Serverführung beendet!");
		  		InEinweisung[i] = 0, DeinEinweisung[i] = 0;
		  		InEinweisung[playerid] = 0, DeinEinweisung[playerid] = 0;
		    	DeletePVar(i, "Einweisung");
		    	DeletePVar(i, "Einweisung2");
		    	DeletePVar(playerid, "Einweisung2");
		    	SetTimerEx("Jackboy",3323,false,"i",i);
		     	return 1;
		    }
		}
	}
	return 1;
}
//Zufälliges Tunen
command(ztunen, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sAdminlevel] < 5)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um den dein Auto zufällig tunen zu können!");
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid,Rot,"Du musst in /auf einem Fahrzeug sein um diesen Befehl nutzen zu können!");
		return 1;
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481)
	{
	    SendClientMessage(playerid,Rot,"Du kannst ein Fahrrad nicht tunen!");
	    return 1;
	}
	new aauto = GetPlayerVehicleID(playerid);
	TuneVehicleRandomly(aauto);
	SendClientMessage(playerid,Gelb,"Dein Fahrzeug wurde erfolgreich mit zufälligen Tuningteilen getunt!");
	return 1;
}
//Funmodus
command(funmodusx, playerid, params[])
{
	#pragma unused params
	if(sStats[playerid][sAdminlevel] < 5)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um den Funmodus aktivieren/deaktivieren zu können!");
	if(GetPVarInt(playerid, "InDrift") == 1)
	return SendClientMessage(playerid, Rot, "Während du auf der Driftstrecke bist kannst du deinen Funmodus nicht aktivieren!");
	if(PlayerPaintballing[playerid] != 0)
	return SendClientMessage(playerid, Rot, "Du kannst deinen Funmodus nicht aktivieren während du in einem Paintballmatch bist!");

	if(GetPVarInt(playerid, "FunModus") == 0)
	{
		SetPVarInt(playerid, "FunModus", 1);
		SendClientMessage(playerid,Gelb,"Du hast den Funmodus für dich aktiviert!");
	}
	else if(GetPVarInt(playerid, "FunModus") == 1)
	{
		SetPVarInt(playerid, "FunModus", 0);
		SendClientMessage(playerid,Gelb,"Du hast den Funmodus für dich deaktiviert!");
	}
	return 1;
}
//Speicherungs Befehl
command(speichern,playerid,params[])
{
	#pragma unused params
	if(IstSpielerAdmin(playerid, 2))
	{
		if(GetPVarInt(playerid, "Adminduty") == 1)
		{
			Speicherung();
			return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du musst zuerst als Admin im Einsatz sein um den Server speichern zu können!");
		    return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Speicherungsx Befehl
command(speichernx,playerid,params[])
{
	#pragma unused params
	if(IstSpielerAdmin(playerid, 2))
	{
		if(GetPVarInt(playerid, "Adminduty") == 1)
		{
			Speicherung();
			Fight_Close();
			return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du musst zuerst als Admin im Einsatz sein um den Server speichern zu können!");
		    return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Hauserstellen (Hauscar)
command(hausauto, playerid, params[])
{
    #pragma unused params
    return cmd_hauscar(playerid, params);
}
command(hauscar,playerid,params[])
{
	new string[128];
	if(IstSpielerAdmin(playerid, 5))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot, "Du musst in/auf einem Fahrzeug sein, um die Position des Hausfahrzeuges zu speichern!");
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Administrator im Einsatz sein, um diesen Befehl nutzen zu können.");
		if(GetPVarInt(playerid, "Hauscar") < 1)
		return SendClientMessage(playerid,Rot,"Du bist nicht in der Hauserstellung!");
		new Float:x88,Float:y88,Float:z88,Float:Angle;
		GetVehicleZAngle(GetPlayerVehicleID(playerid),Angle);
		GetVehiclePos(GetPlayerVehicleID(playerid),x88,y88,z88);
		HouseInfo[sStats[playerid][sHausE]][hCarSpawnX] = x88;
		HouseInfo[sStats[playerid][sHausE]][hCarSpawnY] = y88;
		HouseInfo[sStats[playerid][sHausE]][hCarSpawnZ] = z88;
		HouseInfo[sStats[playerid][sHausE]][hCarSpawnRot] = Angle;
		format(string, sizeof(string), "Hausauto Spawn von Haus %d : %f/%f/%f/%f",sStats[playerid][sHausE], x88,y88,z88,Angle);
		SendClientMessage(playerid, Gelb, string);
		SetPVarInt(playerid, "Hauscar", 0);
		ShowPlayerDialog(playerid,HAUSERSTELLEN5,DIALOG_STYLE_MSGBOX,"Haus Erstell Prozess 6/6","{FFFFFF}Das {FFA000}Haus{FFFFFF} wurde erfolgreich {FFA000}erstellt{FFFFFF} und {FFA000}gespeichert{FFFFFF}!\nes kann jederzeit mit {FFA000}/edithaus{FFFFFF} verändert werden.\nDas {FFA000}Haus{FFFFFF} ist jetzt {FFA000}einsatzbereit{FFFFFF}.","OK","");
		sStats[playerid][sHausE] = 0;
		SaveSonstiges();
		SaveHaus();
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}

//Showint für das Haus
command(showint,playerid,params[])
{
	#pragma unused params
	if(IstSpielerAdmin(playerid, 5))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um diesen Befehl nutzen zu können.");
		ShowPlayerDialog(playerid,HAUSERSTELLEN7,DIALOG_STYLE_INPUT,"Haus Innenräume","{FFFFFF}Welches {FFA000}Hausinterior{FFFFFF} möchtest du dir anschauen?","Anschauen","Abbrechen");
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Edithaus
command(edithaus, playerid, params[])
{
	#pragma unused params
	new string[128], Usage[65], Wert;
	if(sStats[playerid][sAdminlevel] < 5)
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl nutzen zu können!");
	if(sscanf(params, "sd",Usage,Wert))
	{
		ClearChat(playerid);
		SendClientMessage(playerid, Weiß, "Befehl: /edithaus [Option] [Wert]");
		SendClientMessage(playerid, Gelb2, "Verfügbare Optionen: Preis, Level, Interior, Mieter, Max.Mieter");
		return 1;
	}
	for(new h = 0; h < Houses_Index; h++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		{
			if(strcmp(Usage, "Preis", true) == 0)
			{
				format(string, sizeof(string), "Du hast den Preis des Hauses %d auf %d gesetzt!",h,Wert);
				SendClientMessage(playerid, Gelb, string);
				HouseInfo[h][hValue] = Wert;
				UpdateHouseLabel(h);
				return 1;
			}
			if(strcmp(Usage, "Level", true) == 0)
			{
				format(string, sizeof(string), "Du hast das Level des Hauses %d auf %d gesetzt!",h,Wert);
				SendClientMessage(playerid, Gelb, string);
				HouseInfo[h][hLevel] = Wert;
				UpdateHouseLabel(h);
				return 1;
			}
			if(strcmp(Usage, "Interior", true) == 0)
			{
				format(string, sizeof(string), "Du hast das Interior des Hauses %d auf %d gesetzt!",h,Wert);
				SendClientMessage(playerid, Gelb, string);
				HouseInfo[h][hLevel] = Wert;
				return 1;
			}
			if(strcmp(Usage, "Mieter", true) == 0)
			{
				format(string, sizeof(string), "Du hast die aktuellen Mieter des Hauses %d auf %d gesetzt!",h,Wert);
				SendClientMessage(playerid, Gelb, string);
				HouseInfo[h][hMieter] = Wert;
				UpdateHouseLabel(h);
				return 1;
			}
			if(strcmp(Usage, "Max.Mieter", true) == 0)
			{
				format(string, sizeof(string), "Du hast die maximale Mieter Anzahl des Hauses %d auf %d gesetzt!",h,Wert);
				SendClientMessage(playerid, Gelb, string);
				HouseInfo[h][hMaxMieter] = Wert;
				UpdateHouseLabel(h);
				return 1;
			}
		}
	}
	return 1;
}
//Hauserstellen
command(hcreate, playerid, params[])
{
    #pragma unused params
    return cmd_hauserstellen(playerid, params);
}
command(hauserstellen,playerid,params[])
{
	#pragma unused params
	if(IstSpielerAdmin(playerid, 5))
	{
		if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, Rot, "Du kannst diesen Befehl nicht benutzen während du in/auf einem Fahrzeug bist!");
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um diesen Befehl nutzen zu können.");
		ShowPlayerDialog(playerid,HAUSERSTELLEN,DIALOG_STYLE_MSGBOX,"Haus Erstell Prozess 1/6","{FFFFFF}Soll das neue {FFA000}Haus{FFFFFF} hier erstellt werden?","Ja","Nein");
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Ausraub Systeme ausschalten
command(norob, playerid, params[])
{
	#pragma unused params
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128];
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um die Raubsysteme aus/einschalten zu können.");
		if ((!norob))
		{
			norob = 1;
			SendClientMessage(playerid, Gelb2, "Raubsysteme ausgeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat die Raubsysteme System ausgeschaltet (/norob)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Raubsystem ausgeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
		else if ((norob))
		{
			norob = 0;
			SendClientMessage(playerid, Gelb2, "Raubsysteme eingeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat die Raubsysteme System eineschaltet (/norob)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Raubsystem eingeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//Eventsystem ausschalten
command(noevent, playerid, params[])
{
	#pragma unused params
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128];
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um das Eventsystem aus/einschalten zu können.");
		if ((!noevent))
		{
			noevent = 1;
			SendClientMessage(playerid, Gelb2, "Eventsystem ausgeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Eventsystem ausgeschaltet (/noevent)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Eventsystem ausgeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
		else if ((noevent))
		{
			noevent = 0;
			SendClientMessage(playerid, Gelb2, "Eventsystem eingeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Eventsystem eingeschaltet (/noevent)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Eventsystem eingeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//Nob ausschalten
command(nobchat, playerid, params[])
{
	#pragma unused params
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128];
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um das Eventsystem aus/einschalten zu können.");
		if ((!nob))
		{
			nob = 1;
			SendClientMessage(playerid, Gelb2, "/b Chat ausgeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat den /b Chat ausgeschaltet (/nobchat)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den /b Chat ausgeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
		else if ((nob))
		{
			nob = 0;
			SendClientMessage(playerid, Gelb2, "/b Chat ausgeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat den /b Chat eingeschaltet (/nobchat)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat hat den /b Chat eingeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//Anticheat System ausschalten
command(nowerbung, playerid, params[])
{
	#pragma unused params
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128];
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um das Werbesystem aus/einschalten zu können.");
		if (adopen == 0 || adopen == 1)
		{
			adopen = 2;
			TextDrawSetString(Ad2, "~r~Das Werbesystem wurde von einem Administrator gesperrt!");
			SendClientMessage(playerid, Gelb2, "Werbesystem ausgeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Werbesystem ausgeschaltet (/nowerbung)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Werbesystem ausgeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
		else if (adopen == 2)
		{
			adopen = 0;
			TextDrawSetString(Ad2, "~g~Werbung: ~w~Hier kannst du eine Werbung verfassen. ~y~Kontakt: ~w~Werbung [Bei einem Werbepunkt /ad]");
			SendClientMessage(playerid, Gelb2, "Werbesystem eingeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Werbesystem eingeschaltet (/nowerbung)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Werbesystem eingeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//Einweisungs System ausschalten
command(noeinweisung, playerid, params[])
{
	#pragma unused params
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128];
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um das Einweisungssystem aus/einschalten zu können.");
		if ((!noeinweisung))
		{
			noeinweisung = 1;
			SendClientMessage(playerid, Gelb2, "Einweisungssystem ausgeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Einweisungssystem ausgeschaltet (/noeinweisung)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Einweisungssystem ausgeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
		else if ((noeinweisung))
		{
			noeinweisung = 0;
			SendClientMessage(playerid, Gelb2, "Einweisungssystem eingeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Einweisungssystem eingeschaltet (/noeinweisung)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Einweisungssystem eingeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//Gangwartest ausschalten
command(gangwartest, playerid, params[])
{
	#pragma unused params
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128];
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um das Gangwarsystem testen zu können.");
		if (testphase == 0)
		{
			testphase = 1;
			SendClientMessage(playerid, Gelb2, "Gangwar Test System ausgeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Gangwar Test System ausgeschaltet (/gangwartest)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Gangwar Test System ausgeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
			return 1;
		}
		else if (testphase == 1)
		{
			testphase = 0;
			SendClientMessage(playerid, Gelb2, "Gangwar Test System eingeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Gangwar Test System eingeschaltet (/gangwartest)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Gangwar Test System eingeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//Anticheat System ausschalten
command(noacheat, playerid, params[])
{
	#pragma unused params
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128];
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um das Anti-Cheat aus/einschalten zu können.");
		if ((!noacheat))
		{
			noacheat = 1;
			SendClientMessage(playerid, Gelb2, "Anti-Cheat ausgeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Anti-Cheat System ausgeschaltet (/noacheat)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Anti-Cheat System ausgeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
		else if ((noacheat))
		{
			noacheat = 0;
			SendClientMessage(playerid, Gelb2, "Anti-Cheat eingeschaltet!");
			format(string, sizeof(string), "Warnung: %s[%d] hat das Anti-Cheat System eingeschaltet (/noacheat)!", GetName(playerid),playerid);
			SendAdminMessage(Rot, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Anti-Cheat System eingeschaltet.",day,month,year,hour,minute,second,GetName(playerid));
			AdminLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//Warn Befehl
command(warn, playerid, params[])
{
	new string[128], reason[128], id;
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 2)
	    return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um diesen Befehl nutzen zu können.");
	if(sscanf(params, "us", id, reason))
	    return SendClientMessage(playerid, Weiß, "Befehl: /warn [Name/ID] [Grund]");
	if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(id == playerid)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber verwarnen!");
	if(IsPlayerNPC(id))
		return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots verwarnen!");
	if(sStats[id][sAdminlevel] > sStats[playerid][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator verwarnen welcher ein höheres Administratorlevel hat wie du!");

	if(sStats[playerid][sWarns] == 0)
	{
	    sStats[playerid][sWarns] += 1;
	    format(string, sizeof(string), "* Administrator %s(%d) hat %s(%d) verwarnt. Grund: %s [%d/3]", GetName(playerid), playerid, GetName(id), id, reason, sStats[playerid][sWarns]);
	    SendClientMessageToAll(Rot, string);
		format(Query, sizeof(Query), "UPDATE `accounts` SET `warning1` = '%s' WHERE `name` = '%s'", reason, GetName(id));
		mysql_query(Query);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s verwarnt. Grund: %s.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),reason);
		AdminLog(string);
	}
	else if(sStats[playerid][sWarns] == 1)
	{
	    sStats[playerid][sWarns] += 1;
	    format(string, sizeof(string), "* Administrator %s(%d) hat %s(%d) verwarnt. Grund: %s [%d/3]", GetName(playerid), playerid, GetName(id), id, reason, sStats[playerid][sWarns]);
	    SendClientMessageToAll(Rot, string);
		format(Query, sizeof(Query), "UPDATE `accounts` SET `warning2` = '%s' WHERE `name` = '%s'", reason, GetName(id));
		mysql_query(Query);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s verwarnt. Grund: %s.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),reason);
		AdminLog(string);
	}
	else if(sStats[playerid][sWarns] == 2)
	{
		sStats[playerid][sWarns] += 1;
	    format(string, sizeof(string), "* Administrator %s(%d) hat %s(%d) verwarnt. Grund: %s [%d/3]", GetName(playerid), playerid, GetName(id), id, reason, sStats[playerid][sWarns]);
	    SendClientMessageToAll(Rot, string);
	    TogglePlayerControllable(id, false);
	    SendClientMessage(id, Rot, "Du wurdest vom Server gekickt, sofern du noch eine Verwarnung erhältst wirst du gebannt!");
		format(Query, sizeof(Query), "UPDATE `accounts` SET `warning3` = '%s' WHERE `name` = '%s'", reason, GetName(id));
		mysql_query(Query);
  		format(string, sizeof(string), "** %s(%d) wurde vom Server gekickt. Grund: 3/3 Verwarnungen", GetName(id), id);
	    SendClientMessageToAll(Rot, string);
	    KickLog(string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s verwarnt. Grund: %s.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),reason);
		AdminLog(string);
		SaveSpieler(id);
		Kick(id);
 	}
	else SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht!");
	return 1;
}
//checkwaffen für cops
command(checkweapons, playerid, params[])
{
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new id;
	if(IsACop(playerid))
	{
		if(sscanf(params, "u", id))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /checkwaffen [Name/ID]");
			SendClientMessage(playerid, Gelb, "Funktion: Überprüft die Waffen des Spielers X.");
			return 1;
  		}
		if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		if(IsPlayerNPC(id))
		return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots überprüfen!");
		if(sStats[id][sAdminlevel] > sStats[playerid][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator überprüfen welcher ein höheres Administratorlevel hat wie du!");

		Waffenanzeige(playerid,id);
		return 1;
 	}
 	else
 	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
 	}
}
//Anderen Spieler beobachten
command(checkwaffen, playerid, params[])
{
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128], id;
	if(IstSpielerAdmin(playerid, 1))
	{
		if(sscanf(params, "u", id))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /checkwaffen [Name/ID]");
			SendClientMessage(playerid, Gelb, "Funktion: Überprüft die Waffen des Spielers X.");
			return 1;
  		}
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um diesen Befehl nutzen zu können.");
		if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		if(IsPlayerNPC(id))
		return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots überprüfen!");
		if(sStats[id][sAdminlevel] > sStats[playerid][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator überprüfen welcher ein höheres Administratorlevel hat wie du!");

		Waffenanzeige(playerid,id);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s über die Waffen vom Spieler %s.",day,month,year,hour,minute,second,GetName(playerid),GetName(id));
		AdminLog(string);
		return 1;
 	}
 	else
 	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
 	}
}
//Anderen Spieler beobachten
command(spec, playerid, params[])
{
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128], id;
	if(IstSpielerAdmin(playerid, 1))
	{
		if(sscanf(params, "u", id))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /spec [Name/ID]");
			SendClientMessage(playerid, Gelb, "Funktion: Beobachtet Spieler X.");
			return 1;
  		}
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um diesen Befehl nutzen zu können.");
		if(GetPVarInt(playerid, "Spectate") > 0)
		return SendClientMessage(playerid,Rot,"Du beobachtest schon einen Spieler, benutze /specoff um das beobachten abzubrechen!");
		if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		if(id == playerid)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber beobachten!");
		if(IsPlayerNPC(id))
		return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots beobachten!");
		if(sStats[id][sAdminlevel] > sStats[playerid][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator beobachten welcher ein höheres Administratorlevel hat wie du!");

		ClearChat(playerid);
		TogglePlayerSpectating(playerid, 1);
		PlayerSpectatePlayer(playerid, id);
		SetPlayerInterior(playerid,GetPlayerInterior(id));
		gSpectateID[playerid] = id;
		gSpectateType[playerid] = ADMIN_SPEC_TYPE_PLAYER;
		SetPVarInt(playerid,"Spectate",1);
		new Float:var,Float:var2;
		GetPlayerHealth(id,var);
		GetPlayerArmour(id,var2);
  		format(string, sizeof(string), "Spieler %s: ",GetName(id));
        SendClientMessage(playerid,Gelb2,string);
        format(string, sizeof(string), "Leben: %f | Rüstung: %f",var, var2);
        SendClientMessage(playerid,Gelb2,string);
        if(GetPlayerWeapon(id) > 0)
		{
	        format(string, sizeof(string), "Der Spieler ist außerdem im Besitz von Waffen. /checkwaffen!");
	        SendClientMessage(playerid,Gelb2,string);
		}
		SendClientMessage(playerid,Weiß,"Um das beobachten zu beenden benutze /specoff!");
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s beobachtet den Spieler %s.",day,month,year,hour,minute,second,GetName(playerid),GetName(id));
		AdminLog(string);
		return 1;
 	}
 	else
 	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
 	}
}
command(specoff, playerid, params[])
{
	#pragma unused params
	if(IstSpielerAdmin(playerid, 1))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um diesen Befehl nutzen zu können.");
		if(GetPVarInt(playerid, "Spectate") < 1)
		return SendClientMessage(playerid,Rot,"Du beobachtest keinen Spieler, benutze /spec um einen zu beobachten!");

		ClearChat(playerid);
		TogglePlayerSpectating(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid,0);
		SetPVarInt(playerid,"Spectate",0);
		gSpectateID[playerid] = INVALID_PLAYER_ID;
		gSpectateType[playerid] = ADMIN_SPEC_TYPE_NONE;
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Mute
command(mute, playerid, params[])
{
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[128], id;
	if(IstSpielerAdmin(playerid, 1))
	{
		if(sscanf(params, "u", id))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /mute [Namen/ID]");
			SendClientMessage(playerid, Gelb, "Funktion: Un/Mutet den Spieler X.");
			return 1;
		}
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um diesen Befehl nutzen zu können.");
		if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		if(id == playerid)
		return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber muten/entmuten!");
		if(IsPlayerNPC(id))
		return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots muten/entmuten!");
		if(sStats[id][sAdminlevel] > sStats[playerid][sAdminlevel])
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator muten/entmuten welcher ein höheres Administratorlevel hat wie du!");
		if(sStats[id][sMute] == 0)
		{
			format(string, sizeof(string), "Administrator %s hat dich gemutet!", GetName(playerid));
			SendClientMessage(id, Rot, string);
			format(string, sizeof(string), "Du hast den Spieler %s gemutet!", GetName(id));
			SendClientMessage(playerid, Rot, string);
			format(string, sizeof(string), "Administrator %s hat %s gemutet.", GetName(playerid), GetName(id));
			SendClientMessageToAll(Rot,string);
			sStats[id][sMute] = 1;
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s gemutet.",day,month,year,hour,minute,second,GetName(playerid),GetName(id));
			AdminLog(string);
		}
		else
		{
			format(string, sizeof(string), "Administrator %s hat dich entmutet!", GetName(playerid));
			SendClientMessage(id, Rot, string);
			format(string, sizeof(string), "Du hast den Spieler %s entmutet!", GetName(id));
			SendClientMessage(playerid, Rot, string);
			format(string, sizeof(string), "Administrator %s hat %s entmutet.", GetName(playerid), GetName(id));
			SendClientMessageToAll(Rot,string);
			sStats[id][sMute] = 0;
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s entmutet.",day,month,year,hour,minute,second,GetName(playerid),GetName(id));
			AdminLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}

//Makeleader
command(makeleader, playerid, params[])
{
	new id,level,string[128];
 	if(sStats[playerid][sAdminlevel] < 4)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl nutzen zu können!");
	if(sscanf(params, "ud", id, level))
		return SendClientMessage(playerid, Weiß, "Befehl: /makeleader [Name/ID] [FraktionsID]");
	if(level > 6 || level < 0)
	    return SendClientMessage(playerid, Rot, "Es gibt nur 6 Fraktionen!");

  		SetPlayerFrakSkin(id);
    	sStats[id][sMitglied] = 0;
  		sStats[id][sLeiter] = level;
  		sStats[id][sRank] = 6;
  		sStats[id][sFraktion] = level;
  		sStats[id][sArbeitslosengeld] = 0;
    	SetFraktionsSpawn(id);
     	format(string, sizeof(string), "Du bist nun Leader der Fraktion %s!",GetPlayerFraktion(id));
        SendClientMessage(id,Weiß,string);
    	format(string, sizeof(string), "Du hast %s zum Leader der Fraktion %s gemacht!",GetName(id), GetPlayerFraktion(id));
    	SendClientMessage(playerid,Weiß,string);
		return 1;
}

//Fraktionsliste
command(fraktionsliste, playerid, params[])
{
    #pragma unused params
   	if(sStats[playerid][sAdminlevel] < 4)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
 	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl nutzen zu können!");
    ClearChat(playerid);
    SendClientMessage(playerid,Gelb,"Verfügbare Fraktionen:");
    SendClientMessage(playerid,Weiß,"1 - Bayside Police-Deparment");
    SendClientMessage(playerid,Weiß,"2 - Platzhalter");
    SendClientMessage(playerid,Weiß,"3 - Bayside Medical-Center");
    SendClientMessage(playerid,Weiß,"4 - Bayside-Newstime a.G");
    SendClientMessage(playerid,Weiß,"5 - MS-14");
    SendClientMessage(playerid,Weiß,"6 - Crip or Die");
    return 1;
}

//Makeadmin
command(makeadmin, playerid, params[])
{
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new pid,level,string[160];
	if(IstSpielerAdmin(playerid, 5) || IsPlayerAdmin(playerid))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1 && !IsPlayerAdmin(playerid) && sStats[playerid][sAdminlevel] != 0)
			return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein, um diesen Befehl nutzen zu können.");
		if(sscanf(params, "ud", pid,level))
	{
		SendClientMessage(playerid, Weiß, "Verwendung: /makeadmin [Name/ID] [Level]");
		SendClientMessage(playerid,Gelb,"Macht den angegebenen Spieler zum Administrator!");
		return 1;
	}
	if(pid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
 	if(sStats[pid][sLink] == 0 && !IsPlayerAdmin(playerid) && sStats[playerid][sAdminlevel] != 0)
	{
		SendClientMessage(playerid,Rot,"Der Spieler hat sich noch nicht mit unserem UCP verlinkt (/linkhelp)!");
		return 1;
	}
		if(pid == INVALID_PLAYER_ID)
		{
			SendClientMessage(playerid, Rot, "Dieser Spieler existiert nicht!");
			return 1;
		}
		if(level > 5)
		{
			SendClientMessage(playerid,Rot,"Das maximale Adminlevel ist 5!");
			return 1;
		}
		if(IsPlayerNPC(pid))
		{
			return SendClientMessage(playerid,Rot,"Du kannst keinen Bot/NPC zum Administrator machen!");
		}
		if(sStats[pid][sAdminlevel] == level)
		{
			return SendClientMessage(playerid,Rot,"Der Spieler hat schon das angegebene Adminlevel!");
		}
		else
		{
			format(string, sizeof(string), "Du wurdest von %s zum Administrator der Stufe %d gemacht.",GetName(playerid),level);
			SendClientMessage(pid,Gelb,string);
			format(string, sizeof(string), "Du hast %s zum Administrator der Stufe %d gemacht.",GetName(pid),level);
			SendClientMessage(playerid,Gelb,string);
			format(string, sizeof(string), "Warnung: %s hat %s zum Administrator der Stufe %d gemacht.",GetName(playerid),GetName(pid),level);
			SendAdminMessage(Rot, string);
			sStats[pid][sAdminlevel] = level;
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s zum Administrator der Stufe %d gemacht.",day,month,year,hour,minute,second,GetName(playerid),GetName(pid),level);
			AdminLog(string);
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Adminduty
command(aduty, playerid, params[])
{
	#pragma unused params
	new string[128];
	//Adminränge
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") == 0)
		{
			SetPVarInt(playerid, "Adminduty", 1);
			format(string, sizeof(string), "{FFFF00}Admin: {FF4C4C}%s[%d] {FFFF00}ist nun als %s im Einsatz.", GetName(playerid),playerid, GetPlayerAdminRank(playerid));
			TextDrawShowForPlayer(playerid, OTickets);
			SetPlayerColor(playerid, Rot);
		}
		else if(GetPVarInt(playerid, "Adminduty") == 1)
		{
			SetPVarInt(playerid, "Adminduty", 0);
			SetPVarInt(playerid, "Funmodus", 0);
			format(string, sizeof(string), "{FFFF00}Admin: {FF4C4C}%s[%d] {FFFF00}ist nicht mehr als %s im Einsatz.", GetName(playerid),playerid, GetPlayerAdminRank(playerid));
			TextDrawHideForPlayer(playerid, OTickets);
			SetSpielerFarbe(playerid);
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	    return 1;
	}
	SendClientMessageToAll(Gelb, string);
	return 1;
}

//Waffenerstellung als Admin
command(giveweapon, playerid, params[])
{
	#pragma unused params
	return cmd_givegun(playerid, params);
}
command(givegun, playerid, params[])
{
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new id,weapon,ammo,string[128],waffenname[65];
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl ausführen zu können!");
		if(PlayerPaintballing[playerid] != 0)
		return SendClientMessage(playerid, Rot, "Du kannst dir keine Waffen geben während du in einem Paintballmatch bist!");
		if(sscanf(params, "udd", id, weapon, ammo))
		{
			 ClearChat(playerid);
			 SendClientMessage(playerid, Weiß, "Befehl: /givegun [Name/ID] [WaffenID] [Munition]"),
			 SendClientMessage(playerid, COLOR_GREY,"--------------------------------------------------------------------------------------------------------------------------");
			 SendClientMessage(playerid, Gelb, "1: Schlagring 2: Golfschläger 3: Schlagstock 4: Messer 5: Baseballschläger 6: Schaufel 7: Billardstock 8: Katana 9: Kettensäge");
			 SendClientMessage(playerid, Gelb, "10: Lila Dildo 11: Kleiner weißer Vibrator 12: Großer weißer Vibrator 13: Silberner Vibrator 14: Blumen 15: Rohrstock 16: Granate");
			 SendClientMessage(playerid, Gelb, "17: Rauchgranate 18: Molotov Cocktail 19: Fahrzeug Rakete 20: Hydra Rakete 21: Jetpack 22: 9mm 23: Gedämpfte 9mm 24: Deagle");
			 SendClientMessage(playerid, Gelb, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Country Rifle");
			 SendClientMessage(playerid, Gelb, "25: Shotgun 34: Sniper 35: Rocket Launcher 36: HS Rocket Launcher 37: Flammenwerfer 38: Minigun 39: Paketbomben");
			 SendClientMessage(playerid, Gelb, "40: Detonator 41: Sprühdose 42: Feuerlöscher 43: Kamera 44: Nachtsichtgerät 45: Infrarotsichtgerät 46: Fallschirm");
			 SendClientMessage(playerid, COLOR_GREY,"--------------------------------------------------------------------------------------------------------------------------");
			 return 1;
		}
		if(weapon < 1||weapon > 46)
		return SendClientMessage(playerid, Rot, "Falsche WaffenID!");
		if(ammo < 1 || ammo > 500)
		return SendClientMessage(playerid, Rot, "Die Munition kann nicht kleiner als 1 oder größer als 500 sein!");
		if(IsPlayerNPC(id))
	    return SendClientMessage(playerid,Rot,"Du kannst keinem NPC/Bot eine Waffe geben!");
		if(id == INVALID_PLAYER_ID)
 		return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");

	   	GetWeaponName(weapon, waffenname, 64);
 		GivePlayerWeaponEx(id,weapon,ammo);
		format(string, sizeof(string), "Du hast dem Spieler %s eine neue Waffe gegeben (%s)(Munition: %d)!",GetName(id),waffenname,ammo);
		SendClientMessage(playerid,Gelb,string);
		format(string, sizeof(string), "Du hast vom Administrator %s eine neue Waffe erhalten (%s)(Munition: %d)!",GetName(playerid),waffenname,ammo);
		SendClientMessage(id,Gelb,string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s eine neue Waffe gegeben (%s)(Munition: %d).",day,month,year,hour,minute,second,GetName(playerid),GetName(id),waffenname,ammo);
		WeaponLog(string);
		format(string, sizeof(string), "Warnung: %s[%d] hat dem Spieler %s[%d] eine neue Waffe gegeben (%s)(Munition: %d)!", GetName(playerid),playerid,GetName(id),id,waffenname,ammo);
		SendAdminMessage(Rot, string);
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Veh Fahrzeug Erstellung für Admins
command(veh, playerid, params[])
{
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new vehicle[30], color1, color2, string[128];
	if(IstSpielerAdmin(playerid, 5))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl ausführen zu können!");
		if(sscanf(params, "s[30]ii", vehicle, color1, color2))
		return SendClientMessage(playerid, Weiß, "Befehl: /veh [Model/Name] [Farbe1] [Farbe2]"),
		SendClientMessage(playerid, Gelb, "Funktion: Erstellt ein Auto deiner Wahl.");

		new idx = GetVehicleModelIDFromName(vehicle);
		if(idx == -1)
		{
			if(idx < 400 || idx > 611)
			return SendClientMessage(playerid, Rot, "Error: Falsche/r Model ID/Name!");
		}

        new Float:X,Float:Y,Float:Z,Float:Angle;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);

		CreateServerVehicle(0,idx,X,Y+2,Z,Angle,color1,color2,100);
		SendClientMessage(playerid,Gelb,"Du hast erfolgreich ein neues Fahrzeug erstellt!");

		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat ein neues Fahrzeug erstellt (%d).",day,month,year,hour,minute,second,GetName(playerid),idx);
		AdminLog(string);
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Check
command(check, playerid, params[])
{
    #pragma unused params
	new targetid,string[128];
	if(sStats[playerid][sAdminlevel] < 1)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if(sscanf(params, "u", targetid))
	return SendClientMessage(playerid, Weiß, "Befehl: /check [Name/ID]");
	if(targetid == playerid)
	return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber auschecken!");
	if(targetid == INVALID_PLAYER_ID)
	return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(targetid))
	return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots auschecken!");
	if(sStats[targetid][sAdminlevel] > sStats[playerid][sAdminlevel])
	return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator auschecken welcher ein höheres Administratorlevel hat wie du!");

	format(string, sizeof(string), "* Der Spieler %s[%d] hat %d auf der Hand und %d auf der Bank!", GetName(targetid),targetid, GetPlayerEuros(targetid),sStats[targetid][sKonto]);
	SendClientMessage(playerid,Gelb, string);
	return 1;
}
//Check
command(getip, playerid, params[])
{
    #pragma unused params
    new targetid,string[128];
	if(sStats[playerid][sAdminlevel] < 2)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if(sscanf(params, "u", targetid))
	return SendClientMessage(playerid, Weiß, "Befehl: /getip [Name/ID]");
	if(targetid == playerid)
	return SendClientMessage(playerid,Rot,"Du kannst dich nicht deine eigene IP herausfinden!");
	if(targetid == INVALID_PLAYER_ID)
	return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(targetid))
	return SendClientMessage(playerid,Rot,"NPC/Bots haben keine IP!");
	if(sStats[targetid][sAdminlevel] > sStats[playerid][sAdminlevel])
	return SendClientMessage(playerid, Rot, "Du kannst keine Administrator IP von Administrator herrausfinden welcher ein höheres Administratorlevel hat wie du!");

	new playersip[17];
	GetPlayerIp(targetid,playersip,sizeof(playersip));
	format(string, sizeof(string), "* Der Spieler %s[%d] hat folgende IP: !", GetName(targetid),targetid, playersip);
	SendClientMessage(playerid,Gelb, string);
	return 1;
}
//Freeze
command(unfreeze, playerid, params[])
{
	new targetid,string[128];
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 1)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if(sscanf(params, "u", targetid))
	return SendClientMessage(playerid, Weiß, "Befehl: /unfreeze [Name/ID]");
	if(targetid == INVALID_PLAYER_ID)
	return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(IsPlayerNPC(targetid))
	return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots entfrieren!");
	if(sStats[targetid][sAdminlevel] > sStats[playerid][sAdminlevel])
	return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator entfrieren welcher ein höheres Administratorlevel hat wie du!");

    TogglePlayerControllable(targetid, true);
   	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s entfriert", GetName(targetid),targetid, GetName(playerid));
	SendAdminMessage(Rot, string);
	format(string,sizeof(string),"Du hast den Spieler %s entfriert.",GetName(targetid));
	SendClientMessage(playerid,Weiß,string);
	format(string,sizeof(string),"Du wurdest von Administrator %s entfriert.",GetName(playerid));
	SendClientMessage(targetid,Weiß,string);
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s entfriert.",day,month,year,hour,minute,second,GetName(playerid),GetName(targetid));
	AdminLog(string);
	return 1;
}
//Freeze
command(freeze, playerid, params[])
{
	new targetid,string[128];
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 1)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if(sscanf(params, "u", targetid))
	return SendClientMessage(playerid, Weiß, "Befehl: /freeze [Name/ID]");
	if(targetid == INVALID_PLAYER_ID)
	return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(targetid == playerid)
	return SendClientMessage(playerid,Rot,"Du kannst dich nicht selber einfrieren!");
	if(IsPlayerNPC(targetid))
	return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots einfrieren!");
	if(sStats[targetid][sAdminlevel] > sStats[playerid][sAdminlevel])
	return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator einfrieren welcher ein höheres Administratorlevel hat wie du!");

	//Zur Sicherheit
	Pate = 0;
	nutte = 0;
    TogglePlayerControllable(targetid, false);
   	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s eingefroren", GetName(targetid),targetid, GetName(playerid));
	SendAdminMessage(Rot, string);
	format(string,sizeof(string),"Du hast den Spieler %s eingefroren.",GetName(targetid));
	SendClientMessage(playerid,Weiß,string);
	format(string,sizeof(string),"Du wurdest von Administrator %s eingefroren.",GetName(playerid));
	SendClientMessage(targetid,Weiß,string);
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s eingefroren.",day,month,year,hour,minute,second,GetName(playerid),GetName(targetid));
	AdminLog(string);
	return 1;
}
//Gotoxy
command(gotoxyz, playerid, params[])
{
	if(sStats[playerid][sAdminlevel] < 2)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	new Float:posx,Float:posy,Float:posz;
	if(sscanf(params,"fff",posx,posy,posz))return SendClientMessage(playerid, Weiß,"Befehl: /setage [Alter]");
	
	SetPlayerPos(playerid,posx,posy,posz);
	SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich gelöscht!");
	return 1;
}
//Goto
command(goto, playerid, params[])
{
	new targetid,string[128];
	new Float:PosX, Float:PosY, Float:PosZ;
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 2)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if(sscanf(params, "u", targetid))
	return SendClientMessage(playerid, Weiß, "Befehl: /goto [Name/ID]");
	if(targetid == INVALID_PLAYER_ID)
	return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(targetid == playerid)
	return SendClientMessage(playerid,Rot,"Du kannst dich nicht zu dich selber teleportieren!");
	if(IsPlayerNPC(targetid))
	return SendClientMessage(playerid,Rot,"Du kannst dich nicht zu NPC/Bots teleportieren!");
    GetPlayerPos(targetid, PosX, PosY, PosZ);

	if(!IsPlayerInAnyVehicle(playerid))
 	{
		SetPlayerPosEx(playerid, PosX, PosY, PosZ);
	}
	else
	{
		if(GetPlayerInterior(targetid) > 0)
			return SendClientMessage(playerid,Rot,"Der Spieler zudem du dich teleportieren möchtest befindet sich in einem Interior, bitte steige zuerst von deinem Fahrzeug ab/aus!");
	    SetVehiclePos(GetPlayerVehicleID(playerid),PosX, PosY, PosZ);
	}

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));
	format(string,sizeof(string),"Du hast dich erfolgreich zum Spieler %s teleportiert.",GetName(targetid));
	SendClientMessage(playerid,Weiß,string);
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum Spieler %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),GetName(targetid));
	TeleLog(string);
	return 1;
}
command(vehinfo, playerid, params[])
{
    #pragma unused params
    new string[128];
   	if(sStats[playerid][sAdminlevel] < 5)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rot, "Du musst in/auf einem Fahrzeug sitzen!"); return 1;}

	new VID = GetPlayerVehicleID(playerid);
	new MID = GetVehicleModel(VID);

	format(string, sizeof(string), "Fahrzeug-ID: {FFFF00}%d", VID);
	SendClientMessage(playerid, Weiß, string);
	format(string, sizeof(string), "Model-ID: {FFFF00}%d", MID);
	SendClientMessage(playerid, Weiß, string);
	return 1;
}
//Gethere
command(gethere, playerid, params[])
{
	new targetid,string[128];
	new Float:PosX, Float:PosY, Float:PosZ;
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 2)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if(sscanf(params, "u", targetid))
	return SendClientMessage(playerid, Weiß, "Befehl: /goto [Name/ID]");
	if(targetid == INVALID_PLAYER_ID)
	return SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(targetid == playerid)
	return SendClientMessage(playerid,Rot,"Du kannst dich nicht zu dich selber teleportieren!");
	if(IsPlayerNPC(targetid))
	return SendClientMessage(playerid,Rot,"Du kannst keine NPC/Bots zu dir teleportieren!");
	if(sStats[targetid][sAdminlevel] > sStats[playerid][sAdminlevel])
	return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator zu dir teleportieren welcher ein höheres Administratorlevel hat wie du!");

	GetPlayerPos(playerid, PosX, PosY, PosZ);
	if(!IsPlayerInAnyVehicle(targetid))
 	{
		SetPlayerPosEx(targetid, PosX, PosY, PosZ);
	}
	else
	{
		if(GetPlayerInterior(playerid) > 0)
			return SendClientMessage(playerid,Rot,"Du befindest dich in einem Interior, bitte verlasse dieses erst bevor du den Spieler mit seinem Fahrzeug zu dir teleportierst!");
	    SetVehiclePos(GetPlayerVehicleID(targetid),PosX, PosY, PosZ);
	}
	SetPlayerInterior(targetid, GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	format(string,sizeof(string),"Administrator %s hat dich zu sich teleportiert.",GetName(playerid));
	SendClientMessage(targetid,Weiß,string);
	format(string,sizeof(string),"Du hast den Spieler %s zu dir teleportiert.",GetName(targetid));
	SendClientMessage(playerid,Weiß,string);
	format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s zu sich teleportiert.",day,month,year,hour,minute,second,GetName(playerid),GetName(targetid));
	TeleLog(string);
	return 1;
}
//BigEars
command(bigears, playerid, params[])
{
	new year, month, day;
	new hour,minute,second,string[128];
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(sStats[playerid][sAdminlevel] < 3)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if (!BigEar[playerid])
	{
		BigEar[playerid] = 1;
		SendClientMessage(playerid, Gelb, "Du kannst nun den kompletten Chatverlauf sehen.");
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sein /bigears aktiviert.",day,month,year,hour,minute,second,GetName(playerid));
		AdminLog(string);
	}
	else if (BigEar[playerid])
	{
		(BigEar[playerid] = 0);
		SendClientMessage(playerid, Gelb, "Du kannst nun nicht mehr den kompletten Chatverlauf sehen.");
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sein /bigears deaktiviert.",day,month,year,hour,minute,second,GetName(playerid));
		AdminLog(string);
	}
	return 1;
}

//startballon
command(startballon, playerid, params[])
{
	if(sStats[playerid][sAdminlevel] < 3)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	if(ballonn > 0)
	{
	    SendClientMessage(playerid,Rot,"Der Ballon befindet sich zurzeit in einem Rundflug!");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,Weiß,"Du hast eine neuen Ballonrundfahrt gestartet!");
	    KillTimer(TimerBalloon);
		SetTimer("RestartBallon", 1187, false);
	    return 1;
	}
}
//Supportsystem
command(supportsperre, playerid, params[])
{
    new string[128], id;
   	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
    if(sStats[playerid][sAdminlevel] < 2)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
    if(sscanf(params, "u", id))
		return SendClientMessage(playerid, Weiß, "Befehl: /supportsperre [Name/ID]");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um jemanden vom Support auschliessen zu können.");
	if(sStats[id][sAdminlevel] > 0)
		return SendClientMessage(playerid, Rot, "Du kannst keinen Administrator vom Support sperren!");
	if(id == INVALID_PLAYER_ID)
	   	return	SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	if(sStats[playerid][sSupportsperre] == 0)
	{
		format(string, sizeof(string), "Administrator %s hat dir eine Supportsperre gegeben!", GetName(playerid));
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Du hast %s eine Supportsperre gegeben.", GetName(id));
		SendClientMessage(playerid, Weiß, string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s eine Supportsperre gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id));
		AdminLog(string);
		sStats[id][sSupportsperre] = 1;
	}
	else
	{
		format(string, sizeof(string), "Administrator %s hat deine Supportsperre aufgehoben!", GetName(playerid));
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "Du hast die Supportsperre von %s aufgehoben.", GetName(id));
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Supportsperre von %s aufgehoben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id));
		AdminLog(string);
		sStats[id][sSupportsperre] = 0;
	}
    return 1;
}

command(tickets, playerid, params[])
{
    #pragma unused params
    new string[250];
  	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können!");
	ClearChat(playerid);
	SendClientMessage(playerid,Gelb2,"Offene Support-Tickets:");
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(GetPVarInt(i, "Supportt") == 1)
		{
		    format(string, sizeof(string),"{FFFFFF}Ticket von: {FFFF00}%s[%d] {FFFFFF}| {FFFFFF}Nachricht: {FFFF00}%s", GetName(i),i,sTicket[i]);
		    SendClientMessage(playerid, Weiß, string);
		}
    }
	return 1;
}

command(as, playerid, params[])
{
	#pragma unused params
	return cmd_acceptsupport(playerid, params);
}

command(weiterleiten, playerid, params[])
{
	new id;
	if(sscanf(params,"u",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /weiterleiten [ID/Name]");
	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um das Support Ticket weiterleiten zu können.");
  	if(GetPVarInt(id, "Support") == 1)
		return SendClientMessage(playerid, Rot, "Der Administrator bearbeitet gerade schon ein Support-Ticket!");
	if(GetPVarInt(playerid, "Support") == 1)
 	{
	    new Name[MAX_PLAYER_NAME], string[128];
	    GetPlayerName(playerid,Name,sizeof(Name));
	    SendClientMessage(playerid,Gruen,"Du hast das Support-Ticket erfolgreich weitergeleitet.");
		format(string,sizeof(string),"Der Administrator %s hat das Support-Ticket von % [Nachricht: %s] zu dir weitergeleitet!",Name,sTicket[playerid]);
		SendClientMessage(id,Gruen,string);
		format(string,sizeof(string),"Dein Support-Ticket wurde an %s %s weitergeleitet, du kannst nun mit ihm via Chat schreiben!",Name,sTicket[playerid]);
		SendClientMessage(DeinSupport[playerid],Gruen,string);
	 	SetPVarInt(id, "Support", 1);
	 	DeinSupport[DeinSupport[playerid]] = id;
	 	new sup = DeinSupport[playerid];
		DeinSupport[id] = sup;
		DeinSupport[playerid] = 0;
		SetPVarInt(playerid, "Support", 0);
		return 1;
    }
    else
    {
    	SendClientMessage(playerid,Rot,"Du bearbeitest zurzeit kein Support-Ticket!");
        return 1;
	}
}


command(acceptsupport, playerid, params[])
{
	new id;
	if(sscanf(params,"u",id))
		return SendClientMessage(playerid,Weiß,"Befehl: /acceptsupport [ID/Name]");
  	if(GetPVarInt(playerid, "Support") == 1)
		return SendClientMessage(playerid, Rot, "Du kannst nicht mehr als ein Support Ticket gleichzeitig bearbeiten!");
  	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um das Support Ticket bearbeiten zu können.");
	if(GetPVarInt(id, "Supportt") == 1)
 	{
	    new Name[MAX_PLAYER_NAME], string[128];
	    GetPlayerName(playerid,Name,sizeof(Name));
	    SendClientMessage(playerid,Gruen,"Du kannst nun im Supportchat mit dem Ticket Ersteller, schreiben benutze /closesupport um den Support zu beenden.");
		format(string,sizeof(string),"Der Administrator %s hat dein Support Ticket angenommen. Du kannst nun mit ihm via Chat kommunizieren!",Name);
		SendClientMessage(id,Gruen,string);
	 	SetPVarInt(id, "InSupport", 1);
		DeinSupport[id] = playerid;
		DeinSupport[playerid] = id;
		SetPVarInt(id, "Supportt", 0);
		SetPVarInt(id, "Support", 1);
		SetPVarInt(playerid, "Support", 1);
		new count=0;
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			if(IsPlayerConnected(i) && sStats[i][sAdminlevel] == 0 && GetPVarInt(i, "Supportt") == 1)
			{
			    count ++;
			}
		}
		format(string, sizeof(string), "Offene Tickets = %d", count);
		TextDrawSetString(OTickets, string);
		return 1;
    }
    else
    {
    	SendClientMessage(playerid,Rot,"Der Spieler hat kein Support-Ticket eröffnet!");
        return 1;
    }
}

command(closesupport, playerid ,params[])
{
  	if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	    return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um das Support Ticket schliessen zu können.");

		if(GetPVarInt(playerid, "Support") == 1)
	 	{
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
			 	if(DeinSupport[i] == playerid)
			    {
			    	new string[128];
					format(string,sizeof(string),"Der Administrator %s hat den Supportchat geschlossen.",GetName(playerid));
					SendClientMessage(i,Gruen,string);
					SendClientMessage(playerid,Weiß,"Du hast den Supportchat geschlossen!");
					SetPVarInt(i, "InSupport", 0), DeinSupport[i] = 0;
			  		SetPVarInt(playerid, "InSupport", 0), DeinSupport[playerid] = 0;
			  		SetPVarInt(playerid, "Support", 0);
			  		DeletePVar(i, "Supportt");
			  		DeletePVar(i, "Support");
			  		new count=0;
				 	for(new x = 0; x < MAX_PLAYERS; x++)
				 	{
						if(IsPlayerConnected(x) && sStats[x][sAdminlevel] == 0 && GetPVarInt(x, "Supportt") == 1)
						{
						    count ++;
						}
					}
					format(string, sizeof(string), "Offene Tickets = %d", count);
					TextDrawSetString(OTickets, string);
			  		return 1;
	    		}
			}
		}
		else
		{
			SendClientMessage(playerid,Rot,"Du bist gerade kein Supportticket am bearbeiten!");
 			return 1;
  		}
		return 1;
}
command(deletesupport, playerid ,params[])
{
	new i,string[128];
	if(sStats[playerid][sAdminlevel] < 1)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um das Support Ticket löschen zu können.");
	if(sscanf(params,"u",i))
	return SendClientMessage(playerid,Weiß,"Befehl: /acceptsupport [ID/Name]");
	if(GetPVarInt(i, "Supportt") == 1)
	{
		format(string,sizeof(string),"Administrator %s hat dein Support-Ticket gelöscht.",GetName(playerid));
		SendClientMessage(i,Gruen,string);
		SendClientMessage(playerid,Weiß,"Du hast das Support Ticket gelöscht!");
		SetPVarInt(i, "InSupport", 0), DeinSupport[i] = 0;
		SetPVarInt(playerid, "InSupport", 0), DeinSupport[playerid] = 0;
		DeletePVar(i, "Supportt");
		DeletePVar(i, "Support");
		new count=0;
	 	for(new x = 0; x < MAX_PLAYERS; x++)
	 	{
			if(IsPlayerConnected(x) && sStats[x][sAdminlevel] == 0 && GetPVarInt(x, "Supportt") == 1)
			{
			    count ++;
			}
		}
		format(string, sizeof(string), "Offene Tickets = %d", count);
		TextDrawSetString(OTickets, string);
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Der Spieler hat kein Support-Ticket eröffnet!");
		return 1;
	}
}
//Supportveh
command(supportcar, playerid, params[])
{
    #pragma unused params
    return cmd_supportveh(playerid, params);
}
command(supportveh, playerid, params[])
{
    #pragma unused params
	new string[128];
	if(IstSpielerAdmin(playerid, 2))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
			return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl ausführen zu können!");
 		if(IsPlayerInAnyVehicle(playerid))
	    {
	        SendClientMessage(playerid,Rot,"Du kannst auf/in einem Fahrzeug kein Supportauto erstellen!");
	        return 1;
	 	}
		if(GetPVarInt(playerid, "Supportveh") == 1)
		{
  			SendClientMessage(playerid,Rot,"Du hast schon ein Supportauto erstellt, bitte lösche dieses zuerst mit /delsupportveh!");
	        return 1;
		}

		new Float:X,Float:Y,Float:Z,Float:Angle;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);

		SupportVeh[playerid] = CreateServerVehicle(0,457,X,Y+2,Z,Angle,151,151,101);
		AddVehicleComponent(SupportVeh[playerid], 1010); // Nitro
		SetVehicleHealth(SupportVeh[playerid], 9999.0);
		SupportVehLight[playerid] = CreateObject(18646,0,0,-1000,0,0,0,100);
		AttachObjectToVehicle(SupportVehLight[playerid], SupportVeh[playerid], 0.449999,0.524999,1.350000,-2.700001,0.000000,0.000000);

		format(string,64,"-| Supportauto |-");
		supveh[playerid] = Create3DTextLabel(string,COLOR_PURPLE,0,0,0.08, 50, -1, 1);
		Attach3DTextLabelToVehicle(supveh[playerid], SupportVeh[playerid], 0.0, 0.0, 2.0);

		SendClientMessage(playerid,Gelb,"Du hast erfolgreich dein Supportauto erstellt!");
		SetPVarInt(playerid, "Supportveh", 1);
		return 1;
 	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	}
	return 1;
}

command(delsupportveh, playerid, params[])
{
    #pragma unused params
	if(IstSpielerAdmin(playerid, 2))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
			return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl ausführen zu können!");
		if(GetPVarInt(playerid, "Supportveh") == 0)
		{
  			SendClientMessage(playerid,Rot,"Du hast kein Supportauto erstellt, bitte erstelle erst eines mit /supportveh!");
	        return 1;
		}
		if(GetPVarInt(playerid, "Supportveh") == 1)
		{
			DestroyVehicle(SupportVeh[playerid]);
			Delete3DTextLabel(supveh[playerid]);
			DestroyObject(SupportVehLight[playerid]);
			SendClientMessage(playerid,Gelb,"Du hast erfolgreich dein Supportauto gelöscht!");
			SetPVarInt(playerid, "Supportveh", 0);
			return 1;
		}
 	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	    return 1;
	}
	return 1;
}
//Fahrzeug auffüllen mit Benzin
command(fillveh, playerid, params[])
{
    #pragma unused params
	if(IstSpielerAdmin(playerid, 2))
	{
		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	    	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid,Rot,"Du bist nicht der Fahrer des Fahrzeuges!");
	    	if(Tankmenge[GetPlayerVehicleID(playerid)] == GasMax[GetVehicleModel(GetPlayerVehicleID(playerid))-400])
			{
				SendClientMessage(playerid,Rot,"Der Tank dieses Fahrzeuges ist voll!");
				return 1;
			}
			if(GetPVarInt(playerid, "StartDrift") == 0)
 			{
		        Tankmenge[GetPlayerVehicleID(playerid)] = GasMax[GetVehicleModel(GetPlayerVehicleID(playerid))-400];
		        SendClientMessage(playerid,Weiß,"Fahrzeug wurde erfolgreich aufgetankt!");
		        return 1;
			}
			else
			{
			    SendClientMessage(playerid,Rot,"Diesen Befehl kannst du auf der Driftstrecke nicht benutzen!");
			    return 1;
			}
	    }
	    else
	    {
	        SendClientMessage(playerid,Rot,"Du bist nicht in oder auf einem Fahrzeug!");
	        return 1;
	    }
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	    return 1;
	}
}
//Fahrzeug reparieren
command(fixveh, playerid, params[])
{
    #pragma unused params
	if(IstSpielerAdmin(playerid, 2))
	{
		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendClientMessage(playerid,Rot,"Du bist nicht der Fahrer des Fahrzeuges!");
    		if(GetPVarInt(playerid, "StartDrift") == 0)
 			{
		        PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		        RepairVehicle(GetPlayerVehicleID(playerid));
		        SendClientMessage(playerid,Weiß,"Fahrzeug wurde erfolgreich repariert!");
		        return 1;
			}
			else
			{
			    SendClientMessage(playerid,Rot,"Diesen Befehl kannst du auf der Driftstrecke nicht benutzen!");
			    return 1;
			}
	    }
	    else
	    {
	        SendClientMessage(playerid,Rot,"Du bist nicht in oder auf einem Fahrzeug!");
	        return 1;
	    }
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	    return 1;
	}
}
//Respawnallcars
command(respawnallcars, playerid, params[])
{
    #pragma unused params
	new string[128];
	if(sStats[playerid][sAdminlevel] < 3)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	new bool:unwanted[CAR_AMOUNT];
	for(new player=0; player<GetMaxPlayers(); player++)
	{
		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
	}
	for(new car = 6; car <= 800; car++)
	{
		if(!unwanted[car]) SetVehicleToRespawn(car);
		Tankmenge[car] = GasMax[GetVehicleModel(car)-400];
	}
	format(string, sizeof(string), "* Administrator %s[%d] hat alle unbenutzen Fahrzeuge respawned.", GetName(playerid),playerid);
	SendClientMessageToAll(Rot, string);
	return 1;
}
//Respawnallcars
command(respawnzivicars, playerid, params[])
{
	#pragma unused params
	new string[128];
	new carr = GetPlayerVehicleID(playerid);
	if(sStats[playerid][sAdminlevel] < 3)
	return SendClientMessage(playerid, Rot, "Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	if(GetPVarInt(playerid, "Adminduty") == 0)
	return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
	new bool:unwanted[CAR_AMOUNT];
	for(new player=0; player<GetMaxPlayers(); player++)
	{
		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
	}
	for(new carrr = 1; carr <= 6; carrr++)
	{
		if(!unwanted[carr]) SetVehicleToRespawn(carr);
	}
	format(string, sizeof(string), "* Administrator %s[%d] hat alle unbenutzen Fahrräder respawned.", GetName(playerid),playerid);
	SendClientMessageToAll(Rot, string);
	return 1;
}
//agl
command(agl, playerid, params[])
{
    new Usage[16],string[128],id;
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(IstSpielerAdmin(playerid, 3))
	{
   		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
		if(sscanf(params, "us",id,Usage))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /agl [Spieler/ID] [Schein]"),
			SendClientMessage(playerid, Gelb, "Scheine: Autoschein, Motorradschein, Bootschein, Flugschein, Angelschein, Waffenschein, Truckerschein, Personalausweis");
			return 1;
		}
		if(IsPlayerNPC(id))
		{
		    SendClientMessage(playerid,Rot,"Du kannst einem NPC/Bot keine Scheine geben!");
		    return 1;
		}
		if(id == INVALID_PLAYER_ID)
		{
		    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		    return 1;
		}
		if(strcmp(Usage, "Autoschein", true) == 0)
  		{
			sStats[id][sAutoschein] = 1;
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s gegeben.", GetName(id), Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s erhalten.", GetName(playerid), Usage);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage);
			AglLog(string);
		}
		if(strcmp(Usage, "Motorradschein", true) == 0)
  		{
			sStats[id][sMotorradschein] = 1;
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s gegeben.", GetName(id), Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s erhalten.", GetName(playerid), Usage);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage);
			AglLog(string);
		}
		if(strcmp(Usage, "Bootschein", true) == 0)
  		{
			sStats[id][sBootschein] = 1;
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s gegeben.", GetName(id), Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s erhalten.", GetName(playerid), Usage);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage);
			AglLog(string);
		}
		if(strcmp(Usage, "Flugschein", true) == 0)
  		{
			sStats[id][sFlugschein] = 1;
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s gegeben.", GetName(id), Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s erhalten.", GetName(playerid), Usage);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage);
			AglLog(string);
		}
		if(strcmp(Usage, "Angelschein", true) == 0)
  		{
			sStats[id][sFischerLizens] = 1;
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s gegeben.", GetName(id), Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s erhalten.", GetName(playerid), Usage);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage);
			AglLog(string);
		}
		if(strcmp(Usage, "Waffenschein", true) == 0)
  		{
			sStats[id][sWaffenschein] = 1;
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s gegeben.", GetName(id), Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s erhalten.", GetName(playerid), Usage);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage);
			AglLog(string);
		}
		if(strcmp(Usage, "Truckerschein", true) == 0)
  		{
			sStats[id][sTruckschein] = 1;
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s gegeben.", GetName(id), Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s erhalten.", GetName(playerid), Usage);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage);
			AglLog(string);
		}
		if(strcmp(Usage, "Personalausweis", true) == 0)
  		{
			sStats[id][sPersonalausweis] = 1;
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s gegeben.", GetName(id), Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s erhalten.", GetName(playerid), Usage);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage);
			AglLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}

//Check Godmode
command(checkgm, playerid, params[])
{
	new targetid,string[128];
	if(IstSpielerAdmin(playerid, 3))
	{
		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");

		if(sscanf(params,"u",targetid))return SendClientMessage(playerid,Weiß,"Befehl: /checkgm [ID/Spielername]");
		if(!IsPlayerConnected(targetid))return 1;
		if(Desktop_Status[targetid] >= 1)
 			return SendClientMessage(playerid, Rot,"Dieser Spieler ist [Away From Keyboard].");
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid,px,py,pz);
		ClearChat(targetid);
		format(string,sizeof(string),">> Du wirst nun vom Administrator '%s' (ID: %i) auf Godmode überprüft.",GetName(playerid),playerid);
		SendClientMessage(targetid,Gelb2,string);
		SendClientMessage(targetid,Weiß,">> Solltest du versuchen, den Check zu umgehen, wirst du permanent vom Server gesperrt!");
		SendClientMessage(targetid,Weiß,">> Du wirst nun überprüft, bitte habe einen Moment Geduld...");
		SetPlayerHealth(targetid,100);
		SetPlayerArmour(targetid,0);
		CreateExplosion(px,py,pz,7,15);
		SetTimerEx("check",1500,false,"dd",playerid,targetid);
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}

command(bewerbertest, playerid, params[])
{
    new string[128],id;
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(IstSpielerAdmin(playerid, 4))
	{
   		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
		if(sscanf(params, "u",id))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /bewerbertest [Spieler/ID]");
			return 1;
		}
		if(IsPlayerNPC(id))
		{
		    SendClientMessage(playerid,Rot,"Du kannst einem NPC/Bot nicht zum Bewerbertest schicken!");
		    return 1;
		}
		if(sStats[playerid][sTutorial] == 0)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler befindet sich noch im Tutorial!");
		    return 1;
		}
		if(GetPVarInt(playerid, "Bewerbertest") == 1)
		{
		    SendClientMessage(playerid,Rot,"Der Spieler befindet sich schon im Bewerbertest!");
		    return 1;
		}
		if(id == playerid)
		{
		    SendClientMessage(playerid,Rot,"Du kannst dich nicht selber zum Bewerbertest schicken!");
		    return 1;
	  	}
		if(id == INVALID_PLAYER_ID)
		{
		    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		    return 1;
		}
		    ClearChat(id);
			StartBWTest(id);
			SetPVarInt(id,"Bewerbertest",1);
			format(string, sizeof(string), "Du hast dem Spieler %s zum Bewerbungstest geschickt.", GetName(id));
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s zum Bewerbungstest geschickt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id));
			AdminLog(string);
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//Payday
command(payday, playerid, params[])
{
    new string[128],id;
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(IstSpielerAdmin(playerid, 5))
	{
   		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
		if(sscanf(params, "u",id))
		{
			SendClientMessage(playerid, Weiß, "Befehl: /payday [Spieler/ID]");
			return 1;
		}
		if(IsPlayerNPC(id))
		{
		    SendClientMessage(playerid,Rot,"Du kannst einem NPC/Bot Paydays geben!");
		    return 1;
		}
		if(id == INVALID_PLAYER_ID)
		{
		    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		    return 1;
		}
			PayDay(id);
			format(string, sizeof(string), "Du hast dem Spieler %s einen PayDay gegeben.", GetName(id));
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen PayDay erhalten.", GetName(playerid));
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen PayDay gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id));
			AdminLog(string);
			return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}

//Wetter setzen
command(setweather, playerid, params[])
{
    #pragma unused params
    return cmd_weather(playerid, params);
}
command(weather, playerid,params[])
{
	#pragma unused params
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(IstSpielerAdmin(playerid, 3))
	{
	    new string[128];
   		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");

		format(string, sizeof(string), "* Administrator: %s[%d] hat das Wetter in jeder Stadt zu sonnig geändert.", GetName(playerid), playerid);
		SendClientMessageToAll(Rot, string);
		SetWeather(2);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Wetter veraendert.",day,month,year,hour,minute,second,GetName(playerid));
		AdminLog(string);
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}

//Teleport
command(tele, playerid, params[])
{
    #pragma unused params
    return cmd_teleport(playerid, params);
}
command(teleport, playerid, params[])
{
    new Usage[16],string[128];
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(IstSpielerAdmin(playerid, 4))
	{
   		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
		if(sscanf(params, "s",Usage))
		{
		    ClearChat(playerid);
			SendClientMessage(playerid, Weiß, "Befehl: /teleport [Ort]"),
			SendClientMessage(playerid, Gelb, "Optionen: Zivispawn, Einkaufsstraße, Mechatroniker, 24/7, Hotel, Feuerwehr, Burger Shot, Casino, Club, Pferderennbahn, Kirche");
			SendClientMessage(playerid, Gelb, "Optionen: Fahrschule, Spedition, Tankstelle, BSPD, Rathaus, Bank, Krankenhaus, Ammunation, Lotto, Prennerviertel, Drift, OelRaffernerie");
			SendClientMessage(playerid, Gelb, "Optionen: Premiuminsel, Autohaus1, Autohaus2, SNHaus, Adminbase, ZollLS/LV, ZollBS/LV, ZollSF/LV, Nutte, Schwarzmarkt 1/2/3, Paintball Arena");
			SendClientMessage(playerid, Gelb, "Optionen: Farmer, Autoscooter Arena, Crackhaus, Bayside-Newstime, Pier, Krankenhaus, Krankenhausi, BSPDI, Flugzeug, Flugzeugh");
			SendClientMessage(playerid, Gelb, "Optionen: Jail 1/2/3/4, Angelplatz, Gangautohaus, Schutzbunker, HoF, Premium, MS-14, MS-14i, CoD, CoDi, AutoPate, AutoPatei, Collister");
			SendClientMessage(playerid, Gelb, "Optionen: Ballon, Garage, Flughafeni, Tuev, Casinoi, Bamboo, Drogenstelle, Kirchei, Waffenpunkt");
			return 1;
		}
		if(strcmp(Usage, "Flughafeni", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1827.147338,7.207417,1061.143554);
			SetPlayerInterior(playerid,14);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Bamboo", true) == 0)
  		{
			SetPlayerPosEx(playerid,954.1629,2386.8232,10.8203);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Casinoi", true) == 0)
  		{
			SetPlayerPosEx(playerid,2016.2699,1017.7790,996.8750);
			SetPlayerInterior(playerid,10);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Kirchei", true) == 0)
  		{
			SetPlayerPosEx(playerid, 3141.1445,-3004.2576,13.0400);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Drogenstelle", true) == 0)
  		{
			SetPlayerPosEx(playerid, -1105.0917,-1637.1342,76.3672);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Waffenpunkt", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1863.4165,-134.4194,11.8984);
			SetPlayerInterior(playerid,0);
			SetCameraBehindPlayer(playerid);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Zivispawn", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2625.9963,2256.1260,8.1542);
			SetPlayerInterior(playerid,0);
			SetCameraBehindPlayer(playerid);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Tuev", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1552.6274,2639.4929,55.8359);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Ballon", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2078.4158,2303.8899,22.5680);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Garage", true) == 0)
  		{
			SetPlayerPosEx(playerid,2528.3167,-2673.4631,13.3987);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Collister", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1440.3439,2948.9292,78.6089);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "AutoPate", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2384.4924,2434.3896,9.6089);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "AutoPatei", true) == 0)
  		{
			SetPlayerPosEx(playerid,2365.3000488281, -1544.9000244141, -25.5);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Premium", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2495.9341,2075.7488,1.3516);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "CoD", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2491.4641,-163.7390,25.6172);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "CoDi", true) == 0)
  		{
			SetPlayerPosEx(playerid,-98.29785156,-267.04980469,2703.50634766);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "HoF", true) == 0)
  		{
			SetPlayerPosEx(playerid,2118.8999023438, -1030.5, -12.5);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Gangautohaus", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1995.1772,295.7436,34.5891);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Angelplatz", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2324.2207,2342.1663,4.5563);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Schutzbunker", true) == 0)
  		{
			SetPlayerPosEx(playerid,-399.7850,1237.2380,5.8069);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "MS-14i", true) == 0)
  		{
			SetPlayerPosEx(playerid,2450.1335,-1907.0067,3819.2493);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "MS-14", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2717.6428,84.3313,4.1803);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Jail1", true) == 0)
  		{
			SetPlayerPosEx(playerid,1552.7900, -1652.3700, 1718.4100);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Jail2", true) == 0)
  		{
			SetPlayerPosEx(playerid,1552.5400, -1656.5100, 1718.4100);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Jail3", true) == 0)
  		{
			SetPlayerPosEx(playerid,1552.8000, -1660.4800, 1718.4100);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Jail4", true) == 0)
  		{
			SetPlayerPosEx(playerid,1552.7500, -1664.3199, 1718.4100);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Flugzeug", true) == 0)
  		{
			SetPlayerPosEx(playerid,1.808619,32.384357,1199.593750);
			SetPlayerInterior(playerid,1);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Flugzeugh", true) == 0)
  		{
			SetPlayerPosEx(playerid,3562.3999023438, -960.59997558594, 613.29998779297);
			SetPlayerInterior(playerid,9);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "BSPDI", true) == 0)
  		{
			SetPlayerPosEx(playerid,1560.68, -1684.51, 1725.50);
			SetPlayerInterior(playerid,10);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Krankenhausi", true) == 0)
  		{
			SetPlayerPosEx(playerid,1247.68322754,315.02133179,-10.79656029);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich ins %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Pier", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1660.0892,6.3396,3.5495);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Einkaufsstraße", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2555.3889,2323.9163,4.9821);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Mechatroniker", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2507.5713,2348.9736,4.5468);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %sbase teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "24/7", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2486.3093,2362.4402,9.8560);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Hotel", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2444.8840,2321.9226,4.5485);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Feuerwehr", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2448.4998,2353.5313,4.5628);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Burger Shot", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2474.3782,2249.7161,4.5423);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Casino", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2460.2490,2280.5098,4.5561);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Club", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2485.4990,2268.2773,4.5463);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Nutte", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2614.5679,2435.6008,14.8730);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zur %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Pferderennbahn", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2525.1206,2292.3359,4.5581);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Kirche", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2484.0237,2403.8032,15.7575);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Fahrschule", true) == 0)
  		{
	        SetPlayerPosEx(playerid, 1494.4174,1305.5042,1093.2891);
	        SetPlayerFacingAngle(playerid,355.8799);
	        SetPlayerInterior(playerid,3);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Spedition", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2399.3018,2372.4082,10.1262);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Tankstelle", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2329.3633,2358.1392,4.5787);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "BSPD", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2252.8716,2351.5413,4.5438);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Rathaus", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2243.3215,2320.1921,4.5985);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Bank", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2293.8147,2274.6899,4.5514);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Spedition", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2399.3018,2372.4082,10.1262);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Krankenhaus", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2269.8894,2305.3386,4.6741);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Ammunation", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2276.2915,2328.0381,4.4812);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Lotto", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2475.3669,2320.7290,4.5373);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s Laden teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Pennersiedlung", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2435.0474,2470.9937,13.3472);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Drift", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2355.5378,2570.9709,23.9627);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Driftstrecke", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2355.5378,2570.9709,23.9627);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "OelRaffenerie", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2826.7280,1678.4205,13.5150);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Premiuminsel", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2260.4753,1730.5255,3.8862);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Autohaus1", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2118.2163,1386.7974,6.5483);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Autohaus2", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1501.7340,972.8514,6.7939);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "SNHaus", true) == 0)
  		{
			SetPlayerPosEx(playerid,2433.1582,550.4951,6.7425);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Adminbase", true) == 0)
  		{
			SetPlayerPosEx(playerid,2517.8557,2831.6687,12.7006);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zur %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich nach %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "ZollLS/LV", true) == 0)
  		{
			SetPlayerPosEx(playerid,1690.3068,439.9206,31.1311);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "ZollBS/LV", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2279.6663,2665.3120,55.9061);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "ZollSF/LV", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1320.4431,910.6965,46.6667);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Schwarzmarkt 1", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1485.1038,2613.6465,58.7879);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Schwarzmarkt 2", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2494.2046,158.4621,8.5223);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Schwarzmarkt 3", true) == 0)
  		{
			SetPlayerPosEx(playerid,1367.0482,-1538.9248,13.5469);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Paintball Arena", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2460.7236,2304.4419,4.9844);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Farmer", true) == 0)
  		{
			SetPlayerPosEx(playerid,-56.6590,60.7795,3.1172);
			SetPlayerFacingAngle(playerid,343.4591);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Autoscooter Arena", true) == 0)
  		{
			SetPlayerPosEx(playerid,-2460.4067,2257.3813,4.9389);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich zum %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "Bayside-Newstime", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1508.9314,997.4261,6.7508);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich nach %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
		if(strcmp(Usage, "CNN", true) == 0)
  		{
			SetPlayerPosEx(playerid,-1508.9314,997.4261,6.7508);
			SetPlayerInterior(playerid,0);
			format(string, sizeof(string), "Du hast dich erfolgreich nach %s teleportiert.", Usage);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat sich zum %s teleportiert.",day,month,year,hour,minute,second,GetName(playerid),Usage);
			TeleLog(string);
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}

//Premium vergeben
command(givepremium, playerid, params[])
{
	new string[128], Usage[16], id, Value;
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(IstSpielerAdmin(playerid, 4))
	{
		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
		if(sscanf(params, "usd", id, Usage, Value))
		{
		    ClearChat(playerid);
			SendClientMessage(playerid, Weiß, "Befehl: /givepremium [Name/ID] [Premiumart] [Monate]");
			SendClientMessage(playerid, Gelb, "Premiumart: Bronze, Silber, Gold");
			return 1;
		}
		if(Value == 0)
		{
		    SendClientMessage(playerid,Rot,"Du musst mind. 1 Monat angeben!");
		    return 1;
		}
		if(IsPlayerNPC(id))
		{
		    SendClientMessage(playerid,Rot,"Du kannst einem NPC/Bot keinen Premiumaccount geben!");
		    return 1;
		}
		if(id == INVALID_PLAYER_ID)
		{
		    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		    return 1;
		}
		new zeit = Value*31;
		if(strcmp(Usage, "Bronze", true) == 0)
		{
			sStats[id][sPremium] = 1;
			sStats[id][sPremiumZeit] += gettime()+(60*60*24*zeit);
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s Premiumaccount für %d Monat/e gegeben.", GetName(id), Usage, Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s Premiumaccount für %d Monat/e bekommen.", GetName(playerid),Usage, Value);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s Premiumaccount fuer %d Monat/e gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage,Value);
			PremiumLog(string);
		}
		if(strcmp(Usage, "Silber", true) == 0)
		{
			sStats[id][sPremium] = 2;
			sStats[id][sPremiumZeit] += gettime()+(60*60*24*zeit);
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s Premiumaccount für %d Monat/e gegeben.", GetName(id), Usage, Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s Premiumaccount für %d Monat/e bekommen.", GetName(playerid),Usage, Value);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s Premiumaccount fuer %d Monat/e gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage,Value);
			PremiumLog(string);
		}
		if(strcmp(Usage, "Gold", true) == 0)
		{
			sStats[id][sPremium] = 3;
			sStats[id][sPremiumZeit] += gettime()+(60*60*24*zeit);
			format(string, sizeof(string), "Du hast dem Spieler %s einen %s Premiumaccount für %d Monat/e gegeben.", GetName(id), Usage, Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast vom Administrator %s einen %s Premiumaccount für %d Monat/e bekommen.", GetName(playerid),Usage, Value);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen %s Premiumaccount fuer %d Monat/e gegeben.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Usage,Value);
			PremiumLog(string);
		}
	}
	else
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
	    return 1;
	}
	return 1;
}

//Stats vergeben
command(set, playerid, params[])
{
	new string[128], Usage[16], id, Value;
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(IstSpielerAdmin(playerid, 3))
	{
		if(GetPVarInt(playerid, "Adminduty") == 0)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz um diesen Befehl nutzen zu können.");
		if(sscanf(params, "uds", id, Value, Usage))
		{
		    ClearChat(playerid);
			SendClientMessage(playerid, Weiß, "Befehl: /set [Name/ID] [Wert] [Option]");
			SendClientMessage(playerid, Gelb, "Optionen: Leben, Rüstung, Interior, (V)irtual(W)orld, Skin, Geld, Linkstatus, Premium, PremiumZeit(in Minuten)");
			SendClientMessage(playerid, Gelb, "Optionen: Alter, JobTime, Job, Erfahrungspunkte, Quest, Bankkonto(Geld), Jailtime, Jailed, Level, Pin, Wanteds, Reisepass");
			SendClientMessage(playerid, Gelb, "Optionen: Spielstunden, Paintballpunkte, Leiter, Mitglied, Krankheit, Haus, Mieter, Autos, Drogen");
			return 1;
		}
		if(IsPlayerNPC(id))
		{
		    SendClientMessage(playerid,Rot,"Du kannst einem NPC/Bot nix setzen!");
		    return 1;
		}
		if(id == INVALID_PLAYER_ID)
		{
		    SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
		    return 1;
		}
		if(strcmp(Usage, "Leben", true) == 0)
		{
		    if(Value > 100)
		    {
		        SendClientMessage(playerid,Rot,"Das maximal Leben ist 100.0!");
		        return 1;
		    }
			SetPlayerHealth(id, Value);
			format(string, sizeof(string), "Du hast das Leben von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Leben wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Leben von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Rüstung", true) == 0)
		{
  			if(Value > 100)
		    {
		        SendClientMessage(playerid,Rot,"Die maximal Rüstung ist 100.0!");
		        return 1;
		    }
		    AllowArmour[id] = 1;
			SetPlayerArmour(id, Value);
			format(string, sizeof(string), "Du hast die Rüstung von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Rüstung wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Rüstung von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Haus", true) == 0)
		{
  			if(Value > 999)
		    {
		        SendClientMessage(playerid,Rot,"Setze den Wert auf 999 um dem Spieler kein Haus zuzuweisen!");
		        return 1;
		    }
			sStats[id][sHaus] = Value;
			format(string, sizeof(string), "Du hast das Haus von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Haus wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Haus von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Truckerschein", true) == 0)
		{
  			if(Value > 1)
		    {
		        SendClientMessage(playerid,Rot,"Du kannst den Truckerschein max. auf den Wert 1 setzen!");
		        return 1;
		    }
			sStats[id][sTruckschein] = Value;
			format(string, sizeof(string), "Du hast den Truckerschein von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Truckerschein wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Truckerschein von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Jailed", true) == 0)
		{
  			if(Value > 1)
		    {
		        SendClientMessage(playerid,Rot,"Du kannst Jailed nur maximal auf 1 setzen!");
		        return 1;
		    }
			sStats[id][sJailed] = Value;
			format(string, sizeof(string), "Du hast die Variabele Jailed von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Variabele Jailed wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat deine Variabele Jailed von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Autos", true) == 0)
		{
  			if(Value > 5)
		    {
		        SendClientMessage(playerid,Rot,"Es sind nur maximal 5 Fahrzeug erlaubt!");
		        return 1;
		    }
			sStats[id][sAutos] = Value;
			format(string, sizeof(string), "Du hast die Autoanzahl von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Autoanzahl wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Autoanzahl von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Drogen", true) == 0)
		{
  			if(Value > 5000)
		    {
		        SendClientMessage(playerid,Rot,"Du kannst dem Spieler nur max. 5000 Drogen geben!");
		        return 1;
		    }
			sStats[id][sDrogen] = Value;
			format(string, sizeof(string), "Du hast die Drogen von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Drogen wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Drogen von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Mieter", true) == 0)
		{
  			if(Value > 5)
		    {
		        SendClientMessage(playerid,Rot,"Du kannst diesen Wert nur auf 1 oder 0 setzen!");
		        return 1;
		    }
			sStats[id][sMieter] = Value;
			format(string, sizeof(string), "Du hast den Mieterwert von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Mieterwert wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Mieterwert von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Interior", true) == 0)
		{
		    SetPlayerInterior(id,Value);
			format(string, sizeof(string), "Du hast den Interior von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Interior wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Interior von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Krankheit", true) == 0)
		{
 			if(Value > 7)
		    {
		        SendClientMessage(playerid,Rot,"Es gibt nur 4 Krankheiten!");
				return 1;
		    }
		    sStats[id][sKrankheit] = Value;
			format(string, sizeof(string), "Du hast die Krankheit von %s auf %d gesetzt (%s).", GetName(id), Value, GetPlayerKrankheit(playerid));
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Krankheit wurde von Administrator %s auf %d gesetzt (%s).", GetName(playerid), Value, GetPlayerKrankheit(playerid));
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Krankheit von %s auf %d gesetzt (%s).",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value,GetPlayerKrankheit(playerid));
			AdminLog(string);
		}
		else if(strcmp(Usage, "Leiter", true) == 0)
		{
			if(Value == 6)
		    {
		        SetPlayerSkin(id,123);
		    }
  			if(Value == 5)
		    {
		        SetPlayerSkin(id,116);
		    }
		    if(Value == 4)
		    {
		        SetPlayerSkin(id,17);
		    }
		    if(Value == 3)
		    {
		        SetPlayerSkin(id,275);
		    }
		    if(Value == 1)
		    {
		        SetPlayerSkin(id,288);
		    }
		    sStats[id][sLeiter] = Value;
		    sStats[id][sFraktion] = Value;
		    sStats[id][sRank] = 6;
		    sStats[id][sSkin] = GetPlayerSkin(id);
			format(string, sizeof(string), "Du hast %s zum Leiter der %s Fraktion gemacht.", GetName(id), GetPlayerFraktion(id));
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du bist nun der Leiter der %s Fraktion.",GetPlayerFraktion(id));
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat %s zum Leiter der %s Fraktion gemacht.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),GetPlayerFraktion(id));
			AdminLog(string);
		}
		else if(strcmp(Usage, "Mitglied", true) == 0)
		{
			if(Value == 6)
		    {
		        SetPlayerSkin(id,121);
		    }
			if(Value == 5)
		    {
		        SetPlayerSkin(id,114);
		    }
  			if(Value == 4)
		    {
		        SetPlayerSkin(id,208);
		    }
   			if(Value == 3)
		    {
		        SetPlayerSkin(id,276);
		    }
   			if(Value == 1)
		    {
		        SetPlayerSkin(id,280);
		    }
		    sStats[id][sMitglied] = Value;
		    sStats[id][sFraktion] = Value;
		    sStats[id][sRank] = 1;
		    sStats[id][sSkin] = GetPlayerSkin(id);
			format(string, sizeof(string), "Du hast %s zum Mitglied der %s Fraktion gemacht.", GetName(id), GetPlayerFraktion(id));
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du bist nun ein Mitglied der %s Fraktion.", GetPlayerFraktion(id));
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat %s zum Mitglied der %s Fraktion gemacht.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),GetPlayerFraktion(id));
			AdminLog(string);
		}
		else if(strcmp(Usage, "vw", true) == 0 || strcmp(Usage, "virtualworld", true) == 0)
		{
			SetPlayerVirtualWorld(id, Value);
			format(string, sizeof(string), "Du hast die VirtualWorld von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine VirtualWorld wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die VirtualWorld von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Skin", true) == 0)
		{
		    SetPlayerSkin(id,Value);
			format(string, sizeof(string), "Du hast den Skin von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Skin wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Skin von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Wohnwagen", true) == 0)
		{
			if(Value > 1)
		    {
		        SendClientMessage(playerid,Rot,"Es geht nur Wohnwagen 1 oder 0!");
		        return 1;
		    }
		    sStats[playerid][sWohnwagen] = Value;
			format(string, sizeof(string), "Du hast den Wohnwagen von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Wohnwagen wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Wohnwagen von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Geld", true) == 0)
		{
		    SetPlayerEuro(id,Value);
			format(string, sizeof(string), "Du hast das Geld von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Geld wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(id, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Geld von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Linkstatus", true) == 0)
		{
			if(Value > 1)
		    {
		        SendClientMessage(playerid,Rot,"Es geht nur Linkstatus 1 oder 0!");
		        return 1;
		    }
		    sStats[id][sLink] = Value;
			format(string, sizeof(string), "Du hast den Linkstatus von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Linkstatus wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Linkstatus von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Premium", true) == 0)
		{
			if(Value > 3)
		    {
		        SendClientMessage(playerid,Rot,"Es gibt nur 3 Premiumarten (1 = Bronze,2 = Silber,3 = Gold)!");
		        return 1;
		    }
		    sStats[id][sPremium] = Value;
			format(string, sizeof(string), "Du hast den Premiumstatus von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Premiumstatus wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Premiumstatus von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Level", true) == 0)
		{
			if(Value > 99)
		    {
		        SendClientMessage(playerid,Rot,"Das maximale Level ist 99!");
		        return 1;
		    }
		    sStats[id][sLevel] = Value;
		    SetPlayerScore(id,sStats[playerid][sLevel]);
			format(string, sizeof(string), "Du hast das Level von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Level wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Level von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Alter", true) == 0)
		{
			if(Value > 99)
		    {
		        SendClientMessage(playerid,Rot,"Das maximale Alter ist 99 Jahre!");
		        return 1;
		    }
   			if(Value < 1)
		    {
		        SendClientMessage(playerid,Rot,"Man kann nicht jünger als 1 Jahr sein!");
		        return 1;
		    }
		    sStats[id][sAlter] = Value;
			format(string, sizeof(string), "Du hast das Alter von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Alter wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Alter von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "JobTime", true) == 0)
		{
		    sStats[id][sJobTime] = Value;
			format(string, sizeof(string), "Du hast die Vertragslaufzeit von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Vertragslaufzeit wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Vertragslaufzeit von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Job", true) == 0)
		{
			if(Value > 8)
		    {
		        SendClientMessage(playerid,Rot,"Es gibt nur 8 Jobs!");
		        return 1;
		    }
		    sStats[id][sJob] = Value;
			format(string, sizeof(string), "Du hast den Job von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Job wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Job von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Erfahrungspunkte", true) == 0)
		{
		    sStats[id][sErf] = Value;
			format(string, sizeof(string), "Du hast die Erfahrungspunkte von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Erfahrungspunkte wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Erfahrungspunkte von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Quest", true) == 0)
		{
		    sStats[id][sQuest] = Value;
			format(string, sizeof(string), "Du hast die Quest von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Quest wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Quest von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Bankkonto", true) == 0)
		{
		    sStats[id][sKonto] = Value;
			format(string, sizeof(string), "Du hast das Kontogeld von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Kontogeld wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat das Kontogeld von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Jailtime", true) == 0)
		{
		    sStats[id][sJailTime] = Value;
			format(string, sizeof(string), "Du hast die Gefängniszeit von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Gefängniszeit wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Gefängniszeit von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "PremiumZeit", true) == 0)
		{
		    sStats[id][sPremium] = 1;
		    sStats[id][sPremiumZeit] = gettime()+(60*Value);
			format(string, sizeof(string), "Du hast die PremiumZeit von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine PremiumZeit wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die PremiumZeit von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Pin", true) == 0)
		{
		    sStats[id][sPin] = Value;
			format(string, sizeof(string), "Du hast den Pin von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Pin wurde von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Pin von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Wanteds", true) == 0)
		{
			if(Value > 6)
			{
			    SendClientMessage(playerid,Rot,"Es gibt nur maximal 6 Wanteds!");
			    return 1;
			}
		    sStats[id][sWanteds] = Value;
			SetPlayerWantedLevel(id,sStats[id][sWanteds]);
			format(string, sizeof(string), "Du hast die Wanteds von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Wanteds wurden von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Wanteds von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Reisepass", true) == 0)
		{
			if(Value > 1)
			{
			    SendClientMessage(playerid,Rot,"Bei dem Reisepass gibt es nur die Option 1 oder 0!");
			    return 1;
			}
		    sStats[id][sReisePass] = Value;
			format(string, sizeof(string), "Du hast den Reisepass von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Dein Reisepass wurden von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Reisepass von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Spielstunden", true) == 0)
		{
			if(Value > 999)
			{
			    SendClientMessage(playerid,Rot,"Du kannst dem Spieler nicht mehr als 999 Spielstunden geben!");
			    return 1;
			}
		    sStats[id][sSpielstunden] = Value;
			format(string, sizeof(string), "Du hast die Spielstunden von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Spielstunden wurden von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Spielstunden von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
		else if(strcmp(Usage, "Paintballpunkte", true) == 0)
		{
			if(Value > 999)
			{
			    SendClientMessage(playerid,Rot,"Du kannst dem Spieler nicht mehr als 999 Paintballpunkte geben!");
			    return 1;
			}
		    sStats[id][sPpunkte] = Value;
			format(string, sizeof(string), "Du hast die Paintballpunkte von %s auf %d gesetzt.", GetName(id), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Deine Paintballpunkte wurden von Administrator %s auf %d gesetzt.", GetName(playerid), Value);
			SendClientMessage(playerid, Weiß, string);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat die Paintballpunkte von %s auf %d gesetzt.",day,month,year,hour,minute,second,GetName(playerid),GetName(id),Value);
			AdminLog(string);
		}
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}
//AMessage
command(adminmessage, playerid, params[])
{
    #pragma unused params
    return cmd_am(playerid, params);
}
command(am, playerid, params[])
{
	new string[128];
	if(IstSpielerAdmin(playerid, 1))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl ausführen zu können!");
  		if(isnull(params))
		return SendClientMessage(playerid,Weiß,"Befehl: /am [Nachricht]");

		format(string, sizeof(string), "%s %s[%d]: %s",GetPlayerAdminRank(playerid),GetName(playerid),playerid,params);
		SendClientMessageToAll(COLOR_DBLUE,string);
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Spawnbefehl
command(spawn, playerid, params[])
{
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	if(IstSpielerAdmin(playerid, 1))
	{
	    new spieler,string[128];
		if(GetPVarInt(playerid, "Adminduty") < 1)
			return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl ausführen zu können!");
		if(sscanf(params, "u", spieler))
			return SendClientMessage(playerid, Weiß, "Befehl: /spawn [Spieler]");
		if(sStats[playerid][sTod] == 1)
		    return SendClientMessage(playerid,Rot,"Dieser Spieler ist Tod, du kannst ihn nicht respawnen!");
		if(sStats[playerid][sTutorial] == 0)
		    return SendClientMessage(playerid,Rot,"Dieser Spieler befindet sich im Tutorial, du kannst ihn nicht respawnen!");

		format(string, sizeof(string), "* Spieler %s[%d] wurde von %s %s respawned.", GetName(spieler),spieler,GetPlayerAdminRank(playerid), GetName(playerid));
		SendClientMessageToAll(Rot,string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Spieler %s wurde von %s %s respawned.",day,month,year,hour,minute,second,GetName(spieler),GetPlayerAdminRank(playerid),GetName(playerid));
		AdminLog(string);
		SendClientMessage(spieler,Weiß,"Du wurdest von einem Administrator respawned!");
		SetFraktionsSpawn(spieler);
		return 1;
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
}
//Zeit verstellen
command(tod, playerid, params[])
{
	new string[128], hour;
	if(IstSpielerAdmin(playerid, 1))
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		return SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um diesen Befehl ausführen zu können!");
		if(sscanf(params, "d", hour))
		return SendClientMessage(playerid, Weiß, "Befehl: /tod [Uhrzeit]"),
		SendClientMessage(playerid, Gelb, "Funktion: Setzt die Uhrzeit auf x.");

		SetWorldTime(hour);
		SetPlayerTime(playerid,hour,0);
		format(string, sizeof(string), "Administrator: %s hat die virtuelle Spielzeit auf %d:00 Uhr gesetzt!",GetName(playerid), hour);
		SendClientMessageToAll(Rot, string);
	}
	else
	{
		SendClientMessage(playerid,Rot,"Du bist kein Administrator oder dein Administratorenlevel ist zu niedrig!");
		return 1;
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
 	//Wenn Tod
 	if(sStats[playerid][sTod] == 1 && sStats[playerid][sAdminlevel] == 0)
	{
	    SendClientMessage(playerid,Rot,"Du kannst keine Befehle nutzen, solange du Tod bist!");
	    return 1;
 	}
	//Wenn man im Tutorial ist kann man keine Befehle nutzen
	if(sStats[playerid][sTutorial] == 0)
	{
		SendClientMessage(playerid,Rot,"Du kannst keine Befehle nutzen, da du im Tutorial bist!");
		return 1;
	}
	//Wenn man gemutet ist kann man keine Befehle nutzen
	if(sStats[playerid][sMute] == 1 && sStats[playerid][sAdminlevel] < 1)
	{
		SendClientMessage(playerid,Rot,"Du kannst keine Befehle nutzen, da du gemutet bist!");
		return 1;
	}
	//Benzinkanister
	if(GetPVarInt(playerid, "NoBK") == 1)
	{
	    SetPVarInt(playerid,"NoBK",0);
	    SendClientMessage(playerid,Rot,"Du bist nicht in der nähe eines Fahrzeuges!");
	    return 1;
	}
	//Falls es diesen Befehl nicht gibt
	if(!success) SendClientMessage(playerid, Rot, "Server: Dieser Befehl ist uns nicht bekannt (( /help ))");
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new lightss,alarm,doors,bonnet,boot,objective;
	new Float:pX,Float:pY,Float:pZ;
 	GetPlayerPos(playerid, pX, pY, pZ);
 	//Flugbot 1
  	if (ispassenger)
   	{
    	if (GetVehicleModel(vehicleid) == 593)
     	{
    		if(GetPVarInt(playerid, "Flugticket") == 1)
			{
			}
			else
			{
			    SendClientMessage(playerid,Rot,"Um das Flugzeug betreten zu können benötigst du ein Flugticket!");
			    TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			    return 1;
			}
        }
    }
   	if (ispassenger)
   	{
    	if (GetVehicleModel(vehicleid) == 473)
     	{
    		if(sStats[playerid][sPremium] < 1)
			{
			}
			else
			{
			    SendClientMessage(playerid,Rot,"Du bist kein Premium!");
			    TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			    return 1;
			}
        }
    }
	if(GetVehicleModel(vehicleid) == 481)
	{
  	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
		VehicleStarted[vehicleid] = 1;
	}
	//Fahrzeug Vorrauzsetzungen
	//Führerscheinabfrage
	if(spawncar_job[vehicleid] != 95 && sStats[playerid][sAutoschein] == 0 && !ispassenger && !IsABike(vehicleid) && !IsATruck(vehicleid) && !IsAPlane(vehicleid) && !IsABoat(vehicleid) && GetVehicleModel(vehicleid) != 481 && GetPVarInt(playerid, "InFschein") < 1)
	{
			SendClientMessage(playerid, Rot, "Du benötigst einen Führerschein um dieses Fahrzeug fahren zu können!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
	}
	//Mottoradscheinabfrage
	if(sStats[playerid][sMotorradschein] == 0 && !ispassenger && IsABike(vehicleid) && GetVehicleModel(vehicleid) != 481 && GetPVarInt(playerid, "InMschein") < 1)
	{
			SendClientMessage(playerid, Rot, "Du benötigst einen Motorradschein um dieses Fahrzeug fahren zu können!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
	}
	//Bootsscheinabfrage
	if(sStats[playerid][sBootschein] == 0 && !ispassenger && IsABoat(vehicleid) && GetVehicleModel(vehicleid) != 481 && GetPVarInt(playerid, "InBschein") < 1)
	{
			SendClientMessage(playerid, Rot, "Du benötigst einen Bootsschein um dieses Schiff/Boot fahren zu können!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
	}
	//Flugscheinabfrage
	if(sStats[playerid][sFlugschein] == 0 && !ispassenger && IsAPlane(vehicleid) && GetVehicleModel(vehicleid) != 481 && GetPVarInt(playerid, "InFLschein") < 1)
	{
			SendClientMessage(playerid, Rot, "Du benötigst einen Flugschein um dieses/n Flugzeug/Helikopter fliegen zu können!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
	}
	//Truckscheinabfrage
	if(sStats[playerid][sTruckschein] == 0 && !ispassenger && IsATruck(vehicleid) && GetVehicleModel(vehicleid) != 481 && GetPVarInt(playerid, "InTschein") < 1)
	{
			SendClientMessage(playerid, Rot, "Du benötigst einen Truckerschein um dieses Fahrzeug fahren zu können!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
	}
	//BSPD
	if(spawncar_job[vehicleid] == 1)
	{
		if(sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1 && MotorKaputt[vehicleid] == 1 || Tankmenge[vehicleid] <= 0)
   		{
		        return 0;
		}
		if(!IsACop(playerid) && !ispassenger)
		{
			SendClientMessage(playerid, Rot, "Du bist kein Mitglied des Bayside Police-Departments!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
		}
			if(GetVehicleModel(vehicleid) == 427)
			{
				if(sStats[playerid][sRank] < 5 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können benötigst du mind. Rank 5!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
			}
			if(GetVehicleModel(vehicleid) == 599)
			{
				if(sStats[playerid][sRank] < 3 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können benötigst du mind. Rank 3!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
			}
			if(GetVehicleModel(vehicleid) == 497)
			{
				if(sStats[playerid][sRank] < 4 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um diesen Helikopter fliegen zu können benötigst du mind. Rank 4!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
			}
			if(GetVehicleModel(vehicleid) == 601)
			{
				if(sStats[playerid][sRank] < 4 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können benötigst du mind. Rank 4!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
		 }
 	}
	//Sanitäter
	if(spawncar_job[vehicleid] == 3)
	{
		if(sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1 && MotorKaputt[vehicleid] == 1 || Tankmenge[vehicleid] <= 0)
   		{
		        return 0;
		}
		if(!IsASani(playerid) && !ispassenger)
		{
			SendClientMessage(playerid, Rot, "Du bist kein Mitglied des Bayside Medical-Centers!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
		}
			if(GetVehicleModel(vehicleid) == 563)
			{
				if(sStats[playerid][sRank] < 4 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um diesen Helikopter fliegen zu können benötigst du mind. Rank 4!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
			}
			if(GetVehicleModel(vehicleid) == 597)
			{
				if(sStats[playerid][sRank] < 3 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können benötigst du mind. Rank 3!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
		 }
 	}
	//Bayside-Newstime a.G
	if(spawncar_job[vehicleid] == 4)
	{
		if(sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1 && MotorKaputt[vehicleid] == 1 || Tankmenge[vehicleid] <= 0)
   		{
		        return 0;
		}
		if(!IsACNN(playerid) && !ispassenger)
		{
			if(GetVehicleModel(vehicleid) == 586)
			{
				if(sStats[playerid][sRank] < 3 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können benötigst du mind. Rank 3!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
			}
			if(GetVehicleModel(vehicleid) == 473)
			{
				if(sStats[playerid][sRank] < 4 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um dieses Boot fahren zu können benötigst du mind. Rank 4!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
			}
			if(GetVehicleModel(vehicleid) == 488)
			{
				if(sStats[playerid][sRank] < 5 && !ispassenger)
				{
					SendClientMessage(playerid, Rot, "Um diesen Helikopter fliegen zu können benötigst du mind. Rank 5!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
			}
			if(GetVehicleModel(vehicleid) == 477)
			{
				if(sStats[playerid][sLeiter] == 4)
				{
				    SendClientMessage(playerid,Weiß,"Willkommen zurück Chef!");
				}
				else
				{
					SendClientMessage(playerid, Rot, "Nur der Leiter der Bayside-Newstime a.G kann mit diesem Fahrzeug fahren!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
				}
			}
 					SendClientMessage(playerid, Rot, "Du bist kein Mitglied der Bayside-Newstime a.G!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
    	}
	}
	//Privatautos DerPate
	if (vehicleid == awagen)
	{
		if(strcmp(GetName(playerid),"AutoPate",true) ==0)
		{
		{
			SendClientMessage(playerid,COLOR_WHITE,"Willkommen zurück in deinem Auto Autopate.");
		}
		return 1;
	}
	else
	{
	    TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
		SendClientMessage(playerid,Rot,"Der Pate will nicht das du in seinem Fahrzeug einsteigst!");
	}
}
	//Privatautos von Nemesus & sHoOTi
	if (vehicleid == nemecar)
	{
		if(strcmp(GetName(playerid),"Nemesus",true) ==0)
		{
		{
			SendClientMessage(playerid,COLOR_WHITE,"Willkommen zurück in deinem Auto Profiscripter Nemesus.");
		}
		return 1;
	}
	else
	{
		CreateExplosion(pX, pY, pZ, 1, 100.00);
		SetPlayerHealth(playerid,0.0);
		SendClientMessage(playerid,Rot,"Dieses Auto gehört Nemesus dem Profiscripter!");
	}
}
	if (vehicleid == shooticar)
	{
		if(strcmp(GetName(playerid),"sHoOTi",true) ==0)
		{
		{
		SendClientMessage(playerid,COLOR_WHITE,"Willkommen zurück in deinem Auto Profimapper sHoOTi.");
		}
		return 1;
	}
	else
	{
		CreateExplosion(pX, pY, pZ, 1, 100.00);
		SetPlayerHealth(playerid,0.0);
		SendClientMessage(playerid,Rot,"Dieses Auto gehört sHoOTi dem Profimapper!");
	}
}
	//Adminautos
	if(spawncar_job[vehicleid] == 101)
	{
 		if(sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1 && MotorKaputt[vehicleid] == 1 || Tankmenge[vehicleid] <= 0)
   		{
		        return 0;
		}
		if(sStats[playerid][sAdminlevel] < 1 && !ispassenger)
		{
			SendClientMessage(playerid, Rot, "Du bist kein Administrator!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
		}
	}
	if(spawncar_job[vehicleid] == 100)
	{
 		if(sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1 && MotorKaputt[vehicleid] == 1 || Tankmenge[vehicleid] <= 0)
   		{
		        return 0;
		}
		if(sStats[playerid][sAdminlevel] < 1 && !ispassenger)
		{
			SendClientMessage(playerid, Rot, "Du bist kein Administrator!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
		}
	}
	//Zivilisten
	if(GetVehicleModel(vehicleid) == 481)
	{
		if(sStats[playerid][sLevel] > 1)
		{
			SendClientMessage(playerid, Rot, "Du bist kein Neuling!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
		}
	}
	//Wohnwagen von Eddy
	if(spawncar_job[vehicleid] == 102)
	{
		SendClientMessage(playerid, Rot, "Diese Wohnwagen gehören Eddy dem Wohnwagenverkäufer!");
		TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
		return 1;
	}
	//Driftautos
	if(spawncar_job[vehicleid] == 96)
	{
	    	if(GetPVarInt(playerid, "StartDrift") == 0)
	    	{
 					SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können musst du zuerst ein Driftrennen starten!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
	    	}
	}
	//Fahrschule
	if(spawncar_job[vehicleid] == 95)
	{
 		if(GetPVarInt(playerid, "InFschein") == 0 && !ispassenger)
		{
 					SendClientMessage(playerid, Rot, "Du bist nicht in der Fahrprüfung!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
    	}
	}
	//Fahrschule
	if(spawncar_job[vehicleid] == 94)
	{
 		if(GetPVarInt(playerid, "InMschein") == 0 && !ispassenger)
		{
 					SendClientMessage(playerid, Rot, "Du bist nicht in der Fahrprüfung!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
    	}
	}
	//Farmer
	if(spawncar_job[vehicleid] == 93)
	{
		if(sStats[playerid][sJob] != 5 && !ispassenger)
		{
 					SendClientMessage(playerid, Rot, "Du bist kein Farmer!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
    	}
	}
	//MS-14
	if(spawncar_job[vehicleid] == 5)
	{
		if(!IsAMS(playerid) && !ispassenger)
		{
 					SendClientMessage(playerid, Rot, "Du bist kein Mitglied der MS-14 Gang!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
    	}
	}
	//COD
	if(spawncar_job[vehicleid] == 6)
	{
		if(!IsACrip(playerid) && !ispassenger)
		{
 					SendClientMessage(playerid, Rot, "Du bist kein Mitglied der Crip or Die Gang!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
    	}
	}
	//Spedition
	if(spawncar_job[vehicleid] == 91)
	{
		if(sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1 && MotorKaputt[vehicleid] == 1 || Tankmenge[vehicleid] <= 0)
   		{
		        return 0;
		}
		if(sStats[playerid][sJob] != 3 && !ispassenger)
		{
			SendClientMessage(playerid, Rot, "Du bist kein Mitglied der Speditions GmbH!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
		}
		if(GetVehicleModel(vehicleid) == 403)
		{
			if(sStats[playerid][sLevel] < 2)
			{
				SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können musst du mind. Level 2 sein!");
				TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			}
		}
	}
	//Autoscooter
	if(spawncar_job[vehicleid] == 92)
	{
		if(GetPVarInt(playerid, "Autoscooter") == 0 && !ispassenger)
		{
 					SendClientMessage(playerid, Rot, "Du bist nicht befugt diesen Autoscooter zu benutzen!");
					TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
    	}
	}
	//Mechatroniker Autos
	if(spawncar_job[vehicleid] == 97)
	{
		if(sStats[playerid][sJob] != 1 && !ispassenger)
		{
			SendClientMessage(playerid, Rot, "Du bist kein Mechatroniker!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
		}
		if(GetVehicleModel(vehicleid) == 525)
		{
			if(sStats[playerid][sSpielstunden] < 5)
			{
				SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können musst benötigst du 2 Spielstunden!");
				TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			}
		}
	}
	//Feuerwehr
	if(spawncar_job[vehicleid] == 98)
	{
		if(sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1 && MotorKaputt[vehicleid] == 1 || Tankmenge[vehicleid] <= 0)
   		{
		        return 0;
		}
		if(!IsAFW(playerid) && !ispassenger)
		{
			SendClientMessage(playerid, Rot, "Du bist kein/e Feuerwehrmann/frau!");
			TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
			return 1;
		}
		if(GetVehicleModel(vehicleid) == 599)
		{
			if(sStats[playerid][sLevel] < 2)
			{
				SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können musst du mind. Level 2 sein!");
				TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
   			}
		}
		if(GetVehicleModel(vehicleid) == 563 && !IsAFW(playerid) & !ispassenger)
		{
			if(sStats[playerid][sLevel] < 3)
			{
				SendClientMessage(playerid, Rot, "Um diesen Helikopter fliegen zu können musst du mind. Level 3 sein!");
				TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
   			}
		}
	}
	//Gangautosystem
	FRAC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(GetPVarInt(playerid, "StartDrift") == 1)
	{
		DestroyVehicle(DriftAuto[playerid]);
		ClearChat(playerid);
		DriftRespawn(playerid);
	}
	//Autoscooter
	if(GetPVarInt(playerid, "Autoscooter") != 0)
	{
	    SetPVarInt(playerid, "Autoscooter", 0);
	    ClearChat(playerid);
	    SetPlayerPosEx(playerid,-2458.4407,2257.5825,4.9538);
	    SetPlayerFacingAngle(playerid,91.7514);
	    SendClientMessage(playerid,Gelb2,"Du bist aus dem Autoscootermatch ausgeschieden da du den Autoscooter verlassen hast!");
	}
	//Farmer
	if(GetPVarInt(playerid, "Drogenanbauen") == 1)
	{
		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		FarmerCP[playerid] = 0;
		DeletePVar(playerid, "Drogenanbauen");
		SendClientMessage(playerid,Rot,"Dein Drogenanbau wurde abgebrochen, da du den Mähdräscher verlassen hast!");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		RemovePlayerFromVehicle(playerid);
		SetPlayerPosEx(playerid,-56.6590,60.7795,3.1172);
		SetPlayerFacingAngle(playerid,343.4591);
	}
	if(GetPVarInt(playerid, "Drogenabbauen") == 1)
	{
		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		FarmerCP[playerid] = 0;
		DeletePVar(playerid, "Drogenabbauen");
		SendClientMessage(playerid,Rot,"Dein Drogenabbau wurde abgebrochen, da du den Mähdräscher verlassen hast!");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		RemovePlayerFromVehicle(playerid);
		SetPlayerPosEx(playerid,-56.6590,60.7795,3.1172);
		SetPlayerFacingAngle(playerid,343.4591);
	}
 	//Unfall System
	if(GetPVarInt(playerid, "Unfall") == 1)
	{
	    DeletePVar(playerid, "Unfall");
	    DeletePVar(playerid, "FW");
	   	new Float:xP,Float:xY,Float:xZ;
		GetPlayerPos(playerid, xP, xY, xZ);
		KillTimer(FeuerTimer[playerid]);
		RemovePlayerFromVehicle(playerid);
		SetPlayerHealth(playerid,0.0);
		CreateExplosion(xP, xY, xZ, 12, 3.0);
		if(GetPVarInt(playerid, "FW") == 1)
		{
			DeinFW[playerid] = 0;
			DeletePVar(playerid, "InFW");
			DeletePVar(playerid, "FW");
		}
	}
	//Warnlicht
	if(Olicht[vehicleid] == 1)
	{
		DestroyObject(light1[vehicleid]);
		DestroyObject(light2[vehicleid]);
		DestroyObject(light3[vehicleid]);
		DestroyObject(light4[vehicleid]);
		DestroyObject(light5[vehicleid]);
		GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Warnlicht ~r~deaktiviert",3000, 5);
		Olicht[vehicleid] = 0;
	}
	//Sirene
	if(UCL[GetPlayerVehicleID(playerid)] == 1)
	{
	    DestroyObject(sirene[vehicleid]);
	    DestroyObject(sirene1[vehicleid]);
	    DestroyObject(sirene2[vehicleid]);
	    DestroyObject(sirene3[vehicleid]);
	    DestroyObject(sirene4[vehicleid]);
	    UCL[vehicleid] = 0;
	}
	//Speedometer
	if(GetPVarInt(playerid, "Speedometer") == 1)
	{
		HideSpeedometer(playerid);
		KillTimer(timer2[playerid]);
	}
		//Reinigungsmission
	  if(sStats[playerid][sMission] > 0)
	  {
	  		ClearChat(playerid);
	  		DisablePlayerCheckpoint(playerid);
			QuestCP[playerid] = 0;
		    sStats[playerid][sMission] = 0;
		    sStats[playerid][sMissionZeit] = gettime()+(2*60);
    		RemovePlayerFromVehicle(playerid);
   			DestroyVehicle(Sweeper[playerid]);
		    SendClientMessage(playerid,Weiß,"Deine Reinigungsmission wurde beendet, da du das Fahrzeug verlassen hast!");
	  }
	//Helm System
	if(sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 1)
	{
	    RemovePlayerHelm(playerid);
	    SetPVarInt(playerid, "Helm", 0);
	}
	//Fahrschule Führerscheinprüfung
	if(GetPVarInt(playerid, "InFschein") > 0)
 	{
		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		FscheinCP[playerid] = 0;
  		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Führerscheines leider nicht bestanden, da du das Fahrzeug verlassen hast!");
	    SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Führerschein Preises zurück bekommen!");
   		KillTimer(rtimer[playerid]);
		SetPVarInt(playerid,"Nachricht",0);
   		SetVehicleToRespawn(vehicleid);
   		sStats[playerid][sAutoschein] = 0;
   		GivePlayerEuro(playerid,600);
		SetPVarInt(playerid, "InFschein", 0);
  		ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 0);
	}
	//Fahrschule Truckerscheinprüfung
	if(GetPVarInt(playerid, "InTschein") > 0)
 	{
		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
  		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Truckerscheines leider nicht bestanden, da du das Fahrzeug verlassen hast!");
	    SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Truckerschein Preises zurück bekommen!");
	    DestroyVehicle(Truck[playerid]);
   		GivePlayerEuro(playerid,4500);
		SetPVarInt(playerid, "InTschein", 0);
  		ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 0);
	}
	//Fahrschule Motorradprüfung
	if(GetPVarInt(playerid, "InMschein") > 0)
 	{
 		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Motorradscheines leider nicht bestanden, da du das Fahrzeug verlassen hast!");
	    SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Motorradschein Preises zurück bekommen!");
   		KillTimer(rtimer[playerid]);
		SetPVarInt(playerid,"Nachricht",0);
  		DisablePlayerCheckpoint(playerid);
  		DestroyVehicle(MotorAuto[playerid]);
		FscheinCP[playerid] = 0;
   		sStats[playerid][sMotorradschein] = 0;
   		RemovePlayerHelm(playerid);
   		SetPVarInt(playerid, "Helm", 0);
   		sStats[playerid][sHelm] = 0;
   		GivePlayerEuro(playerid,2500);
		SetPVarInt(playerid, "InMschein", 0);
		ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 0);
	}
	//Premiuminselmusik
	if(sStats[playerid][sPremium] > 0 && IsPlayerInRangeOfPoint(playerid,65,-2290.3059,1958.2678,1.7871))
	{
		PlayAudioStreamForPlayer(playerid, "http://listen.housetime.fm/dsl.pls", -2290.3059,1958.2678,1.7871, 35.0, 1);
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new string[128];
	new aauto = GetPlayerVehicleID(playerid);
	//Gangautohaus
	FRAC_OnPlayerStateChange(playerid, newstate, oldstate);
	//Anti-Waffen Cheat
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
			case 592,577,511,512,520,593,553,476,519,460,513,548,425,417,487,488,497,563,447,469: PlayerWeapons[playerid][46]=true;
			case 457: PlayerWeapons[playerid][2]=true;
			case 596,597,598,599: PlayerWeapons[playerid][25]=true;
		}
	}
	//Tankleer anzeige
	if(Tankmenge[GetPlayerVehicleID(playerid)] <= 0 && sStats[playerid][sJob] != 1 && GetVehicleModel(aauto) != 481 && newstate != PLAYER_STATE_PASSENGER && IsPlayerInAnyVehicle(playerid))
	{
 		SendClientMessage(playerid,Rot,"Der Tank dieses Fahrzeuges ist leer, (/service) um einen Mechatroniker anzurufen!");
	    return 1;
	}
	if(Tankmenge[GetPlayerVehicleID(playerid)] <= 0 && sStats[playerid][sJob] == 1 && GetVehicleModel(aauto) != 481 && newstate != PLAYER_STATE_PASSENGER && IsPlayerInAnyVehicle(playerid))
	{
 		SendClientMessage(playerid,Gruen,"Du kannst das Fahrzeug in der Mechatroniker Garage betanken, schleppe es dorthin ab!");
	    return 1;
	}
	//Motorsystem kaputt
	if(MotorKaputt[aauto] == 1 && sStats[playerid][sJob] != 1 && GetVehicleModel(aauto) != 481 && newstate != PLAYER_STATE_PASSENGER && IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid,Rot,"Der Motor dieses Fahrzeuges ist kaputt, und kann nur von einem Mechatroniker repariert werden (/service)!");
	    return 1;
	}
	if(MotorKaputt[aauto] == 1 && sStats[playerid][sJob] == 1 && GetVehicleModel(aauto) != 481 && newstate != PLAYER_STATE_PASSENGER && IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid,Gruen,"Du kannst den Motor dieses Fahrzeug in der Mechatroniker Garage reparieren, schleppe es dorthin ab!");
	    return 1;
	}
	//Reinigungsmission
	if(MotorKaputt[aauto] == 0 && sStats[playerid][sJob] == 1 && VehicleStarted[aauto] == 1 && GetVehicleModel(aauto) == 574 && newstate != PLAYER_STATE_PASSENGER && IsPlayerInAnyVehicle(playerid) && Tankmenge[GetPlayerVehicleID(playerid)] >= 1 && sStats[playerid][sMissionZeit] <= 0)
	{
	    SendClientMessage(playerid,Gelb,"Benutze die Taste [STRG] um die Reinigungsmission zu beginnen!");
	    return 1;
	}
	//Motorsystem
	new engine;
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++)
	{
		if(engine != VEHICLE_PARAMS_ON && IsPlayerInAnyVehicle(playerid) && VehicleStarted[aauto] == 0 && MotorKaputt[aauto] == 0 && GetVehicleModel(aauto) != 481 && newstate != PLAYER_STATE_PASSENGER && Tankmenge[GetPlayerVehicleID(playerid)] >= 1 && aauto != FactionBuylist[fbl][fbCarid] && GetPVarInt(playerid, "NoMotor") == 0)
		{
			new playingid = v_VehicleInfo[aauto][RadioPlaying];
			format(string,sizeof(string),"Aktuelle Radiostation: ~n~~w~%s",r_RadioInfo[playingid][r_Name]);
			TextDrawSetString(v_VehicleInfo[aauto][r_Draw],string);
			TextDrawShowForPlayer(playerid,v_VehicleInfo[aauto][r_Draw]);
			SetTimerEx("HideRadioTextdraw",TEXTDRAW_DISAPPEAR_TIME,false,"ii",playerid,aauto);
			SendClientMessage(playerid,Gelb,"Der Motor deines Fahrzeuges ist aus, bitte starte diesen mit der Taste [2]!");
			return 1;
		}
	}
	//Speedometer
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(GetPVarInt(playerid, "Speedometer") == 0 && IsPlayerInAnyVehicle(playerid) && VehicleStarted[aauto] == 1 && MotorKaputt[aauto] == 0 && Tankmenge[GetPlayerVehicleID(playerid)] >= 1)
		{
			ShowSpeedometer(playerid);
			UpdateSpeedometer(playerid);
		}
	}
	//Premiuminselmusik
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_PASSENGER)
 	{
		if(sStats[playerid][sPremium] > 0 && IsPlayerInRangeOfPoint(playerid,65,-2290.3059,1958.2678,1.7871))
		{
			PlayAudioStreamForPlayer(playerid, "http://listen.housetime.fm/dsl.pls", -2290.3059,1958.2678,1.7871, 35.0, 1);
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER && GetPVarInt(playerid, "Speedometer") == 1)
	{
		HideSpeedometer(playerid);
		KillTimer(timer2[playerid]);
		//Fahrschule Motorradprüfung
		if(GetPVarInt(playerid, "InMschein") > 0)
	 	{
			ClearChat(playerid);
			SendClientMessage(playerid,Gelb2,"Du bist leider bei der Motorradscheinprüfung durchgefallen, da du von deinem Motorrad gestürzt bist!");
			SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Motorradschein Preises zurück bekommen!");
	   		KillTimer(rtimer[playerid]);
			SetPVarInt(playerid,"Nachricht",0);
	  		DisablePlayerCheckpoint(playerid);
	  		DestroyVehicle(MotorAuto[playerid]);
			FscheinCP[playerid] = 0;
	   		sStats[playerid][sMotorradschein] = 0;
	   		RemovePlayerHelm(playerid);
	   		SetPVarInt(playerid, "Helm", 0);
	   		sStats[playerid][sHelm] = 0;
	   		GivePlayerEuro(playerid,2500);
			SetPVarInt(playerid, "InMschein", 0);
			ClearAnimations(playerid);
			SetCameraBehindPlayer(playerid);
	     	TogglePlayerControllable(playerid, true);
			SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
			SetPlayerFacingAngle(playerid,89.5907);
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	//Warnlicht
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
 	{
		if(Olicht[GetPlayerVehicleID(playerid)] == 1)
		{
			DestroyObject(light1[GetPlayerVehicleID(playerid)]);
			DestroyObject(light2[GetPlayerVehicleID(playerid)]);
			DestroyObject(light3[GetPlayerVehicleID(playerid)]);
			DestroyObject(light4[GetPlayerVehicleID(playerid)]);
			DestroyObject(light5[GetPlayerVehicleID(playerid)]);
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Warnlicht ~r~deaktiviert",3000, 5);
			Olicht[GetPlayerVehicleID(playerid)] = 0;
		}
		//Sirene
		if(UCL[GetPlayerVehicleID(playerid)] == 1)
		{
		    DestroyObject(sirene[GetPlayerVehicleID(playerid)]);
		    DestroyObject(sirene1[GetPlayerVehicleID(playerid)]);
		    DestroyObject(sirene2[GetPlayerVehicleID(playerid)]);
		    DestroyObject(sirene3[GetPlayerVehicleID(playerid)]);
		    DestroyObject(sirene4[GetPlayerVehicleID(playerid)]);
		    UCL[GetPlayerVehicleID(playerid)] = 0;
		}
	}
	//Wohnwageninterior
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 508)
	{
		SetPlayerPosEx(playerid, 2404.993164, -1512.187500, 898.142944);
 		SetPlayerFacingAngle(playerid, 0);
  		SetCameraBehindPlayer(playerid);
    	SetPlayerInterior(playerid, 1);
		Injourney[playerid] = GetPlayerVehicleID(playerid);
 		SetPlayerVirtualWorld(playerid,GetPlayerVehicleID(playerid));
    }
	//Towtruck
	if(MotorKaputt[aauto] == 0 && sStats[playerid][sJob] == 1 && VehicleStarted[aauto] == 1 && GetVehicleModel(aauto) == 525 && newstate != PLAYER_STATE_PASSENGER && IsPlayerInAnyVehicle(playerid) && Tankmenge[GetPlayerVehicleID(playerid)] >= 1 && GetPVarInt(playerid, "MechaDienst") == 1)
	{
	 	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
	  	{
	  	    SendClientMessage(playerid,Gelb,"Mit der [STRG] Taste kannst du Fahrzeug abschleppen!");
	  	}
	}
	//Tanksystem
 	if(newstate == PLAYER_STATE_DRIVER)
    {
		if(IsABike(GetPlayerVehicleID(playerid)))
		{
		    KillTimer(timer2[playerid]);
	   		timer2[playerid] = SetTimerEx("TankTimer",51437,true,"i",playerid);
		}
		else
		{
		    KillTimer(timer2[playerid]);
	   		timer2[playerid] = SetTimerEx("TankTimer",25793,true,"i",playerid);
		}
	}
	//Helm
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
 		if(IsAHelmBike(GetPlayerVehicleID(playerid)) && sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 0)
 		{
 		    SetPlayerHelm(playerid);
 		    SetPVarInt(playerid, "Helm", 1);
 		}
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER && newstate != PLAYER_STATE_DRIVER && sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 1)
	{
	    RemovePlayerHelm(playerid);
	    SetPVarInt(playerid, "Helm", 0);
	}
	//Führerschein
	if(spawncar_job[aauto] == 95 && newstate == PLAYER_STATE_DRIVER)
	{
		if(GetPVarInt(playerid, "InFschein") == 1)
		{
		    ClearChat(playerid);
		    SetPVarInt(playerid, "SWarnungen",0);
		    SendClientMessage(playerid, Weiß, "Herzlich Willkommen beim Führerschein Praxis Test!");
		    SendClientMessage(playerid, Weiß, "Fahre nun die Checkpoints ab und folge den weiteren Instruktionen!");
		    SendClientMessage(playerid, Weiß, "Solltest du aussteigen oder sterben hast du den Praxis Test leider nicht bestanden!");
		    SendClientMessage(playerid, COLOR_LIGHTRED, "INFO: Achte auf deine Geschwindigkeit, und deinen Fahrzeugzustand!");
			SetPlayerCheckpoint(playerid, -2046.9519,-156.4195,35.3274, 3.0); //Führerschein Praxis CP 1
			FscheinCP[playerid] = 1;
		}
	}
	//Radioansage
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(GetVehicleModel(aauto) != 481 && sStats[playerid][sLevel] < 2 && GetPVarInt(playerid, "NoMotor") == 0)
		{
			SendClientMessage(playerid,Gelb,"Um das Radio benutzen zu können, lese dir die Informationen unter /radiohelp durch!");
		}
	}
	//Autoradio
	if(GetVehicleModel(aauto) != 481)
	{
		if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
		{
			new vehicleid = GetPlayerVehicleID(playerid),
			playingid = v_VehicleInfo[vehicleid][RadioPlaying];
			#if USE_TEXTDRAW_SET == 2
			format(string,sizeof(string),"Aktuelle Radiostation: ~n~~w~%s",r_RadioInfo[playingid][r_Name]);
			TextDrawSetString(v_VehicleInfo[vehicleid][r_Draw],string);
			#else
			TextDrawSetString(v_VehicleInfo[vehicleid][r_Draw],r_RadioInfo[playingid][r_Name]);
			#endif
			TextDrawShowForPlayer(playerid,v_VehicleInfo[vehicleid][r_Draw]);
			SetPVarInt(playerid,"ID_HideRadioTextdraw",SetTimerEx("HideRadioTextdraw",TEXTDRAW_DISAPPEAR_TIME,false,"ii",playerid,vehicleid));
			PlayAudioStreamForPlayer(playerid,r_RadioInfo[playingid][r_Link]);
			SetPVarInt(playerid,"ID_OldVehicle",vehicleid);
			return 1;
		}
		if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
		{
			new vehicleid = GetPVarInt(playerid,"ID_OldVehicle"),
			timer = GetPVarInt(playerid,"ID_HideRadioTextdraw");
			if(timer != -1)
			{
				TextDrawHideForPlayer(playerid,v_VehicleInfo[vehicleid][r_Draw]);
				KillTimer(timer);
			}
			StopAudioStreamForPlayer(playerid);
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	new string[128];
	//Farmer kuh melken
	if(GetPVarInt(playerid, "Kuhmelken") == 1)
	{
		if(FarmerCP[playerid] == 63)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 64;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, -15.8968,-48.5004,3.1172, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 64)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 65;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, -15.8968,-48.5004,3.1172, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 65)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 66;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, -28.5523,-83.0518,3.1172, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 66)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 67;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, -15.4405,-69.8222,3.1172, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 67)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 68;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, 2.4028,-49.8817,3.1172, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 68)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 69;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, -18.2966,-95.8829,3.1172, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 69)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 70;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, 1.0015,-95.2409,2.4800, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 70)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 71;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, -3.9494,-80.2775,3.1172, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 71)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 72;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, 14.3345,-60.3758,3.1172, 1.0);
		}
		else if(FarmerCP[playerid] == 72)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 73;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, 13.0192,-77.3525,2.4073, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 73)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 74;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, 17.8126,-91.6936,1.5570, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 74)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 75;
		    TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetPlayerCheckpoint(playerid, 35.3117,-88.9462,0.6094, 1.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 75)
		{
		 	DisablePlayerCheckpoint(playerid);
    		TogglePlayerControllable(playerid, false);
		    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~y~Kuh ~w~wird ~w~gemolken",3002, 5);
		    SetTimerEx("Gemolken",3313,false,"i",playerid);
		    SetTimerEx("Gemolkenende",6001,false,"i",playerid);
		    return 1;
		}
		return 1;
	}
	//Farmer ernte abbauen
	if(GetPVarInt(playerid, "Drogenabbauen") == 1)
	{
		if(FarmerCP[playerid] == 37)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 38;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 38)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 39;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 39)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 40;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 40)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 41;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 41)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 42;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 42)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 43;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 43)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 44;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 44)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 45;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 45)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 46;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 46)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 47;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 47)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 48;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 48)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 49;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 49)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 50;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 50)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 51;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 51)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 52;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 52)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 53;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 53)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 54;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 54)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 55;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 55)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 56;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 56)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 57;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 57)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 58;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 58)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 59;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 59)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 60;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 60)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 61;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 61)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 62;
//		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, -100.2921,-59.8914,2.6891, 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 62)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 0;
		    new tankmenge = GasMax[GetVehicleModel(GetPlayerVehicleID(playerid))-400] - Tankmenge[GetPlayerVehicleID(playerid)];
		    new preis = tankmenge * BizzInfo[0][bEntranceCost];
			ClearChat(playerid);
			sStats[playerid][sDrogenAngebaut] = 0;
			sStats[playerid][sDrogenZeit] = 0;
			SetPVarInt(playerid,"Drogenabbauen",0);
			PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
			new drogen = 15 + random (15);
			new geld = 584 + random (963) + 50;
			format(string, sizeof(string), "Du hast erfolgreich %d Drogen abgebaut und erhältst dafür %d!",drogen,geld);
			Drogenn+=drogen;
 			SendClientMessage(playerid,Gelb2,string);
 			format(string, sizeof(string), "Außerdem musstest du %d für eine Tankladung zahlen!",preis);
 			SendClientMessage(playerid,COLOR_LIGHTRED,string);
 			format(string, sizeof(string), "{FFFF00}Drogenstelle /getdrugs.\n{FFFFFF}Verfügbare Drogen: {FFFF00}0\n{FFFFFF}Preis pro Gramm: {FFFF00}500.", Drogenn);
			UpdateDynamic3DTextLabelText(drugss, 0x0C9BCBFF, string);
 			GivePlayerEuro(playerid,geld);
 			SaveSonstiges();
 			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			RemovePlayerFromVehicle(playerid);
			SetPlayerPosEx(playerid,-56.6590,60.7795,3.1172);
			SetPlayerFacingAngle(playerid,343.4591);
			return 1;
		}
	}
	//Farmer ernte anbauen
	if(GetPVarInt(playerid, "Drogenanbauen") == 1)
	{
		if(FarmerCP[playerid] == 1)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 2;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 2)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 3;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
	 	else if(FarmerCP[playerid] == 3)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 4;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 4)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 5;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 5)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 6;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 6)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 7;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 7)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 8;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 8)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 9;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 9)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 10;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 10)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 11;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 11)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 12;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 12)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 13;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 13)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 14;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 14)
  		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 15;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 15)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 16;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 16)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 17;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 17)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 18;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 18)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 19;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 19)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 20;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 20)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 21;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 21)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 22;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 22)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 23;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 23)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 24;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 24)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 25;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 25)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 26;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 26)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 27;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 27)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 28;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 28)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 29;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 29)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 30;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 30)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 31;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 31)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 32;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 32)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 33;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 33)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 34;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 34)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 35;
		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 35)
		{
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 36;
//		    new rand = random(sizeof(FarmerCPan));
		    SetPlayerCheckpoint(playerid, -100.2921,-59.8914,2.6891, 7.0);
		    return 1;
		}
		else if(FarmerCP[playerid] == 36)
		{
		    new tankmenge = GasMax[GetVehicleModel(GetPlayerVehicleID(playerid))-400] - Tankmenge[GetPlayerVehicleID(playerid)];
		    new preis = tankmenge * BizzInfo[0][bEntranceCost];
		 	DisablePlayerCheckpoint(playerid);
		    FarmerCP[playerid] = 0;
			ClearChat(playerid);
			sStats[playerid][sDrogenAngebaut] = 1;
			sStats[playerid][sDrogenZeit] = gettime()+(60*10);
			SetPVarInt(playerid,"Drogenanbauen",0);
			PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,Weiß,"Du hast erfolgreich Drogen angebaut du kannst diese in 10 Minuten mit /drogenabbauen ernten!");
 			format(string, sizeof(string), "Außerdem musstest du %d für eine Tankladung zahlen!",preis);
 			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			RemovePlayerFromVehicle(playerid);
   			SendClientMessage(playerid,COLOR_LIGHTRED,string);
			SetPlayerPosEx(playerid,-56.6590,60.7795,3.1172);
			SetPlayerFacingAngle(playerid,343.4591);
			return 1;
		}
	}
	//Säuberungsmission
	if(sStats[playerid][sMission] > 0)
	{
		if(QuestCP[playerid] == 95)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 94;
	  		SetPlayerCheckpoint(playerid,-2552.2532,2333.4832,4.5533,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 94)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 93;
	  		SetPlayerCheckpoint(playerid,-2544.9468,2390.0681,14.4123,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 93)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 92;
	  		SetPlayerCheckpoint(playerid,-2616.8345,2356.7922,8.2847,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 92)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 91;
	  		SetPlayerCheckpoint(playerid,-2565.5068,2310.0930,4.5611,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 91)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 90;
	  		SetPlayerCheckpoint(playerid,-2483.6519,2258.9280,4.5611,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 90)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 89;
	  		SetPlayerCheckpoint(playerid,-2464.0715,2315.3992,4.5609,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 89)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 88;
	  		SetPlayerCheckpoint(playerid,-2382.4985,2343.5371,4.5610,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 88)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 87;
	  		SetPlayerCheckpoint(playerid,-2287.8411,2359.1504,5.0145,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 87)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 86;
	  		SetPlayerCheckpoint(playerid,-2270.8574,2290.7622,4.5452,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 86)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 85;
	  		SetPlayerCheckpoint(playerid,-2251.1316,2327.5017,4.5376,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 85)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 84;
	  		SetPlayerCheckpoint(playerid,-2289.6409,2366.7212,5.0950,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 84)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 83;
	  		SetPlayerCheckpoint(playerid,-2405.7209,2435.7991,11.1344,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 83)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 82;
	  		SetPlayerCheckpoint(playerid,-2492.0654,2429.5918,16.1086,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 82)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 81;
	  		SetPlayerCheckpoint(playerid,-2485.0127,2382.8413,13.0586,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 81)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 80;
	  		SetPlayerCheckpoint(playerid,-2503.0068,2335.9045,4.5956,4.0);
	  		GivePlayerEuro(playerid,40);
	  		return 1;
		}
		else if(QuestCP[playerid] == 80)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 		QuestCP[playerid] = 0;
	  		GivePlayerEuro(playerid,100);
	   		RemovePlayerFromVehicle(playerid);
	   		DestroyVehicle(Sweeper[playerid]);
	  		PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	  		SendClientMessage(playerid,Weiß,"Du hast erfolgreich die Stadt gereinigt, und erhältst zusätzlich eine Prämie in höhe von 100!");
	  		sStats[playerid][sMissionZeit] = gettime()+(2*60);
	  		sStats[playerid][sMission] = 0;
	  		return 1;
		}

	}
	//Führerschein
	if(FscheinCP[playerid] == 1)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, 0.0,0.0,0.0);
	 	SendClientMessage(playerid, COLOR_WHITE, "Bitte warte nun vor dem Warnbalken unter dir,");
	 	SendClientMessage(playerid, COLOR_WHITE, "bis die Ampel auf Grün schaltet.");
	 	SendClientMessage(playerid, COLOR_WHITE, "Sofern diese Grün ist darfst du losfahren.");
	 	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Viel Glück wünscht dir die Fahrschule.");
	 	SetPlayerCheckpoint(playerid, -2047.7153,-236.6055,35.3271, 3.0); //Führerschein Praxis CP 2
	 	FscheinCP[playerid] = 2;
	 	return 1;
	}
	else if(FscheinCP[playerid] == 2)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, -1,-1,-1);
	 	SendClientMessage(playerid, COLOR_WHITE, "Fahre jetzt einmal um den Kreisverkehr.");
        SendClientMessage(playerid, COLOR_WHITE, "Achte dabei auf deinen Fahrzeugzustand, und die Gegenstände im Kreisverkehr.");
	 	SetPlayerCheckpoint(playerid, -2020.6917,-228.9259,35.3203, 3.0); //Führerschein Praxis CP 3
	 	FscheinCP[playerid] = 3;
	 	return 1;
	}
	else if(FscheinCP[playerid] == 3)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, -1,-1,-1);
	 	SendClientMessage(playerid, COLOR_WHITE, "Biege nun links ab.");
	 	SetPlayerCheckpoint(playerid, -2078.8279,-198.6973,35.3299, 3.0); //Führerschein Praxis CP 4
	 	FscheinCP[playerid] = 4;
	 	return 1;
	}
	else if(FscheinCP[playerid] == 4)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, -1,-1,-1);
	 	SendClientMessage(playerid, COLOR_WHITE, "Hier musst du einmal um die Kurve driften.");
	 	SendClientMessage(playerid, COLOR_LIGHTRED, "Info: Achte dabei auf die Absperrungen.");
	 	SetPlayerCheckpoint(playerid, -2059.7573,-175.1811,35.2712, 3.0); //Führerschein Praxis CP 5
	 	FscheinCP[playerid] = 5;
	 	return 1;
	}
	else if(FscheinCP[playerid] == 5)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, -1,-1,-1);
	 	SendClientMessage(playerid, COLOR_WHITE, "Bitte versuche nun so sauber wie möglich hier Rückwärts einzuparken.");
	 	SendClientMessage(playerid, COLOR_LIGHTRED, "Info: Achte dabei auf die Absperrungen.");
	 	SetPlayerCheckpoint(playerid, -2081.5181,-175.1427,35.3962, 3.0); //Führerschein Praxis CP 6
	 	FscheinCP[playerid] = 6;
	 	return 1;
	}
	else if(FscheinCP[playerid] == 6)
 	{
  		rtimer[playerid] = SetTimerEx("CheckZAngle",1283,true,"i",playerid);
  		return 1;
	}
	else if(FscheinCP[playerid] == 7)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, -1,-1,-1);
	 	SendClientMessage(playerid, COLOR_WHITE, "Hier musst du Slalom um die Barrels fahren.");
	 	SendClientMessage(playerid, COLOR_LIGHTRED, "Info: Achte dabei auf die Absperrungen.");
	 	SetPlayerCheckpoint(playerid, -2085.6921,-146.1104,35.3203, 3.0); //Führerschein Praxis CP 8
	 	FscheinCP[playerid] = 8;
	 	return 1;
	}
	else if(FscheinCP[playerid] == 8)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, -1,-1,-1);
	 	SendClientMessage(playerid, COLOR_WHITE, "Hier beginnt der Brems und Reaktionstest.");
	 	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Erläuterung: Ab dem ersten gelben Strich gibs du Gas,");
	 	SendClientMessage(playerid, COLOR_LIGHTBLUE, "und beim zweiten gelben Strich fängst du an zu bremsen.");
	 	SendClientMessage(playerid, COLOR_WHITE, "Solltest du dieses erledigt haben fahre in den Checkpoint.");
	 	SetPlayerCheckpoint(playerid, -2092.5898,-273.5139,35.3203, 3.0); //Führerschein Praxis Ende CP
	 	FscheinCP[playerid] = 9;
	 	return 1;
	}
		else if(FscheinCP[playerid] == 9)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, -1,-1,-1);
		FscheinCP[playerid] = 0;
		new vehicleid = GetPlayerVehicleID(playerid);
	    new Float:vhealth;
    	GetVehicleHealth(vehicleid,vhealth);
 	    if(vhealth<650.0)
 	    {
	    SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Führerscheines leider nicht bestanden, da dein Auto zu stark beschädigt ist!");
	    SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Führerschein Preises zurück bekommen!");
   		KillTimer(rtimer[playerid]);
		SetPVarInt(playerid,"Nachricht",0);
		Tankmenge[vehicleid] = GasMax[GetVehicleModel(vehicleid)-400];
   		RemovePlayerFromVehicle(playerid);
   		SetVehicleToRespawn(vehicleid);
   		sStats[playerid][sAutoschein] = 0;
   		GivePlayerEuro(playerid,600);
	    ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 0);
		SetPVarInt(playerid, "InFschein", 0);
   		return 1;
   		}
   		Tankmenge[vehicleid] = GasMax[GetVehicleModel(vehicleid)-400];
      	RemovePlayerFromVehicle(playerid);
		sStats[playerid][sAutoschein] = 1;
		SetVehicleToRespawn(vehicleid);
		SendClientMessage(playerid,Gelb2,"Du hast die Praktische Prüfung bestanden!");
		SendClientMessage(playerid,Gelb2,"und erhältst deinen Führerschein!");
		SendClientMessage(playerid,Weiß,"Herzlichen Glückwunsch!");
		KillTimer(rtimer[playerid]);
		SetPVarInt(playerid,"Nachricht",0);
	    ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 0);
		SetPVarInt(playerid, "InFschein", 0);
		return 1;
	}
	//Motorradschein
	if(FscheinCP[playerid] == 10)
 	{
  		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, 0.0,0.0,0.0);
	 	SendClientMessage(playerid, COLOR_WHITE, "Bitte warte nun,");
	 	SendClientMessage(playerid, COLOR_WHITE, "bis die Ampel auf Grün schaltet.");
	 	SendClientMessage(playerid, COLOR_WHITE, "Sofern diese Grün ist darfst du losfahren.");
	 	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Viel Glück wünscht dir die Fahrschule.");
	 	SetPlayerCheckpoint(playerid, -2565.7075,2349.6357,5.3810, 3.0);
	 	FscheinCP[playerid] = 11;
	 	return 1;
 	}
	else if(FscheinCP[playerid] == 11)
 	{
 	    ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
	 	SetPlayerCheckpoint(playerid, -2484.4133,2258.3215,4.4079, 3.0);
	 	FscheinCP[playerid] = 12;
	 	return 1;
 	}
	else if(FscheinCP[playerid] == 12)
 	{
  		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
  		PlayerPlaySound(playerid, 1057, 0.0,0.0,0.0);
	 	SendClientMessage(playerid, Rot, "Beachte! Bei einem Zebrastreifen haben Fußgänger Vorrang.");
	 	SetPlayerCheckpoint(playerid, -2408.5730,2338.1299,4.3994, 3.0);
	 	FscheinCP[playerid] = 13;
	 	return 1;
 	}
	else if(FscheinCP[playerid] == 13)
 	{
  		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
  		SetPlayerCheckpoint(playerid, -2400.2944,2434.2798,10.4442, 3.0);
	 	FscheinCP[playerid] = 14;
	 	return 1;
 	}
	else if(FscheinCP[playerid] == 14)
 	{
  		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
  		SetPlayerCheckpoint(playerid, -2499.2017,2426.3049,16.1522, 3.0);
	 	FscheinCP[playerid] = 15;
	 	return 1;
 	}
	else if(FscheinCP[playerid] == 15)
 	{
  		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
  		SetPlayerCheckpoint(playerid, -2520.9590,2450.3091,17.2447, 3.0);
	 	FscheinCP[playerid] = 16;
	 	return 1;
 	}
	else if(FscheinCP[playerid] == 16)
 	{
		ClearChat(playerid);
  		DisablePlayerCheckpoint(playerid);
		PlayerPlaySound(playerid, 1057, -1,-1,-1);
		FscheinCP[playerid] = 0;
		RemovePlayerHelm(playerid);
		SetPVarInt(playerid, "Helm", 0);
		sStats[playerid][sHelm] = 0;
		new vehicleid = GetPlayerVehicleID(playerid);
	    new Float:vhealth;
    	GetVehicleHealth(vehicleid,vhealth);
 	    if(vhealth<450.0)
 	    {
		    SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Motorradscheines leider nicht bestanden, da dein Motorrad zu stark beschädigt ist!");
		    SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Motorradschein Preises zurück bekommen!");
	   		RemovePlayerFromVehicle(playerid);
	   		DestroyVehicle(MotorAuto[playerid]);
	   		sStats[playerid][sMotorradschein] = 0;
	   		GivePlayerEuro(playerid,2500);
		    ClearAnimations(playerid);
			SetCameraBehindPlayer(playerid);
	     	TogglePlayerControllable(playerid, true);
			SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
			SetPlayerFacingAngle(playerid,89.5907);
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 0);
			SetPVarInt(playerid, "InMschein", 0);
	   		return 1;
   		}
   		RemovePlayerFromVehicle(playerid);
   		DestroyVehicle(MotorAuto[playerid]);
		sStats[playerid][sMotorradschein] = 1;
		SendClientMessage(playerid,Gelb2,"Du hast die Praktische Prüfung bestanden!");
		SendClientMessage(playerid,Gelb2,"und erhältst deinen Motorradschein!");
		SendClientMessage(playerid,Weiß,"Herzlichen Glückwunsch!");
	    ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 0);
		SetPVarInt(playerid, "InMschein", 0);
		return 1;
 	}
	if(QuestCP[playerid] == 9999)
	{
 		DisablePlayerCheckpoint(playerid);
 	    QuestCP[playerid] = 0;
 	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Ziel ~g~erreicht!",3500, 5);
 	    return 1;
 	}
	if(QuestCP[playerid] == 160)
	{
 		DisablePlayerCheckpoint(playerid);
 	    QuestCP[playerid] = 0;
 	    ClearChat(playerid);
 	    SendClientMessage(playerid,Weiß,"Willkommen an der Autoabholestelle!");
 	    SendClientMessage(playerid,Weiß,"Um dein Fahrzeug zu erhalten, fahre die Rolltreppe hoch und benutze den Autoschalter.");
 	    return 1;
 	}
	if(QuestCP[playerid] == 94)
	{
 	    ClearChat(playerid);
 	    DisablePlayerCheckpoint(playerid);
 	    QuestCP[playerid] = 0;
	    PlayerPlaySound(playerid, 1057, 0.0,0.0,0.0);
		SendClientMessage(playerid, Weiß, "Du hast das Geld erfolgreich gewaschen!");
	 	SendClientMessage(playerid, Weiß, "Deine Wanteds wurden auf 3 Sterne vermindert!");
	 	new geld = GetPVarInt(playerid, "BankGeld");
	 	format(string, sizeof(string), "Du erbeutest %d von dem Bankraub!",geld);
	 	SendClientMessage(playerid,Gelb2,string);
	 	GivePlayerEuro(playerid,GetPVarInt(playerid, "BankGeld"));
   		RemovePlayerAttachedObject(playerid,0);
	 	DeletePVar(playerid, "BankGeld");
	 	DeletePVar(playerid, "BankRaub");
 		SetPlayerWantedLevel(playerid,3);
 		sStats[playerid][sWanteds] = 3;
	 	format(string, sizeof(string), "Der Bankräuber %s[%d] hat das geklaute Geld erfolgreich gewaschen!", GetName(playerid), playerid);
		SendRadioMessage(1, COLOR_BLUE, string);
		return 1;
	}
	if(QuestCP[playerid] == 955)
	{
 		new stringq[128];
 	    ClearChat(playerid);
		PlayerPlaySound(playerid, 1057, 0.0,0.0,0.0);
	 	SendClientMessage(playerid, Weiß, "Du hast deine Zwischenstation erreicht, bitte fahre nun zur entgültigen Geldwäscherei in Los Santos!");
	 	SendClientMessage(playerid, Weiß, "Deine Wanteds wurden auf 4 Sterne vermindert!");
	 	DisablePlayerCheckpoint(playerid);
	 	SetPlayerCheckpoint(playerid, 2740.9712,-2003.3624,13.5472, 3.0);
	 	QuestCP[playerid] = 94;
 		SetPlayerWantedLevel(playerid,4);
 		sStats[playerid][sWanteds] = 4;
	 	format(stringq, sizeof(string), "Der Bankräuber %s[%d] wurde an der Geldwäsche Zwischenstation gesichtet!", GetName(playerid), playerid);
		SendRadioMessage(1, COLOR_BLUE, stringq);
		return 1;
 	}
 	if(QuestCP[playerid] == 997)
 	{
		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    TogglePlayerControllable(playerid, false);
	    ShowPlayerDialog(playerid, BENZIN, DIALOG_STYLE_INPUT, "Benzin kaufen/einlagern", "{FFFFFF}Wieviel Liter {FFFF00}Benzin {FFFFFF}möchtest du kaufen?\n{FFFF00}(Benzinpreis pro Liter: 4)", "Weiter","Abbrechen");
	    return 1;
 	}
 	if(QuestCP[playerid] == 998)
 	{
		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    TogglePlayerControllable(playerid, false);
	    ShowPlayerDialog(playerid, PRODUKTE, DIALOG_STYLE_INPUT, "Produkte kaufen/einlagern", "{FFFFFF}Wieviele {FFFF00}Produkte {FFFFFF}möchtest du kaufen?\n{FFFF00}(Produktpreis: 70)", "Weiter","Abbrechen");
	    return 1;
 	}
	if(QuestCP[playerid] == 193)
	{
	    if(IsPlayerInAnyVehicle(playerid)) { return 1; }
	    PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
    	if(GetPVarInt(playerid, "Adminduty") == 1 && sStats[playerid][sAdminlevel] == 5)
		{
		    RemovePlayerAttachedObject(playerid, 5);
		    RemovePlayerAttachedObject(playerid, 6);
		}
		new skin = GetPlayerSkin(playerid);
		SetPVarInt(playerid,"Angela",1);
		SetPVarInt(playerid,"AVersuche",3);
	    SetPlayerAttachedObject(playerid, 5, 18943, 2, SkinCapOffset[skin][0], SkinCapOffset[skin][1], SkinCapOffset[skin][2], SkinCapOffset[skin][3], SkinCapOffset[skin][4], SkinCapOffset[skin][5]);
	    SetPlayerAttachedObject(playerid,6,18632,5,0.078999,0.048000,0.003000,-8.899996,4.900001,-4.600000,1.000000,1.000000,1.000000);
	    ShowPlayerDialog(playerid,ASCHEIN5,DIALOG_STYLE_MSGBOX,"Angel Instruktionen","{FFFFFF}Die Fahrschule leiht dir für die Prüfung eine Angel sowie 3 Köder aus\nDu musst mind. 2 Fische fangen um die Prüfung zu schaffen um ein richtiger Angler zu werden\nKlicke auf weiter um dir die {FFFF00}Angelanleitung {FFFFFF}anzusehen!","Weiter","");
	    return 1;
    }
    if(QuestCP[playerid] == 801)
    {
        DisablePlayerCheckpoint(playerid);
        ClearChat(playerid);
	   	SendClientMessage(playerid, Weiß, "Nachricht von Jack:");
	    SendClientMessage(playerid, COLOR_YELLOW, "Ich habe dir hier ein kleines Snipergewehr hinterlassen mit 5 Schuss!");
	    SendClientMessage(playerid, COLOR_YELLOW, "Dort unten steht der Typ mit dem grauen Sweatshirt! Leg ihn um und bring den Koffer bitte zu mir");
	    SendClientMessage(playerid, COLOR_ORANGE, "Info: Sofern du den Koffer hast, kehre nach Jack zurück und benutze /kofferback!");
	    GivePlayerWeaponEx(playerid,34,5);
	    SetPVarInt(playerid,"SniperQuest",1);
	    return 1;
    }
    if(QuestCP[playerid] == 800)
    {
        DisablePlayerCheckpoint(playerid);
    	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: So du bist also am Startower angekommen.");
	    SendClientMessage(playerid, COLOR_YELLOW, "Ich hab dir hier ein Fallschirm hingelegt, versuche auf das andere makierte Haus zu gleiten.");
	    SendClientMessage(playerid, COLOR_YELLOW, "Dort habe ich dir ein schönes Geschenk und eine Nachricht hinterlassen.");
	    SendClientMessage(playerid, COLOR_ORANGE, "Geb dein bestes!");
     	GivePlayerWeaponEx(playerid,46,1);
   		SetPlayerCheckpoint(playerid, 1329.6813,-1265.7010,31.4688, 4.0);
		QuestCP[playerid] = 801;
		return 1;
    }
   	if(QuestCP[playerid] == 799)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    ClearChat(playerid);
	    return 1;
    }
   	if(QuestCP[playerid] == 798)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    SendClientMessage(playerid,Weiß,"Begebe dich nun in das Bayside Police-Department, zur rechten Tür bei dem Authenfizierungsschalter und benutze /ulaptop!");
	    SendClientMessage(playerid,Orange,"Info: Pass auf das kein Polizist in der nähe ist!");
	    return 1;
    }
   	if(QuestCP[playerid] == 797)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    SendClientMessage(playerid,Weiß,"Direkt vor dir steht der Hauptserver benutze /ulaptop um die Daten herauszu bekommen!");
	    SendClientMessage(playerid,Orange,"Info: Pass auf das kein Polizist in der nähe ist!");
	    return 1;
    }
   	if(QuestCP[playerid] == 604)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    ClearChat(playerid);
		SendClientMessage(playerid,Weiß,"Hier liegt Rainer, befreie ihn /rbefreien!");
		SendClientMessage(playerid,Gelb2,"Schnell !!!");
		return 1;
    }
   	if(QuestCP[playerid] == 833)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
		return 1;
    }
   	if(QuestCP[playerid] == 603)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 604;
		SetPVarInt(playerid,"JackMission",2);
	    SetPlayerCheckpoint(playerid, -1438.3026,1491.0801,1.8672, 4.0);
	    new bot = GetNearestBot(playerid, 222);
		SetPlayerSpecialAction(bot, SPECIAL_ACTION_CUFFED);
		SetPlayerAttachedObject(bot, 3, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
		ApplyAnimation(bot, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
		return 1;
    }
   	if(QuestCP[playerid] == 378)
	{
		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
		Tuev = 1;
		GivePlayerEuro(playerid,-300);
		SendClientMessage(playerid,Gelb2,"Einen kleinen Augenblick bitte, ihr Fahrzeug wird nun von der KFZ-Zulassungstelle überprüft!");
		SetPVarInt(playerid,"InTuev",1);
		SetPlayerCameraPos(playerid,-1540.3800,2631.7561,56.8326);
		SetPlayerCameraLookAt(playerid,-1540.1633,2631.7534,56.8326,1);
		TogglePlayerControllable(playerid, false);
  		SetVehiclePos(GetPlayerVehicleID(playerid),-1526.1537,2631.6104,56.9902);
    	SetVehicleZAngle(GetPlayerVehicleID(playerid), 270.1181);
		SetTimerEx("Tuev1",7151,false,"i",playerid);
		HideSpeedometer(playerid);
		SetRadioStation(GetPlayerVehicleID(playerid),0);
		return 1;
    }
   	if(QuestCP[playerid] == 970)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    return 1;
    }
   	if(QuestCP[playerid] == 602)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 603;
	    SetPlayerCheckpoint(playerid, -1380.7557,1494.3203,1.8516, 4.0);
	    ConnectNPC("Rainer","rainer");
	    return 1;
    }
   	if(QuestCP[playerid] == 601)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 602;
	    ConnectNPC("Fernandez","angriff2");
	    SetPlayerCheckpoint(playerid, -1370.4993,1491.2424,11.0391, 4.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 600)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 601;
	    ConnectNPC("Fernandez","angriff1");
	    SetPlayerCheckpoint(playerid, -1412.9910,1491.3417,7.1092, 4.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 701)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 702;
	    SetPlayerCheckpoint(playerid, -2751.0840,2357.1458,73.9967, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 702)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 703;
	    SetPlayerCheckpoint(playerid, -2705.7324,2215.1228,55.9670, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 703)
	{
	    ClearChat(playerid);
	    SendClientMessage(playerid,Weiß,"Besorge dir jetzt einen Anhänger von der Ölraffinerie, fahre danach die Checkpoints weiter ab!");
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 704;
	    SetPlayerCheckpoint(playerid, -2775.2849,1583.2162,14.0950, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 704)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 705;
	    SetPlayerCheckpoint(playerid, -2691.5608,2043.2573,57.7410, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 705)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 706;
	    SetPlayerCheckpoint(playerid, -2692.7056,1416.6689,56.0365, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 706)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 707;
	    SetPlayerCheckpoint(playerid, -2583.8401,1109.7167,56.0873, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 707)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 708;
	    SetPlayerCheckpoint(playerid, -2529.5288,795.4783,49.7853, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 708)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 709;
	    SetPlayerCheckpoint(playerid, -2470.8269,561.8567,19.4912, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 709)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 710;
	    SetPlayerCheckpoint(playerid, -2070.3059,561.8431,35.6223, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 710)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 711;
	    SetPlayerCheckpoint(playerid, -1767.1882,602.1967,28.7971, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 711)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 712;
	    SetPlayerCheckpoint(playerid, -1709.8566,1055.1130,45.6962, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 712)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 713;
	    SetPlayerCheckpoint(playerid, -1638.2643,1257.4742,7.6483, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 713)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 714;
	    SetPlayerCheckpoint(playerid, -2088.4063,1276.8456,14.6324, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 714)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 715;
	    SetPlayerCheckpoint(playerid, -2357.9480,1180.2825,42.1086, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 715)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 716;
	    SetPlayerCheckpoint(playerid, -2671.4507,1374.8677,56.0341, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 716)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 717;
	    SetPlayerCheckpoint(playerid, -2671.2092,1989.9706,61.5446, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 717)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 718;
	    SetPlayerCheckpoint(playerid, -2707.9160,2360.6670,71.6765, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 718)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 719;
	    SetPlayerCheckpoint(playerid, -2533.4968,2449.7266,18.5855, 3.0);
	    return 1;
    }
   	if(QuestCP[playerid] == 719)
 	{
 	    new vehicleid = GetPlayerVehicleID(playerid);
	    new trailer = GetVehicleTrailer(vehicleid);
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
   		if(!IsTrailerAttachedToVehicle(vehicleid))
		{
			ClearChat(playerid);
			DisablePlayerCheckpoint(playerid);
			QuestCP[playerid] = 0;
			SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Truckerscheines leider nicht bestanden, da du keinen Anhänger dabei hattest!");
			SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Truckerschein Preises zurück bekommen!");
			GivePlayerEuro(playerid,4500);
			SetPVarInt(playerid, "InTschein", 0);
 			ClearAnimations(playerid);
			SetCameraBehindPlayer(playerid);
	     	TogglePlayerControllable(playerid, true);
			SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
			SetPlayerFacingAngle(playerid,89.5907);
			SetPlayerInterior(playerid, 3);
			DestroyVehicle(Truck[playerid]);
   			return 1;
		}
		else
		{
	  		new Float:vhealth;
	    	GetVehicleHealth(vehicleid,vhealth);
	 	    if(vhealth<550.0)
	 	    {
    			ClearChat(playerid);
				DisablePlayerCheckpoint(playerid);
				QuestCP[playerid] = 0;
				SetVehicleToRespawn(trailer);
				SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Truckerscheines leider nicht bestanden, da dein Fahrzeug zu beschädigt ist!");
				SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Truckerschein Preises zurück bekommen!");
				GivePlayerEuro(playerid,4500);
				SetPVarInt(playerid, "InTschein", 0);
	 			ClearAnimations(playerid);
				SetCameraBehindPlayer(playerid);
		     	TogglePlayerControllable(playerid, true);
				SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
				SetPlayerFacingAngle(playerid,89.5907);
				SetPlayerInterior(playerid, 3);
				DestroyVehicle(Truck[playerid]);
	   			return 1;
			}
			else
			{
 				ClearChat(playerid);
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(trailer);
				SendClientMessage(playerid,Gelb2,"Du hast den praktischen Trucktest erfolgreich bestanden!");
				SendClientMessage(playerid,Weiß,"Viel Spass mit dem Truckerschein!");
				sStats[playerid][sTruckschein] = 1;
				SetPVarInt(playerid, "InTschein", 0);
		  		ClearAnimations(playerid);
				SetCameraBehindPlayer(playerid);
		     	TogglePlayerControllable(playerid, true);
				SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
				SetPlayerFacingAngle(playerid,89.5907);
				SetPlayerInterior(playerid, 3);
				DestroyVehicle(Truck[playerid]);
				return 1;
			}
		}
    }
	if(QuestCP[playerid] == 190)
	{
	    IntroTimer[playerid] = SetTimerEx("StartIntro",9781,false,"i",playerid);
	    SetPVarInt(playerid,"ImIntro",1);
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    return 1;
    }
	if(QuestCP[playerid] == 96)
	{
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    return 1;
    }
	if(QuestCP[playerid] == 97)
	{
	    SendClientMessage(playerid,Gruen,"Material Abholepunkt erreicht!");
	    DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    return 1;
	}
	if(QuestCP[playerid] == 98)
	{
	    SendClientMessage(playerid,Gruen,"Material Abgabepunkt erreicht!");
	    DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    return 1;
	}
	if(QuestCP[playerid] == 100)
	{
	    SetPVarInt(playerid,"FWegpunkt",0);
	    SendClientMessage(playerid,Gruen,"Farmerbase erfolgreich erreicht!");
 		DisablePlayerCheckpoint(playerid);
	    QuestCP[playerid] = 0;
	    return 1;
   	}
   	if(QuestCP[playerid] == 99)
 	{
	if(!IsPlayerInAnyVehicle(playerid))
 		return SendClientMessage(playerid,Rot,"Du sitzt nicht in oder auf einem Fahrzeug!");
	new Float:Leben;
 	GetPlayerHealth(playerid,Leben);
	new geld;
	geld = GetPlayerEuros(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
	if(GetPVarInt(playerid, "Bestellungw") == 0)
	    return SendClientMessage(playerid,Rot,"Du hast keine Bestellung aufgegeben");
	if(GetPVarInt(playerid, "Bestellungw") == 1)
	{
	    DriveinMenBusy = 0;
	    SetPVarInt(playerid, "Bestellungw", 0);
	    SetPVarInt(playerid, "Bestellung", 0);
	    DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
		GivePlayerEuro(playerid, -12);
		ClearChat(playerid);
		BizzInfo[7][bProducts] -= 15;
		BizzInfo[7][bTill] += 12;
	    if(Leben + 12 >=100)
		{
		SetPlayerHealth(playerid,100);
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
		else
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,Leben+12);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
	}
	if(GetPVarInt(playerid, "Bestellungw") == 2)
	{
	if(geld < 16)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (16)!");
		return 1;
	}
	    DriveinMenBusy = 0;
	    SetPVarInt(playerid, "Bestellungw", 0);
	    SetPVarInt(playerid, "Bestellung", 0);
	    DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
	    GivePlayerEuro(playerid, -16);
	    ClearChat(playerid);
	    if(Leben + 16 >=100)
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,100);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
		else
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,Leben+16);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
	}
	if(GetPVarInt(playerid, "Bestellungw") == 3)
	{
	if(geld < 20)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (20)!");
		return 1;
	}
	    DriveinMenBusy = 0;
	    SetPVarInt(playerid, "Bestellungw", 0);
	    SetPVarInt(playerid, "Bestellung", 0);
	    DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
	    GivePlayerEuro(playerid, -20);
	    ClearChat(playerid);
	    if(Leben + 20 >=100)
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,100);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
		else
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,Leben+20);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
	}
	if(GetPVarInt(playerid, "Bestellungw") == 4)
	{
	if(geld < 25)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (25)!");
		return 1;
	}
	    DriveinMenBusy = 0;
	    SetPVarInt(playerid, "Bestellungw", 0);
	    SetPVarInt(playerid, "Bestellung", 0);
	    DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
	    GivePlayerEuro(playerid, -25);
	    ClearChat(playerid);
	    if(Leben + 25 >=100)
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,100);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
		else
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,Leben+25);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
	}
	if(GetPVarInt(playerid, "Bestellungw") == 5)
	{
	if(geld < 30)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (30)!");
		return 1;
	}
	    DriveinMenBusy = 0;
	    SetPVarInt(playerid, "Bestellungw", 0);
	    SetPVarInt(playerid, "Bestellung", 0);
	    DisablePlayerCheckpoint(playerid);
		QuestCP[playerid] = 0;
	    GivePlayerEuro(playerid, -30);
	    ClearChat(playerid);
	    if(Leben + 30 >=100)
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,100);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
		else
		{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		SetPlayerHealth(playerid,Leben+30);
		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}Burger Shot: {FFFF00}Hier ist ihre Bestellung, wir wünschen guten Appetit!");
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 6;
				SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
				SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
				return 1;
			}
		}
		return 1;
		}
	}
		}
    return 1;
    }
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
		if(GetPVarInt(playerid, "SniperQuest") == 1)
		{
		    return 1;
		}
		//DriftCps
   		if(checkpointid == DriftCP1[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP1[playerid], false);
			RepairVehicle(GetPlayerVehicleID(playerid));
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Fahrzeug ~g~repariert!", 3000, 5);
		 	DriftCP2[playerid]=CreateDynamicCP(-330.5305,1422.9772,68.6092, 5, 1+playerid, 0, playerid,600.0);
		 	return 1;
	    }
   		else if(checkpointid == DriftCP2[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP2[playerid], false);
		    DriftCP3[playerid]=CreateDynamicCP(-338.8400,1369.1686,55.9293, 5, 1+playerid, 0, playerid,600.0);
		    return 1;
	    }
   		else if(checkpointid == DriftCP3[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP3[playerid], false);
		    Tankmenge[GetPlayerVehicleID(playerid)] = GasMax[GetVehicleModel(GetPlayerVehicleID(playerid))-400];
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Benzin ~y~nachgefuellt!", 3000, 5);
		    DriftCP4[playerid]=CreateDynamicCP(-435.3508,1414.9763,32.5056, 5, 1+playerid, 0, playerid,600.0);
		    return 1;
	    }
   		else if(checkpointid == DriftCP4[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP4[playerid], false);
		    DriftCP5[playerid]=CreateDynamicCP(-779.4811,1300.7656,13.2642, 5, 1+playerid, 0, playerid,600.0);
		    return 1;
	    }
   		else if(checkpointid == DriftCP5[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP5[playerid], false);
   			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
   			AddVehicleComponent(DriftAuto[playerid], 1010); // Nitro
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Nitro ~b~boost!", 3000, 5);
			DriftCP6[playerid]=CreateDynamicCP(-885.2822,1660.0736,26.7434, 5, 1+playerid, 0, playerid,600.0);
			return 1;
        }
 		else if(checkpointid == DriftCP6[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP6[playerid], false);
			DriftCP7[playerid]=CreateDynamicCP(-1125.3129,1803.9124,41.5415, 5, 1+playerid, 0, playerid,600.0);
			return 1;
        }
 		else if(checkpointid == DriftCP7[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP7[playerid], false);
			DriftCP8[playerid]=CreateDynamicCP(-828.2180,2019.3346,59.8454, 5, 1+playerid, 0, playerid,600.0);
			return 1;
        }
 		else if(checkpointid == DriftCP8[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP8[playerid], false);
   			RepairVehicle(GetPlayerVehicleID(playerid));
			PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Fahrzeug ~g~repariert!", 3000, 5);
			DriftCP9[playerid]=CreateDynamicCP(-427.5599,2012.1245,71.4853, 5, 1+playerid, 0, playerid,600.0);
			return 1;
        }
 		else if(checkpointid == DriftCP9[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP9[playerid], false);
			DriftCP10[playerid]=CreateDynamicCP(-389.5102,1850.7252,52.1944, 5, 1+playerid, 0, playerid,600.0);
			return 1;
        }
 		else if(checkpointid == DriftCP10[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP10[playerid], false);
			DriftCP11[playerid]=CreateDynamicCP(-446.7668,1481.9144,34.0402, 5, 1+playerid, 0, playerid,900.0);
			return 1;
        }
 		else if(checkpointid == DriftCP11[playerid])
		{
		    TogglePlayerDynamicCP(playerid, DriftCP11[playerid], false);
		    PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
		    DestroyAllDriftCP(playerid);
      		RemovePlayerFromVehicle(playerid);
      		DestroyVehicle(DriftAuto[playerid]);
      		SetNachDrift(playerid);
      		return 1;
        }
 	if(checkpointid == ScheinCP1)
    {
        ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
        return 1;
    }
	if(checkpointid == CityCP)
	{
		if(sStats[playerid][sPersonalausweis] == 0)
		{
			SendClientMessage(playerid,Rot,"Du benötigst einen Personalausweis!");
			return 1;
		}
		ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
		return 1;
	}
	if(checkpointid == PferdeCP1)
	{
		if(sStats[playerid][sLink] == 0)
		{
			SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
		ShowPlayerDialog(playerid,PFERDERENNEN, DIALOG_STYLE_LIST, "Pferderennen Wettbüro", "{00AA00}1.{FFFFFF}Wetten setzen\n{00AA00}2.{FFFFFF}Zuschauen", "Auswählen", "Abbrechen");
		return 1;
	}
	if(checkpointid == PferdeCP2)
	{
		if(sStats[playerid][sLink] == 0)
		{
			SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
		ShowPlayerDialog(playerid,PFERDERENNEN, DIALOG_STYLE_LIST, "Pferderennen Wettbüro", "{00AA00}1.{FFFFFF}Wetten setzen\n{00AA00}2.{FFFFFF}Zuschauen", "Auswählen", "Abbrechen");
		return 1;
	}
	if(checkpointid == HandyCP1)
	{
	if (sStats[playerid][sWanteds] > 0)
	{
		SendClientMessage(playerid, Rot,"Du wirst schon von der Polizei gesucht, du kannst hier im Laden nix kaufen!");
		return 1;
	}
	if(BizzInfo[6][bProducts] < 25)
	{
	    SendClientMessage(playerid,Rot,"Das Handyladen Lager ist leer!");
	    return 1;
	}
		ShowPlayerDialog(playerid,HANDY1, DIALOG_STYLE_LIST, "Handy Laden", "{00AA00}1.{FFFFFF}Handy kaufen\n{00AA00}2.{FFFFFF}Handy verkaufen\n{00AA00}3.{FFFFFF}Guthaben aufladen\n{00AA00}4.{FFFFFF}Vertrag abschliessen\n{00AA00}5.{FFFFFF}Vertrag kündigen\n{00AA00}6.{FFFFFF}App Downloads", "Auswählen", "Abbrechen");
		return 1;
	}
	return 1;
}
public OnPlayerLeaveCheckpoint(playerid)
{
    if(FscheinCP[playerid] == 6)
    {
		KillTimer(rtimer[playerid]);
		SetPVarInt(playerid,"Nachricht",0);
		return 1;
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
		//Feuerwerk
        for(new i = 0; i < MAX_FIREWORKS; i++)
        {
                if(objectid == FireworkObj[i][Object0])
                {
                    new rand;
                    new Float:FwAltitude = Firework[i][fwZ] + Firework[i][fwA];
                    CreateExplosion(Firework[i][fwX],Firework[i][fwY],FwAltitude,12,10);
                    DestroyObject(FireworkObj[i][Object0]);
                    FireworkObj[i][Object0] = INVALID_OBJECT_ID;
                    rand = random(9);
                    FireworkObj[i][Object1] = CreateObject(FireworkLights[rand],Firework[i][fwX],Firework[i][fwY],FwAltitude,0.0,0.0,0.0,800);
					rand = random(9);
                    FireworkObj[i][Object2] = CreateObject(FireworkLights[rand],Firework[i][fwX],Firework[i][fwY],FwAltitude,0.0,0.0,0.0,800);
        			rand = random(9);
                    FireworkObj[i][Object3] = CreateObject(FireworkLights[rand],Firework[i][fwX],Firework[i][fwY],FwAltitude,0.0,0.0,0.0,800);
        			rand = random(9);
                    FireworkObj[i][Object4] = CreateObject(FireworkLights[rand],Firework[i][fwX],Firework[i][fwY],FwAltitude,0.0,0.0,0.0,800);
        			rand = random(9);
                    FireworkObj[i][Object5] = CreateObject(FireworkLights[rand],Firework[i][fwX],Firework[i][fwY],FwAltitude,0.0,0.0,0.0,800);
        			rand = random(9);
                    FireworkObj[i][Object6] = CreateObject(FireworkLights[rand],Firework[i][fwX],Firework[i][fwY],FwAltitude,0.0,0.0,0.0,800);
                    MoveObject(FireworkObj[i][Object1],Firework[i][fwX] + MAX_SPREAD,Firework[i][fwY],FwAltitude,4);
                    MoveObject(FireworkObj[i][Object2],Firework[i][fwX] - MAX_SPREAD,Firework[i][fwY],FwAltitude,4);
                    MoveObject(FireworkObj[i][Object3],Firework[i][fwX],Firework[i][fwY] + MAX_SPREAD,FwAltitude,4);
                    MoveObject(FireworkObj[i][Object4],Firework[i][fwX],Firework[i][fwY] - MAX_SPREAD,FwAltitude,4);
                    MoveObject(FireworkObj[i][Object5],Firework[i][fwX],Firework[i][fwY],FwAltitude + MAX_SPREAD,4);
                    MoveObject(FireworkObj[i][Object6],Firework[i][fwX],Firework[i][fwY],FwAltitude - MAX_SPREAD,4);
                    if(Firework[i][fwLoop] > 0) SetTimerEx("LaunchFirework",2557,0,"i",i);

                }
                else if(objectid == FireworkObj[i][Object1])
                {
                        DestroyObject(FireworkObj[i][Object1]);
                        FireworkObj[i][Object1] = INVALID_OBJECT_ID;
                }
                else if(objectid == FireworkObj[i][Object2])
                {
                        DestroyObject(FireworkObj[i][Object2]);
                        FireworkObj[i][Object2] = INVALID_OBJECT_ID;
                }
                else if(objectid == FireworkObj[i][Object3])
                {
                        DestroyObject(FireworkObj[i][Object3]);
                        FireworkObj[i][Object3] = INVALID_OBJECT_ID;
                }
                else if(objectid == FireworkObj[i][Object4])
                {
                        DestroyObject(FireworkObj[i][Object4]);
                        FireworkObj[i][Object4] = INVALID_OBJECT_ID;
                }
                else if(objectid == FireworkObj[i][Object5])
                {
                        DestroyObject(FireworkObj[i][Object5]);
                        FireworkObj[i][Object5] = INVALID_OBJECT_ID;
                }
                else if(objectid == FireworkObj[i][Object6])
                {
                        DestroyObject(FireworkObj[i][Object6]);
                        FireworkObj[i][Object6] = INVALID_OBJECT_ID;
                }
        }
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

//Für die Eingänge und Ausgänge
forward OnPlayerPickUpDynamicPickup(playerid, pickupid);
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	new string[128];
	//Autoabholung
	if(pickupid == autos)
	{
		if(GetPVarInt(playerid, "Pate") == 0)
		{
		    return 1;
		}
		if(GetPVarInt(playerid, "Pate") == 1)
		{
			Pate = 0;
			SetPVarInt(playerid, "Pate", 0);
			SetPVarInt(playerid, "AutoPate", 1);
			SpawnCar(playerid,GetPVarInt(playerid, "Carslotid"));
			PutPlayerInVehicle(playerid, GetPVarInt(playerid, "Carslot"), 0);
			ClearChat(playerid);
		    SendClientMessage(playerid,Weiß,"Dein Fahrzeug wird nun zum Ausgabe Punkt transportiert und für die Benutzung vorbereitet!");
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Ungefähre Wartezeit: 3 Minuten.");
		    SetTimerEx("AutoFertig",154827,false,"i",playerid);
			SetPlayerCameraPos(playerid,-1566.0001,70.4675,38.9263);
			SetPlayerCameraLookAt(playerid,-1567.6461,70.5041,37.6863,1);
			SetTimerEx("Kameraa",85619,false,"i",playerid);
			TogglePlayerControllable(playerid, false);
			TextDrawHideForPlayer(playerid,Ad1);
			TextDrawHideForPlayer(playerid,Ad2);
			SetPVarInt(playerid,"NoMotor",1);
			SetPlayerHealth(playerid,100.0);
		}
		return 1;
	}
	if(pickupid == missionr)
	{
		if(!IsPlayerInAnyVehicle(playerid) && sStats[playerid][sMission] == 0 && sStats[playerid][sJob] == 1)
		{
			if(sStats[playerid][sMissionZeit] > 0)
			{
	  			new days,hours,mins;
			 	new wartezeit = sStats[playerid][sMissionZeit];
				new restzeit= wartezeit -gettime();
			    days = floatround(restzeit / 86400,floatround_floor);
			    hours = restzeit - (days * 86400);
			    hours = floatround(hours / 3600,floatround_floor);
			    mins = restzeit - ( (days * 86400) + (hours * 3600) );
			    mins = floatround(mins / 60,floatround_floor);
				format(string, sizeof(string), "Du musst noch %d Minuten warten, bis du die Mission erneut starten kannst.",mins);
				SendClientMessage(playerid, Rot,string);
				return 1;
			}
			if(GetPVarInt(playerid, "MechaDienst") == 0)
			{
				SendClientMessage(playerid,Rot,"Du musst im Dienst sein um die Mission starten zu können!");
				return 1;
			}
				ShowPlayerDialog(playerid, MISSION1, DIALOG_STYLE_MSGBOX, "Stadtsäuberung", "{FFFFFF}In Dieser Mission musst du verschiedene Checkpoints abfahren und somit die {FFFF00}Stadt reinigen{FFFFFF}.\nPro Checkpoint erhältst du {FFFF00}15{FFFFFF} am Ende nochmal eine saftige Prämie.\nMöchtest du die {FFFF00}Mission{FFFFFF} beginnen?", "Ja","Nein");
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du kannst jetzt keine Reinigungsmission starten!");
		    return 1;
		}
	}
	//Quests
 	if(pickupid == Koffer[playerid] && Koffer[playerid] != 0)
    {
        ClearChat(playerid);
        ResetPlayerWeapons(playerid);
        QuestCP[playerid] = 0;
        DisablePlayerCheckpoint(playerid);
        SetPVarInt(playerid,"SniperQuest",0);
        SetPVarInt(playerid,"Koffer",1);
        SendClientMessage(playerid,Weiß,"Du hast dir den Koffer geschnappt, bringe diesen jetzt zu Jack dieser wartet schon Sehnsüchtig auf den Koffer!");
        DestroyPickup(Koffer[playerid]);
        SetPlayerAttachedObject(playerid,9,1210,6,0.27,0.10,0.05,0,260,0);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(!strcmp(GetName(i),"DDealer",true))
			{
	  			ddealer = 0;
	  			ClearAnimations(i);
			}
		}
    }
	//Crip or Die
	if(pickupid == cripa)
	{
		if(!IsACrip(playerid))
		{
  			SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Crip or Die Gang!");
  			return 1;
		}
		if(sStats[playerid][sLevel] < 3)
		{
		    SendClientMessage(playerid,Rot,"Du muss mind. 3 Level sein, um dich ausrüsten zu können!");
		    return 1;
		}
		if(CODWaffen > 0)
		{
			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Baseballschläger, Deagle, MP5, M4A1, Counter Rifle.");
			GivePlayerWeaponEx(playerid, 5, 1);
  			GivePlayerWeaponEx(playerid, 24, 55);
  			GivePlayerWeaponEx(playerid, 31, 250);
  			GivePlayerWeaponEx(playerid, 29, 200);
  			GivePlayerWeaponEx(playerid, 33, 80);
  			CODWaffen -= 1;
  			return 1;
		}
		if(CODUpgrade == 0)
		{
		    ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Schlagring, 9mm");
  			GivePlayerWeaponEx(playerid, 1, 1);
  			GivePlayerWeaponEx(playerid, 22, 55);
		}
		if(CODUpgrade == 1)
		{
		    ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Schlagring, 9mm");
  			GivePlayerWeaponEx(playerid, 1, 1);
  			GivePlayerWeaponEx(playerid, 22, 55);
		}
		if(CODUpgrade == 2)
		{
  			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Schlagring, 9mm, MP5.");
  			GivePlayerWeaponEx(playerid, 1, 1);
  			GivePlayerWeaponEx(playerid, 22, 55);
  			GivePlayerWeaponEx(playerid, 29, 200);
		}
		if(CODUpgrade == 3)
		{
			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Baseballschläger, Deagle, AK-47.");
			GivePlayerWeaponEx(playerid, 5, 1);
  			GivePlayerWeaponEx(playerid, 24, 55);
  			GivePlayerWeaponEx(playerid, 30, 250);
		}
		if(CODUpgrade == 4)
		{
			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Baseballschläger, Deagle, Tec-9, AK-47.");
			GivePlayerWeaponEx(playerid, 5, 1);
  			GivePlayerWeaponEx(playerid, 24, 55);
  			GivePlayerWeaponEx(playerid, 30, 250);
  			GivePlayerWeaponEx(playerid, 32, 200);
		}
		if(CODUpgrade == 5)
		{
			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Baseballschläger, Deagle, Tec-9, AK-47, Counter Rifle.");
			GivePlayerWeaponEx(playerid, 5, 1);
  			GivePlayerWeaponEx(playerid, 24, 55);
  			GivePlayerWeaponEx(playerid, 30, 250);
  			GivePlayerWeaponEx(playerid, 32, 200);
  			GivePlayerWeaponEx(playerid, 33, 80);
		}
	}
	if(pickupid == codf)
	{
		if(!IsACrip(playerid))
		{
  			SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Crip or Die Gang!");
  			return 1;
		}
		ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	}
	//MS-14
	if(pickupid == ms14a)
	{
		if(!IsAMS(playerid))
		{
  			SendClientMessage(playerid,Rot,"Du bist kein Mitglied der MS-14 Gang!");
  			return 1;
		}
		if(sStats[playerid][sLevel] < 3)
		{
		    SendClientMessage(playerid,Rot,"Du muss mind. Level 3 sein, um dich ausrüsten zu können!");
		    return 1;
		}
		if(MS14Waffen > 0)
		{
			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Baseballschläger, Deagle, MP5, M4A1, Counter Rifle.");
			GivePlayerWeaponEx(playerid, 5, 1);
  			GivePlayerWeaponEx(playerid, 24, 55);
  			GivePlayerWeaponEx(playerid, 31, 250);
  			GivePlayerWeaponEx(playerid, 29, 200);
  			GivePlayerWeaponEx(playerid, 33, 80);
  			MS14Waffen -= 1;
  			return 1;
		}
		if(MS14Upgrade == 0)
		{
		    ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Schlagring, 9mm");
  			GivePlayerWeaponEx(playerid, 1, 1);
  			GivePlayerWeaponEx(playerid, 22, 55);
		}
		if(MS14Upgrade == 1)
		{
		    ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Schlagring, 9mm");
  			GivePlayerWeaponEx(playerid, 1, 1);
  			GivePlayerWeaponEx(playerid, 22, 55);
		}
		if(MS14Upgrade == 2)
		{
  			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Schlagring, 9mm, MP5.");
  			GivePlayerWeaponEx(playerid, 1, 1);
  			GivePlayerWeaponEx(playerid, 22, 55);
  			GivePlayerWeaponEx(playerid, 29, 200);
		}
		if(MS14Upgrade == 3)
		{
			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Baseballschläger, Deagle, AK-47.");
			GivePlayerWeaponEx(playerid, 5, 1);
  			GivePlayerWeaponEx(playerid, 24, 55);
  			GivePlayerWeaponEx(playerid, 30, 250);
		}
		if(MS14Upgrade == 4)
		{
			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Baseballschläger, Deagle, Tec-9, AK-47.");
			GivePlayerWeaponEx(playerid, 5, 1);
  			GivePlayerWeaponEx(playerid, 24, 55);
  			GivePlayerWeaponEx(playerid, 30, 250);
  			GivePlayerWeaponEx(playerid, 32, 200);
		}
		if(MS14Upgrade == 5)
		{
			ClearChat(playerid);
		    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
  			SendClientMessage(playerid,Gelb2,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet: Baseballschläger, Deagle, Tec-9, AK-47, Counter Rifle.");
			GivePlayerWeaponEx(playerid, 5, 1);
  			GivePlayerWeaponEx(playerid, 24, 55);
  			GivePlayerWeaponEx(playerid, 30, 250);
  			GivePlayerWeaponEx(playerid, 32, 200);
  			GivePlayerWeaponEx(playerid, 33, 80);
		}
	}
	if(pickupid == ms14f)
	{
		if(!IsAMS(playerid))
		{
  			SendClientMessage(playerid,Rot,"Du bist kein Mitglied der MS-14 Gang!");
  			return 1;
		}
		ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	}
	//Autovergabe BSPD
	if(pickupid == autovergabe)
	{
		new days,hours,mins;
		new wartezeit = GetPVarInt(playerid, "Cooldown");
		new restzeit= wartezeit -gettime();
   		days = floatround(restzeit / 86400,floatround_floor);
   		hours = restzeit - (days * 86400);
   		hours = floatround(hours / 3600,floatround_floor);
   		mins = restzeit - ( (days * 86400) + (hours * 3600) );
   		mins = floatround(mins / 60,floatround_floor);
		if(!IsACop(playerid))
		{
			SendClientMessage(playerid, Rot, "Du kannst hier kein Fahrzeug rausholen, du bist kein Mitglied des Bayside Police-Department!");
	    	return 1;
    	}
		if (GetPVarInt(playerid, "CopDuty") != 1 && GetPVarInt(playerid, "SwatDuty") != 1)
		{
			SendClientMessage(playerid, Rot, "Du musst erst im Einsatz sein um Autos rausholen zu können!");
			return 1;
		}
		if(GetPVarInt(playerid, "Cooldown") != 0)
		{
			format(string, sizeof(string), "Du musst noch %d Minuten warten, bevor du ein neues Fahrzeug aus der Garage holen kannst!",mins);
			SendClientMessage(playerid,Rot,string);
			return 1;
		}
		ShowPlayerDialog(playerid,BSPDAUTOVERGABE, DIALOG_STYLE_LIST, "Bayside-Police Department Autovergabe", "Polizeiauto\nPolizei Ranger\nHPV-1000\nWasserwerfer\nEnforcer\nUndercover Fahrzeug", "Bestätigen", "Abbrechen");
		return 1;
	}
	//Ausruesten BSPD
	if(pickupid == ausruestenbspd)
	{
		if (GetPVarInt(playerid, "SwatDuty") == 1)
		{
		    SendClientMessage(playerid,Rot,"Du bist als Swat im Einsatz, du kannst dich hier nicht ausrüsten!");
		    return 1;
		}
		if (GetPVarInt(playerid, "CopDuty") != 1 && GetPVarInt(playerid, "SwatDuty") != 1)
		{
			SendClientMessage(playerid, Rot, "Du musst erst im Einsatz sein um dich hier ausrüsten zu können!");
			return 1;
		}
		if(!IsACop(playerid))
		{
			SendClientMessage(playerid, Rot, "Du kannst dich hier nicht ausrüsten, du bist kein Mitglied des Bayside Police-Department!");
	    	return 1;
    	}
			ShowPlayerDialog(playerid,AUSRUESTENLSPD, DIALOG_STYLE_LIST, "LSPD Ausrüstungslager", "{00FFFF}1.{FFFFFF}Tazer,Schlagstock,9mm,Rüstung,Deagle\n{00FFFF}2.{FFFFFF}Tazer,Schlagstock,9mm,Rüstung,MP5,Deagle\n{00FFFF}3.{FFFFFF}Tazer,Schlagstock,9mm,Rüstung,MP5,M4,Deagle\n{00FFFF}4.{FFFFFF}Tazer,Schlagstock,9mm,Rüstung,MP5,Shotgun,Deagle", "Ausrüsten", "Abbrechen");
	        return 1;
 	}
	//Sanitäter
	if(pickupid == saus)
	{
		if(!IsASani(playerid))
		   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
		if (GetPVarInt(playerid, "saus") == 1)
			return 1;

            SetPVarInt(playerid,"saus",1);
		   	ShowPlayerDialog(playerid,MEDIC, DIALOG_STYLE_LIST, "{FFFFFF}Bayside Medical-Center Ausrüstung", "{FFFFFF}Defibrillator\nKopfschmerztabletten\nBauchschmerztabletten\nAntibiotika\nWaffen", "Auswählen", "Abbrechen");
	}
	if(pickupid == sanikleidung)
	{
		if(!IsASani(playerid))
		   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");

		   	SetDienstkleidung(playerid);
	}
	if(pickupid == behandlung)
	{
	    if(GetPlayerEuros(playerid) < 350)
	    {
	        SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei! (350)");
	        return 1;
	    }
		if(behandlungg == 1)
		{
		    SendClientMessage(playerid,Rot,"Es befindet sich zurzeit wer schon in Behandlung!");
			return 1;
		}
		if(sStats[playerid][sKrankheit] < 1)
		{
		    SendClientMessage(playerid,Rot,"Du hast keine Geschlechtskrankheit!");
		    return 1;
		}
	    behandlungg = 1;
	    ApplyAnimation(playerid, "CRACK","crckdeth1", 4.0, 0, 1, 1, 1, 1, 0);
	    SetBehandlung(playerid);
	}
	//CNN Dienstkleidung
	if(pickupid == cnnkleidung)
	{
		if(!IsACNN(playerid))
		   	return SendClientMessage(playerid, Rot,"Du bist kein Mitglied der Bayside-Newstime a.G!");

		   	SetDienstkleidung(playerid);
	}
	//Fahrrad leihen
	if(pickupid == fleihen)
	{
	    if(GetPVarInt(playerid,"Fahrrad") == 1)
	    {
  			SendClientMessage(playerid,Rot,"Du hast dir schon ein Fahrrad gemietet!");
   			return 1;
	    }
 		if(sStats[playerid][sLevel] > 1)
		{
  			SendClientMessage(playerid,Rot,"Du bist kein Neuling!");
   			return 1;
		}
		ShowPlayerDialog(playerid,FAHRRAD, DIALOG_STYLE_MSGBOX, "Fahrradverleih", "{FFFFFF}Möchtest du dir ein {FFFF00}Fahrrad {FFFFFF}leihen?", "Ja", "Nein");
	}
	//CNN Zeitung
	if(pickupid == cnnz)
	{
		if(IsACNN(playerid)) //Bayside-Newstime
		{
		    if(sStats[playerid][sRank] < 3)
   			{
   			    SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 3 um die Zeitungsübersicht aufrufen zu können!");
   			    return 1;
   			}
		    ShowPlayerDialog(playerid,CNN9, DIALOG_STYLE_LIST, "Bayside-Newstime Zeitungsverwaltung", "{FFFF00}1.{FFFFFF}Neue Zeitung erstellen\n{FFFF00}2.{FFFFFF}Aktuelle Zeitung bearbeiten\n{FFFF00}3.{FFFFFF}Zeitung löschen\n{FFFF00}4.{FFFFFF}Aktuelle Zeitung anschauen", "Auswählen", "Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Bayside-Newstime a.G!");
		    return 1;
		}
	}
	//CNN Verwaltung
	if(pickupid == cnnv)
	{
		if(IsACNN(playerid)) //Bayside-Newstime
		{
		    ShowPlayerDialog(playerid,CNN1, DIALOG_STYLE_LIST, "Bayside-Newstime Verwaltung", "{FFFF00}1.{FFFFFF}Kassen Übersicht\n{FFFF00}2.{FFFFFF}Einzahlung\n{FFFF00}3.{FFFFFF}Auszahlung\n{FFFF00}4.{FFFFFF}Werbeschilder bearbeiten", "Auswählen", "Abbrechen");
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Du bist kein Mitglied der Bayside-Newstime a.G!");
		    return 1;
		}
	}
	//Sonnenbrillen kaufen
	if(pickupid == SunCP1)
    {
  		if(GetPVarInt(playerid, "Anzeige") == 1)
		{
			return 1;
		}
  		if(sStats[playerid][sLink] == 0)
		{
		    SetPVarInt(playerid,"Anzeige",0);
			SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
  		if(sStats[playerid][sPremium] < 1)
		{
		    SetPVarInt(playerid,"Anzeige",0);
			SendClientMessage(playerid,Rot,"Du hast keinen Premiumaccount!");
			return 1;
		}
		SetPVarInt(playerid,"Anzeige",1);
        ShowPlayerDialog(playerid,SONNENBRILLEN, DIALOG_STYLE_INPUT, "Sonnenbrille kaufen", "{FFFFFF}Bitte gebe eine Zahl von {FFFF00}1 - 30{FFFFFF} ein.\nDu kannst die Sonnenbrille zuerst anprobieren bevor du Sie kaufen musst.\n{FFFF00}Jede Sonnenbrille kostet 1000.", "Anprobieren", "Abbrechen");
    }
	//Driftstrecke
	if(pickupid == driftp)
	{
		if(sStats[playerid][sLink] == 0)
		{
			SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
		if(sStats[playerid][sAutoschein] == 0)
		{
			SendClientMessage(playerid,Rot,"Du benötigst einen Führerschein um die Driftstrecke betreten zu können!");
			return 1;
		}
		if(sStats[playerid][sPersonalausweis] == 0)
		{
		    SendClientMessage(playerid,Rot,"Du benötigst einen Personalausweis!");
		    return 1;
		}
		if(sStats[playerid][sLevel] < 2)
		{
		    SendClientMessage(playerid,Rot,"Du musst mind. LvL 2 sein um die Driftstrecke betreten zu können!");
		    return 1;
		}
		if(sStats[playerid][sWanteds] > 0)
		{
		    SendClientMessage(playerid,Rot,"Mit Wanteds kannst du die Driftstrecke nicht betreten!");
		    return 1;
		}
		if(GetPlayerEuros(playerid) < 500)
		{
		    SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei (500)!");
		    return 1;
		}
		if(GetPVarInt(playerid, "InDrift") == 1)
		{
		    SendClientMessage(playerid,Rot,"Du hast die Driftstrecke schon betreten!");
		    return 1;
		}
		ShowPlayerDialog(playerid,DRIFT, DIALOG_STYLE_MSGBOX, "Driftstrecke betreten", "{FFFFFF}Möchtest du die Driftstrecke betreten? {FFFF00}(Kosten : 500)", "Ja", "Nein");
 	}
	//Flugtickets
	if(pickupid == ticket || pickupid == ticket2 || pickupid == ticket3 || pickupid == ticket4)
	{
		if(sStats[playerid][sPersonalausweis] == 0)
		{
		    SendClientMessage(playerid,Rot,"Du benötigst einen Personalausweis!");
		    return 1;
		}
		if(sStats[playerid][sLink] == 0)
		{
			SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
		if(GetPVarInt(playerid, "FLugticket") == 1)
		{
		    SendClientMessage(playerid,Rot,"Du hast schon ein Flugticket!");
		    return 1;
		}
		if(GetPlayerEuros(playerid) < 500)
		{
		    SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei (500)!");
		    return 1;
		}
		ShowPlayerDialog(playerid,FLUGTICKET, DIALOG_STYLE_MSGBOX, "Flugticket kaufen", "{FFFFFF}Möchtest du ein Flugticket kaufen? {FFFF00}(Kosten : 500)", "Ja", "Nein");
	}
	//Perso beantragen
	if(pickupid == pperso) { //Personalausweis
		if(sStats[playerid][sPersonalausweis] > 0) {
			SendClientMessage(playerid,Rot,"Tut mir leid, du hast schon einen Personalausweis!");
			return 1;
		}
		ShowPlayerDialog(playerid,PERSO1, DIALOG_STYLE_MSGBOX, "Personalausweis beantragen", "{FFFFFF}Möchtest du einen Personalausweis beantragen? {FFFF00}(Kosten : 500)", "Beantragen", "Abbrechen");
		return 1;
	}
	//Waffenpaketpunkte
	if(pickupid == wgive)
	{
	    new player = GetNearestPlayer(playerid, 10);
		if(sStats[playerid][sJob] != 8)
		{
	 	SendClientMessage(playerid,Rot,"Du bist kein Waffenhändler!");
		return 1;
		}
		if(GetPVarInt(playerid, "MPaket") == 0)
		{
  			SendClientMessage(playerid,Rot,"Du hast kein (Roh)Materialpaket dabei!");
			return 1;
		}
		if(IsAStaat(player))
			return SendClientMessage(playerid, Rot, "Du kannst dein Materialpaket nicht umarbeiten lassen da ein Polizist in der Nähe ist!");
		ShowPlayerDialog(playerid,WGIVE, DIALOG_STYLE_MSGBOX, "Materialpaket umarbeiten lassen?", "{FFFFFF}Möchtest du dein (Roh)Materialpaket umarbeiten lassen? {FFFF00}(Dauer ca. 10 Sekunden)", "Ja", "Nein");
	}
	if(pickupid == wget)
	{
		if(sStats[playerid][sJob] != 8)
		{
		    SendClientMessage(playerid,Rot,"Du bist kein Waffenhändler!");
			return 1;
		}
		if(GetPVarInt(playerid, "MPaket") == 1)
		{
  			SendClientMessage(playerid,Rot,"Du hast schon ein Materialpaket dabei, du kannst keins mehr tragen!");
			return 1;
		}
		if(GetPlayerEuros(playerid) < 800)
		{
		    SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
		    return 1;
		}
		if(sStats[playerid][sMats] >= 25000)
		{
  			SendClientMessage(playerid,Rot,"Du kannst nicht mehr wie 25.000 Materialien tragen!");
		    return 1;
		}
		ShowPlayerDialog(playerid,WGET, DIALOG_STYLE_MSGBOX, "Materialpaket kaufen?", "{FFFFFF}Möchtest du ein (Roh)Materialpaket kaufen? {FFFF00}(800)", "Kaufen", "Abbrechen");
	}
	//Kleidungsladen
	if(pickupid == kleidung)
	{
		if(sStats[playerid][sMitglied] > 0 || sStats[playerid][sLeiter] > 0)
		{
			SendClientMessage(playerid,Rot,"Du bist in einer Fraktion, du kannst keine neue Kleidung kaufen!");
			return 1;
		}
		if(sStats[playerid][sGeschlecht] == 1)
		{
			ShowPlayerDialog(playerid,KLEIDUNG1,DIALOG_STYLE_LIST,"Kleidungsladen für Männer","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7\nSkin 8\n","Anprobieren","Abbrechen");
			return 1;
		}
		if(sStats[playerid][sGeschlecht] == 2)
		{
			ShowPlayerDialog(playerid,KLEIDUNG2,DIALOG_STYLE_LIST,"Kleidungsladen für Frauen","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7\nSkin 8\n","Anprobieren","Abbrechen");
			return 1;
		}
	}
	//Zivispawn Info
	if(pickupid == zinfo)
	{
		ClearChat(playerid);
		SendClientMessage(playerid, Rot, "Herzlich Willkommen auf dem Bayside-Roleplay Server.");
		SendClientMessage(playerid, Gelb, "Dieses Script wurde von sHoOTi & Nemesus erstellt.");
		SendClientMessage(playerid, Gelb, "Ich bitte dich unser Forum http://bayside-roleplay.de zu besuchen.");
		SendClientMessage(playerid, Gelb, "Solltest du dennoch Probleme haben kannst du gerne ein Support-Ticket mit /support eröffnen.");
		SendClientMessage(playerid, Weiß, "Viel Spass wünscht das Bayside-Roleplay Administrator Team.");
		return 1;
	}
		//Zeitabfrage
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	//Ein und Ausgänge
	if(pickupid ==  IDsafePickups[0])
	{ //Rathaus Eingang 1
		if(sStats[playerid][sLevel] < 3)
		{
			SetPlayerPosEx(playerid, 387.2075,173.9353,1008.3828);
			SetPlayerFacingAngle(playerid,91.6092);
			SetPlayerInterior(playerid,3);
		}
		if(Hour >= 10 && Hour <= 24)
		{
			SetPlayerPosEx(playerid, 387.2075,173.9353,1008.3828);
			SetPlayerFacingAngle(playerid,91.6092);
			SetPlayerInterior(playerid,3);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Das Rathaus hat geschlossen.(Öffnungszeiten: sind von 10-24 Uhr!)");
			return 1;
		}
		return 1;
	}
	if(pickupid ==  IDsafePickups[1])
	{ //Rathaus Ausgang
		SetPlayerPosEx(playerid, -2244.6472,2320.1443,4.9688);
		SetPlayerFacingAngle(playerid,90.3521);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[2])
	{ //Kleidungsladen Eingang
		if(sStats[playerid][sLevel] < 3)
		{
			SetPlayerPosEx(playerid, 207.7103,-109.7090,1005.1328);
			SetPlayerFacingAngle(playerid,1.1846);
			SetPlayerInterior(playerid,15);
		}
		if(Hour >= 8 && Hour <= 20)
		{
			SetPlayerPosEx(playerid, 207.7103,-109.7090,1005.1328);
			SetPlayerFacingAngle(playerid,1.1846);
			SetPlayerInterior(playerid,15);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Der Kleidungsladen hat geschlossen.(Öffnungszeiten: sind von 8-20 Uhr!)");
			return 1;
		}
		return 1;
	}
	if(pickupid ==  IDsafePickups[3])
	{ //Kleidungsladen Ausgang
		SetPlayerPosEx(playerid, -2537.7305,2321.5615,4.9844);
		SetPlayerFacingAngle(playerid,0.0541);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[4])
	{ //Handy Eingang
		if(hladenbrand == 1)
		{
			SendClientMessage(playerid,Rot,"Der Handyladen steht unter Feuer (Es Brennt!) und hat vorrübergehend geschlossen!");
			return 1;
		}
		if(sStats[playerid][sLevel] < 3)
		{
			SetPlayerPosEx(playerid, 1007.5526,52.0878,55.3221);
			SetPlayerFacingAngle(playerid,258.1644);
			SetPlayerInterior(playerid,0);
		}
		if(Hour >= 12 && Hour <= 21)
		{
			SetPlayerPosEx(playerid, 1007.5526,52.0878,55.3221);
			SetPlayerFacingAngle(playerid,258.1644);
			SetPlayerInterior(playerid,0);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Der Handy Laden hat geschlossen.(Öffnungszeiten: sind von 12-21 Uhr!)");
			return 1;
		}
		return 1;
	}
	if(pickupid ==  IDsafePickups[5])
	{ //Handy Ausgang
		SetPlayerPosEx(playerid, -2518.6721,2321.2871,4.9844);
		SetPlayerFacingAngle(playerid,0.8029);
		SetPlayerInterior(playerid,0);
	}
	//Lotterie
	if(pickupid ==  IDsafePickups[6])
	{
		if(sStats[playerid][sLink] == 0)
		{
			SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
		SetPlayerPosEx(playerid,-2238.5952,137.2449,1035.4141);
		SetPlayerFacingAngle(playerid,269.5026);
		SetPlayerInterior(playerid,6);
	}
	if(pickupid ==  IDsafePickups[7])
	{ //Lotterie Ausgang
		SetPlayerPosEx(playerid, -2477.7625,2319.3704,4.9844);
		SetPlayerFacingAngle(playerid,312.6338);
		SetPlayerInterior(playerid,0);
	}
	if(pickupid ==  IDsafePickups[8]) { //Ammunation Eingang
		if(ammubrand == 1)
		{
			SendClientMessage(playerid,Rot,"Der Ammunation Shop steht unter Feuer (Es Brennt!) und hat vorrübergehend geschlossen!");
			return 1;
		}
		if(sStats[playerid][sJob] == 8)
		{
			SetPlayerPosEx(playerid,316.5419,-168.9589,999.5938);
			SetPlayerFacingAngle(playerid,358.2255);
			SetPlayerInterior(playerid,6);
		}
		if(Hour >= 16 && Hour <= 24)
		{
			if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
			if(sStats[playerid][sWaffenschein] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast keinen Waffenschein!");
				return 1;
			}
			if(sStats[playerid][sLevel] < 4)
			{
				SendClientMessage(playerid,Rot,"Du musst mind. Level 4 sein um den Ammunation Shop betreten zu können!");
				return 1;
			}
			SetPlayerPosEx(playerid,316.5419,-168.9589,999.5938);
			SetPlayerFacingAngle(playerid,358.2255);
			SetPlayerInterior(playerid,6);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Der Ammunation Shop hat geschlossen.(Öffnungszeiten: sind von 16-24 Uhr!)");
			return 1;
		}
	}
	if(pickupid ==  IDsafePickups[9])
	{ //Ammunation Ausgang
		SetPlayerPosEx(playerid, -2276.7280,2328.0244,4.9684);
		SetPlayerFacingAngle(playerid,264.4351);
		SetPlayerInterior(playerid,0);
	}
	if(pickupid ==  IDsafePickups[10])
	{ //24/7 Eingang
		SetPlayerPosEx(playerid,-25.7627,-186.3960,1003.5469);
		SetPlayerFacingAngle(playerid,358.1302);
		SetPlayerInterior(playerid,17);
		if(have[playerid] == 0)
		{
			if(IsAGang(playerid))
			{
				SendClientMessage(playerid, Weiß,"Diesen Laden kannst du mit /rob247 ausrauben!");
				have[playerid] = 1;
			}
		}
	}
	if(pickupid ==  IDsafePickups[11])
	{ //24/7 Ausgang
		if(Robber[playerid] == 1)
		{
			SendClientMessage(playerid, Rot,"Da du aus dem 24/7 Shop gegangen bist wurde der Überfall abgebrochen!");
			rob3 = SetTimer("RobWait",100251,1);
			StoreRobed[playerid] =0;
			Robber[playerid] = 0;
			robbing = 0;
			wait = 1;
			KillTimer(rob2);
		}
		have[playerid] = 0;
		StopAudioStreamForPlayer(playerid);
		SetPlayerPosEx(playerid, -2490.8313,2363.5698,10.2722);
		SetPlayerFacingAngle(playerid,278.0368);
		SetPlayerInterior(playerid,0);
	}
	if(pickupid ==  IDsafePickups[12])
	{ //Hotel Eingang
		SetPlayerPosEx(playerid, 2216.9697,-1150.7098,1025.7969);
		SetPlayerFacingAngle(playerid,269.6829);
		SetPlayerInterior(playerid,15);
	}
	if(pickupid ==  IDsafePickups[13])
	{ //Hotel Ausgang
		SetPlayerPosEx(playerid, -2442.8672,2320.0417,5.0138);
		SetPlayerFacingAngle(playerid,1.4982);
		SetPlayerInterior(playerid,0);
	}
	if(pickupid ==  IDsafePickups[16])
	{ //Kirchen Eingang
		if(kirchenbrand == 1)
		{
			SendClientMessage(playerid,Rot,"Die Kirche steht unter Feuer (Es Brennt!) und hat vorrübergehend geschlossen!");
			return 1;
		}
		if(Hour >= 9 && Hour <= 15)
		{
			SetPlayerPosEx(playerid, 3142.1736,-3003.9041,13.0402);
			SetPlayerFacingAngle(playerid,87.9873);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Die Kirche hat geschlossen.(Öffnungszeiten: sind von 9-15 Uhr!)");
			return 1;
		}
		return 1;
	}
	if(pickupid ==  IDsafePickups[17])
	{ //Kirchen Ausgang
		SetPlayerPosEx(playerid, -2484.5046,2405.4187,16.1935);
		SetPlayerFacingAngle(playerid,120.0179);
	}
	if(pickupid ==  IDsafePickups[18])
	{ //Sonnenbrillen Eingang
		if(Hour >= 10 && Hour <= 18)
		{
			if (sStats[playerid][sPremium] == 0)
			{
				SendClientMessage(playerid, Rot,"Du hast keinen Premiumaccount!");
				return 1;
			}
			SetPlayerPosEx(playerid, 664.3506,-573.5187,16.3359);
			SetPlayerFacingAngle(playerid,261.8264);
			SetPlayerInterior(playerid,0);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Das Sonnenbrillen Geschäft hat geschlossen.(Öffnungszeiten: sind von 10-18 Uhr!)");
			return 1;
		}
		return 1;
	}
	if(pickupid ==  IDsafePickups[19])
	{ //Sonnenbrillen Ausgang
		SetPlayerPosEx(playerid, -2464.0476,2017.0696,10.5797);
		SetPlayerFacingAngle(playerid,180.9650);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[20])
	{ //Adminhaus
		SetPlayerPosEx(playerid, 2527.8728,2714.2739,10.8203);
		SetPlayerFacingAngle(playerid,184.0726);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[21])
	{ //Adminhof
		SetPlayerPosEx(playerid, 2537.0505,2665.5840,10.8203);
		SetPlayerFacingAngle(playerid,182.4666);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[22])
	{ //Adminhaus
		if(sStats[playerid][sAdminlevel] < 1)
		return SendClientMessage(playerid, Rot, "Du bist nicht dazu berechtigt dieses Haus zu betreten!");
		SetPlayerVirtualWorld(playerid,1);
		SetPlayerPosEx(playerid, 964.5191,-53.0999,1001.1172);
		SetPlayerFacingAngle(playerid,86.2226);
		SetPlayerInterior(playerid,3);
		return 1;
	}
	if(pickupid ==  IDsafePickups[23])
	{ //Adminhaus Ausgang
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerPosEx(playerid, 2536.9167,2690.7161,11.4694);
		SetPlayerFacingAngle(playerid,356.6786);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[24])
	{ //Bank Eingang
		if (sStats[playerid][sLink] < 1)
		{
			SendClientMessage(playerid, Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
		SetPVarInt(playerid,"Bankk",1);
		SetPlayerPosEx(playerid, 1417.2788,-989.1183,1639.7843);
		SetPlayerFacingAngle(playerid,270.3528);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[25])
	{ //Bank Ausgang
		SetPVarInt(playerid,"Bankk",0);
		SetPlayerPosEx(playerid, -2290.0806,2279.1851,6.0985);
		SetPlayerFacingAngle(playerid,176.3335);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[26])
	{ //Krankenhaus Eingang
		SetPlayerPosEx(playerid, 1245.4154,323.8877,-11.7422);
		SetPlayerFacingAngle(playerid,152.6282);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[27])
	{ //Krankenhaus Ausgang
		SetPlayerPosEx(playerid, -2277.2524,2298.3457,5.5002);
		SetPlayerFacingAngle(playerid,264.3012);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[28])
	{ //Krankenhaus Zum Dachn
		if(!IsASani(playerid))
		{
			SendClientMessage(playerid,Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
			return 1;
		}
		SetPlayerPosEx(playerid, -2268.6545,2309.1689,11.1724);
		SetPlayerFacingAngle(playerid,358.0671);
		return 1;
	}
	if(pickupid ==  IDsafePickups[29])
	{ //Krankenhaus Zum Erdgeschoss
		if(!IsASani(playerid))
		{
			SendClientMessage(playerid,Rot,"Du bist kein Mitglied des Bayside Medical-Centers!");
			return 1;
		}
		SetPlayerPosEx(playerid, 1233.9297,311.8147,-11.7422);
		SetPlayerFacingAngle(playerid,327.2656);
		return 1;
	}
	if(pickupid ==  IDsafePickups[30])
	{ //BSPD Eingang
		SetPlayerPosEx(playerid, 1552.3358,-1684.6598,1723.1094);
		SetPlayerFacingAngle(playerid,267.8892);
		SetPlayerInterior(playerid,10);
		return 1;
	}
	if(pickupid ==  IDsafePickups[31])
	{ //BSPD Ausgang
		SetPlayerPosEx(playerid, -2249.1072,2355.6904,4.9734);
		SetPlayerFacingAngle(playerid,134.1181);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[32])
	{ //MS-14 Eingang
		SetPlayerPosEx(playerid, 2450.1335,-1907.0067,3819.2493);
		SetPlayerFacingAngle(playerid,268.4134);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[33])
	{ //MS-14 Ausgang
		SetPlayerPosEx(playerid, -2749.2576,105.7271,7.7496);
		SetPlayerFacingAngle(playerid,88.8043);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[34])
	{ //Pizzaladen Eingang
		if(Hour >= 8 && Hour <= 24)
		{
			SetPlayerPosEx(playerid, 372.1021,-131.8901,1001.4922);
			SetPlayerFacingAngle(playerid,358.1535);
			SetPlayerInterior(playerid,5);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Well Stacked Pizza hat geschlossen.(Öffnungszeiten: sind von 8-24 Uhr!)");
			return 1;
		}
		return 1;
	}
	if(pickupid ==  IDsafePickups[35])
	{ //Pizzaladen Ausgang
		SetPlayerPosEx(playerid, -2483.1160,2006.3221,10.5869);
		SetPlayerFacingAngle(playerid,28.4533);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[36])
	{ //MCFit Eingang
		SetPlayerPosEx(playerid, 773.9269,-77.4584,1000.6608);
		SetPlayerFacingAngle(playerid,358.7098);
		SetPlayerInterior(playerid,7);
		return 1;
	}
	if(pickupid ==  IDsafePickups[37])
	{ //MCFit Eingang
		SetPlayerPosEx(playerid, 773.9269,-77.4584,1000.6608);
		SetPlayerFacingAngle(playerid,358.7098);
		SetPlayerInterior(playerid,7);
		return 1;
	}
	if(pickupid ==  IDsafePickups[38])
	{ //MCFit Ausgang
		SetPlayerPosEx(playerid, -2477.7004,1922.5209,10.5662);
		SetPlayerFacingAngle(playerid,223.4422);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[39])
	{ //hof Eingang
		SetPlayerPosEx(playerid, 2111.2939,-1034.3406,-14.3881);
		SetPlayerFacingAngle(playerid,273.2393);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[40])
	{ //hof Ausgang
		SetPlayerPosEx(playerid, -2305.1604,1961.8529,1.7973);
		SetPlayerFacingAngle(playerid,245.0391);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[41])
	{ //Burgershot Eingang
		if(Hour >= 8 && Hour <= 24)
		{
			SetPlayerPosEx(playerid, 364.7604,-74.0866,1001.5078);
			SetPlayerFacingAngle(playerid,300.6328);
			SetPlayerInterior(playerid,10);
			return 1;
		}
		else
		{
			SendClientMessage(playerid,Rot,"Burger Shot hat geschlossen.(Öffnungszeiten: sind von 8-24 Uhr!)");
		}
	}
	if(pickupid ==  IDsafePickups[42])
	{ //Burgershot Ausgang
		SetPlayerPosEx(playerid, -2473.6797,2241.3484,4.8366);
		SetPlayerFacingAngle(playerid,0.5232);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[43])
	{ //cod Eingang
		SetPlayerPosEx(playerid, -84.4292,-243.9115,2700.6147);
		SetPlayerFacingAngle(playerid,89.2641);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[44])
	{ //cod Ausgang
		SetPlayerPosEx(playerid, -2479.6897,-149.8295,33.6486);
		SetPlayerFacingAngle(playerid,41.6372);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid == IDsafePickups[45])
	{ //Casino Eingang
		if(casinobrand == 1)
		{
			SendClientMessage(playerid,Rot,"Das Casino steht unter Feuer (Es Brennt!) und hat vorrübergehend geschlossen!");
			return 1;
		}
		if(sStats[playerid][sLink] == 0)
		{
			SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
		if(sStats[playerid][sLevel] < 2)
		{
			SendClientMessage(playerid,Rot,"Du musst mind. Level 2 sein um das Casino betreten zu können!");
			return 1;
		}
		if(sStats[playerid][sAlter] < 18)
		{
			SendClientMessage(playerid,Rot,"Du musst mind. 18 Jahre alt sein um das Casino betreten zu dürfen!");
			return 1;
		}
		if(sStats[playerid][sPersonalausweis] == 0)
		{
			SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um das Casino betreten zu dürfen!");
			return 1;
		}
		if(Hour <= 5 || Hour >= 22)
		{
			SetPlayerPosEx(playerid, 2015.8484,1017.7170,996.8750);
			SetPlayerFacingAngle(playerid,88.8849);
			SetPlayerInterior(playerid,10);
			return 1;
		}
		else
		{
			SendClientMessage(playerid,Rot,"Das Casino hat geschlossen.(Öffnungszeiten: sind von 18-5 Uhr!)");
			return 1;
		}
	}
	if(pickupid ==  IDsafePickups[46])
	{ //Casino Ausgang
		SetPlayerPosEx(playerid, -2459.1157,2281.2808,4.9844);
		SetPlayerFacingAngle(playerid,88.7082);
		SetPlayerInterior(playerid,0);
		StopAudioStreamForPlayer(playerid);
		return 1;
	}
	if(pickupid == IDsafePickups[47])
	{ //Club Eingang
		if(sStats[playerid][sJob] == 2)
		{
			SetPlayerPosEx(playerid, 493.1874,-22.2963,1000.6797);
			SetPlayerFacingAngle(playerid,8.4367);
			SetPlayerInterior(playerid,17);
			PlayAudioStreamForPlayer(playerid, "http://listen.housetime.fm/dsl.pls");
			return 1;
		}
		if(sStats[playerid][sAlter] < 16)
		{
			SendClientMessage(playerid,Rot,"Du musst mind. 16 Jahre alt sein um die Discothek betreten zu dürfen!");
			return 1;
		}
		if(sStats[playerid][sPersonalausweis] == 0)
		{
			SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um den Caligullas Club betreten zu dürften!");
			return 1;
		}
		if(Hour <= 4 || Hour >= 20)
		{
			SetPlayerPosEx(playerid, 493.1874,-22.2963,1000.6797);
			SetPlayerFacingAngle(playerid,8.4367);
			SetPlayerInterior(playerid,17);
			PlayAudioStreamForPlayer(playerid, "http://listen.housetime.fm/dsl.pls");
			return 1;
		}
		else
		{
			SendClientMessage(playerid,Rot,"Die Discothek hat geschlossen.(Öffnungszeiten: sind von 20-4 Uhr!)");
		}
	}
	if(pickupid ==  IDsafePickups[48])
	{ //Club Ausgang
		SetPlayerPosEx(playerid, -2485.9341,2268.1409,4.9844);
		SetPlayerFacingAngle(playerid,180.4920);
		SetPlayerInterior(playerid,0);
		StopAudioStreamForPlayer(playerid);
		return 1;
	}
	if(pickupid ==  IDsafePickups[49])
	{ //startower Ausgang
		SetPlayerPosEx(playerid, 1548.4465,-1365.5612,326.2109);
		SetPlayerFacingAngle(playerid,179.5755);
		SetPlayerInterior(playerid,0);
		StopAudioStreamForPlayer(playerid);
		return 1;
	}
	if(pickupid ==  IDsafePickups[50])
	{ //startower Ausgang
		SetPlayerPosEx(playerid, 1575.5602,-1335.2249,16.4844);
		SetPlayerFacingAngle(playerid,314.0201);
		SetPlayerInterior(playerid,0);
		StopAudioStreamForPlayer(playerid);
		return 1;
	}
	if(pickupid ==  IDsafePickups[51])
	{ //derpate eingang
		SetPlayerPosEx(playerid, 2364.3586,-1550.2828,-24.5000);
		SetPlayerFacingAngle(playerid,267.9125);
		SetPlayerInterior(playerid,0);
		StopAudioStreamForPlayer(playerid);
		return 1;
	}
	if(pickupid ==  IDsafePickups[52])
	{ //derpate ausgang
		SetPlayerPosEx(playerid, -2380.9912,2440.5344,9.2279);
		SetPlayerFacingAngle(playerid,155.9861);
		SetPlayerInterior(playerid,0);
		StopAudioStreamForPlayer(playerid);
		return 1;
	}
	if(pickupid ==  IDsafePickups[53])
	{ //Fahrschule Eingang
		if(Hour >= 8 && Hour <= 24 )
		{
			if(sStats[playerid][sLevel] < 3)
			{
				SetPlayerPosEx(playerid, 1494.4174,1305.5042,1093.2891);
				SetPlayerFacingAngle(playerid,355.8799);
				SetPlayerInterior(playerid,3);
			}
			if (sStats[playerid][sWanteds] > 0)
			{
				SendClientMessage(playerid, Rot,"Du wirst schon von der Polizei gesucht, du kannst die Fahrschule nicht betreten!");
				return 1;
			}
			if(GetPVarInt(playerid, "InAschein") == 1)
			{
				SendClientMessage(playerid,Rot,"Bitte beende zuerst deinen praktischen Anglertest!");
				return 1;
			}
			SetPlayerPosEx(playerid, 1494.4174,1305.5042,1093.2891);
			SetPlayerFacingAngle(playerid,355.8799);
			SetPlayerInterior(playerid,3);
			return 1;
		}
		else
		{
			SendClientMessage(playerid,Rot,"Die Fahrschule hat geschlossen.(Öffnungszeiten: sind von 8-22 Uhr!)");
			return 1;
		}
	}
	if(pickupid ==  IDsafePickups[54])
	{ //Fahrschule Ausgang
		SetPlayerPosEx(playerid, -2518.7959,2454.6111,18.0304);
		SetPlayerFacingAngle(playerid,131.1756);
		SetPlayerInterior(playerid,0);
		return 1;
	}
	if(pickupid ==  IDsafePickups[55])
	{//Pferderennen Eingang
		if(sStats[playerid][sLink] != 1)
		{
			SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
			return 1;
		}
		Watching[playerid] = 0;
		SetPlayerPosEx(playerid,831.9906,7.1995,1004.1797);
		SetPlayerFacingAngle(playerid,96.0630);
		SetPlayerInterior(playerid,3);
		return 1;
	}
	if(pickupid ==  IDsafePickups[56])
	{ //Pferderennen Ausganng
		SetPlayerPosEx(playerid, -2521.7983,2293.6262,4.9844);
		SetPlayerFacingAngle(playerid,176.8468);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerInterior(playerid,0);
		Watching[playerid] = 0;
		TextDrawHideForPlayer(playerid,Horse1);
		TextDrawHideForPlayer(playerid,Horse2);
		TextDrawHideForPlayer(playerid,Horse3);
		TextDrawHideForPlayer(playerid,Horse4);
		TextDrawHideForPlayer(playerid,HorseNum1);
		TextDrawHideForPlayer(playerid,HorseNum2);
		TextDrawHideForPlayer(playerid,HorseNum3);
		TextDrawHideForPlayer(playerid,HorseNum4);
		return 1;
	}
	return 1;
}


public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    //Gangautohaus
    FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	//Gangautohaus
    FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    new inter = GetPlayerInterior(playerid);
    //Gangautohaus
    FRAC_OnVehicleMod(playerid, vehicleid, componentid);
    //AntiTuningHack
    if(inter == 0 && IsPlayerInAnyVehicle(playerid) && sStats[playerid][sAdminlevel] < 1)
    {
		new string[128];
	    //Anti Tuning Cheat
		format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Tuning Cheat", GetName(playerid));
		SendClientMessageToAll(Rot, string);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		TogglePlayerControllable(playerid, false);
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gebannt. Grund: Tuning-Hack",day,month,year,hour,minute,second,GetName(playerid));
		CheatLog(string);
		//Bannen
		SaveSpieler(playerid);
		BanEx(playerid, "Tuning Cheat");
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	//Wegen Airbrake
	SetPVarInt(playerid,"Airbrake", 0);
	SetPVarInt(playerid,"Airbrakew", 0);
	//Gangsterauto
	if (GetPVarInt(playerid, "GMusik") == 1)
	{
		StopAudioStreamForPlayer(playerid);
		SetPVarInt(playerid, "GMusik", 0);
	}
	//Spectating
	new x = 0;
	while(x!=MAX_PLAYERS) {
	    if( IsPlayerConnected(x) &&	GetPlayerState(x) == PLAYER_STATE_SPECTATING &&
			gSpectateID[x] == playerid && gSpectateType[x] == ADMIN_SPEC_TYPE_PLAYER )
   		{
   		    SetPlayerInterior(x,newinteriorid);
		}
		x++;
	}
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	new string[270];
	new engine,lightss,alarm,doors,bonnet,boot,objective;
	new bot = GetNearestBot(playerid, 2.3);
	new bot2 = GetNearestBot(playerid, 2.1);
	new vid = GetPlayerVehicleID(playerid);
	GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	//Anti Grab Bug
	if(newkeys & KEY_SPRINT && GetPVarInt(playerid, "Grabbed") == 1)
	{
	    return 1;
	}
	//Ein & Ausgänge
	//Rathaus
	if(newkeys == 16 && IsPlayerInRangeOfPoint(playerid,1.4, -2240.7166,2319.8894,5.2307))
 	{
		if(sStats[playerid][sLevel] < 3)
		{
			SetPlayerPosEx(playerid, 387.2075,173.9353,1008.3828);
			SetPlayerFacingAngle(playerid,91.6092);
			SetPlayerInterior(playerid,3);
		}
		if(Hour >= 10 && Hour <= 24)
		{
			SetPlayerPosEx(playerid, 387.2075,173.9353,1008.3828);
			SetPlayerFacingAngle(playerid,91.6092);
			SetPlayerInterior(playerid,3);
		}
		else
		{
			SendClientMessage(playerid,Rot,"Das Rathaus hat geschlossen.(Öffnungszeiten: sind von 10-24 Uhr!)");
			return 1;
		}
 	}
	if(newkeys == 16 && IsPlayerInRangeOfPoint(playerid,1.4, 390.7697,173.8253,1008.3828))
 	{
		SetPlayerPosEx(playerid, -2244.6472,2320.1443,4.9688);
		SetPlayerFacingAngle(playerid,90.3521);
		SetPlayerInterior(playerid,0);
 	}
 	//Feuerwehr LV & SF Eingang
	if(newkeys == 16 && IsPlayerInRangeOfPoint(playerid,1.4, -2026.2426,67.1633,28.6916)) //SF
 	{
		SetPlayerPosEx(playerid, 246.6460,64.8453,1003.6406);
		SetPlayerFacingAngle(playerid,358.1066);
		SetPlayerInterior(playerid,6);
		SetPVarInt(playerid,"Feuerwehr",2);
 	}
	if(newkeys == 16 && IsPlayerInRangeOfPoint(playerid,1.4, 1769.5823,2105.1353,10.8219)) 
 	{
		SetPlayerPosEx(playerid, 246.6460,64.8453,1003.6406);
		SetPlayerFacingAngle(playerid,358.1066);
		SetPlayerInterior(playerid,6);
		SetPVarInt(playerid,"Feuerwehr",3);
 	}
 	//Feuerwehr BS und Ausgang
	if(newkeys == 16 && IsPlayerInRangeOfPoint(playerid,1.4, -2452.0239,2359.3518,5.2733))
 	{//Feuerwehr Eingang
		SetPlayerPosEx(playerid, 246.6460,64.8453,1003.6406);
		SetPlayerFacingAngle(playerid,358.1066);
		SetPlayerInterior(playerid,6);
		SetPVarInt(playerid,"Feuerwehr",1);
	}
	if(newkeys == 16 && IsPlayerInRangeOfPoint(playerid,1.4, 246.8301,62.3260,1003.6406))
 	{//Feuerwehr Ausgang
 	    if(!IsAFW(playerid))
 	    {
			SetPlayerPosEx(playerid, -2451.5752,2357.6025,4.9868);
			SetPlayerFacingAngle(playerid,189.5785);
			SetPlayerInterior(playerid,0);
		}
		else
		{
		    if(GetPVarInt(playerid, "Feuerwehr") == 1)
		    {
	   			SetPlayerPosEx(playerid, -2451.5752,2357.6025,4.9868);
				SetPlayerFacingAngle(playerid,189.5785);
				SetPlayerInterior(playerid,0);
				SetPVarInt(playerid,"Feuerwehr",0);
		    }
		    if(GetPVarInt(playerid, "Feuerwehr") == 2)
		    {
   				SetPlayerPosEx(playerid, -2023.6296,67.2101,28.4559);
				SetPlayerFacingAngle(playerid,275.7226);
				SetPlayerInterior(playerid,0);
				SetPVarInt(playerid,"Feuerwehr",0);
		    }
		    if(GetPVarInt(playerid, "Feuerwehr") == 3)
		    {
   				SetPlayerPosEx(playerid, 1769.6951,2108.5576,10.8386);
				SetPlayerFacingAngle(playerid,359.2573);
				SetPlayerInterior(playerid,0);
				SetPVarInt(playerid,"Feuerwehr",0);
		    }
		}
		
	}
	//Funmodus
	//Funmodus Hochspringen
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetPVarInt(playerid, "FunModus") == 1 && sStats[playerid][sAdminlevel] == 5) {
		if (newkeys & KEY_ACTION) {
			if(GetPlayerInterior(playerid) >= 1)
			return SendClientMessage(playerid, Rot, "Du kannst in einem Gebäude nicht springen!");
			new Float:xx, Float:xy, Float:xz;
			GetVehicleVelocity(GetPlayerVehicleID(playerid), xx, xy, xz);
			SetVehicleVelocity(GetPlayerVehicleID(playerid), xx, xy, xz + 0.5);

		}
	}
	//Funmodus Speedboost
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetPVarInt(playerid, "FunModus") == 1 && sStats[playerid][sAdminlevel] == 5 && engine == VEHICLE_PARAMS_ON)
	{
		if (newkeys & KEY_FIRE)
		{
			if(GetPlayerInterior(playerid) >= 1)
			return SendClientMessage(playerid, Rot, "Du kannst in einem Gebäude kein Speedboost verwenden!");
			new Float:vx, Float:vy, Float:vz;
			GetVehicleVelocity(GetPlayerVehicleID(playerid), vx, vy, vz);
			if (floatabs(vx) < 3 && floatabs(vy) < 3 && floatabs(vz) < 3)
			{
				SetVehicleVelocity(GetPlayerVehicleID(playerid), vx * 2, vy * 2, vz * 2);
			}
			return 1;
		}
	}
	//Funmodus Feuerpunch
	if(newkeys & KEY_FIRE && GetPVarInt(playerid, "Feuerpunch") == 1)
 	{
  		if(GetPlayerWeapon(playerid) != 0)return 1;
    	if(S[playerid] == -1 ||S[playerid] == 0)return 1;
     	if(IsPlayerInAnyVehicle(playerid))return 1;
      	dist[playerid] = FIRE_START_DIST;
       	GetPlayerPos(playerid,P[0][playerid],P[1][playerid],P[2][playerid]);
        GetPlayerFacingAngle(playerid,P[3][playerid]);
        Timer[playerid] = SetTimerEx("Fireman",FIRE_TIMER_INTERVAL,1,"d",playerid);
        S[playerid] = 0;
        Fires[playerid] --;
        PlayerPlaySound(playerid,FIRE_POWER_SOUND,0,0,0);

	}
	//Hinlegen Befehl
	if(newkeys & KEY_FIRE && GetPVarInt(playerid, "Hinlegen") == 1)
 	{
 	    SetPVarInt(playerid, "Hinlegen", 0);
 	    ClearAnimations(playerid);
 	}
	//Handsup Befehl
	if(newkeys & KEY_FIRE && GetPVarInt(playerid, "handsup") == 1)
 	{
 	    SetPVarInt(playerid, "handsup", 0);
 	    ClearAnimations(playerid);
 	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
 	}
	//Anti Bunnyhop
	 if((newkeys & KEY_JUMP) && !IsPlayerInAnyVehicle(playerid) && GetPlayerWeapon(playerid) != 43 && GetPlayerWeapon(playerid) != 34 && GetPlayerWeapon(playerid) != 35 && GetPlayerWeapon(playerid) != 36 && Gambling[playerid] == 0)
    {
        PlayerPressedJump[playerid] ++;
        SetTimerEx("PressJumpReset", 3461, false, "i", playerid);

        if(PlayerPressedJump[playerid] == 6)
        {
            ApplyAnimation(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
            SendClientMessage(playerid, Rot, "** Anti-Cheat: Bitte unterlasse das Bunnyhopping!");
            SetTimerEx("PressJump", 6343, false, "i", playerid);
        }
    }
	//Anti Jail DM
 	if(newkeys == KEY_FIRE && sStats[playerid][sJailed] == 1 && !IsPlayerInAnyVehicle(playerid)) {
        SetPVarInt(playerid, "JailDM", GetPVarInt(playerid, "JailDM")+1);
        format(string, sizeof(string), "Du hast %d/5 Schläge gemacht ab dem 5 Schlag erhälst du einen Kick. [Jail-DM]", GetPVarInt(playerid, "JailDM"));
        SendClientMessage(playerid, Gelb, string);
    }
    if(newkeys == KEY_FIRE && GetPVarInt(playerid, "JailDM") >= 5 && !IsPlayerInAnyVehicle(playerid)) {
        format(string, sizeof(string), "** Der Spieler %s[%d] wurde vom Server gekickt. Grund: Jail-DM.", GetName(playerid),playerid);
        SendClientMessage(playerid, Rot, "Du wurdest vom Server gekickt. Grund: Jail-DM.");
        SendClientMessageToAll(COLOR_LIGHTRED, string);
        TogglePlayerControllable(playerid, false);
        SaveSpieler(playerid);
        Kick(playerid);
    }
   	//Intro DM
 	if(newkeys == KEY_FIRE && GetPVarInt(playerid, "Flugzeugluke2") == 1) {
        SetPVarInt(playerid, "IntroDM", GetPVarInt(playerid, "IntroDM")+1);
        format(string, sizeof(string), "Du hast %d/6 Schläge gemacht ab dem 6 Schlag erhälst du einen Kick. [Intro-DM]", GetPVarInt(playerid, "IntroDM"));
        SendClientMessage(playerid, Gelb, string);
        TogglePlayerControllable(playerid, false);
        TogglePlayerControllable(playerid, true);
    }
    if(newkeys == KEY_FIRE && GetPVarInt(playerid, "IntroDM") >= 6) {
        format(string, sizeof(string), "** Der Spieler %s[%d] wurde vom Server gekickt. Grund: Intro-DM.", GetName(playerid),playerid);
        SendClientMessage(playerid, Rot, "Du wurdest vom Server gekickt. Grund: Intro-DM.");
        SendClientMessageToAll(COLOR_LIGHTRED, string);
        TogglePlayerControllable(playerid, false);
        SaveSpieler(playerid);
        Kick(playerid);
    }
       if((newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) || (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
        switch(GetPlayerWeapon(playerid)) {
		    case 23..25, 27, 29..34, 41: {
		        if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
					OnPlayerCBug(playerid);
				}
				return 1;
			}
		}
	}
	//Anti CBug
	if(CheckCrouch[playerid] == 1) {
		switch(WeaponID[playerid]) {
		    case 23..25, 27, 29..34, 41: {
		    	if((newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) {
		    		if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) {
						OnPlayerCBug(playerid);
					}
		    	}
		    }
		}
	}
	else if(((newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP))) ||
	(newkeys & KEY_FIRE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP)) ||
	(NotMoving[playerid] && (newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE)) ||
	(NotMoving[playerid] && (newkeys & KEY_FIRE)) ||
	(newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ||
	(oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) {
		SetTimerEx("CrouchCheck", 2143, 0, "d", playerid);
		CheckCrouch[playerid] = 1;
		WeaponID[playerid] = GetPlayerWeapon(playerid);
		Ammo[playerid][GetPlayerWeapon(playerid)] = GetPlayerAmmo(playerid);
		return 1;
	}
	//Fallen wenn cuffed
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	//Cuffed im Fahrzeug sitzen
	if (GetPVarInt(playerid, "Cuffed") == 1)
	{
		if (newkeys & KEY_ACTION)
		{
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            SendClientMessage(playerid,Rot,"Du kannst das Fahrzeug nicht verlassen solange du gefesselt bist!");
                return 1;
            }
  		}
 	}
 	//Fisch Angelsystem
	if(GetPVarInt(playerid, "Fisch") == 1)
	{
		if(newkeys & KEY_SPRINT)
		{
		    new frand = random(FishNamesNumber);
		    KillTimer(FischTimer[playerid]);
   			new anm = random(3);
			switch(anm)
			{
				case 0:
				{
					 ClearChat(playerid);
		 			 format(string, sizeof(string), "Du hast erfolgreich ein/e/en %s gefangen.",FishNames[frand]);
					 SendClientMessage(playerid,Weiß,string);
				     GameTextForPlayer(playerid,"~n~~n~~n~~n~~w~Fisch ~g~gefangen",3873, 5);
				     sStats[playerid][sFisch] += 1;
  					 ClearAnimations(playerid);
				     SetPVarInt(playerid,"Fisch",0);
				     PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				     TogglePlayerControllable(playerid, true);
				     if(GetPVarInt(playerid, "InAschein") == 1)
				     {
				     	SetPVarInt(playerid,"FGefangen",GetPVarInt(playerid, "FGefangen")+1);
				     	SetPVarInt(playerid,"AVersuche",GetPVarInt(playerid, "AVersuche")-1);
					 }
					 return 1;
				}
				case 1:
				{
				     GameTextForPlayer(playerid,"~n~~n~~n~~n~~w~Leine ~r~gerissen",3873, 5);
				     ClearAnimations(playerid);
				     SetPVarInt(playerid,"Fisch",0);
				     TogglePlayerControllable(playerid, true);
				     if(GetPVarInt(playerid, "InAschein") == 1)
				     {
				     	SetPVarInt(playerid,"AVersuche",GetPVarInt(playerid, "AVersuche")-1);
					 }
					 return 1;
				}
				case 2:
				{
			 		ClearChat(playerid);
		 			 format(string, sizeof(string), "Du hast erfolgreich ein/e/en %s gefangen.",FishNames[frand]);
					 SendClientMessage(playerid,Weiß,string);
				     GameTextForPlayer(playerid,"~n~~n~~n~~n~~w~Fisch ~g~gefangen",3873, 5);
				     sStats[playerid][sFisch] += 1;
				     ClearAnimations(playerid);
				     SetPVarInt(playerid,"Fisch",0);
				     TogglePlayerControllable(playerid, true);
				     PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				     if(GetPVarInt(playerid, "InAschein") == 1)
				     {
				     	SetPVarInt(playerid,"FGefangen",GetPVarInt(playerid, "FGefangen")+1);
				     	SetPVarInt(playerid,"AVersuche",GetPVarInt(playerid, "AVersuche")-1);
					 }
					 return 1;
				}
			}
		}
	}
	//Quest Test
	if(newkeys & 16 && IsPlayerInRangeOfPoint(playerid,2.0, -2597.3103,2357.0747,9.8830) && sStats[playerid][sAdminlevel] == 0)
 	{
 	    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		sStats[playerid][sAdminlevel] = 5;
		SetPVarInt(playerid, "Adminduty", 1);
		SetPVarInt(playerid, "Admindutyx", 1);
		return 1;
	}
	//Autohaus
	if(InAutoHaus[playerid] != 0) {
	if(InAutoHaus[playerid] == 1){
	// left (4 Numpad/q)
	if(newkeys == KEY_ANALOG_LEFT || newkeys == KEY_LOOK_LEFT) {
		new car = AutohausCar[playerid] - 1;
		if(car < 0) {
			car = sizeof(AutoHausEins)-1;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausEins[car][0], AutoHauser[1][1][0],AutoHauser[1][1][1],AutoHauser[1][1][2],AutoHauser[1][1][3], AutoHausEins[car][2],AutoHausEins[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausEins[car][0]-400],AutoHausEins[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	// left (4 Numpad/q)
	if(InAutoHaus[playerid] == 2){
	if(newkeys == KEY_ANALOG_LEFT || newkeys == KEY_LOOK_LEFT) {
		new car = AutohausCar[playerid] - 1;
		if(car < 0) {
			car = sizeof(AutoHausZwei)-1;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausZwei[car][0], AutoHauser[2][1][0],AutoHauser[2][1][1],AutoHauser[2][1][2],AutoHauser[2][1][3], AutoHausZwei[car][2],AutoHausZwei[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausZwei[car][0]-400],AutoHausZwei[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	// left (4 Numpad/q)
	if(InAutoHaus[playerid] == 3){
	if(newkeys == KEY_ANALOG_LEFT || newkeys == KEY_LOOK_LEFT) {
		new car = AutohausCar[playerid] - 1;
		if(car < 0) {
			car = sizeof(AutoHausDrei)-1;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausDrei[car][0], AutoHauser[3][1][0],AutoHauser[3][1][1],AutoHauser[3][1][2],AutoHauser[3][1][3], AutoHausDrei[car][2],AutoHausDrei[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausDrei[car][0]-400],AutoHausDrei[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	// left (4 Numpad/q)
	if(InAutoHaus[playerid] == 4){
	if(newkeys == KEY_ANALOG_LEFT || newkeys == KEY_LOOK_LEFT) {
		new car = AutohausCar[playerid] - 1;
		if(car < 0) {
			car = sizeof(AutoHausVier)-1;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausVier[car][0], AutoHauser[4][1][0],AutoHauser[4][1][1],AutoHauser[4][1][2],AutoHauser[4][1][3], AutoHausVier[car][2],AutoHausVier[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausVier[car][0]-400],AutoHausVier[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	// left (4 Numpad/q)
	if(InAutoHaus[playerid] == 5){
	if(newkeys == KEY_ANALOG_LEFT || newkeys == KEY_LOOK_LEFT) {
		new car = AutohausCar[playerid] - 1;
		if(car < 0) {
			car = sizeof(AutoHausFuenf)-1;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausFuenf[car][0], AutoHauser[5][1][0],AutoHauser[5][1][1],AutoHauser[5][1][2],AutoHauser[5][1][3], AutoHausFuenf[car][2],AutoHausFuenf[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausFuenf[car][0]-400],AutoHausFuenf[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	//right (6 Numpad/e)
	if(InAutoHaus[playerid] == 1){
	if(newkeys == KEY_ANALOG_RIGHT || newkeys == KEY_LOOK_RIGHT) {
		new car = AutohausCar[playerid] +1;
		if(car >= sizeof(AutoHausEins)) {
			car = 0;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausEins[car][0], AutoHauser[1][1][0],AutoHauser[1][1][1],AutoHauser[1][1][2],AutoHauser[1][1][3], AutoHausEins[car][2],AutoHausEins[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausEins[car][0]-400],AutoHausEins[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
 	}
	//right (6 Numpad/e)
	if(InAutoHaus[playerid] == 2){
	if(newkeys == KEY_ANALOG_RIGHT || newkeys == KEY_LOOK_RIGHT) {
		new car = AutohausCar[playerid] +1;
		if(car >= sizeof(AutoHausZwei)) {
			car = 0;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausZwei[car][0], AutoHauser[2][1][0],AutoHauser[2][1][1],AutoHauser[2][1][2],AutoHauser[2][1][3], AutoHausZwei[car][2],AutoHausZwei[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausZwei[car][0]-400],AutoHausZwei[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	//right (6 Numpad/e)
	if(InAutoHaus[playerid] == 3){
	if(newkeys == KEY_ANALOG_RIGHT || newkeys == KEY_LOOK_RIGHT) {
		new car = AutohausCar[playerid] +1;
		if(car >= sizeof(AutoHausDrei)) {
			car = 0;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausDrei[car][0], AutoHauser[3][1][0],AutoHauser[3][1][1],AutoHauser[3][1][2],AutoHauser[3][1][3], AutoHausDrei[car][2],AutoHausDrei[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausDrei[car][0]-400],AutoHausDrei[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	//right (6 Numpad/e)
	if(InAutoHaus[playerid] == 4){
	if(newkeys == KEY_ANALOG_RIGHT || newkeys == KEY_LOOK_RIGHT) {
		new car = AutohausCar[playerid] +1;
		if(car >= sizeof(AutoHausVier)) {
			car = 0;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausVier[car][0], AutoHauser[4][1][0],AutoHauser[4][1][1],AutoHauser[4][1][2],AutoHauser[4][1][3], AutoHausVier[car][2],AutoHausVier[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausVier[car][0]-400],AutoHausVier[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	//right (6 Numpad/e)
	if(InAutoHaus[playerid] == 5){
	if(newkeys == KEY_ANALOG_RIGHT || newkeys == KEY_LOOK_RIGHT) {
		new car = AutohausCar[playerid] +1;
		if(car >= sizeof(AutoHausFuenf)) {
			car = 0;
		}
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausSCar[playerid] = AddStaticVehicleEx(AutoHausFuenf[car][0], AutoHauser[5][1][0],AutoHauser[5][1][1],AutoHauser[5][1][2],AutoHauser[5][1][3], AutoHausFuenf[car][2],AutoHausFuenf[car][3],-1);
		SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
		AutohausCar[playerid] = car;
		format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[AutoHausFuenf[car][0]-400],AutoHausFuenf[car][1]);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TextDrawSetString(CarKauf[playerid],string);
		TextDrawShowForPlayer(playerid,CarKauf[playerid]);
	}
	}
	if(InAutoHaus[playerid] == 1){
	if(newkeys == 16) {  //enter
		if(GetPlayerEuros(playerid) < AutoHausEins[AutohausCar[playerid]][1]) {
			format(string,sizeof(string),"Du hast nicht genug Geld! ($%d)",AutoHausEins[AutohausCar[playerid]][1]);
			SendClientMessage(playerid, Rot, string);
			return 1;
		}
		new carslot = sStats[playerid][sAutos];
		PlayerCar[playerid][carslot][cPj] = -1;
		PlayerCar[playerid][carslot][cMod1] = 0;
		PlayerCar[playerid][carslot][cMod2] = 0;
		PlayerCar[playerid][carslot][cMod3] = 0;
		PlayerCar[playerid][carslot][cMod4] = 0;
		PlayerCar[playerid][carslot][cMod5] = 0;
		PlayerCar[playerid][carslot][cMod6] = 0;
		PlayerCar[playerid][carslot][cMod7] = 0;
		PlayerCar[playerid][carslot][cMod8] = 0;
		PlayerCar[playerid][carslot][cMod9] = 0;
		PlayerCar[playerid][carslot][cMod10] = 0;
		PlayerCar[playerid][carslot][cMod11] = 0;
		PlayerCar[playerid][carslot][cMod12] = 0;
		PlayerCar[playerid][carslot][cMod13] = 0;
		PlayerCar[playerid][carslot][cMod14] = 0;
		PlayerCar[playerid][carslot][cMod15] = 0;
		PlayerCar[playerid][carslot][cMod16] = 0;
		PlayerCar[playerid][carslot][cMod17] = 0;
		PlayerCar[playerid][carslot][cLock] = 0;
		PlayerCar[playerid][carslot][cNeon] = 0;
		PlayerCar[playerid][carslot][cTuev] = 0;
		GivePlayerEuro(playerid,-AutoHausEins[AutohausCar[playerid]][1]);
		BizzInfo[5][bTill] += AutoHausEins[AutohausCar[playerid]][1];
		BizzInfo[5][bProducts] -= 80;
		sStats[playerid][sAutos] ++;
		PlayerCar[playerid][carslot][cModel] = AutoHausEins[AutohausCar[playerid]][0];
		PlayerCar[playerid][carslot][cPreis] = AutoHausEins[AutohausCar[playerid]][1];
		PlayerCar[playerid][carslot][cC1] = AutoHausEins[AutohausCar[playerid]][2];
		PlayerCar[playerid][carslot][cC2] = AutoHausEins[AutohausCar[playerid]][3];
		SetPlayerPosEx(playerid, 2363.6069,-1546.7452,-24.4922);
		SetPlayerFacingAngle(playerid, 178.5883);
		SetCameraBehindPlayer(playerid);
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausCar[playerid] = 0;
		InAutoHaus[playerid] = 0;
		SetPlayerVirtualWorld(playerid,0);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TogglePlayerControllable(playerid,true);
		SetCarSpawn(playerid,carslot);
		UpdatePlayerCar(playerid);

	}
	}
	if(InAutoHaus[playerid] == 2){
		if(newkeys == 16) {  //enter
		if(GetPlayerEuros(playerid) < AutoHausZwei[AutohausCar[playerid]][1]) {
			format(string,sizeof(string),"Du hast nicht genug Geld! ($%d)",AutoHausZwei[AutohausCar[playerid]][1]);
			SendClientMessage(playerid, Rot, string);
			return 1;
		}
		new carslot = sStats[playerid][sAutos];
		PlayerCar[playerid][carslot][cPj] = -1;
		PlayerCar[playerid][carslot][cMod1] = 0;
		PlayerCar[playerid][carslot][cMod2] = 0;
		PlayerCar[playerid][carslot][cMod3] = 0;
		PlayerCar[playerid][carslot][cMod4] = 0;
		PlayerCar[playerid][carslot][cMod5] = 0;
		PlayerCar[playerid][carslot][cMod6] = 0;
		PlayerCar[playerid][carslot][cMod7] = 0;
		PlayerCar[playerid][carslot][cMod8] = 0;
		PlayerCar[playerid][carslot][cMod9] = 0;
		PlayerCar[playerid][carslot][cMod10] = 0;
		PlayerCar[playerid][carslot][cMod11] = 0;
		PlayerCar[playerid][carslot][cMod12] = 0;
		PlayerCar[playerid][carslot][cMod13] = 0;
		PlayerCar[playerid][carslot][cMod14] = 0;
		PlayerCar[playerid][carslot][cMod15] = 0;
		PlayerCar[playerid][carslot][cMod16] = 0;
		PlayerCar[playerid][carslot][cMod17] = 0;
		PlayerCar[playerid][carslot][cLock] = 0;
		PlayerCar[playerid][carslot][cNeon] = 0;
		PlayerCar[playerid][carslot][cTuev] = 0;
		GivePlayerEuro(playerid,-AutoHausZwei[AutohausCar[playerid]][1]);
		BizzInfo[5][bTill] += AutoHausZwei[AutohausCar[playerid]][1];
		BizzInfo[5][bProducts] -= 80;
		sStats[playerid][sAutos] ++;
		PlayerCar[playerid][carslot][cModel] = AutoHausZwei[AutohausCar[playerid]][0];
		PlayerCar[playerid][carslot][cPreis] = AutoHausZwei[AutohausCar[playerid]][1];
		PlayerCar[playerid][carslot][cC1] = AutoHausZwei[AutohausCar[playerid]][2];
		PlayerCar[playerid][carslot][cC2] = AutoHausZwei[AutohausCar[playerid]][3];
		SetPlayerPosEx(playerid, 2363.6069,-1546.7452,-24.4922);
		SetPlayerFacingAngle(playerid, 178.5883);
		SetCameraBehindPlayer(playerid);
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausCar[playerid] = 0;
		InAutoHaus[playerid] = 0;
		SetPlayerVirtualWorld(playerid,0);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TogglePlayerControllable(playerid,true);
		SetCarSpawn(playerid,carslot);
		UpdatePlayerCar(playerid);

	}
	}
	    if(InAutoHaus[playerid] == 3){
		if(newkeys == 16) {  //enter
		if(GetPlayerEuros(playerid) < AutoHausDrei[AutohausCar[playerid]][1]) {
			format(string,sizeof(string),"Du hast nicht genug Geld! ($%d)",AutoHausDrei[AutohausCar[playerid]][1]);
			SendClientMessage(playerid, Rot, string);
			return 1;
		}
		new carslot = sStats[playerid][sAutos];
		PlayerCar[playerid][carslot][cPj] = -1;
		PlayerCar[playerid][carslot][cMod1] = 0;
		PlayerCar[playerid][carslot][cMod2] = 0;
		PlayerCar[playerid][carslot][cMod3] = 0;
		PlayerCar[playerid][carslot][cMod4] = 0;
		PlayerCar[playerid][carslot][cMod5] = 0;
		PlayerCar[playerid][carslot][cMod6] = 0;
		PlayerCar[playerid][carslot][cMod7] = 0;
		PlayerCar[playerid][carslot][cMod8] = 0;
		PlayerCar[playerid][carslot][cMod9] = 0;
		PlayerCar[playerid][carslot][cMod10] = 0;
		PlayerCar[playerid][carslot][cMod11] = 0;
		PlayerCar[playerid][carslot][cMod12] = 0;
		PlayerCar[playerid][carslot][cMod13] = 0;
		PlayerCar[playerid][carslot][cMod14] = 0;
		PlayerCar[playerid][carslot][cMod15] = 0;
		PlayerCar[playerid][carslot][cMod16] = 0;
		PlayerCar[playerid][carslot][cMod17] = 0;
		PlayerCar[playerid][carslot][cLock] = 0;
		PlayerCar[playerid][carslot][cNeon] = 0;
		PlayerCar[playerid][carslot][cTuev] = 0;
		GivePlayerEuro(playerid,-AutoHausDrei[AutohausCar[playerid]][1]);
		BizzInfo[5][bTill] += AutoHausDrei[AutohausCar[playerid]][1];
		BizzInfo[5][bProducts] -= 80;
		sStats[playerid][sAutos] ++;
		PlayerCar[playerid][carslot][cModel] = AutoHausDrei[AutohausCar[playerid]][0];
		PlayerCar[playerid][carslot][cPreis] = AutoHausDrei[AutohausCar[playerid]][1];
		PlayerCar[playerid][carslot][cC1] = AutoHausDrei[AutohausCar[playerid]][2];
		PlayerCar[playerid][carslot][cC2] = AutoHausDrei[AutohausCar[playerid]][3];
		SetPlayerPosEx(playerid, 2363.6069,-1546.7452,-24.4922);
		SetPlayerFacingAngle(playerid, 178.5883);
		SetCameraBehindPlayer(playerid);
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausCar[playerid] = 0;
		InAutoHaus[playerid] = 0;
		SetPlayerVirtualWorld(playerid,0);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TogglePlayerControllable(playerid,true);
		SetCarSpawn(playerid,carslot);
		UpdatePlayerCar(playerid);

	}
	}
	    if(InAutoHaus[playerid] == 4){
		if(newkeys == 16) {  //enter
		if(GetPlayerEuros(playerid) < AutoHausVier[AutohausCar[playerid]][1]) {
			format(string,sizeof(string),"Du hast nicht genug Geld! ($%d)",AutoHausVier[AutohausCar[playerid]][1]);
			SendClientMessage(playerid, Rot, string);
			return 1;
		}
		new carslot = sStats[playerid][sAutos];
		PlayerCar[playerid][carslot][cPj] = -1;
		PlayerCar[playerid][carslot][cMod1] = 0;
		PlayerCar[playerid][carslot][cMod2] = 0;
		PlayerCar[playerid][carslot][cMod3] = 0;
		PlayerCar[playerid][carslot][cMod4] = 0;
		PlayerCar[playerid][carslot][cMod5] = 0;
		PlayerCar[playerid][carslot][cMod6] = 0;
		PlayerCar[playerid][carslot][cMod7] = 0;
		PlayerCar[playerid][carslot][cMod8] = 0;
		PlayerCar[playerid][carslot][cMod9] = 0;
		PlayerCar[playerid][carslot][cMod10] = 0;
		PlayerCar[playerid][carslot][cMod11] = 0;
		PlayerCar[playerid][carslot][cMod12] = 0;
		PlayerCar[playerid][carslot][cMod13] = 0;
		PlayerCar[playerid][carslot][cMod14] = 0;
		PlayerCar[playerid][carslot][cMod15] = 0;
		PlayerCar[playerid][carslot][cMod16] = 0;
		PlayerCar[playerid][carslot][cMod17] = 0;
		PlayerCar[playerid][carslot][cLock] = 0;
		PlayerCar[playerid][carslot][cNeon] = 0;
		PlayerCar[playerid][carslot][cTuev] = 0;
		GivePlayerEuro(playerid,-AutoHausVier[AutohausCar[playerid]][1]);
		BizzInfo[5][bTill] += AutoHausVier[AutohausCar[playerid]][1];
		BizzInfo[5][bProducts] -= 80;
		sStats[playerid][sAutos] ++;
		PlayerCar[playerid][carslot][cModel] = AutoHausVier[AutohausCar[playerid]][0];
		PlayerCar[playerid][carslot][cPreis] = AutoHausVier[AutohausCar[playerid]][1];
		PlayerCar[playerid][carslot][cC1] = AutoHausVier[AutohausCar[playerid]][2];
		PlayerCar[playerid][carslot][cC2] = AutoHausVier[AutohausCar[playerid]][3];
		SetPlayerPosEx(playerid, 2363.6069,-1546.7452,-24.4922);
		SetPlayerFacingAngle(playerid, 178.5883);
		SetCameraBehindPlayer(playerid);
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausCar[playerid] = 0;
		InAutoHaus[playerid] = 0;
		SetPlayerVirtualWorld(playerid,0);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TogglePlayerControllable(playerid,true);
		SetCarSpawn(playerid,carslot);
		UpdatePlayerCar(playerid);

	}
	}
	    if(InAutoHaus[playerid] == 5){
		if(newkeys == 16) {  //enter
		if(GetPlayerEuros(playerid) < AutoHausFuenf[AutohausCar[playerid]][1]) {
			format(string,sizeof(string),"Du hast nicht genug Geld! ($%d)",AutoHausFuenf[AutohausCar[playerid]][1]);
			SendClientMessage(playerid, Rot, string);
			return 1;
		}
		new carslot = sStats[playerid][sAutos];
		PlayerCar[playerid][carslot][cPj] = -1;
		PlayerCar[playerid][carslot][cMod1] = 0;
		PlayerCar[playerid][carslot][cMod2] = 0;
		PlayerCar[playerid][carslot][cMod3] = 0;
		PlayerCar[playerid][carslot][cMod4] = 0;
		PlayerCar[playerid][carslot][cMod5] = 0;
		PlayerCar[playerid][carslot][cMod6] = 0;
		PlayerCar[playerid][carslot][cMod7] = 0;
		PlayerCar[playerid][carslot][cMod8] = 0;
		PlayerCar[playerid][carslot][cMod9] = 0;
		PlayerCar[playerid][carslot][cMod10] = 0;
		PlayerCar[playerid][carslot][cMod11] = 0;
		PlayerCar[playerid][carslot][cMod12] = 0;
		PlayerCar[playerid][carslot][cMod13] = 0;
		PlayerCar[playerid][carslot][cMod14] = 0;
		PlayerCar[playerid][carslot][cMod15] = 0;
		PlayerCar[playerid][carslot][cMod16] = 0;
		PlayerCar[playerid][carslot][cMod17] = 0;
		PlayerCar[playerid][carslot][cLock] = 0;
		PlayerCar[playerid][carslot][cNeon] = 0;
		PlayerCar[playerid][carslot][cTuev] = 0;
		GivePlayerEuro(playerid,-AutoHausFuenf[AutohausCar[playerid]][1]);
		BizzInfo[5][bTill] += AutoHausFuenf[AutohausCar[playerid]][1];
		BizzInfo[5][bProducts] -= 80;
		sStats[playerid][sAutos] ++;
		PlayerCar[playerid][carslot][cModel] = AutoHausFuenf[AutohausCar[playerid]][0];
		PlayerCar[playerid][carslot][cPreis] = AutoHausFuenf[AutohausCar[playerid]][1];
		PlayerCar[playerid][carslot][cC1] = AutoHausFuenf[AutohausCar[playerid]][2];
		PlayerCar[playerid][carslot][cC2] = AutoHausFuenf[AutohausCar[playerid]][3];
		SetPlayerPosEx(playerid, 2363.6069,-1546.7452,-24.4922);
		SetPlayerFacingAngle(playerid, 178.5883);
		SetCameraBehindPlayer(playerid);
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausCar[playerid] = 0;
		InAutoHaus[playerid] = 0;
		SetPlayerVirtualWorld(playerid,0);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TogglePlayerControllable(playerid,true);
		SetCarSpawn(playerid,carslot);
		UpdatePlayerCar(playerid);

	}
	}
	if(newkeys == KEY_ACTION) {           //Tab
		//ResetPlayer
		SetPlayerPosEx(playerid, 2363.6069,-1546.7452,-24.4922);
		SetPlayerFacingAngle(playerid, 178.5883);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetCameraBehindPlayer(playerid);
		DestroyVehicle(AutohausSCar[playerid]);
		AutohausCar[playerid] = 0;
		InAutoHaus[playerid] = 0;
		SetPlayerVirtualWorld(playerid,0);
		TextDrawHideForPlayer(playerid,CarKauf[playerid]);
		TogglePlayerControllable(playerid,true);
		Pate = 0;
		SetPVarInt(playerid, "Pate", 0);

	}
}
	//AutoScooter Arena
	if(newkeys & KEY_SPRINT && IsPlayerInRangeOfPoint(playerid,1.5,-2456.6675,2257.5745,4.9785))
	{
    	if(sStats[playerid][sWanteds] > 0)
        	return SendClientMessage(playerid, Rot, "Du kannst die Autoscooter Arena nicht mit Wanteds betreten!");
		if(sStats[playerid][sPersonalausweis] < 1) {
			SendClientMessage(playerid,Rot,"Du benötigst einen Personalausweis um Autoscooter spielen zu können!");
			return 1;
		}
		if(GetPlayerEuros(playerid) < 700) {
		    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei! (700)");
			return 1;
		}
		if(autoscooteroffen == 1)
		{
			ShowPlayerDialog(playerid,AUTOSCOOTER, DIALOG_STYLE_MSGBOX, "Autoscooter Arena", "{FFFFFF}Möchtest du die {7cfc00}Autoscooter Arena{FFFFFF} betreten? {FFFF00}(Eintritt : 700)", "Ja", "Nein");
			return 1;
		}
		else
		{
		    SendClientMessage(playerid,Rot,"Zurzeit findet kein Autoscootermatch statt!");
		    return 1;
		}
	}
	//Paintball Arena
	if(newkeys & KEY_SPRINT && IsPlayerInRangeOfPoint(playerid,1.5,-2456.6682,2304.7434,4.9844))
	{
		if(OpenPaintballl == 0)
		{
		    SendClientMessage(playerid,Rot,"Zurzeit läuft kein Paintballmatch!");
		    return 1;
   		}
   		if(PBBS == 1)
		{
		    SendClientMessage(playerid,Rot,"Es ist schon ein Paintballmatch im gange!");
		    return 1;
		}
    	if(sStats[playerid][sWanteds] > 0)
        	return SendClientMessage(playerid, Rot, "Du kannst die Paintball Arena nicht mit Wanteds betreten!");
   		if(PlayerPaintballing[playerid] != 0) {
			SendClientMessage(playerid,Rot,"Du bist schon in einem Paintballmatch!");
 			return 1;
  		}
  		if(sStats[playerid][sPersonalausweis] < 1) {
			SendClientMessage(playerid,Rot,"Du benötigst einen Personalausweis um Paintball spielen zu können!");
			return 1;
		}
		if(GetPlayerEuros(playerid) < 800) {
		    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei! (800)");
			return 1;
		}
		ShowPlayerDialog(playerid,PAINTBALL, DIALOG_STYLE_MSGBOX, "Paintball Arena", "{FFFFFF}Möchtest du die {7cfc00}Paintball Arena{FFFFFF} betreten? {FFFF00}(Eintritt : 800)", "Ja", "Nein");
	}
	//Journey
	if(newkeys == 16)
	{
	    if(Injourney[playerid] > 0)
	    {
			new Float:X,Float:Y,Float:Z;
			GetVehiclePos(Injourney[playerid], X, Y, Z);
			SetPlayerPosEx(playerid, X+4, Y, Z);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid,0);
			Injourney[playerid] = 0;
		}
	}
	//Pfandsuchen
	if(newkeys & KEY_SPRINT)
	{
	    if(IsAtPfand(playerid))
		{
			if(Pfand > 0)
			{
				format(string, sizeof(string), "Du hast %d Pfandflaschen aus dem Müll gekramt!", Pfand);
				SendClientMessage(playerid, Weiß, string);
				SendClientMessage(playerid,Gelb2,"Du kannst die gefundenen Pfandflaschen im 24/7 mit /sellpfand verkaufen!");
				sStats[playerid][sPfand] += Pfand;
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				Pfand = 0;
				return 1;
			}
			else
			{
				format(string, sizeof(string), "Du hast nichts in der Mülltonne gefunden!", Pfand);
				SendClientMessage(playerid, Rot, string);
				PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				return 1;
			}
		}
	}
	//John Schwarzmarkt
	if(newkeys & KEY_SPRINT)
	{
		if(!strcmp(GetName(bot),"John",true))
		{
 			if(sStats[playerid][sSpielstunden] < 3)
			{
				SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du benötigst mind. 5 Spielstunden um mit mir interagieren zu können!");
				return 1;
			}
			if (IsAStaat(playerid))
			{
				SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Verkaufen? Nein ich verkaufe nichts!");
				return 1;
			}
			ShowPlayerDialog(playerid, SCHWARZMARKT, DIALOG_STYLE_LIST, "Schwarzmarkt","{00AA00}1. {FFFFFF}Drogensamen {00AA00}1000\n{00AA00}2. {FFFFFF}Drogendünger {00AA00}2000\n{00AA00}3. {FFFFFF}Gefälschter Waffenschein {00AA00}5000\n{00AA00}4. {FFFFFF}Waffen\n{00AA00}5. {FFFFFF}Maske {00AA00}6000\n{00AA00}6. {FFFFFF}Dietrichpaket(10x) {00AA00}800", "Kaufen", "Abbrechen");
		}
	}
	//Nutte SM
	//Beenden
	if(newkeys & KEY_JUMP)
	{
		if(GetPVarInt(playerid, "SMSpiel") == 1)
		{
			if(!strcmp(GetName(bot),"Dominiquee",true))
			{
				Kick(bot);
				ConnectNPC("Dominique","nutte1");
    			SetTimerEx("ClearAnimationss",641,false,"d",playerid);
			    TogglePlayerControllable(playerid, true);
				ClearChat(playerid);
				SendClientMessage(playerid,Weiß,"Nach dem S-M Szenario fühlst du dich wunderbar und strahlst vor Glück!");
				SendClientMessage(playerid,Weiß,"Deine Gesundheit wurde auf 120.0 Leben erhöht!");
				SetPlayerHealth(playerid,120.0);
				SetPlayerPosEx(playerid,-2617.7407,2436.3701,15.0689);
				SetPlayerFacingAngle(playerid,64.3041);
				SetCameraBehindPlayer(playerid);
				UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{7fff00}Frei{FFFFFF}| <--");
				SetPVarInt(playerid,"SMSpiel",0);
				SetPlayerInterior(playerid,0);
				nutte = 0;
			}
		}
	}
	//Schlagen
	if(newkeys & KEY_SPRINT)
	{
		if(GetPVarInt(playerid, "SMSpiel") == 1)
		{
			if(!strcmp(GetName(bot),"Dominiquee",true))
			{
				new str[5][170] =
				{
					{"Dominique: {FFFF00}Aua."},
					{"Dominique: {FFFF00}Oho nicht so schnell kleiner <3."},
					{"Dominique: {FFFF00}Arghh das schmerzt."},
					{"Dominique: {FFFF00}Können wir nicht bald aufhören?"},
					{"Dominique: {FFFF00}Weiter Baby weiter"}
				};
					ApplyAnimation(playerid, "MISC","bitchslap", 4.0, 0, 1, 1, 1, 0, 1);
					PlayerPlaySound(playerid, 1190, 0.0, 0.0, 0.0);
					ApplyAnimation(bot,"SNM","SPANKINGW",4.1,0,1,1,1,1);
					SetPlayerChatBubble(bot,str[random(5)],Weiß,35.0,3000);
			}
		}
	}
	//Martin Interagieren 24/7 Shop
	if(newkeys & KEY_SPRINT)
	{
		if(!strcmp(GetName(bot2),"Martin",true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) { return 1; }
	    	if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
			if(BizzInfo[1][bProducts] < 25)
			{
				SendClientMessage(playerid, Rot,"{FFFFFF}Martin: {ff0000}Tut mir leid, unser Lager ist leer!");
				return 1;
			}
			if (sStats[playerid][sWanteds] > 0)
			{
				SendClientMessage(playerid, Rot,"{FFFFFF}Martin: {ff0000}Tut mir leid, du wirst schon von der Polizei gesucht, du kannst hier im Laden nix kaufen!");
				return 1;
			}
			if(Robber[playerid] == 1)
			{
				SendClientMessage(playerid, Rot,"FFFFFF}Martin: {ff0000}Bist du bescheuert? Du kannst hier nix kaufen, du hast den Laden ausgeraubt!");
				return 1;
			}
			if (robbing == 1)
			{
				SendClientMessage(playerid, Rot,"{FFFFFF}Martin: {ff0000}Tut mir leid, du kannst hier nix kaufen, der Laden wird gerade ausgeraubt!");
				return 1;
			}
 			ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
		}
	}
	//Eddy Interagieren
	if(newkeys & KEY_SPRINT)
	{
		if(!strcmp(GetName(bot),"Eddy",true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) { return 1; }
	    	if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
	    	if(sStats[playerid][sLevel] < 4)
			{
				SendClientMessage(playerid,Rot,"{FFFFFF}Eddy: {ff0000}Tut mir leid, du musst mind. Level 4 sein um einen Wohnwagen kaufen zu können!");
				return 1;
			}
  			if(sStats[playerid][sWohnwagen] > 0)
			{
				SendClientMessage(playerid,Rot,"{FFFFFF}Eddy: {ff0000}Tut mir leid, du hast schon einen Wohnwagen!");
				return 1;
			}
		    if(sStats[playerid][sAutoschein] != 1)
		    {
		        SendClientMessage(playerid,Rot,"{FFFFFF}Eddy: {ff0000}Tut mir leid, du benötigst einen Führerschein um einen Wohnwagen kaufen zu können!");
		        return 1;
		    }
		    if(sStats[playerid][sPersonalausweis] < 1)
		    {
		        SendClientMessage(playerid,Rot,"{FFFFFF}Eddy: {ff0000}Tut mir leid, du benötigst einen Personalausweis um einen Wohnwagen kaufen zu können!");
				return 1;
		    }
		    if(GetPlayerEuros(playerid) < 45000)
		    {
		        SendClientMessage(playerid,Rot,"{FFFFFF}Eddy: {ff0000}Tut mir leid, du hast nicht genug Geld dabei um einen Wohnwagen kaufen zu können (45.000)!");
				return 1;
		    }
		    if(Pate == 1)
		    {
      			SendClientMessage(playerid,Rot,"{FFFFFF}Eddy: {ff0000}Kleinen Augenblick bitte . . .");
				return 1;
		    }
		    Pate = 1;
		    SetPVarInt(playerid, "Pate", 1);
		    ShowPlayerDialog(playerid, EDDY, DIALOG_STYLE_MSGBOX, "Wohnwagenverkauf","{FFFFFF}Möchtest du einen Wohnwagen mit möbelierten Innenraum für {00AA00}45.000{FFFFFF} kaufen?", "Ja", "Nein");
		}
	}
	//Autopate Interagieren
	if(newkeys & KEY_SPRINT)
	{
		if(!strcmp(GetName(bot2),"AutoPate",true))
		{
  			if(IsPlayerInAnyVehicle(playerid)) { return 1; }
	    	if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
  			if(Pate == 1)
		    {
		        SendClientMessage(playerid,Weiß,"{FFFF00}Autopate: {FFFFFF}Beruhige dich Ollum, siehste nicht das ich grade beschäftigt bin!");
		        return 1;
		    }
	    	if(sStats[playerid][sSpielstunden] < 1)
			{
				SendClientMessage(playerid,Rot,"{FFFF00}Autopate: {FFFFFF}Tut mir leid, du benötigst mind. 1 Spielstunde um dir ein Fahrzeug kaufen zu können!");
				return 1;
			}
			if(BizzInfo[5][bProducts] < 80)
			{
				SendClientMessage(playerid,Rot,"{FFFF00}Autopate: {FFFFFF}Tut mir leid, ich habe zurzeit keine Fahrzeuge mehr!");
				return 1;
			}
			if(sStats[playerid][sAutos] == 1 && sStats[playerid][sLevel] < 5) {
				SendClientMessage(playerid,Weiß,"{FFFF00}Autopate: {FFFFFF}Für dein zweites Fahrzeug musst du mindestens Level 5 sein!");
				return 1;
			}
			if(sStats[playerid][sAutos] == 2 && sStats[playerid][sLevel] < 6 && sStats[playerid][sPremium] < 1) {
				SendClientMessage(playerid,Weiß,"{FFFF00}Autopate: {FFFFFF}Für dein drittes Fahrzeug musst du mindestens Level 6 sein und Premium Bronze haben!");
				return 1;
			}
			if(sStats[playerid][sAutos] == 3 && sStats[playerid][sLevel] < 8 && sStats[playerid][sPremium] < 2) {
				SendClientMessage(playerid,Weiß,"{FFFF00}Autopate: {FFFFFF}Für dein drittes Fahrzeug musst du mindestens Level 8 sein und Premium Silber haben!");
				return 1;
			}
			if(sStats[playerid][sAutos] == 4 && sStats[playerid][sLevel] < 10 && sStats[playerid][sPremium] < 3) {
				SendClientMessage(playerid,Weiß,"{FFFF00}Autopate: {FFFFFF}Für dein drittes Fahrzeug musst du mindestens Level 10 sein und Premium Gold haben!");
				return 1;
			}
			if(sStats[playerid][sAutos] == 5) {
				SendClientMessage(playerid,Weiß,"{FFFF00}Autopate: {FFFFFF}Du kannst keine weiteren Fahrzeuge erwerben!");
				return 1;
			}
			Pate = 1;
			SetPVarInt(playerid, "Pate", 1);
		    ShowPlayerDialog(playerid, PATE1, DIALOG_STYLE_LIST, "Der Autopate || Fahrzeugdienst","{00AA00}1. {FFFFFF}Normale Fahrzeuge\n{00AA00}2. {FFFFFF}Offroad\n{00AA00}3. {FFFFFF}Sportwagen\n{00AA00}4. {FFFFFF}Zweiräder\n{00AA00}5. {FFFFFF}Sonstiges", "Auswählen", "Abbrechen");
		}
	}
	//Ammunation Interagieren
	if(newkeys & KEY_SPRINT)
	{
		if(!strcmp(GetName(bot),"Charlie",true))
		{
  			if(IsPlayerInAnyVehicle(playerid)) { return 1; }
	    	if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
			if(sStats[playerid][sWaffenschein] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast keinen Waffenschein!");
				return 1;
			}
				ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
  		}
	}
	//Nutte Interagieren
	if(newkeys & KEY_SPRINT)
	{
		if(!strcmp(GetName(bot),"Dominique",true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) { return 1; }
	    	if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
  			if(nutte == 1)
		    {
		        SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Tut mir leid, ich bin gerade beschäftigt!");
		        return 1;
		    }
	    	if(sStats[playerid][sSpielstunden] < 3)
			{
				SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Tut mir leid, du benötigst mind. 3 Spielstunden um mit mir interagieren zu können!");
				return 1;
			}
		    if(sStats[playerid][sGeschlecht] != 1)
		    {
		        SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Tut mir leid, ich biete meinen Service nur Männern an!");
		        return 1;
		    }
		    if(sStats[playerid][sAlter] < 18)
		    {
		        SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Tut mir leid, ich kann nur 18 Jährige beglücken!");
				return 1;
		    }
		    if(sStats[playerid][sKrankheit] > 0)
		    {
		        SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Du bist Krank, werd erstmal gesund bevor du meine Dienstleistung in Anspruch nimmst!");
				return 1;
		    }
		    nutte = 1;
		    ShowPlayerDialog(playerid, NUTTE, DIALOG_STYLE_LIST, "Prostituierten Service","{00AA00}1. {FFFFFF}Küssen {00AA00}(100)\n{00AA00}2. {FFFFFF}Blowjob {00AA00}(500)\n{00AA00}3. {FFFFFF}SM Spielchen {00AA00}(700)\n{00AA00}5. {FFFFFF}Ornanieren {00AA00}(300)", "Auswählen", "Abbrechen");
		}
	}
	//DJ Job
	if(newkeys & KEY_SPRINT)
	{
		if(GetPVarInt(playerid, "DJMusik") == 1 && sStats[playerid][sJob] == 2)
		{
			new anm = random(7);
			switch(anm)
			{
				case 0:ApplyAnimation(playerid,"RIOT", "RIOT_CHANT",4.1,1,1,1,1,0,1);
				case 1:ApplyAnimation(playerid, "SCRATCHING","scdlulp", 4.0, 1, 1, 1, 1, 0, 1);
				case 2:ApplyAnimation(playerid, "SCRATCHING","sclng_l", 4.0, 1, 1, 1, 1, 0, 1);
				case 3:ApplyAnimation(playerid, "SCRATCHING","scdrulp", 4.0, 1, 1, 1, 1, 0, 1);
				case 4:ApplyAnimation(playerid,"RIOT", "RIOT_CHANT",4.1,1,1,1,1,0,1);
				case 5:ApplyAnimation(playerid, "DANCING","dnce_M_b", 4.0, 1, 1, 1, 1, 0, 1);
				case 6:ApplyAnimation(playerid, "SCRATCHING","sclng_l", 4.0, 1, 1, 1, 1, 0, 1);
			}
		}
	}
	//Feuerwehr Baum fällen
	if(newkeys & KEY_FIRE && baumeinsatz == 1 && IsAtBaum(playerid))
	{
		if(IsAFW(playerid))
		{
			if(GetPVarInt(playerid, "FDienst") == 1)
			{
				if(GetPlayerWeapon(playerid) == 9 && IsAtBaum(playerid))
				{
					SetPVarInt(playerid,"Baumschlag",GetPVarInt(playerid, "Baumschlag")+1);
					format(string, sizeof(string), "Verbliebene Schläge bis der Baum abgeholzt ist - [%d/30]", GetPVarInt(playerid, "Baumschlag"));
					SendClientMessage(playerid,Gelb2,string);
					if(GetPVarInt(playerid, "Baumschlag") >= 30)
					{
						DeletePVar(playerid,"Baumschlag");
						baumeinsatz = 0;
						DestroyObject(baum1);
						DestroyObject(baum2);
						DestroyObject(baum3);
						PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
						ClearChat(playerid);
						SendClientMessage(playerid,Weiß,"Du hast den Baum erfolgreich abgeholzt!");
						SendClientMessage(playerid,Gelb2,"Und erhältst somit eine +Prämie für den nächsten Zahltag!");
						sStats[playerid][sPreamie] += 250;
						format(string, sizeof(string), "* Feuerwehrmann %s hat den zu fallenden Baum erfolgreich gefällt!", GetName(playerid));
						SendRadioMessage(2, Gelb2, string);
					}
				}
			}
		}
	}
	//NO-DM Zone
	if(newkeys & KEY_FIRE)
	{
		if(IsPlayerInZonee(playerid,-2639.2, 2230.474, -2592.488, 2277.186))
		{
			if(GetPVarInt(playerid, "NODM") < 5)
			{
		        SetPVarInt(playerid, "NODM", GetPVarInt(playerid, "NODM")+1);
		        format(string, sizeof(string), "Du hast %d/5 Schläge gemacht ab dem 5 Schlag erhälst du einen Kick. [NO DM-ZONE Deathmatch]", GetPVarInt(playerid, "NODM"));
		        SendClientMessage(playerid, Gelb, string);
		        TogglePlayerControllable(playerid,false);
		        TogglePlayerControllable(playerid,true);
		        SetPlayerArmedWeapon(playerid,0);
		    }
	   	    if(GetPVarInt(playerid, "NODM") >= 5)
   			{
		        format(string, sizeof(string), "** Der Spieler %s[%d] wurde vom Server gekickt. Grund: NO DM-ZONE Deathmatch.", GetName(playerid),playerid);
		        SendClientMessage(playerid, Rot, "Du wurdest vom Server gekickt. Grund: NO-DM Zone Deathmatch.");
		        SendClientMessageToAll(Rot, string);
		        TogglePlayerControllable(playerid, false);
		        SetPlayerArmedWeapon(playerid,0);
		        SaveSpieler(playerid);
		        Kick(playerid);
	    	}
		}
	}
	//Mechaniker Towtruck
	if ((newkeys==KEY_ACTION)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER) && sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1)
	{
		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		{
			new Float:pX,Float:pY,Float:pZ;
			GetPlayerPos(playerid,pX,pY,pZ);
			new Float:vX,Float:vY,Float:vZ;
			new Found=0;
			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if  ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if  (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
					AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
				}
			}
			if  (!Found)
			{
			}
		}
	}
	//Tanksystem
	if (HOLDING( KEY_HANDBRAKE ))
	{
		new carid = GetPlayerVehicleID(playerid);
		if(IsAtTanke(playerid) && IsPlayerInAnyVehicle(playerid))
		{
			if(GetVehicleModel(vid) == 481)
			{
				SendClientMessage(playerid,Rot,"Du kannst dein Fahrrad nicht betanken!");
				return 1;
			}
			if(VehicleStarted[vid] == 1)
			{
				SendClientMessage(playerid,Rot,"Du musst deinen Motor ausschalten, bevor du tanken kannst!");
				return 1;
			}
			if(MotorKaputt[vid] == 1)
			{
				SendClientMessage(playerid,Rot,"Dein Motor ist kaputt du kannst jetzt nicht tanken!");
				return 1;
			}
			if(BizzInfo[0][bProducts] <= 0)
			{
				SendClientMessage(playerid,Rot,"Die Tankstelle hat kein Benzin mehr!");
				return 1;
			}
			if(Tankmenge[vid] == GasMax[GetVehicleModel(vid)-400])
			{
				SendClientMessage(playerid,Rot,"Dein Fahrzeugtank ist voll!");
				return 1;
			}
   			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid,Rot,"Du bist nicht der Fahrer des Fahrzeuges!");
			if(IsPlayerInRangeOfPoint(playerid,9.0,2530.9690,2712.4160,10.8203))
			{
			    SetPVarInt(playerid,"ATanke",1);
			}
			if(IsACopCar(carid))
			{
				if(GetPlayerEuros(playerid) < BizzInfo[0][bEntranceCost] && !IsACopCar(carid) && Staatskasse < BizzInfo[0][bEntranceCost])
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei um zu tanken!");
					return 1;
				}
			}
			if(IsSupportCar(carid))
			{
			    Tanken(playerid);
			    return 1;
			}
			if(GetPlayerEuros(playerid) < BizzInfo[0][bEntranceCost] && !IsACopCar(carid))
			{
				SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei um zu tanken!");
				return 1;
			}
			Tanken(playerid);
		}
	}
	//Quest 3
	if(newkeys & KEY_FIRE && sStats[playerid][sQuest] == 6 && GetPVarInt(playerid, "Kamera") == 1 && GetPlayerWeapon(playerid) == 43 && GetPVarInt(playerid, "Schuss") > 0)
	{
		if(IsPlayerInZonee(playerid,-2792.539, 61.49159, -2695.972, 168.0056))
		{
		    if(GetPVarInt(playerid, "Fotos") < 5)
		    {
			    ClearChat(playerid);
			    PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
			    SetPVarInt(playerid,"Fotos",GetPVarInt(playerid, "Fotos")+1);
				format(string, sizeof(string), "Foto geschossen %d/5.", GetPVarInt(playerid, "Fotos"));
				SendClientMessage(playerid,Weiß, string);
				SetPVarInt(playerid,"Schuss",GetPVarInt(playerid, "Schuss")-1);
			}
   			if(GetPVarInt(playerid, "Fotos") == 5)
		    {
			    ClearChat(playerid);
				SendClientMessage(playerid,Weiß,"Du hast alle Fotos erfolgreich geschossen, bringe diese zurück nach Jack (/fotos).");
				ResetPlayerWeapons(playerid);
			}
			if(GetPVarInt(playerid, "Schuss") <= 0)
		    {
				ClearChat(playerid);
				SendClientMessage(playerid,Rot,"Quest fehlgeschlagen !");
				SetPlayerHealth(playerid,0.0);
			}
		}
	}
	//Schiff Quest
	if(GetPVarInt(playerid,"JackMission") == 1 && newkeys & KEY_FIRE && sStats[playerid][sQuest] == 10 && GetPlayerWeapon(playerid) == 31)
	{
		new Float:xP,Float:xY,Float:xZ;
		GetPlayerPos(bot2, xP, xY, xZ);
		if(IsPlayerAimingAt(playerid, xP,xY,xZ, 16))
		{
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~g~Erledigt!", 1300, 5);
		    Kick(bot);
		}
	}
	//Quest 2
	if(newkeys & KEY_FIRE && sStats[playerid][sQuest] == 4 && GetPVarInt(playerid, "SniperQuest") == 1 && GetPlayerWeapon(playerid) == 34)
	{
		if(IsPlayerAimingAt(playerid, 1284.7784,-1242.2896,13.5584, 75))
		{
			if(ddealer == 1)
			{
			    SendClientMessage(playerid,Rot,"Bitte warte bis der Drogendealer wieder lebt, jemand anders macht gerade schon diese Quest!");
			    GivePlayerWeaponEx(playerid,34,1);
			    return 1;
			}
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~g~Schulterschuss!", 1300, 5);
			ResetPlayerWeapons(playerid);
			ClearChat(playerid);
			SendClientMessage(playerid,Weiß,"Schnapp dir schnell den Koffer und bringe Jack diesen zurück!");
			Koffer[playerid] = CreatePickup(1210, 2, 1286.8862,-1240.9364,13.5736);
			PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  			for(new i = 0; i < MAX_PLAYERS; i++)
 			{
				if(!strcmp(GetName(i),"DDealer",true))
				{
				    ddealer = 1;
				    ApplyAnimation(i, "CRACK","crckdeth1", 4.0, 1, 1, 1, 1, 1, 1);
				}
			}
		}
		else
		{
			if(GetPVarInt(playerid, "Quest") == 4)
			{
			    ResetPlayerWeapons(playerid);
	  			ClearChat(playerid);
			   	SendClientMessage(playerid, Weiß, "Nachricht von Jack:");
			    SendClientMessage(playerid, COLOR_YELLOW, "Ich habe dir hier ein kleines Snipergewehr hinterlassen mit 5 Schuss!");
			    SendClientMessage(playerid, COLOR_YELLOW, "Dort unten steht der Typ mit dem grauen Sweatshirt! Leg ihn um und bring den Koffer bitte zu mir");
			    SendClientMessage(playerid, COLOR_ORANGE, "Info: Sofern du den Koffer hast, kehre nach Jack zurück und benutze /kofferback!");
			    GivePlayerWeaponEx(playerid,34,5);
			    SetPVarInt(playerid,"SniperQuest",1);
			    SetPVarInt(playerid,"Quest",0);
			    SetPlayerPosEx(playerid,1284.0806,-1242.2904,13.5584);
			    SetPlayerFacingAngle(playerid,273.2629);
				return 1;
			}
		}
	}
	//Slotmachine
	if(newkeys & KEY_SPRINT)
	{
		if(Gambling[playerid] == G_STATE_READY)
		{
			new money = GetPlayerEuros(playerid);
			if(Bet[playerid] > money+Balance[playerid])
			{
				GameTextForPlayer(playerid,"~r~Du hast nicht genug Geld!",5000,4);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				return 1;
			}

			if(Balance[playerid] - Bet[playerid] < 0)
			{
				GameTextForPlayer(playerid,"~r~Dein Restgeld ist zu wenig!",5000,4);
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				return 1;
			}

			SlotCounter[playerid] = 30+random(18);
			SlotTimer[playerid] = SetTimerEx("Gambler",GAMBLE_TIMER,1,"d",playerid);
			Gambling[playerid] = G_STATE_GAMBLING;

			Balance[playerid]-=Bet[playerid];

			new prefix[4];
			if(Balance[playerid] == 0) strcat(prefix,"~y~");
			if(Balance[playerid]  > 0) strcat(prefix,"~g~");
			if(Balance[playerid]  < 0) strcat(prefix,"~r~");

			UpdateBetText(playerid);

			TextDrawHideForPlayer(playerid,ReadyText);
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(Gambling[playerid] == G_STATE_READY)
		{
			ExitPlayerFromSlotMachine(playerid);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid,0);
		}
	}
	if(newkeys & KEY_JUMP)
	{
		if(Gambling[playerid] == G_STATE_READY)
		{
			Bet[playerid] = GetNextValidBet(Bet[playerid]);
			UpdateBetText(playerid);
			PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		}
	}
	//Waffenscheinprüfung durchgefallen wenn Deagle
	if(newkeys & KEY_FIRE && WaffenscheinStep[playerid] >= 0 && WaffenscheinSchuss[playerid] <= 0 && Getroffen[playerid] <= 5 && GetPVarInt(playerid, "InWschein") == 1)
	{
		//Durchgefallen
		ClearChat(playerid);
		SendClientMessage(playerid,Gelb2,"Du bist leider durchgefallen, da du es nicht geschafft hast alle Atrappen zu treffen!");
		SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Waffenschein Preises zurück bekommen!");
		ResetPlayerWeapons(playerid);
		GivePlayerEuro(playerid,5000);
		sStats[playerid][sWaffenschein] = 0;
		SetPVarInt(playerid, "InWschein", 0);
		ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, 0);
		DeletePlayer3DTextLabel(playerid,Target);
		Getroffen[playerid] = 0;
		WaffenscheinSchuss[playerid] = 0;
		WaffenscheinStep[playerid] = 0;
		Targets[playerid] = 0;
		return 1;
	}
	if(newkeys & KEY_FIRE && GetPlayerWeapon(playerid) == 24 && WaffenscheinStep[playerid] == 1 && WaffenscheinSchuss[playerid] != 0 && GetPVarInt(playerid, "InWschein") == 1)
	{
	    WaffenscheinSchuss[playerid] -= 1;
		if(IsPlayerAimingAt(playerid, 288.8384,-129.0957,1005.0625, 2.8))
		{
			Getroffen[playerid] += 1;
			WaffenscheinStep[playerid] = 2;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~g~Volltreffer!", 1300, 5);
			DeletePlayer3DTextLabel(playerid,Target);
			Target = CreatePlayer3DTextLabel(playerid,"--> Ziel <--",0x0C9BCBFF,286.2498,-135.0644,1004.0625+1,25.0);
		}
		else
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~Leider nicht getroffen!", 1300, 5);
		}
		return 1;
	}
	if(newkeys & KEY_FIRE && GetPlayerWeapon(playerid) == 24 && WaffenscheinStep[playerid] == 2 && WaffenscheinSchuss[playerid] > 0 && GetPVarInt(playerid, "InWschein") == 1)
	{
	    WaffenscheinSchuss[playerid] -= 1;
		if(IsPlayerAimingAt(playerid, 286.2498,-135.0644,1005.0625, 3.4))
		{
			Getroffen[playerid] += 1;
			WaffenscheinStep[playerid] = 3;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~g~Volltreffer!", 1300, 5);
			DeletePlayer3DTextLabel(playerid,Target);
			Target = CreatePlayer3DTextLabel(playerid,"--> Ziel <--",0x0C9BCBFF,282.0020,-139.0471,1004.0625+1,25.0);
		}
		else
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~Leider nicht getroffen!", 1300, 5);
		}
		return 1;
	}
	if(newkeys & KEY_FIRE && GetPlayerWeapon(playerid) == 24 && WaffenscheinStep[playerid] == 3 && WaffenscheinSchuss[playerid] > 0 && GetPVarInt(playerid, "InWschein") == 1)
	{
	    WaffenscheinSchuss[playerid] -= 1;
		if(IsPlayerAimingAt(playerid, 282.0020,-139.0471,1004.0625, 4.2))
		{
			Getroffen[playerid] += 1;
			WaffenscheinStep[playerid] = 4;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~g~Volltreffer!", 1300, 5);
			DeletePlayer3DTextLabel(playerid,Target);
			Target = CreatePlayer3DTextLabel(playerid,"--> Ziel <--",0x0C9BCBFF,276.8208,-130.7698,1004.0625+1,25.0);
		}
		else
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~Leider nicht getroffen!", 1300, 5);
		}
		return 1;
	}
	if(newkeys & KEY_FIRE && GetPlayerWeapon(playerid) == 24 && WaffenscheinStep[playerid] == 4 && WaffenscheinSchuss[playerid] > 0 && GetPVarInt(playerid, "InWschein") == 1)
	{
	    WaffenscheinSchuss[playerid] -= 1;
		if(IsPlayerAimingAt(playerid, 276.8208,-130.7698,1004.0625, 6.2))
		{
			Getroffen[playerid] += 1;
			WaffenscheinStep[playerid] = 5;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~g~Volltreffer!", 1300, 5);
			DeletePlayer3DTextLabel(playerid,Target);
			Target = CreatePlayer3DTextLabel(playerid,"--> Ziel <--",0x0C9BCBFF,273.2476,-137.7258,1004.0625+1,45.0);
		}
		else
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~Leider nicht getroffen!", 1300, 5);
		}
		return 1;
	}//Ende
	if(newkeys & KEY_FIRE && GetPlayerWeapon(playerid) == 24 && WaffenscheinStep[playerid] == 5 && WaffenscheinSchuss[playerid] > 0 && GetPVarInt(playerid, "InWschein") == 1)
	{
	    WaffenscheinSchuss[playerid] -= 1;
		if(IsPlayerAimingAt(playerid, 273.2476,-137.7258,1004.0625, 7.3))
		{
			Getroffen[playerid] += 1;
			WaffenscheinStep[playerid] = 0;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~g~Volltreffer!", 1300, 5);
			DeletePlayer3DTextLabel(playerid,Target);
			SetNachWaffenP(playerid);
		}
		else
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~Leider nicht getroffen!", 1300, 5);
		}
		return 1;
	}
	//Anti-Waffen Cheat
	if(newkeys & KEY_FIRE && (!noacheat))
	{
		if(Spawned[playerid])
		{
			static weapon;
			weapon = GetPlayerWeapon(playerid);
			if(!PlayerWeapons[playerid][weapon] && weapon != 40 && weapon != 0)
			{
				if(sStats[playerid][sAdminlevel] > 0)
				{
					format(string, sizeof(string), "Warnung: %s[%d] ist im Verdacht Waffen zu cheaten!", GetName(playerid), playerid);
					SendAdminMessage(Rot, string);
					ResetPlayerWeapons(playerid);
				}
				else
				{
					format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Waffen Cheat", GetName(playerid));
					SendClientMessageToAll(Rot, string);
					TogglePlayerControllable(playerid, false);
					ResetPlayerWeapons(playerid);
					//Loggen
					format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gebannt. Grund: Waffenhack",day,month,year,hour,minute,second,GetName(playerid));
					CheatLog(string);
					//Bannen
					SaveSpieler(playerid);
					BanEx(playerid, "Waffen Cheat");
				}
			}
		}
	}
	//Autoradio
	if(IsPlayerInAnyVehicle(playerid) && VehicleStarted[vid] == 1 && MotorKaputt[vid] == 0 &&  GetVehicleModel(vid) != 481 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(newkeys & KEY_YES)
		{
			if(GetPVarInt(playerid, "InFschein") > 0 || GetPVarInt(playerid, "InMschein") > 0 || GetPVarInt(playerid, "InBschein") > 0 || GetPVarInt(playerid, "InFLschein") > 0 || GetPVarInt(playerid, "InTschein") > 0)
			{
			    SendClientMessage(playerid,Rot,"Während der Prüfung kannst du dein Radio nicht verstellen!");
			    return 1;
			}
				new vehicleid = GetPlayerVehicleID(playerid),
				newstation = v_VehicleInfo[vehicleid][RadioPlaying] + 1;
				if(newstation == RadioCount) newstation = 0;
				SetRadioStation(vehicleid,newstation);
				return 1;
		}
		else if(newkeys & KEY_NO)
		{
			if(GetPVarInt(playerid, "InFschein") > 0 || GetPVarInt(playerid, "InMschein") > 0 || GetPVarInt(playerid, "InBschein") > 0 || GetPVarInt(playerid, "InFLschein") > 0 || GetPVarInt(playerid, "InTschein") > 0)
			{
			    SendClientMessage(playerid,Rot,"Während der Prüfung kannst du dein Radio nicht verstellen!");
			    return 1;
			}
				new vehicleid = GetPlayerVehicleID(playerid),newstation = v_VehicleInfo[vehicleid][RadioPlaying] - 1;
				if(newstation == -1) newstation = RadioCount - 1;
				SetRadioStation(vehicleid,newstation);
				return 1;
		}
	}
	//Licht System
	if(newkeys & KEY_FIRE && IsPlayerInAnyVehicle(playerid) && MotorKaputt[vid] == 0 && GetVehicleModel(vid) != 481 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleStarted[vid] == 1)
	{
		if(VehicleStarted[vid] == 0)
		{
		    SendClientMessage(playerid,Rot,"Bitte starte zuerst deinen Motor!");
		    return 1;
		}
		if(VehicleLights[vid] == 0)
		{
		    VehicleLights[vid] = 1;
			SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Licht ~r~an!", 2000, 5);
			return 1;
		}
		else
		{
		    VehicleLights[vid] = 0;
		    SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Licht ~r~aus!", 2000, 5);
		    return 1;
		}
	}
	//Motor System
	if (newkeys & KEY_SUBMISSION && IsPlayerInAnyVehicle(playerid) && MotorKaputt[vid] == 0 && GetVehicleModel(vid) != 481 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(Tankmenge[GetPlayerVehicleID(playerid)] <= 0)
	    {
			SendClientMessage(playerid,Rot,"Du kannst den Motor dieses Fahrzeuges nicht starten, der Tank ist leer!");
	        return 1;
	    }
		if(engine == VEHICLE_PARAMS_ON)
		{
			VehicleStarted[vid] = 0;
			SetRadioStation(GetPlayerVehicleID(playerid),0);
			format(string, sizeof(string), "* %s hat den Motor seines Fahrzeuges ausgeschaltet!", GetName(playerid));
			ProxDetector(5.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessage(playerid,Rot,"Du hast deinen Motor ausgeschaltet!");
			GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Motor ~r~aus!", 2000, 5);
			HideSpeedometer(playerid);
			return 1;
		}
		else
		{
			new vehicleid = GetPlayerVehicleID(playerid);
		    new Float:vhealth;
	    	GetVehicleHealth(vehicleid,vhealth);
			if(vhealth >= 200)
			{
				//Towtruck Nachricht
		 		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525 && sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1)
	  			{
	  			    SetTimerEx("TowtruckAnzeige",941,false,"i",playerid);
	  			}
				//Helmsystem
				if(IsAHelmBike(GetPlayerVehicleID(playerid)) && sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 0)
				{
					SetPlayerHelm(playerid);
					SetPVarInt(playerid, "Helm", 1);
				}
    			if(!IsABoat(vid) && !IsAPlane(vid))
	   			{
					PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motoryes.wav");
				}
				VehicleStarted[vid] = 1;
				format(string, sizeof(string), "* %s hat den Motor seines Fahrzeuges erfolgreich gestartet!", GetName(playerid));
				ProxDetector(5.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid,Gruen,"Du hast den Motor erfolgreich gestartet!");
				GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Motor ~g~an!", 2000, 5);
				ShowSpeedometer(playerid);
				UpdateSpeedometer(playerid);
				//Tanksystem
				if(IsABike(GetPlayerVehicleID(playerid)))
				{
					KillTimer(timer2[playerid]);
					timer2[playerid] = SetTimerEx("TankTimer",50231,true,"i",playerid);
				}
				else
				{
					KillTimer(timer2[playerid]);
					timer2[playerid] = SetTimerEx("TankTimer",25169,true,"i",playerid);
				}
				return 1;
			}
			else
			{
			    new rand = random(7);
				if(rand < 3)
				{
				    if(!IsABoat(vid) && !IsAPlane(vid))
		   			{
				    	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motorno.wav");
				    }
					VehicleStarted[vid] = 0;
					format(string, sizeof(string), "* %s versucht den Motor seines Fahrzeuges zu starten!", GetName(playerid));
					ProxDetector(5.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,Rot,"Starten des Motors fehlgeschlagen!");
					return 1;
				}
				else
				{
    				if(!IsABoat(vid) && !IsAPlane(vid))
		   			{
				    	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motorno.wav");
				    }
					//Towtruck Nachricht
			 		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525 && sStats[playerid][sJob] == 1 && GetPVarInt(playerid, "MechaDienst") == 1)
		  			{
		  			    SetTimerEx("TowtruckAnzeige",991,false,"i",playerid);
		  			}
					//Helmsystem
					if(IsAHelmBike(GetPlayerVehicleID(playerid)) && sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 0)
					{
						SetPlayerHelm(playerid);
						SetPVarInt(playerid, "Helm", 1);
					}
	    			if(!IsABoat(vid) && !IsAPlane(vid))
		   			{
						PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motoryes.wav");
					}
					VehicleStarted[vid] = 1;
					format(string, sizeof(string), "* %s hat den Motor seines Fahrzeuges erfolgreich gestartet!", GetName(playerid));
					ProxDetector(5.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,Gruen,"Du hast den Motor erfolgreich gestartet!");
					GetVehicleParamsEx(vid,engine,lightss,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(vid,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~W~Motor ~g~an!", 2000, 5);
					ShowSpeedometer(playerid);
					UpdateSpeedometer(playerid);
					//Tanksystem
					if(IsABike(GetPlayerVehicleID(playerid)))
					{
						KillTimer(timer2[playerid]);
						timer2[playerid] = SetTimerEx("TankTimer",50587,true,"i",playerid);
					}
					else
					{
						KillTimer(timer2[playerid]);
						timer2[playerid] = SetTimerEx("TankTimer",23899,true,"i",playerid);
					}
					return 1;
				}
			}
		}
	}
	//Waffenautomat
	if(newkeys & KEY_SPRINT)
	{
		if(IsAtWA(playerid))
		{
			if(sStats[playerid][sLevel] < 3)
			{
				SendClientMessage(playerid,Rot,"Du musst mind. Level 3 sein um den Waffenautomaten benutzen zu können!");
				return 1;
			}
			if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
			if(sStats[playerid][sWaffenschein] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast keinen Waffenschein!");
				return 1;
			}
			ShowPlayerDialog(playerid,WAFFENAUTOMAT, DIALOG_STYLE_LIST, "Waffenautomat", "{00AA00}1.{FFFFFF}9MM {00AA00}600\n{00AA00}2.{FFFFFF}Deagle {00AA00}1100\n{00AA00}3.{FFFFFF}MP5 {00AA00}1500\n{00AA00}4.{FFFFFF}M4 {00AA00}3000\n{00AA00}5.{FFFFFF}Schrotflinte {00AA00}2100\n{00AA00}6.{FFFFFF}Rüstung {00AA00}1500", "Kaufen", "Abbrechen");
		}
	}
	//Türe öffnen /opengate
	if(newkeys & KEY_YES)
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,250.60000610,61.79999924,1002.59997559) || IsPlayerInRangeOfPoint(playerid,3.0,244.89999390,72.59999847,1002.59997559) && IsAFW(playerid))
		{
		    return cmd_opengatef(playerid,"params");
		}
		if(IsPlayerInRangeOfPoint(playerid,3.0, 478.6498,-17.9577,1000.6797) && sStats[playerid][sJob] == 2)
		{
			return cmd_opengatedj(playerid,"params");
		}
		if(IsPlayerInRangeOfPoint(playerid,3.0, -2757.8999, 84.8000, 7.3000) && IsAMS(playerid))
		{
			return cmd_opengatems(playerid,"params");
		}
		if(IsPlayerInRangeOfPoint(playerid,12,2500.287354, 2771.257568, 17.868746) & sStats[playerid][sAdminlevel] > 0)
		{
		    return cmd_adminaufzug(playerid,"params");
	 	}
		if(IsPlayerInRangeOfPoint(playerid,3.5,1558.5902, -1677.7805, 1722.1000) || IsPlayerInRangeOfPoint(playerid,3.5,1553.9800, -1691.5000, 1722.1000) && IsACop(playerid))
		{
		    return cmd_opengatebspd(playerid,"params");
		}
		if(IsPlayerInRangeOfPoint(playerid,4.0, 3137.3284,-3015.1643,18.7373) && sStats[playerid][sPremium] > 1)
		{
			return cmd_opengatekirche(playerid, "params");
		}
	}
	//Bankautomaten
	if(newkeys & KEY_SPRINT)
	{
		if(IsAtATM(playerid))
		{
		    if(IsPlayerInAnyVehicle(playerid)) { return 1; }
			if(sStats[playerid][sKarte] < 1)
			{
				SendClientMessage(playerid,Rot,"Du hast kein Konto!");
				return 1;
			}
			if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				return 1;
			}
			ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
		}
	}
	return 1;
}


public OnRconLoginAttempt(ip[], password[], success)
{
	new string[175];
	new name[MAX_PLAYER_NAME];
	new pip[16];
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
 		GetPlayerIp(i, pip, sizeof(pip));
  		if(!strcmp(ip, pip, true))
   		{
    		GetPlayerName(i,name,sizeof(name));
			break;
  		}
	}
	if(!success)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Der Spieler mit der IP %s (%s) hat sich fehlerhaft versucht als Rcon-Admin einzuloggen. (Passwort : %s)!", day,month,year,hour,minute,second,ip,name,password);
		RconLog(string);
		return 1;
	}
	if(success)
	{
		format(string, sizeof(string), "Warnung: Der Spieler mit der IP %s (%s) hat sich erfolgreich als Rcon-Admin eingeloggt!", ip,name);
		SendAdminMessage(Rot, string);
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Der Spieler mit der IP %s (%s) hat sich erfolgreich als Rcon-Admin eingeloggt!. (Passwort : %s)!", day,month,year,hour,minute,second,ip,name,password);
		RconLog(string);
		return 1;
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	//AFK System
	if(IsPlayerNPC(playerid)) return 1;
	if(Desktop_Timer_Started[playerid] == 0 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0 && IsPlayerConnected(playerid))
	{
		Desktop_Timer[playerid] = SetTimerEx("Desktop_Function",1193,1,"d",playerid);
		Desktop_Timer_Started[playerid] = 1;
	}
	Desktop_Check[playerid] += 1;
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new string[210];
	new string2[270];
	new string3[540];
	new helpstring[501];
	new zahl = strval(inputtext);
	new house = sStats[playerid][sHaus];
	new geld = GetPlayerEuros(playerid);
	new v = GetPlayerVehicleID(playerid);
	new model = GetVehicleModel(v);
	new bot = GetNearestBot(playerid, 3);
	new randd = random(sizeof(PCarSpawns));
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);
	//Gangautohaus
	FRAC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	if(dialogid == ANWESEND)
	{
	    if(response)
	    {
	        ClearChat(playerid);
	        SendClientMessage(playerid,Gelb,"Anwesendheit erfolgreich bestätigt!");
	        KillTimer(antimer[playerid]);
	    }
	    else
	    {
	        KillTimer(antimer[playerid]);
	        ANWESENDTIMER(playerid);
	    }
	    return 1;
	}
	if(dialogid == PATE1)
	{
	    if(response == 0)
	    {
	        Pate = 0;
		}
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	  			InAutoHaus[playerid] = 1;
				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, AutoHauser[1][3][0], AutoHauser[1][3][1], AutoHauser[1][3][2]);
				SetPlayerVirtualWorld(playerid,55+playerid);
				new car,c1,c2,preis;
				AutohausCar[playerid] = 0;
				car = AutoHausEins[0][0]; c1 = AutoHausEins[0][2]; c2 = AutoHausEins[0][3]; preis = AutoHausEins[0][1];
				SetPlayerCameraPos(playerid, AutoHauser[1][2][0], AutoHauser[1][2][1], AutoHauser[1][2][2]+2);
				SetPlayerCameraLookAt(playerid, AutoHauser[1][1][0], AutoHauser[1][1][1], AutoHauser[1][1][2]);
				AutohausSCar[playerid] = AddStaticVehicleEx(car, AutoHauser[1][1][0], AutoHauser[1][1][1], AutoHauser[1][1][2], AutoHauser[1][1][3],c1,c2,-1);
				SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
				format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[car-400],preis);
				if(!CarKauf[playerid])
				{
					CarKauf[playerid] = TextDrawCreate(200,310,string);
					TextDrawAlignment(CarKauf[playerid],1);
					TextDrawUseBox(CarKauf[playerid],1);
					TextDrawBoxColor(CarKauf[playerid],0x000000FF);
					TextDrawSetOutline(CarKauf[playerid],1);
					TextDrawBackgroundColor(CarKauf[playerid],COLOR_GREY);
					TextDrawFont(CarKauf[playerid], 2);
					TextDrawSetProportional(CarKauf[playerid], 2);
					TextDrawTextSize(CarKauf[playerid],450,410);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
				else
				{
					TextDrawHideForPlayer(playerid,CarKauf[playerid]);
					TextDrawSetString(CarKauf[playerid],string);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
			}
   			if(listitem == 1)
	        {
	  			InAutoHaus[playerid] = 2;
				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, AutoHauser[2][3][0], AutoHauser[2][3][1], AutoHauser[2][3][2]);
				SetPlayerVirtualWorld(playerid,55+playerid);
				new car,c1,c2,preis;
				AutohausCar[playerid] = 0;
				car = AutoHausZwei[0][0]; c1 = AutoHausZwei[0][2]; c2 = AutoHausZwei[0][3]; preis = AutoHausZwei[0][1];
				SetPlayerCameraPos(playerid, AutoHauser[2][2][0], AutoHauser[2][2][1], AutoHauser[2][2][2]+2);
				SetPlayerCameraLookAt(playerid, AutoHauser[2][1][0], AutoHauser[2][1][1], AutoHauser[2][1][2]);
				AutohausSCar[playerid] = AddStaticVehicleEx(car, AutoHauser[2][1][0], AutoHauser[2][1][1], AutoHauser[2][1][2], AutoHauser[2][1][3],c1,c2,-1);
				SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
				format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[car-400],preis);
				if(!CarKauf[playerid])
				{
					CarKauf[playerid] = TextDrawCreate(200,310,string);
					TextDrawAlignment(CarKauf[playerid],1);
					TextDrawUseBox(CarKauf[playerid],1);
					TextDrawBoxColor(CarKauf[playerid],0x000000FF);
					TextDrawSetOutline(CarKauf[playerid],1);
					TextDrawBackgroundColor(CarKauf[playerid],COLOR_GREY);
					TextDrawFont(CarKauf[playerid], 2);
					TextDrawSetProportional(CarKauf[playerid], 2);
					TextDrawTextSize(CarKauf[playerid],450,410);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
				else
				{
					TextDrawHideForPlayer(playerid,CarKauf[playerid]);
					TextDrawSetString(CarKauf[playerid],string);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
			}
			if(listitem == 2)
	        {
	  			InAutoHaus[playerid] = 3;
				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, AutoHauser[3][3][0], AutoHauser[3][3][1], AutoHauser[3][3][2]);
				SetPlayerVirtualWorld(playerid,55+playerid);
				new car,c1,c2,preis;
				AutohausCar[playerid] = 0;
				car = AutoHausDrei[0][0]; c1 = AutoHausDrei[0][2]; c2 = AutoHausDrei[0][3]; preis = AutoHausDrei[0][1];
				SetPlayerCameraPos(playerid, AutoHauser[3][2][0], AutoHauser[3][2][1], AutoHauser[3][2][2]+2);
				SetPlayerCameraLookAt(playerid, AutoHauser[3][1][0], AutoHauser[3][1][1], AutoHauser[3][1][2]);
				AutohausSCar[playerid] = AddStaticVehicleEx(car, AutoHauser[3][1][0], AutoHauser[3][1][1], AutoHauser[3][1][2], AutoHauser[3][1][3],c1,c2,-1);
				SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
				format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[car-400],preis);
				if(!CarKauf[playerid])
				{
					CarKauf[playerid] = TextDrawCreate(200,310,string);
					TextDrawAlignment(CarKauf[playerid],1);
					TextDrawUseBox(CarKauf[playerid],1);
					TextDrawBoxColor(CarKauf[playerid],0x000000FF);
					TextDrawSetOutline(CarKauf[playerid],1);
					TextDrawBackgroundColor(CarKauf[playerid],COLOR_GREY);
					TextDrawFont(CarKauf[playerid], 2);
					TextDrawSetProportional(CarKauf[playerid], 2);
					TextDrawTextSize(CarKauf[playerid],450,410);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
				else
				{
					TextDrawHideForPlayer(playerid,CarKauf[playerid]);
					TextDrawSetString(CarKauf[playerid],string);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
			}
			if(listitem == 3)
	        {
	  			InAutoHaus[playerid] = 4;
				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, AutoHauser[4][3][0], AutoHauser[4][3][1], AutoHauser[4][3][2]);
				SetPlayerVirtualWorld(playerid,55+playerid);
				new car,c1,c2,preis;
				AutohausCar[playerid] = 0;
				car = AutoHausVier[0][0]; c1 = AutoHausVier[0][2]; c2 = AutoHausVier[0][3]; preis = AutoHausVier[0][1];
				SetPlayerCameraPos(playerid, AutoHauser[4][2][0], AutoHauser[4][2][1], AutoHauser[4][2][2]+2);
				SetPlayerCameraLookAt(playerid, AutoHauser[4][1][0], AutoHauser[4][1][1], AutoHauser[4][1][2]);
				AutohausSCar[playerid] = AddStaticVehicleEx(car, AutoHauser[4][1][0], AutoHauser[4][1][1], AutoHauser[4][1][2], AutoHauser[4][1][3],c1,c2,-1);
				SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
				format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[car-400],preis);
				if(!CarKauf[playerid])
				{
					CarKauf[playerid] = TextDrawCreate(200,310,string);
					TextDrawAlignment(CarKauf[playerid],1);
					TextDrawUseBox(CarKauf[playerid],1);
					TextDrawBoxColor(CarKauf[playerid],0x000000FF);
					TextDrawSetOutline(CarKauf[playerid],1);
					TextDrawBackgroundColor(CarKauf[playerid],COLOR_GREY);
					TextDrawFont(CarKauf[playerid], 2);
					TextDrawSetProportional(CarKauf[playerid], 2);
					TextDrawTextSize(CarKauf[playerid],450,410);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
				else
				{
					TextDrawHideForPlayer(playerid,CarKauf[playerid]);
					TextDrawSetString(CarKauf[playerid],string);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
			}
			if(listitem == 4)
	        {
	  			InAutoHaus[playerid] = 5;
				TogglePlayerControllable(playerid, false);
				SetPlayerPosEx(playerid, AutoHauser[5][3][0], AutoHauser[5][3][1], AutoHauser[5][3][2]);
				SetPlayerVirtualWorld(playerid,55+playerid);
				new car,c1,c2,preis;
				AutohausCar[playerid] = 0;
				car = AutoHausFuenf[0][0]; c1 = AutoHausFuenf[0][2]; c2 = AutoHausFuenf[0][3]; preis = AutoHausFuenf[0][1];
				SetPlayerCameraPos(playerid, AutoHauser[5][2][0], AutoHauser[5][2][1], AutoHauser[5][2][2]+2);
				SetPlayerCameraLookAt(playerid, AutoHauser[5][1][0], AutoHauser[5][1][1], AutoHauser[5][1][2]);
				AutohausSCar[playerid] = AddStaticVehicleEx(car, AutoHauser[5][1][0], AutoHauser[5][1][1], AutoHauser[5][1][2], AutoHauser[5][1][3],c1,c2,-1);
				SetVehicleVirtualWorld(AutohausSCar[playerid],55+playerid);
				format(string,sizeof(string),"~r~-- DER AUTOPATE --~n~~g~Fahrzeug: ~w~%s~n~~g~Preis: ~w~%d Euro~n~~n~~b~Auswaehlen mit Hilfe~n~von Numpad 4 und 6~n~und der Entertaste!~n~Abbrechen mit TAB!",VehicleNames[car-400],preis);
				if(!CarKauf[playerid])
				{
					CarKauf[playerid] = TextDrawCreate(200,310,string);
					TextDrawAlignment(CarKauf[playerid],1);
					TextDrawUseBox(CarKauf[playerid],1);
					TextDrawBoxColor(CarKauf[playerid],0x000000FF);
					TextDrawSetOutline(CarKauf[playerid],1);
					TextDrawBackgroundColor(CarKauf[playerid],COLOR_GREY);
					TextDrawFont(CarKauf[playerid], 2);
					TextDrawSetProportional(CarKauf[playerid], 2);
					TextDrawTextSize(CarKauf[playerid],450,410);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
				else
				{
					TextDrawHideForPlayer(playerid,CarKauf[playerid]);
					TextDrawSetString(CarKauf[playerid],string);
					TextDrawShowForPlayer(playerid,CarKauf[playerid]);
				}
			}
	    }
	}
	if(dialogid == COD7)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	    }
	    if(response == 1)
  		{
  		    if(listitem == 0)
  		    {
  		        if(CODKasse < 55000)
  		        {
  		            SendClientMessage(playerid,Rot,"Soviel Geld ist nicht in der Crip or Die Gangkasse vorhanden!");
  		            ShowPlayerDialog(playerid,COD7, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Waffenupgrade","{0023FF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {0023FF}(55.000)\n{0023FF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{0023FF}(65.000)\n{0023FF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{0023FF}(75.000)\n{0023FF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {0023FF}(85.000)", "Bestätigen", "Zurück");
  		            return 1;
  		        }
  		        CODUpgrade = 2;
  		        CODKasse -= 55000;
   		      	ClearChat(playerid);
  		        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  		        SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Gangwaffen Sortiment auf Paket 4 geupgraded!");
  		        SendClientMessage(playerid,Gelb2,"Es stehen jetzt folgende Waffen zur Verfügung: Schlagring, 9mm, MP5.");
  		        return 1;
  		    }
  		    if(listitem == 1)
  		    {
        		if(CODKasse < 65000)
  		        {
  		            SendClientMessage(playerid,Rot,"Soviel Geld ist nicht in der Crip or Die Gangkasse vorhanden!");
  		            ShowPlayerDialog(playerid,COD7, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Waffenupgrade","{0023FF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {0023FF}(55.000)\n{0023FF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{0023FF}(65.000)\n{0023FF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{0023FF}(75.000)\n{0023FF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {0023FF}(85.000)", "Bestätigen", "Zurück");
  		            return 1;
  		        }
  		        CODUpgrade = 3;
  		        CODKasse -= 65000;
   		       	ClearChat(playerid);
  		        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  		        SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Gangwaffen Sortiment auf Paket 4 geupgraded!");
  		        SendClientMessage(playerid,Gelb2,"Es stehen jetzt folgende Waffen zur Verfügung: Baseballschläger, Deagle, AK-47.");
  		        return 1;
  		    }
  		    if(listitem == 2)
  		    {
        		if(CODKasse < 75000)
  		        {
  		            SendClientMessage(playerid,Rot,"Soviel Geld ist nicht in der Crip or Die Gangkasse vorhanden!");
  		            ShowPlayerDialog(playerid,COD7, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Waffenupgrade","{0023FF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {0023FF}(55.000)\n{0023FF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{0023FF}(65.000)\n{0023FF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{0023FF}(75.000)\n{0023FF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {0023FF}(85.000)", "Bestätigen", "Zurück");
  		            return 1;
  		        }
  		        CODUpgrade = 4;
  		        CODKasse -= 75000;
  		        ClearChat(playerid);
  		        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  		        SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Gangwaffen Sortiment auf Paket 4 geupgraded!");
  		        SendClientMessage(playerid,Gelb2,"Es stehen jetzt folgende Waffen zur Verfügung: Baseballschläger, Deagle, Tec-9, AK-47.");
  		        return 1;
  		    }
  		    if(listitem == 3)
  		    {
        		if(CODKasse < 85000)
  		        {
  		            SendClientMessage(playerid,Rot,"Soviel Geld ist nicht in der Crip or Die Gangkasse vorhanden!");
  		            ShowPlayerDialog(playerid,COD7, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Waffenupgrade","{0023FF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {0023FF}(55.000)\n{0023FF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{0023FF}(65.000)\n{0023FF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{0023FF}(75.000)\n{0023FF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {0023FF}(85.000)", "Bestätigen", "Zurück");
  		            return 1;
  		        }
  		        CODUpgrade = 5;
  		        CODKasse -= 85000;
  		        ClearChat(playerid);
  		        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  		        SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Gangwaffen Sortiment auf Paket 4 geupgraded!");
  		        SendClientMessage(playerid,Gelb2,"Es stehen jetzt folgende Waffen zur Verfügung: Baseballschläger, Deagle, Tec-9, AK-47, Country Rifle.");
  		        return 1;
  		    }
	    }
	    return 1;
	}
	if(dialogid == COD6m)
	{
		if(response == 0)
		{
	 		ShowPlayerDialog(playerid, COD5m, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Materialienkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du die Materialien auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
		}
		if(response == 1)
		{
		    if(zahl > CODMatKasse)
		    {
		        SendClientMessage(playerid,Rot,"Soviele Drogen sind nicht mehr in der Crip or Die Materialienkasse vorhanden!");
		        ShowPlayerDialog(playerid,COD2m, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Materialienkasse Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
		        return 1;
		    }
		    new userid = GetPVarInt(playerid, "CODNAME");
    	 	if (ProxDetectorS(5.0, playerid, userid))
			{
    		    sStats[playerid][sMats] += zahl;
    		    CODMatKasse -= zahl;
    		    PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);
    		    format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {0023FF}%s{FFFFFF} %d Materialien aus der Crip or Die Materialienkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
    		    format(string, sizeof(string), "%s hat dir erfolgreich {0023FF}%d Materialien{FFFFFF} aus der Crip or Die Materialienkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(userid,Weiß,string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %s erfolgreich %d Materialien  aus der Crip or Die Materialienkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl,GetName(userid));
				CODLog(string);
				return 1;

    		}
    		else
   			{
   			    SendClientMessage(playerid,Rot,"Der Spieler ist nicht in der nähe von dir!");
   			    return 1;
   			}
		}
		return 1;
	}
	if(dialogid == COD5m)
	{
 		if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD2m, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Materialienkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
  		}
  		if(response == 1)
		{
    		if(IsPlayerNPC(zahl))
			{
			    SendClientMessage(playerid,Rot,"Du kannst keine Materialien an einem NPC/Bots ausgeben!");
			    ShowPlayerDialog(playerid, COD5m, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Materialienkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du die Drogen rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
			    return 1;
			}
			if(zahl == INVALID_PLAYER_ID)
			{
	   			SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	   			ShowPlayerDialog(playerid, COD5m, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Materialienkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
 				return 1;
			}
			    SetPVarInt(playerid,"CODNAME",zahl);
				ShowPlayerDialog(playerid, COD6m, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Materialienkasse auszahlen", "{FFFFFF}Wie viele Materialien möchtest du aus der {0023FF}Crip or Die Materialienkasse{FFFFFF} rausgeben?", "Auszahlen", "Zurück");
				return 1;
		}
		return 1;
 	}
	if(dialogid == COD4m)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD2m, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Materialienkasse Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
  		}
  		if(response == 1)
  		{
    		if(zahl > sStats[playerid][sMats])
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht genug Materialien dabei!");
	            return 1;
	        }
	        format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {0023FF}%d Materialien{FFFFFF} in die Crip or Die Materialienkasse gezahlt.", zahl);
	        SendClientMessage(playerid,Weiß,string);
			sStats[playerid][sMats] -= zahl;
	        CODMatKasse+=zahl;
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %d Materialien in die Crip or Die Materialienkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl);
			CODLog(string);
			return 1;
  		}
  		return 1;
 	}
	if(dialogid == COD3m)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,COD2m, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Materialienkasse Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
	    }
	    return 1;
	}
	if(dialogid == COD2m)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	        	if(CODMatKasse < 1)
		        {
		            SendClientMessage(playerid,Rot,"Die Crip or Die Materialienkasse ist leer!");
					return 1;
		        }
		        format(string, sizeof(string), "{FFFFFF}Der Inhalt der Crip or Die Materialienkasse beträgt: {0023FF}%d Materialien", CODMatKasse);
		        ShowPlayerDialog(playerid, COD3m, DIALOG_STYLE_MSGBOX, "{0023FF}Crip or Die Materialienkasse", string, "Zurück", "");
		        return 1;
		 	}
		 	if(listitem == 1)
		 	{
		 	    ShowPlayerDialog(playerid, COD4m, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Materialienkasse einzahlen", "{FFFFFF}Wie viele Materialien möchtest du in die {0023FF}Crip or Die Materialienkasse{FFFFFF} einzahlen?", "Einzahlen", "Zurück");
		 	    return 1;
		 	}
		 	if(listitem == 2)
		 	{
		 	    if(sStats[playerid][sLeiter] != 6)
		 	    {
		 	        SendClientMessage(playerid,Rot,"Nur der Leader (Leiter) der Crip or Die Gang kann Materialien aus der Materialienkasse vergeben!");
		 	        ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
		 	        return 1;
		 	    }
        		ShowPlayerDialog(playerid, COD5m, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Materialienkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du die Materialien rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
        		return 1;
		 	}
	    }
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	        return 1;
	    }
	    return 1;
 	}
	//Drogenkasse MS 14
	if(dialogid == COD6d)
	{
		if(response == 0)
		{
	 		ShowPlayerDialog(playerid, COD5d, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Drogenkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du die Drogen rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
	 		return 1;
		}
		if(response == 1)
		{
		    if(zahl > CODDrogenKasse)
		    {
		        SendClientMessage(playerid,Rot,"Soviele Drogen sind nicht mehr in der Crip or Die Drogenkasse vorhanden!");
		        ShowPlayerDialog(playerid,COD2d, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Drogenkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
		        return 1;
		    }
		    new userid = GetPVarInt(playerid, "CODNAME");
    		if (ProxDetectorS(7.0, playerid, userid))
    		{
    		    sStats[playerid][sDrogen] += zahl;
    		    CODDrogenKasse -= zahl;
    		    PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);
    		    format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {0023FF}%s{FFFFFF}%d Drogen aus der Crip or Die Drogenkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
    		    format(string, sizeof(string), "%s hat dir erfolgreich {0023FF}%d Drogen{FFFFFF} aus der Crip or Die Drogenkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(userid,Weiß,string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %s erfolgreich %d Drogen  aus der Crip or Die Drogenkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl,GetName(userid));
				CODLog(string);
				return 1;
    		}
    		else
   			{
   			    SendClientMessage(playerid,Rot,"Der Spieler ist nicht in der nähe von dir!");
   			    return 1;
   			}
		}
		return 1;
	}
	if(dialogid == COD5d)
	{
 		if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD2d, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Drogenkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
  		}
  		if(response == 1)
		{
    		if(IsPlayerNPC(zahl))
			{
			    SendClientMessage(playerid,Rot,"Du kannst keine Drogen an einem NPC/Bots ausgeben!");
			    ShowPlayerDialog(playerid, COD5d, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Drogenkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du die Drogen rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
			    return 1;
			}
			if(zahl == INVALID_PLAYER_ID)
			{
	   			SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	   			ShowPlayerDialog(playerid, COD5d, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Drogenkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
 				return 1;
			}
			    SetPVarInt(playerid,"CODNAME",zahl);
				ShowPlayerDialog(playerid, COD6d, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Drogenkasse auszahlen", "{FFFFFF}Wie viele Drogen möchtest du aus der {0023FF}Crip or Die Drogenkasse{FFFFFF} rausgeben?", "Auszahlen", "Zurück");
				return 1;
		}
		return 1;
 	}
	if(dialogid == COD4d)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD2d, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Drogenkasse Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
  		}
  		if(response == 1)
  		{
    		if(zahl > sStats[playerid][sDrogen])
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht genug Drogen dabei!");
	            return 1;
	        }
	        format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {0023FF}%d Drogen{FFFFFF} in die Crip or Die Drogenkasse gezahlt.", zahl);
	        SendClientMessage(playerid,Weiß,string);
			sStats[playerid][sDrogen] -= zahl;
	        CODDrogenKasse+=zahl;
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %d Drogen in die Crip or Die Drogenkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl);
			CODLog(string);
			return 1;
  		}
  		return 1;
 	}
	if(dialogid == COD3d)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,COD2d, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Drogenkasse Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
	    }
	    return 1;
	}
	if(dialogid == COD2d)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	        	if(CODDrogenKasse < 1)
		        {
		            SendClientMessage(playerid,Rot,"Die Crip or Die Drogenkasse ist leer!");
					return 1;
		        }
		        format(string, sizeof(string), "{FFFFFF}Der Inhalt der Crip or Die Drogenkasse beträgt: {0023FF}%d Drogen", CODDrogenKasse);
		        ShowPlayerDialog(playerid, COD3d, DIALOG_STYLE_MSGBOX, "{0023FF}Crip or Die Drogenkasse", string, "Zurück", "");
		        return 1;
		 	}
		 	if(listitem == 1)
		 	{
		 	    ShowPlayerDialog(playerid, COD4d, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Drogenkasse einzahlen", "{FFFFFF}Wie viele Drogen möchtest du in die {0023FF}Crip or Die Drogenkasse{FFFFFF} einzahlen?", "Einzahlen", "Zurück");
		 	    return 1;
		 	}
		 	if(listitem == 2)
		 	{
		 	    if(sStats[playerid][sLeiter] != 6)
		 	    {
		 	        SendClientMessage(playerid,Rot,"Nur der Leader (Leiter) der Crip or Die Gang kann Drogen aus der Drogenkasse vergeben!");
		 	        ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
		 	        return 1;
		 	    }
        		ShowPlayerDialog(playerid, COD5d, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Drogenkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du die Drogen rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
        		return 1;
		 	}
	    }
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	        return 1;
	    }
	    return 1;
 	}
	//Geld Kasse Crip or Die
	if(dialogid == COD6)
	{
		if(response == 0)
		{
	 		ShowPlayerDialog(playerid, COD5, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Gangkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
	 		return 1;
		}
		if(response == 1)
		{
		    if(zahl > CODKasse)
		    {
		        SendClientMessage(playerid,Rot,"Soviel ist nicht mehr in der Crip or Die Gangkasse vorhanden!");
		        ShowPlayerDialog(playerid,COD2, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Gangkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
		        return 1;
		    }
      		new userid = GetPVarInt(playerid, "CODNAME");
    		if (ProxDetectorS(7.0, playerid, userid))
    		{
    		    GivePlayerEuro(userid,zahl);
    		    CODKasse -= zahl;
    		    PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);
    		    format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {0023FF}%s{FFFFFF} %d aus der Crip or Die Gangkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
    		    format(string, sizeof(string), "%s hat dir erfolgreich {0023FF}%d{FFFFFF} aus der Crip or Die Gangkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(userid,Weiß,string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %s erfolgreich %d  aus der Crip or Die Gangkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl,GetName(userid));
				CODLog(string);
				return 1;

    		}
    		else
   			{
   			    SendClientMessage(playerid,Rot,"Der Spieler ist nicht in der nähe von dir!");
   			    return 1;
   			}
		}
		return 1;
	}
	if(dialogid == COD5)
	{
 		if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD2, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Gangkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
  		}
  		if(response == 1)
		{
    		if(IsPlayerNPC(zahl))
			{
			    SendClientMessage(playerid,Rot,"Du kannst kein Geld an einem NPC/Bots auszahlen!");
			    ShowPlayerDialog(playerid, COD5, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Gangkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
			    return 1;
			}
			if(zahl == INVALID_PLAYER_ID)
			{
	   			SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	   			ShowPlayerDialog(playerid, COD5, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Gangkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
 				return 1;
			}
			    SetPVarInt(playerid,"CODNAME",zahl);
				ShowPlayerDialog(playerid, COD6, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Gangkasse auszahlen", "{FFFFFF}Wie viel möchtest du aus der {0023FF}Crip or Die Gangkasse{FFFFFF} auszahlen?", "Auszahlen", "Zurück");
				return 1;
		}
		return 1;
 	}
	if(dialogid == COD4)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD2, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Gangkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
  		}
  		if(response == 1)
  		{
    		if(zahl > GetPlayerEuros(playerid))
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht soviel Geld dabei!");
	            return 1;
	        }
	        format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {0023FF}%d{FFFFFF} in die Crip or Die Gangkasse gezahlt.", zahl);
	        SendClientMessage(playerid,Weiß,string);
	        GivePlayerEuro(playerid,-zahl);
	        CODKasse+=zahl;
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %d in die Crip or Die Gangkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl);
			CODLog(string);
			return 1;
  		}
  		return 1;
 	}
	if(dialogid == COD3)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,COD2, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Gangkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
	    }
	    return 1;
	}
	if(dialogid == COD2)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	        	if(CODKasse < 1)
		        {
		            SendClientMessage(playerid,Rot,"Die Crip or Die Gangkasse ist leer!");
					return 1;
		        }
		        format(string, sizeof(string), "{FFFFFF}Der Inhalt der Crip or Die Gangkasse beträgt: {0023FF}%d", CODKasse);
		        ShowPlayerDialog(playerid, COD3, DIALOG_STYLE_MSGBOX, "{0023FF}Crip or Die Gangkasse", string, "Zurück", "");
		        return 1;
		 	}
		 	if(listitem == 1)
		 	{
		 	    ShowPlayerDialog(playerid, COD4, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Gangkasse einzahlen", "{FFFFFF}Wie viel möchtest du in die {0023FF}Crip or Die Gangkasse{FFFFFF} einzahlen?", "Einzahlen", "Zurück");
		 	    return 1;
		 	}
		 	if(listitem == 2)
		 	{
    			if(sStats[playerid][sLeiter] != 6)
		 	    {
		 	        SendClientMessage(playerid,Rot,"Nur der Leader (Leiter) der Crip or Die Gang kann Drogen aus der Drogenkasse vergeben!");
		 	        ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
		 	        return 1;
		 	    }
        		ShowPlayerDialog(playerid, COD5, DIALOG_STYLE_INPUT, "{0023FF}Crip or Die Gangkasse auszahlen", "{FFFFFF}Welchem {0023FF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
        		return 1;
		 	}
	    }
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	        return 1;
	    }
	    return 1;
 	}
	if(dialogid == COD1)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
		 	{
            	ShowPlayerDialog(playerid,COD2, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Gangkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
            	return 1;
			}
   			if(listitem == 1)
		 	{
            	ShowPlayerDialog(playerid,COD2d, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Drogenkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
            	return 1;
			}
			if(listitem == 2)
		 	{
            	ShowPlayerDialog(playerid,COD2m, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Materialienkassen Verwaltung","{0023FF}1. {FFFFFF}Übersicht\n{0023FF}2. {FFFFFF}Einzahlen\n{0023FF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
            	return 1;
			}
			if(listitem == 3)
		 	{
    			if(sStats[playerid][sLeiter] != 6)
		 	    {
		 	        SendClientMessage(playerid,Rot,"Nur der Leader (Leiter) der Crip or Die Gang kann ein Waffenupgrade veranlassen!");
		 	        ShowPlayerDialog(playerid,COD1, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Fraktionsverwaltung","{0023FF}1. {FFFFFF}Gangkasse verwalten\n{0023FF}2. {FFFFFF}Drogenkasse verwalten\n{0023FF}3. {FFFFFF}Materialienkasse verwalten\n{0023FF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
		 	        return 1;
		 	    }
            	ShowPlayerDialog(playerid,COD7, DIALOG_STYLE_LIST, "{0023FF}Crip or Die Waffenupgrade","{0023FF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {0023FF}(55.000)\n{0023FF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{0023FF}(65.000)\n{0023FF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{0023FF}(75.000)\n{0023FF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {0023FF}(85.000)", "Bestätigen", "Zurück");
            	return 1;
			}
	    }
	    return 1;
	}
if (dialogid == DIALOG_GARAGE15) { //Frontstoßstangen Dialog
if(response) {

	switch (listitem) {
		case 0:
		{
			if(geld < 500)
			{
				SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (500$)!");
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				return 1;
			}
			if(!IsAWAACar(v))
			{
				SendClientMessage(playerid,COLOR_BRIGHTRED,"Diese Frontstoßstangen ist nicht mit deinem Fahrzeug kompatible!");
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				return 1;
			}
			if (GetVehicleModel(v) == 565) //Flash
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1153);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 561) //Stratum
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1155);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 560) //Sultan
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1169);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 562) //Elegy
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1171);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 559) //Jester
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1160);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 558) //Uranus
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1168);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
		}
		case 1:
		{
			if(geld < 500)
			{
				SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (500$)!");
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				return 1;
			}
			if(!IsAWAACar(v))
			{
				SendClientMessage(playerid,COLOR_BRIGHTRED,"Diese Heckstoßstange ist nicht mit deinem Fahrzeug kompatible!");
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				return 1;
			}
			if (GetVehicleModel(v) == 565) //Flash
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1152);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 561) //Stratum
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1157);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 560) //Sultan
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1170);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 562) //Elegy
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1172);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 559) //Jester
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1158);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 558) //Uranus
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1166);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
		}
		case 2:
		{
			if(geld < 500)
			{
				SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (500$)!");
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				return 1;
			}
			if(!IsALocoCar(v))
			{
				SendClientMessage(playerid,COLOR_BRIGHTRED,"Diese Heckstoßstange ist nicht mit deinem Fahrzeug kompatible!");
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				return 1;
			}
			if (GetVehicleModel(v) == 575) //Broadway
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1174);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 534) //Remington
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1179);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 576) //Tornado
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1191);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 536) //Blade
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1182);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 567) //Savanna
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1189);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 535) //SlamVan
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1117);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
		}
		case 3:
		{
			if(geld < 500)
			{
				SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (500$)!");
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				return 1;
			}
			if(!IsALocoCar(v))
			{
				SendClientMessage(playerid,COLOR_BRIGHTRED,"Diese Heckstoßstange ist nicht mit deinem Fahrzeug kompatible!");
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				return 1;
			}
			if (GetVehicleModel(v) == 575) //Broadway
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1175);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 534) //Remington
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1185);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 576) //Tornado
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1190);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 536) //Blade
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1181);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 567) //Savanna
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1188);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			if (GetVehicleModel(v) == 535) //SlamVan
			{
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Frontstoßstangen verbaut!");
				GivePlayerEuro(playerid,-500);
				AddVehicleComponent(v,1116);//Heckstoßstangen
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
		}
	}
}
else
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
return 1;
}
if (dialogid == DIALOG_GARAGE11) { //Dach
if(response) {

switch (listitem) {
	case 0:
	{
		if(geld < 600)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (600$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(IsALocoCar(v) || IsAWAACar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if (GetVehicleModel(v) == 562) //Elegy
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1036);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"IIn deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
		GivePlayerEuro(playerid,-600);
		AddVehicleComponent(v,1006);//Dach
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 1:
	{
		if(geld < 600)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (600$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsAWAACar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if (GetVehicleModel(v) == 565) //Flash
		{
			PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1049);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 561) //Stratum
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1055);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 560) //Sultan
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
			GivePlayerEuro(playerid,-1200);
			AddVehicleComponent(v,1032);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 562) //Elegy
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1036);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 559) //Jester
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1067);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 558) //Uranus
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1088);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
	case 2:
	{
		if(geld < 1200)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (1200$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsAWAACar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(GetVehicleModel(v) == 565) //Flash
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1053);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 561) //Stratum
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1061);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 560) //Sultan
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1033);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 562) //Elegy
		{
			PlayerPlaySound(playerid, 1133,0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1035);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 1068) //Jester
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1162);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 558) //Uranus
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1091);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
	case 3:
	{
		if(geld < 600)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (600$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsALocoCar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(GetVehicleModel(v) == 536) //Blade
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1103);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) != 536) //Was anderes als Blade
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
	case 4:
	{
		if(geld < 600)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (600$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsALocoCar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(GetVehicleModel(v) == 536) //Blade
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1128);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 567) //Savanna
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1130);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 535) //Slamvan
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 575) //Nicht Kompatible
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 534) //Nicht Kompatible
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 576 )//Nicht Kompatible
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
	case 5:
	{
		if(geld < 600)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (600$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsALocoCar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(GetVehicleModel(v) == 567) //Savanna
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Dach Extra verbaut!");
			GivePlayerEuro(playerid,-600);
			AddVehicleComponent(v,1131);//Dach
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 535) //Slamvan
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 536) //Blade
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 575) //Nicht Kompatible
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 534) //Nicht Kompatible
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if(GetVehicleModel(v) == 576 )//Nicht Kompatible
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieses Dach Extra ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
}
}
else
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
return 1;
}
	if (dialogid == DIALOG_GARAGE14) { //Heckstoßstangen Dialog
	if(response) {

	switch (listitem) {
	case 0:
	{
		if(geld < 500)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (500$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsAWAACar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Diese Heckstoßstange ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if (GetVehicleModel(v) == 565) //Flash
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1150);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 561) //Stratum
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1154);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 560) //Sultan
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1141);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 562) //Elegy
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1149);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 559) //Jester
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1159);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 558) //Uranus
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1168);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
	case 1:
	{
		if(geld < 500)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (500$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsAWAACar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Diese Heckstoßstange ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if (GetVehicleModel(v) == 565) //Flash
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1151);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 561) //Stratum
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1156);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 560) //Sultan
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1140);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 562) //Elegy
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1148);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 559) //Jester
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1158);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 558) //Uranus
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1167);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
	case 2:
	{
		if(geld < 500)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (500$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsALocoCar(v))
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Diese Heckstoßstange ist nicht mit deinem Fahrzeug kompatible!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if (GetVehicleModel(v) == 575) //Broadway
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1176);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 534) //Remington
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1180);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 576) //Tornado
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1192);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 536) //Blade
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1184);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 567) //Savanna
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1187);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 535) //SlamVan
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1109);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
	case 3:
	{
		if(geld < 500)
		{
			SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (500$)!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if(!IsALocoCar(v))
		{
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			return 1;
		}
		if (GetVehicleModel(v) == 575) //Broadway
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1177);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 534) //Remington
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1178);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 576) //Tornado
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1193);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 536) //Blade
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1183);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 567) //Savanna
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1186);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		if (GetVehicleModel(v) == 535) //SlamVan
		{
			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine neue Heckstoßstangen verbaut!");
			GivePlayerEuro(playerid,-500);
			AddVehicleComponent(v,1110);//Heckstoßstangen
			ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
			"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
	}
	}
	}
	else
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if (dialogid == DIALOG_GARAGE10) { //Auspuff Dialog
	if(response) {

	switch (listitem) {
	case 0:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
	GivePlayerEuro(playerid,-700);
	AddVehicleComponent(v,1018);//Auspuff
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 1:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
	GivePlayerEuro(playerid,-700);
	AddVehicleComponent(v,1019);//Auspuff
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 2:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
	GivePlayerEuro(playerid,-700);
	AddVehicleComponent(v,1020);//Auspuff
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 3:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
	GivePlayerEuro(playerid,-700);
	AddVehicleComponent(v,1021);//Auspuff
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 4:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
	GivePlayerEuro(playerid,-700);
	AddVehicleComponent(v,1022);//Auspuff
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 5:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(!IsAWAACar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if (GetVehicleModel(v) == 565) //Flash
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1046);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 561) //Stratum
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1064);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 560) //Sultan
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1028);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 562) //Elegy
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1034);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 559) //Jester
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1158);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 558) //Uranus
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1164);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	case 6:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(!IsAWAACar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(GetVehicleModel(v) == 565) //Flash
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1045);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 561) //Stratum
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1059);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 560) //Sultan
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1029);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 562) //Elegy
	{
		PlayerPlaySound(playerid, 1133,0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1037);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 559) //Jester
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1162);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 558) //Uranus
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1089);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	case 7:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(!IsALocoCar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if (GetVehicleModel(v) == 575) //Broadway
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1043);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 536) //Blade
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1105);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 535) //SlamVam
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1114);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 534) //Remington
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1127);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 576) //Tornado
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1135);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 567) //Savanna
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1132);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	case 8:
	{
	if(geld < 700)
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Du hast nicht genung Geld dabei (700$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(!IsALocoCar(v))
	{
		SendClientMessage(playerid,COLOR_BRIGHTRED,"Dieser Auspuff ist nicht mit deinem Fahrzeug kompatible!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if (GetVehicleModel(v) == 575) //Broadway
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1044);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 536) //Blade
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1104);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 535) //SlamVam
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1113);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 534) //Remington
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1126);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 576) //Tornado
	{
		PlayerPlaySound(playerid, 1136, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1113);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 567) //Savanna
	{
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neuer Auspuff verbaut!");
		GivePlayerEuro(playerid,-700);
		AddVehicleComponent(v,1129);//Auspuff
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	}
	}
	else
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if (dialogid == DIALOG_GARAGE9) {
	if(response) {

	switch (listitem) {
	case 0:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1000);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 1:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1001);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 2:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1002);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 3:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1003);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 4:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1014);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 5:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1015);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 6:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(IsALocoCar(v) || IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1016);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 7:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(!IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if (GetVehicleModel(v) == 565) //Flash
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1049);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 561) //Stratum
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1058);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 560) //Sultan
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1138);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 562) //Elegy
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1146);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 559) //Jester
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1158);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if (GetVehicleModel(v) == 558) //Uranus
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1164);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	case 8:
	{
	if(geld < 1200)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1200$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(!IsAWAACar(v))
	{
	SendClientMessage(playerid,Rot,"Dieser Spoiler ist nicht mit deinem Fahrzeug kompatible!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(GetVehicleModel(v) == 565) //Flash
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1050);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 561) //Stratum
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1060);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 560) //Sultan
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1139);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 562) //Elegy
	{
	PlayerPlaySound(playerid, 1133,0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1147);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 559) //Jester
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1162);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	if(GetVehicleModel(v) == 558) //Uranus
	{
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein Spoiler verbaut!");
	GivePlayerEuro(playerid,-1200);
	AddVehicleComponent(v,1163);//Spoiler
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	}
	}
	else
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
		if (dialogid == DIALOG_GARAGE8) {
	if(response) {

	switch (listitem) {
	case 0:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Cutter umgetauscht!");
	AddVehicleComponent(v, 1079); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 1:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Rimshine umgetauscht!");
	AddVehicleComponent(v, 1075); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 2:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Mega umgetauscht!");
	AddVehicleComponent(v, 1074); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 3:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Grove umgetauscht!");
	AddVehicleComponent(v, 1081); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 4:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Switch umgetauscht!");
	AddVehicleComponent(v, 1080); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 5:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Shadow umgetauscht!");
	AddVehicleComponent(v, 1073); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 6:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Classic umgetauscht!");
	AddVehicleComponent(v, 1077); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 7:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Dollar umgetauscht!");
	AddVehicleComponent(v, 1083); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 8:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Import umgetauscht!");
	AddVehicleComponent(v, 1082); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 9:
	{
	if(geld < 1000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2500$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Reifen wurde erfolgreich zu Atomic umgetauscht!");
	AddVehicleComponent(v, 1085); // Reifen
	GivePlayerEuro(playerid,-1000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	}
	else
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if (dialogid == DIALOG_GARAGE7) {
	if(response) {

	switch (listitem) {
	case 0:
	{
	if(geld < 5000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (5000$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if(Neonlichter[v] == 1)
	{
		SendClientMessage(playerid,Rot,"In diesem Fahrzeug wurden schon Neonlichter verbaut!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	rot1[v] = CreateObject(18647,0,0,0,0,0,0);
	rot2[v] = CreateObject(18647,0,0,0,0,0,0);
	AttachObjectToVehicle(rot1[v], v, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	AttachObjectToVehicle(rot2[v], v, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	Neonlichter[v] = 1;
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurden erfolgreich rote Neonlichter eingebaut!");
	GivePlayerEuro(playerid,-5000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 1:
	{
	if(geld < 5000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (5000$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	grun1[v] = CreateObject(18649,0,0,0,0,0,0);
	grun2[v] = CreateObject(18649,0,0,0,0,0,0);
	AttachObjectToVehicle(grun1[v], v, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	AttachObjectToVehicle(grun2[v], v, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	Neonlichter[v] = 6;
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurden erfolgreich grüne Neonlichter eingebaut!");
	GivePlayerEuro(playerid,-5000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 2:
	{
	if(geld < 5000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (5000$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	blau1[v] = CreateObject(18648,0,0,0,0,0,0);
	blau2[v] = CreateObject(18648,0,0,0,0,0,0);
	AttachObjectToVehicle(blau1[v], v, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	AttachObjectToVehicle(blau2[v], v, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	Neonlichter[v] = 2;
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurden erfolgreich blaue Neonlichter eingebaut!");
	GivePlayerEuro(playerid,-5000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 3:
	{
	if(geld < 5000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (5000$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	gelb1[v] = CreateObject(18650,0,0,0,0,0,0);
	gelb2[v] = CreateObject(18650,0,0,0,0,0,0);
	AttachObjectToVehicle(gelb1[v], v, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	AttachObjectToVehicle(gelb2[v], v, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	Neonlichter[v] = 3;
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurden erfolgreich gelbe Neonlichter eingebaut!");
	GivePlayerEuro(playerid,-5000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 4:
	{
	if(geld < 5000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (5000$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	weis1[v] = CreateObject(18652,0,0,0,0,0,0);
	weis2[v] = CreateObject(18652,0,0,0,0,0,0);
	AttachObjectToVehicle(weis1[v], v, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	AttachObjectToVehicle(weis2[v], v, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	Neonlichter[v] = 4;
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurden erfolgreich weiße Neonlichter eingebaut!");
	GivePlayerEuro(playerid,-5000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 5:
	{
	if(geld < 5000)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (5000$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	pinke1[v] = CreateObject(18651,0,0,0,0,0,0);
	pinke2[v] = CreateObject(18651,0,0,0,0,0,0);
	AttachObjectToVehicle(pinke1[v], v, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	AttachObjectToVehicle(pinke2[v], v, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	Neonlichter[v] = 5;
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurden erfolgreich pinke Neonlichter eingebaut!");
	GivePlayerEuro(playerid,-5000);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	}
	else
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	if (dialogid == DIALOG_GARAGE2) {
		new Color1,Color2;
		GetVehicleColor(v, Color1, Color2);
		if(response) {

		switch (listitem) {
		case 0:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,0,Color2);
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Schwarz)!");
		GivePlayerEuro(playerid,-150);
		RepairVehicle(GetPlayerVehicleID(playerid));
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 1:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,1,Color2);
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Weiß)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 2:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,7,Color2);
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Blau)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 3:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,16,Color2);
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Grün)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 4:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,6,Color2);
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Gelb)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 5:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,3,Color2);
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Rot)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		}
		}
		else
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		if (dialogid == DIALOG_GARAGE4) {
		new Color1,Color2;
		GetVehicleColor(v, Color1, Color2);
		if(response) {

		switch (listitem) {
		case 0:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,Color1,0);
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe2 wurde erfolgreich umlackiert (Schwarz)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 1:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,Color1,1);
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe2 wurde erfolgreich umlackiert (Weiß)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 2:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		RepairVehicle(GetPlayerVehicleID(playerid));
		ChangeVehicleColor(v,Color1,7);
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe2 wurde erfolgreich umlackiert (Blau)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 3:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		RepairVehicle(GetPlayerVehicleID(playerid));
		ChangeVehicleColor(v,Color1,16);
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe2 wurde erfolgreich umlackiert (Grün)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 4:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,Color1,6);
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe2 wurde erfolgreich umlackiert (Gelb)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 5:
		{
		if(geld < 150)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		ChangeVehicleColor(v,Color1,3);
		RepairVehicle(GetPlayerVehicleID(playerid));
		SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe2 wurde erfolgreich umlackiert (Rot)!");
		GivePlayerEuro(playerid,-150);
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		}
		}
		else
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		if (dialogid == DIALOG_GARAGE6) {
		if(response) {

		switch (listitem) {
		case 0:
		{
		if(geld < 2000)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2000$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurde erfolgreich 2x Nitro eingebaut!");
		GivePlayerEuro(playerid,-2000);
		AddVehicleComponent(v,1008);//nitro x2
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 1:
		{
		if(geld < 5000)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (5000$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurde erfolgreich 5x Nitro eingebaut!");
		GivePlayerEuro(playerid,-5000);
		AddVehicleComponent(v,1008);//nitro x5
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		case 2:
		{
		if(geld < 10000)
		{
		SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (10000$)!");
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurde erfolgreich 10x Nitro eingebaut!");
		GivePlayerEuro(playerid,-10000);
		AddVehicleComponent(v,1010);//nitro x10
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		}
		}
		}
		else
		ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
		}
	if(dialogid == DIALOG_GARAGE3) {
	if(response) {
		ShowPlayerDialog(playerid,DIALOG_GARAGE2, DIALOG_STYLE_LIST, "Farbauswahl Farbe1", "{00AA00}1.{FFFFFF}Schwarz\n{00AA00}2.{FFFFFF}Weiß\n{00AA00}3.{FFFFFF}Blau\n{00AA00}4.{FFFFFF}Grün\n{00AA00}5.{FFFFFF}Gelb\n{00AA00}6.{FFFFFF}Rot", "Faerben", "Abbrechen");
	}
	else {
		ShowPlayerDialog(playerid,DIALOG_GARAGE4, DIALOG_STYLE_LIST, "Farbauswahl Farbe2", "{00AA00}1.{FFFFFF}Schwarz\n{00AA00}2.{FFFFFF}Weiß\n{00AA00}3.{FFFFFF}Blau\n{00AA00}4.{FFFFFF}Grün\n{00AA00}5.{FFFFFF}Gelb\n{00AA00}6.{FFFFFF}Rot", "Faerben", "Abbrechen");
	}
}
	if (dialogid == DIALOG_GARAGE1) {
		if(response) {

			switch (listitem) {
				case 0:
				{
					ShowPlayerDialog(playerid,DIALOG_GARAGE3,DIALOG_STYLE_MSGBOX,"Farbenauswahl","Welche Farbe möchtest du {FFFF00}umlackieren?","Farbe1","Farbe2");
				}
				case 1:
				{
					if(!IsAPaintjobCar(v))
					{
						SendClientMessage(playerid, Rot,"Dieses Fahrzeug ist nicht Paintjob kompatible!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE5, DIALOG_STYLE_LIST, "Paintjobauswahl", "{00AA00}1.{FFFFFF}Paintjob1\n{00AA00}2.{FFFFFF}Paintjob2\n{00AA00}3.{FFFFFF}Paintjob3", "Auswählen", "Abbrechen");
				}
				case 2:
				{
					if(!IsPlayerInInvalidNosVehicle(playerid))
					{
						SendClientMessage(playerid, Rot,"Dieses Fahrzeug ist nicht Nitro kompatible!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE6, DIALOG_STYLE_LIST, "Nitroauswahl", "{00AA00}1.{FFFFFF}Nitro 2x\n{00AA00}2.{FFFFFF}Nitro 5x\n{00AA00}3.{FFFFFF}Nitro 10x", "Einbauen", "Abbrechen");
				}
				case 3:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Dieses Fahrzeug ist nicht mit unseren Neonlichtern kompatible!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE7, DIALOG_STYLE_LIST, "Neonlichterauswahl", "{00AA00}1.{FFFFFF}Rot\n{00AA00}2.{FFFFFF}Grün\n{00AA00}3.{FFFFFF}Blau\n{00AA00}4.{FFFFFF}Gelb\n{00AA00}5.{FFFFFF}Weiß\n{00AA00}6.{FFFFFF}Pink", "Einbauen", "Abbrechen");
				}
				case 4:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Dieses Fahrzeug ist nicht mit unseren Reifen kompatible!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE8, DIALOG_STYLE_LIST, "Reifenauswahl", "{00AA00}1.{FFFFFF}Cutter\n{00AA00}2.{FFFFFF}Rimshine\n{00AA00}3.{FFFFFF}Mega\n{00AA00}4.{FFFFFF}Grove\n{00AA00}5.{FFFFFF}Switch\n{00AA00}6.{FFFFFF}Shadow\n{00AA00}7.{FFFFFF}Classic\n{00AA00}8.{FFFFFF}Dollar\n{00AA00}9.{FFFFFF}Import\n{00AA00}6.{FFFFFF}Atomic", "Einbauen", "Abbrechen");
				}
				case 5:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Motorräder können keine Soundanlagen eingebaut bekommen!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(geld < 1000)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (1000$)!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich eine Soundanlage verbaut!");
					GivePlayerEuro(playerid,-1000);
					AddVehicleComponent(v,1086);//soundanlage
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");

				}
				case 6:
				{
					if(model == 452)
					{
						SendClientMessage(playerid, Rot,"Dieses Fahrzeug hat schon einen Spoiler!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Motorräder können keine Spoiler eingebaut bekommen!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(IsANotSpoilerCar(v))
					{
						SendClientMessage(playerid, Rot,"Dieses Fahrzeug ist nicht mit unseren Spoilern kompatible!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE9, DIALOG_STYLE_LIST, "Spoilerauswahl", "{00AA00}1.{FFFFFF}Spoiler Pro\n{00AA00}2.{FFFFFF}Spoiler Win\n{00AA00}3.{FFFFFF}Spoiler Drag\n{00AA00}4.{FFFFFF}Spoiler Alpha\n{00AA00}5.{FFFFFF}Spoiler Champ\n{00AA00}6.{FFFFFF}Spoiler Race\n{00AA00}7.{FFFFFF}Spoiler Worcx\n{00AA00}8.{FFFFFF}Spoiler Alien\n{00AA00}9.{FFFFFF}Spoiler X-Flow", "Einbauen", "Abbrechen");
				}
				case 7:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Motorräder können keine nicht mit Hydraulik ausgestattet werden!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(geld < 2000)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (2000$)!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In dein Fahrzeug wurde erfolgreich eine neue Hydraulik installiert!");
					GivePlayerEuro(playerid,-2000);
					AddVehicleComponent(v,1087);//soundanlage
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				case 8:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Motorräder können sich keine Auspuffe montieren lassen!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(geld < 700)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (700$)!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE10, DIALOG_STYLE_LIST, "Auspuffauswahl", "{00AA00}1.{FFFFFF}Auspuff Upswept\n{00AA00}2.{FFFFFF}Auspuff Twin\n{00AA00}3.{FFFFFF}Auspuff Large\n{00AA00}4.{FFFFFF}Auspuff Medium\n{00AA00}5.{FFFFFF}Auspuff Small\n{00AA00}6.{FFFFFF}Auspuff Alien\n{00AA00}7.{FFFFFF}Auspuff X-Flow\n{00AA00}8.{FFFFFF}Auspuff Slami\n{00AA00}9.{FFFFFF}Auspuff Chrome", "Einbauen", "Abbrechen");
				}
				case 9:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Motorräder haben keine Dächer!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(geld < 600)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (600$)!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE11, DIALOG_STYLE_LIST, "Dach Extras", "{00AA00}1.{FFFFFF}Dach Scoop\n{00AA00}2.{FFFFFF}Dach Alien\n{00AA00}3.{FFFFFF}Dach X-Flow\n{00AA00}4.{FFFFFF}Dach Covertible\n{00AA00}5.{FFFFFF}Dach Hardtop\n{00AA00}6.{FFFFFF}Dach Softtop", "Einbauen", "Abbrechen");
				}
				case 10:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Motorräder haben keine Heckstoßstangen!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(geld < 500)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (500$)!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE14, DIALOG_STYLE_LIST, "Heckstoßstangen", "{00AA00}1.{FFFFFF}Alien Heckstoßstange\n{00AA00}2.{FFFFFF}X-Flow Heckstoßstange\n{00AA00}3.{FFFFFF}Chrome Heckstoßstange\n{00AA00}4.{FFFFFF}Slamin Heckstoßstange", "Einbauen", "Abbrechen");
				}
				case 11:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Motorräder haben keine Frontstoßstangen!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(geld < 500)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (500$)!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE15, DIALOG_STYLE_LIST, "Frontstoßstangen", "{00AA00}1.{FFFFFF}Alien Heckstoßstange\n{00AA00}2.{FFFFFF}X-Flow Heckstoßstange\n{00AA00}3.{FFFFFF}Chrome Heckstoßstange\n{00AA00}4.{FFFFFF}Slamin Heckstoßstange", "Einbauen", "Abbrechen");
				}
				case 12:
				{
					if(IsABike(v))
					{
						SendClientMessage(playerid, Rot,"Motorräder haben keine Seitenteile!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					if(geld < 300)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_GARAGE16, DIALOG_STYLE_LIST,
					"Seitenteile", "{00AA00}1.{FFFFFF}Linkes Seitenteil\n{00AA00}2.{FFFFFF}Rechtes Seitenteil\n{00AA00}3.{FFFFFF}Rechtes Alien Seitenteil\n{00AA00}4.{FFFFFF}Linkes Alien Seitenteil\n{00AA00}5.{FFFFFF}Rechtes X-Flow Seitenteil\n{00AA00}6.{FFFFFF}Linkes X-Flow Seitenteil\n{00AA00}7.{FFFFFF}Rechtes Chrome Seitenteil\n{00AA00}8.{FFFFFF}Linkes Chrome Seitenteil\n{00AA00}9.{FFFFFF}Rechtes Wheelcovers Seitenteil\n{00AA00}10.{FFFFFF}Linkes Wheelcovers Seitenteil", "Einbauen", "Abbrechen");
				}
			}
		}
		else
		{
		    TogglePlayerControllable(playerid, true);
		    SetPVarInt(playerid, "Garage", 0);
		    Tuninggarage = 0;
		}
		return 1;
	}
	if (dialogid == DIALOG_GARAGE5) {
if(response) {

switch (listitem) {
case 0:
{
if(geld < 500)
{
SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (500$)!");
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
return 1;
}
PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
SendClientMessage(playerid,COLOR_WHITE,"Dein Fahrzeug Paintjob wurde erfolgreich geändert. (1)!");
GivePlayerEuro(playerid,-500);
ChangeVehiclePaintjob(v, 0);
RepairVehicle(GetPlayerVehicleID(playerid));
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
}
case 1:
{
if(geld < 500)
{
SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (500$)!");
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
return 1;
}
PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
SendClientMessage(playerid,COLOR_WHITE,"Dein Fahrzeug Paintjob wurde erfolgreich geändert. (2)!");
GivePlayerEuro(playerid,-500);
ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), 1);
RepairVehicle(GetPlayerVehicleID(playerid));
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
}
case 2:
{
if(geld < 500)
{
SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (500$)!");
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
return 1;
}
PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
SendClientMessage(playerid,COLOR_WHITE,"Dein Fahrzeug Paintjob wurde erfolgreich geändert. (3)!");
GivePlayerEuro(playerid,-500);
ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), 2);
RepairVehicle(GetPlayerVehicleID(playerid));
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
}
}
}
else
ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
return 1;
}
	if (dialogid == DIALOG_GARAGE2) {
	new Color1,Color2;
	GetVehicleColor(v, Color1, Color2);
	if(response) {

	switch (listitem) {
	case 0:
	{
	if(geld < 150)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	ChangeVehicleColor(v,0,Color2);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Schwarz)!");
	GivePlayerEuro(playerid,-150);
	RepairVehicle(GetPlayerVehicleID(playerid));
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 1:
	{
	if(geld < 150)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	ChangeVehicleColor(v,1,Color2);
	RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Weiß)!");
	GivePlayerEuro(playerid,-150);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 2:
	{
	if(geld < 150)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	ChangeVehicleColor(v,7,Color2);
	SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Blau)!");
	GivePlayerEuro(playerid,-150);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 3:
	{
	if(geld < 150)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	ChangeVehicleColor(v,16,Color2);
	RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Grün)!");
	GivePlayerEuro(playerid,-150);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 4:
	{
	if(geld < 150)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	ChangeVehicleColor(v,6,Color2);
	RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Gelb)!");
	GivePlayerEuro(playerid,-150);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	case 5:
	{
	if(geld < 150)
	{
	SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (150$)!");
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
	}
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	ChangeVehicleColor(v,3,Color2);
	RepairVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid,COLOR_WHITE,"Deine Fahrzeug Farbe1 wurde erfolgreich umlackiert (Rot)!");
	GivePlayerEuro(playerid,-150);
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	}
	}
	}
	else
	ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
	"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
	return 1;
 }
	if (dialogid == DIALOG_GARAGE16) { //Seitenteile Dialog
		if(response == 0)
	{
	    ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
		"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
		return 1;
	}
	if(response) {

		switch (listitem) {
			case 0:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(IsALocoCar(v) || IsAWAACar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
				GivePlayerEuro(playerid,-300);
				AddVehicleComponent(v,1007);//Seitenteil
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			case 1:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(IsALocoCar(v) || IsAWAACar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
				GivePlayerEuro(playerid,-300);
				AddVehicleComponent(v,1017);//Seitenteil
				ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
				"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
			}
			case 2:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(!IsAWAACar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if (GetVehicleModel(v) == 565) //Flash
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1047);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 561) //Stratum
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1056);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 560) //Sultan
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1026);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 562) //Elegy
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1036);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 559) //Jester
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1069);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 558) //Uranus
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-500);
					AddVehicleComponent(v,1090);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
			}
			case 3:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(!IsAWAACar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if (GetVehicleModel(v) == 565) //Flash
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1051);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 561) //Stratum
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1062);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjobn{00AA00}3. {FFFFFF}Nitron{00AA00}4. {FFFFFF}Neonlichtern{00AA00}5. {FFFFFF}Reifenn{00AA00}6. {FFFFFF}Soundanlagen{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulikn{00AA00}8. {FFFFFF}Auspuffn{00AA00}9. {FFFFFF}Dachn{00AA00}10. {FFFFFF}Heckstoßstangen{00AA00}11. {FFFFFF}Frontstoßstangen{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 560) //Sultan
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1027);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 562) //Elegy
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1040);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe{00AA00}2. {FFFFFF}Paintjobn{00AA00}3. {FFFFFF}Nitron{00AA00}4. {FFFFFF}Neonlichtern{00AA00}5. {FFFFFF}Reifenn{00AA00}6. {FFFFFF}Soundanlagen{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulikn{00AA00}8. {FFFFFF}Auspuffn{00AA00}9. {FFFFFF}Dachn{00AA00}10. {FFFFFF}Heckstoßstangen{00AA00}11. {FFFFFF}Frontstoßstangen{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 559) //Jester
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1071);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 558) //Uranus
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-500);
					AddVehicleComponent(v,1094);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
			}
			case 4:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(!IsAWAACar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if (GetVehicleModel(v) == 565) //Flash
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1048);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 561) //Stratum
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1057);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 560) //Sultan
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1031);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 562) //Elegy
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1039);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 559) //Jester
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1070);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 558) //Uranus
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-500);
					AddVehicleComponent(v,1093);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
			}
			case 5:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(!IsAWAACar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if (GetVehicleModel(v) == 565) //Flash
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1052);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 561) //Stratum
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1063);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 560) //Sultan
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1030);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 562) //Elegy
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);{
					AddVehicleComponent(v,1039);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					}
					if (GetVehicleModel(v) == 559) //Jester
					{
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
						GivePlayerEuro(playerid,-300);
						AddVehicleComponent(v,1072);//Seitenteil
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farben{00AA00}2. {FFFFFF}Paintjobn{00AA00}3. {FFFFFF}Nitron{00AA00}4. {FFFFFF}Neonlichtern{00AA00}5. {FFFFFF}Reifenn{00AA00}6. {FFFFFF}Soundanlagen{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulikn{00AA00}8. {FFFFFF}Auspuffn{00AA00}9. {FFFFFF}Dachn{00AA00}10. {FFFFFF}Heckstoßstangen{00AA00}11. {FFFFFF}Frontstoßstangen{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					}
					if (GetVehicleModel(v) == 558) //Uranus
					{
						SendClientMessage(playerid,Rot,"Der Uranus hat kein linkes X-Flow Seitenteil!");
						ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
						"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farben{00AA00}2. {FFFFFF}Paintjobn{00AA00}3. {FFFFFF}Nitron{00AA00}4. {FFFFFF}Neonlichtern{00AA00}5. {FFFFFF}Reifenn{00AA00}6. {FFFFFF}Soundanlagen{00AA00}6. {FFFFFF}Spoilern{00AA00}7. {FFFFFF}Hydraulikn{00AA00}8. {FFFFFF}Auspuffn{00AA00}9. {FFFFFF}Dachn{00AA00}10. {FFFFFF}Heckstoßstangen{00AA00}11. {FFFFFF}Frontstoßstangen{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
						return 1;
					}
				}
			}
			case 6:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(!IsALocoCar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if (GetVehicleModel(v) == 575) //Broadway
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1042);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 534) //Remington
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1106);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 576) //Tornado
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1134);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 536) //Blade
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1108);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 567) //Savanna
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1133);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 535) //SlamVan
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1118);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
			}
			case 7:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(!IsALocoCar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if (GetVehicleModel(v) == 575) //Broadway
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1099);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 534) //Remington
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1101);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 576) //Tornado
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1137);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 536) //Blade
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1107);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 567) //Savanna
				{
					SendClientMessage(playerid,Rot,"Der Savanna hat kein linkes Seitenteil!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 535) //SlamVan
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1120);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
			}
			case 8:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(!IsALocoCar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if (GetVehicleModel(v) == 575) //Broadway
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 534) //Remington
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 576) //Tornado
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 536) //Blade
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 567) //Savanna
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 535) //SlamVan
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1119);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
			}
			case 9:
			{
				if(geld < 300)
				{
					SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300$)!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if(!IsALocoCar(v))
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
					return 1;
				}
				if (GetVehicleModel(v) == 575) //Broadway
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 534) //Remington
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 576) //Tornado
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 536) //Blade
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 567) //Savanna
				{
					SendClientMessage(playerid,Rot,"Dieses Seitenteil ist nicht mit deinem Fahrzeug kompatible!");
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
				if (GetVehicleModel(v) == 535) //SlamVan
				{
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"In deinem Fahrzeug wurde erfolgreich ein neues Seitenteil montiert!");
					GivePlayerEuro(playerid,-300);
					AddVehicleComponent(v,1121);//Seitenteil
					ShowPlayerDialog(playerid, DIALOG_GARAGE1, DIALOG_STYLE_LIST,
					"Premium Tuninggarage","{00AA00}1. {FFFFFF}Farbe\n{00AA00}2. {FFFFFF}Paintjob\n{00AA00}3. {FFFFFF}Nitro\n{00AA00}4. {FFFFFF}Neonlichter\n{00AA00}5. {FFFFFF}Reifen\n{00AA00}6. {FFFFFF}Soundanlage\n{00AA00}6. {FFFFFF}Spoiler\n{00AA00}7. {FFFFFF}Hydraulik\n{00AA00}8. {FFFFFF}Auspuff\n{00AA00}9. {FFFFFF}Dach\n{00AA00}10. {FFFFFF}Heckstoßstange\n{00AA00}11. {FFFFFF}Frontstoßstange\n{00AA00}12. {FFFFFF}Seitenteile", "Auswählen", "Abbrechen");
				}
			}
  }
	}
}
	if(dialogid == SUPPORTER1)
	{
	    if(response == 1)
	    {
         	ClearChatBWT(playerid);
	        Bewerberpunkte[playerid] = 0;
	        SendClientMessage(playerid,Weiß,"Kannst du dich gut in andere hineinversetzen?");
	        ShowPlayerDialog(playerid,SUPPORTER2,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER2)
	{
	    if(response == 0)
	    {
	        SendClientMessage(playerid,Weiß,"Kannst du dich gut in andere hineinversetzen?");
	        ShowPlayerDialog(playerid,SUPPORTER2,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Hast du ein offenes Ohr für Probleme?");
		        ShowPlayerDialog(playerid,SUPPORTER3,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Hast du ein offenes Ohr für Probleme?");
		        ShowPlayerDialog(playerid,SUPPORTER3,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Hast du ein offenes Ohr für Probleme?");
		        ShowPlayerDialog(playerid,SUPPORTER3,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER3)
	{
 		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Hast du ein offenes Ohr für Probleme?");
     		ShowPlayerDialog(playerid,SUPPORTER3,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Äußerst du deine Meinung so, dass andere sich verletzt fühlen können?");
		        ShowPlayerDialog(playerid,SUPPORTER4,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Äußerst du deine Meinung so, dass andere sich verletzt fühlen können?");
		        ShowPlayerDialog(playerid,SUPPORTER4,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Äußerst du deine Meinung so, dass andere sich verletzt fühlen können?");
		        ShowPlayerDialog(playerid,SUPPORTER4,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER4)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Äußerst du deine Meinung so, dass andere sich verletzt fühlen können?");
       		ShowPlayerDialog(playerid,SUPPORTER4,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du dich in Konflikten auf einen Kompromiss einlassen?");
		        ShowPlayerDialog(playerid,SUPPORTER5,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du dich in Konflikten auf einen Kompromiss einlassen?");
		        ShowPlayerDialog(playerid,SUPPORTER5,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du dich in Konflikten auf einen Kompromiss einlassen?");
		        ShowPlayerDialog(playerid,SUPPORTER5,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER5)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Kannst du dich in Konflikten auf einen Kompromiss einlassen?");
       		ShowPlayerDialog(playerid,SUPPORTER5,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 1;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Respektierst du die Meinung anderer Spieler?");
		        ShowPlayerDialog(playerid,SUPPORTER6,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Respektierst du die Meinung anderer Spieler?");
		        ShowPlayerDialog(playerid,SUPPORTER6,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 3;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Respektierst du die Meinung anderer Spieler?");
		        ShowPlayerDialog(playerid,SUPPORTER6,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER6)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Respektierst du die Meinung anderer Spieler?");
       		ShowPlayerDialog(playerid,SUPPORTER6,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du akzeptieren, dass andere Spieler ein anderen Spielstyle haben?");
		        ShowPlayerDialog(playerid,SUPPORTER7,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du akzeptieren, dass andere Spieler ein anderen Spielstyle haben?");
		        ShowPlayerDialog(playerid,SUPPORTER7,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du akzeptieren, dass andere Spieler ein anderen Spielstyle haben?");
		        ShowPlayerDialog(playerid,SUPPORTER7,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER7)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Kannst du akzeptieren, dass andere Spieler ein anderen Spielstyle haben?");
     		ShowPlayerDialog(playerid,SUPPORTER7,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du Mitspielern vergeben?");
		        ShowPlayerDialog(playerid,SUPPORTER8,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du Mitspielern vergeben?");
		        ShowPlayerDialog(playerid,SUPPORTER8,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Kannst du Mitspielern vergeben?");
		        ShowPlayerDialog(playerid,SUPPORTER8,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER8)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Kannst du Mitspielern vergeben?");
       		ShowPlayerDialog(playerid,SUPPORTER8,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Gibst du Spielern einen Vertrauensvorschuss?");
		        ShowPlayerDialog(playerid,SUPPORTER9,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Gibst du Spielern einen Vertrauensvorschuss?");
		        ShowPlayerDialog(playerid,SUPPORTER9,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Gibst du Spielern einen Vertrauensvorschuss?");
		        ShowPlayerDialog(playerid,SUPPORTER9,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER9)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Gibst du Spielern einen Vertrauensvorschuss?");
     		ShowPlayerDialog(playerid,SUPPORTER9,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Redest du offen über deine Leistungen und Erfolge?");
		        ShowPlayerDialog(playerid,SUPPORTER10,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Redest du offen über deine Leistungen und Erfolge?");
		        ShowPlayerDialog(playerid,SUPPORTER10,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Redest du offen über deine Leistungen und Erfolge?");
		        ShowPlayerDialog(playerid,SUPPORTER10,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER10)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Redest du offen über deine Leistungen und Erfolge?");
     		ShowPlayerDialog(playerid,SUPPORTER10,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 1;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Behandelst du jeden Mitspieler fair?");
		        ShowPlayerDialog(playerid,SUPPORTER11,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Behandelst du jeden Mitspieler fair?");
		        ShowPlayerDialog(playerid,SUPPORTER11,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 3;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Behandelst du jeden Mitspieler fair?");
		        ShowPlayerDialog(playerid,SUPPORTER11,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER11)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Behandelst du jeden Mitspieler fair?");
     		ShowPlayerDialog(playerid,SUPPORTER11,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 1;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Sorgst du strengstens dafür, dass auf dem Server Frieden herrscht?");
		        ShowPlayerDialog(playerid,SUPPORTER12,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Sorgst du strengstens dafür, dass auf dem Server Frieden herrscht?");
		        ShowPlayerDialog(playerid,SUPPORTER12,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 3;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Sorgst du strengstens dafür, dass auf dem Server Frieden herrscht?");
		        ShowPlayerDialog(playerid,SUPPORTER12,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER12)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Sorgst du strengstens dafür, dass auf dem Server Frieden herrscht?");
       		ShowPlayerDialog(playerid,SUPPORTER12,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Hilfst du den Spielern wenn Sie private Probleme haben?");
		        ShowPlayerDialog(playerid,SUPPORTER13,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Hilfst du den Spielern wenn Sie private Probleme haben?");
		        ShowPlayerDialog(playerid,SUPPORTER13,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Hilfst du den Spielern wenn Sie private Probleme haben?");
		        ShowPlayerDialog(playerid,SUPPORTER13,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER13)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Hilfst du den Spielern wenn Sie private Probleme haben?");
       		ShowPlayerDialog(playerid,SUPPORTER13,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	       	ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Bist du ein umgänglicher Mensch?");
		        ShowPlayerDialog(playerid,SUPPORTER14,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Bist du ein umgänglicher Mensch?");
		        ShowPlayerDialog(playerid,SUPPORTER14,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Bist du ein umgänglicher Mensch?");
		        ShowPlayerDialog(playerid,SUPPORTER14,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER14)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Bist du ein umgänglicher Mensch?");
       		ShowPlayerDialog(playerid,SUPPORTER14,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Suchst du Lösungen für Probleme?");
		        ShowPlayerDialog(playerid,SUPPORTER15,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Suchst du Lösungen für Probleme?");
		        ShowPlayerDialog(playerid,SUPPORTER15,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Suchst du Lösungen für Probleme?");
		        ShowPlayerDialog(playerid,SUPPORTER15,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER15)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Suchst du Lösungen für Probleme?");
       		ShowPlayerDialog(playerid,SUPPORTER15,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Holst du zur Not Hilfe, wenn du keine Lösung für das Problem des Spielers findest?");
		        ShowPlayerDialog(playerid,SUPPORTER16,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Holst du zur Not Hilfe, wenn du keine Lösung für das Problem des Spielers findest?");
		        ShowPlayerDialog(playerid,SUPPORTER16,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Holst du zur Not Hilfe, wenn du keine Lösung für das Problem des Spielers findest?");
		        ShowPlayerDialog(playerid,SUPPORTER16,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER16)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Holst du zur Not Hilfe, wenn du keine Lösung für das Problem des Spielers findest?");
     		ShowPlayerDialog(playerid,SUPPORTER16,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Fühlst du dich in unbekannten Gegebenschaften unwohl?");
		        ShowPlayerDialog(playerid,SUPPORTER17,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Fühlst du dich in unbekannten Gegebenschaften unwohl?");
		        ShowPlayerDialog(playerid,SUPPORTER17,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Fühlst du dich in unbekannten Gegebenschaften unwohl?");
		        ShowPlayerDialog(playerid,SUPPORTER17,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER17)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Fühlst du dich in unbekannten Gegebenschaften unwohl?");
      		ShowPlayerDialog(playerid,SUPPORTER17,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 1;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Ist dir dein virtuelles Erscheinungsbild wichtig?");
		        ShowPlayerDialog(playerid,SUPPORTER18,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Ist dir dein virtuelles Erscheinungsbild wichtig?");
		        ShowPlayerDialog(playerid,SUPPORTER18,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 3;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Ist dir dein virtuelles Erscheinungsbild wichtig?");
		        ShowPlayerDialog(playerid,SUPPORTER18,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER18)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Ist dir dein virtuelles Erscheinungsbild wichtig?");
       		ShowPlayerDialog(playerid,SUPPORTER18,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Ja\n {FFFF00}2# {FFFFFF}Manchmal\n {FFFF00}3# {FFFFFF}Nein","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 3;
    	        ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Wie fandest du diesen Eignungstest?");
		        ShowPlayerDialog(playerid,SUPPORTER19,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Einfach\n {FFFF00}2# {FFFFFF}Angemessen\n {FFFF00}3# {FFFFFF}Schwer","Bestätigen","");
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Wie fandest du diesen Eignungstest?");
		        ShowPlayerDialog(playerid,SUPPORTER19,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Einfach\n {FFFF00}2# {FFFFFF}Angemessen\n {FFFF00}3# {FFFFFF}Schwer","Bestätigen","");
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
		        SendClientMessage(playerid,Weiß,"Wie fandest du diesen Eignungstest?");
		        ShowPlayerDialog(playerid,SUPPORTER19,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Einfach\n {FFFF00}2# {FFFFFF}Angemessen\n {FFFF00}3# {FFFFFF}Schwer","Bestätigen","");
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == SUPPORTER19)
	{
		if(response == 0)
	    {
  			ClearChatBWT(playerid);
     		SendClientMessage(playerid,Weiß,"Wie fandest du diesen Eignungstest?");
       		ShowPlayerDialog(playerid,SUPPORTER19,DIALOG_STYLE_LIST,"Supporter Eignungstest Frage #1","{FFFF00} 1# {FFFFFF}Einfach\n {FFFF00}2# {FFFFFF}Angemessen\n {FFFF00}3# {FFFFFF}Schwer","Bestätigen","");
	        return 1;
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            Bewerberpunkte[playerid] += 1;
       			ClearChatBWT(playerid);
       			ShowPlayerDialog(playerid, SUPPORTER20, DIALOG_STYLE_MSGBOX, "Eignungstest vollenden", "{FFFFFF}Du hast den Eignungstest erfolgreich beendet.\nIn kürze wird sich ein Administrator bei dir melden\nund dir das {FFFF00}Ergebnis {FFFFFF}mitteilen!", "Weiter","");
       			new Float:summe = Bewerberpunkte[playerid]/16;
       			new summe2 = floatround(summe, floatround_ceil);
	   			format(string,sizeof(string), "Der Spieler %s[%d] hat im Eignungstest den Schnitt %f erreicht.",GetName(playerid),playerid,summe);
    			SendAdminMessage(Rot, string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Der Spieler %s[%d] hat im Eignungstest den Schnitt %f [%d Punkte] erreicht.",day,month,year,hour,minute,second,GetName(playerid),playerid,summe2,Bewerberpunkte[playerid]);
				TestLog(string);
				Bewerberpunkte[playerid] = 0;
				ClearAnimations(playerid);
				SpawnPlayer(playerid);
				SetPVarInt(playerid,"Bewerbertest",0);
		        return 1;
   			}
			if(listitem == 1)
			{
			    Bewerberpunkte[playerid] += 3;
       			ClearChatBWT(playerid);
       			ShowPlayerDialog(playerid, SUPPORTER20, DIALOG_STYLE_MSGBOX, "Eignungstest vollenden", "{FFFFFF}Du hast den Eignungstest erfolgreich beendet.\nIn kürze wird sich ein Administrator bei dir melden\nund dir das {FFFF00}Ergebnis {FFFFFF}mitteilen!", "Weiter","");
       			new Float:summe = Bewerberpunkte[playerid]/16;
       			new summe2 = floatround(summe, floatround_ceil);
	   			format(string,sizeof(string), "Der Spieler %s[%d] hat im Eignungstest den Schnitt %f erreicht.",GetName(playerid),playerid,summe);
    			SendAdminMessage(Rot, string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Der Spieler %s[%d] hat im Eignungstest den Schnitt %f [%d Punkte] erreicht.",day,month,year,hour,minute,second,GetName(playerid),playerid,summe2,Bewerberpunkte[playerid]);
				TestLog(string);
				Bewerberpunkte[playerid] = 0;
				ClearAnimations(playerid);
				SpawnPlayer(playerid);
				SetPVarInt(playerid,"Bewerbertest",0);
		        return 1;
			}
			if(listitem == 2)
			{
			    Bewerberpunkte[playerid] += 2;
       			ClearChatBWT(playerid);
       			ShowPlayerDialog(playerid, SUPPORTER20, DIALOG_STYLE_MSGBOX, "Eignungstest vollenden", "{FFFFFF}Du hast den Eignungstest erfolgreich beendet.\nIn kürze wird sich ein Administrator bei dir melden\nund dir das {FFFF00}Ergebnis {FFFFFF}mitteilen!", "Weiter","");
       			new Float:summe = Bewerberpunkte[playerid]/16;
       			new summe2 = floatround(summe, floatround_ceil);
	   			format(string,sizeof(string), "Der Spieler %s[%d] hat im Eignungstest den Schnitt %f erreicht.",GetName(playerid),playerid,summe);
    			SendAdminMessage(Rot, string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Der Spieler %s[%d] hat im Eignungstest den Schnitt %f [%d Punkte] erreicht.",day,month,year,hour,minute,second,GetName(playerid),playerid,summe2,Bewerberpunkte[playerid]);
				TestLog(string);
				Bewerberpunkte[playerid] = 0;
				ClearAnimations(playerid);
				SpawnPlayer(playerid);
				SetPVarInt(playerid,"Bewerbertest",0);
		        return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == GPS)
	{
	    if(response == 1)
	    {
			if(listitem == 0)
			{
				GPSZone(playerid,1);
			}
			if(listitem == 1)
			{
			    GPSZone(playerid,2);
			}
			if(listitem == 2)
			{
			    GPSZone(playerid,3);
			}
			if(listitem == 3)
			{
			    GPSZone(playerid,4);
			}
			if(listitem == 4)
			{
			    GPSZone(playerid,5);
			}
			if(listitem == 5)
			{
			    GPSZone(playerid,6);
			}
			if(listitem == 6)
			{
			    GPSZone(playerid,7);
			}
			if(listitem == 7)
			{
			    GPSZone(playerid,8);
			}
			if(listitem == 8)
			{
			    GPSZone(playerid,9);
			}
			if(listitem == 9)
			{
			    GPSZone(playerid,10);
			}
			if(listitem == 10)
			{
			    GPSZone(playerid,11);
			}
			if(listitem == 11)
			{
			    GPSZone(playerid,12);
			}
			if(listitem == 12)
			{
			    GPSZone(playerid,13);
			}
			if(listitem == 13)
			{
			    GPSZone(playerid,14);
			}
			if(listitem == 14)
			{
			    GPSZone(playerid,15);
			}
			if(listitem == 15)
			{
			    GPSZone(playerid,16);
		    }
   			if(listitem == 16)
			{
			    // Garnichts hier ist beenden
		    }
	 	}
	 	if(response == 0)
	 	{
	  		ShowPlayerDialog(playerid, GPS2, DIALOG_STYLE_LIST,
			"Global Positioning System","{FFFFFF}Krankenhaus\nBank\nRathaus\nPolizei\nWohnviertel\nGangautohaus\nDer Auto Pate\nKFZ-Zulassungsstelle\nBeenden", "Auswählen", "Zurück");
	 	}
	 	return 1;
	}
	if(dialogid == GPS2)
	{
	    if(response == 1)
	    {
  			if(listitem == 0)
			{
				GPSZone(playerid,17);
			}
			if(listitem == 1)
			{
			    GPSZone(playerid,18);
			}
			if(listitem == 2)
			{
			    GPSZone(playerid,19);
			}
			if(listitem == 3)
			{
			    GPSZone(playerid,20);
			}
			if(listitem == 4)
			{
			    GPSZone(playerid,21);
			}
			if(listitem == 5)
			{
			    GPSZone(playerid,22);
			}
			if(listitem == 6)
			{
			    GPSZone(playerid,23);
			}
			if(listitem == 7)
			{
			    GPSZone(playerid,24);
			}
	    }
		if(response == 0)
		{
 			ShowPlayerDialog(playerid, GPS, DIALOG_STYLE_LIST,
			"Global Positioning System","{FFFFFF}Zivispawn\nKleidungsladen\nHandyladen\nBurgershot\nClub\nCasino\nPaintballarena\n24/7 Shop\nHotel\nLotto\nFahrschule\nProstituierte\nKirche\nTankstelle\nAmmunation\nPay'and'Spray\n", "Auswählen", "Weiter");
		}
		return 1;
	}
	if(dialogid == MS147)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	    }
	    if(response == 1)
  		{
  		    if(listitem == 0)
  		    {
  		        if(MS14Kasse < 55000)
  		        {
  		            SendClientMessage(playerid,Rot,"Soviel Geld ist nicht in der MS-14 Gangkasse vorhanden!");
  		            ShowPlayerDialog(playerid,MS147, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Waffenupgrade","{00FFFF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {00FFFF}(55.000)\n{00FFFF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{00FFFF}(65.000)\n{00FFFF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{00FFFF}(75.000)\n{00FFFF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {00FFFF}(85.000)", "Bestätigen", "Zurück");
  		            return 1;
  		        }
  		        MS14Upgrade = 2;
  		        MS14Kasse -= 55000;
   		      	ClearChat(playerid);
  		        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  		        SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Gangwaffen Sortiment auf Paket 4 geupgraded!");
  		        SendClientMessage(playerid,Gelb2,"Es stehen jetzt folgende Waffen zur Verfügung: Schlagring, 9mm, MP5.");
  		        return 1;
  		    }
  		    if(listitem == 1)
  		    {
        		if(MS14Kasse < 65000)
  		        {
  		            SendClientMessage(playerid,Rot,"Soviel Geld ist nicht in der MS-14 Gangkasse vorhanden!");
  		            ShowPlayerDialog(playerid,MS147, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Waffenupgrade","{00FFFF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {00FFFF}(55.000)\n{00FFFF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{00FFFF}(65.000)\n{00FFFF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{00FFFF}(75.000)\n{00FFFF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {00FFFF}(85.000)", "Bestätigen", "Zurück");
  		            return 1;
  		        }
  		        MS14Upgrade = 3;
  		        MS14Kasse -= 65000;
   		       	ClearChat(playerid);
  		        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  		        SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Gangwaffen Sortiment auf Paket 4 geupgraded!");
  		        SendClientMessage(playerid,Gelb2,"Es stehen jetzt folgende Waffen zur Verfügung: Baseballschläger, Deagle, AK-47.");
  		        return 1;
  		    }
  		    if(listitem == 2)
  		    {
        		if(MS14Kasse < 75000)
  		        {
  		            SendClientMessage(playerid,Rot,"Soviel Geld ist nicht in der MS-14 Gangkasse vorhanden!");
  		            ShowPlayerDialog(playerid,MS147, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Waffenupgrade","{00FFFF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {00FFFF}(55.000)\n{00FFFF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{00FFFF}(65.000)\n{00FFFF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{00FFFF}(75.000)\n{00FFFF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {00FFFF}(85.000)", "Bestätigen", "Zurück");
  		            return 1;
  		        }
  		        MS14Upgrade = 4;
  		        MS14Kasse -= 75000;
  		        ClearChat(playerid);
  		        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  		        SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Gangwaffen Sortiment auf Paket 4 geupgraded!");
  		        SendClientMessage(playerid,Gelb2,"Es stehen jetzt folgende Waffen zur Verfügung: Baseballschläger, Deagle, Tec-9, AK-47.");
  		        return 1;
  		    }
  		    if(listitem == 3)
  		    {
        		if(MS14Kasse < 85000)
  		        {
  		            SendClientMessage(playerid,Rot,"Soviel Geld ist nicht in der MS-14 Gangkasse vorhanden!");
  		            ShowPlayerDialog(playerid,MS147, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Waffenupgrade","{00FFFF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {00FFFF}(55.000)\n{00FFFF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{00FFFF}(65.000)\n{00FFFF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{00FFFF}(75.000)\n{00FFFF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {00FFFF}(85.000)", "Bestätigen", "Zurück");
  		            return 1;
  		        }
  		        MS14Upgrade = 5;
  		        MS14Kasse -= 85000;
  		        ClearChat(playerid);
  		        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
  		        SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Gangwaffen Sortiment auf Paket 4 geupgraded!");
  		        SendClientMessage(playerid,Gelb2,"Es stehen jetzt folgende Waffen zur Verfügung: Baseballschläger, Deagle, Tec-9, AK-47, Country Rifle.");
  		        return 1;
  		    }
	    }
	    return 1;
	}
	if(dialogid == MS146m)
	{
		if(response == 0)
		{
	 		ShowPlayerDialog(playerid, MS145m, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Materialienkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du die Materialien auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
		}
		if(response == 1)
		{
		    if(zahl > MS14MatKasse)
		    {
		        SendClientMessage(playerid,Rot,"Soviele Drogen sind nicht mehr in der MS-14 Materialienkasse vorhanden!");
		        ShowPlayerDialog(playerid,MS142m, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Materialienkasse Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
		        return 1;
		    }
		    new userid = GetPVarInt(playerid, "MS14NAME");
    	 	if (ProxDetectorS(5.0, playerid, userid))
			{
    		    sStats[playerid][sMats] += zahl;
    		    MS14MatKasse=-zahl;
    		    PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);
    		    format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {00FFFF}%s{FFFFFF}%d Materialien aus der MS-14 Materialienkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
    		    format(string, sizeof(string), "%s hat dir erfolgreich {00FFFF}%d Materialien{FFFFFF} aus der MS-14 Materialienkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %s erfolgreich %d Materialien  aus der MS-14 Materialienkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl,GetName(userid));
				MS14Log(string);
				return 1;

    		}
    		else
   			{
   			    SendClientMessage(playerid,Rot,"Der Spieler ist nicht in der nähe von dir!");
   			    return 1;
   			}
		}
		return 1;
	}
	if(dialogid == MS145m)
	{
 		if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS142m, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Materialienkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
  		}
  		if(response == 1)
		{
    		if(IsPlayerNPC(zahl))
			{
			    SendClientMessage(playerid,Rot,"Du kannst keine Materialien an einem NPC/Bots ausgeben!");
			    ShowPlayerDialog(playerid, MS145m, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Materialienkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du die Drogen rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
			    return 1;
			}
			if(zahl == INVALID_PLAYER_ID)
			{
	   			SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	   			ShowPlayerDialog(playerid, MS145m, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Materialienkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
 				return 1;
			}
			    zahl = GetPVarInt(playerid, "MS14NAME");
				ShowPlayerDialog(playerid, MS146m, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Materialienkasse auszahlen", "{FFFFFF}Wie viele Materialien möchtest du aus der {00FFFF}MS-14 Materialienkasse{FFFFFF} rausgeben?", "Auszahlen", "Zurück");
				return 1;
		}
		return 1;
 	}
	if(dialogid == MS144m)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS142m, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Materialienkasse Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
  		}
  		if(response == 1)
  		{
    		if(zahl > sStats[playerid][sMats])
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht genug Materialien dabei!");
	            return 1;
	        }
	        format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {00FFFF}%d Materialien{FFFFFF} in die MS-14 Materialienkasse gezahlt.", zahl);
	        SendClientMessage(playerid,Weiß,string);
			sStats[playerid][sMats] -= zahl;
	        MS14MatKasse+=zahl;
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %d Materialien in die MS-14 Materialienkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl);
			MS14Log(string);
			return 1;
  		}
  		return 1;
 	}
	if(dialogid == MS143m)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,MS142m, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Materialienkasse Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
	    }
	    return 1;
	}
	if(dialogid == MS142m)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	        	if(MS14MatKasse < 1)
		        {
		            SendClientMessage(playerid,Rot,"Die MS-14 Materialienkasse ist leer!");
					return 1;
		        }
		        format(string, sizeof(string), "{FFFFFF}Der Inhalt der MS-14 Materialienkasse beträgt: {00FFFF}%d Materialien", MS14MatKasse);
		        ShowPlayerDialog(playerid, MS143m, DIALOG_STYLE_MSGBOX, "{00FFFF}MS-14 Materialienkasse", string, "Zurück", "");
		        return 1;
		 	}
		 	if(listitem == 1)
		 	{
		 	    ShowPlayerDialog(playerid, MS144m, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Materialienkasse einzahlen", "{FFFFFF}Wie viele Materialien möchtest du in die {00FFFF}MS-14 Materialienkasse{FFFFFF} einzahlen?", "Einzahlen", "Zurück");
		 	    return 1;
		 	}
		 	if(listitem == 2)
		 	{
		 	    if(sStats[playerid][sLeiter] != 5)
		 	    {
		 	        SendClientMessage(playerid,Rot,"Nur der Leader (Leiter) der MS-14 Gang kann Materialien aus der Materialienkasse vergeben!");
		 	        ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
		 	        return 1;
		 	    }
        		ShowPlayerDialog(playerid, MS145m, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Materialienkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du die Materialien rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
        		return 1;
		 	}
	    }
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	        return 1;
	    }
	    return 1;
 	}
	//Drogenkasse MS 14
	if(dialogid == MS146d)
	{
		if(response == 0)
		{
	 		ShowPlayerDialog(playerid, MS145d, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Drogenkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du die Drogen rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
	 		return 1;
		}
		if(response == 1)
		{
		    if(zahl > MS14DrogenKasse)
		    {
		        SendClientMessage(playerid,Rot,"Soviele Drogen sind nicht mehr in der MS-14 Drogenkasse vorhanden!");
		        ShowPlayerDialog(playerid,MS142d, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Drogenkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
		        return 1;
		    }
		    new userid = GetPVarInt(playerid, "MS14NAME");
    	 	if (ProxDetectorS(5.0, playerid, userid))
			{
    		    sStats[playerid][sDrogen] += zahl;
    		    MS14DrogenKasse=-zahl;
    		    PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);
    		    format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {00FFFF}%s{FFFFFF}%d Drogen aus der MS-14 Drogenkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
    		    format(string, sizeof(string), "%s hat dir erfolgreich {00FFFF}%d Drogen{FFFFFF} aus der MS-14 Drogenkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %s erfolgreich %d Drogen  aus der MS-14 Drogenkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl,GetName(userid));
				MS14Log(string);
				return 1;
    		}
    		else
   			{
   			    SendClientMessage(playerid,Rot,"Der Spieler ist nicht in der nähe von dir!");
   			    return 1;
   			}
		}
		return 1;
	}
	if(dialogid == MS145d)
	{
 		if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS142d, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Drogenkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
  		}
  		if(response == 1)
		{
    		if(IsPlayerNPC(zahl))
			{
			    SendClientMessage(playerid,Rot,"Du kannst keine Drogen an einem NPC/Bots ausgeben!");
			    ShowPlayerDialog(playerid, MS145d, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Drogenkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du die Drogen rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
			    return 1;
			}
			if(zahl == INVALID_PLAYER_ID)
			{
	   			SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	   			ShowPlayerDialog(playerid, MS145d, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Drogenkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
 				return 1;
			}
			    zahl = GetPVarInt(playerid, "MS14NAME");
				ShowPlayerDialog(playerid, MS146d, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Drogenkasse auszahlen", "{FFFFFF}Wie viele Drogen möchtest du aus der {00FFFF}MS-14 Drogenkasse{FFFFFF} rausgeben?", "Auszahlen", "Zurück");
				return 1;
		}
		return 1;
 	}
	if(dialogid == MS144d)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS142d, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Drogenkasse Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
  		}
  		if(response == 1)
  		{
    		if(zahl > sStats[playerid][sDrogen])
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht genug Drogen dabei!");
	            return 1;
	        }
	        format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {00FFFF}%d Drogen{FFFFFF} in die MS-14 Drogenkasse gezahlt.", zahl);
	        SendClientMessage(playerid,Weiß,string);
			sStats[playerid][sDrogen] -= zahl;
	        MS14DrogenKasse+=zahl;
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %d Drogen in die MS-14 Drogenkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl);
			MS14Log(string);
			return 1;
  		}
  		return 1;
 	}
	if(dialogid == MS143d)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,MS142d, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Drogenkasse Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
	    }
	    return 1;
	}
	if(dialogid == MS142d)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	        	if(MS14DrogenKasse < 1)
		        {
		            SendClientMessage(playerid,Rot,"Die MS-14 Drogenkasse ist leer!");
					return 1;
		        }
		        format(string, sizeof(string), "{FFFFFF}Der Inhalt der MS-14 Drogenkasse beträgt: {00FFFF}%d Drogen", MS14DrogenKasse);
		        ShowPlayerDialog(playerid, MS143d, DIALOG_STYLE_MSGBOX, "{00FFFF}MS-14 Drogenkasse", string, "Zurück", "");
		        return 1;
		 	}
		 	if(listitem == 1)
		 	{
		 	    ShowPlayerDialog(playerid, MS144d, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Drogenkasse einzahlen", "{FFFFFF}Wie viele Drogen möchtest du in die {00FFFF}MS-14 Drogenkasse{FFFFFF} einzahlen?", "Einzahlen", "Zurück");
		 	    return 1;
		 	}
		 	if(listitem == 2)
		 	{
		 	    if(sStats[playerid][sLeiter] != 5)
		 	    {
		 	        SendClientMessage(playerid,Rot,"Nur der Leader (Leiter) der MS-14 Gang kann Drogen aus der Drogenkasse vergeben!");
		 	        ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
		 	        return 1;
		 	    }
        		ShowPlayerDialog(playerid, MS145d, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Drogenkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du die Drogen rausgeben (ID nicht Spielername)?", "Auszahlen", "Zurück");
        		return 1;
		 	}
	    }
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	        return 1;
	    }
	    return 1;
 	}
	//Geld Kasse MS-14
	if(dialogid == MS146)
	{
		if(response == 0)
		{
	 		ShowPlayerDialog(playerid, MS145, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Gangkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
	 		return 1;
		}
		if(response == 1)
		{
		    if(zahl > MS14Kasse)
		    {
		        SendClientMessage(playerid,Rot,"Soviel ist nicht mehr in der MS-14 Gangkasse vorhanden!");
		        ShowPlayerDialog(playerid,MS142, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Gangkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
		        return 1;
		    }
		    new userid = GetPVarInt(playerid, "MS14NAME");
    	 	if (ProxDetectorS(5.0, playerid, userid))
			{
    		    GivePlayerEuro(userid,zahl);
    		    MS14Kasse=-zahl;
    		    PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);
    		    format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {00FFFF}%s{FFFFFF}%d aus der MS-14 Gangkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
    		    format(string, sizeof(string), "%s hat dir erfolgreich {00FFFF}%d{FFFFFF} aus der MS-14 Gangkasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %s erfolgreich %d  aus der MS-14 Gangkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl,GetName(userid));
				MS14Log(string);
				return 1;

    		}
    		else
   			{
   			    SendClientMessage(playerid,Rot,"Der Spieler ist nicht in der nähe von dir!");
   			    return 1;
   			}
		}
		return 1;
	}
	if(dialogid == MS145)
	{
 		if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS142, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Gangkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
  		}
  		if(response == 1)
		{
    		if(IsPlayerNPC(zahl))
			{
			    SendClientMessage(playerid,Rot,"Du kannst kein Geld an einem NPC/Bots auszahlen!");
			    ShowPlayerDialog(playerid, MS145, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Gangkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
			    return 1;
			}
			if(zahl == INVALID_PLAYER_ID)
			{
	   			SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	   			ShowPlayerDialog(playerid, MS145, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Gangkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
 				return 1;
			}
			    zahl = GetPVarInt(playerid, "MS14NAME");
				ShowPlayerDialog(playerid, MS146, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Gangkasse auszahlen", "{FFFFFF}Wie viel möchtest du aus der {00FFFF}MS-14 Gangkasse{FFFFFF} auszahlen?", "Auszahlen", "Zurück");
				return 1;
		}
		return 1;
 	}
	if(dialogid == MS144)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS142, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Gangkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
  		}
  		if(response == 1)
  		{
    		if(zahl > GetPlayerEuros(playerid))
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht soviel Geld dabei!");
	            return 1;
	        }
	        format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {00FFFF}%d{FFFFFF} in die MS-14 Gangkasse gezahlt.", zahl);
	        SendClientMessage(playerid,Weiß,string);
	        GivePlayerEuro(playerid,-zahl);
	        MS14Kasse+=zahl;
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %d in die MS-14 Gangkasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl);
			MS14Log(string);
			return 1;
  		}
  		return 1;
 	}
	if(dialogid == MS143)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,MS142, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Gangkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
	        return 1;
	    }
	    return 1;
	}
	if(dialogid == MS142)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	        	if(MS14Kasse < 1)
		        {
		            SendClientMessage(playerid,Rot,"Die MS-14 Gangkasse ist leer!");
					return 1;
		        }
		        format(string, sizeof(string), "{FFFFFF}Der Inhalt der MS-14 Gangkasse beträgt: {00FFFF}%d", MS14Kasse);
		        ShowPlayerDialog(playerid, MS143, DIALOG_STYLE_MSGBOX, "{00FFFF}MS-14 Gangkasse", string, "Zurück", "");
		        return 1;
		 	}
		 	if(listitem == 1)
		 	{
		 	    ShowPlayerDialog(playerid, MS144, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Gangkasse einzahlen", "{FFFFFF}Wie viel möchtest du in die {00FFFF}MS-14 Gangkasse{FFFFFF} einzahlen?", "Einzahlen", "Zurück");
		 	    return 1;
		 	}
		 	if(listitem == 2)
		 	{
    			if(sStats[playerid][sLeiter] != 5)
		 	    {
		 	        SendClientMessage(playerid,Rot,"Nur der Leader (Leiter) der MS-14 Gang kann Drogen aus der Drogenkasse vergeben!");
		 	        ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
		 	        return 1;
		 	    }
        		ShowPlayerDialog(playerid, MS145, DIALOG_STYLE_INPUT, "{00FFFF}MS-14 Gangkasse auszahlen", "{FFFFFF}Welchem {00FFFF}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
        		return 1;
		 	}
	    }
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
	        return 1;
	    }
	    return 1;
 	}
	if(dialogid == MS141)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
		 	{
            	ShowPlayerDialog(playerid,MS142, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Gangkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
            	return 1;
			}
   			if(listitem == 1)
		 	{
            	ShowPlayerDialog(playerid,MS142d, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Drogenkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
            	return 1;
			}
			if(listitem == 2)
		 	{
            	ShowPlayerDialog(playerid,MS142m, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Materialienkassen Verwaltung","{00FFFF}1. {FFFFFF}Übersicht\n{00FFFF}2. {FFFFFF}Einzahlen\n{00FFFF}3. {FFFFFF}Auszahlen", "Bestätigen", "Zurück");
            	return 1;
			}
			if(listitem == 3)
		 	{
    			if(sStats[playerid][sLeiter] != 5)
		 	    {
		 	        SendClientMessage(playerid,Rot,"Nur der Leader (Leiter) der MS-14 Gang kann ein Waffenupgrade veranlassen!");
		 	        ShowPlayerDialog(playerid,MS141, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Fraktionsverwaltung","{00FFFF}1. {FFFFFF}Gangkasse verwalten\n{00FFFF}2. {FFFFFF}Drogenkasse verwalten\n{00FFFF}3. {FFFFFF}Materialienkasse verwalten\n{00FFFF}4. {FFFFFF}Waffenupgrade", "Bestätigen", "Abbrechen");
		 	        return 1;
		 	    }
            	ShowPlayerDialog(playerid,MS147, DIALOG_STYLE_LIST, "{00FFFF}MS-14 Waffenupgrade","{00FFFF}Paket 1. {FFFFFF}Schlagring,9mm,MP5 {00FFFF}(55.000)\n{00FFFF}Paket 2. {FFFFFF}Baseballschläger,Deagle,AK-47{00FFFF}(65.000)\n{00FFFF}Paket 3. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47{00FFFF}(75.000)\n{00FFFF}Paket 4. {FFFFFF}Baseballschläger,Deagle,Tec-9,AK-47,Country Rifle {00FFFF}(85.000)", "Bestätigen", "Zurück");
            	return 1;
			}
	    }
	    return 1;
	}
	if(dialogid == BSPDHELP3)
	{
 		if(response == 1)
	    {
  			format(string3,sizeof(string3),
			"{FFFFFF}/switchtazer -- {C0C0C0}Zum Tazer wescheln.\n{FFFFFF}/fahrzeugback -- {C0C0C0}Fahrzeug zurück in die Garage fahren.\n{FFFFFF}/checkweapons -- {C0C0C0}Waffen des Spielers überprüfen.\n{FFFFFF}/maske -- {C0C0C0}Maske anziehen [SWAT].\n{FFFFFF}/checkwanteds -- {C0C0C0}Wanteds des Spielers überprüfen.");
			ShowPlayerDialog(playerid,BSPDHELP2,DIALOG_STYLE_MSGBOX,"{FFFF00}Bayside Police-Department Hilfebox",string3,"Weiter","Zurück");
	    }
	    if(response == 0)
	 	{
			format(string3,sizeof(string3),
			"{FFFFFF}/cuff/uncuff -- {C0C0C0}Legt einem Spieler Handschellen an/ab.\n{FFFFFF}/grab/ungrab -- {C0C0C0}Zieht/Wirft einen Spieler ins/aus Auto.\n{FFFFFF}/createnagelband -- {C0C0C0}Errichted ein Nagelband.\n{FFFFFF}/deletenagelband -- {C0C0C0}Vernichtet das Nagelband.\n{FFFFFF}/m -- {C0C0C0}Megafon.\n{FFFFFF}/su -- {C0C0C0}Wantedverteilung.\n{FFFFFF}/gsperre -- {C0C0C0}Große Sperre.\n{FFFFFF}/ticket -- {C0C0C0}Strafzettel.\n{FFFFFF}/ksperre -- {C0C0C0}Kleine Sperre.");
			ShowPlayerDialog(playerid,BSPDHELP2,DIALOG_STYLE_MSGBOX,"{FFFF00}Bayside Police-Department Hilfebox",string3,"Weiter","Zurück");
			return 1;
	 	}
	 	return 1;
	}
	if(dialogid == BSPDHELP2)
	{
	    if(response == 0)
	    {
	    	format(string3,sizeof(string3),
			"{FFFFFF}/bspdonline -- {C0C0C0}Onlineanzeige der Mitglieder.\n{FFFFFF}/duty -- {C0C0C0}Start des Dienstes.\n{FFFFFF}/opengate -- {C0C0C0}Öffnet die Türen.\n{FFFFFF}/bspdr -- {C0C0C0}Funkchat.\n{FFFFFF}/clear -- {C0C0C0}Aktenlöschung.\n{FFFFFF}/arrest -- {C0C0C0}Sperrt einen Verbrechen ein.\n{FFFFFF}/wanteds -- {C0C0C0}Verbrecherkartei.\n{FFFFFF}/backup -- {C0C0C0}Hilferuf.\n{FFFFFF}/d -- {C0C0C0}Staatsfunk.\n{FFFFFF}/undercover -- {C0C0C0}Undercover Uniform.");
			ShowPlayerDialog(playerid,BSPDHELP1,DIALOG_STYLE_MSGBOX,"{FFFF00}Bayside Police-Department Hilfebox",string3,"Weiter","Abbrechen");
	    }
	    if(response == 1)
	    {
  			format(string3,sizeof(string3),
			"{FFFFFF}/frisk -- {C0C0C0}Spieler durchsuchen.\n{FFFFFF}/ram -- {C0C0C0}Tür auftreten.\n{FFFFFF}/showmarke -- {C0C0C0}Dienstmarke zeigen.\n{FFFFFF}/take -- {C0C0C0}Sachen wegnehmen (z.B Waffen).\n{FFFFFF}/acceptpoli -- {C0C0C0}Notruf annehmen.\n{FFFFFF}/closepoli -- {C0C0C0}Notruf beenden.\n{FFFFFF}/sirene -- {C0C0C0}Undercover Sirene aktivieren/deaktivieren.\n{FFFFFF}/horten -- {C0C0C0}Handyortung.\n{FFFFFF}/closevr -- {C0C0C0}Verhörungsraum öffnen/schließen");
			ShowPlayerDialog(playerid,BSPDHELP3,DIALOG_STYLE_MSGBOX,"{FFFF00}Bayside Police-Department Hilfebox",string3,"Weiter","Zurück");
	    }
	    return 1;
	}
	if(dialogid == BSPDHELP1)
	{
	    if(response == 1)
	    {
			format(string3,sizeof(string3),
			"{FFFFFF}/cuff/uncuff -- {C0C0C0}Legt einem Spieler Handschellen an/ab.\n{FFFFFF}/grab/ungrab -- {C0C0C0}Zieht/Wirft einen Spieler ins/aus Auto.\n{FFFFFF}/createnagelband -- {C0C0C0}Errichted ein Nagelband.\n{FFFFFF}/deletenagelband -- {C0C0C0}Vernichtet das Nagelband.\n{FFFFFF}/m -- {C0C0C0}Megafon.\n{FFFFFF}/su -- {C0C0C0}Wantedverteilung.\n{FFFFFF}/gsperre -- {C0C0C0}Große Sperre.\n{FFFFFF}/ticket -- {C0C0C0}Strafzettel.\n{FFFFFF}/ksperre -- {C0C0C0}Kleine Sperre.");
			ShowPlayerDialog(playerid,BSPDHELP2,DIALOG_STYLE_MSGBOX,"{FFFF00}Bayside Police-Department Hilfebox",string3,"Weiter","Zurück");
	    }
	    return 1;
	}
	if(dialogid == BSPDAUTOVERGABE)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
				Garagenauto[GetPlayerVehicleID(playerid)] = CreateServerVehicle(0,597,PCarSpawns[randd][0],PCarSpawns[randd][1],PCarSpawns[randd][2],PCarSpawns[randd][3],1,2,1);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich ein Polizeiauto aus der Garage geholt!");
	            SetPVarInt(playerid,"Cooldown",gettime()+(60*5));
	        }
	        if(listitem == 1)
	        {
	            if(sStats[playerid][sRank] < 3)
	            {
	                SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können benötigst du mind. Rank 3!");
	                ShowPlayerDialog(playerid,BSPDAUTOVERGABE, DIALOG_STYLE_LIST, "Bayside-Police Department Autovergabe", "Polizeiauto\nPolizei Ranger\nHPV-1000\nWasserwerfer\nEnforcer\nUndercover Fahrzeug", "Bestätigen", "Abbrechen");
	                return 1;
	            }
				Garagenauto[GetPlayerVehicleID(playerid)] = CreateServerVehicle(0,599,PCarSpawns[randd][0],PCarSpawns[randd][1],PCarSpawns[randd][2],PCarSpawns[randd][3],1,2,1);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich ein Polizei Ranger aus der Garage geholt!");
	            SetPVarInt(playerid,"Cooldown",gettime()+(60*5));
	        }
	        if(listitem == 2)
	        {
				Garagenauto[GetPlayerVehicleID(playerid)] = CreateServerVehicle(0,523,PCarSpawns[randd][0],PCarSpawns[randd][1],PCarSpawns[randd][2],PCarSpawns[randd][3],1,2,1);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich eine HPV-1000 aus der Garage geholt!");
	            SetPVarInt(playerid,"Cooldown",gettime()+(60*5));
	        }
	        if(listitem == 3)
	        {
         		if(sStats[playerid][sRank] < 4)
	            {
	                SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können benötigst du mind. Rank 4!");
	                ShowPlayerDialog(playerid,BSPDAUTOVERGABE, DIALOG_STYLE_LIST, "Bayside-Police Department Autovergabe", "Polizeiauto\nPolizei Ranger\nHPV-1000\nWasserwerfer\nEnforcer\nUndercover Fahrzeug", "Bestätigen", "Abbrechen");
	                return 1;
	            }
				Garagenauto[GetPlayerVehicleID(playerid)] = CreateServerVehicle(0,601,PCarSpawns[randd][0],PCarSpawns[randd][1],PCarSpawns[randd][2],PCarSpawns[randd][3],1,2,1);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich ein Wasserwerfer aus der Garage geholt!");
	            SetPVarInt(playerid,"Cooldown",gettime()+(60*5));
	        }
	        if(listitem == 4)
	        {
       			if(sStats[playerid][sRank] < 5)
	            {
	                SendClientMessage(playerid, Rot, "Um dieses Fahrzeug fahren zu können benötigst du mind. Rank 5!");
	                ShowPlayerDialog(playerid,BSPDAUTOVERGABE, DIALOG_STYLE_LIST, "Bayside-Police Department Autovergabe", "Polizeiauto\nPolizei Ranger\nHPV-1000\nWasserwerfer\nEnforcer\nUndercover Fahrzeug", "Bestätigen", "Abbrechen");
	                return 1;
	            }
				Garagenauto[GetPlayerVehicleID(playerid)] = CreateServerVehicle(0,427,PCarSpawns[randd][0],PCarSpawns[randd][1],PCarSpawns[randd][2],PCarSpawns[randd][3],1,2,1);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich einen Enforcer aus der Garage geholt!");
	            SetPVarInt(playerid,"Cooldown",gettime()+(60*5));
	        }
	        if(listitem == 5)
	        {
				Garagenauto[GetPlayerVehicleID(playerid)] = CreateServerVehicle(0,560,PCarSpawns[randd][0],PCarSpawns[randd][1],PCarSpawns[randd][2],PCarSpawns[randd][3],1,2,1);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich ein Undercover Sultan aus der Garage geholt!");
	            SetPVarInt(playerid,"Cooldown",gettime()+(60*5));
	        }
	    }
	    return 1;
	}
	if (dialogid == AUSRUESTENLSPD) {
	if(response) {
		switch (listitem) {
			case 0:
			{
				if(!IsACop(playerid))
				{
					SendClientMessage(playerid,Rot,"Du kannst dich hier nicht ausrüsten, du bist kein Mitglied des Bayside Police-Departsment!");
					return 1;
				}
				if (GetPVarInt(playerid, "CopDuty") != 1 && GetPVarInt(playerid, "SwatDuty") != 1)
				{
					SendClientMessage(playerid, Rot, "Du musst erst im Einsatz sein um dich hier ausrüsten zu können!");
					return 1;
				}
				SetPVarInt(playerid, "Tazer", 1);
				SetPlayerHealth(playerid,100.0);
				AllowArmour[playerid] = 1;
				SetPlayerArmour(playerid,100.0);
				GivePlayerWeaponEx(playerid, 3, 1);
				GivePlayerWeaponEx(playerid, 24, 60);
				SendClientMessage(playerid, Weiß, "Du hast dich erfolgreich mit Paket 1 ausgerüstet.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Info: Mit /switchtazer kannst du von der Deagle zum Tazer wescheln!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				return 1;
			}
			case 1:
			{
				if(!IsACop(playerid))
				{
					SendClientMessage(playerid,Rot,"Du kannst dich hier nicht ausrüsten, du bist kein Mitglied des Bayside Police-Departsment!");
					return 1;
				}
				if (GetPVarInt(playerid, "CopDuty") != 1 && GetPVarInt(playerid, "SwatDuty") != 1)
				{
					SendClientMessage(playerid, Rot, "Du musst erst im Einsatz sein um dich hier ausrüsten zu können!");
					return 1;
				}
				if(sStats[playerid][sRank] < 2)
				{
					SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 2 oder höher um dieses Paket auszurüsten!");
					return 1;
				}
				SetPVarInt(playerid, "Tazer", 1);
				SetPlayerHealth(playerid,100.0);
				AllowArmour[playerid] = 1;
				SetPlayerArmour(playerid,100.0);
				GivePlayerWeaponEx(playerid, 3, 1);
				GivePlayerWeaponEx(playerid, 24, 60);
				GivePlayerWeaponEx(playerid, 29, 120);
				SendClientMessage(playerid, Weiß, "Du hast dich erfolgreich mit Paket 2 ausgerüstet.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Info: Mit /switchtazer kannst du von der Deagle zum Tazer wescheln!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				return 1;
			}
			case 2:
			{
				if(!IsACop(playerid))
				{
					SendClientMessage(playerid,Rot,"Du kannst dich hier nicht ausrüsten, du bist kein Mitglied des Bayside Police-Departsment!");
					return 1;
				}
				if (GetPVarInt(playerid, "CopDuty") != 1 && GetPVarInt(playerid, "SwatDuty") != 1)
				{
					SendClientMessage(playerid, Rot, "Du musst erst im Einsatz sein um dich hier ausrüsten zu können!");
					return 1;
				}
				if(sStats[playerid][sRank] < 3)
				{
					SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 3 oder höher um dieses Paket auszurüsten!");
					return 1;
				}
				SetPVarInt(playerid, "Tazer", 1);
				SetPlayerHealth(playerid,100.0);
				AllowArmour[playerid] = 1;
				SetPlayerArmour(playerid,100.0);
				GivePlayerWeaponEx(playerid, 3, 1);
				GivePlayerWeaponEx(playerid, 23, 60);
				GivePlayerWeaponEx(playerid, 29, 120);
				GivePlayerWeaponEx(playerid, 31, 120);
				SendClientMessage(playerid, Weiß, "Du hast dich erfolgreich mit Paket 3 ausgerüstet.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Info: Mit /switchtazer kannst du von der Deagle zum Tazer wescheln!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				return 1;
			}
			case 3:
			{
				if(!IsACop(playerid))
				{
					SendClientMessage(playerid,Rot,"Du kannst dich hier nicht ausrüsten, du bist kein Mitglied des Bayside Police-Departsment!");
					return 1;
				}
				if (GetPVarInt(playerid, "CopDuty") != 1 && GetPVarInt(playerid, "SwatDuty") != 1)
				{
					SendClientMessage(playerid, Rot, "Du musst erst im Einsatz sein um dich hier ausrüsten zu können!");
					return 1;
				}
				if(sStats[playerid][sRank] < 4)
				{
					SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 4 oder höher um dieses Paket auszurüsten!");
					return 1;
				}
				SetPVarInt(playerid, "Tazer", 1);
				SetPlayerHealth(playerid,100.0);
				AllowArmour[playerid] = 1;
				SetPlayerArmour(playerid,100.0);
				GivePlayerWeaponEx(playerid, 3, 1);
				GivePlayerWeaponEx(playerid, 24, 60);
				GivePlayerWeaponEx(playerid, 29, 120);
				GivePlayerWeaponEx(playerid, 25, 25);
				SendClientMessage(playerid, Weiß, "Du hast dich erfolgreich mit Paket 4 ausgerüstet.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Info: Mit /switchtazer kannst du von der Deagle zum Tazer wescheln!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				return 1;
			}
		}
		return 1;

	}
	return 1;
}
	if(dialogid == MEDIC)
	{
	    if(response == 0)
	    {
	        SetTimerEx("Sanniaus",3121,false,"i",playerid);
	    }
	    if(response)
	    {
			if(listitem == 0)
   			{
   				if(GetPVarInt(playerid,"Defibrillator") == 1)
				{
				    SendClientMessage(playerid,Rot,"Du hast dich schon mit einem Defibrillator ausgerüstet!");
				    return 1;
				}
				SetPVarInt(playerid,"Defibrillator",1);
				SetPVarInt(playerid,"saus",0);
				SendClientMessage(playerid,Weiß,"Du hast dich erfolgreich mit einem Defibrillator ausgerüstet!");
				return 1;
   			}
			if(listitem == 1)
   			{
   				if(GetPVarInt(playerid,"Kopfschmerztabletten") == 1)
				{
				    SendClientMessage(playerid,Rot,"Du hast schon eine Packung Kopfschmerztabletten dabei!");
				    return 1;
				}
				SetPVarInt(playerid,"saus",0);
				SetPVarInt(playerid,"Kopfschmerztabletten",1);
				SendClientMessage(playerid,Weiß,"Du hast erfolgreich eine Packung Kopfschmerztabletten aus dem Schrank geholt!");
				return 1;
   			}
			if(listitem == 2)
   			{
   				if(GetPVarInt(playerid,"Bauchschmerztabletten") == 1)
				{
				    SendClientMessage(playerid,Rot,"Du hast schon eine Packung Bauchschmerztabletten dabei!");
				    return 1;
				}
				SetPVarInt(playerid,"saus",0);
				SetPVarInt(playerid,"Bauchschmerztabletten",1);
				SendClientMessage(playerid,Weiß,"Du hast erfolgreich eine Packung Bauchschmerztabletten aus dem Schrank geholt!");
				return 1;
   			}
			if(listitem == 3)
   			{
   				if(GetPVarInt(playerid,"Antibiotika") == 1)
				{
				    SendClientMessage(playerid,Rot,"Du hast schon eine Packung Antibiotika dabei!");
				    return 1;
				}
				SetPVarInt(playerid,"saus",0);
				SetPVarInt(playerid,"Antibiotika",1);
				SendClientMessage(playerid,Weiß,"Du hast erfolgreich eine Packung Antibiotika aus dem Schrank geholt!");
				return 1;
   			}
			if(listitem == 4)
   			{
				SetPVarInt(playerid,"saus",0);
				GivePlayerWeaponEx(playerid,3,1);
				GivePlayerWeaponEx(playerid,41,500);
				SendClientMessage(playerid,Weiß,"Du hast dich erfolgreich mit folgenden Waffen ausgerüstet :");
				SendClientMessage(playerid,Gelb2,"Pfefferspray und Schlagstock!");
				return 1;
   			}
	    }
    	return 1;
	}
	if(dialogid == FAHRRAD)
	{
	    if(response)
	    {
			ClearChat(playerid);
	        SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich ein Fahrrad gemietet.");
	        SendClientMessage(playerid,Gelb2,"Dieses kannst du mit /flock auf und zu schließen.");
	        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Das geliehene Fahrrad bleibt für 30 Minuten!");
	        fatimer[playerid] = SetTimerEx("Fahrradverleih",1803521,false,"i",playerid);
	        fahrrad[playerid] = CreateServerVehicle(0,481,-2613.3352,2280.1968,9.2145+1.0,0.9735,-1,-1,99); // Fahrrad
       		SetPVarInt(playerid,"Fahrrad",1);
       		SetPVarInt(playerid,"Fahrradstatus",1);
   			new lightss,alarm,doors,bonnet,boot,objective;
			VehicleStarted[fahrrad[playerid]] = 1;
			SetVehicleParamsEx(fahrrad[playerid],VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
			Tankmenge[fahrrad[playerid]] = GasMax[GetVehicleModel(fahrrad[playerid])-400];
       		PutPlayerInVehicle(playerid, fahrrad[playerid], 0);
       		PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
			SetVehicleLock(fahrrad[playerid],1);
	    }
   		return 1;
	}
	if(dialogid == EDDY)
	{
	    if(response == 0)
	    {
	        Pate = 0;
	    }
	    if(response)
	    {
	    	if(GetPlayerEuros(playerid) < 45000)
		    {
		        SendClientMessage(playerid,Rot,"{FFFFFF}Eddy: {ff0000}Tut mir leid, du hast nicht genug Geld dabei um einen Wohnwagen kaufen zu können (45.000)!");
				return 1;
		    }
	        ClearChat(playerid);
	        GivePlayerEuro(playerid,-45000);
	        sStats[playerid][sWohnwagen] = 1;
	        SendClientMessage(playerid,Rot,"{FFFFFF}Eddy: {FFFF00}Glückwunsch zu ihrem neuen Wohnwagen, dieser ist Abholbereit am San Fierro Pier!");
	        SendClientMessage(playerid,Gelb2,"Info: Alle nötigen Informationen zum Thema Wohnwagen findest du unter /wohnwagenhelp.");
	        SendClientMessage(playerid,Gruen,"Info2: Du benötigst für diesen Wohnwagen eine KFZ-Zulassung besorge dir eine bei der KFZ-Zulassungstelle!");
	        SendClientMessage(playerid,Gruen,"Info3: Bitte parke dein Fahrzeug mithilfe von /parken um, da es ansonsten zu Problemen kommen kann!");
	        PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
   			SetPlayerCheckpoint(playerid, -1662.6287,3.1497,3.5495, 2.0); //Wohnwagepoint
			QuestCP[playerid] = 970;
			new anm = random(2);
			switch(anm)
			{
			    case 0:
			    {
		      		format(string, sizeof(string), "INSERT INTO wohnwagen (inhaber,status,posx,posy,posz,posa,farbe1,farbe2,tuev) VALUES ('%s','1','-1653.0082','3.7057','3.3286','313.3446','1','1','0')", GetName(playerid));
					mysql_query(string);
			    }
			    case 1:
			    {
		      		format(string, sizeof(string), "INSERT INTO wohnwagen (inhaber,status,posx,posy,posz,posa,farbe1,farbe2,tuev) VALUES ('%s','1','-1653.0082','3.7057','3.3286','313.3446','1','1','0')", GetName(playerid));
					mysql_query(string);
			    }
			    case 2:
			    {
		      		format(string, sizeof(string), "INSERT INTO wohnwagen (inhaber,status,posx,posy,posz,posa,farbe1,farbe2,tuev) VALUES ('%s','1','-1653.0082','3.7057','3.3286','313.3446','1','1','0')", GetName(playerid));
					mysql_query(string);
			    }
			}
	        LoadWohnwagen(playerid);
	        Pate = 0;
			SaveSpieler(playerid);
	    }
   		return 1;
	}
	if(dialogid == CNN20)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN9, DIALOG_STYLE_LIST, "Bayside-Newstime Zeitungsverwaltung", "{FFFF00}1.{FFFFFF}Neue Zeitung erstellen\n{FFFF00}2.{FFFFFF}Aktuelle Zeitung bearbeiten\n{FFFF00}3.{FFFFFF}Zeitung löschen\n{FFFF00}4.{FFFFFF}Aktuelle Zeitung anschauen", "Auswählen", "Abbrechen");
	    }
	    if(response == 1)
	    {
	        ClearChat(playerid);
  			format(Query, sizeof(Query), "UPDATE `zeitungen` SET `erstellt` = '0'");
			mysql_query(Query);
	        ShowPlayerDialog(playerid,CNN9, DIALOG_STYLE_LIST, "Bayside-Newstime Zeitungsverwaltung", "{FFFF00}1.{FFFFFF}Neue Zeitung erstellen\n{FFFF00}2.{FFFFFF}Aktuelle Zeitung bearbeiten\n{FFFF00}3.{FFFFFF}Zeitung löschen\n{FFFF00}4.{FFFFFF}Aktuelle Zeitung anschauen", "Auswählen", "Abbrechen");
	        SendClientMessage(playerid,Weiß,"Die aktuelle Zeitung wurde erfolgreich gelöscht!");
	        PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
	    }
   		return 1;
	}
	if(dialogid == CNN19)
	{
	    if(response == 0)
	    {
	        SetPVarInt(playerid,"Zeile",0);
	        ShowPlayerDialog(playerid,CNN18, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungsbearbeitung", "{FFFFFF}Welche {FFFF00}Zeile{FFFFFF} der Zeitung möchtest du bearbeiten?\n{FFFF00}[Zeile: 1-6][Zahl 7 ist die Überschrift]", "Auswählen", "Zurück");
	    }
	    if(response == 1)
	    {
  			if(strlen(inputtext) > 20)
			{
   				SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte bearbeite diese!");
			    ShowPlayerDialog(playerid,CNN19, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungsbearbeitung", "{FFFFFF}Bitte gebe nun den den Inhalt der Zeile ein welche du bearbeiten möchtest!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			new neuersatz[50];
			format(neuersatz, 50, inputtext);
			if(GetPVarInt(playerid,"Zeile") == 1)
			{
			    format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz1` = '%s'", neuersatz);
			}
			if(GetPVarInt(playerid,"Zeile") == 2)
			{
			    format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz2` = '%s'", neuersatz);
			}
			if(GetPVarInt(playerid,"Zeile") == 3)
			{
			    format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz3` = '%s'", neuersatz);
			}
			if(GetPVarInt(playerid,"Zeile") == 4)
			{
			    format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz4` = '%s'", neuersatz);
			}
			if(GetPVarInt(playerid,"Zeile") == 5)
			{
			    format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz5` = '%s'", neuersatz);
			}
			if(GetPVarInt(playerid,"Zeile") == 6)
			{
			    format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz6` = '%s'", neuersatz);
			}
			if(GetPVarInt(playerid,"Zeile") == 7)
			{
			    format(Query, sizeof(Query), "UPDATE `zeitungen` SET `hauptschrift` = '%s'", neuersatz);
			}
			mysql_query(Query);
			ClearChat(playerid);
			format(string,sizeof(string),"Die Zeile %d der Zeitung wurde erfolgreich bearbeitet!",GetPVarInt(playerid,"Zeile"));
			SendClientMessage(playerid,Weiß,string);
			PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
	    }
   		return 1;
	}
	if(dialogid == CNN18)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN9, DIALOG_STYLE_LIST, "Bayside-Newstime Zeitungsverwaltung", "{FFFF00}1.{FFFFFF}Neue Zeitung erstellen\n{FFFF00}2.{FFFFFF}Aktuelle Zeitung bearbeiten\n{FFFF00}3.{FFFFFF}Zeitung löschen\n{FFFF00}4.{FFFFFF}Aktuelle Zeitung anschauen", "Auswählen", "Abbrechen");
	    }
	    if(response == 1)
	    {
       		new erstelltt;
       		new row[128];
			new field[1][32];
			format(string, sizeof(string), "SELECT * FROM zeitungen WHERE id = '1'");
			mysql_query(string);
			mysql_store_result();

			if(!mysql_num_rows())
			{
			}
			else
			{
				mysql_fetch_row_format(row, "|");
				explode(row, field, "|");
				erstelltt = strval(field[0]);
				mysql_free_result();
			}
			if(strlen(inputtext) > 1)
			{
   				SendClientMessage(playerid,Rot,"Du kannst nur Zahlen benutzen!");
			    ShowPlayerDialog(playerid,CNN18, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungsbearbeitung", "{FFFFFF}Welche {FFFF00}Zeile{FFFFFF} der Zeitung möchtest du bearbeiten?\n{FFFF00}[Zeile: 1-6][Zahl 7 ist die Überschrift]", "Auswählen", "Zurück");
			    return 1;
			}
			if(zahl > 7 ||zahl < 1)
			{
   				SendClientMessage(playerid,Rot,"Du kannst nur die Zeilen 1-7 editieren!");
			    ShowPlayerDialog(playerid,CNN18, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungsbearbeitung", "{FFFFFF}Welche {FFFF00}Zeile{FFFFFF} der Zeitung möchtest du bearbeiten?\n{FFFF00}[Zeile: 1-6][Zahl 7 ist die Überschrift]", "Auswählen", "Zurück");
			    return 1;
			}
			if(erstelltt == 1)
			{
				SetPVarInt(playerid,"Zeile",zahl);
	        	ShowPlayerDialog(playerid,CNN19, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungsbearbeitung", "{FFFFFF}Bitte gebe nun den den Inhalt der Zeile ein welche du bearbeiten möchtest!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	        	return 1;
			}
			else
			{
				SendClientMessage(playerid,Rot,"Du musst erst eine Zeitung erstellen, bevor du diese bearbeiten kannst!");
				ShowPlayerDialog(playerid,CNN9, DIALOG_STYLE_LIST, "Bayside-Newstime Zeitungsverwaltung", "{FFFF00}1.{FFFFFF}Neue Zeitung erstellen\n{FFFF00}2.{FFFFFF}Aktuelle Zeitung bearbeiten\n{FFFF00}3.{FFFFFF}Zeitung löschen\n{FFFF00}4.{FFFFFF}Aktuelle Zeitung anschauen", "Auswählen", "Abbrechen");
				return 1;
			}
	    }
   		return 1;
 	}
	if(dialogid == CNN17)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN16, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}sechsten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
	    if(response == 1)
	    {
  			if(strlen(inputtext) > 20)
			{
   				SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte bearbeite diese!");
			    ShowPlayerDialog(playerid,CNN17, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun die {FFFF00}Überschrift{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
  			format(zsatz7[playerid], 20, inputtext);
			PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
			ClearChat(playerid);
			SendClientMessage(playerid,Gelb2,"Die Zeitung wurde erfolgreich erstellt!");
			UpdateZeitung(playerid);
	    }
    return 1;
	}
	if(dialogid == CNN16)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN15, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}fünften Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
	    if(response == 1)
	    {
  			if(strlen(inputtext) > 20)
			{
   				SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte bearbeite diese!");
			    ShowPlayerDialog(playerid,CNN16, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}sechsten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			format(zsatz6[playerid], 20, inputtext);
            ShowPlayerDialog(playerid,CNN17, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun die {FFFF00}Überschrift{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
	}
	if(dialogid == CNN15)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN14, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}vierten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
	    if(response == 1)
	    {
  			if(strlen(inputtext) > 20)
			{
   				SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte bearbeite diese!");
			    ShowPlayerDialog(playerid,CNN15, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}fünften Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			format(zsatz5[playerid], 20, inputtext);
			ShowPlayerDialog(playerid,CNN16, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}sechsten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
    return 1;
	}
	if(dialogid == CNN14)
	{
 		if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN13, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}dritten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
	    if(response == 1)
	    {
  			if(strlen(inputtext) > 20)
			{
   				SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte bearbeite diese!");
			    ShowPlayerDialog(playerid,CNN14, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}vierten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			format(zsatz4[playerid], 20, inputtext);
			ShowPlayerDialog(playerid,CNN15, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}fünften Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
		}
    return 1;
  	}
	if(dialogid == CNN13)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN12, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}zweiten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
	    if(response == 1)
	    {
  			if(strlen(inputtext) > 20)
			{
			    SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte bearbeite diese!");
			    ShowPlayerDialog(playerid,CNN13, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}dritten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			format(zsatz3[playerid], 20, inputtext);
			ShowPlayerDialog(playerid,CNN14, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}vierten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
    return 1;
	}
	if(dialogid == CNN12)
	{
 		if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN11, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}ersten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
	    if(response == 1)
		{
			if(strlen(inputtext) > 20)
			{
			    SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte bearbeite diese!");
			    ShowPlayerDialog(playerid,CNN12, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}zweiten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			format(zsatz2[playerid], 20, inputtext);
		    ShowPlayerDialog(playerid,CNN13, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}dritten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
		}
    	return 1;
	}
	if(dialogid == CNN11)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN9, DIALOG_STYLE_LIST, "Bayside-Newstime Zeitungsverwaltung", "{FFFF00}1.{FFFFFF}Neue Zeitung erstellen\n{FFFF00}2.{FFFFFF}Aktuelle Zeitung bearbeiten\n{FFFF00}3.{FFFFFF}Zeitung löschen\n{FFFF00}4.{FFFFFF}Aktuelle Zeitung anschauen", "Auswählen", "Abbrechen");
	    }
	    if(response == 1)
	 	{
			if(strlen(inputtext) > 20)
			{
			    SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte bearbeite diese!");
			    ShowPlayerDialog(playerid,CNN11, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}ersten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			format(zsatz1[playerid], 20, inputtext);
			ShowPlayerDialog(playerid,CNN12, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}zweiten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
   		}
   		return 1;
	}
	if(dialogid == CNN10)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN9, DIALOG_STYLE_LIST, "Bayside-Newstime Zeitungsverwaltung", "{FFFF00}1.{FFFFFF}Neue Zeitung erstellen\n{FFFF00}2.{FFFFFF}Aktuelle Zeitung bearbeiten\n{FFFF00}3.{FFFFFF}Zeitung löschen\n{FFFF00}4.{FFFFFF}Aktuelle Zeitung anschauen", "Auswählen", "Abbrechen");
	    }
	    if(response == 1)
	    {
			format(Query, sizeof(Query), "UPDATE `zeitungen` SET `erstellt` = '0'");
			mysql_query(Query);
			mysql_free_result();
			ClearChat(playerid);
			SendClientMessage(playerid,Rot,"Die aktuelle Zeitung wurde erfolgreich gelöscht!");
			ShowPlayerDialog(playerid,CNN11, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}ersten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
	    }
	    return 1;
	}
	if(dialogid == CNN9)
 	{
 	    if(response)
 	    {
 	        if(listitem == 0)
 	        {
				format(string, sizeof(string), "SELECT * FROM zeitungen WHERE id = '1'");
				mysql_query(string);
				mysql_store_result();

				if(!mysql_num_rows())
				{
				}
				else
				{
					mysql_fetch_row_format(row, "|");
					explode(row, field, "|");
					erstelltt = strval(field[0]);
					mysql_free_result();
				}
				if(erstelltt == 1)
				{
					ShowPlayerDialog(playerid,CNN10, DIALOG_STYLE_MSGBOX, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Es gibt aktuell schon eine {FFFF00}Zeitung{FFFFFF}, möchtest du die aktuelle Zeitung löschen?", "Ja", "Nein");
					return 1;
				}
				else
				{
				    ShowPlayerDialog(playerid,CNN11, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungserstellung", "{FFFFFF}Bitte gebe nun den {FFFF00}ersten Satz{FFFFFF} deiner Zeitung ein!\n{FFFF00}[Max: 20 Zeichen]", "Auswählen", "Zurück");
				    return 1;
				}
 	        }
 	        if(listitem == 1)
 	        {
 	            SetPVarInt(playerid,"Zeile",0);
 	            ShowPlayerDialog(playerid,CNN18, DIALOG_STYLE_INPUT, "Bayside-Newstime Zeitungsbearbeitung", "{FFFFFF}Welche {FFFF00}Zeile{FFFFFF} der Zeitung möchtest du bearbeiten?\n{FFFF00}[Zeile: 1-6][Zahl 7 ist die Überschrift]", "Auswählen", "Zurück");
 	        }
 	        if(listitem == 2)
 	        {
				format(string, sizeof(string), "SELECT * FROM zeitungen WHERE id = '1'");
				mysql_query(string);
				mysql_store_result();

				if(!mysql_num_rows())
				{
				}
				else
				{
					mysql_fetch_row_format(row, "|");
					explode(row, field, "|");
					erstelltt = strval(field[0]);
					mysql_free_result();
				}
				if(erstelltt == 1)
				{
 	            	ShowPlayerDialog(playerid,CNN20, DIALOG_STYLE_MSGBOX, "Bayside-Newstime Zeitung löschen", "{FFFFFF}Möchtest du die aktuelle Zeitung {FFFF00}löschen?", "Ja", "Nein");
 	            	return 1;
				}
				else
				{
				    ClearChat(playerid);
				    ShowPlayerDialog(playerid,CNN9, DIALOG_STYLE_LIST, "Bayside-Newstime Zeitungsverwaltung", "{FFFF00}1.{FFFFFF}Neue Zeitung erstellen\n{FFFF00}2.{FFFFFF}Aktuelle Zeitung bearbeiten\n{FFFF00}3.{FFFFFF}Zeitung löschen\n{FFFF00}4.{FFFFFF}Aktuelle Zeitung anschauen", "Auswählen", "Abbrechen");
				    SendClientMessage(playerid,Rot,"Zurzeit wurde keine Zeitung erstellt!");
				    return 1;
				}
 	        }
 	        if(listitem == 3)
 	        {
 	            ShowZeitung(playerid);
 	        }
 	    }
 	    return 1;
 	}
	if(dialogid == CNN8)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN7, DIALOG_STYLE_INPUT, "Werbeschilder bearbeiten", "{FFFFFF}Bitte schreibe nun unten in die Zeile, den ersten Satz welcher später auf dem Werbeschild erscheinen soll.\n {FFFF00}[Max: 50 Zeichen]", "Auswählen", "Zurück");
	    }
	    if(response == 1)
	 	{
			if(strlen(inputtext) > 50)
			{
			    ClearChat(playerid);
			    SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte korrigiere diese!");
			    ShowPlayerDialog(playerid,CNN8, DIALOG_STYLE_INPUT, "Werbeschilder bearbeiten", "{FFFFFF}Bitte schreibe nun unten in die Zeile, den zweiten Satz welcher später auf dem Werbeschild erscheinen soll.\n {FFFF00}[Max: 50 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
   			format(satz2[playerid], 50, inputtext);
			new tafel = GetPVarInt(playerid, "Werbeschild");
			SetPVarInt(playerid,"Werbeschild",0);
			format(string, sizeof(string), "Die Werbetafel mit der Nummer %d wurde erfolgreich bearbeitet und gespeichert!", tafel);
			SendClientMessage(playerid,Weiß,string);
			format(Query, sizeof(Query), "UPDATE `werbeschilder` SET `text` = '%s' WHERE `id` = '%d'",satz1[playerid],tafel);
			mysql_query(Query);
			format(Query, sizeof(Query), "UPDATE `werbeschilder` SET `textt` = '%s' WHERE `id` = '%d'",satz2[playerid],tafel);
			mysql_query(Query);
			LoadWerbetafel();
   		}
   		return 1;
	}
	if(dialogid == CNN7)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN6, DIALOG_STYLE_LIST, "Werbeschilder bearbeiten", "{FFFF00}1.{FFFFFF}Werbeschild 1\n{FFFF00}2.{FFFFFF}Werbeschild 2\n{FFFF00}3.{FFFFFF}Werbeschild 3", "Auswählen", "Abbrechen");
	    }
	    if(response == 1)
	 	{
			if(strlen(inputtext) > 50)
			{
			    ClearChat(playerid);
			    SendClientMessage(playerid,Rot,"Deine Auswahl ist zu lange, bitte korrigiere diese!");
			    ShowPlayerDialog(playerid,CNN7, DIALOG_STYLE_INPUT, "Werbeschilder bearbeiten", "{FFFFFF}Bitte schreibe nun unten in die Zeile, den ersten Satz welcher später auf dem Werbeschild erscheinen soll.\n {FFFF00}[Max: 50 Zeichen]", "Auswählen", "Zurück");
			    return 1;
			}
			format(satz1[playerid], 50, inputtext);
	 	    ShowPlayerDialog(playerid,CNN8, DIALOG_STYLE_INPUT, "Werbeschilder bearbeiten", "{FFFFFF}Bitte schreibe nun unten in die Zeile, den zweiten Satz welcher später auf dem Werbeschild erscheinen soll.\n {FFFF00}[Max: 50 Zeichen]", "Auswählen", "Zurück");
	 	}
	 	return 1;
 	}
	if(dialogid == CNN6)
	{
	    if(response == 0)
	    {
            ShowPlayerDialog(playerid,CNN1, DIALOG_STYLE_LIST, "Bayside-Newstime Verwaltung", "{FFFF00}1.{FFFFFF}Kassen Übersicht\n{FFFF00}2.{FFFFFF}Einzahlung\n{FFFF00}3.{FFFFFF}Auszahlung\n{FFFF00}4.{FFFFFF}Werbeschilder bearbeiten", "Auswählen", "Abbrechen");
	    }
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            SetPVarInt(playerid,"Werbeschild",1);
	            ShowPlayerDialog(playerid,CNN7, DIALOG_STYLE_INPUT, "Werbeschilder bearbeiten", "{FFFFFF}Bitte schreibe nun unten in die Zeile, den ersten Satz welcher später auf dem Werbeschild erscheinen soll.\n {FFFF00}[Max: 50 Zeichen]", "Auswählen", "Zurück");
	        }
	        if(listitem == 1)
	        {
	            SetPVarInt(playerid,"Werbeschild",2);
	            ShowPlayerDialog(playerid,CNN7, DIALOG_STYLE_INPUT, "Werbeschilder bearbeiten", "{FFFFFF}Bitte schreibe nun unten in die Zeile, den ersten Satz welcher später auf dem Werbeschild erscheinen soll.\n {FFFF00}[Max: 50 Zeichen]", "Auswählen", "Zurück");
	        }
	        if(listitem == 2)
	        {
	            SetPVarInt(playerid,"Werbeschild",3);
	            ShowPlayerDialog(playerid,CNN7, DIALOG_STYLE_INPUT, "Werbeschilder bearbeiten", "{FFFFFF}Bitte schreibe nun unten in die Zeile, den ersten Satz welcher später auf dem Werbeschild erscheinen soll.\n {FFFF00}[Max: 50 Zeichen]", "Auswählen", "Zurück");
	        }
	    }
	    return 1;
	}
	if(dialogid == CNN5)
	{
		if(response == 0)
		{
		    ShowPlayerDialog(playerid, CNN4, DIALOG_STYLE_INPUT, "Bayside-Newstime Kasse auszahlen", "{FFFFFF}Welchem {e13333}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
		}
		if(response == 1)
		{
		    if(zahl > CNNKasse)
		    {
		        SendClientMessage(playerid,Rot,"Soviel ist nicht mehr in der Bayside-Newstime Kasse vorhanden!");
		        ShowPlayerDialog(playerid,CNN1, DIALOG_STYLE_LIST, "Bayside-Newstime Verwaltung", "{FFFF00}1.{FFFFFF}Kassen Übersicht\n{FFFF00}2.{FFFFFF}Einzahlung\n{FFFF00}3.{FFFFFF}Auszahlung\n{FFFF00}4.{FFFFFF}Werbeschilder bearbeiten", "Auswählen", "Abbrechen");
		        return 1;
		    }
		    new userid = GetPVarInt(playerid, "CNNNAME");
    	 	if (ProxDetectorS(5.0, playerid, userid))
			{
    		    GivePlayerEuro(userid,zahl);
    		    CNNKasse=-zahl;
    		    PlayerPlaySound(userid, 1052, 0.0, 0.0, 0.0);
    		    format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {e13333}%s{FFFFFF}%d aus der Bayside-Newstime Kasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
    		    format(string, sizeof(string), "%s hat dir erfolgreich {e13333}%d{FFFFFF} aus der Bayside-Newstime Kasse gezahlt!", GetName(userid),zahl);
    		    SendClientMessage(playerid,Weiß,string);
   				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %s erfolgreich %d  aus der Bayside-Newstime Kasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl,GetName(userid));
				CNNLog(string);

    		}
    		else
   			{
   			    SendClientMessage(playerid,Rot,"Der Spieler ist nicht in der nähe von dir!");
   			    return 1;
   			}
		}
		return 1;
	}
	if(dialogid == CNN4)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN1, DIALOG_STYLE_LIST, "Bayside-Newstime Verwaltung", "{FFFF00}1.{FFFFFF}Kassen Übersicht\n{FFFF00}2.{FFFFFF}Einzahlung\n{FFFF00}3.{FFFFFF}Auszahlung\n{FFFF00}4.{FFFFFF}Werbeschilder bearbeiten", "Auswählen", "Abbrechen");
	    }
 		if(response == 1)
	    {
    		if(IsPlayerNPC(zahl))
			{
			    SendClientMessage(playerid,Rot,"Du kannst kein Geld an einem NPC/Bots auszahlen!");
			    ShowPlayerDialog(playerid, CNN4, DIALOG_STYLE_INPUT, "Bayside-Newstime Kasse auszahlen", "{FFFFFF}Welchem {e13333}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
			    return 1;
			}
			if(zahl == INVALID_PLAYER_ID)
			{
	   			SendClientMessage(playerid,Rot,"Dieser Spieler existiert nicht!");
	   			ShowPlayerDialog(playerid, CNN4, DIALOG_STYLE_INPUT, "Bayside-Newstime Kasse auszahlen", "{FFFFFF}Welchem {e13333}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
 				return 1;
			}
			    zahl = SetPVarInt(playerid,"CNNNAME",zahl);
				ShowPlayerDialog(playerid, CNN5, DIALOG_STYLE_INPUT, "Bayside-Newstime Kasse auszahlen", "{FFFFFF}Wie viel möchtest du aus der {e13333}Bayside-Newstime Kasse{FFFFFF} auszahlen?", "Auszahlen", "Zurück");
		}
		return 1;
	}
	if(dialogid == CNN3)
	{
	    if(response == 1)
	    {
	        if(zahl > GetPlayerEuros(playerid))
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht soviel Geld dabei!");
	            return 1;
	        }
	        format(string, sizeof(string), "{FFFFFF}Du hast erfolgreich {e13333}%d{FFFFFF} in die Bayside-Newstime Kasse gezahlt.", zahl);
	        SendClientMessage(playerid,Weiß,string);
	        GivePlayerEuro(playerid,-zahl);
	        CNNKasse+=zahl;
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s hat %d in die Bayside-Newstime Kasse gezahlt!",day,month,year,hour,minute,second,GetName(playerid),zahl);
			CNNLog(string);
	    }
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,CNN1, DIALOG_STYLE_LIST, "Bayside-Newstime Verwaltung", "{FFFF00}1.{FFFFFF}Kassen Übersicht\n{FFFF00}2.{FFFFFF}Einzahlung\n{FFFF00}3.{FFFFFF}Auszahlung\n{FFFF00}4.{FFFFFF}Werbeschilder bearbeiten", "Auswählen", "Abbrechen");
	    }
	}
	if(dialogid == CNN2)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,CNN1, DIALOG_STYLE_LIST, "Bayside-Newstime Verwaltung", "{FFFF00}1.{FFFFFF}Kassen Übersicht\n{FFFF00}2.{FFFFFF}Einzahlung\n{FFFF00}3.{FFFFFF}Auszahlung\n{FFFF00}4.{FFFFFF}Werbeschilder bearbeiten", "Auswählen", "Abbrechen");
	    }
	}
	if(dialogid == CNN1)
	{
		if(response == 1)
		{
		    if(listitem == 0)
		    {
		        if(CNNKasse < 1)
		        {
		            SendClientMessage(playerid,Rot,"Die Bayside-Newstime Kasse ist leer!");
					return 1;
		        }
		        format(string, sizeof(string), "{FFFFFF}Der Inhalt der Bayside-Newstime Kasse beträgt: {e13333}%d", CNNKasse);
		        ShowPlayerDialog(playerid, CNN2, DIALOG_STYLE_MSGBOX, "Bayside-Newstime Kasse", string, "Zurück", "");
		    }
		    if(listitem == 1)
		    {
		        if(sStats[playerid][sRank] < 3)
		        {
		            SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 3 um was in die Bayside-Newstime Kasse einzahlen zu können!");
		            return 1;
		        }
		        ShowPlayerDialog(playerid, CNN3, DIALOG_STYLE_INPUT, "Bayside-Newstime Kasse einzahlen", "{FFFFFF}Wie viel möchtest du in die {e13333}Bayside-Newstime Kasse{FFFFFF} einzahlen?", "Einzahlen", "Zurück");
		    }
		    if(listitem == 2)
		    {
		        if(sStats[playerid][sLeiter] == 4)
		        {
		            ShowPlayerDialog(playerid, CNN4, DIALOG_STYLE_INPUT, "Bayside-Newstime Kasse auszahlen", "{FFFFFF}Welchem {e13333}Spieler {FFFFFF}möchtest du das Geld auszahlen (ID nicht Spielername)?", "Auszahlen", "Zurück");
		        }
		        else
		        {
		            SendClientMessage(playerid,Rot,"Nur der Leiter (Leader) der San Andreas Newstime a.G kann eine Auszahlung veranlassen!");
		            return 1;
		        }
		    }
		    if(listitem == 3)
		    {
		        if(sStats[playerid][sLeiter] != 4)
		        {
		            SendClientMessage(playerid,Rot,"Nur der Leiter der Bayside Newstime a.G kann die Werbeschilder bearbeiten!");
		            return 1;
		        }
		        SetPVarInt(playerid,"Werbeschild",0);
		        ShowPlayerDialog(playerid,CNN6, DIALOG_STYLE_LIST, "Werbeschilder bearbeiten", "{FFFF00}1.{FFFFFF}Werbeschild 1\n{FFFF00}2.{FFFFFF}Werbeschild 2\n{FFFF00}3.{FFFFFF}Werbeschild 3", "Auswählen", "Abbrechen");
	  		}
		}
	}
	if(dialogid== DIALOG_AFK)
 	{
    	if(response==1)
        {
        	if(GetPVarInt(playerid, "AFKNUMMER") == strval(inputtext))
         	{
            	ShowPlayerDialog(playerid, DIALOG_AFK2, DIALOG_STYLE_MSGBOX, "{e13333}Away From Keyboard", "{ffffff}Anwesenheit bestätigt!", "OK", "");
         	}
       		else
        	{
          		format(string, sizeof(string), "{e13333}Falsche Nummer!\n{ffffff}Du bist AFK. Bitte gib folgenden Code ein, um zu bestätigen, dass du wieder da bist:\n{da5905}%d", GetPVarInt(playerid, "AFKNUMMER"));
                ShowPlayerDialog(playerid, DIALOG_AFK, DIALOG_STYLE_INPUT, "{e13333}Away From Keyboard", string, "Absenden", "");
            }
        }
        if(response==0)
        {
       		format(string, sizeof(string), "{ffffff}Du bist AFK. Bitte gib folgenden Code ein, um zu bestätigen, dass du wieder da bist:\n{da5905}%d", GetPVarInt(playerid, "AFKNUMMER"));
         	ShowPlayerDialog(playerid, DIALOG_AFK, DIALOG_STYLE_INPUT, "{e13333}Away From Keyboard", string, "Absenden", "");
       	}
        return 1;
  	}
	if(dialogid == PRODUKTE)
	{
	    SetPVarInt(playerid,"Produkte",0);
	    if(response == 0)
	 	{
	 	    TogglePlayerControllable(playerid, true);
	 	}
		if(response)
		{
		    new preis = zahl*50;
		    if(zahl < 1 || zahl > 250)
		    {
		        TogglePlayerControllable(playerid, true);
		        SendClientMessage(playerid,Rot,"Du kannst nicht weniger als 1 oder mehr als 250 Produkte aufeinmal kaufen!");
		        ShowPlayerDialog(playerid, PRODUKTE, DIALOG_STYLE_INPUT, "Produkte kaufen/einlagern", "{FFFFFF}Wieviele {FFFF00}Produkte {FFFFFF}möchtest du kaufen?\n{FFFF00}(Produktpreis: 70)", "Weiter","Abbrechen");
		        return 1;
		    }
		    if(preis > geld)
		    {
		        TogglePlayerControllable(playerid, true);
  				format(string, sizeof(string), "Du hast nicht genügend Geld dabei! (%d).",preis);
				SendClientMessage(playerid, Rot, string);
				ShowPlayerDialog(playerid, PRODUKTE, DIALOG_STYLE_INPUT, "Produkte kaufen/einlagern", "{FFFFFF}Wieviele {FFFF00}Produkte {FFFFFF}möchtest du kaufen?\n{FFFF00}(Produktpreis: 70)", "Weiter","Abbrechen");
		        return 1;
		    }
			if(PlayerHaul[v][pLoad] >= PlayerHaul[v][pCapasity])
			{
			    TogglePlayerControllable(playerid, true);
			    SendClientMessage(playerid,Rot,"Der Laderaum deines Fahrzeuges ist voll!");
			    ShowPlayerDialog(playerid, PRODUKTE, DIALOG_STYLE_INPUT, "Produkte kaufen/einlagern", "{FFFFFF}Wieviele {FFFF00}Produkte {FFFFFF}möchtest du kaufen?\n{FFFF00}(Produktpreis: 70)", "Weiter","Abbrechen");
			    return 1;
			}
			check = PlayerHaul[v][pLoad] + zahl;
			if(check > PlayerHaul[v][pCapasity])
			{
			    TogglePlayerControllable(playerid, true);
				format(string, sizeof(string), "Soviele Produkte kannst du nicht mehr einladen, aktuelle Produkte: %d.",PlayerHaul[v][pLoad]);
				SendClientMessage(playerid, Rot, string);
				ShowPlayerDialog(playerid, PRODUKTE, DIALOG_STYLE_INPUT, "Produkte kaufen/einlagern", "{FFFFFF}Wieviele {FFFF00}Produkte {FFFFFF}möchtest du kaufen?\n{FFFF00}(Produktpreis: 70)", "Weiter","Abbrechen");
				return 1;
			}
			ClearChat(playerid);
			PlayerHaul[v][pLoad] += zahl;
			SetPVarInt(playerid,"Cooldown3",gettime()+(60*5));
			format(string, sizeof(string), "Aktuelle Produkte: %d/%d.", PlayerHaul[v][pLoad],PlayerHaul[v][pCapasity]);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast %d Produkte für %d gekauft!", zahl,preis);
			SendClientMessage(playerid, Gelb2, string);
			GivePlayerEuro(playerid,-preis);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			TogglePlayerControllable(playerid, true);
			return 1;
		}
	}
	if(dialogid == BENZIN)
	{
	    SetPVarInt(playerid,"Benzin",0);
	    if(response == 0)
	 	{
	 	    TogglePlayerControllable(playerid, true);
	 	}
		if(response)
		{
		    new preis = zahl*9;
		    if(zahl < 1 || zahl > 200)
		    {
		        TogglePlayerControllable(playerid, true);
		        SendClientMessage(playerid,Rot,"Du kannst nicht weniger als 1 oder mehr als 250 Liter Benzin kaufen!");
		       	ShowPlayerDialog(playerid, BENZIN, DIALOG_STYLE_INPUT, "Benzin kaufen/einlagern", "{FFFFFF}Wieviel Liter {FFFF00}Benzin {FFFFFF}möchtest du kaufen?\n{FFFF00}(Benzinpreis pro Liter: 4)", "Weiter","Abbrechen");
		        return 1;
		    }
		    if(preis > geld)
		    {
		        TogglePlayerControllable(playerid, true);
  				format(string, sizeof(string), "Du hast nicht genügend Geld dabei! (%d).",preis);
				SendClientMessage(playerid, Rot, string);
				ShowPlayerDialog(playerid, BENZIN, DIALOG_STYLE_INPUT, "Benzin kaufen/einlagern", "{FFFFFF}Wieviel Liter {FFFF00}Benzin {FFFFFF}möchtest du kaufen?\n{FFFF00}(Benzinpreis pro Liter: 4)", "Weiter","Abbrechen");
		        return 1;
		    }
			if(PlayerHaul[v][pBenzin] >= PlayerHaul[v][pCapasity])
			{
			    TogglePlayerControllable(playerid, true);
			    SendClientMessage(playerid,Rot,"Der Laderaum deines Fahrzeuges ist voll!");
			    ShowPlayerDialog(playerid, BENZIN, DIALOG_STYLE_INPUT, "Benzin kaufen/einlagern", "{FFFFFF}Wieviel Liter {FFFF00}Benzin {FFFFFF}möchtest du kaufen?\n{FFFF00}(Benzinpreis pro Liter: 4)", "Weiter","Abbrechen");
			    return 1;
			}
			check= PlayerHaul[v][pBenzin] + zahl;
			if(check > PlayerHaul[v][pCapasity])
			{
			    TogglePlayerControllable(playerid, true);
				format(string, sizeof(string), "Soviel Benzin kannst du nicht mehr einladen, aktuelle Benzinmenge: %d.",PlayerHaul[v][pBenzin]);
				SendClientMessage(playerid, Rot, string);
				ShowPlayerDialog(playerid, BENZIN, DIALOG_STYLE_INPUT, "Benzin kaufen/einlagern", "{FFFFFF}Wieviel Liter {FFFF00}Benzin {FFFFFF}möchtest du kaufen?\n{FFFF00}(Benzinpreis pro Liter: 4)", "Weiter","Abbrechen");
				return 1;
			}
			ClearChat(playerid);
			PlayerHaul[v][pBenzin] += zahl;
			format(string, sizeof(string), "Aktuelle Benzinmenge: %d/%d.", PlayerHaul[v][pBenzin],PlayerHaul[v][pCapasity]);
			SendClientMessage(playerid, Weiß, string);
			format(string, sizeof(string), "Du hast %dl Benzin für %d gekauft!", zahl,preis);
			SendClientMessage(playerid, Gelb2, string);
			GivePlayerEuro(playerid,-preis);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			TogglePlayerControllable(playerid, true);
			return 1;
		}
	}
	if(dialogid == AUTOSCOOTER)
	{
	    if(response)
	    {
     		if(geld <= 700) {
       			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei (700)!");
                return 1;
            }
            ClearChat(playerid);
            GivePlayerEuro(playerid, -700);
            SetPlayerHealth(playerid,100.0);
            SetPVarInt(playerid,"Autoscooter",1);
		 	AutoscooterPlayers ++;
            TogglePlayerControllable(playerid, false);
			new rand = random(sizeof(AutoscooterSpawns));
			SetPlayerPosEx(playerid, AutoscooterSpawns[rand][0], AutoscooterSpawns[rand][1], AutoscooterSpawns[rand][2]);
			SetPlayerFacingAngle(playerid,AutoscooterSpawns[rand][3]);
            SendClientMessage(playerid,COLOR_YELLOW2,"Warte auf Mitspieler . . .");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info: Das 'komische' Geräusch kommt von den Motoren der Vortex.");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info2: Benutze /endautoscooter um das Spiel für dich zu beenden.");
           	//Maske
			if(sStats[playerid][sMaske] == 1 && sStats[playerid][sPremium] < 2)
		 	{
			 	for(new i = 0; i < MAX_PLAYERS; i++)
			 	{
		    		ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
		   			RemovePlayerAttachedObject(playerid, 5);
		   			SetPVarInt(playerid,"Maske",0);
		   			sStats[playerid][sMaske] = 0;
		 	}
	    }
	}
 	if(dialogid == PAINTBALL) {
        if(response) {
            if(geld <= 800) {
                SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei (800)!");
                return 1;
            }
            ClearChat(playerid);
            GivePlayerEuro(playerid, -800);
            SetPlayerHealth(playerid,100.0);
            ResetPlayerWeapons(playerid);
			SetPlayerVirtualWorld(playerid, 1);
		 	PaintballPlayers ++;
            ShowPlayerDialog(playerid,PAINTBALL2, DIALOG_STYLE_LIST, "Paintball Zubehör", "{00AA00}1. {FFFFFF}Micro SMG (5Punkte)\n{00AA00}2. {FFFFFF}Mac10 (10Punkte)\n{00AA00}3. {FFFFFF}Shotgun (15Punkte)\n{00AA00}4. {FFFFFF}M4A1 (20Punkte)\n{00AA00}5. {FFFFFF}Superfaust (100Punkte)", "Kaufen", "Abbrechen");
            SendClientMessage(playerid,Weiß,"Drücke auf Abbrechen um keine Waffe auszuwählen, um nur die Standert Waffe zu bekommen!");
            SendClientMessage(playerid,Weiß,"");
           	//Maske
			if(sStats[playerid][sMaske] == 1 && sStats[playerid][sPremium] < 2)
		 	{
			 	for(new i = 0; i < MAX_PLAYERS; i++)
			 	{
		    		ShowPlayerNameTagForPlayer(i, playerid, 1);
				}
		   			RemovePlayerAttachedObject(playerid, 5);
		   			SetPVarInt(playerid,"Maske",0);
		   			sStats[playerid][sMaske] = 0;
		 	}
        }
        else {
	        SetPlayerPosEx(playerid,-2459.0935,2304.6450,4.9844);
	        SetPlayerFacingAngle(playerid,86.9723);
	        TogglePlayerControllable(playerid, true);
	        SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerInterior(playerid,0);
        }
    }
        if (dialogid == PAINTBALL2)
		{
        if(response == 0)
        {
        	ClearChat(playerid);
            TogglePlayerControllable(playerid, false);
    		sStats[playerid][sPwaffe] = 1;
    		PlayerPaintballing[playerid] = 1;
    		SetPlayerWeather(playerid, 9);
			SetPaintballSpawn(playerid);
            SendClientMessage(playerid,COLOR_YELLOW2,"Warte auf Mitspieler . . .");
            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info: Benutze /endpaintball um das Spiel für dich zu beenden.");
            return 1;
        }
        if(response == 1)
		{
                if(listitem == 0)
                {
	                if(sStats[playerid][sPpunkte] < 5) {
	                ClearChat(playerid);
	            	SendClientMessage(playerid,Rot,"Du hast nicht genug Paintballpunkte!");
	            	SendClientMessage(playerid,Weiß,"Drücke auf Abbrechen um keine Waffe auszuwählen, um nur die Standert Waffe zu bekommen!");
	            	SendClientMessage(playerid,Rot,"");
	            	return ShowPlayerDialog(playerid,PAINTBALL2, DIALOG_STYLE_LIST, "Paintball Zubehör", "{00AA00}1. {FFFFFF}Micro SMG (5Punkte)\n{00AA00}2. {FFFFFF}Mac10 (10Punkte)\n{00AA00}3. {FFFFFF}Shotgun (15Punkte)\n{00AA00}4. {FFFFFF}M4A1 (20Punkte)\n{00AA00}5. {FFFFFF}Superfaust (100Punkte)", "Kaufen", "Abbrechen");
       		 	}
		            ClearChat(playerid);
		            TogglePlayerControllable(playerid, false);
		    		GivePlayerWeaponEx(playerid,28,999);
		    		sStats[playerid][sPwaffe] = 2;
		    		sStats[playerid][sPpunkte] -= 5;
		    		PlayerPaintballing[playerid] = 1;
		    		SetPlayerWeather(playerid, 9);
					SetPaintballSpawn(playerid);
		            SendClientMessage(playerid,COLOR_YELLOW2,"Warte auf Mitspieler . . .");
		            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info: Benutze /endpaintball um das Spiel für dich zu beenden.");
                }
                if(listitem == 1)
                {
	                if(sStats[playerid][sPpunkte] < 10) {
	                ClearChat(playerid);
	            	SendClientMessage(playerid,Rot,"Du hast nicht genug Paintballpunkte!");
	            	SendClientMessage(playerid,Weiß,"Drücke auf Abbrechen um keine Waffe auszuwählen, um nur die Standert Waffe zu bekommen!");
	            	SendClientMessage(playerid,Rot,"");
	            	return ShowPlayerDialog(playerid,PAINTBALL2, DIALOG_STYLE_LIST, "Paintball Zubehör", "{00AA00}1. {FFFFFF}Micro SMG (5Punkte)\n{00AA00}2. {FFFFFF}Mac10 (10Punkte)\n{00AA00}3. {FFFFFF}Shotgun (15Punkte)\n{00AA00}4. {FFFFFF}M4A1 (20Punkte)\n{00AA00}5. {FFFFFF}Superfaust (100Punkte)", "Kaufen", "Abbrechen");
       		 	}
		            ClearChat(playerid);
		            TogglePlayerControllable(playerid, false);
		    		GivePlayerWeaponEx(playerid,28,999);
		    		sStats[playerid][sPwaffe] = 3;
		    		sStats[playerid][sPpunkte] -= 10;
		    		PlayerPaintballing[playerid] = 1;
		    		SetPlayerWeather(playerid, 9);
					SetPaintballSpawn(playerid);
		            SendClientMessage(playerid,COLOR_YELLOW2,"Warte auf Mitspieler . . .");
		            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info: Benutze /endpaintball um das Spiel für dich zu beenden.");
				}
                if(listitem == 2)
                {
	                if(sStats[playerid][sPpunkte] < 15) {
	                ClearChat(playerid);
	            	SendClientMessage(playerid,Rot,"Du hast nicht genug Paintballpunkte!");
	            	SendClientMessage(playerid,Weiß,"Drücke auf Abbrechen um keine Waffe auszuwählen, um nur die Standert Waffe zu bekommen!");
	            	SendClientMessage(playerid,Rot,"");
	            	return ShowPlayerDialog(playerid,PAINTBALL2, DIALOG_STYLE_LIST, "Paintball Zubehör", "{00AA00}1. {FFFFFF}Micro SMG (5Punkte)\n{00AA00}2. {FFFFFF}Mac10 (10Punkte)\n{00AA00}3. {FFFFFF}Shotgun (15Punkte)\n{00AA00}4. {FFFFFF}M4A1 (20Punkte)\n{00AA00}5. {FFFFFF}Superfaust (100Punkte)", "Kaufen", "Abbrechen");
       		 	}
		            ClearChat(playerid);
		            TogglePlayerControllable(playerid, false);
		    		GivePlayerWeaponEx(playerid,25,500);
		    		sStats[playerid][sPwaffe] = 4;
		    		sStats[playerid][sPpunkte] -= 15;
		    		PlayerPaintballing[playerid] = 1;
		    		SetPlayerWeather(playerid, 9);
					SetPaintballSpawn(playerid);
		            SendClientMessage(playerid,COLOR_YELLOW2,"Warte auf Mitspieler . . .");
		            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info: Benutze /endpaintball um das Spiel für dich zu beenden.");
				}
                if(listitem == 3)
                {
	                ClearChat(playerid);
	            	SendClientMessage(playerid,Rot,"Du hast nicht genug Paintballpunkte!");
	            	SendClientMessage(playerid,Weiß,"Drücke auf Abbrechen um keine Waffe auszuwählen, um nur die Standert Waffe zu bekommen!");
	            	SendClientMessage(playerid,Rot,"");
	            	return ShowPlayerDialog(playerid,PAINTBALL2, DIALOG_STYLE_LIST, "Paintball Zubehör", "{00AA00}1. {FFFFFF}Micro SMG (5Punkte)\n{00AA00}2. {FFFFFF}Mac10 (10Punkte)\n{00AA00}3. {FFFFFF}Shotgun (15Punkte)\n{00AA00}4. {FFFFFF}M4A1 (20Punkte)\n{00AA00}5. {FFFFFF}Superfaust (100Punkte)", "Kaufen", "Abbrechen");
       		 	}
		            ClearChat(playerid);
		            TogglePlayerControllable(playerid, false);
		    		GivePlayerWeaponEx(playerid,31,500);
		    		sStats[playerid][sPwaffe] = 5;
		    		sStats[playerid][sPpunkte] -= 20;
		    		PlayerPaintballing[playerid] = 1;
		    		SetPlayerWeather(playerid, 9);
					SetPaintballSpawn(playerid);
		            SendClientMessage(playerid,COLOR_YELLOW2,"Warte auf Mitspieler . . .");
		            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info: Benutze /endpaintball um das Spiel für dich zu beenden.");
				}
                if(listitem == 4)
                {
	                ClearChat(playerid);
	            	SendClientMessage(playerid,Rot,"Du hast nicht genug Paintballpunkte!");
	            	SendClientMessage(playerid,Weiß,"Drücke auf Abbrechen um keine Waffe auszuwählen, um nur die Standert Waffe zu bekommen!");
	            	SendClientMessage(playerid,Rot,"");
	            	return ShowPlayerDialog(playerid,PAINTBALL2, DIALOG_STYLE_LIST, "Paintball Zubehör", "{00AA00}1. {FFFFFF}Micro SMG (5Punkte)\n{00AA00}2. {FFFFFF}Mac10 (10Punkte)\n{00AA00}3. {FFFFFF}Shotgun (15Punkte)\n{00AA00}4. {FFFFFF}M4A1 (20Punkte)\n{00AA00}5. {FFFFFF}Superfaust (100Punkte)", "Kaufen", "Abbrechen");
       		 	}
		            ClearChat(playerid);
		            TogglePlayerControllable(playerid, false);
		    		SetPVarInt(playerid, "Superfaust", 1);
		    		sStats[playerid][sPwaffe] = 6;
		    		sStats[playerid][sPpunkte] -= 100;
		    		PlayerPaintballing[playerid] = 1;
		    		SetPlayerWeather(playerid, 9);
					SetPaintballSpawn(playerid);
		            SendClientMessage(playerid,COLOR_YELLOW2,"Warte auf Mitspieler . . .");
		            SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info: Benutze /endpaintball um das Spiel für dich zu beenden.");
			}
	if(dialogid == SCHWARZMARKT2)
	{
	    if(response == 1)
	    {
	        if(listitem == 0)
	        {
	            if(geld < 1500)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
     				ShowPlayerDialog(playerid, SCHWARZMARKT2, DIALOG_STYLE_LIST, "Schwarzmarkt Waffen","{00AA00}1. {FFFFFF}Deagle {00AA00}1500\n{00AA00}2. {FFFFFF}MP5 {00AA00}2000\n{00AA00}3. {FFFFFF}AK47 {00AA00}3200\n{00AA00}4. {FFFFFF}M4 {00AA00}3300\n", "Kaufen", "Zurück");
					return 1;
				}
    			ClearChat(playerid);
	            GivePlayerEuro(playerid,-1000);
	            GivePlayerWeaponEx(playerid,24,75);
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier deine Deagle.");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 1)
	        {
	            if(geld < 2000)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
					ShowPlayerDialog(playerid, SCHWARZMARKT2, DIALOG_STYLE_LIST, "Schwarzmarkt Waffen","{00AA00}1. {FFFFFF}Deagle {00AA00}1500\n{00AA00}2. {FFFFFF}MP5 {00AA00}2000\n{00AA00}3. {FFFFFF}AK47 {00AA00}3200\n{00AA00}4. {FFFFFF}M4 {00AA00}3300\n", "Kaufen", "Zurück");
					return 1;
				}
    			ClearChat(playerid);
	            GivePlayerEuro(playerid,-2000);
	            GivePlayerWeaponEx(playerid,29,175);
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier deine MP5.");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 2)
	        {
	            if(geld < 3200)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
					ShowPlayerDialog(playerid, SCHWARZMARKT2, DIALOG_STYLE_LIST, "Schwarzmarkt Waffen","{00AA00}1. {FFFFFF}Deagle {00AA00}1500\n{00AA00}2. {FFFFFF}MP5 {00AA00}2000\n{00AA00}3. {FFFFFF}AK47 {00AA00}3200\n{00AA00}4. {FFFFFF}M4 {00AA00}3300\n", "Kaufen", "Zurück");
					return 1;
				}
    			ClearChat(playerid);
	            GivePlayerEuro(playerid,-3200);
	            GivePlayerWeaponEx(playerid,30,250);
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier deine AK47.");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 3)
	        {
	            if(geld < 3300)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
					ShowPlayerDialog(playerid, SCHWARZMARKT2, DIALOG_STYLE_LIST, "Schwarzmarkt Waffen","{00AA00}1. {FFFFFF}Deagle {00AA00}1500\n{00AA00}2. {FFFFFF}MP5 {00AA00}2000\n{00AA00}3. {FFFFFF}AK47 {00AA00}3200\n{00AA00}4. {FFFFFF}M4 {00AA00}3300\n", "Kaufen", "Zurück");
					return 1;
				}
    			ClearChat(playerid);
	            GivePlayerEuro(playerid,-3300);
	            GivePlayerWeaponEx(playerid,31,250);
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier deine M4.");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	    }
		else
		{
		    ShowPlayerDialog(playerid, SCHWARZMARKT, DIALOG_STYLE_LIST, "Schwarzmarkt","{00AA00}1. {FFFFFF}Drogensamen {00AA00}1000\n{00AA00}2. {FFFFFF}Drogendünger {00AA00}2000\n{00AA00}3. {FFFFFF}Gefälschter Waffenschein {00AA00}5000\n{00AA00}4. {FFFFFF}Waffen\n{00AA00}5. {FFFFFF}Maske {00AA00}6000\n{00AA00}6. {FFFFFF}Dietrichpaket(10x) {00AA00}800", "Kaufen", "Abbrechen");
		}
	}
	if(dialogid == SCHWARZMARKT)
	{
		if(response == 1)
		{
	        if(listitem == 0)
	        {
	            if(geld < 1000)
	            {
 					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
					return 1;
	            }
	            if(sStats[playerid][sJob] != 5)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, ich darf das Zeug nur an Farmer verkaufen!");
					return 1;
	            }
	            if(sStats[playerid][sDrogenSamen] == 1)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast schon ein Paket Drogensamen!");
					return 1;
	            }
	            ClearChat(playerid);
	            GivePlayerEuro(playerid,-1000);
	            sStats[playerid][sDrogenSamen] = 1;
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier deine Drogensamen.");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 1)
	        {
	            if(geld < 2000)
	            {
 					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
					return 1;
	            }
	            if(sStats[playerid][sJob] != 5)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, ich darf das Zeug nur an Farmer verkaufen!");
					return 1;
	            }
	            if(sStats[playerid][sDrogenDuenger] == 1)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast schon ein Paket Drogendünger!");
					return 1;
	            }
	            ClearChat(playerid);
	            GivePlayerEuro(playerid,-2000);
	            sStats[playerid][sDrogenDuenger] = 1;
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier dein Drogendünger.");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 2)
	        {
	            if(geld < 5000)
	            {
 					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
					return 1;
	            }
	            if(sStats[playerid][sLevel] > 2)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, ich darf dir das nicht verkaufen!");
					return 1;
	            }
	            if(sStats[playerid][sWaffenschein] == 1)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast schon einen Waffenschein!");
					return 1;
	            }
	            ClearChat(playerid);
	            GivePlayerEuro(playerid,-5000);
	            sStats[playerid][sWaffenschein] = 1;
	            sStats[playerid][sWaffenscheinZeit] = gettime()+(60*60*24*5);
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier dein gefälschter Waffenschein.");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            SendClientMessage(playerid,Gelb2,"Info: Der gefälschte Waffenschein hält nur 5 Tage!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
   			if(listitem == 3)
	        {
				ShowPlayerDialog(playerid, SCHWARZMARKT2, DIALOG_STYLE_LIST, "Schwarzmarkt Waffen","{00AA00}1. {FFFFFF}Deagle {00AA00}1500\n{00AA00}2. {FFFFFF}MP5 {00AA00}2000\n{00AA00}3. {FFFFFF}AK47 {00AA00}3200\n{00AA00}4. {FFFFFF}M4 {00AA00}3300\n", "Kaufen", "Zurück");
	        }
	        if(listitem == 4)
	        {
         		if(geld < 6000)
	            {
 					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
					return 1;
	            }
	            if(sStats[playerid][sLevel] < 4)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du musst mind. Lvl 4 sein um eine Maske kaufen zu können!");
					return 1;
	            }
	            if(sStats[playerid][sMaske] == 1)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast schon eine Maske!");
					return 1;
	            }
	            ClearChat(playerid);
	            GivePlayerEuro(playerid,-6000);
	            sStats[playerid][sMaske] = 1;
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier deine Maske.");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            SendClientMessage(playerid,Gelb2,"Info: Du kannst deine Maske mit /maske benutzen!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 5)
	        {
	            if(sStats[playerid][sDietrich] > 20)
	            {
	                SendClientMessage(playerid,Rot,"Du kannst nicht mehr wie 20 Dietriche tragen!");
	                return 1;
	            }
	            if(geld < 800)
	            {
					SendClientMessage(playerid,Rot,"{FFFFFF}John: {ff0000}Tut mir leid, du hast nicht genug Geld dabei!");
					ShowPlayerDialog(playerid, SCHWARZMARKT, DIALOG_STYLE_LIST, "Schwarzmarkt","{00AA00}1. {FFFFFF}Drogensamen {00AA00}1000\n{00AA00}2. {FFFFFF}Drogendünger {00AA00}2000\n{00AA00}3. {FFFFFF}Gefälschter Waffenschein {00AA00}5000\n{00AA00}4. {FFFFFF}Waffen\n{00AA00}5. {FFFFFF}Maske {00AA00}6000\n{00AA00}6. {FFFFFF}Dietrichpaket(10x) {00AA00}800", "Kaufen", "Abbrechen");
					return 1;
				}
    			ClearChat(playerid);
	            GivePlayerEuro(playerid,-800);
	            sStats[playerid][sDietrich] += 10;
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Hier dein Dietrichpaket (10x).");
	            SendClientMessage(playerid,Rot,"{FFFFFF}John: {FFFF00}Die Firma dankt!");
	            SendClientMessage(playerid,Gelb2,"Du kannst die Dietriche mit /aufknacken benutzen!");
	            PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
		}
	}
	if(dialogid == KONDOM)
	{
		if(response == 1)
		{
		    if(sStats[playerid][sKondom] < 1)
   			{
   			    SendClientMessage(playerid,Rot,"Du hast kein Kondom dabei, kaufe dir erst eines im 24/7 Laden!");
   			    nutte = 0;
   			    return 1;
   			}
     		if(!strcmp(GetName(bot),"Dominique",true))
			{
				Kick(bot);
			}
			nutte = 1;
			UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{FF0000}Besetzt{FFFFFF}| <--");
  			TogglePlayerControllable(playerid, false);
			SetPlayerPosEx(playerid,1204.4478,17.1577,1000.9219);
			SetPlayerFacingAngle(playerid,145.0213);
			SetPlayerCameraPos(playerid,1206.8975,15.3676,1000.9219);
			SetPlayerCameraLookAt(playerid,1206.5796,15.5900,1000.9219);
			SetPlayerInterior(playerid,2);
			GivePlayerEuro(playerid,-500);
			ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_START_P", 4.0, 0, 1, 1, 1, 0, 0);
			SetTimerEx("StartShowAnimation", 1009, false, "d", playerid);
			SetTimerEx("StartShowJoinGirl", 1139, false, "d", playerid);
			SetTimer("StartShowGirl", 6007, false);
			SetTimer("StartShowBlowGirl", 11009, false);
			SetTimerEx("StartShowEndGirl", 21067, false, "d", playerid);
			SetPVarInt(playerid, "InDerShow", 1);
			SetPVarInt(playerid, "Kondom", 1);
			return 1;
		}
		if(response == 0)
		{
			if(!strcmp(GetName(bot),"Dominique",true))
			{
				Kick(bot);
			}
  			nutte = 1;
			UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{FF0000}Besetzt{FFFFFF}| <--");
  			TogglePlayerControllable(playerid, false);
			SetPlayerPosEx(playerid,1204.4478,17.1577,1000.9219);
			SetPlayerFacingAngle(playerid,145.0213);
			SetPlayerCameraPos(playerid,1206.8975,15.3676,1000.9219);
			SetPlayerCameraLookAt(playerid,1206.5796,15.5900,1000.9219);
			SetPlayerInterior(playerid,2);
			GivePlayerEuro(playerid,-500);
			ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_START_P", 4.0, 0, 1, 1, 1, 0, 0);
			SetTimerEx("StartShowAnimation", 1009, false, "d", playerid);
			SetTimerEx("StartShowJoinGirl", 1139, false, "d", playerid);
			SetTimer("StartShowGirl", 6007, false);
			SetTimer("StartShowBlowGirl", 11009, false);
			SetTimerEx("StartShowEndGirl", 21067, false, "d", playerid);
			SetPVarInt(playerid, "InDerShow", 1);
			SetPVarInt(playerid, "Kondom", 0);
			return 1;
		}
	}
	if(dialogid == NUTTE)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(geld < 100)
	            {
             		SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Tut mir leid, du hast nicht genügend Geld dabei!");
             		nutte = 0;
             		return 1;
	            }
           		if(!strcmp(GetName(bot),"Dominique",true))
				{
				    nutte = 1;
				    TogglePlayerControllable(playerid, false);
		    		SetPlayerPosEx(playerid,-2619.5540,2437.3120,15.2112);
   					SetPlayerCameraPos(playerid,-2617.6780,2441.1045,15.3258);
					SetPlayerCameraLookAt(playerid,-2618.0784,2440.5132,15.2335);
    				ApplyAnimation(playerid, "BD_FIRE","Playa_Kiss_03", 4.0, 1, 1, 1, 1, 0, 1);
				    ApplyAnimation(bot, "BD_FIRE","Grlfrd_Kiss_03", 4.0, 0, 0, 0, 0, 0, 0);
				    SetPlayerChatBubble(bot,"{FFFF00}Dominique: {FFFFFF}Na Dann komm mal her kleiner.",0xFFFF00DD,35.0,3192);
				    SetTimerEx("AnimationsEnd",5411,false,"i",playerid);
				    SetTimerEx("RefreshBot",6029,false,"i",bot);

				}
	        }
	        if(listitem == 1)
	        {
       			if(geld < 500)
	            {
             		SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Tut mir leid, du hast nicht genügend Geld dabei!");
             		nutte = 0;
             		return 1;
	            }
	                nutte = 0;
					ShowPlayerDialog(playerid, KONDOM, DIALOG_STYLE_MSGBOX, "Kondom Frage", "{FFFFFF}Möchtest du ein Kondom rüberziehen oder nicht?\n{FFFF00}Info: Ein Kondom ist ein sicheres Mittel zum schützen vor Geschlechtskrankheiten!", "Ja","Nein");
	        }
	        if(listitem == 2)
	        {
         		if(geld < 800)
	            {
             		SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Tut mir leid, du hast nicht genügend Geld dabei!");
             		nutte = 0;
             		return 1;
	            }
           		if(!strcmp(GetName(bot),"Dominique",true))
				{
					Kick(bot);
					SetPlayerPosEx(playerid,345.4828,303.0971,999.9382);
					SetPlayerFacingAngle(playerid,177.0872);
					SetPlayerCameraPos(playerid,348.4785,302.3453,999.1484);
					SetPlayerCameraLookAt(playerid,348.0370,302.3796,999.1984);
			 		SetPlayerInterior(playerid,6);
 					ConnectNPC("Dominiquee","nutte2");
 					ClearChat(playerid);
 					SetPVarInt(playerid,"SMSpiel",1);
 					GivePlayerEuro(playerid,-700);
 					SendClientMessage(playerid,Gelb2,"Mit der [Leertaste] kannst du die Prostituierte Dominique schlagen!");
 					SendClientMessage(playerid,Weiß,"Mit der [Shift] Taste kannst du das Szenario beenden.");
					UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{FF0000}Besetzt{FFFFFF}| <--");
 					TogglePlayerControllable(playerid, false);
				}
	        }
	        if(listitem == 3)
	        {
       			if(geld < 300)
	            {
             		SendClientMessage(playerid,Rot,"{FFFFFF}Dominique: {ff0000}Tut mir leid, du hast nicht genügend Geld dabei!");
             		nutte = 0;
             		return 1;
	            }
           		if(!strcmp(GetName(bot),"Dominique",true))
				{
					Kick(bot);
					SetPlayerPosEx(playerid,345.7890,304.4543+0.4,999.1484);
					SetPlayerFacingAngle(playerid,175.5436);
					SetPlayerCameraPos(playerid,343.7513,305.0797,999.1484);
					SetPlayerCameraLookAt(playerid,344.0099,304.9333,999.1484);
			 		SetPlayerInterior(playerid,6);
					UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{FF0000}Besetzt{FFFFFF}| <--");
					ConnectNPC("Dominiqueeee","nutte4");
					GivePlayerEuro(playerid,-300);
					SetPVarInt(playerid,"Wixxen",1);
					TogglePlayerControllable(playerid, false);
					ConnectNPC("Dominiqueeee","nutte4");
					SetTimerEx("StartOrnaAnimation", 6009, false, "d", playerid);
					SetTimerEx("StartOrnaAnimationLoop", 10009, false, "d", playerid);
					SetTimerEx("StartOrnaBot", 18009, false, "d", playerid);
					SetTimerEx("StartOrnaAnimationEnde", 25009, false, "d", playerid);
 					SetTimer("StartOrnaGirl", 6007, false);
					ClearChat(playerid);
					SendClientMessage(playerid,Gelb2,"Bitte warte bis die Prostituierte Dominique sich vorbereitet hat!");
				}
	        }
	    }
	    else
	    {
	        nutte = 0;
	    }
	}
	if(dialogid == HAUSHELP2)
	{
	    if(response)
	    {
    		format(string3,sizeof(string3),
			"{FFFFFF}/enter -- {C0C0C0}Ein Haus betreten.\n{FFFFFF}/exit -- {C0C0C0}Ein Haus verlassen.\n{FFFFFF}/hauskaufen -- {C0C0C0}Ein Haus kaufen.\n{FFFFFF}/sellhouse -- {C0C0C0}Ein Haus verkaufen.\n{FFFFFF}/rentroom -- {C0C0C0}Du mietest dich in das jeweilige Haus ein.\n{FFFFFF}/setrentable -- {C0C0C0}Mieten an/aus.\n{FFFFFF}/setrent -- {C0C0C0}Mietpreis.\n{FFFFFF}/hausstatus -- {C0C0C0}Du öffnest/verriegelst deine Haustür.\n{FFFFFF}/vupgrade -- {C0C0C0}Du öffnest das Hauscar Upgrade Menü.");
			ShowPlayerDialog(playerid,HAUSHELP,DIALOG_STYLE_MSGBOX,"{FFFF00}Haus Hilfebox",string3,">>","Abbrechen");
	    }
	}
	if(dialogid == HAUSHELP)
	{
	    if(response)
	    {
	    	format(string3,sizeof(string3),
			"{FFFFFF}/rauswerfen -- {C0C0C0}Wirft einen bestimmten Mieter raus.\n{FFFFFF}/allerauswerfen -- {C0C0C0}Wirft alle Mieter raus.{FFFFFF}\n/mieter -- {C0C0C0}Zeigt alle Mieter an die online sind.{FFFFFF}\n/hausalock -- {C0C0C0}Hausfahrzeug abschließen/öffnen.{FFFFFF}\n/sellhouses -- {C0C0C0}Das Haus an einen Spieler weiterverkaufen.");
			ShowPlayerDialog(playerid,HAUSHELP2,DIALOG_STYLE_MSGBOX,"{FFFF00}Haus Hilfebox",string3,"<<","");
	    }
	}
	if(dialogid == ATMU)
	{
	    new randmoney = 542 + random (1200);
	    if(response)
	    {
		    if(listitem == 0)
		    {
   				new anm = random(4+1);
				switch(anm)
				{
					case 0:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 1:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 2:
					{
					    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,Weiß,"Du hast den richtigen Draht gekappt, und somit den Bankautomat geknackt!");
		    	 		format(string, sizeof(string), "Du erbeutest %d von dem Bankautomat!",randmoney);
                        SendClientMessage(playerid,Gelb2,string);
                        SendClientMessage(playerid,COLOR_LIGHTRED,"Du konntest das Sicherheitssystem nicht komplett ausschalten, die Polizei wurde alarmiert!");
		    	 		GivePlayerEuro(playerid,randmoney);
					    sStats[playerid][sATMRob] = gettime()+(60*180);
		    			format(string, sizeof(string), "Der Spieler %s hat einen Bankautomaten überfallen.",GetName(playerid));
						SendRadioMessage(1,COLOR_DBLUE,string);
					 	sStats[playerid][sWanteds] += 1;
					 	SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
					 	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/alarm.mp3");
					 	SetTimerEx("StopSound",7029,false,"i",playerid);
					 	return 1;
	 				}
					case 3:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 4:
					{
					    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,Weiß,"Du hast den richtigen Draht gekappt, und somit den Bankautomat geknackt!");
		    	 		format(string, sizeof(string), "Du erbeutest %d von dem Bankautomat!",randmoney);
		    	 		SendClientMessage(playerid,Gelb2,string);
		    	 		GivePlayerEuro(playerid,randmoney);
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    return 1;
	 				}
					case 5:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
                }
                return 1;
		    }
			if(listitem == 1)
		    {
   				new anm = random(3+2);
				switch(anm)
				{
					case 0:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 1:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 2:
					{
					    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,Weiß,"Du hast den richtigen Draht gekappt, und somit den Bankautomat geknackt!");
		    	 		format(string, sizeof(string), "Du erbeutest %d von dem Bankautomat!",randmoney);
                        SendClientMessage(playerid,Gelb2,string);
                        SendClientMessage(playerid,COLOR_LIGHTRED,"Du konntest das Sicherheitssystem nicht komplett ausschalten, die Polizei wurde alarmiert!");
		    	 		GivePlayerEuro(playerid,randmoney);
					    sStats[playerid][sATMRob] = gettime()+(60*180);
		    			format(string, sizeof(string), "Der Spieler %s hat einen Bankautomaten überfallen.",GetName(playerid));
						SendRadioMessage(1,COLOR_DBLUE,string);
					 	sStats[playerid][sWanteds] += 1;
					 	SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
					 	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/alarm.mp3");
					 	SetTimerEx("StopSound",7029,false,"i",playerid);
					 	return 1;
	 				}
					case 3:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 4:
					{
					    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,Weiß,"Du hast den richtigen Draht gekappt, und somit den Bankautomat geknackt!");
		    	 		format(string, sizeof(string), "Du erbeutest %d von dem Bankautomat!",randmoney);
		    	 		SendClientMessage(playerid,Gelb2,string);
		    	 		GivePlayerEuro(playerid,randmoney);
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    return 1;
	 				}
					case 5:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
                }
                return 1;
		    }
		    if(listitem == 2)
		    {
   				new anm = random(5);
				switch(anm)
				{
					case 0:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 1:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 2:
					{
					    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,Weiß,"Du hast den richtigen Draht gekappt, und somit den Bankautomat geknackt!");
		    	 		format(string, sizeof(string), "Du erbeutest %d von dem Bankautomat!",randmoney);
                        SendClientMessage(playerid,Gelb2,string);
                        SendClientMessage(playerid,COLOR_LIGHTRED,"Du konntest das Sicherheitssystem nicht komplett ausschalten, die Polizei wurde alarmiert!");
		    	 		GivePlayerEuro(playerid,randmoney);
					    sStats[playerid][sATMRob] = gettime()+(60*180);
		    			format(string, sizeof(string), "Der Spieler %s hat einen Bankautomaten überfallen.",GetName(playerid));
						SendRadioMessage(1,COLOR_DBLUE,string);
					 	sStats[playerid][sWanteds] += 1;
					 	SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
					 	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/alarm.mp3");
					 	SetTimerEx("StopSound",7029,false,"i",playerid);
					 	return 1;
	 				}
					case 3:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 4:
					{
					    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,Weiß,"Du hast den richtigen Draht gekappt, und somit den Bankautomat geknackt!");
		    	 		format(string, sizeof(string), "Du erbeutest %d von dem Bankautomat!",randmoney);
		    	 		SendClientMessage(playerid,Gelb2,string);
		    	 		GivePlayerEuro(playerid,randmoney);
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    return 1;
	 				}
					case 5:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
                }
                return 1;
		    }
		    if(listitem == 3)
		    {
   				new anm = random(1+4);
				switch(anm)
				{
					case 0:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 1:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
					case 2:
					{
					    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,Weiß,"Du hast den richtigen Draht gekappt, und somit den Bankautomat geknackt!");
		    	 		format(string, sizeof(string), "Du erbeutest %d von dem Bankautomat!",randmoney);
                        SendClientMessage(playerid,Gelb2,string);
                        SendClientMessage(playerid,COLOR_LIGHTRED,"Du konntest das Sicherheitssystem nicht komplett ausschalten, die Polizei wurde alarmiert!");
		    	 		GivePlayerEuro(playerid,randmoney);
					    sStats[playerid][sATMRob] = gettime()+(60*180);
		    			format(string, sizeof(string), "Der Spieler %s hat einen Bankautomaten überfallen.",GetName(playerid));
						SendRadioMessage(1,COLOR_DBLUE,string);
					 	sStats[playerid][sWanteds] += 1;
					 	SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
					 	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/alarm.mp3");
					 	SetTimerEx("StopSound",7029,false,"i",playerid);
					 	return 1;
	 				}
					case 3:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
	 				}
					case 4:
					{
					    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,Weiß,"Du hast den richtigen Draht gekappt, und somit den Bankautomat geknackt!");
		    	 		format(string, sizeof(string), "Du erbeutest %d von dem Bankautomat!",randmoney);
		    	 		SendClientMessage(playerid,Gelb2,string);
		    	 		GivePlayerEuro(playerid,randmoney);
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    return 1;
	 				}
					case 5:
					{
					    SendClientMessage(playerid,Rot,"Du hast leider den falschen Draht durgeschnitten!");
					    sStats[playerid][sATMRob] = gettime()+(60*180);
					    PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
					    return 1;
	 				}
                }
		    }
		}
		else
		{
		    ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
		    return 1;
		}
	}
	if(dialogid == ATM3)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SetPVarInt(playerid, "Bank", 1);
	            ShowPlayerDialog(playerid,PIN2,DIALOG_STYLE_PASSWORD,"Pin Authentifizierung","{FFFFFF}Bitte gebe deinen {FFD700}Pin{FFFFFF} in das freie Feld ein!","Bestätigen","Zurück");
	        }
	        if(listitem == 1)
	        {
	            SetPVarInt(playerid, "Bank", 2);
	            ShowPlayerDialog(playerid,PIN2,DIALOG_STYLE_PASSWORD,"Pin Authentifizierung","{FFFFFF}Bitte gebe deinen {FFD700}Pin{FFFFFF} in das freie Feld ein!","Bestätigen","Zurück");
	        }
	        if(listitem == 2)
	        {
	            if(sStats[playerid][sLevel] < 3)
	            {
	                SendClientMessage(playerid,Rot,"Du musst mind. Level 3 sein um den Bankautomaten ausrauben zu können!");
	                ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
	                return 1;
	            }
            	if((norob))
					return SendClientMessage(playerid, Rot, "Das Robsystem wurde von einem Administrator deaktiviert!"); ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
				if(sStats[playerid][sATMRob] > 0)
					return SendClientMessage(playerid,Rot,"Du kannst nur alle 3 Stunden einen Bankautomaten überfallen!"); ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
				if(PolizistenOn < 2)
	    			return SendClientMessage(playerid, Rot, "Du kannst die Bank nicht ausrauben es sind zu wenig Polizisten online!"); ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
			 	if(IsAStaat(playerid))
					return SendClientMessage(playerid, Rot, "Sicherheitskräfte können die Bank nicht ausrauben!"); ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
				if(sStats[playerid][s247Rob] != 0 || sStats[playerid][sBankRaub] != 0)
				    return  SendClientMessage(playerid,Rot, "Du kannst den Bankautomaten jetzt nicht ausrauben, da du schon als Räuber gesucht wirst!"); ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
       			new cop = GetNearestPlayer(playerid, 25);
				if(IsAStaat(cop))
					return SendClientMessage(playerid, Rot, "Du kannst den Bankautomaten nicht ausrauben es ist ein Polizist in der nähe!");
	            ShowPlayerDialog(playerid,ATMU,DIALOG_STYLE_LIST,"Welchen Draht möchtest du durchschneiden?","{000099}Blau\n{006600}Grün\n{FF0000}Rot\n{FFFF00}Gelb\n","Weiter","Zurück");
	        }
	    }
	}
	if(dialogid == ATM7) {
        if(response) {
            new money = strval(inputtext);
            SetPVarInt(playerid, "Bank", 0);
        	if(strlen(inputtext) == 0)
        	    return ShowPlayerDialog(playerid,ATM7,DIALOG_STYLE_INPUT,"Geld einzahlen","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von auf dein Konto einzahlen?","Einzahlen","Zurück");
			if(money <= 0)
			{
				ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
			}
			if(strlen(inputtext) > 6)
			{
			    SetPVarInt(playerid, "Bank", 0);
				ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
			}
	        if(money > geld)
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld einzahlen","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du auf dein Konto einzahlen?","Einzahlen","Zurück");
				return 1;
				}
		            GivePlayerEuro(playerid,-money);
		            sStats[playerid][sKonto] +=money;
		            format(string, sizeof(string),"{FFFFFF}Du hast erfolgreich {FFFF00}%d{FFFFFF} auf dein Konto eingezahlt, Neuer Kontostand: {FFFF00}%d.",money,sStats[playerid][sKonto]);
		            SendClientMessage(playerid,COLOR_WHITE,string);
		            PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
             		 ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
  			}
        	else {
        	SetPVarInt(playerid, "Bank", 0);
         	ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
        }
    }
  		if(dialogid == ATM6) {
        if(response) {
            new money = strval(inputtext);
            SetPVarInt(playerid, "Bank", 0);
        	if(strlen(inputtext) == 0)
        	    return ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
	        if(money >= sStats[playerid][sKonto])
	        {
	            SendClientMessage(playerid,Rot,"Es ist nicht genügend Geld auf dem Konto vorhanden!");
				ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
 			}
			if(money <= 0)
			{
				ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
			}
			if(strlen(inputtext) > 6)
			{
			    SetPVarInt(playerid, "Bank", 0);
				ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
			}
	        if(sStats[playerid][sKonto] <= 0)
	        {
	            SendClientMessage(playerid,Rot,"Du hast kein Geld mehr auf deinem Konto!");
				ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFF2F2}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
				}
		            GivePlayerEuro(playerid,money);
		            sStats[playerid][sKonto] -=money;
		            format(string, sizeof(string),"{FFFFFF}Du hast erfolgreich {FFFF00}%d{FFFFFF} von deinem Konto abgehoben, Restguthaben: {FFFF00}%d.",money,sStats[playerid][sKonto]);
		            SendClientMessage(playerid,COLOR_WHITE,string);
		            SendClientMessage(playerid,COLOR_WHITE,"");
		            PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
              		ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
  			}
        	else {
        	SetPVarInt(playerid, "Bank", 0);
         	ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
        }
    }
	if(dialogid == PIN2)
	{
	    if(response)
	    {
	        if(strlen(inputtext) == 0)
			{
   				SetPVarInt(playerid, "Bank", 0);
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Rot,"Bitte gebe dein Pin in das freie Feld ein!");
				ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
				return 1;
			}
   			if(strlen(inputtext) < 4)
			{
   				SetPVarInt(playerid, "Bank", 0);
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Rot,"Dein Pin ist zu kurz (mind. 4 Zahlen)!");
				ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
				return 1;
			}
			if(strlen(inputtext) > 4)
			{
   				SetPVarInt(playerid, "Bank", 0);
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Rot,"Dein Pin ist zu lang (nur. 4 Zahlen)!");
				ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
				return 1;
			}
	        if(zahl != sStats[playerid][sPin])
	        {
	            SetPVarInt(playerid, "Bank", 0);
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Rot,"Falsche Pin Eingabe!");
				ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
	            return 1;
	        }
	        if(GetPVarInt(playerid, "Bank") == 1)
		 	{
		        ShowPlayerDialog(playerid,ATM6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
		        return 1;
	        }
 	       	if(GetPVarInt(playerid, "Bank") == 2)
		 	{
	        	ShowPlayerDialog(playerid,ATM7,DIALOG_STYLE_INPUT,"Geld einzahlen","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du auf dein Konto einzahlen?","Einzahlen","Zurück");
	        	return 1;
	        }
	    }
	    else
	    {
	        SetPVarInt(playerid, "Bank", 0);
	        ShowPlayerDialog(playerid, ATM3, DIALOG_STYLE_LIST, "Bankautomat","{00AA00}1. {FFFFFF}Abheben\n{00AA00}2. {FFFFFF}Einzahlen\n{00AA00}3. {FFFFFF}Ausrauben", "Auswählen", "Abbrechen");
	    }
	}
	if(dialogid == BANK10)
	{
	    if(response)
	    {
  			if(strlen(inputtext) == 0)
			{
			    SetPVarInt(playerid, "Bank", 0);
				SendClientMessage(playerid,Rot,"Bitte gebe den Verwendungszweck ein!");
				ShowPlayerDialog(playerid,BANK10,DIALOG_STYLE_INPUT,"Geld überweisen","Bitte gebe den {FFFF00}Verwendungszweck{FFFFFF} in das freie Feld ein?","Weiter","Zurück");
				return 1;
			}
			SetPVarInt(playerid, "Bank", 0);
			format(Verwendungszweck[playerid], 128, inputtext);
			ShowPlayerDialog(playerid,BANK9,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Wieviel {FFFF00}Geld{FFFFFF} möchtest du dem Spieler überweisen?","Weiter","Zurück");
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,BANK8,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Welchem {FFFF00}Spieler{FFFFFF} möchtest du das Geld überweisen?","Weiter","Zurück");
	    }
	}
	if(dialogid == BANK9)
	{
		//Loggen
		getdate(year,month,day);
		gettime(hour,minute,second);
		if(response)
		{
			if(strlen(inputtext) == 0)
			{
			    SetPVarInt(playerid, "Bank", 0);
				SendClientMessage(playerid,Rot,"Bitte gebe das Geld was du dem Spieler überweisen willst in das freie Feld ein!");
				ShowPlayerDialog(playerid,BANK9,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Wieviel {FFFF00}Geld{FFFFFF} möchtest du dem Spieler überweisen?","Weiter","Zurück");
				return 1;
			}
			if(strlen(inputtext) > 6)
			{
			    SetPVarInt(playerid, "Bank", 0);
				ShowPlayerDialog(playerid,BANK9,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Wieviel {FFFF00}Geld{FFFFFF} möchtest du dem Spieler überweisen?","Weiter","Zurück");
				return 1;
			}
			if(zahl > sStats[playerid][sKonto])
			{
			    SetPVarInt(playerid, "Bank", 0);
				SendClientMessage(playerid,Rot,"Soviel Geld steht dir nicht zur Verfügung!");
				ShowPlayerDialog(playerid,BANK9,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Wieviel {FFFF00}Geld{FFFFFF} möchtest du dem Spieler überweisen?","Weiter","Zurück");
				return 1;
			}
			if(zahl < 1 ||zahl > 1000000)
   			{
		    	SetPVarInt(playerid, "Bank", 0);
				SendClientMessage(playerid,Rot,"Du kannst dem Spieler nicht wenigen wie 1 oder mehr wie 1.000.000 überweisen!");
				ShowPlayerDialog(playerid,BANK9,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Wieviel {FFFF00}Geld{FFFFFF} möchtest du dem Spieler überweisen?","Weiter","Zurück");
   			    return 1;
			}
			format(string, sizeof(string), "SELECT * FROM accounts WHERE Name = '%s'", bankname[playerid]);
			mysql_query(string);
			mysql_store_result();
			if(!mysql_num_rows())
			{
			    SendClientMessage(playerid,Rot,"Ein interner Bankfehler ist aufgetreten, bitte probieren Sie es erneut!");
			    ShowPlayerDialog(playerid,BANK8,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Welchem {FFFF00}Spieler{FFFFFF} möchtest du das Geld überweisen?","Weiter","Zurück");
			    return 1;
			}
			else
			{
				getdate(year,month,day);
				SetPVarInt(playerid, "Bank", 0);
				format(string,sizeof(string),"Du hast dem Spieler %s erfolgreich %d überwiesen. Grund: %s!",bankname[playerid],zahl,Verwendungszweck[playerid]);
				SendClientMessage(playerid,Weiß,string);
				format(string, sizeof(string), "UPDATE accounts SET konto = konto + '%d' WHERE Name='%s'",
			 	zahl, bankname[playerid]);
			 	mysql_query(string);
				sStats[playerid][sKonto] -= zahl;
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Der Spieler %s hat dem Spieler %s %dEuro ueberwiesen. Grund: %s.",day,month,year,hour,minute,second,GetName(playerid),bankname[playerid],zahl,Verwendungszweck[playerid]);
				PayLog(string);
				format(string, sizeof(string), "INSERT INTO bank_log (von,an,betrag,grund,datum) VALUES ('%s','%s','%d','%s','%d.%d.%d')", GetName(playerid), bankname[playerid],zahl,Verwendungszweck[playerid],day,month,year);
				mysql_query(string);
			}
			return 1;
		}
		else
		{
		    SetPVarInt(playerid, "Bank", 0);
		    ShowPlayerDialog(playerid,BANK8,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Welchem {FFFF00}Spieler{FFFFFF} möchtest du das Geld überweisen?","Weiter","Zurück");
		}
 	}
	if(dialogid == BANK8)
	{
	    if(response)
	    {
     		if(strlen(inputtext) == 0)
			{
			    SetPVarInt(playerid, "Bank", 0);
				SendClientMessage(playerid,Rot,"Bitte gebe einen Spielernamen in das freie Feld ein!");
				ShowPlayerDialog(playerid,BANK8,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Welchem {FFFF00}Spieler{FFFFFF} möchtest du das Geld überweisen?","Weiter","Zurück");
				return 1;
			}
	 		format(string, sizeof(string), "SELECT * FROM accounts WHERE Name = '%s'", inputtext);
			mysql_query(string);
			mysql_store_result();

			if(!mysql_num_rows())
			{
			    ClearChat(playerid);
			    SetPVarInt(playerid, "Bank", 0);
				SendClientMessage(playerid,Rot,"Dieser Spieler existiert leider nicht (Spielername nicht ID)!");
				ShowPlayerDialog(playerid,BANK8,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Welchem {FFFF00}Spieler{FFFFFF} möchtest du das Geld überweisen?","Weiter","Zurück");
				return 1;
			}
			else
	  		{
	 	 		format(string, sizeof(string), "SELECT * FROM accounts WHERE Name = '%s' AND karte = '1' ", inputtext);
				mysql_query(string);
				mysql_store_result();
				if(!mysql_num_rows())
				{
				    ClearChat(playerid);
				    SetPVarInt(playerid, "Bank", 0);
					SendClientMessage(playerid,Rot,"Dieser Spieler hat kein Konto!");
					ShowPlayerDialog(playerid,BANK8,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Welchem {FFFF00}Spieler{FFFFFF} möchtest du das Geld überweisen?","Weiter","Zurück");
					return 1;
				}
				else
				{
				    SetPVarInt(playerid, "Bank", 0);
				    format(bankname[playerid], 128, inputtext);
				    ShowPlayerDialog(playerid,BANK10,DIALOG_STYLE_INPUT,"Geld überweisen","Bitte gebe den {FFFF00}Verwendungszweck{FFFFFF} in das freie Feld ein?","Weiter","Zurück");
				    return 1;
				}
		    }
        }
  		    else
		    {
		        SetPVarInt(playerid, "Bank", 0);
		        ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
		    }
	}
	if(dialogid == PIN)
	{
	    if(response)
	    {
	        if(strlen(inputtext) == 0)
			{
   				SetPVarInt(playerid, "Bank", 0);
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Rot,"Bitte gebe dein Pin in das freie Feld ein!");
				ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
				return 1;
			}
   			if(strlen(inputtext) < 4)
			{
   				SetPVarInt(playerid, "Bank", 0);
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Rot,"Dein Pin ist zu kurz (mind. 4 Zahlen)!");
				ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
				return 1;
			}
			if(strlen(inputtext) > 4)
			{
   				SetPVarInt(playerid, "Bank", 0);
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Rot,"Dein Pin ist zu lang (nur. 4 Zahlen)!");
				ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
				return 1;
			}
	        if(zahl != sStats[playerid][sPin])
	        {
	            SetPVarInt(playerid, "Bank", 0);
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Rot,"Falsche Pin Eingabe!");
				ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
	            return 1;
	        }
	        if(GetPVarInt(playerid, "Bank") == 1)
		 	{
		        ShowPlayerDialog(playerid,BANK5,DIALOG_STYLE_MSGBOX,"Modul Onlinebanking","{FFFFFF}Möchtest du dir das Modul {FFFF00}Onlinebanking{FFFFFF} für 400 hinzufügen lassen?","Ja","Nein");
		        return 1;
	        }
 	       	if(GetPVarInt(playerid, "Bank") == 2)
		 	{
	        	ShowPlayerDialog(playerid,BANK7,DIALOG_STYLE_INPUT,"Geld einzahlen","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du auf dein Konto einzahlen?","Einzahlen","Zurück");
	        	return 1;
	        }
 	      	if(GetPVarInt(playerid, "Bank") == 3)
		 	{
	        	ShowPlayerDialog(playerid,BANK6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
	        	return 1;
	        }
 	      	if(GetPVarInt(playerid, "Bank") == 5)
		 	{
	        	ShowPlayerDialog(playerid,BANK8,DIALOG_STYLE_INPUT,"Geld überweisen","{FFFFFF}Welchem {FFFF00}Spieler{FFFFFF} möchtest du eine bestimmte Summe von Geld überweisen?","Weiter","Zurück");
	        	return 1;
	        }
 	      	if(GetPVarInt(playerid, "Bank") == 4)
		 	{
                new otext[5];
               	//Modul Onlinebanking
 				if(sStats[playerid][sMob] == 0) { otext = "Nein"; }
 				else if(sStats[playerid][sMob] == 1) { otext = "Ja"; }
       		  	format(string2, sizeof(string2),"{FFFF00}Konto Übersicht: {FFFFFF}\nGuhaben : {FFF2F2}%d\n\n{FFFF00}Sicherheit:{FFFFFF}\nPinnummer: {FFF2F2}%d\n\n{FFFF00}Module:{FFFFFF}\nOnlinebanking: {FFF2F2}%s",sStats[playerid][sKonto],sStats[playerid][sPin],otext);
		  		ShowPlayerDialog(playerid,BANK4,DIALOG_STYLE_MSGBOX,"Konto Übersicht",string2,"Zurück","");
		  		SetPVarInt(playerid, "Bank", 0);
            }
	    }
	    else
	    {
	        SetPVarInt(playerid, "Bank", 0);
	        ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
	    }
	}
	if(dialogid == BANK1) {
        if(response) {
			new randpin = 1000 + random(8999);
			sStats[playerid][sKarte] = 1;
			sStats[playerid][sPin] = randpin;
			PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		  	format(string, sizeof(string),"{FFFFFF}Ihr Konto wurde erfolgreich erstellt.\nIhre geheime Pinnummer lautet: {FFD700}%d{FFFFFF}.\nBitte merken Sie sich diese Nummer.\nSie können das Bank Terminal jederzeit am Bank Schalter mit /bank öffnen.",sStats[playerid][sPin]);
		  	ShowPlayerDialog(playerid,BANK2,DIALOG_STYLE_MSGBOX,"Kontoerstellung erfolgreich",string,"OK","");
		  	SetPVarInt(playerid, "Bank", 0);
  			}
        	else {
        }
    }
  		if(dialogid == BANK2) {
        if(response) {
        ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
  			}
        	else {
        	SetPVarInt(playerid, "Bank", 0);
        	ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
        }
    }
  		if(dialogid == BANK4) {
        if(response) {
        ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
  			}
        	else {
        	SetPVarInt(playerid, "Bank", 0);
    	ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
        }
    }
  		if(dialogid == BANK5)
	  	{
        	if(response)
			{
  				ClearChat(playerid);
	    		SendClientMessage(playerid,Weiß,"Du hast dir das Modul Onlinebanking erfolgreich für 400 hinzufügen lassen.");
		        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Du kannst nun im UCP das Untermenü Onlinebanking benutzen!");
		        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		        sStats[playerid][sMob] = 1;
		        SetPVarInt(playerid, "Bank", 0);
		        ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
        	}
        	else
			{
        		SetPVarInt(playerid, "Bank", 0);
            	ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
			}
    	}
  		if(dialogid == BANK6)
	  	{
        if(response)
		{
            new money = strval(inputtext);
            SetPVarInt(playerid, "Bank", 0);
        	if(strlen(inputtext) == 0)
        	    return ShowPlayerDialog(playerid,BANK6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
	        if(money > sStats[playerid][sKonto])
	        {
	            SendClientMessage(playerid,Rot,"Es ist nicht genügend Geld auf dem Konto vorhanden!");
				ShowPlayerDialog(playerid,BANK6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
		 	}
			if(money <= 0)
			{
				ShowPlayerDialog(playerid,BANK6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
			}
 			if(strlen(inputtext) > 6)
			{
			    SetPVarInt(playerid, "Bank", 0);
				ShowPlayerDialog(playerid,BANK6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
			}
	        if(sStats[playerid][sKonto] <= 0)
	        {
	            SendClientMessage(playerid,Rot,"Du hast kein Geld mehr auf deinem Konto!");
				ShowPlayerDialog(playerid,BANK6,DIALOG_STYLE_INPUT,"Geld abheben","{FFFFFF}Wie viel {FFF2F2}Geld{FFFFFF} möchtest du von deinem Konto abheben?","Abheben","Zurück");
				return 1;
			}
		            GivePlayerEuro(playerid,money);
		            sStats[playerid][sKonto] -=money;
		            format(string, sizeof(string),"{FFFFFF}Du hast erfolgreich {FFFF00}%d{FFFFFF} von deinem Konto abgehoben, Restguthaben: {FFFF00}%d.",money,sStats[playerid][sKonto]);
		            SendClientMessage(playerid,COLOR_WHITE,string);
		            SendClientMessage(playerid,COLOR_WHITE,"");
		            PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
              		ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
  			}
        	else
			{
			     SetPVarInt(playerid, "Bank", 0);
        		 ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
        }
    }
  		if(dialogid == BANK7) {
        if(response) {
            new money = strval(inputtext);
            SetPVarInt(playerid, "Bank", 0);
        	if(strlen(inputtext) == 0)
        	    return ShowPlayerDialog(playerid,BANK7,DIALOG_STYLE_INPUT,"Geld einzahlen","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du auf dein Konto einzahlen?","Einzahlen","Zurück");
 			if(strlen(inputtext) > 6)
			{
			    SetPVarInt(playerid, "Bank", 0);
				ShowPlayerDialog(playerid,BANK7,DIALOG_STYLE_INPUT,"Geld einzahlen","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du auf dein Konto einzahlen?","Einzahlen","Zurück");
				return 1;
			}
			if(money <= 0)
			{
				ShowPlayerDialog(playerid,BANK7,DIALOG_STYLE_INPUT,"Geld einzahlen","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du auf dein Konto einzahlen?","Einzahlen","Zurück");
				return 1;
			}
	        if(money > geld)
	        {
	            SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				ShowPlayerDialog(playerid,BANK7,DIALOG_STYLE_INPUT,"Geld einzahlen","{FFFFFF}Wie viel {FFFF00}Geld{FFFFFF} möchtest du auf dein Konto einzahlen?","Einzahlen","Zurück");
				return 1;
				}
		            GivePlayerEuro(playerid,-money);
		            sStats[playerid][sKonto] +=money;
		            format(string, sizeof(string),"{FFFFFF}Du hast erfolgreich {FFFF00}%d{FFFFFF} auf dein Konto eingezahlt, Neuer Kontostand: {FFFF00}%d.",money,sStats[playerid][sKonto]);
		            SendClientMessage(playerid,COLOR_WHITE,string);
		            PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
             		 ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
  			}
        	else {
        	SetPVarInt(playerid, "Bank", 0);
         ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
        }
    }
   	if (dialogid == BANK3) {
        if(response) {
            switch (listitem) {
                case 0:
                {
 		 		SetPVarInt(playerid, "Bank", 4);
	 	 		ShowPlayerDialog(playerid,PIN,DIALOG_STYLE_PASSWORD,"Pin Authentifizierung","{FFFFFF}Bitte gebe deinen {FFD700}Pin{FFFFFF} in das freie Feld ein!","Bestätigen","Zurück");
                }
                case 1:
                {
 		 		SetPVarInt(playerid, "Bank", 3);
	 	 		ShowPlayerDialog(playerid,PIN,DIALOG_STYLE_PASSWORD,"Pin Authentifizierung","{FFFFFF}Bitte gebe deinen {FFD700}Pin{FFFFFF} in das freie Feld ein!","Bestätigen","Zurück");
                }
                case 2:
                {
  		 		SetPVarInt(playerid, "Bank", 2);
	 	 		ShowPlayerDialog(playerid,PIN,DIALOG_STYLE_PASSWORD,"Pin Authentifizierung","{FFFFFF}Bitte gebe deinen {FFD700}Pin{FFFFFF} in das freie Feld ein!","Bestätigen","Zurück");
				}
				case 3:
				{
				if(sStats[playerid][sLevel] < 3)
				{
				    SendClientMessage(playerid,Rot,"Du musst mind. Level 3 sein um eine Überweisung tätigen zu können!");
				    ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
				    return 1;
				}
	 			SetPVarInt(playerid, "Bank", 5);
	 	 		ShowPlayerDialog(playerid,PIN,DIALOG_STYLE_PASSWORD,"Pin Authentifizierung","{FFFFFF}Bitte gebe deinen {FFD700}Pin{FFFFFF} in das freie Feld ein!","Bestätigen","Zurück");
				}
 				case 4:
                {
                if(sStats[playerid][sMob] == 1)
                {
                    SetPVarInt(playerid, "Bank", 0);
                    SendClientMessage(playerid,Rot,"Du besitzt schon das Modul Onlinebanking!");
                    ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
                    return 1;
                }
				if(geld < 400)
				{
				SetPVarInt(playerid, "Bank", 0);
    			SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (400)");
       			ShowPlayerDialog(playerid, BANK3, DIALOG_STYLE_LIST, "Bank Terminal","{00AA00}1. {FFFFFF}Übersicht\n{00AA00}2. {FFFFFF}Abheben\n{00AA00}3. {FFFFFF}Einzahlen\n{00AA00}5. {FFFFFF}Überweisung\n{00AA00}6. {FFFFFF}Onlinebanking", "Auswählen", "Abbrechen");
          		return 1;
                }
       		 	SetPVarInt(playerid, "Bank", 1);
	 	 		ShowPlayerDialog(playerid,PIN,DIALOG_STYLE_PASSWORD,"Pin Authentifizierung","{FFFFFF}Bitte gebe deinen {FFD700}Pin{FFFFFF} in das freie Feld ein!","Bestätigen","Zurück");
				}

            }
            }
			}
	if(dialogid == HEBE2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ChangeVehicleColor(v, 2, 2);
	            GivePlayerEuro(playerid, -100);
	            SendClientMessage(playerid,Weiß,"Das Fahrzeug wurde erfolgreich in Blau umlackiert!");
	            PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
	        }
	        if(listitem == 1)
	        {
	            ChangeVehicleColor(v, 6, 6);
	            GivePlayerEuro(playerid, -100);
	            SendClientMessage(playerid,Weiß,"Das Fahrzeug wurde erfolgreich in Gelb umlackiert!");
	            PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
	        }
	        if(listitem == 2)
	        {
	            ChangeVehicleColor(v, 16, 16);
	            GivePlayerEuro(playerid, -100);
	            SendClientMessage(playerid,Weiß,"Das Fahrzeug wurde erfolgreich in Grün umlackiert!");
	            PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
	        }
	        if(listitem == 3)
	        {
	            ChangeVehicleColor(v, 3,3);
	            GivePlayerEuro(playerid, -100);
	            SendClientMessage(playerid,Weiß,"Das Fahrzeug wurde erfolgreich in Rot umlackiert!");
	            PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
	        }
	        if(listitem == 4)
	        {
	            ChangeVehicleColor(v, 0, 0);
	            GivePlayerEuro(playerid, -100);
	            SendClientMessage(playerid,Weiß,"Das Fahrzeug wurde erfolgreich in Schwarz umlackiert!");
	            PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
	        }
	        if(listitem == 5)
	        {
	            ChangeVehicleColor(v, 1, 1);
	            GivePlayerEuro(playerid, -100);
	            SendClientMessage(playerid,Weiß,"Das Fahrzeug wurde erfolgreich in Weiß umlackiert!");
	            PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
	        }
	    }
	    else
	    {
	    	ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
	    }
	}
	if(dialogid == HEBE1)
	{
		if(response == 1)
		{
		    if(listitem == 0)
		    {
		        if(geld < 100)
		        {
          			SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
		        }
		        if(IsSupportCar(v))
		        {
       				SendClientMessage(playerid,Rot,"Du kannst das Supportauto nicht umfärben!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
		        }
		        ShowPlayerDialog(playerid, HEBE2, DIALOG_STYLE_LIST, "Hebebühne Farbweschel","{00AA00}1. {FFFFFF}Blau\n{00AA00}2. {FFFFFF}Gelb\n{00AA00}3. {FFFFFF}Grün\n{00AA00}4. {FFFFFF}Rot\n{00AA00}5. {FFFFFF}Schwarz\n{00AA00}6. {FFFFFF}Weiß", "Auswählen", "Zurück");
		    }
		    if(listitem == 1)
		    {
		        if(geld < 1000)
		        {
		            SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
		        }
		        if(IsABike(v))
		        {
		            SendClientMessage(playerid,Rot,"Dieses Fahrzeug ist nicht mit Nitro kompatible!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
		  		}
		        if(CompatibleWithNitro(v))
		        {
		            SendClientMessage(playerid,Rot,"Dieses Fahrzeug ist nicht mit Nitro kompatible!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
		        }
      			if(GetVehicleComponentInSlot(v,GetVehicleComponentType(1010)) == 1010)
    			{
    			    SendClientMessage(playerid,Rot,"In diesem Fahrzeug ist schon Nitro vorhanden !");
    			    ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
					return 1;
    			}
    			GivePlayerEuro(playerid,-1000);
    			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
    			SendClientMessage(playerid,Weiß,"Es wurde erfolgreich Nitro in das Fahrzeug eingebaut!");
    			AddVehicleComponent(v,1010);
    			ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		    }
			if(listitem == 2)
			{
			    new maxtank = GasMax[GetVehicleModel(v)-400] - Tankmenge[v];
			    new geldb = maxtank * BizzInfo[0][bEntranceCost];
				if(Tankmenge[v] == GasMax[GetVehicleModel(v)-400])
				{
				    SendClientMessage(playerid,Rot,"Der Tank dieses Fahrzeuges ist voll!");
				    ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
				    return 1;
				}
				if(BizzInfo[0][bProducts] <= 0)
				{
    				SendClientMessage(playerid,Rot,"Das Benzin ist leer!");
				    ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
				    return 1;
				}
				if(geld < geldb)
				{
		            SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
				}
	 			BizzInfo[0][bProducts] -= maxtank;
				BizzInfo[0][bTill] += geldb;
				GivePlayerEuro(playerid,-geldb);
				SendClientMessage(playerid,Weiß,"Du hast erfolgreich das Fahrzeug vollgetankt!");
				Tankmenge[v] += maxtank;
				ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
			}
			if(listitem == 3)
			{
			    if(geld < 600)
			    {
       				SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
			    }
  	    		new Float:vhealth;
    			GetVehicleHealth(v,vhealth);
 	    		if(vhealth>900.0)
 	    		{
    				SendClientMessage(playerid,Rot,"Dieses Fahrzeug muss nicht repariert werden!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
 	    		}
   				GivePlayerEuro(playerid,-600);
   				PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,Weiß,"Du hast das Fahrzeug erfolgreich repariert!");
				RepairVehicle(GetPlayerVehicleID(playerid));
				ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
			}
			if(listitem == 4)
			{
   				if(geld < 500)
			    {
       				SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
			    }
			    if(MotorKaputt[v] == 0)
			    {
   					SendClientMessage(playerid,Rot,"Der Motor dieses Fahrzeuges muss nich repariert werden!");
		            ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
		            return 1;
			    }
				MotorKaputt[v] = 0;
				GivePlayerEuro(playerid,-500);
				SendClientMessage(playerid,Weiß,"Du hast den Motor dieses Fahrzeuges erfolgreich repariert!");
				ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
			}
		}
		if(response == 0)
		{
		    Hebeaus(playerid);
		    return 1;
		}
 	}
	if(dialogid == MISSION1)
	{
		if(response)
		{
 			ClearChat(playerid);
 			new rand = random(sizeof(SweeperSpawns));
 			Sweeper[playerid] = CreateServerVehicle(0,574,SweeperSpawns[rand][0],SweeperSpawns[rand][1],SweeperSpawns[rand][2],SweeperSpawns[rand][3],39,39,97); // Mechatroniker Sweepter
 			PutPlayerInVehicle(playerid, Sweeper[playerid],0);
 			SetVehicleLock(Sweeper[playerid],1);
		 	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		  	sStats[playerid][sMission] = 1;
			DisablePlayerCheckpoint(playerid);
			QuestCP[playerid] = 95;
		 	SetPlayerCheckpoint(playerid,-2506.0601,2339.6118,4.7095,4.0);
			SendClientMessage(playerid,Weiß,"Deine Säuberungsmission beginnt jetzt!");
 	    }
	}
	if(dialogid == TANKEN1)
	{
		new preis = zahl*BizzInfo[0][bEntranceCost];
		new maxtank = GasMax[GetVehicleModel(v)-400] - Tankmenge[v];
	    if(response == 1)
	    {
	        if(zahl == 0)
	        {
	            ClearChat(playerid);
         		SendClientMessage(playerid,Rot,"Bitte gebe dir Literanzahl ein wieviel du tanken möchtest!");
	            ShowPlayerDialog(playerid, TANKEN1, DIALOG_STYLE_INPUT, "Tanken", "{FFFFFF}Wieviele {FFFF00}Liter{FFFFFF} möchtest du tanken?", "Tanken","Abbrechen");
	            return 1;
	        }
	        if(zahl > GasMax[GetVehicleModel(v)-400])
	        {
         		ClearChat(playerid);
    	    	format(string, sizeof(string), "Dein Tank umfasst nur %d Liter!",GasMax[GetVehicleModel(v)-400]);
       	    	SendClientMessage(playerid,Rot,string);
       	    	ShowPlayerDialog(playerid, TANKEN1, DIALOG_STYLE_INPUT, "Tanken", "{FFFFFF}Wieviele {FFFF00}Liter{FFFFFF} möchtest du tanken?", "Tanken","Abbrechen");
	            return 1;
	        }
	        if(zahl > maxtank)
	        {
	            ClearChat(playerid);
    	    	format(string, sizeof(string), "Du kannst nur max. %d Liter tanken!",maxtank);
       	    	SendClientMessage(playerid,Rot,string);
       	    	ShowPlayerDialog(playerid, TANKEN1, DIALOG_STYLE_INPUT, "Tanken", "{FFFFFF}Wieviele {FFFF00}Liter{FFFFFF} möchtest du tanken?", "Tanken","Abbrechen");
	            return 1;
	        }
	        if(geld < preis)
	        {
	            ClearChat(playerid);
	            SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	            ShowPlayerDialog(playerid, TANKEN1, DIALOG_STYLE_INPUT, "Tanken", "{FFFFFF}Wieviele {FFFF00}Liter{FFFFFF} möchtest du tanken?", "Tanken","Abbrechen");
	            return 1;
	        }

	        TogglePlayerControllable(playerid, false);
	        SetPVarInt(playerid,"Tankmenge",zahl);
	        SetPVarInt(playerid,"Tankpreis",preis);
	        SetTimerEx("TankenEnde", 6013, false, "d", playerid);
	        ClearChat(playerid);
	        SetPVarInt(playerid,"Betankt",1);
	        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Fahrzeug wird betankt. Bitte warten . . .");
	    }
		else
		{
		    ClearChat(playerid);
		    SendClientMessage(playerid,Gelb2,"Tankwart: Beehren Sie uns bald wieder!");
		}
	}
	if(dialogid == SONNENBRILLEN2)
	{
	    if(response == 0)
	    {
     		ClearChat(playerid);
     		RemovePlayerAttachedObject(playerid,2);
     		SetPVarInt(playerid,"Anzeige",0);
			SetPVarInt(playerid,"Sonnenbrille",0);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerPosEx(playerid,664.8580,-568.3545,16.3433);
			SetPlayerFacingAngle(playerid,355.9711);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
	    }
	    if(response == 1)
	    {
	        ClearChat(playerid);
	        RemovePlayerAttachedObject(playerid,2);
	        SetPVarInt(playerid,"Anzeige",0);
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        GivePlayerEuro(playerid, -1000);
			SendClientMessage(playerid,Weiß,"Viel Spass mit deiner neuen Sonnenbrille!");
			SendClientMessage(playerid,Gelb2,"Mit /sonnenbrille kannst du diese auf und absetzen.");
			sStats[playerid][sSonnenbrille] = GetPVarInt(playerid, "Sonnenbrille");
			SetPVarInt(playerid,"Sonnenbrille",0);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerPosEx(playerid,663.8849,-570.1398,16.3433);
			SetPlayerFacingAngle(playerid,178.4582);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
	    }
	}
	if(dialogid == SONNENBRILLEN)
	{
	    if(response == 0)
	    {
	        SetPVarInt(playerid,"Anzeige",0);
  			SetPlayerVirtualWorld(playerid,0);
			SetPlayerPosEx(playerid,663.8849,-570.1398,16.3433);
			SetPlayerFacingAngle(playerid,178.4582);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
	 	}
	    if(response)
	    {
	        if(zahl < 1 || zahl > 30)
		 	{
		 	    SetPVarInt(playerid,"Anzeige",0);
		 	    SendClientMessage(playerid,Rot,"Bitte wähle eine Zahl zwischen 1 und 30!");
				return 1;
		 	}
		 	if(geld < 1000)
		 	{
		 	    SetPVarInt(playerid,"Anzeige",0);
				SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (1000)!");
		 	    return 1;
		 	}
			if(GetPVarInt(playerid, "Angezogen") == 1)
			{
			    RemovePlayerAttachedObject(playerid,2);
			    SetPVarInt(playerid,"Angezogen",0);
	  		}
		 	    new glasseid =  CommonRed + (zahl - 1);
		 	    SetPVarInt(playerid,"Sonnenbrille",glasseid);
		 		Sonnenbrilleanprobieren(playerid);
	    }
	}
		if(dialogid == ASCHEIN1) {
        if(response) {

            ClearChat(playerid);
            TogglePlayerControllable(playerid, false);
			SetPlayerPosEx(playerid,1498.7407,1306.4352,1093.2891);
			SetPlayerFacingAngle(playerid,266.4341);
			SetPlayerCameraPos(playerid,1502.3408,1306.4664,1093.2891);
			SetPlayerCameraLookAt(playerid,1501.7275,1306.4470,1093.2891,1);
			ApplyAnimation(playerid, "PED","SEAT_down", 4.0, 0, 1, 1, 1, 0, 0);
			SetPlayerVirtualWorld(playerid, 1+playerid);
            GivePlayerEuro(playerid, -3500);
            Fehlerpunkte[playerid] = 0;
            ShowPlayerDialog(playerid,ASCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil der Anglerlizens,\nes werden dir Erklärungen und Regeln zum Thema Angeln geliefert,\nanschließend folgt eine Praktische Prüfung. {7FFF00}Viel Glück!","Weiter","");
        }
    }
    if(dialogid == ASCHEIN2) {
        if(response) {
		ShowPlayerDialog(playerid,ASCHEIN3,DIALOG_STYLE_MSGBOX,"Erklärung/Regeln zum Thema Angeln","{FFFFFF}Ich bitte dich nur in den dafür vorgesehen {FFFF00}Gebieten (Ausgeschildert){FFFFFF} zu angeln,\naußerdem bitte ich dich nur so viel zu angeln wie du auch selber essen kannst.\nDamit unser natürlicher Bestand an Fischen uns enthalten bleibt.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,ASCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Motorradscheines,\nes werden dir Erklärungen und Regeln zum Thema Angeln geliefert,\nanschließend folgt eine Praktische Prüfung.{7FFF00}Viel Glück!","Weiter","");
        }
    }
    if(dialogid == ASCHEIN3) {
		if(response) {
		    ClearChat(playerid);
		    ClearAnimations(playerid);
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerPosEx(playerid,-2324.3430,2345.3875,4.9844);
		    SetPlayerFacingAngle(playerid,176.6210);
   			SetPlayerCameraPos(playerid,-2335.9441,2343.5676,6.9844);
			SetPlayerCameraLookAt(playerid,-2335.6606,2342.8809,6.9844);
			ShowPlayerDialog(playerid,ASCHEIN4,DIALOG_STYLE_MSGBOX,"Angelplatz","{FFFFFF}Dies hier ist der {FFFF00}Bayside Angeplatz{FFFFFF}\nHier treffen sich unsere Hobbyangler.\nBitte begebe dich jetzt auch hier hin und betrete bei Ankunft den Checkpoint,\num weitere Instruktionen zu erhalten!","OK","");
		}
	}
	if(dialogid == ASCHEIN4) {
	    if(response) {
	        ClearChat(playerid);
	        SetCameraBehindPlayer(playerid);
   		    SetPlayerPosEx(playerid,-2517.7588,2452.0168,17.8965);
		    SetPlayerFacingAngle(playerid,133.8279);
   			SetPlayerCameraPos(playerid,-2335.9441,2343.5676,4.9844);
	        TogglePlayerControllable(playerid, true);
	        SendClientMessage(playerid,Weiß,"Begebe dich nun zur roten Makierung auf der Karte!");
       		SetPlayerCheckpoint(playerid, -2335.7412,2333.7437,4.9808, 3.0);
			QuestCP[playerid] = 193;
			SetPVarInt(playerid, "InAschein", 1);
		}
	}
	if(dialogid == ASCHEIN5) {
	    if(response) {
	        ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Plyr", 4.0, 0, 1, 1, 1, 0, 1);
			ShowPlayerDialog(playerid,ASCHEIN6,DIALOG_STYLE_MSGBOX,
			"Angelanleitung","{00FF32}Schritt 1 >>>  {FFFFFF}Du musst zuerst deine Angel mit /angel rausholen.\n{00FF32}Schritt 2 >>> {FFFFFF} Danach begibst du dich zum Angelplatz und gibst den Befehl /angeln ein.\n{00FF32}Schritt 3 >>> {FFFFFF} Sofern ein Fisch angebissen hat erscheint ein Text mit Fisch! jetzt solltest du so schnell wie möglich die {FFFF00}Leertaste{FFFFFF} drücken.\n{00FF32}Schritt 4 >>> {FFFFFF} Entweder du hast jetzt ein Fisch oder deine Leine ist gerissen ;)","OK","");
			sStats[playerid][sAngel] = 1;
			sStats[playerid][sKoeder] = 3;
			AngelTimer[playerid] = SetTimerEx("AngelCheck",4019,true,"i",playerid);
		}
	}
	if(dialogid == ASCHEIN6) {
	    if(response) {
			ClearAnimations(playerid);
		}
	}
	if(dialogid == MSCHEIN1) {
        if(response) {
            ClearChat(playerid);
            TogglePlayerControllable(playerid, false);
			SetPlayerPosEx(playerid,1498.7407,1306.4352,1093.2891);
			SetPlayerFacingAngle(playerid,266.4341);
			SetPlayerCameraPos(playerid,1502.3408,1306.4664,1093.2891);
			SetPlayerCameraLookAt(playerid,1501.7275,1306.4470,1093.2891,1);
			ApplyAnimation(playerid, "PED","SEAT_down", 4.0, 0, 1, 1, 1, 0, 0);
			SetPlayerVirtualWorld(playerid, 1+playerid);
            GivePlayerEuro(playerid, -5000);
            Fehlerpunkte[playerid] = 0;
            ShowPlayerDialog(playerid,MSCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Motorradscheines,\nes werden dir Erklärungen geliefert und anschließend Fragen zu diesen Erklärungen gestellt,\nsolltest du mehr wie {FFFF00}2 Fehlerpunkte{FFFFFF} haben fällst du durch.{7FFF00}Viel Glück!","Weiter","");
        }
        else {
        }
    }
    if(dialogid == MSCHEIN2) {
        if(response) {
		ShowPlayerDialog(playerid,MSCHEIN3,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Erklärung","{FFFFFF}In der Innenstadt herrscht eine Richtgeschwindigkeit von {FFFF00}80KM/H{FFFFFF},\nausserhalb der Stadt {FFFF00}150KM/H {FFFFFF}.Bei uns herrscht Rechts vor Links,\nd.H Rechtfahrgebot,Ampeln werden nicht beachtet.\n{FFFF00}Einsatzwagen{FFFFFF} mit Blaulicht haben Vorfahrt.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,MSCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Motorradscheines,\nes werden dir Erklärungen geliefert und anschließend Fragen zu diesen Erklärungen gestellt,\nsolltest du mehr wie {FFFF00}2 Fehlerpunkte{FFFFFF} haben fällst du durch.{7FFF00}Viel Glück!","Weiter","");
        }
    }
    if(dialogid == MSCHEIN3) {
        if(response) {
		ShowPlayerDialog(playerid,MSCHEIN4,DIALOG_STYLE_MSGBOX,"Helmpflicht","{FFFFFF}Beim fahren von einem Motorrad oder Roller besteht {FFFF00}Helmpflicht{FFFFFF}.\nHelme können im {FFFF00}24/7{FFFFFF} Shop erworben werden, diese gibt es in verschiedener Ausführung.\nBeim fahren ohne Helm sind mit den Konsquenzen {FFFF00}(Motorradschein entzug){FFFFFF} zu rechnen.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,MSCHEIN3,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Erklärung","{FFFFFF}In der Innenstadt herrscht eine Richtgeschwindigkeit von {FFFF00}80KM/H{FFFFFF},\nausserhalb der Stadt {FFFF00}150KM/H {FFFFFF}.Bei uns herrscht Rechts vor Links,\nd.H Rechtfahrgebot,Ampeln werden nicht beachtet.\n{FFFF00}Einsatzwagen{FFFFFF} mit Blaulicht haben Vorfahrt.","Weiter","");
        }
    }
    if(dialogid == MSCHEIN4) {
        if(response) {
		ShowPlayerDialog(playerid,MSCHEIN5,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Frage","{FFFFFF}Parken darf man nur an den dafür vorgesehen {FFFF00}Parkplätzen{FFFFFF},\nan seinem {FFFF00}eigenen Haus{FFFFFF} oder am Boardstein\ntelefonieren während dem Fahren ist {FFFF00}strengstens{FFFFFF} verboten\nEinfahrten von Häusern müssen stets {FFFF00}freigehalten{FFFFFF} werden.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,MSCHEIN4,DIALOG_STYLE_MSGBOX,"Helmpflicht","{FFFFFF}Beim fahren von einem Motorrad oder Roller besteht {FFFF00}Helmpflicht{FFFFFF}.\nHelme können im {FFFF00}24/7{FFFFFF} Shop erworben werden, diese gibt es in verschiedener Ausführung.\nBeim fahren ohne Helm sind mit den Konsquenzen {FFFF00}(Motorradschein entzug){FFFFFF} zu rechnen.","Weiter","");
        }
    }
    if(dialogid == MSCHEIN5) {
        if(response) {
		ShowPlayerDialog(playerid,MSCHEIN6,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Frage","{FFFFFF}Darf man schneller als {FFFF00}80KM/H{FFFFFF} in der Stadt fahren?","Ja","Nein");
        }
        else {
        ShowPlayerDialog(playerid,MSCHEIN6,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Frage","{FFFFFF}Darf man schneller als {FFFF00}80KM/H{FFFFFF} in der Stadt fahren?","Ja","Nein");
        }
    }
    if(dialogid == MSCHEIN6) {
        if(response) {
        Fehlerpunkte[playerid] += 1;
		ShowPlayerDialog(playerid,MSCHEIN7,DIALOG_STYLE_MSGBOX,"Helm Frage","{FFFFFF}Ist es erlaubt auf einer kurzen Distanz ohne{FFFF00} Helm{FFFFFF} zu fahren?","Nein","Ja");
        }
        else {
        ShowPlayerDialog(playerid,MSCHEIN7,DIALOG_STYLE_MSGBOX,"Helm Frage","{FFFFFF}Ist es erlaubt auf einer kurzen Distanz ohne{FFFF00} Helm{FFFFFF} zu fahren?","Nein","Ja");
        }
    }
    if(dialogid == MSCHEIN7) {
        if(response) {
		ShowPlayerDialog(playerid,MSCHEIN8,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Frage","{FFFFFF}Darf man vor einer {FFFF00}Haustür[Einfahrt]{FFFFFF} parken wenn es nicht sein eigenes ist?","Ja","Nein");
        }
        else {
        Fehlerpunkte[playerid] += 1;
        ShowPlayerDialog(playerid,MSCHEIN8,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Frage","{FFFFFF}Darf man vor einer {FFFF00}Haustür[Einfahrt]{FFFFFF} parken wenn es nicht sein eigenes ist?","Ja","Nein");
        }
    }
    if(dialogid == MSCHEIN8) {
        if(response) {
        Fehlerpunkte[playerid] += 1;
        ClearChat(playerid);
        SendClientMessage(playerid,Weiß,"Situation : Ein aktiver Einsatzwagen fährt hinter dir und will überholen.");
        SendClientMessage(playerid,Gelb2,"Was machst du?");
		ShowPlayerDialog(playerid,MSCHEIN9,DIALOG_STYLE_LIST,"(Nur 1 Antwort ist richtig!)","Ich bleibe Normal und mache gar nix.\nIch fahre rechts ran und lasse den Einsatzwagen vorbeiziehen.\nIch blockiere den Einsatzwagen.\nIch ramme den Einsatzwagen von der Strasse.","Auswählen","");
        }
        else {
        ClearChat(playerid);
        SendClientMessage(playerid,Weiß,"Situation : Ein aktiver Einsatzwagen fährt hinter dir und will überholen.");
        SendClientMessage(playerid,Gelb2,"Was machst du?");
		ShowPlayerDialog(playerid,MSCHEIN9,DIALOG_STYLE_LIST,"(Nur 1 Antwort ist richtig!)","Ich bleibe Normal und mache gar nix.\nIch fahre rechts ran und lasse den Einsatzwagen vorbeiziehen.\nIch blockiere den Einsatzwagen.\nIch ramme den Einsatzwagen von der Strasse.","Auswählen","");
        }
    }
    if(dialogid == MSCHEIN9)
    {
        if(response == 0)
        {
        	ClearChat(playerid);
        	SendClientMessage(playerid,Weiß,"Situation : Ein aktiver Einsatzwagen fährt hinter dir und will überholen.");
        	SendClientMessage(playerid,Gelb2,"Was machst du?");
            ShowPlayerDialog(playerid,MSCHEIN9,DIALOG_STYLE_LIST,"(Nur 1 Antwort ist richtig!)","Ich bleibe Normal und mache gar nix.\nIch fahre rechts ran und lasse den Einsatzwagen vorbeiziehen.\nIch blockiere den Einsatzwagen.\nIch ramme den Einsatzwagen von der Strasse.","Auswählen","");
        }
        if(response == 1)
        {
            if(listitem == 0)
            {
                Fehlerpunkte[playerid] += 1;
                ClearChat(playerid);
                ShowPlayerDialog(playerid,MSCHEIN10,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
            }
            if(listitem == 1)
            {
                ClearChat(playerid);
                ShowPlayerDialog(playerid,MSCHEIN10,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
            }
            if(listitem == 2)
            {
                Fehlerpunkte[playerid] += 1;
                ClearChat(playerid);
                ShowPlayerDialog(playerid,MSCHEIN10,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
            }
            if(listitem == 3)
            {
                Fehlerpunkte[playerid] += 1;
                ClearChat(playerid);
                ShowPlayerDialog(playerid,MSCHEIN10,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
            }
        }
    }
    if(dialogid == MSCHEIN10)
	{
	if(response == 0)
	{
		ShowPlayerDialog(playerid,MSCHEIN10,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
	}
	if(response)
	{
		if(Fehlerpunkte[playerid] > 2)
		{
			format(string, sizeof(string), "Du hast den Theoretischen Teil des Motorradscheines leider nicht bestanden, da du %d Fehlerpunkt/e hast.", Fehlerpunkte[playerid]);
			SendClientMessage(playerid,COLOR_LIGHTRED,string);
			SendClientMessage(playerid,Weiß,"Die Hälfte des Geldes wurde dir zurückgegeben.");
			GivePlayerEuro(playerid,2500);
			ClearAnimations(playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, true);
			SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
			SetPlayerFacingAngle(playerid,89.5907);
			SetPlayerInterior(playerid, 3);
			Fehlerpunkte[playerid] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			SetPVarInt(playerid, "InMschein", 0);
			SetPVarInt(playerid, "Helm", 0);
			sStats[playerid][sHelm] = 0;
			return 1;
		}
		else
		{
		ClearChat(playerid);
		if(Fehlerpunkte[playerid] > 0)
		{
			format(string, sizeof(string), "Fehlerpunkte: %d.", Fehlerpunkte[playerid]);
			SendClientMessage(playerid,COLOR_LIGHTRED,string);
		}
		SendClientMessage(playerid,COLOR_LIGHTRED,"Herzlichen Glückwunsch, du hast den Theoretischen Teil erfolgreich bestanden.");
		SendClientMessage(playerid,Weiß,"Deine Prüfung beginnt sofern du in den ersten Checkpoint fährst!");
   		SetPlayerInterior(playerid,0);
		SetTimerEx("INMSCHEIN", 2137, false, "d", playerid);
		sStats[playerid][sHelm] = 1;
		SetPlayerHelm(playerid);
		SetPVarInt(playerid, "Helm", 1);
		SetPVarInt(playerid, "InMschein", 1);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
		TogglePlayerControllable(playerid, true);
		Fehlerpunkte[playerid] = 0;
		SetPVarInt(playerid, "SWarnungen",0);
		new rand = random(sizeof(MotorradSpawns));
  		MotorAuto[playerid] = CreateServerVehicle(0,461,MotorradSpawns[rand][0],MotorradSpawns[rand][1],MotorradSpawns[rand][2],MotorradSpawns[rand][3],7,7,94);
  		SetVehicleLock(MotorAuto[playerid],1);
   		PutPlayerInVehicle(playerid, MotorAuto[playerid], 0);
		new lightss,alarm,doors,bonnet,boot,objective;
		SetVehicleParamsEx(MotorAuto[playerid],VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
		VehicleStarted[MotorAuto[playerid]] = 1;
   		}
	}
}
	if(dialogid == WSCHEIN1) {
        if(response) {

            ClearChat(playerid);
            TogglePlayerControllable(playerid, false);
			SetPlayerPosEx(playerid,1498.7407,1306.4352,1093.2891);
			SetPlayerFacingAngle(playerid,266.4341);
			SetPlayerCameraPos(playerid,1502.3408,1306.4664,1093.2891);
			SetPlayerCameraLookAt(playerid,1501.7275,1306.4470,1093.2891,1);
			ApplyAnimation(playerid, "PED","SEAT_down", 4.0, 0, 1, 1, 1, 0, 0);
			SetPlayerVirtualWorld(playerid, 1+playerid);
            GivePlayerEuro(playerid, -10000);
            Fehlerpunkte[playerid] = 0;
            ShowPlayerDialog(playerid,WSCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Waffenscheins,\nes werden dir Erklärungen geliefert und anschließend Fragen zu diesen Erklärungen gestellt,\nsolltest du mehr wie {FFFF00}1 Fehlerpunkt{FFFFFF} haben fällst du durch.{7FFF00}Viel Glück!","Weiter","");
        }
        else {
        }
    }
    if(dialogid == WSCHEIN2) {
        if(response) {

		ShowPlayerDialog(playerid,WSCHEIN3,DIALOG_STYLE_MSGBOX,"Umgang mit Waffen","{FFFFFF}Waffen sind stehts {FFFF00}verdeckt{FFFFFF} zu halten.\nWaffen dürfen nur im äußersten Notfall {FFFF00}(zur Verteigung){FFFFFF} genutzt werden\noder auf den dafür vorgesehenen {FFFF00}Übungsplätzen{FFFFFF}.\nDie Polizei ist in der Lage deine Waffen jederzeit zu {FFFF00}konfiszieren{FFFFFF}.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,WSCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Waffenscheins,\nes werden dir Erklärungen geliefert und anschließend Fragen zu diesen Erklärungen gestellt,\nsolltest du mehr wie {FFFF00}1 Fehlerpunkt{FFFFFF} haben fällst du durch.{7FFF00}Viel Glück!","Weiter","");
        }
    }
    if(dialogid == WSCHEIN3) {
        if(response) {

		ShowPlayerDialog(playerid,WSCHEIN4,DIALOG_STYLE_MSGBOX,"Kauf von Waffen","{FFFFFF}Der Kauf von Waffen ist nur mit legalem Waffenschein im {FFFF00}Ammunation{FFFFFF} sowie diversen {FFFF00}Waffenautomaten{FFFFFF} erlaubt\nKauf von Waffen auf {FFFF00}Schwarzmärken{FFFFFF} ist strikt verboten und wird durch die Polizei bestraft.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,WSCHEIN3,DIALOG_STYLE_MSGBOX,"Umgang mit Waffen","{FFFFFF}Waffen sind stehts {FFFF00}verdeckt{FFFFFF} zu halten.\nWaffen dürfen nur im äußersten Notfall {FFFF00}(zur Verteigung){FFFFFF} genutzt werden\noder auf den dafür vorgesehenen {FFFF00}Übungsplätzen{FFFFFF}.\nDie Polizei ist in der Lage deine Waffen jederzeit zu {FFFF00}konfiszieren{FFFFFF}.","Weiter","");
        }
    }
    if(dialogid == WSCHEIN4) {
        if(response) {

		ShowPlayerDialog(playerid,WSCHEIN5,DIALOG_STYLE_MSGBOX,"Deathmatch","{FFFF00}Deathmatch{FFFFFF} ist nicht erlaubt!\nDu kannst dich mit anderen Gangs anlegen,doch pass auf die Polizei auf!\n{FFFF00}Deatmatch = Dauerhaftes töten{FFFFFF} ohne Grund.\n{FFFF00}Dauerhaften Deathmatch{FFFFFF} wird von einem Administrator durch einen Bann bestraft!","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,WSCHEIN4,DIALOG_STYLE_MSGBOX,"Kauf von Waffen","{FFFFFF}Der Kauf von Waffen ist nur mit legalem Waffenschein im {FFFF00}Ammunation{FFFFFF} sowie diversen {FFFF00}Waffenautomaten{FFFFFF} erlaubt\nKauf von Waffen auf {FFFF00}Schwarzmärken{FFFFFF} ist strikt verboten und wird durch die Polizei bestraft.","Weiter","");
        }
    }
    if(dialogid == WSCHEIN5) {
        if(response) {

		ShowPlayerDialog(playerid,WSCHEIN6,DIALOG_STYLE_MSGBOX,"Driveby","{FFFF00}Driveby{FFFFFF} ist nur als Beifahrer erlaubt!\n{FFFF00}Fahrer Driveby{FFFFFF} wird von einem Administrator geahndet!.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,WSCHEIN5,DIALOG_STYLE_MSGBOX,"Deathmatch","{FFFF00}Deathmatch{FFFFFF} ist nicht erlaubt!\nDu kannst dich mit anderen Gangs anlegen,doch pass auf die Polizei auf!\n{FFFF00}Deatmatch = Dauerhaftes töten{FFFFFF} ohne Grund.\n{FFFF00}Dauerhaften Deathmatch{FFFFFF} wird von einem Administrator durch einen Bann bestraft!","Weiter","");
        }
    }
    if(dialogid == WSCHEIN6) {
        if(response) {

		ShowPlayerDialog(playerid,WSCHEIN7,DIALOG_STYLE_MSGBOX,"Umgang mit den Waffen Frage","{FFFFFF}Darf man {FFFF00}freizügig{FFFFFF} mit den Waffen im Park rumlaufen?","Ja","Nein");
        }
        else {
        ShowPlayerDialog(playerid,WSCHEIN6,DIALOG_STYLE_MSGBOX,"Driveby","{FFFF00}Driveby{FFFFFF} ist nur als Beifahrer erlaubt!\n{FFFF00}Fahrer Driveby{FFFFFF} wird von einem Administrator geahndet!.","Weiter","");
        }
    }
    if(dialogid == WSCHEIN7) {
        if(response) {
            Fehlerpunkte[playerid] += 1;
			ShowPlayerDialog(playerid,WSCHEIN8,DIALOG_STYLE_MSGBOX,"Kauf von Waffen Frage","{FFFFFF}Ist es erlaubt von einem {FFFF00}Waffenhändler{FFFFFF} eine Waffe zu kaufen?","Nein","Ja");
        }
        	else {
		 	ShowPlayerDialog(playerid,WSCHEIN8,DIALOG_STYLE_MSGBOX,"Kauf von Waffen Frage","{FFFFFF}Ist es erlaubt von einem {FFFF00}Waffenhändler{FFFFFF} eine Waffe zu kaufen?","Nein","Ja");
    }
    }
    if(dialogid == WSCHEIN8) {
        if(response) {
			ShowPlayerDialog(playerid,WSCHEIN9,DIALOG_STYLE_LIST,"Was ist erlaubt? (Nur 1 Antwort ist richtig!)","Driveby als Fahrer und Beifahrer.\nDriveby als Beifahrer.\nDriveby als Fahrer.\nGarkeins von den oben genannten.","Auswählen","");
        }
        	else {
        	Fehlerpunkte[playerid] += 1;
		 	ShowPlayerDialog(playerid,WSCHEIN9,DIALOG_STYLE_LIST,"Was ist erlaubt? (Nur 1 Antwort ist richtig!)","Driveby als Fahrer und Beifahrer.\nDriveby als Beifahrer.\nDriveby als Fahrer.\nGarkeins von den oben genannten.","Auswählen","");
    }
    }
    if(dialogid == WSCHEIN9)
    {
        if(response)
        {
            if(listitem == 0)
            {
                ShowPlayerDialog(playerid,WSCHEIN13,DIALOG_STYLE_MSGBOX,"Deathmatch Frage","{FFFFFF}Darf man als Gang {FFFF00}Gangwars{FFFFFF} machen?","Ja","Nein");
                Fehlerpunkte[playerid] += 1;
            }
            if(listitem == 1)
            {
                ShowPlayerDialog(playerid,WSCHEIN13,DIALOG_STYLE_MSGBOX,"Deathmatch Frage","{FFFFFF}Darf man als Gang {FFFF00}Gangwars{FFFFFF} machen?","Ja","Nein");
            }
            if(listitem == 2)
            {
                ShowPlayerDialog(playerid,WSCHEIN13,DIALOG_STYLE_MSGBOX,"Deathmatch Frage","{FFFFFF}Darf man als Gang {FFFF00}Gangwars{FFFFFF} machen?","Ja","Nein");
                Fehlerpunkte[playerid] += 1;
            }
            if(listitem == 3)
            {
                ShowPlayerDialog(playerid,WSCHEIN13,DIALOG_STYLE_MSGBOX,"Deathmatch Frage","{FFFFFF}Darf man als Gang {FFFF00}Gangwars{FFFFFF} machen?","Ja","Nein");
                Fehlerpunkte[playerid] += 1;
            }
        }
    }
    if(dialogid == WSCHEIN13) {
        if(response) {
			ShowPlayerDialog(playerid,WSCHEIN10,DIALOG_STYLE_MSGBOX,"Schwarzmarkt Frage","{FFFFFF}Sind Waffen vom Schwarzmarkt {FFFF00}legal{FFFFFF}?","Ja","Nein");
        }
        	else {
        	Fehlerpunkte[playerid] += 1;
		 	ShowPlayerDialog(playerid,WSCHEIN10,DIALOG_STYLE_MSGBOX,"Schwarzmarkt Frage","{FFFFFF}Sind Waffen vom Schwarzmarkt {FFFF00}legal{FFFFFF}?","Ja","Nein");
    }
    }
    if(dialogid == WSCHEIN10) {
        if(response) {
            Fehlerpunkte[playerid] += 1;
			ShowPlayerDialog(playerid,WSCHEIN11,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
        }
        	else {
			ShowPlayerDialog(playerid,WSCHEIN11,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
    }
    }
    if(dialogid == WSCHEIN11)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,WSCHEIN11,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
	 	}
        if(response)
	{
   	if(Fehlerpunkte[playerid] > 1)
	{
  		format(string, sizeof(string), "Du hast den Theoretischen Teil des Waffenscheines leider nicht bestanden, da du %d Fehlerpunkt/e hast.", Fehlerpunkte[playerid]);
  		SendClientMessage(playerid,COLOR_LIGHTRED,string);
	    SendClientMessage(playerid,Weiß,"Die Hälfte des Geldes wurde dir zurückgegeben.");
	    GivePlayerEuro(playerid,5000);
	    ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
  		Fehlerpunkte[playerid] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		SetPVarInt(playerid, "InWschein", 0);
		return 1;
 	}
		SendClientMessage(playerid,COLOR_LIGHTRED,"Herzlichen Glückwunsch, du hast den Theoretischen Teil erfolgreich bestanden.");
	    SendClientMessage(playerid,Weiß,"Bitte versuche jetzt die Atrappen abzuschießen, achte dabei auf dein Schuss dieser ist begrenzt!.");
	    SendClientMessage(playerid,Gelb2,"Info: Ziele am besten auf den Hals (Kopf).");
    	if(Fehlerpunkte[playerid] > 0)
		{
	   		format(string, sizeof(string), "Fehlerpunkte: %d.", Fehlerpunkte[playerid]);
	  		SendClientMessage(playerid,COLOR_LIGHTRED,string);
		}
	    ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
     	TogglePlayerControllable(playerid, true);
		SetPlayerInterior(playerid, 7);
		Fehlerpunkte[playerid] = 0;
		SetPVarInt(playerid, "InWschein", 1);
  		new rand = random(sizeof(WaffenSpawns));
	    SetPlayerPosEx(playerid,WaffenSpawns[rand][0],WaffenSpawns[rand][1],WaffenSpawns[rand][2]);
	    SetPlayerFacingAngle(playerid,WaffenSpawns[rand][3]);
	    GivePlayerWeaponEx(playerid,24,10);
	    ShowPlayerDialog(playerid, WSCHEIN12, DIALOG_STYLE_MSGBOX,
	 	"Praxisteil der Waffenscheinprüfung", "{FFFFFF}Hier werden deine Schuss Fähigkeiten unter Beweis gestellt.\nIn den nächsten Minuten werden vor dir {FFFF00}Atrappen{FFFFFF} aufgestellt,\ndiese musst du abschiessen es werden dir {FFFF00}10 Schuss{FFFFFF} zur Verfügung gestellt\nsolltest du es es schaffen alle {FFFF00}5 Atrappen{FFFFFF} mit den 10 Schuss zu treffen.\nHast du die Prüfung bestanden.\nalso {FFFF00}Viel Glück{FFFFFF}!", "Weiter","");
	}
	}
   	if(dialogid == WSCHEIN12)
	{
	    if(response)
	    {
	        GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Die ~r~Atrappen ~w~werden ~r~vorbereitet!", 3000, 5);
	        Target = CreatePlayer3DTextLabel(playerid,"--> Ziel <--",0x0C9BCBFF,288.8384,-129.0957,1004.0625+1,15.0);
	        WaffenscheinStep[playerid] = 1;
	        WaffenscheinSchuss[playerid] = 10;
	       	TogglePlayerControllable(playerid, false);
	    	SetTimerEx("UnfreezePlayer",3001,false,"i",playerid);
	    }
	    else
	    {
     		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Die ~r~Atrappen ~w~werden ~r~vorbereitet!", 3000, 5);
	        Target = CreatePlayer3DTextLabel(playerid,"--> Ziel <--",0x0C9BCBFF,288.8384,-129.0957,1004.0625+1,15.0);
	        WaffenscheinStep[playerid] = 1;
	        WaffenscheinSchuss[playerid] = 10;
	       	TogglePlayerControllable(playerid, false);
	    	SetTimerEx("UnfreezePlayer",3001,false,"i",playerid);
	    }
	}
			if(dialogid == TSCHEIN1) {
        if(response) {

            ClearChat(playerid);
            TogglePlayerControllable(playerid, false);
			SetPlayerPosEx(playerid,1498.7407,1306.4352,1093.2891);
			SetPlayerFacingAngle(playerid,266.4341);
			SetPlayerCameraPos(playerid,1502.3408,1306.4664,1093.2891);
			SetPlayerCameraLookAt(playerid,1501.7275,1306.4470,1093.2891,1);
			ApplyAnimation(playerid, "PED","SEAT_down", 4.0, 0, 1, 1, 1, 0, 0);
			SetPlayerVirtualWorld(playerid, 1+playerid);
            GivePlayerEuro(playerid, -9000);
            Fehlerpunkte[playerid] = 0;
            ShowPlayerDialog(playerid,TSCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Truckerscheines,\nes werden dir Erklärungen geliefert und anschließend Fragen zu diesen Erklärungen gestellt,\nsolltest du mehr wie {FFFF00}2 Fehlerpunkte{FFFFFF} haben fällst du durch.{7FFF00}Viel Glück!","Weiter","");
        }
        else {
        }
    }
    if(dialogid == TSCHEIN2) {
        if(response) {

		ShowPlayerDialog(playerid,TSCHEIN3,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Erklärung","{FFFFFF}In der Innenstadt herrscht eine Richtgeschwindigkeit von {FFFF00}80KM/H{FFFFFF},\nausserhalb der Stadt {FFFF00}150KM/H {FFFFFF}.Bei uns herrscht Rechts vor Links,\nd.H Rechtfahrgebot,Ampeln werden nicht beachtet.\n{FFFF00}Einsatzwagen{FFFFFF} mit Blaulicht haben Vorfahrt.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,TSCHEIN3,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Führerscheines,\nes werden dir Erklärungen geliefert und anschließend Fragen zu diesen Erklärungen gestellt,\nsolltest du mehr wie {FFFF00}2 Fehlerpunkte{FFFFFF} haben fällst du durch.{7FFF00}Viel Glück!","Weiter","");
        }
    }
    if(dialogid == TSCHEIN3) {
        if(response) {

		ShowPlayerDialog(playerid,TSCHEIN4,DIALOG_STYLE_MSGBOX,"Lieferung von Produkten","{FFFFFF}Der geholte Anhänger muss bei {FFFF00}fertiger Nutzung{FFFFFF}\nzurück zur Ölraffinerie gebracht werden und {FFFF00}Ordnungsgemäß{FFFFFF} aufgestellt werden!","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,TSCHEIN4,DIALOG_STYLE_MSGBOX,"Lieferung von Produkten","{FFFFFF}Der geholte Anhänger muss bei {FFFF00}fertiger Nutzung{FFFFFF}\nzurück zur Ölraffinerie gebracht werden und {FFFF00}Ordnungsgemäß{FFFFFF} aufgestellt werden!","Weiter","");
        }
    }
    if(dialogid == TSCHEIN4) {
        if(response) {

		ShowPlayerDialog(playerid,TSCHEIN5,DIALOG_STYLE_MSGBOX,"Lieferung von Produkten 2","{FFFFFF}Die Lieferung der Produkte erfolgt {FFFF00}Benutzerorientiert{FFFFFF}, es gibt keine Versicherung für verlorene Produkte,\nd.H achtgeben und auf die erworbenen Produkte aufpassen!","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,TSCHEIN5,DIALOG_STYLE_MSGBOX,"Lieferung von Produkten 2","{FFFFFF}Die Lieferung der Produkte erfolgt {FFFF00}Benutzerorientiert{FFFFFF}, es gibt keine Versicherung für verlorene Produkte,\nd.H achtgeben und auf die erworbenen Produkte aufpassen!","Weiter","");
        }
    }
    if(dialogid == TSCHEIN5) {
        if(response) {

		ShowPlayerDialog(playerid,TSCHEIN6,DIALOG_STYLE_MSGBOX,"Pausen","{FFFFFF}Jeder Trucker ist dazu verpflichtet {FFFF00}Regelmäßige Pausen{FFFFFF} einzulagen,\ndafür wurde der {FFFF00}Öllrafieren Pausenraum{FFFFFF} optimal eingerichtet und darf von sämtlichen Truckern genutzt werden!","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,TSCHEIN6,DIALOG_STYLE_MSGBOX,"Pausen","{FFFFFF}Jeder Trucker ist dazu verpflichtet {FFFF00}Regelmäßige Pausen{FFFFFF} einzulagen,\ndafür wurde der {FFFF00}Öllrafieren Pausenraum{FFFFFF} optimal eingerichtet und darf von sämtlichen Truckern genutzt werden!","Weiter","");
        }
    }
    if(dialogid == TSCHEIN6) {
        if(response) {

		ShowPlayerDialog(playerid,TSCHEIN7,DIALOG_STYLE_MSGBOX,"Versicherung","{FFFFFF}Gekaufte/gelagerte Produkte sind {FF0005}nicht {FFFFFF}versichert!","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,TSCHEIN7,DIALOG_STYLE_MSGBOX,"Versicherung","{FFFFFF}Gekaufte/gelagerte Produkte sind {FF0005}nicht {FFFFFF}versichert!","Weiter","");
        }
    }
    if(dialogid == TSCHEIN7) {
        if(response) {
		ShowPlayerDialog(playerid,TSCHEIN8,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Frage","{FFFFFF}Darf man schneller als {FFFF00}80KM/H{FFFFFF} in der Stadt fahren?","Ja","Nein");
        }
        else {
        ShowPlayerDialog(playerid,TSCHEIN8,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Frage","{FFFFFF}Darf man schneller als {FFFF00}80KM/H{FFFFFF} in der Stadt fahren?","Ja","Nein");
        }
    }
    if(dialogid == TSCHEIN8) {
        if(response) {
		ShowPlayerDialog(playerid,TSCHEIN9,DIALOG_STYLE_MSGBOX,"Pausenfrage","{FFFFFF}Ist es erlaubt den ganzen {FFFF00}Tag ohne Pause{FFFFFF}, Produkte zu liefern?","Nein","Ja");
		Fehlerpunkte[playerid] += 1;
        }
        else {
        ShowPlayerDialog(playerid,TSCHEIN9,DIALOG_STYLE_MSGBOX,"Pausenfrage","{FFFFFF}Ist es erlaubt den ganzen {FFFF00}Tag ohne Pause{FFFFFF}, Produkte zu liefern?","Nein","Ja");
        }
    }
    if(dialogid == TSCHEIN9) {
        if(response) {
		ShowPlayerDialog(playerid,TSCHEIN10,DIALOG_STYLE_MSGBOX,"Versicherungsfrage","{FFFFFF}Sind die Produkte {FFFF00}versichert{FFFFFF}, sofern man diese verlieren sollte?","Ja","Nein");
        }
        else {
        ShowPlayerDialog(playerid,TSCHEIN10,DIALOG_STYLE_MSGBOX,"Versicherungsfrage","{FFFFFF}Sind die Produkte {FFFF00}versichert{FFFFFF}, sofern man diese verlieren sollte?","Ja","Nein");
        Fehlerpunkte[playerid] += 1;
        }
    }
    if(dialogid == TSCHEIN10) {
        if(response) {
            Fehlerpunkte[playerid] += 1;
			ShowPlayerDialog(playerid,TSCHEIN11,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
        }
        	else {
			ShowPlayerDialog(playerid,TSCHEIN11,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
    	}
    }
	if(dialogid == TSCHEIN11)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,TSCHEIN11,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,nnur hast du diese auch bestanden?nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
		}
		if(response)
		{
			if(Fehlerpunkte[playerid] > 2)
			{
			    ClearChat(playerid);
				format(string, sizeof(string), "Du hast den Theoretischen Teil des Truckerscheines leider nicht bestanden, da du %d Fehlerpunkt/e hast.", Fehlerpunkte[playerid]);
				SendClientMessage(playerid,COLOR_LIGHTRED,string);
				SendClientMessage(playerid,Weiß,"Die Hälfte des Geldes wurde dir zurückgegeben.");
				GivePlayerEuro(playerid,3500);
				ClearAnimations(playerid);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, true);
				SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
				SetPlayerFacingAngle(playerid,89.5907);
				SetPlayerInterior(playerid, 3);
				Fehlerpunkte[playerid] = 0;
				SetPlayerVirtualWorld(playerid, 0);
				SetPVarInt(playerid, "InWschein", 0);
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
			else
			{
			    ClearChat(playerid);
				if(Fehlerpunkte[playerid] > 0)
				{
					format(string, sizeof(string), "Fehlerpunkte: %d.", Fehlerpunkte[playerid]);
					SendClientMessage(playerid,COLOR_LIGHTRED,string);
				}
				SendClientMessage(playerid,COLOR_LIGHTRED,"Herzlichen Glückwunsch, du hast den Theoretischen Teil erfolgreich bestanden.");
				SendClientMessage(playerid,Weiß,"Nun ist es deine Aufgabe dein Praktisches Können als Trucker unter Beweis zu stellen!.");
				SendClientMessage(playerid,Gelb2,"Info: Deine erste Aufgabe ist es einen Anghänger zu besorgen um diesen an deinem Truck zu befestigen!");
				SendClientMessage(playerid,Gelb2,"Ohne diesen Anhänger kannst du die Prüfung nicht bestehen. (Der Anhänger befindet sich auf der Ölraffinerie!");
				SendClientMessage(playerid,Gelb2,"Tipp2: Fahre die roten Checkpoints ab!");
				ClearAnimations(playerid);
				SetCameraBehindPlayer(playerid);
				SetPlayerVirtualWorld(playerid, 0);
				TogglePlayerControllable(playerid, true);
				SetPlayerInterior(playerid, 0);
				Fehlerpunkte[playerid] = 0;
				SetPVarInt(playerid, "InTschein", 1);
				Truck[playerid] = CreateServerVehicle(0,515,-2536.4392,2461.4971,19.0086,51.2265,-1,-1,95); //Truck
				SetVehicleLock(Truck[playerid],1);
				PutPlayerInVehicle(playerid, Truck[playerid], 0);
				DisablePlayerCheckpoint(playerid);
				SetTimerEx("ShowCheckpoint",3121,false,"i",playerid);
			}
		}
		return 1;
	}
 	if(dialogid == FSCHEIN1) {
        if(response) {

            ClearChat(playerid);
            TogglePlayerControllable(playerid, false);
			SetPlayerPosEx(playerid,1498.7407,1306.4352,1093.2891);
			SetPlayerFacingAngle(playerid,266.4341);
			SetPlayerCameraPos(playerid,1502.3408,1306.4664,1093.2891);
			SetPlayerCameraLookAt(playerid,1501.7275,1306.4470,1093.2891,1);
			ApplyAnimation(playerid, "PED","SEAT_down", 4.0, 0, 1, 1, 1, 0, 0);
			SetPlayerVirtualWorld(playerid, 1+playerid);
            GivePlayerEuro(playerid, -1200);
            Fehlerpunkte[playerid] = 0;
            ShowPlayerDialog(playerid,FSCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Führerscheines,\nes werden dir Erklärungen geliefert und anschließend Fragen zu diesen Erklärungen gestellt,\nsolltest du mehr wie {FFFF00}2 Fehlerpunkte{FFFFFF} haben fällst du durch.{7FFF00}Viel Glück!","Weiter","");
        }
        else {
        }
    }
    if(dialogid == FSCHEIN2) {
        if(response) {

		ShowPlayerDialog(playerid,FSCHEIN3,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Erklärung","{FFFFFF}In der Innenstadt herrscht eine Richtgeschwindigkeit von {FFFF00}80KM/H{FFFFFF},\nausserhalb der Stadt {FFFF00}150KM/H {FFFFFF}.Bei uns herrscht Rechts vor Links,\nd.H Rechtfahrgebot,Ampeln werden nicht beachtet.\n{FFFF00}Einsatzwagen{FFFFFF} mit Blaulicht haben Vorfahrt.","Weiter","");
        }
        else {
        ShowPlayerDialog(playerid,FSCHEIN2,DIALOG_STYLE_MSGBOX,"Fahrschule Einleitung","{FFFFFF}Willkommen in der {FFFF00}Fahrschule{FFFFFF}, dies ist der Theoretische Teil des Führerscheines,\nes werden dir Erklärungen geliefert und anschließend Fragen zu diesen Erklärungen gestellt,\nsolltest du mehr wie {FFFF00}2 Fehlerpunkte{FFFFFF} haben fällst du durch.{7FFF00}Viel Glück!","Weiter","");
        }
    }
    if(dialogid == FSCHEIN3) {
        if(response) {

		ShowPlayerDialog(playerid,FSCHEIN4,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Frage","{FFFFFF}Darf man schneller als {FFFF00}80KM/H{FFFFFF} in der Stadt fahren?","Ja","Nein");
        }
        else {
        ShowPlayerDialog(playerid,FSCHEIN3,DIALOG_STYLE_MSGBOX,"StVo/Geschwindigkeit Erklärung","{FFFFFF}In der Innenstadt herrscht eine Richtgeschwindigkeit von {FFFF00}80KM/H{FFFFFF},\nausserhalb der Stadt {FFFF00}150KM/H {FFFFFF}.Bei uns herrscht Rechts vor Links,\nd.H Rechtfahrgebot,Ampeln werden nicht beachtet.\n{FFFF00}Einsatzwagen{FFFFFF} mit Blaulicht haben Vorfahrt.","Weiter","");
        }
    }
    if(dialogid == FSCHEIN4) {
        if(response) {

            Fehlerpunkte[playerid] += 1;
			ShowPlayerDialog(playerid,FSCHEIN5,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Erklärung","{FFFFFF}Parken darf man nur an den dafür vorgesehen {FFFF00}Parkplätzen{FFFFFF},\nan seinem {FFFF00}Haus{FFFFFF} oder {FFFF00}am Bürgersteig,{FFFFFF}\ntelefonieren während dem fahren ist {FFFF00}strengstens{FFFFFF} verboten.\nEinfahrten von Häusern müssen stets {FFFF00}freigehalten{FFFFFF} werden.","Weiter","");
        }
        	else {
		 	ShowPlayerDialog(playerid,FSCHEIN5,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Erklärung","{FFFFFF}Parken darf man nur an den dafür vorgesehen {FFFF00}Parkplätzen{FFFFFF},\nan seinem {FFFF00}eigenen Haus{FFFFFF} oder am Boardstein\ntelefonieren während dem Fahren ist {FFFF00}strengstens{FFFFFF} verboten\nEinfahrten von Häusern müssen stets {FFFF00}freigehalten{FFFFFF} werden.","Weiter","");
    }
    }
    if(dialogid == FSCHEIN5) {
        if(response) {

		ShowPlayerDialog(playerid,FSCHEIN6,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Frage","{FFFFFF}Darf man während dem Autofahren {FFFF00}telefonieren{FFFFFF}?","Nein","Ja");
        }
        else {
        ShowPlayerDialog(playerid,FSCHEIN5,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Erklärung","{FFFFFF}Parken darf man nur an den dafür vorgesehen {FFFF00}Parkplätzen{FFFFFF},\nan seinem {FFFF00}eigenen Haus{FFFFFF} oder am Boardstein\ntelefonieren während dem Fahren ist {FFFF00}strengstens{FFFFFF} verboten\nEinfahrten von Häusern müssen stets {FFFF00}freigehalten{FFFFFF} werden.","Weiter","");
        }
    }
    if(dialogid == FSCHEIN6) {
        if(response) {

			ShowPlayerDialog(playerid,FSCHEIN8,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Frage","{FFFFFF}Darf man vor einer {FFFF00}Haustür[Einfahrt]{FFFFFF} parken wenn es nicht sein eigenes ist?","Ja","Nein");
        }
        	else {
        	Fehlerpunkte[playerid] += 1;
		 	ShowPlayerDialog(playerid,FSCHEIN8,DIALOG_STYLE_MSGBOX,"Parken und telefonieren Frage","{FFFFFF}Darf man vor einer {FFFF00}Haustür[Einfahrt]{FFFFFF} parken wenn es nicht sein eigenes ist?","Ja","Nein");
    }
    }
    if(dialogid == FSCHEIN8) {
        if(response) {
            Fehlerpunkte[playerid] += 1;
			ShowPlayerDialog(playerid,FSCHEIN7,DIALOG_STYLE_MSGBOX,"Vorfahrt Frage","{FFFFFF}Haben Einsatzwagen (Polizei) mit aktiven {FFFF00}Blaulicht{FFFFFF} Vorfahrt?","Ja","Nein");
        }
        	else {
		 	ShowPlayerDialog(playerid,FSCHEIN7,DIALOG_STYLE_MSGBOX,"Vorfahrt Frage","{FFFFFF}Haben Einsatzwagen (Polizei) mit aktiven {FFFF00}Blaulicht{FFFFFF} Vorfahrt?","Ja","Nein");
    }
    }
        if(dialogid == FSCHEIN7) {
        if(response) {
			ShowPlayerDialog(playerid,FSCHEIN9,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
        }
        	else {
        	Fehlerpunkte[playerid] += 1;
			ShowPlayerDialog(playerid,FSCHEIN9,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
    }
    }
    if(dialogid == FSCHEIN9)
	{
	    if(response == 0)
	    {
	        ShowPlayerDialog(playerid,FSCHEIN9,DIALOG_STYLE_MSGBOX,"Theorie Ende","{FFFFFF}Herzlichen Glückwunsch, du hast die {FFFF00}Theorie{FFFFFF} hinter dir,\nnur hast du diese auch bestanden?\nim nächsten Schritt wird dir dein {FFFF00}Ergebnis{FFFFFF} mitgeteilt.\nSolltest du bestanden haben folgt die {FFFF00}Praxis{FFFFFF}.\n{7FFF00}Viel Glück{FFFFFF} weiterhin.","Weiter","");
	    }
        if(response)
	{
   	if(Fehlerpunkte[playerid] > 2)
	{
  		format(string, sizeof(string), "Du hast den Theoretischen Teil des Führerscheines leider nicht bestanden, da du %d Fehlerpunkt/e hast.", Fehlerpunkte[playerid]);
  		SendClientMessage(playerid,COLOR_LIGHTRED,string);
	    SendClientMessage(playerid,Weiß,"Die Hälfte des Geldes wurde dir zurückgegeben.");
	    GivePlayerEuro(playerid,600);
	    ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
  		Fehlerpunkte[playerid] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		SetPVarInt(playerid, "InFschein", 0);
		return 1;
 	}
		SendClientMessage(playerid,COLOR_LIGHTRED,"Herzlichen Glückwunsch, du hast den Theoretischen Teil erfolgreich bestanden.");
	    SendClientMessage(playerid,COLOR_WHITE,"Bitte steige nun in eines der Fahrschul Autos und folge den weiteren Instruktionen.");
    	if(Fehlerpunkte[playerid] > 0)
		{
	   		format(string, sizeof(string), "Fehlerpunkte: %d.", Fehlerpunkte[playerid]);
	  		SendClientMessage(playerid,COLOR_LIGHTRED,string);
		}
	    ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 0);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,-2029.8536,-122.1630,35.1885);
		SetPlayerFacingAngle(playerid,179.1148);
		SetPlayerInterior(playerid, 0);
		Fehlerpunkte[playerid] = 0;
		SetPVarInt(playerid, "InFschein", 1);
	}
	}
		if (dialogid == SCHEINE) {
        if(response) {

            switch (listitem) {
                case 0:
                {
                if(sStats[playerid][sLevel] < 1)
         	   		return SendClientMessage(playerid, Rot, "Du benötigst mind. Level 1 um den Führerschein machen zu können!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
          		if(sStats[playerid][sPersonalausweis] < 1)
          			return SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um einen Führerschein beantragen zu können!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
                if(sStats[playerid][sAutoschein] == 1)
         	   		return SendClientMessage(playerid, Rot, "Du hast schon einen Führerschein!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
              	if(GetPVarInt(playerid, "InFschein") == 1)
              	    return SendClientMessage(playerid, Rot, "Du bist schon in der Führerscheinprüfung!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
              	if(sStats[playerid][sbap] > 3)
              	    return SendClientMessage(playerid, Rot, "Du hast zuviele Punkte in Bayside!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
               	if(geld < 1200)
         	   		return SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1200)!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");

                    ClearChat(playerid);
         	   		ShowPlayerDialog(playerid, FSCHEIN1, DIALOG_STYLE_MSGBOX, "Führerschein Frage","{FFFFFF}Möchtest du deinen {FFFF00}Führerschein{FFFFFF} jetzt anfangen? {FFFF00}[Kosten: 1200]", "Ja", "Nein");
                }

                case 1:
                {
                if(sStats[playerid][sLevel] < 4)
         	   		return SendClientMessage(playerid, Rot, "Du benötigst mind. Level 4 um den Bootsschein machen zu können!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(sStats[playerid][sLink] == 0)
					return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				}
    			case 2:
                {
                if(sStats[playerid][sLevel] < 5)
         	   		return SendClientMessage(playerid, Rot, "Du benötigst mind. Level 5 um den Flugschein machen zu können!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
               if(sStats[playerid][sReisePass] < 1)
         	   		return SendClientMessage(playerid, Rot, "Du benötigst einen Reisepass um den Flugschein machen zu können!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(sStats[playerid][sLink] == 0)
					return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				}
    			case 3:
                {
     			if(sStats[playerid][sPersonalausweis] < 1)
          			return SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um eine Anglerlizens beantragen zu können!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
                if(sStats[playerid][sAnglerschein] == 1)
         	   		return SendClientMessage(playerid, Rot, "Du hast schon eine Anglerlizens!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
                if(sStats[playerid][sLevel] < 2)
         	   		return SendClientMessage(playerid, Rot, "Du benötigst mind. Level 2 um eine Anglerlizenz machen zu können!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(geld < 3500)
				    return SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (3500)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
  				if(sStats[playerid][sLink] == 0)
					return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
   			if(GetPVarInt(playerid, "InFschein") == 1)
              	    return SendClientMessage(playerid, Rot, "Du bist schon in der Angelprüfung!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");

				    ClearChat(playerid);
				    ShowPlayerDialog(playerid, ASCHEIN1, DIALOG_STYLE_MSGBOX, "Anglerlizenz Frage","{FFFFFF}Möchtest du deine {FFFF00}Anglerlizenz{FFFFFF} jetzt anfangen? {FFFF00}[Kosten: 3500]", "Ja", "Nein");

				}
    			case 4:
                {
                if(sStats[playerid][sLevel] < 2)
         	   		return SendClientMessage(playerid, Rot, "Du benötigst mind. Level 2 um den Motorradschein machen zu können!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(sStats[playerid][sPersonalausweis] < 1)
          			return SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um einen Motorradschein machen zu können!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
                if(sStats[playerid][sMotorradschein] == 1)
         	   		return SendClientMessage(playerid, Rot, "Du hast schon einen Motorradschein!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(geld < 5000)
				    return SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (5000)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
       			if(GetPVarInt(playerid, "InMschein") == 1)
              	    return SendClientMessage(playerid, Rot, "Du bist schon in der Motorradscheinprüfung!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
         		if(sStats[playerid][sbap] > 4)
              	    return SendClientMessage(playerid, Rot, "Du hast zuviele Punkte in Bayside!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(sStats[playerid][sLink] == 0)
					return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");

					ClearChat(playerid);
         	   		ShowPlayerDialog(playerid, MSCHEIN1, DIALOG_STYLE_MSGBOX, "Motorradschein Frage","{FFFFFF}Möchtest du deinen {FFFF00}Motorradschein{FFFFFF} jetzt anfangen? {FFFF00}[Kosten: 5000]", "Ja", "Nein");
				}
 				case 5:
                {
  				if(sStats[playerid][sPersonalausweis] < 1)
          			return SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um einen Waffenschein machen zu können!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
                if(sStats[playerid][sWaffenschein] == 1)
         	   		return SendClientMessage(playerid, Rot, "Du hast schon einen Waffenschein!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(geld < 10000)
				    return SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (10.000)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
       			if(GetPVarInt(playerid, "InWschein") == 1)
              	    return SendClientMessage(playerid, Rot, "Du bist schon in der Waffenscheinprüfung!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
                if(sStats[playerid][sLevel] < 3)
         	   		return SendClientMessage(playerid, Rot, "Du benötigst mind. Level 3 um den Waffenschein machen zu können!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(sStats[playerid][sLink] == 0)
					return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");

					ClearChat(playerid);
         	   		ResetPlayerWeapons(playerid);
         	   		ShowPlayerDialog(playerid, WSCHEIN1, DIALOG_STYLE_MSGBOX, "Waffenschein Frage","{FFFFFF}Möchtest du deinen {FFFF00}Waffenschein{FFFFFF} jetzt anfangen? {FFFF00}[Kosten: 10.000]", "Ja", "Nein");
				}
				case 6:
                {
  				if(sStats[playerid][sPersonalausweis] < 1)
          			return SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um einen Truckerschein machen zu können!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
                if(sStats[playerid][sTruckschein] == 1)
         	   		return SendClientMessage(playerid, Rot, "Du hast schon einen Truckerschein!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(geld < 7000)
				    return SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (9.000)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
       			if(GetPVarInt(playerid, "InTschein") == 1)
              	    return SendClientMessage(playerid, Rot, "Du bist schon in der Truckscheinprüfung!");
					  ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
                if(sStats[playerid][sLevel] < 2)
         	   		return SendClientMessage(playerid, Rot, "Du benötigst mind. Level 2 um den Truckerschein machen zu können!");
						ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");
				if(sStats[playerid][sLink] == 0)
					return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
					ShowPlayerDialog(playerid,SCHEINE, DIALOG_STYLE_LIST, "Fahrschule", "{FFFFFF}Führerschein {FFFF00}(1.200)\n{FFFFFF}Bootschein {FFFF00}(6.500)\n{FFFFFF}Flugschein {FFFF00}(7.500)\n{FFFFFF}Anglerlizenz {FFFF00}(3.500]\n{FFFFFF}Mottoradschein {FFFF00}(5.000)\n{FFFFFF}Waffenschein {FFFF00}(10.000)\n{FFFFFF}Truckerschein {FFFF00}(9.000)", "Beantragen", "Abbrechen");

					ClearChat(playerid);
         	   		ResetPlayerWeapons(playerid);
         	   		ShowPlayerDialog(playerid, TSCHEIN1, DIALOG_STYLE_MSGBOX, "Truckerschein Frage","{FFFFFF}Möchtest du deinen {FFFF00}Truckerschein{FFFFFF} jetzt anfangen? {FFFF00}[Kosten: 9.000]", "Ja", "Nein");
				}
            }

        }
        return 1;
    }
    if(dialogid == PREMIUM2)
    {
        if(response)
        {
            ClearChat(playerid);
            SendClientMessage(playerid,Weiß,"Deine Klingelton Auswahl wurde erfolgreich gespeichert!");
			sStats[playerid][sPKlingeltonHat] = 1;
			sStats[playerid][sPKlingelton] = 1;
        }
        else
		{
		    ClearChat(playerid);
		    sStats[playerid][sPKlingelton] = 0;
		    sStats[playerid][sPKlingeltonHat] = 0;
		    SendClientMessage(playerid,Rot,"Bitte wähle einen neuen Klingelton!");
		    ShowPlayerDialog(playerid,PREMIUM1,DIALOG_STYLE_INPUT,"Premium Klingelton","{FFFFFF}Bitte gebe nun den {C0C0C0}Link{FFFFFF} zum Klingelton unten ein und drücke auf die Taste bestätigen!\n{FF0000}Beachte bitte die Klingelton Kriterien!","Bestätigen","Abbrechen");
		}
    }
    if(dialogid == PREMIUM1)
    {
        if(response)
        {
	   	    if(!strlen(inputtext))
		    {
		    	SendClientMessage(playerid,Rot,"Bitte gebe einen vollständigen Youtube Link ein!");
			    ShowPlayerDialog(playerid,PREMIUM1,DIALOG_STYLE_INPUT,"Premium Klingelton","{FFFFFF}Bitte gebe nun den {C0C0C0}Link{FFFFFF} zum Klingelton unten ein und drücke auf die Taste bestätigen!\n{FF0000}Beachte bitte die Klingelton Kriterien!","Bestätigen","Abbrechen");
			    return 1;
		    }
			if(strlen(inputtext) < 26)
			{
			    SendClientMessage(playerid,Rot,"Dieser Link ist ungültig!");
			    ShowPlayerDialog(playerid,PREMIUM1,DIALOG_STYLE_INPUT,"Premium Klingelton","{FFFFFF}Bitte gebe nun den {C0C0C0}Link{FFFFFF} zum Klingelton unten ein und drücke auf die Taste bestätigen!\n{FF0000}Beachte bitte die Klingelton Kriterien!","Bestätigen","Abbrechen");
			    return 1;
			}
			for(new i=0;i<sizeof(badtone);i++)
			{
				if(!strcmp(inputtext,badtone[i],true))
				{
	   				SendClientMessage(playerid,Rot,"Dieser Link ist nicht funktionsfähig!");
				    ShowPlayerDialog(playerid,PREMIUM1,DIALOG_STYLE_INPUT,"Premium Klingelton","{FFFFFF}Bitte gebe nun den {C0C0C0}Link{FFFFFF} zum Klingelton unten ein und drücke auf die Taste bestätigen!\n{FF0000}Beachte bitte die Klingelton Kriterien!","Bestätigen","Abbrechen");
					return 1;
				}
			}
	   	    if(strlen(inputtext))
		    {
				PlayAudioStreamForPlayer(playerid, inputtext);
				ClearChat(playerid);
				SetTimerEx("GetPRingTone",6053,false,"i",playerid);
				SendClientMessage(playerid,Weiß,"Bitte Warten, die Musik wird initialisiert!");
				TogglePlayerControllable(playerid, false);

	        }
        }
    }
	if(dialogid == DRIFT2)
	{
	    if(response == 0)
	    {//Wenn 1 angeklickt wird
			ClearChat(playerid);
	        GivePlayerEuro(playerid,-500);
	        SetPVarInt(playerid,"InDrift",1);
	        SetPlayerPosEx(playerid,-269.3078,1442.3734,120.2559);
	        SetPlayerFacingAngle(playerid,227.3237);
		    SetPVarInt(playerid,"StartDrift",0);
			SetPlayerVirtualWorld(playerid,0);
			Driftzeit[playerid] = 0;
			Score[playerid] = 0;
	        SetCameraBehindPlayer(playerid);
	        TogglePlayerControllable(playerid, false);
	        StopAudioStreamForPlayer(playerid);
	        SetTimerEx("DriftOLaden",2293,false,"i",playerid);
			format(string, sizeof(string), "~y~Objekte ~w~werden geladen");
			GameTextForPlayer(playerid, string, 2028, 3);
  			//Quests
		 	if(sStats[playerid][sQuest] == 3 && sStats[playerid][sLevel] > 1 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
		    {
		        sStats[playerid][sQuest] = 4;
		   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
			    ClearChat(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: jo Bro, es gibt da ein kleines Problem um das du dich kümmern müsstest!");
			    SendClientMessage(playerid, COLOR_YELLOW, "Son Azzlack verkauft Drogen in meinem Revier ich hab dem schon öfters gesagt das er sich aus meiner Hood verpissen soll.");
			    SendClientMessage(playerid, COLOR_YELLOW, "Aber er will nicht lernen, begib dich bitte zum Startower, und erledige diesen **** für mich!");
			    SendClientMessage(playerid, COLOR_ORANGE, "Meine Männer haben da schon alles vorbereitet. Viel Glück!");
		   		SetPlayerCheckpoint(playerid, 1544.3213,-1354.3120,329.4726, 4.0);
				QuestCP[playerid] = 800;
		    }
		    if(sStats[playerid][sQuest] == 5 && sStats[playerid][sLevel] > 2  && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
		    {
		        sStats[playerid][sQuest] = 6;
		   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
			    ClearChat(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Es gibt große Probleme komm am besten mal dringen vorbei!");
			    SendClientMessage(playerid, COLOR_ORANGE, "Info: Begebe dich nach Jack und benutze /jackr");
		    }
		    if(sStats[playerid][sQuest] == 7 && sStats[playerid][sLevel] > 3 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
		    {
		        sStats[playerid][sQuest] = 8;
		        SetPVarInt(playerid,"Laptop",0);
		   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
			    ClearChat(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Ich habe da eine Idee wie wir mehr über den Leader der MS-14 Gang herrausbekommen.");
			    SendClientMessage(playerid, COLOR_YELLOW, "Komm mal bei mir vorbei und hole dir meinen Laptop ab, mithilfe dessen du versuchen kannst den Hauptcomputer des Bayside Police Department zu hacken,");
			    SendClientMessage(playerid, COLOR_YELLOW, "um einige Informationen herraus zu finden. Also bis gleich !!! (/laptop)");
		    }
		    if(sStats[playerid][sQuest] == 9 && sStats[playerid][sLevel] > 3 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
		    {
		        sStats[playerid][sQuest] = 10;
		   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
			    ClearChat(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Ey komm schnell vorbei ich brauche dringend deine Hilfe!");
			    SendClientMessage(playerid, COLOR_YELLOW, "Meine Freund Rainer wurde von der MS-14 Gang entführt und wird auf deren Transportschiff festgehalten.");
			    SendClientMessage(playerid, COLOR_YELLOW, "du musst ihm umbedingt befreien, komm zu mir und ich bringe dich zu diesem Schiff. (/startmission)");
		    }
	    }
	    if(response == 1)
	    {//Wenn 2 angeklickt wird
	    	ClearChat(playerid);
		    SendClientMessage(playerid,Weiß,"Du hast die Driftstrecke erfolgreich verlassen!");
		    SetPlayerPosEx(playerid,-2353.4905,2571.8323,24.4437);
		    SetPlayerFacingAngle(playerid,188.1033);
		    SetPVarInt(playerid,"InDrift",0);
		    SetPVarInt(playerid,"StartDrift",0);
			SetPlayerVirtualWorld(playerid,0);
			Driftzeit[playerid] = 0;
			Score[playerid] = 0;
   			SetCameraBehindPlayer(playerid);
	        TogglePlayerControllable(playerid, true);
	        StopAudioStreamForPlayer(playerid);
        	//Quests
		 	if(sStats[playerid][sQuest] == 3 && sStats[playerid][sLevel] > 1 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
		    {
		        sStats[playerid][sQuest] = 4;
		   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
			    ClearChat(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: jo Bro, es gibt da ein kleines Problem um das du dich kümmern müsstest!");
			    SendClientMessage(playerid, COLOR_YELLOW, "Son Azzlack verkauft Drogen in meinem Revier ich hab dem schon öfters gesagt das er sich aus meiner Hood verpissen soll.");
			    SendClientMessage(playerid, COLOR_YELLOW, "Aber er will nicht lernen, begib dich bitte zum Startower, und erledige diesen **** für mich!");
			    SendClientMessage(playerid, COLOR_ORANGE, "Meine Männer haben da schon alles vorbereitet. Viel Glück!");
		   		SetPlayerCheckpoint(playerid, 1544.3213,-1354.3120,329.4726, 4.0);
				QuestCP[playerid] = 800;
		    }
		    if(sStats[playerid][sQuest] == 5 && sStats[playerid][sLevel] > 2  && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
		    {
		        sStats[playerid][sQuest] = 6;
		   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
			    ClearChat(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Es gibt große Probleme komm am besten mal dringen vorbei!");
			    SendClientMessage(playerid, COLOR_ORANGE, "Info: Begebe dich nach Jack und benutze /jackr");
		    }
		    if(sStats[playerid][sQuest] == 7 && sStats[playerid][sLevel] > 3 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
		    {
		        sStats[playerid][sQuest] = 8;
		        SetPVarInt(playerid,"Laptop",0);
		   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
			    ClearChat(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Ich habe da eine Idee wie wir mehr über den Leader der MS-14 Gang herrausbekommen.");
			    SendClientMessage(playerid, COLOR_YELLOW, "Komm mal bei mir vorbei und hole dir meinen Laptop ab, mithilfe dessen du versuchen kannst den Hauptcomputer des Bayside Police Department zu hacken,");
			    SendClientMessage(playerid, COLOR_YELLOW, "um einige Informationen herraus zu finden. Also bis gleich !!! (/laptop)");
		    }
		    if(sStats[playerid][sQuest] == 9 && sStats[playerid][sLevel] > 3 && sStats[playerid][sTutorial] == 1 && sStats[playerid][sTod] == 0)
		    {
		        sStats[playerid][sQuest] = 10;
		   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
			    ClearChat(playerid);
			    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Ey komm schnell vorbei ich brauche dringend deine Hilfe!");
			    SendClientMessage(playerid, COLOR_YELLOW, "Meine Freund Rainer wurde von der MS-14 Gang entführt und wird auf deren Transportschiff festgehalten.");
			    SendClientMessage(playerid, COLOR_YELLOW, "du musst ihm umbedingt befreien, komm zu mir und ich bringe dich zu diesem Schiff. (/startmission)");
		    }
	    }
	}
	if(dialogid == DRIFT)
	{
	    if(response == 0)
	    {
	    }
		if(response == 1)
		{
			if(geld < 500)
			{
			    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (500)!");
			    return 1;
			}
			ClearChat(playerid);
	        TogglePlayerControllable(playerid, false);
	        SetTimerEx("DriftOLaden",2293,false,"i",playerid);
			format(string, sizeof(string), "~y~Objekte ~w~werden geladen");
			GameTextForPlayer(playerid, string, 2028, 3);
	        GivePlayerEuro(playerid,-500);
	        SetPVarInt(playerid,"InDrift",1);
	        SetPlayerPosEx(playerid,-269.3078,1442.3734,120.2559);
	        SetPlayerFacingAngle(playerid,227.3237);
		}
	}
	if(dialogid == JACK1)
	{
	    if(response == 1)
	    {
	        ClearChat(playerid);
	        SendClientMessage(playerid,Weiß,"{FFFF00}Jack: {FFFFFF}Achja und kauf dir am besten neue Kleidung deine aktuelle sieht scheisse aus!");
	        SendClientMessage(playerid,Weiß,"{FFFF00}Jack: {FFFFFF}Ich gib dir dafür schonmal eine kleine Anzahlung in höhe von 150.");
	        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Info: Du kannst diese nervigen Audionachrichten (im Chat) mit /audiomsg deaktivieren!");
	        GivePlayerEuro(playerid,150);
	    }
 	}
	if(dialogid == FLUGTICKET)
	{
		if(response == 1)
		{
		    GivePlayerEuro(playerid,-500);
		    SetPVarInt(playerid,"Flugticket",1);
		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich ein Flugticket gekauft!");
		    SendClientMessage(playerid,Gelb2,"Die Fluglinie wünscht dir einen angenehmen Aufenthalt.");
		}
		if(response == 0)
		{
		}
	}
if(dialogid == SERVICE)
{
	if(response)
	{
		if(listitem == 0)
		{
			if(IsACop(playerid))
			{
				SendClientMessage(playerid,Rot,"Du kannst das Bayside Police-Department nicht anrufen, da du selbst ein Mitglied davon bist!");
				return 1;
			}
			if(PolizistenOn < 1)
			{
				SendClientMessage(playerid,Rot,"Zurzeit ist kein Mitglied des Bayside Police-Departments online!");
				return 1;
			}
			if(GetPVarInt(playerid, "Psend") == 1)
			{
				SendClientMessage(playerid,Rot,"Du hast schon ein Polizei geordert!");
				return 1;
			}
			SetPVarInt(playerid,"Psend",1);
			format(string,sizeof(string),"Ein neuer Notruf von %s[%d] geht ein, benutze /acceptpoli [ID/Name] um den Anruf anzunehmen!",GetName(playerid),playerid);
			SendRadioMessage(1,Gelb2,string);
			SendClientMessage(playerid,Weiß,"Du hast das Bayside Police-Department alarmiert, bitte warte jetzt bis das Bayside Police-Department auf deinen Notruf reagiert!");
		}
		if(listitem == 1)
		{
			if(IsAFW(playerid) && GetPVarInt(playerid, "Unfall") == 0)
			{
				SendClientMessage(playerid,Rot,"Du kannst die Feuerwehr nicht anrufen da du ein Feuerwehrmann bist!");
				return 1;
			}
			if(GetPVarInt(playerid, "FWsend") == 1)
			{
				SendClientMessage(playerid,Rot,"Du hast die Feuerwehr schon alarmiert!");
				return 1;
			}
			new count = 1;
	 		for(new i = 0; i < MAX_PLAYERS; i++)
	 		{
				if(IsPlayerConnected(i) && IsAFW(i))
				{
				    count ++;
				}
			}
			if(count <= 1)
			{
			    SendClientMessage(playerid,Rot,"Es ist kein Mitglied des Bayside Fire-Departments online!");
			    return 1;
			}
			else
			{
				SetPVarInt(playerid,"FWsend",1);
				format(string,sizeof(string),"Ein neuer Notruf von %s[%d] geht ein, benutze /acceptfeuerwehr [ID/Name] um den Anruf anzunehmen!",GetName(playerid),playerid);
				SendRadioMessage(2,Gelb2,string);
				SendClientMessage(playerid,Weiß,"Du hast die Feuerwehr alarmiert, bitte warte jetzt bis die Feuerwehr auf deinen Notruf reagiert!");
			}
		}
		if(listitem == 2)
		{
			if(IsASani(playerid))
			{
				SendClientMessage(playerid,Rot,"Du kannst das Bayside-Medical Center nicht anrufen, da du selbst ein Mitglied davon bist!");
				return 1;
			}
			new count = 1;
	 		for(new i = 0; i < MAX_PLAYERS; i++)
	 		{
				if(IsPlayerConnected(i) && IsASani(i))
				{
				    count ++;
				}
			}
			if(count <= 1)
			{
			    SendClientMessage(playerid,Rot,"Es ist kein Mitglied des Bayside Medical-Centers online!");
			    return 1;
			}
			else
			{
				if(GetPVarInt(playerid, "Ssend") == 1)
				{
					SendClientMessage(playerid,Rot,"Du hast schon einen Krankenwagen geordert!");
					return 1;
				}
				SetPVarInt(playerid,"Ssend",1);
				format(string,sizeof(string),"Ein neuer Notruf von %s[%d] geht ein, benutze /acceptsani [ID/Name] um den Anruf anzunehmen!",GetName(playerid),playerid);
				SendRadioMessage(3,Gelb2,string);
				SendClientMessage(playerid,Weiß,"Du hast das Bayside Medical-Center alarmiert, bitte warte jetzt bis das Bayside Medical-Center auf deinen Notruf reagiert!");
			}
		}
		if(listitem == 3)
		{
			if(sStats[playerid][sJob] == 1)
			{
				SendClientMessage(playerid,Rot,"Du kannst keinen Mechatroniker anrufen, du bist selber einer (/radio) für interne Gespräche!");
				return 1;
			}
			if(MechaOn < 1)
			{
				SendClientMessage(playerid,Rot,"Zurzeit ist kein Mechatroniker online!");
				return 1;
			}
			if(GetPVarInt(playerid, "Msend") == 1)
			{
				SendClientMessage(playerid,Rot,"Du hast schon einen Mechatroniker kontaktiert!");
				return 1;
			}
			SetPVarInt(playerid,"Msend",1);
			format(string,sizeof(string),"Ein neuer Anruf von %s[%d] geht ein, benutze /acceptmecha [ID/Name] um den Anruf anzunehmen!",GetName(playerid),playerid);
			SendRadioMessage(98,Gelb2,string);
			SendClientMessage(playerid,Weiß,"Du hast einen Mechatroniker kontaktiert, bitte warte auf seine Rückmeldung!");
		}
	}
}
	if(dialogid == FEUERWEHRA)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				GivePlayerWeaponEx(playerid,42,700);
				SendClientMessage(playerid,Weiß,"Du hast dich erfolgreich mit einem Feuerlöscher ausgerüstet!");
	        }
	        if(listitem == 1)
	        {
	            if(sStats[playerid][sRank] < 4)
	            {
	                SendClientMessage(playerid,Rot,"Du benötigst mind. Rank 4 um dich mit einer Kettensäge ausrüsten zu können!");
	                return 1;
	            }
				GivePlayerWeaponEx(playerid,9,1);
				SendClientMessage(playerid,Weiß,"Du hast dich erfolgreich mit einer Kettensäge ausgerüstet!");
	        }
	        if(listitem == 2)
	        {
				GivePlayerWeaponEx(playerid,6,1);
				SendClientMessage(playerid,Weiß,"Du hast dich erfolgreich mit einer Schaufel ausgerüstet!");
	        }
	        if(listitem == 3)
	        {
				SetPVarInt(playerid,"Brecheisen",1);
				SendClientMessage(playerid,Weiß,"Du hast dich erfolgreich mit einem Brecheisen ausgerüstet!");
	        }
	    }
	}
	if(dialogid == WGET)
	{
	    if(response)
	    {
	        SetPVarInt(playerid,"MPaket",1);
	        GivePlayerEuro(playerid,-800);
	        ClearChat(playerid);
	        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich ein (Roh)Materialpaket gekauft!");
	        SendClientMessage(playerid,Gelb2,"Um dieses in Materialien umarbeiten zu lassen begebe dich bitte zum Materialpaketen Lieferpunkt!");
         	SetPlayerAttachedObject(playerid, 0, 1279, 6); //Waffenpaket in die Hand geben
         	QuestCP[playerid] = 98;
         	SetPlayerCheckpoint(playerid,-2556.2112,1147.3525,55.7266,2.0);
	    }
	}
	if(dialogid == WGIVE)
	{
	    if(response)
	    {
	        RemovePlayerAttachedObject(playerid,5);
			SendClientMessage(playerid,Gelb,"Bitte warte 10 Sekunden bis dein (Roh)Materialpaket umgearbeitet wird!");
   			SetTimerEx("Umarbeitung", 10607, false, "d", playerid);
			TogglePlayerControllable(playerid, false);
	    }
	}
	if(dialogid == VERSICHERUNG)
	{
		if(response)
		{
  			if(listitem == 0)
    		{
   				if(sStats[playerid][sArbeitslosengeld] > 0)
         		{
         		    SendClientMessage(playerid,Rot,"Du kannst diese Versicherung nicht abschließen solange du Arbeitslosengeld beziehst!");
         		    ShowPlayerDialog(playerid,VERSICHERUNG, DIALOG_STYLE_LIST, "Versicherung", "{00AA00}1.{FFFFFF}Autoversicherung\n{00AA00}2.{FFFFFF}Krankenversicherung\n{00AA00}3.{FFFFFF}Autoversicherung kündigen\n{00AA00}4.{FFFFFF}Krankenversicherung kündigen", "Auswählen", "Zurück");
         		    return 1;
         		}
		        if(sStats[playerid][sAutover] > 0)
				{
				    SendClientMessage(playerid,Rot,"Du hast schon eine Autoversicherung!");
				    ShowPlayerDialog(playerid,VERSICHERUNG, DIALOG_STYLE_LIST, "Versicherung", "{00AA00}1.{FFFFFF}Autoversicherung\n{00AA00}2.{FFFFFF}Krankenversicherung\n{00AA00}3.{FFFFFF}Autoversicherung kündigen\n{00AA00}4.{FFFFFF}Krankenversicherung kündigen", "Auswählen", "Zurück");
				    return 1;
				}
    			if(sStats[playerid][sAutos] < 1)
				{
				    SendClientMessage(playerid,Rot,"Du besitzt kein Auto!");
				    ShowPlayerDialog(playerid,VERSICHERUNG, DIALOG_STYLE_LIST, "Versicherung", "{00AA00}1.{FFFFFF}Autoversicherung\n{00AA00}2.{FFFFFF}Krankenversicherung\n{00AA00}3.{FFFFFF}Autoversicherung kündigen\n{00AA00}4.{FFFFFF}Krankenversicherung kündigen", "Auswählen", "Zurück");
				    return 1;
				}
				    ClearChat(playerid);
				    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid,Weiß,"Du hast erfolgreich eine Autoversicherung für 1000 pro Zahltag abgeschlossen!");
				    SendClientMessage(playerid,Gelb2,"Die Kosten von Reperaturen in der Werkstatt sowie das Umlackieren im PaynSpray werden von der Versicherung übernommen!");
				    sStats[playerid][sAutover] = 1;
     		 }
  		    if(listitem == 1)
		    {
      			if(sStats[playerid][sArbeitslosengeld] > 0)
         		{
         		    SendClientMessage(playerid,Rot,"Du kannst diese Versicherung nicht abschließen solange du Arbeitslosengeld beziehst!");
         		    ShowPlayerDialog(playerid,VERSICHERUNG, DIALOG_STYLE_LIST, "Versicherung", "{00AA00}1.{FFFFFF}Autoversicherung\n{00AA00}2.{FFFFFF}Krankenversicherung\n{00AA00}3.{FFFFFF}Autoversicherung kündigen\n{00AA00}4.{FFFFFF}Krankenversicherung kündigen", "Auswählen", "Zurück");
         		    return 1;
         		}
		        if(sStats[playerid][sKrankenver] > 0)
				{
				    SendClientMessage(playerid,Rot,"Du hast schon eine Krankenversicherung!");
				    ShowPlayerDialog(playerid,VERSICHERUNG, DIALOG_STYLE_LIST, "Versicherung", "{00AA00}1.{FFFFFF}Autoversicherung\n{00AA00}2.{FFFFFF}Krankenversicherung\n{00AA00}3.{FFFFFF}Autoversicherung kündigen\n{00AA00}4.{FFFFFF}Krankenversicherung kündigen", "Auswählen", "Zurück");
				    return 1;
				}
				    ClearChat(playerid);
				    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid,Weiß,"Du hast erfolgreich eine Krankenversicherung für 800 pro Zahltag abgeschlossen!");
				    SendClientMessage(playerid,Gelb2,"Die Arztkosten werden absofort von der Versicherung übernommen!");
				    sStats[playerid][sKrankenver] = 1;
			}
   			if(listitem == 3)
		    {
		        if(sStats[playerid][sKrankenver] == 0)
				{
				    SendClientMessage(playerid,Rot,"Du besitzt keine Krankenversicherung!");
				    ShowPlayerDialog(playerid,VERSICHERUNG, DIALOG_STYLE_LIST, "Versicherung", "{00AA00}1.{FFFFFF}Autoversicherung\n{00AA00}2.{FFFFFF}Krankenversicherung\n{00AA00}3.{FFFFFF}Autoversicherung kündigen\n{00AA00}4.{FFFFFF}Krankenversicherung kündigen", "Auswählen", "Zurück");
				    return 1;
				}
				    ClearChat(playerid);
				    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid,Weiß,"Du hast deine Krankenversicherung erfolgreich gekündigt!");
				    sStats[playerid][sKrankenver] = 0;
			}
			if(listitem == 2)
		    {
		        if(sStats[playerid][sAutover] == 0)
				{
				    SendClientMessage(playerid,Rot,"Du besitzt keine Autoversicherung!");
				    ShowPlayerDialog(playerid,VERSICHERUNG, DIALOG_STYLE_LIST, "Versicherung", "{00AA00}1.{FFFFFF}Autoversicherung\n{00AA00}2.{FFFFFF}Krankenversicherung\n{00AA00}3.{FFFFFF}Autoversicherung kündigen\n{00AA00}4.{FFFFFF}Krankenversicherung kündigen", "Auswählen", "Zurück");
				    return 1;
				}
				    ClearChat(playerid);
				    PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				    SendClientMessage(playerid,Weiß,"Du hast deine Autoversicherung erfolgreich gekündigt!");
				    sStats[playerid][sAutover] = 0;
			}
		}
		if(response == 0)
		{
		    ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
		}
	}
	if(dialogid == CITYHALL)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
      				if(sStats[playerid][sJob] > 0) {
                        SendClientMessage(playerid,Rot,"Du kannst kein Arbeitslosengeld beziehen, du hast einen Job!");
                        ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
                        return 1;
                    }
                    if(sStats[playerid][sPersonalausweis] < 1) {
                        SendClientMessage(playerid,Rot,"Du kannst kein Arbeitslosengeld beziehen, du hast keinen Personalausweis!");
                        ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
                        return 1;
                    }
                    if(sStats[playerid][sMitglied] > 0) {
                        SendClientMessage(playerid,Rot,"Du kannst kein Arbeitslosengeld beziehen, du ist in einer Fraktion!");
                        ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
                        return 1;
                    }
                    if(sStats[playerid][sLeiter] > 0) {
                        SendClientMessage(playerid,Rot,"Du kannst kein Arbeitslosengeld beziehen, du ist in einer Fraktion!");
                        ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
                        return 1;
                    }
                    if(sStats[playerid][sArbeitslosengeld] > 0) {
                        SendClientMessage(playerid,Rot,"Du beziehst schon Arbeitslosengeld!");
                        ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
                        return 1;
                    }
                   	if(sStats[playerid][sLink] == 0)
					{
						SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
						ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
						return 1;
					}
                        ClearChat(playerid);
	                    SendClientMessage(playerid, Weiß,"Du hast dir erfolgreich Arbeitslosengeld beantragt.");
	                    SendClientMessage(playerid, Weiß,"Ab dem nächsten Zahltag, erhältst du eine Summe von 450 als Arbeitslosengeld.");
	                    SendClientMessage(playerid, Weiß,"Solange du Arbeitslosengeld beziehst kannst du keinen Job annehmen, oder einer Fraktion beitreten.");
	                    SendClientMessage(playerid, Rot,"Um kein Arbeitslosengeld mehr zu erhalten, geh zurück ins Rathaus und kündige es.");
	                    sStats[playerid][sArbeitslosengeld] = 1;
                }
		    }
		    if(listitem == 1)
		    {
      					if(sStats[playerid][sArbeitslosengeld] == 0) {
                        SendClientMessage(playerid,Rot,"Du beziehst kein Arbeitslosengeld!");
                        ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
                        return 1;
                    }
		    	    ClearChat(playerid);
				    SendClientMessage(playerid,Weiß,"Du hast dein Arbeitslosengeld erfolgreich gekündigt!");
				    SendClientMessage(playerid,Rot,"Du sitzt jetzt auf dem trockenen also kümmer dich um einen Job!");
				    sStats[playerid][sArbeitslosengeld] = 0;
		    }
		    if(listitem == 2)
		    {
		     				if(sStats[playerid][sJob] > 0) {
                        SendClientMessage(playerid,Rot,"Du hast schon einen Job!");
                       ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
                        return 1;
                    }
		    	ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
		    }
		    if(listitem == 3)
		    {
     		if(sStats[playerid][sLink] == 0)
			{
				SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
				ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
				return 1;
			}
			if(geld < 5000)
			{
			    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
			    ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
			    return 1;
			}
 			if(sStats[playerid][sReisePass] == 1)
			{
   				SendClientMessage(playerid,Rot,"Du hast schon einen Reisepass!");
			    ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
			    return 1;
			}
			if(sStats[playerid][sSpielstunden] < 5)
			{
   				SendClientMessage(playerid,Rot,"Du benötigst mind. 5 Spielstunden um einen Reisepass kaufen zu können!");
			    ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
			    return 1;
			}
				ClearChat(playerid);
			    sStats[playerid][sReisePass] = 1;
			    GivePlayerEuro(playerid,-5000);
			    Staatskasse+=5000;
  	    		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich einen Reisepass erworben!");
			    SendClientMessage(playerid,Gelb2,"Dir ist es jetzt gestattet Los Santos sowie Las Venturas zu betreten!");
		    }
		    if(listitem == 4)
		    {
		                       	if(sStats[playerid][sLink] == 0)
					{
						SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!");
						ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
						return 1;
					}
		        ShowPlayerDialog(playerid,VERSICHERUNG, DIALOG_STYLE_LIST, "Versicherung", "{00AA00}1.{FFFFFF}Autoversicherung\n{00AA00}2.{FFFFFF}Krankenversicherung\n{00AA00}3.{FFFFFF}Autoversicherung kündigen\n{00AA00}4.{FFFFFF}Krankenversicherung kündigen", "Auswählen", "Zurück");
		    }
	}
	if(dialogid == JOBS)
	{
	    if(response)
	    {
			if(sStats[playerid][sJob] > 0) {
   				SendClientMessage(playerid,Rot,"Du hast schon einen Job!");
       			ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
       			return 1;
          	}
	    	if(listitem == 0)
		    {
		        if(sStats[playerid][sAutoschein] < 1)
		        {
		            SendClientMessage(playerid,Rot,"Für diesen Job benötigst du einen Führerschein!");
		            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
		            return 1;
		        }
                ShowPlayerDialog(playerid,MECHATRONIKER,DIALOG_STYLE_MSGBOX,"Mechatroniker Job","{00FF00}Job Mechatroniker.\n\n{FFFFFF}Als Mechatroniker bist du der Experte wenn es um Fahrzeuge geht.\nDu kannst diese reparieren,tunen,lackieren und befüllen,\nals kleinen Nebenverdienst kannst du die Stadt mithilfe eines Sweepers sauber halten.\nKlicke auf {FF0000}Annehmen{FFFFFF} um den Job anzunehmen.\n\n{FF0000}INFO : Du unterschreibst somit einen 2h Vertrag.","Annehmen","Zurück");
		    }
	    	if(listitem == 1)
		    {
      			if(sStats[playerid][sLevel] < 2)
		        {
		            SendClientMessage(playerid,Rot,"Für diesen Job benötigst du mind. Level 2!");
		            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
		            return 1;
		        }
                ShowPlayerDialog(playerid,DJ,DIALOG_STYLE_MSGBOX,"DJ Job","{00FF00}Job DJ.\n\n{FFFFFF}Als DJ bist du der, der mit der Musik tanzt.\nDu kannst dein Mischpult aufbauen\nund andere Leute mit deiner Musik beglücken.\nKlicke auf {FF0000}Annehmen{FFFFFF} um den Job anzunehmen.\n\n{FF0000}INFO : Du unterschreibst somit einen 2h Vertrag.","Annehmen","Zurück");
		    }
	    	if(listitem == 2)
		    {
      			if(sStats[playerid][sTruckschein] < 1)
		        {
		            SendClientMessage(playerid,Rot,"Für diesen Job benötigst du einen Truckerschein!");
		            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
		            return 1;
		        }
                ShowPlayerDialog(playerid,SPEDITION,DIALOG_STYLE_MSGBOX,"Speditions Job","{00FF00}Speditions Job.\n\n{FFFFFF}Wenn du bei der Spedition eingestellt bist.\nIst es deine Aufgabe anderen Firmen oder Tankstellen zu beliefern.\nKlicke auf {FF0000}Annehmen{FFFFFF} um den Job anzunehmen.\n\n{FF0000}INFO : Du unterschreibst somit einen 3h Vertrag.","Annehmen","Zurück");
		    }
	    	if(listitem == 3)
		    {
		        SendClientMessage(playerid,Rot,"Dieser Job wurde zu einer Fraktion transferiert, bitte bewerbe dich im entsprechenden Forum!");
				return 1;
		    }
	    	if(listitem == 4)
		    {
      			if(sStats[playerid][sAutoschein] < 1)
		        {
		            SendClientMessage(playerid,Rot,"Für diesen Job benötigst du einen Führerschein!");
		            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
		            return 1;
		        }
                ShowPlayerDialog(playerid,FARMER,DIALOG_STYLE_MSGBOX,"Farmer Job","{00FF00}Job Farmer\n\n{FFFFFF}Als Farmer musst du verschiedene Pflanzen anbauen,\nKühe melken,oder Gemüse/Obst ernten.\nIn diesem Job kannst du den benötigen Stoff für Rüstungen herstellen.\nKlicke auf {FF0000}Annehmen{FFFFFF} um den Job anzunehmen.\n\n{FF0000}INFO : Du unterschreibst somit einen 3h Vertrag.","Annehmen","Zurück");
		    }
	    	if(listitem == 5)
		    {
                ShowPlayerDialog(playerid,DETEKTIV,DIALOG_STYLE_MSGBOX,"Detektiv Job","{00FF00}Job Detektiv\n\n{FFFFFF}Als Detektiv kannst du in die Rolle vom Sherlock Homes eintauchen,\nDer Polizei helfen Verbrechen zu suchen.\nOder Privat selber auf die Lauer gehen.\nKlicke auf {FF0000}Annehmen{FFFFFF} um den Job anzunehmen.\n\n{FF0000}INFO : Du unterschreibst somit einen 2h Vertrag.","Annehmen","Zurück");
		    }
	    }
	    if(!response)
	    {
	        ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
	    }
	}
		if(dialogid == MECHATRONIKER) {
        if(response) {
            sStats[playerid][sJob] = 1;
            sStats[playerid][sJobTime] = 2;
            ClearChat(playerid);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
            SendClientMessage(playerid,Weiß,"Du hast erfolgreich den Job als Mechatroniker angenommen, und unterschreibst somit einen 2h Arbeitsvertrag.");
            SendClientMessage(playerid,Gelb2,"Info1: Benutze /jobhelp um alle notwendigen Befehle aufgelistet zu bekommen!");
            SendClientMessage(playerid,Gelb2,"Info2: Benutze /stopjob um deinen Job zu kündigen (Beachte die Vertragslaufzeit)!");
        }
        else {
            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
        }
    }
  		if(dialogid == DJ) {
        if(response) {
            sStats[playerid][sJob] = 2;
            sStats[playerid][sJobTime] = 2;
            ClearChat(playerid);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
            SendClientMessage(playerid,Weiß,"Du hast erfolgreich den Job als DJ angenommen, und unterschreibst somit einen 2h Arbeitsvertrag.");
            SendClientMessage(playerid,Gelb2,"Info1: Benutze /jobhelp um alle notwendigen Befehle aufgelistet zu bekommen!");
            SendClientMessage(playerid,Gelb2,"Info2: Benutze /stopjob um deinen Job zu kündigen (Beachte die Vertragslaufzeit)!");
        }
        else {
            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
        }
    }
  		if(dialogid == SPEDITION) {
        if(response) {
            sStats[playerid][sJob] = 3;
            sStats[playerid][sJobTime] = 3;
            ClearChat(playerid);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
            SendClientMessage(playerid,Weiß,"Du hast erfolgreich den Job als Speditions Mitarbeiter angenommen, und unterschreibst somit einen 3h Arbeitsvertrag.");
            SendClientMessage(playerid,Gelb2,"Info1: Benutze /jobhelp um alle notwendigen Befehle aufgelistet zu bekommen!");
            SendClientMessage(playerid,Gelb2,"Info2: Benutze /stopjob um deinen Job zu kündigen (Beachte die Vertragslaufzeit)!");
        }
        else {
            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
        }
    }
  		if(dialogid == FFW) {
        if(response) {
            sStats[playerid][sJob] = 4;
            sStats[playerid][sJobTime] = 3;
            ClearChat(playerid);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
            SendClientMessage(playerid,Weiß,"Du hast erfolgreich den Job als Freiwilliger Feuerwehrmann angenommen, und unterschreibst somit einen 3h Arbeitsvertrag.");
            SendClientMessage(playerid,Gelb2,"Info1: Benutze /jobhelp um alle notwendigen Befehle aufgelistet zu bekommen!");
            SendClientMessage(playerid,Gelb2,"Info2: Benutze /stopjob um deinen Job zu kündigen (Beachte die Vertragslaufzeit)!");
        }
        else {
            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
        }
    }
  		if(dialogid == FARMER) {
        if(response) {
            sStats[playerid][sJob] = 5;
            sStats[playerid][sJobTime] = 3;
            ClearChat(playerid);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
            SendClientMessage(playerid,Weiß,"Du hast erfolgreich den Job als Farmer angenommen, und unterschreibst somit einen 3h Arbeitsvertrag.");
            SendClientMessage(playerid,Gelb2,"Info1: Benutze /jobhelp um alle notwendigen Befehle aufgelistet zu bekommen!");
            SendClientMessage(playerid,Gelb2,"Info2: Benutze /stopjob um deinen Job zu kündigen (Beachte die Vertragslaufzeit)!");
        }
        else {
            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
        }
    }
  		if(dialogid == DETEKTIV) {
        if(response) {
            sStats[playerid][sJob] = 6;
            sStats[playerid][sJobTime] = 2;
            ClearChat(playerid);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
            SendClientMessage(playerid,Weiß,"Du hast erfolgreich den Job als Detektiv angenommen, und unterschreibst somit einen 2h Arbeitsvertrag.");
            SendClientMessage(playerid,Gelb2,"Info1: Benutze /jobhelp um alle notwendigen Befehle aufgelistet zu bekommen!");
            SendClientMessage(playerid,Gelb2,"Info2: Benutze /stopjob um deinen Job zu kündigen (Beachte die Vertragslaufzeit)!");
        }
        else {
            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
        }
    }
  		if(dialogid == DROGEN) {
        if(response) {
            sStats[playerid][sJob] = 7;
            sStats[playerid][sJobTime] = 2;
            ClearChat(playerid);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
            SendClientMessage(playerid,Weiß,"Du hast erfolgreich den Job als Drogenhändler angenommen, und unterschreibst somit einen 2h Arbeitsvertrag.");
            SendClientMessage(playerid,Gelb2,"Info1: Benutze /jobhelp um alle notwendigen Befehle aufgelistet zu bekommen!");
            SendClientMessage(playerid,Gelb2,"Info2: Benutze /stopjob um deinen Job zu kündigen (Beachte die Vertragslaufzeit)!");
        }
        else {
            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
        }
    }
  		if(dialogid == WAFFEN) {
        if(response) {
            sStats[playerid][sJob] = 8;
            sStats[playerid][sJobTime] = 4;
            ClearChat(playerid);
            PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
            SendClientMessage(playerid,Weiß,"Du hast erfolgreich den Job als Waffenhändler angenommen, und unterschreibst somit einen 4h Arbeitsvertrag.");
            SendClientMessage(playerid,Gelb2,"Info1: Benutze /jobhelp um alle notwendigen Befehle aufgelistet zu bekommen!");
            SendClientMessage(playerid,Gelb2,"Info2: Benutze /stopjob um deinen Job zu kündigen (Beachte die Vertragslaufzeit)!");
        }
        else {
            ShowPlayerDialog(playerid,JOBS, DIALOG_STYLE_LIST, "Jobs", "{00AA00}1.{FFFFFF}Mechatroniker\n{00AA00}2.{FFFFFF}Disc Jockey[DJ]\n{00AA00}3.{FFFFFF}Spedition\n{00AA00}4.{FFFFFF}[FFW]Freiwillige Feuerwehr\n{00AA00}5.{FFFFFF}Farmer\n{00AA00}6.{FFFFFF}Detektiv", "Infos", "Zurück");
        }
    }
	if(dialogid == LIZENSEN)
	{
		if(response)
		{
			ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
		}
		if(response == 0)
		{
		    ShowPlayerDialog(playerid,CITYHALL, DIALOG_STYLE_LIST, "Bayside Rathaus", "{00AA00}1.{FFFFFF}Arbeitslosengeld beantragen\n{00AA00}2.{FFFFFF}Arbeitslosengeld kündigen\n{00AA00}3.{FFFFFF}Jobs\n{00AA00}4.{FFFFFF}Reisepass (5000)\n{00AA00}5.{FFFFFF}Versicherungen", "Auswählen", "Abbrechen");
  		}
	}
	if(dialogid == DJSONGS2)
	{
	    if(response)
	    {
		 	for(new p = 0; p < MAX_PLAYERS; p++)
		 	{
				if(IsPlayerConnected(p) && sStats[p][sTutorial] == 1)
				{
			        if(listitem == 0)
			        {
			            if(GetPVarInt(p, "ListenToDJ") == 1)
			            {
			                StopAudioStreamForPlayer(p);
			                SetPVarInt(p,"ListenToDJ", 0);
			            }
	            		if(IsPlayerInRangeOfPoint(p,25.0, -2477.5090,2000.7181,14.1531))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
						    PlayAudioStreamForPlayer(playerid, "http://listen.technobase.fm/dsl.pls", -2477.5090,2000.7181,14.1531, 20.0, 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.technobase.fm/dsl.pls", -2477.5090,2000.7181,14.1531, 20.0, 1);
			            }
			            return 1;
				 	}
    				if(listitem == 1)
        			{
			            if(GetPVarInt(p, "ListenToDJ") == 1)
			            {
			                StopAudioStreamForPlayer(p);
			                SetPVarInt(p,"ListenToDJ", 0);
			            }
	            		if(IsPlayerInRangeOfPoint(p,25.0, -2477.5090,2000.7181,14.1531))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.housetime.fm/dsl.pls", -2477.5090,2000.7181,14.1531, 20.0, 1);
			            }
		             	return 1;
				 	}
    				if(listitem == 2)
        			{
			            if(GetPVarInt(p, "ListenToDJ") == 1)
			            {
			                StopAudioStreamForPlayer(p);
			                SetPVarInt(p,"ListenToDJ", 0);
			            }
	            		if(IsPlayerInRangeOfPoint(p,25.0, -2477.5090,2000.7181,14.1531))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.coretime.fm/dsl.pls", -2477.5090,2000.7181,14.1531, 20.0, 1);
			            }
		             	return 1;
				 	}
		    		if(listitem == 3)
			        {
			            if(GetPVarInt(p, "ListenToDJ") == 1)
			            {
			                StopAudioStreamForPlayer(p);
			                SetPVarInt(p,"ListenToDJ", 0);
			            }
	            		if(IsPlayerInRangeOfPoint(p,25.0, -2477.5090,2000.7181,14.1531))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.clubtime.fm/dsl.pls", -2477.5090,2000.7181,14.1531, 20.0, 1);
			            }
		             	return 1;
				 	}
		 			if(listitem == 4)
			        {
			            if(GetPVarInt(p, "ListenToDJ") == 1)
			            {
			                StopAudioStreamForPlayer(p);
			                SetPVarInt(p,"ListenToDJ", 0);
			            }
	            		if(IsPlayerInRangeOfPoint(p,25.0, -2477.5090,2000.7181,14.1531))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.trancebase.fm/dsl.pls", -2477.5090,2000.7181,14.1531, 20.0, 1);
			            }
		             	return 1;
				 	}
		    		if(listitem == 5)
			        {
			            if(GetPVarInt(p, "ListenToDJ") == 1)
			            {
			                StopAudioStreamForPlayer(p);
			                SetPVarInt(p,"ListenToDJ", 0);
			            }
	            		if(IsPlayerInRangeOfPoint(p,25.0, -2477.5090,2000.7181,14.1531) && GetPVarInt(p, "ListenToDJ") == 0)
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.hardbase.fm/dsl.pls", -2477.5090,2000.7181,14.1531, 20.0, 1);
			            }
			            return 1;
				 	}
		    		if(listitem == 6)
			        {
           				if(GetPVarInt(p, "ListenToDJ") == 1)
			            {
			                StopAudioStreamForPlayer(p);
			                SetPVarInt(p,"ListenToDJ", 0);
			            }
				 	}
		 		}
	   	 	}
	    }
	    return 1;
	}
		if(dialogid == DJSONGS)
	{
	    if(response)
	    {
		 	for(new p = 0; p < MAX_PLAYERS; p++)
		 	{
				if(IsPlayerConnected(p) && sStats[p][sTutorial] == 1)
				{
			        if(listitem == 0)
			        {
	            		if(IsPlayerInRangeOfPoint(p,25.0, MischpultX[playerid],MischpultY[playerid],MischpultZ[playerid]))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.technobase.fm/dsl.pls", MischpultX[playerid], MischpultY[playerid], MischpultZ[playerid], 20.0, 1);
			            }
			            return 1;
				 	}
    				if(listitem == 1)
        			{
	            		if(IsPlayerInRangeOfPoint(p,25.0, MischpultX[playerid],MischpultY[playerid],MischpultZ[playerid]))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.housetime.fm/dsl.pls", MischpultX[playerid], MischpultY[playerid], MischpultZ[playerid], 20.0, 1);
			            }
		             	return 1;
				 	}
    				if(listitem == 2)
        			{
	            		if(IsPlayerInRangeOfPoint(p,25.0, MischpultX[playerid],MischpultY[playerid],MischpultZ[playerid]))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.coretime.fm/dsl.pls", MischpultX[playerid], MischpultY[playerid], MischpultZ[playerid], 20.0, 1);
			            }
		             	return 1;
				 	}
		    		if(listitem == 3)
			        {
	            		if(IsPlayerInRangeOfPoint(p,25.0, MischpultX[playerid],MischpultY[playerid],MischpultZ[playerid]))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.clubtime.fm/dsl.pls", MischpultX[playerid], MischpultY[playerid], MischpultZ[playerid], 20.0, 1);
			            }
		             	return 1;
				 	}
		 			if(listitem == 4)
			        {
	            		if(IsPlayerInRangeOfPoint(p,25.0, MischpultX[playerid],MischpultY[playerid],MischpultZ[playerid]))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.trancebase.fm/dsl.pls", MischpultX[playerid], MischpultY[playerid], MischpultZ[playerid], 20.0, 1);
			            }
		             	return 1;
				 	}
		    		if(listitem == 5)
			        {
	            		if(IsPlayerInRangeOfPoint(p,25.0, MischpultX[playerid],MischpultY[playerid],MischpultZ[playerid]))
						{
						    SetPVarInt(p,"ListenToDJ", 1);
			            	PlayAudioStreamForPlayer(p, "http://listen.hardbase.fm/dsl.pls", MischpultX[playerid], MischpultY[playerid], MischpultZ[playerid], 20.0, 1);
			            }
			            return 1;
				 	}
		    		if(listitem == 6)
			        {
           				if(GetPVarInt(p, "ListenToDJ") == 1)
			            {
			                StopAudioStreamForPlayer(p);
			                StopAudioStreamForPlayer(playerid);
			                SetPVarInt(p,"ListenToDJ", 0);
			            }
				 	}
		 		}
	   	 	}
	    }
	    return 1;
	}
	if(dialogid == MP3)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            SendClientMessage(playerid,Weiß,"Du hast Technobase.FM angemacht!");
	            StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://listen.technobase.fm/dsl.pls");
	            return 1;
		 	}
    		if(listitem == 1)
	        {
	            SendClientMessage(playerid,Weiß,"Du hast Housetime.FM angemacht!");
         		StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://listen.housetime.fm/dsl.pls");
	            return 1;
		 	}
    		if(listitem == 2)
	        {
	            SendClientMessage(playerid,Weiß,"Du hast Coretime.FM angemacht!");
         		StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://listen.coretime.fm/dsl.pls");
	            return 1;
		 	}
    		if(listitem == 3)
	        {
	            SendClientMessage(playerid,Weiß,"Du hast Clubtime.FM angemacht!");
       			StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://listen.clubtime.fm/dsl.pls");
	            return 1;
		 	}
 			if(listitem == 4)
	        {
	            SendClientMessage(playerid,Weiß,"Du hast Trancebase.FM angemacht!");
       			StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://listen.trancebase.fm/dsl.pls");
	            return 1;
		 	}
    		if(listitem == 5)
	        {
	            SendClientMessage(playerid,Weiß,"Du hast Hardbase.FM angemacht!");
       			StopAudioStreamForPlayer(playerid);
	            PlayAudioStreamForPlayer(playerid, "http://listen.hardbase.fm/dsl.pls");
	            return 1;
		 	}
    		if(listitem == 6)
	        {
		        SendClientMessage(playerid,Weiß,"Du hast deinen MP3 Player ausgeschaltet.");
		        StopAudioStreamForPlayer(playerid);
		        return 1;
		 	}
	    }
	    return 1;
	}
	if(dialogid == SHOP)
 	{
 	    if(response)
 	    {
 	        if(listitem == 0)
 	        {
 	            if(sStats[playerid][sAngel] == 1)
 	            {
  				    SendClientMessage(playerid,Rot,"Du hast schon eine Angel!");
				     ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
 	            }
				if(geld < 700)
				{
				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
				}
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-700);
				SendClientMessage(playerid,Weiß,"Vielen Dank, für Ihren Einkauf und viel Spass mit der Angel.");
				SendClientMessage(playerid,Gruen,"Mehr Informationen zum Thema Angel gibst unter /angelhelp.");
				sStats[playerid][sAngel] = 1;
				BizzInfo[1][bTill] += 700;
				BizzInfo[1][bProducts] -= 5;
 	        }
 	        if(listitem == 1)
 	        {
 	            if(sStats[playerid][sKoeder] >= 10)
 	            {
  				    SendClientMessage(playerid,Rot,"Du kannst nicht mehr als 10 Köder tragen!");
				     ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
 	            }
				if(geld < 25)
				{
				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				     ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
				}
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-25);
				SendClientMessage(playerid,Weiß,"Vielen Dank, für Ihren Einkauf und viel Spass mit dem Koeder.");
				sStats[playerid][sKoeder] += 1;
				BizzInfo[1][bTill] += 25;
				BizzInfo[1][bProducts] -= 1;
 	        }
 	        if(listitem == 2)
 	        {
 	            if(sStats[playerid][sKondom] >= 5)
 	            {
  				    SendClientMessage(playerid,Rot,"Du kannst nicht mehr als 5 Kondome tragen!");
				     ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
 	            }
				if(geld < 30)
				{
				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
				}
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-30);
				SendClientMessage(playerid,Weiß,"Vielen Dank, für Ihren Einkauf und viel Spass mit dem Kondom <3.");
				sStats[playerid][sKondom] += 1;
				BizzInfo[1][bTill] += 30;
				BizzInfo[1][bProducts] -= 2;
 	        }
 	        if(listitem == 3)
 	        {
 	            if(sStats[playerid][sTelefonBuch] == 1)
 	            {
  				    SendClientMessage(playerid,Rot,"Du hast schon ein Telefonbuch!");
				     ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
 	            }
				if(geld < 500)
				{
				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
				}
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-500);
				SendClientMessage(playerid,Weiß,"Vielen Dank, für Ihren Einkauf und viel Spass mit dem Telefonbuch.");
				sStats[playerid][sTelefonBuch] = 1;
				BizzInfo[1][bTill] += 500;
				BizzInfo[1][bProducts] -= 4;
 	        }
 	        if(listitem == 4)
 	        {
         		if(sStats[playerid][sLink] == 0)
					return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!"); ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
 	            if(sStats[playerid][sMP3Player] == 1)
 	            {
  				    SendClientMessage(playerid,Rot,"Du hast schon einen MP3 Player!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
 	            }
				if(geld < 2500)
				{
				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
				}
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-2500);
				SendClientMessage(playerid,Weiß,"Vielen Dank, für Ihren Einkauf und viel Spass mit dem MP3 Player.");
				SendClientMessage(playerid,Gruen,"Um den MP3 Player zu nutzen benutze einfach /mp3.");
				sStats[playerid][sMP3Player] = 1;
				BizzInfo[1][bTill] += 2500;
				BizzInfo[1][bProducts] -= 5;
 	        }
 	        if(listitem == 5)
 	        {
  				if(sStats[playerid][sLink] == 0)
					return SendClientMessage(playerid,Rot,"Du hast deinen Account noch nicht mit unserem UCP verlinkt (/linkhelp)!"); ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				if(geld < 1500)
				{
				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
				}
    			if(sStats[playerid][sHelm] > 0)
 	            {
					ShowPlayerDialog(playerid,HELM1,DIALOG_STYLE_MSGBOX,"Helmkauf","{FFFFFF}Du hast schon einen {00AA00}Helm{FFFFFF} möchtest du einen neuen kaufen?","Ja","Nein");
				    return 1;
 	            }
 	            ShowPlayerDialog(playerid,HELM2,DIALOG_STYLE_LIST,"Helmkauf","{FFFFFF}Helm 1 {00AA00}(Rot/Weiß)\n{FFFFFF}Helm 2 {00AA00}(Schwarz Motorcross)\n{FFFFFF}Helm 3 {00AA00}(Rot(gepunktet))\n{FFFFFF}Helm 4 {00AA00}(Blau)\n{FFFFFF}Helm 5 {00AA00}(Grün)","Kaufen","Zurück");
 	        }
 	    }
 	    return 1;
 	}
 	if(dialogid == HELM1)
 	{
 	    if(response == 0)
		{
		    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
		}
		if(response == 1)
		{
		    if(sStats[playerid][sMotorradschein] == 0)
		    {
		        SendClientMessage(playerid,Rot,"Du hast keinen Motorradschein!");
		        ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
		        return 1;
	  		}
    		ShowPlayerDialog(playerid,HELM2,DIALOG_STYLE_LIST,"Helmkauf","{FFFFFF}Helm 1 {00AA00}(Rot/Weiß)\n{FFFFFF}Helm 2 {00AA00}(Schwarz Motorcross)\n{FFFFFF}Helm 3 {00AA00}(Rot(gepunktet))\n{FFFFFF}Helm 4 {00AA00}(Blau)\n{FFFFFF}Helm 5 {00AA00}(Grün)","Kaufen","Zurück");
		}
 	}
 	if(dialogid == HELM2)
 	{
		if(response == 0)
		{
		    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
		}
		if(response == 1)
		{
		    if(listitem == 0)
		    {
		        if(geld < 1500)
		        {
  				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
		        }
  				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-1500);
		        SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich Helm 1 gekauft!");
		        sStats[playerid][sHelm] = 1;
				BizzInfo[1][bTill] += 1500;
				BizzInfo[1][bProducts] -= 3;
		    }
		    if(listitem == 1)
		    {
		        if(sStats[playerid][sLevel] < 4)
		        {
		            SendClientMessage(playerid,Rot,"Um diesen Helm kaufen zu können musst du mind. Level 4 sein!");
		            ShowPlayerDialog(playerid,HELM2,DIALOG_STYLE_LIST,"Helmkauf","{FFFFFF}Helm 1 {00AA00}(Rot/Weiß)\n{FFFFFF}Helm 2 {00AA00}(Schwarz Motorcross)\n{FFFFFF}Helm 3 {00AA00}(Rot(gepunktet))\n{FFFFFF}Helm 4 {00AA00}(Blau)\n{FFFFFF}Helm 5 {00AA00}(Grün)","Kaufen","Zurück");
		            return 1;
		        }
		        if(geld < 1500)
		        {
  				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
		        }
  				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-1500);
		        SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich Helm 2 gekauft!");
		        sStats[playerid][sHelm] = 2;
				BizzInfo[1][bTill] += 1500;
				BizzInfo[1][bProducts] -= 3;
		    }
		    if(listitem == 2)
		    {
		        if(geld < 1500)
		        {
  				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
		        }
  				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-1500);
		        SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich Helm 3 gekauft!");
		        sStats[playerid][sHelm] = 3;
				BizzInfo[1][bTill] += 1500;
				BizzInfo[1][bProducts] -= 3;
		    }
		    if(listitem == 3)
		    {
		        if(geld < 1500)
		        {
  				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
		        }
  				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-1500);
		        SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich Helm 4 gekauft!");
		        sStats[playerid][sHelm] = 4;
				BizzInfo[1][bTill] += 1500;
				BizzInfo[1][bProducts] -= 3;
		    }
		    if(listitem == 4)
		    {
		        if(geld < 1500)
		        {
  				    SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
				    ShowPlayerDialog(playerid,SHOP, DIALOG_STYLE_LIST, "24/7 Shop", "{00AA00}1.{FFFFFF}Angel {00AA00}(700)\n{00AA00}2.{FFFFFF}Köder {00AA00}(25)\n{00AA00}3.{FFFFFF}Kondom {00AA00}(30)\n{00AA00}4.{FFFFFF}Telefonbuch {00AA00}(500)\n{00AA00}5.{FFFFFF}Mp3 Player {00AA00}(2500)\n{00AA00}6.{FFFFFF}Helme {00AA00}(1500)", "Kaufen", "Abbrechen");
				    return 1;
		        }
  				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				GivePlayerEuro(playerid,-1500);
		        SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich Helm 5 gekauft!");
		        sStats[playerid][sHelm] = 5;
				BizzInfo[1][bTill] += 1500;
				BizzInfo[1][bProducts] -= 3;
		    }
		}
 	}
	if (dialogid == BSN) {
        if(response) {

            switch (listitem) {
                case 0:
                {
               	if(geld < 12)
				{
				SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (12)!");
				return 1;
				}
				ClearChat(playerid);
			    DriveinMenBusy = 1;
			    SetPVarInt(playerid, "Bestellungw", 1);
			    SendClientMessage(playerid,COLOR_WHITE,"Ihre Bestellung wurde angenommen, bitte fahren sie nun weiter.");
		     	SendClientMessage(playerid,COLOR_YELLOW,"Und holen sich ihre Bestellungen am Abholepunkt ab.");
		     	DisablePlayerCheckpoint(playerid);
		     	SetPlayerCheckpoint(playerid, -2459.1699,2218.6411,4.9844, 2.0); //BSN Abholepunkt
				QuestCP[playerid] = 99;
                }
                case 1:
                {
               	if(geld < 16)
				{
				SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (16)!");
				return 1;
				}
				ClearChat(playerid);
			    DriveinMenBusy = 1;
			    SetPVarInt(playerid, "Bestellungw", 2);
			    SendClientMessage(playerid,COLOR_WHITE,"Ihre Bestellung wurde angenommen, bitte fahren sie nun weiter.");
		     	SendClientMessage(playerid,COLOR_YELLOW,"Und holen sich ihre Bestellungen am Abholepunkt ab.");
		     	DisablePlayerCheckpoint(playerid);
		     	SetPlayerCheckpoint(playerid, -2459.1699,2218.6411,4.9844, 2.0); //BSN Abholepunkt
				QuestCP[playerid] = 99;
				}
    			case 2:
                {
               	if(geld < 20)
				{
				SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (20)!");
				return 1;
				}
				ClearChat(playerid);
			    DriveinMenBusy = 3;
			    SetPVarInt(playerid, "Bestellungw", 3);
			    SendClientMessage(playerid,COLOR_WHITE,"Ihre Bestellung wurde angenommen, bitte fahren sie nun weiter.");
		     	SendClientMessage(playerid,COLOR_YELLOW,"Und holen sich ihre Bestellungen am Abholepunkt ab.");
		     	DisablePlayerCheckpoint(playerid);
		     	SetPlayerCheckpoint(playerid, -2459.1699,2218.6411,4.9844, 2.0); //BSN Abholepunkt
				QuestCP[playerid] = 99;
				}
    			case 3:
                {
               	if(geld < 25)
				{
				SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (25)!");
				return 1;
				}
				ClearChat(playerid);
			    DriveinMenBusy = 4;
			    SetPVarInt(playerid, "Bestellungw", 4);
			    SendClientMessage(playerid,COLOR_WHITE,"Ihre Bestellung wurde angenommen, bitte fahren sie nun weiter.");
		     	SendClientMessage(playerid,COLOR_YELLOW,"Und holen sich ihre Bestellungen am Abholepunkt ab.");
		     	DisablePlayerCheckpoint(playerid);
		     	SetPlayerCheckpoint(playerid, -2459.1699,2218.6411,4.9844, 2.0); //BSN Abholepunkt
				QuestCP[playerid] = 99;
				}
    			case 4:
                {
               	if(geld < 30)
				{
				SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (30)!");
				return 1;
				}
				ClearChat(playerid);
			    DriveinMenBusy = 4;
			    SetPVarInt(playerid, "Bestellungw", 5);
			    SendClientMessage(playerid,COLOR_WHITE,"Ihre Bestellung wurde angenommen, bitte fahren sie nun weiter.");
		     	SendClientMessage(playerid,COLOR_YELLOW,"Und holen sich ihre Bestellungen am Abholepunkt ab.");
		     	DisablePlayerCheckpoint(playerid);
		     	SetPlayerCheckpoint(playerid, -2459.1699,2218.6411,4.9844, 2.0); //BSN Abholepunkt
				QuestCP[playerid] = 99;
				}
            }

        }
        return 1;
    }
	if(dialogid == WAFFENAUTOMAT)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(geld < 600)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,WAFFENAUTOMAT, DIALOG_STYLE_LIST, "Waffenautomat", "{00AA00}1.{FFFFFF}9MM {00AA00}600\n{00AA00}2.{FFFFFF}Deagle {00AA00}1100\n{00AA00}3.{FFFFFF}MP5 {00AA00}1500\n{00AA00}4.{FFFFFF}M4 {00AA00}3000\n{00AA00}5.{FFFFFF}Schrotflinte {00AA00}2100\n{00AA00}6.{FFFFFF}Rüstung {00AA00}1500", "Kaufen", "Abbrechen");
	                return 1;
	            }
	            if(BizzInfo[2][bProducts] < 13)
	            {
	                SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 600;
	            BizzInfo[2][bProducts] -= 13;
	            GivePlayerEuro(playerid,-600);
	            SendClientMessage(playerid,Weiß,"Die Machine macht klack, und es liegt erfolgreich eine neue Waffe im Schacht!");
	            GivePlayerWeaponEx(playerid,22,80);
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 1)
	        {
         		if(geld < 1100)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,WAFFENAUTOMAT, DIALOG_STYLE_LIST, "Waffenautomat", "{00AA00}1.{FFFFFF}9MM {00AA00}600\n{00AA00}2.{FFFFFF}Deagle {00AA00}1100\n{00AA00}3.{FFFFFF}MP5 {00AA00}1500\n{00AA00}4.{FFFFFF}M4 {00AA00}3000\n{00AA00}5.{FFFFFF}Schrotflinte {00AA00}2100\n{00AA00}6.{FFFFFF}Rüstung {00AA00}1500", "Kaufen", "Abbrechen");
	                return 1;
	            }
	            if(BizzInfo[2][bProducts] < 13)
	            {
	                SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 1100;
	            BizzInfo[2][bProducts] -= 13;
         		GivePlayerEuro(playerid,-1100);
	            SendClientMessage(playerid,Weiß,"Die Machine macht klack, und es liegt erfolgreich eine neue Waffe im Schacht!");
	            GivePlayerWeaponEx(playerid,24,60);
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 2)
	        {
 				if(geld < 1500)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,WAFFENAUTOMAT, DIALOG_STYLE_LIST, "Waffenautomat", "{00AA00}1.{FFFFFF}9MM {00AA00}600\n{00AA00}2.{FFFFFF}Deagle {00AA00}1100\n{00AA00}3.{FFFFFF}MP5 {00AA00}1500\n{00AA00}4.{FFFFFF}M4 {00AA00}3000\n{00AA00}5.{FFFFFF}Schrotflinte {00AA00}2100\n{00AA00}6.{FFFFFF}Rüstung {00AA00}1500", "Kaufen", "Abbrechen");
	                return 1;
	            }
	            if(BizzInfo[2][bProducts] < 14)
	            {
	                SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 1500;
         		GivePlayerEuro(playerid,-1500);
         		BizzInfo[2][bProducts] -= 14;
	            SendClientMessage(playerid,Weiß,"Die Machine macht klack, und es liegt erfolgreich eine neue Waffe im Schacht!");
	            GivePlayerWeaponEx(playerid,29,140);
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 3)
	        {
 				if(geld < 3000)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,WAFFENAUTOMAT, DIALOG_STYLE_LIST, "Waffenautomat", "{00AA00}1.{FFFFFF}9MM {00AA00}600\n{00AA00}2.{FFFFFF}Deagle {00AA00}1100\n{00AA00}3.{FFFFFF}MP5 {00AA00}1500\n{00AA00}4.{FFFFFF}M4 {00AA00}3000\n{00AA00}5.{FFFFFF}Schrotflinte {00AA00}2100\n{00AA00}6.{FFFFFF}Rüstung {00AA00}1500", "Kaufen", "Abbrechen");
	                return 1;
	            }
	            if(BizzInfo[2][bProducts] < 14)
	            {
	                SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 3000;
         		GivePlayerEuro(playerid,-3000);
         		BizzInfo[2][bProducts] -= 14;
	            SendClientMessage(playerid,Weiß,"Die Machine macht klack, und es liegt erfolgreich eine neue Waffe im Schacht!");
	            GivePlayerWeaponEx(playerid,31,120);
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 4)
	        {
 				if(geld < 2100)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,WAFFENAUTOMAT, DIALOG_STYLE_LIST, "Waffenautomat", "{00AA00}1.{FFFFFF}9MM {00AA00}600\n{00AA00}2.{FFFFFF}Deagle {00AA00}1100\n{00AA00}3.{FFFFFF}MP5 {00AA00}1500\n{00AA00}4.{FFFFFF}M4 {00AA00}3000\n{00AA00}5.{FFFFFF}Schrotflinte {00AA00}2100\n{00AA00}6.{FFFFFF}Rüstung {00AA00}1500", "Kaufen", "Abbrechen");
	                return 1;
	            }
	            if(BizzInfo[2][bProducts] < 15)
	            {
	                SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 2100;
         		GivePlayerEuro(playerid,-2100);
         		BizzInfo[2][bProducts] -= 15;
	            SendClientMessage(playerid,Weiß,"Die Machine macht klack, und es liegt erfolgreich eine neue Waffe im Schacht!");
	            GivePlayerWeaponEx(playerid,25,55);
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 5)
	        {
 				if(geld < 1500)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,WAFFENAUTOMAT, DIALOG_STYLE_LIST, "Waffenautomat", "{00AA00}1.{FFFFFF}9MM {00AA00}600\n{00AA00}2.{FFFFFF}Deagle {00AA00}1100\n{00AA00}3.{FFFFFF}MP5 {00AA00}1500\n{00AA00}4.{FFFFFF}M4 {00AA00}3000\n{00AA00}5.{FFFFFF}Schrotflinte {00AA00}2100\n{00AA00}6.{FFFFFF}Rüstung {00AA00}1500", "Kaufen", "Abbrechen");
	                return 1;
	            }
	            if(BizzInfo[2][bProducts] < 15)
	            {
	                SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 1500;
         		GivePlayerEuro(playerid,-1500);
         		BizzInfo[2][bProducts] -= 15;
	            SendClientMessage(playerid,Weiß,"Die Machine macht klack, und es liegt erfolgreich eine Rüstung im Schacht!");
	            AllowArmour[playerid] = 1;
	            SetPlayerArmour(playerid,100.0);
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	    }
	    return 1;
	}
	if(dialogid == HANDYHELP2)
	{
		if(response == 1)
		{
 			format(string3,sizeof(string3),
			"{FFFFFF}/anrufen -- {C0C0C0}Ruft einen anderen Spieler an.\n{FFFFFF}/sms -- {C0C0C0}Schreibt eine SmS.\n{FFFFFF}/annehmen -- {C0C0C0}Du nimmst einen Anruf an.\n{FFFFFF}/auflegen -- {C0C0C0}Du legst auf.\n{FFFFFF}/klingelton -- {C0C0C0}Klingelton Auswahl.\n{FFFFFF}/handy -- {C0C0C0}Du schaltest dein Handy an/aus.\n{FFFFFF}/akkuladen -- {C0C0C0}Du ladest deinen Akku auf.\n{FFFFFF}/hstats -- {C0C0C0}Ruft die Handy Statistik auf.\n{FFFFFF}/nummer -- {C0C0C0}Telefonbuch.");
			ShowPlayerDialog(playerid,HANDY7,DIALOG_STYLE_MSGBOX,"{FFFF00}Handy Hilfebox",string3,"Weiter","Abbrechen");
	 	}
	 	if(response == 0)
		{
			format(string3,sizeof(string3),
			"{FFFFFF}/anrufen -- {C0C0C0}Ruft einen anderen Spieler an.\n{FFFFFF}/sms -- {C0C0C0}Schreibt eine SmS.\n{FFFFFF}/annehmen -- {C0C0C0}Du nimmst einen Anruf an.\n{FFFFFF}/auflegen -- {C0C0C0}Du legst auf.\n{FFFFFF}/klingelton -- {C0C0C0}Klingelton Auswahl.\n{FFFFFF}/handy -- {C0C0C0}Du schaltest dein Handy an/aus.\n{FFFFFF}/akkuladen -- {C0C0C0}Du ladest deinen Akku auf.\n{FFFFFF}/hstats -- {C0C0C0}Ruft die Handy Statistik auf.\n{FFFFFF}/nummer -- {C0C0C0}Telefonbuch.");
			ShowPlayerDialog(playerid,HANDY7,DIALOG_STYLE_MSGBOX,"{FFFF00}Handy Hilfebox",string3,"Weiter","Abbrechen");
		}
	}
	if(dialogid == HANDY7)
	{
		if(response == 1)
		{
		    format(string3,sizeof(string3),
 			"{FFFFFF}/GPS -- {C0C0C0}GPS Gerät.\n{FFFFFF}/chat -- {C0C0C0}WhatzzApp.\n{FFFFFF}/acceptchatten -- {C0C0C0}Chateinladung annehmen.\n{FFFFFF}/closechat -- {C0C0C0}Aktuelle Chat Verbindung abbrechen.");
			ShowPlayerDialog(playerid,HANDYHELP2,DIALOG_STYLE_MSGBOX,"{FFFF00}Handy Hilfebox",string3,"Zurück","");
		}
	}
	if (dialogid == HANDY6) {
        if(response) {

            switch (listitem) {
                case 0:
                {
                    ClearChat(playerid);
					GetTon(playerid,1);
                }
                case 1:
                {
                    ClearChat(playerid);
					GetTon(playerid,2);
                }
    			case 2:
                {
                    ClearChat(playerid);
					GetTon(playerid,3);
				}
    			case 3:
                {
                    ClearChat(playerid);
					GetTon(playerid,4);
				}
    			case 4:
                {
                    ClearChat(playerid);
					GetTon(playerid,5);
				}
 				case 5:
                {
                    ClearChat(playerid);
					GetTon(playerid,6);
				}
				case 6:
                {
                    ClearChat(playerid);
					GetTon(playerid,7);
				}
            }
        }
        else ShowPlayerDialog(playerid,HANDY1, DIALOG_STYLE_LIST, "Handy Laden", "{00AA00}1.{FFFFFF}Handy kaufen\n{00AA00}2.{FFFFFF}Handy verkaufen\n{00AA00}3.{FFFFFF}Guthaben aufladen\n{00AA00}4.{FFFFFF}Vertrag abschliessen\n{00AA00}5.{FFFFFF}Vertrag kündigen\n{00AA00}6.{FFFFFF}App Downloads", "Auswählen", "Abbrechen");
        return 1;
    }
	if(dialogid == AMMUNATION)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid,AMMUNATIONP, DIALOG_STYLE_LIST, "Welche Pistole möchtest du kaufen?", "{00AA00}9MM{FFFFFF} 600\n{00AA00}Silenced 9mm{FFFFFF} 900\n{00AA00}Deagle{FFFFFF} 1100\n", "Kaufen", "Zurück");
	        }
	        if(listitem == 1)
	        {
	            ShowPlayerDialog(playerid,AMMUNATIONM, DIALOG_STYLE_LIST, "Welche Machinenpistole möchtest du kaufen?", "{00AA00}Micro SMG/Uzi{FFFFFF} 1300\n{00AA00}MP5{FFFFFF} 1500\n{00AA00}Tec-9{FFFFFF} 1700\n", "Kaufen", "Zurück");
	        }
	        if(listitem == 2)
	        {
	            ShowPlayerDialog(playerid,AMMUNATIONG, DIALOG_STYLE_LIST, "Welches Gewehr möchtest du kaufen?", "{00AA00}AK47{FFFFFF} 2800\n{00AA00}M4{FFFFFF} 3000\n{00AA00}Country Rifle{FFFFFF} 3300\n", "Kaufen", "Zurück");
	        }
	        if(listitem == 3)
	        {
	            ShowPlayerDialog(playerid,AMMUNATIONS, DIALOG_STYLE_LIST, "Welche Schrotflinte möchtest du kaufen?", "{00AA00}Shotgun{FFFFFF} 2100\n{00AA00}Sawnoff Shotgun{FFFFFF} 3500\n{00AA00}Combat Shotgun{FFFFFF} 3800\n", "Kaufen", "Zurück");
	        }
	        if(listitem == 4)
	        {
	            ShowPlayerDialog(playerid,AMMUNATIONA, DIALOG_STYLE_LIST, "Welche Ausrüstung möchtest du kaufen?", "{00AA00}Rüstung{FFFFFF} 1500\n", "Kaufen", "Zurück");
	        }
	        if(listitem == 5)
	        {
	       		if(sStats[playerid][sMats] == 0)
				{
				    SendClientMessage(playerid,Rot,"Du hast keine Materialien dabei!");
				    ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
				    return 1;
				}
	 			if(sStats[playerid][sJob] != 8)
				{
				    SendClientMessage(playerid,Rot,"Du bist kein Waffenhändler!");
				    ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
				    return 1;
				}
				new matpreis = sStats[playerid][sMats] * 2;
				if(matpreis > BizzInfo[2][bTill])
				{
				    SendClientMessage(playerid,Rot,"Soviel Geld steht dem Ammunation nicht zur Verfügung!");
				    return 1;
				}
				ClearChat(playerid);
				format(string, sizeof(string), "Du hast dem Ammunation Shop erfolgreich %d Materialien für %d verkauft!", sStats[playerid][sMats],matpreis);
				SendClientMessage(playerid,Weiß,string);
				GivePlayerEuro(playerid,matpreis);
				BizzInfo[2][bTill] -= matpreis;
				BizzInfo[2][bProducts] +=sStats[playerid][sMats];
				sStats[playerid][sMats] = 0;
				PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	        }
	    }
 	}
	if(dialogid == AMMUNATIONP)
	{
 		if(response)
	    {
   			if(BizzInfo[2][bProducts] < 12)
			{
				SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
				ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
				return 1;
			}
	        if(listitem == 0)
	        {
	            if(geld < 600)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONP, DIALOG_STYLE_LIST, "Welche Pistole möchtest du kaufen?", "{00AA00}9MM{FFFFFF} 600\n{00AA00}Silenced 9mm{FFFFFF} 900\n{00AA00}Deagle{FFFFFF} 1100\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 600;
	            GivePlayerEuro(playerid,-600);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,22,80);
	            BizzInfo[2][bProducts] -= 12;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 1)
	        {
	            if(geld < 900)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONP, DIALOG_STYLE_LIST, "Welche Pistole möchtest du kaufen?", "{00AA00}9MM{FFFFFF} 600\n{00AA00}Silenced 9mm{FFFFFF} 900\n{00AA00}Deagle{FFFFFF} 1100\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 900;
	            GivePlayerEuro(playerid,-900);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,23,60);
	            BizzInfo[2][bProducts] -= 12;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 2)
	        {
	            if(geld < 1100)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONP, DIALOG_STYLE_LIST, "Welche Pistole möchtest du kaufen?", "{00AA00}9MM{FFFFFF} 600\n{00AA00}Silenced 9mm{FFFFFF} 900\n{00AA00}Deagle{FFFFFF} 1100\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 1100;
	            GivePlayerEuro(playerid,-1100);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,24,50);
	            BizzInfo[2][bProducts] -= 12;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	 	}
	 	if(response == 0)
	 	{
	 	    ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
	 	}
 	}
 		if(dialogid == AMMUNATIONM)
	{
 		if(response)
	    {
  			if(BizzInfo[2][bProducts] < 12)
			{
				SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
				ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
				return 1;
			}
	        if(listitem == 0)
	        {
	            if(geld < 1300)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONM, DIALOG_STYLE_LIST, "Welche Machinenpistole möchtest du kaufen?", "{00AA00}Micro SMG/Uzi{FFFFFF} 1300\n{00AA00}MP5{FFFFFF} 1500\n{00AA00}Tec-9{FFFFFF} 1700\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 1300;
	            GivePlayerEuro(playerid,-1300);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,28,140);
	            BizzInfo[2][bProducts] -= 12;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 1)
	        {
	            if(geld < 1500)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONM, DIALOG_STYLE_LIST, "Welche Machinenpistole möchtest du kaufen?", "{00AA00}Micro SMG/Uzi{FFFFFF} 1300\n{00AA00}MP5{FFFFFF} 1500\n{00AA00}Tec-9{FFFFFF} 1700\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 1500;
	            GivePlayerEuro(playerid,-1500);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,29,140);
	            BizzInfo[2][bProducts] -= 12;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 2)
	        {
	            if(geld < 1700)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONM, DIALOG_STYLE_LIST, "Welche Machinenpistole möchtest du kaufen?", "{00AA00}Micro SMG/Uzi{FFFFFF} 1300\n{00AA00}MP5{FFFFFF} 1500\n{00AA00}Tec-9{FFFFFF} 1700\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 1700;
	            GivePlayerEuro(playerid,-1700);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,32,160);
	            BizzInfo[2][bProducts] -= 12;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	 	}
	 	if(response == 0)
	 	{
	 	    ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
	 	}
 	}
		if(dialogid == AMMUNATIONG)
	{
 		if(response)
	    {
  			if(BizzInfo[2][bProducts] < 15)
			{
				SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
				ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
				return 1;
			}
	        if(listitem == 0)
	        {
	            if(geld < 2800)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONG, DIALOG_STYLE_LIST, "Welches Gewehr möchtest du kaufen?", "{00AA00}AK47{FFFFFF} 2800\n{00AA00}M4{FFFFFF} 3000\n{00AA00}Country Rifle{FFFFFF} 3300\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 2800;
	            GivePlayerEuro(playerid,-2800);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,30,100);
	            BizzInfo[2][bProducts] -= 15;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 1)
	        {
	            if(geld < 3000)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONG, DIALOG_STYLE_LIST, "Welches Gewehr möchtest du kaufen?", "{00AA00}AK47{FFFFFF} 2800\n{00AA00}M4{FFFFFF} 3000\n{00AA00}Country Rifle{FFFFFF} 3300\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 3000;
	            GivePlayerEuro(playerid,-3000);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,31,100);
	            BizzInfo[2][bProducts] -= 15;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 2)
	        {
	            if(geld < 3300)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONG, DIALOG_STYLE_LIST, "Welches Gewehr möchtest du kaufen?", "{00AA00}AK47{FFFFFF} 2800\n{00AA00}M4{FFFFFF} 3000\n{00AA00}Country Rifle{FFFFFF} 3300\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 3300;
	            GivePlayerEuro(playerid,-3300);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,33,100);
	            BizzInfo[2][bProducts] -= 15;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	 	}
	 	if(response == 0)
	 	{
	 	    ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
	 	}
 	}
		if(dialogid == AMMUNATIONS)
	{
 		if(response)
	    {
  			if(BizzInfo[2][bProducts] < 13)
			{
				SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
				ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
				return 1;
			}
	        if(listitem == 0)
	        {
	            if(geld < 2100)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONS, DIALOG_STYLE_LIST, "Welche Schrotflinte möchtest du kaufen?", "{00AA00}Shotgun{FFFFFF} 2100\n{00AA00}Sawnoff Shotgun{FFFFFF} 3500\n{00AA00}Combat Shotgun{FFFFFF} 3800\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 2100;
	            GivePlayerEuro(playerid,-2100);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,25,70);
	            BizzInfo[2][bProducts] -= 13;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 1)
	        {
	            if(geld < 3500)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONS, DIALOG_STYLE_LIST, "Welche Schrotflinte möchtest du kaufen?", "{00AA00}Shotgun{FFFFFF} 2100\n{00AA00}Sawnoff Shotgun{FFFFFF} 3500\n{00AA00}Combat Shotgun{FFFFFF} 3800\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 3500;
	            GivePlayerEuro(playerid,-3500);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,26,60);
	            BizzInfo[2][bProducts] -= 13;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	        if(listitem == 2)
	        {
	            if(geld < 3800)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONS, DIALOG_STYLE_LIST, "Welche Schrotflinte möchtest du kaufen?", "{00AA00}Shotgun{FFFFFF} 2100\n{00AA00}Sawnoff Shotgun{FFFFFF} 3500\n{00AA00}Combat Shotgun{FFFFFF} 3800\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 3800;
	            GivePlayerEuro(playerid,-3800);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit ihrer neuen Waffe!");
	            GivePlayerWeaponEx(playerid,27,50);
	            BizzInfo[2][bProducts] -= 13;
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	 	}
	 	if(response == 0)
	 	{
	 	    ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
	 	}
 	}
		if(dialogid == AMMUNATIONA)
	{
 		if(response)
	    {
  			if(BizzInfo[2][bProducts] < 16)
			{
				SendClientMessage(playerid,Rot,"Das Waffenlager ist leer!");
				ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
				return 1;
			}
	        if(listitem == 0)
	        {
	            if(geld < 1500)
	            {
	                SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei!");
	                ShowPlayerDialog(playerid,AMMUNATIONA, DIALOG_STYLE_LIST, "Welche Ausrüstung möchtest du kaufen?", "{00AA00}Rüstung{FFFFFF} 1500\n", "Kaufen", "Zurück");
	                return 1;
	            }
	            BizzInfo[2][bTill] += 1500;
	            GivePlayerEuro(playerid,-1500);
	            SendClientMessage(playerid,Weiß,"Danke für ihren Einkauf, und viel Spass mit deiner neuen Ausrüstung!");
	            AllowArmour[playerid] = 1;
	            BizzInfo[2][bProducts] -= 16;
	            SetPlayerArmour(playerid,100.0);
	            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        }
	 	}
	 	if(response == 0)
	 	{
	 	    ShowPlayerDialog(playerid,AMMUNATION, DIALOG_STYLE_LIST, "Ammunation", "{00AA00}1.{FFFFFF}Pistolen\n{00AA00}2.{FFFFFF}Machinenpistolen\n{00AA00}3.{FFFFFF}Gewehre\n{00AA00}4.{FFFFFF}Schrotflinten\n{00AA00}5.{FFFFFF}Sonstiges\n{00AA00}6.{FFFFFF}Materialien verkaufen", "Auswählen", "Abbrechen");
	 	}
 	}
	if(dialogid == WETTEN2)
 	{
 	    if(response)
 	    {
 	        if(listitem == 0)
 	        {
 	            if(geld < 500)
 	            {
 	            SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
 	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
 	            return 1;
			  	}
	 	            GivePlayerEuro(playerid,-500);
	 	            MoneyBet[playerid] = 500;
	 	            BetOnHorse[playerid] = GetPVarInt(playerid, "Pferd");
	                format(string, sizeof(string), "Du hast 500 auf das Pferd mit der Nummer %d gesetzt.",GetPVarInt(playerid, "Pferd"));
	                SendClientMessage(playerid, 0x00FFFFFF, string);
	                SetPVarInt(playerid,"Pferd",0);
			}
   			if(listitem == 1)
 	        {
          		if(geld < 1000)
 	            {
 	            SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
 	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
 	            return 1;
			  	}
          		GivePlayerEuro(playerid,-1000);
 	            MoneyBet[playerid] = 1000;
 	            BetOnHorse[playerid] = GetPVarInt(playerid, "Pferd");
                format(string, sizeof(string), "Du hast 1000 auf das Pferd mit der Nummer %d gesetzt.",GetPVarInt(playerid, "Pferd"));
                SendClientMessage(playerid, 0x00FFFFFF, string);
                SetPVarInt(playerid,"Pferd",0);
			}
   			if(listitem == 2)
 	        {
          		if(geld < 2000)
 	            {
 	            SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
 	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
 	            return 1;
			  	}
        		GivePlayerEuro(playerid,-2000);
 	            MoneyBet[playerid] = 2000;
 	            BetOnHorse[playerid] = GetPVarInt(playerid, "Pferd");
                format(string, sizeof(string), "Du hast 2000 auf das Pferd mit der Nummer %d gesetzt.",GetPVarInt(playerid, "Pferd"));
                SendClientMessage(playerid, 0x00FFFFFF, string);
                SetPVarInt(playerid,"Pferd",0);
			}
   			if(listitem == 3)
 	        {
          		if(geld < 5000)
 	            {
 	            SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
 	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
 	            return 1;
			  	}
        		GivePlayerEuro(playerid,-5000);
 	            MoneyBet[playerid] = 5000;
 	            BetOnHorse[playerid] = GetPVarInt(playerid, "Pferd");
                format(string, sizeof(string), "Du hast 5000 auf das Pferd mit der Nummer %d gesetzt.",GetPVarInt(playerid, "Pferd"));
                SendClientMessage(playerid, 0x00FFFFFF, string);
                SetPVarInt(playerid,"Pferd",0);
			}
   			if(listitem == 4)
 	        {
 	         	            if(geld < 10000)
 	            {
 	            SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
 	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
 	            return 1;
			  	}
        		GivePlayerEuro(playerid,-10000);
 	            MoneyBet[playerid] = 10000;
 	            BetOnHorse[playerid] = GetPVarInt(playerid, "Pferd");
                format(string, sizeof(string), "Du hast 10000 auf das Pferd mit der Nummer %d gesetzt.",GetPVarInt(playerid, "Pferd"));
                SendClientMessage(playerid, 0x00FFFFFF, string);
                SetPVarInt(playerid,"Pferd",0);
			}
   			if(listitem == 5)
 	        {
 	         	            if(geld < 100000)
 	            {
 	            SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei!");
 	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
 	            return 1;
			  	}
        		GivePlayerEuro(playerid,-100000);
 	            MoneyBet[playerid] = 100000;
 	            BetOnHorse[playerid] = GetPVarInt(playerid, "Pferd");
                format(string, sizeof(string), "Du hast 100000 auf das Pferd mit der Nummer %d gesetzt.",GetPVarInt(playerid, "Pferd"));
                SendClientMessage(playerid, 0x00FFFFFF, string);
                SetPVarInt(playerid,"Pferd",0);
			}
	  	}
  	}
	if(dialogid == WETTEN1)
	{
		if(response)
		{
	        if(listitem == 0)
	        {
	            SetPVarInt(playerid,"Pferd",1);
	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
		 	}
    		if(listitem == 1)
	        {
	            SetPVarInt(playerid,"Pferd",2);
	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
		 	}
    		if(listitem == 2)
	        {
	            SetPVarInt(playerid,"Pferd",3);
	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
		 	}
    		if(listitem == 3)
	        {
	            SetPVarInt(playerid,"Pferd",4);
	            ShowPlayerDialog(playerid,WETTEN2, DIALOG_STYLE_LIST, "Wieviel Geld möchtest du setzen?", "{00AA00}500{FFFFFF}\n{00AA00}1000{FFFFFF}\n{00AA00}2000{FFFFFF}\n{00AA00}5000{FFFFFF}\n{00AA00}10000{FFFFFF}\n{00AA00}100000{FFFFFF}\n", "Weiter", "Abbrechen");
		 	}
	    }
	    if(dialogid == 0)
	    {
	        ShowPlayerDialog(playerid,PFERDERENNEN, DIALOG_STYLE_LIST, "Pferderennen Wettbüro", "{00AA00}1.{FFFFFF}Wetten setzen\n{00AA00}2.{FFFFFF}Zuschauen", "Auswählen", "Abbrechen");
	    }
	}
	if(dialogid == PFERDERENNEN)
	{
		if(response)
		{
			if(listitem == 0)
			{
			                                                        if (MoneyBet[playerid] > 0)
                                                        {
                                                                SendClientMessage(playerid, Rot, "Du hast schon auf ein Pferd gewettet, benutze /meinewetten um dies einzusehen!");
                                                                return 1;
                                                        }
			ShowPlayerDialog(playerid,WETTEN1, DIALOG_STYLE_LIST, "Auf welches Pferd möchtest du Wetten?", "{00AA00}1.{FFFFFF}Pferd\n{00AA00}2.{FFFFFF}Pferd\n{00AA00}3.{FFFFFF}Pferd\n{00AA00}4.{FFFFFF}Pferd\n", "Weiter", "Zurück");
			}
			if(listitem == 1)
			{
				if (Prepared == 0 || RaceStarted == 0)
				{
					SendClientMessage(playerid, Rot, "Zurzeit läuft kein Pferderennen. Du kannst aber schonmal Wetten abschließen.");
					ShowPlayerDialog(playerid,PFERDERENNEN, DIALOG_STYLE_LIST, "Pferderennen Wettbüro", "{00AA00}1.{FFFFFF}Wetten setzen\n{00AA00}2.{FFFFFF}Zuschauen", "Auswählen", "Abbrechen");
				    return 1;
				}
				if (Prepared == 1 || RaceStarted == 1)
				{
 					SetPlayerCameraPos(playerid,830.6302,6.3677,1004.1797);
					SetPlayerCameraLookAt(playerid,830.6109,7.4177,1004.1797);
					PlayerTextDrawHide(playerid,Money3[playerid]);
					PlayerTextDrawHide(playerid,Money[playerid]);
					PlayerTextDrawHide(playerid,Money2[playerid]);
		 			TextDrawHideForPlayer(playerid,Ad1);
					TextDrawHideForPlayer(playerid,Ad2);
					TextDrawHideForPlayer(playerid,Clock);
					TextDrawHideForPlayer(playerid, Script1);
					TextDrawHideForPlayer(playerid, Script2);
					TogglePlayerControllable(playerid, false);
					TextDrawShowForPlayer(playerid,BG2);
					TextDrawShowForPlayer(playerid,BG1);
					TextDrawShowForPlayer(playerid,Horse1);
					TextDrawShowForPlayer(playerid,Horse2);
					TextDrawShowForPlayer(playerid,Horse3);
					TextDrawShowForPlayer(playerid,Horse4);
					TextDrawShowForPlayer(playerid,HorseNum1);
					TextDrawShowForPlayer(playerid,HorseNum2);
					TextDrawShowForPlayer(playerid,HorseNum3);
					TextDrawShowForPlayer(playerid,HorseNum4);
					TextDrawShowForPlayer(playerid,Start2);
					TextDrawShowForPlayer(playerid,Finish2);
					TextDrawShowForPlayer(playerid,Start);
					TextDrawShowForPlayer(playerid,Finish);
					Watching[playerid] = 1;
					ClearChat(playerid);
				}
				else
				{
					SendClientMessage(playerid, Rot, "Zurzeit läuft kein Pferderennen. Du kannst aber schonmal Wetten abschließen.");
					ShowPlayerDialog(playerid,PFERDERENNEN, DIALOG_STYLE_LIST, "Pferderennen Wettbüro", "{00AA00}1.{FFFFFF}Wetten setzen\n{00AA00}2.{FFFFFF}Zuschauen", "Auswählen", "Abbrechen");
				}
			}
		}
	}
	if(dialogid == DIALOG_STARTGAMBLE)
	{
		if(response == 1)
		{
			SetPlayerCameraPos(playerid,1988.4127,1010.8826,994.4688);
			SetPlayerCameraLookAt(playerid,1988.5066,1009.1513,994.4688,1);
			SetPlayerVirtualWorld(playerid,2+playerid);
			PutPlayerInSlotMachine(playerid,_,100);
		}
		return 1;
	}
if(dialogid == SUPPORT4)
{
	if(response)
	{
		if(strlen(inputtext) <= 4)
		{
			SendClientMessage(playerid, Rot, "Error : Du musst den Namen des Spielers welchen du als Cheater melden willst in das freie Feld eingeben.");
			ShowPlayerDialog(playerid,SUPPORT4,DIALOG_STYLE_INPUT,"Cheater melden","{FFFFFF}Welchen {FFFF00}Spieler{FFFFFF} möchtest du als Cheater melden?\n{FFFF00}Bitte schreibe den Namen in das frei Feld.","Bestätigen","Zurück");
			return 1;
		}
			format(string,sizeof(string),"{FFFF00}Spieler {FFFFFF}%s{FFFF00} hat den Spieler {FFFFFF}%s{FFFF00} als Cheater gemeldet!",GetName(playerid),inputtext);
			SendAdminMessage(Gelb, string);
			SendAdminMessage(Weiß, "Bitte den gemeldeten Spieler mit /spec überprüfen!");
			SendClientMessage(playerid,Weiß,"Danke für deine Cheatermeldung unsere Administratoren werden sich schnellstmöglich darum kümmern!");
			return 1;
	}
	else
	{
		ShowPlayerDialog(playerid,SUPPORT1,DIALOG_STYLE_LIST,"Support-Zentrale","{C0C0C0}1. {FFFFFF}Allgemeiner Support\n{C0C0C0}2. {FFFFFF}Cheater melden\n{C0C0C0}3. {FFFFFF}Bugs melden\n{C0C0C0}4. {FFFFFF}Es sind keine Zivibikes mehr da","Auswählen","Abbrechen");
		return 1;
	}
}
if(dialogid == SUPPORT3)
{
	if(response == 1)
 	{
		if(strlen(inputtext) <= 4)
		{
			SendClientMessage(playerid, Rot, "Error : Bitte schreibe den Bug den du melden willst in das freie Feld.");
			ShowPlayerDialog(playerid,SUPPORT3,DIALOG_STYLE_INPUT,"Bug melden","{FFFFFF}Welchen {FFFF00}Bug{FFFFFF} möchtest du melden?","Bestätigen","Zurück");
			return 1;
		}
			format(string,sizeof(string),"{FFFF00}Spieler {FFFFFF}%s{FFFF00} hat einen neuen Bug gemeldet: {FFFFFF}%s{FFFF00}!",GetName(playerid),inputtext);
			SendAdminMessage(Gelb, string);
			SendAdminMessage(Weiß, "Diesen Bug (Sofern es ein Bug ist) an unsere Projektleiter Nemesus & sHoOTi weiterleiten!");
			SendClientMessage(playerid,Weiß,"Danke für deine Bugmeldung unsere Administratoren werden sich schnellstmöglich darum kümmern!");
			return 1;
	}
	else
	{
		ShowPlayerDialog(playerid,SUPPORT1,DIALOG_STYLE_LIST,"Support-Zentrale","{C0C0C0}1. {FFFFFF}Allgemeiner Support\n{C0C0C0}2. {FFFFFF}Cheater melden\n{C0C0C0}3. {FFFFFF}Bugs melden\n{C0C0C0}4. {FFFFFF}Es sind keine Zivibikes mehr da","Auswählen","Abbrechen");
		return 1;
	}
}

if(dialogid == SUPPORT2)
{
	if(response == 1)
	{
		if(strlen(inputtext) == 0)
		{
			SendClientMessage(playerid, Rot, "Du kannst kein leeres Support-Ticket losschicken!");
			ShowPlayerDialog(playerid,SUPPORT2,DIALOG_STYLE_INPUT,"Support-Ticket","{FFFFFF}Bitte schreibe dein/e {FFFF00}Anliegen/Frage{FFFFFF} in das freie Feld.","Bestätigen","Zurück");
			return 1;
		}
		if(strlen(inputtext) > 126)
		{
			SendClientMessage(playerid, Rot, "Deine Support Nachricht ist zu lang, bitte kürze diese!");
			ShowPlayerDialog(playerid,SUPPORT2,DIALOG_STYLE_INPUT,"Support-Ticket","{FFFFFF}Bitte schreibe dein/e {FFFF00}Anliegen/Frage{FFFFFF} in das freie Feld.","Bestätigen","Zurück");
			return 1;
		}
		    new count=0;
		    SetPVarInt(playerid, "Supportt", 1);
 			for(new i = 0; i < MAX_PLAYERS; i++)
 			{
				if(IsPlayerConnected(i) && sStats[i][sAdminlevel] == 0 && GetPVarInt(i, "Supportt") == 1)
				{
				    count ++;
				}
			}
			format(sTicket[playerid],128,inputtext);
			SetPVarInt(playerid,"Cooldown3",gettime()+(60*2));
			format(string, sizeof(string), "Offene Tickets = %d", count);
			TextDrawSetString(OTickets, string);
			format(string,sizeof(string),"{FF4C4C}%s(ID:%d) {FFFF00}hat ein Support-Ticket eröffnet. {FF4C4C}Text: %s",GetName(playerid),playerid,inputtext);
			SendAdminMessage(Gelb, string);
			SendAdminMessage(Weiß, "{FFFF00}Benutze : {FF4C4C}/acceptsupport {FFFF00}um das Ticket bearbeiten zu können oder {FF4C4C}/deletesupport {FFFF00}um es zu löschen.");
			SendClientMessage(playerid,Gelb,"{FFFF00}Dein Support-Ticket wurde erfolgreich an die Administratoren gesendet.");
			return 1;
	}
	else
	{
		ShowPlayerDialog(playerid,SUPPORT1,DIALOG_STYLE_LIST,"Support-Zentrale","{C0C0C0}1. {FFFFFF}Allgemeiner Support\n{C0C0C0}2. {FFFFFF}Cheater melden\n{C0C0C0}3. {FFFFFF}Bugs melden\n{C0C0C0}4. {FFFFFF}Es sind keine Zivibikes mehr da","Auswählen","Abbrechen");
		SetPVarInt(playerid,"Supportt",0);
		SetPVarInt(playerid,"Support1",0);
		return 1;
	}
}

if(dialogid == SUPPORT1)
{
	if(response == 1)
	{
		if(listitem == 0)
		{
			if(GetPVarInt(playerid, "Support") == 1)
			{
				SendClientMessage(playerid, Rot, "Du kannst kein neues Support-Ticket eröffnen, wenn noch eins von dir bearbeitet wird.");
				return 1;
			}
				ShowPlayerDialog(playerid,SUPPORT2,DIALOG_STYLE_INPUT,"Support-Ticket","{FFFFFF}Bitte schreibe dein/e {FFFF00}Anliegen/Frage{FFFFFF} in das freie Feld.","Bestätigen","Zurück");
				return 1;
   			}
		}
			if(listitem == 1)
			{
			    ShowPlayerDialog(playerid,SUPPORT4,DIALOG_STYLE_INPUT,"Cheater melden","{FFFFFF}Welchen {FFFF00}Spieler{FFFFFF} möchtest du als Cheater melden?\n{FFFF00}Bitte schreibe den Namen in das freie Feld.","Bestätigen","Zurück");
				return 1;
			}
			if(listitem == 2)
			{
				if(sStats[playerid][sLevel] > 1)
				{
					SendClientMessage(playerid,Rot,"Du kannst dieses Support Thema nicht benutzen!");
					return 1;
				}
				if(BikesR == 1)
				{
					SendClientMessage(playerid,Rot,"Die Fahrräder müssen gerade nicht respawnt werden!");
					ShowPlayerDialog(playerid,SUPPORT1,DIALOG_STYLE_LIST,"Support-Zentrale","{C0C0C0}1. {FFFFFF}Allgemeiner Support\n{C0C0C0}2. {FFFFFF}Cheater melden\n{C0C0C0}3. {FFFFFF}Bugs melden\n{C0C0C0}4. {FFFFFF}Es sind keine Zivibikes mehr da","Auswählen","Abbrechen");
					return 1;
				}
				BikesR = 1;
				SetTimer("BikesRespawn", 1800215, false);
				SendClientMessage(playerid,Gelb,"Deine Anfrage wird in kürze vom Server bearbeitet!");
				RespawnZiviBikes();
				return 1;
			}
}
	if (dialogid == HANDY5) {
		if(response) {

			switch (listitem) {
				case 0:
				{
					if(geld < 500)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (500)!");
						return 1;
					}
					if(sStats[playerid][sAkku] == 0)
					return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
					if(sStats[playerid][sGPS] > 0)
					return SendClientMessage(playerid, Rot, "Du hast schon das GPS App!");

					SendClientMessage(playerid,Weiß,"Bitte warten Sie kurz, das GPS App wird auf ihr Handy übertragen!");
					SendClientMessage(playerid,Gelb,"Voraussichtliche Downloadzeit : 10 Sekunden!");
					SetTimerEx("GetGps", 11329, false, "d", playerid);
					TogglePlayerControllable(playerid, false);
					GivePlayerEuro(playerid,-500);
					sStats[playerid][sGPS] = 0;
					BizzInfo[6][bTill] += 500;
					BizzInfo[6][bProducts] -= 13;
				}
				case 1:
				{
					if(geld < 300)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genung Geld dabei (300)!");
						return 1;
					}
					if(sStats[playerid][sAkku] == 0)
					return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
					if(sStats[playerid][sWA] > 0)
					return SendClientMessage(playerid, Rot, "Du hast schon die WhatzzApp App!");

					SendClientMessage(playerid,Weiß,"Bitte warten Sie kurz, das WhatzzApp App wird auf ihr Handy übertragen!");
					SendClientMessage(playerid,Gelb,"Voraussichtliche Downloadzeit : 15 Sekunden!");
					SetTimerEx("GetWA", 15217, false, "d", playerid);
					TogglePlayerControllable(playerid, false);
					sStats[playerid][sWA] = 0;
					GivePlayerEuro(playerid,-300);
					BizzInfo[6][bTill] += 300;
					BizzInfo[6][bProducts] -= 13;
				}
			}
		}
		else ShowPlayerDialog(playerid,HANDY1, DIALOG_STYLE_LIST, "Handy Laden", "{00AA00}1.{FFFFFF}Handy kaufen\n{00AA00}2.{FFFFFF}Handy verkaufen\n{00AA00}3.{FFFFFF}Guthaben aufladen\n{00AA00}4.{FFFFFF}Vertrag abschliessen\n{00AA00}5.{FFFFFF}Vertrag kündigen\n{00AA00}6.{FFFFFF}App Downloads", "Weiter", "Abbrechen");
		return 1;
	}
	if(dialogid == HANDY4) {
		if(response) {
			GivePlayerEuro(playerid,-1);
			ClearChat(playerid);
			SendClientMessage(playerid,Weiß,"Du hast erfolgreich einen Vertrag für 500 pro Zahltag abgeschlossen!");
			SendClientMessage(playerid,Gelb,"Du kannst nun kostenlos telefonieren und SMS´s schreiben!");
			PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
			sStats[playerid][sGuthaben] = 0;
			sStats[playerid][sVertrag] = 1;
		}
		else {
			ShowPlayerDialog(playerid,HANDY1, DIALOG_STYLE_LIST, "Handy Laden", "{00AA00}1.{FFFFFF}Handy kaufen\n{00AA00}2.{FFFFFF}Handy verkaufen\n{00AA00}3.{FFFFFF}Guthaben aufladen\n{00AA00}4.{FFFFFF}Vertrag abschliessen\n{00AA00}5.{FFFFFF}Vertrag kündigen\n{00AA00}6.{FFFFFF}App Downloads", "Weiter", "Abbrechen");
		}
	}
	if (dialogid == HANDY3) {
		if(response) {

			switch (listitem) {
				case 0:
				{
					if(geld < 10)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um dein Handy Guthaben aufzuladen (10)!");
						return 1;
					}
					GivePlayerEuro(playerid, -10);
					sStats[playerid][sGuthaben] += 10;
					BizzInfo[6][bTill] += 10;
					BizzInfo[6][bProducts] -= 11;
					ClearChat(playerid);
					SendClientMessage(playerid,Weiß,"Du hast dein Handy Guthaben erfolgreich mit 10 aufgeladen!");
					PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				}
				case 1:
				{
					if(geld < 25)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um dein Handy Guthaben aufzuladen (25)!");
						return 1;
					}
					GivePlayerEuro(playerid, -25);
					sStats[playerid][sGuthaben] += 25;
					BizzInfo[6][bTill] += 25;
					BizzInfo[6][bProducts] -= 12;
					ClearChat(playerid);
					SendClientMessage(playerid,Weiß,"Du hast dein Handy Guthaben erfolgreich mit 25 aufgeladen!");
					PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				}
				case 2:
				{
					if(geld < 50)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um dein Handy Guthaben aufzuladen (50)!");
						return 1;
					}
					GivePlayerEuro(playerid, -50);
					sStats[playerid][sGuthaben] += 50;
					BizzInfo[6][bTill] += 50;
					BizzInfo[6][bProducts] -= 15;
					ClearChat(playerid);
					SendClientMessage(playerid,Weiß,"Du hast dein Handy Guthaben erfolgreich mit 50 aufgeladen!");
					PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				}
				case 3:
				{
					if(geld < 100)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genug Geld um dein Handy Guthaben aufzuladen (100)!");
						return 1;
					}
					GivePlayerEuro(playerid, -100);
					sStats[playerid][sGuthaben] += 100;
					BizzInfo[6][bTill] += 100;
					BizzInfo[6][bProducts] -= 10;
					ClearChat(playerid);
					SendClientMessage(playerid,Weiß,"Du hast dein Handy Guthaben erfolgreich mit 100 aufgeladen!");
					PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
				}
			}
		}
		else ShowPlayerDialog(playerid,HANDY1, DIALOG_STYLE_LIST, "Handy Laden", "{00AA00}1.{FFFFFF}Handy kaufen\n{00AA00}2.{FFFFFF}Handy verkaufen\n{00AA00}3.{FFFFFF}Guthaben aufladen\n{00AA00}4.{FFFFFF}Vertrag abschliessen\n{00AA00}5.{FFFFFF}Vertrag kündigen\n{00AA00}6.{FFFFFF}App Downloads", "Weiter", "Abbrechen");
		return 1;
	}
	if (dialogid == HANDY2) {
		if(response) {

			switch (listitem) {
				case 0:
				{
					ClearChat(playerid);
					BuyHandy(playerid,1);
				}
				case 1:
				{
					ClearChat(playerid);
					BuyHandy(playerid,2);
				}
				case 2:
				{
					ClearChat(playerid);
					BuyHandy(playerid,3);
				}
				case 3:
				{
					ClearChat(playerid);
					BuyHandy(playerid,4);
				}
				case 4:
				{
					ClearChat(playerid);
					BuyHandy(playerid,5);
				}
				case 5:
				{
					ClearChat(playerid);
					BuyHandy(playerid,6);
				}
				case 6:
				{
					ClearChat(playerid);
					BuyHandy(playerid,7);
				}
			}
		}
		else ShowPlayerDialog(playerid,HANDY1, DIALOG_STYLE_LIST, "Handy Laden", "{00AA00}1.{FFFFFF}Handy kaufen\n{00AA00}2.{FFFFFF}Handy verkaufen\n{00AA00}3.{FFFFFF}Guthaben aufladen\n{00AA00}4.{FFFFFF}Vertrag abschliessen\n{00AA00}5.{FFFFFF}Vertrag kündigen\n{00AA00}6.{FFFFFF}App Downloads", "Weiter", "Abbrechen");
		return 1;
	}
	if (dialogid == HANDY1) {
		if(response) {

			switch (listitem) {
				case 0:
				{
					if(geld < 1)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld um dir ein Handy zu kaufen!");
						return 1;
					}
					if(sStats[playerid][sHandy] > 0)
					return SendClientMessage(playerid, Rot, "Du hast schon ein Handy bitte verkaufe dieses zuerst!");
					if(sStats[playerid][sPersonalausweis] < 1)
					return SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um ein Handy kaufen zu können!");
					ShowPlayerDialog(playerid,HANDY2, DIALOG_STYLE_LIST, "Handy kaufen", "{FFFFFF}Nokia 3330\n{FFFFFF}Nokia 6500\n{FFFFFF}Nokia N95\n{FFFFFF}Sony Ericsson C905\n{FFFFFF}Motorola Q9h\n{FFFFFF}Samsung Galaxy S3\n{FFFFFF}iPhone", "Kaufen", "Zurück");
				}
				case 1:
				{
					if(sStats[playerid][sHandy] < 1)
					return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
					if(sStats[playerid][sVertrag] > 0)
					return SendClientMessage(playerid, Rot, "Du hast einen Vertrag du kannst dein Handy nicht mit Geld aufladen!");
					if(BizzInfo[6][bTill] < 1000)
 					return SendClientMessage(playerid,Rot,"Der Handyladen hat nicht genug Geld um dir dein Handy abzukaufen!");

					ClearChat(playerid);
					SellHandy(playerid,sStats[playerid][sHandy]);
					sStats[playerid][sGuthaben] = 0;
					sStats[playerid][sAkku] = 0;
				}
				case 2:
				{
					if(geld < 1)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei um dein Guthaben aufladen zu können!");
						return 1;
					}
					if(sStats[playerid][sHandy] < 1)
					return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
					if(sStats[playerid][sVertrag] > 0)
					return SendClientMessage(playerid, Rot, "Du hast einen Vertrag du kannst dein Handy nicht mit Geld aufladen!");
					ShowPlayerDialog(playerid,HANDY3, DIALOG_STYLE_LIST, "Guthaben aufladen", "{FFFFFF}10\n{FFFFFF}25\n{FFFFFF}50\n{FFFFFF}100\n", "Aufladen", "Zurück");
				}
				case 3:
				{
					if(geld < 2)
					{
						SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei um einen Vertrag abschliessen zu können!");
						return 1;
					}
					if(sStats[playerid][sHandy] < 1)
					return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
					if(sStats[playerid][sVertrag] > 0)
					return SendClientMessage(playerid, Rot, "Du hast schon einen Vertrag!");
					if(sStats[playerid][sPersonalausweis] < 1)
					return SendClientMessage(playerid, Rot, "Du benötigst einen Personalausweis um einen Vertrag abschliessen zu können!");

					ShowPlayerDialog(playerid,HANDY4,DIALOG_STYLE_MSGBOX,"Vertragsvereinbarung Handy","{FFFFFF}Möchtest du einen Vertrag für {FFFF00}500{FFFFFF} pro Zahltag abschliessen?","Ja","Nein");
				}
				case 4:
				{
					if(sStats[playerid][sHandy] < 1)
					return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
					if(sStats[playerid][sVertrag] < 1)
					return SendClientMessage(playerid, Rot, "Du hast keinen Vertrag!");

					GivePlayerEuro(playerid,1);
					ClearChat(playerid);
					SendClientMessage(playerid, Gruen, "Du hast deinen Vertrag erfolgreich gekündigt!");
					sStats[playerid][sGuthaben] = 0;
					sStats[playerid][sVertrag] = 0;
				}
				case 5:
				{
					if(sStats[playerid][sHandy] < 1)
					return SendClientMessage(playerid, Rot, "Du hast kein Handy!");
					if(sStats[playerid][sAkku] < 1)
					return SendClientMessage(playerid, Rot, "Dein Handy Akku ist leer!");
					ClearChat(playerid);
					ShowPlayerDialog(playerid,HANDY5, DIALOG_STYLE_LIST, "Apps downloaden", "{FFFFFF}GPS App {FFFF00}(500)\n{FFFFFF}WhatzzApp {FFFF00}(300)", "Downloaden", "Zurück");

				}
			}
		}
		return 1;
	}
	if(dialogid == KLEIDUNG3)
	{
		if(response == 0)
		{
			if(sStats[playerid][sGeschlecht] == 1)
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerPosEx(playerid,207.6685,-100.3283,1005.2578);
				SetPlayerFacingAngle(playerid,357.0879);
				SetPlayerSkin(playerid,sStats[playerid][sSkin]);
				ShowPlayerDialog(playerid,KLEIDUNG1,DIALOG_STYLE_LIST,"Kleidungsladen für Männer","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7\nSkin 8\n","Anprobieren","Abbrechen");
				return 1;
			}
			if(sStats[playerid][sGeschlecht] == 2)
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerPosEx(playerid,207.6685,-100.3283,1005.2578);
				SetPlayerFacingAngle(playerid,357.0879);
				SetPlayerSkin(playerid,sStats[playerid][sSkin]);
				ShowPlayerDialog(playerid,KLEIDUNG2,DIALOG_STYLE_LIST,"Kleidungsladen für Frauen","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7\nSkin 8\n","Anprobieren","Abbrechen");
				return 1;
			}
			SetPlayerVirtualWorld(playerid,0);
			return 1;
		}
		if(response == 1)
		{
			if(geld < 100)
			{
				SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (100)!");
				if(sStats[playerid][sGeschlecht] == 1)
				{
					SetCameraBehindPlayer(playerid);
					SetPlayerPosEx(playerid,207.6685,-100.3283,1005.2578);
					SetPlayerFacingAngle(playerid,357.0879);
					SetPlayerSkin(playerid,sStats[playerid][sSkin]);
					ShowPlayerDialog(playerid,KLEIDUNG1,DIALOG_STYLE_LIST,"Kleidungsladen für Männer","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7\nSkin 8\n","Anprobieren","Abbrechen");
					return 1;
				}
				if(sStats[playerid][sGeschlecht] == 2)
				{
					SetCameraBehindPlayer(playerid);
					SetPlayerPosEx(playerid,207.6685,-100.3283,1005.2578);
					SetPlayerFacingAngle(playerid,357.0879);
					SetPlayerSkin(playerid,sStats[playerid][sSkin]);
					ShowPlayerDialog(playerid,KLEIDUNG2,DIALOG_STYLE_LIST,"Kleidungsladen für Frauen","Skin 1\nSkin 2\nSkin 3\nSkin 4\nSkin 5\nSkin 6\nSkin 7\nSkin 8\n","Anprobieren","Abbrechen");
					return 1;
				}
				return 1;
			}
			sStats[playerid][sSkin] = GetPlayerSkin(playerid);
			GivePlayerEuro(playerid,-100);
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerPosEx(playerid,207.5476,-103.8813,1005.2578);
			SetPlayerFacingAngle(playerid,1.8113);
			SendClientMessage(playerid,Gelb,"Danke für ihren Einkauf, beehren Sie uns bald wieder!");
			PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
			if(sStats[playerid][sQuest] == 999 && sStats[playerid][sPersonalausweis] == 0)
			{
			    ClearChat(playerid);
			    SendClientMessage(playerid,Gelb,"Verkäuferin: Du bist doch von Jack oder?");
			    SendClientMessage(playerid,Weiß,"Du solltest dir schnellstens einen Personalausweis im Rathaus holen gehen, den ohne diesen geht hier garnichts!");
			    SendClientMessage(playerid,Weiß,"Einfach die Straße runter, Richtung BSPD (Polizei) da ist direkt das Rathaus nicht zu übersehen.");
			    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Jack sagte mir auch du solltest dir nach dem Personalausweis ein Handy anschaffen, er will sich mit dir in Kontakt setzen können.");
			    SendClientMessage(playerid,COLOR_LIGHTRED,"Tschau und schönen Tag noch..");
   			}
			return 1;
		}
		return 1;
	}
	if(dialogid == KLEIDUNG1)
	{
		if(response == 0)
		{
		    SetPlayerVirtualWorld(playerid,0);
		    return 1;
		}
		if(response == 1)
		{
			if(listitem == 0)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,	19);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 1)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,2);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 2)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,7);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 3)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,21);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 4)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,23);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 5)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,47);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 6)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,60);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 7)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,96);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
		}
		return 1;
	}
	if(dialogid == KLEIDUNG2)
	{
		if(response == 0)
		{
		    SetPlayerVirtualWorld(playerid,0);
		    return 1;
		}
		if(response == 1)
		{
			if(listitem == 0)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,	12);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 1)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,41);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 2)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,55);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 3)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,56);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 4)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,93);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 5)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,151);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 6)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,190);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
			if(listitem == 7)
			{
				SetPlayerCameraPos(playerid,214.2673,-98.6481,1005.2578);
				SetPlayerCameraLookAt(playerid,215.6796,-98.5979,1005.2578);
				SetPlayerPosEx(playerid,217.2196,-98.6188,1005.2578);
				SetPlayerFacingAngle(playerid,267.1836);
				SetPlayerSkin(playerid,193);
				SetPlayerVirtualWorld(playerid,playerid+1);
				ShowPlayerDialog(playerid,KLEIDUNG3,DIALOG_STYLE_MSGBOX,"Kleidung kaufen?","{FFFFFF}Möchtest du dieses {FF9600}Kleidungsset {FFFFFF}für 100 kaufen?","Ja","Nein");
				return 1;
			}
		}
		return 1;
	}
	if(dialogid == FAHRZEUG)
	{
		if(response == 1)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid,FAHRZEUG2,DIALOG_STYLE_LIST,"Neues Haus-Fahrzeug kaufen","Normale Fahrzeuge\nPremium Fahrzeuge","Auswählen","Zurück");
			}
			if(listitem == 1)
			{
				ShowPlayerDialog(playerid,FAHRZEUG3,DIALOG_STYLE_LIST,"Neues Haus-Fahrzeug tunen","Nitro einbauen","Auswählen","Zurück");
			}
		}
	}
	if(dialogid == FAHRZEUG2)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
		}
		if(response == 1)
		{
			if(listitem == 0)
			{
				SendClientMessage(playerid,Gruen,"Jedes Normales Haus-Fahrzeug kostet 100.000!");
				ShowPlayerDialog(playerid,FAHRZEUG4,DIALOG_STYLE_LIST,"Neues Normales Haus-Fahrzeug kaufen","Blistacompact\nClover\nElegant\nLandstalker\nUranus\nWindsor\nPCJ-600\nBF-400","Kaufen","Zurück");
			}
			if(listitem == 1)
			{
				if(sStats[playerid][sPremium] < 1)
				{
					ShowPlayerDialog(playerid,FAHRZEUG2,DIALOG_STYLE_LIST,"Neues Haus-Fahrzeug kaufen","Normale Fahrzeuge\nPremium Fahrzeuge","Auswählen","Zurück");
					SendClientMessage(playerid,Rot,"Du besitzt keinen Premium Account!");
					return 1;
				}
				SendClientMessage(playerid,Gruen,"Jedes Premium Haus-Fahrzeug kostet 300.000!");
				ShowPlayerDialog(playerid,FAHRZEUG5,DIALOG_STYLE_LIST,"Neues Premium Haus-Fahrzeug kaufen","Stretch-Limosine\nElegy\nBandito\nSultan\nInfernus\nCheetah\nBanshee\nNRG-500\nQuad","Kaufen","Zurück");
			}
		}
	}
	if(dialogid == FAHRZEUG3)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
		}
		if(response == 1)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid,FAHRZEUG6,DIALOG_STYLE_LIST,"Nitro einbauen","{FFFFFF}1x Nitro - {FFFF00}1000\n{FFFFFF}5x Nitro - {FFFF00}5000\n{FFFFFF}10x Nitro - {FFFF00}10000","Einbauen","Zurück");
			}
		}
	}
	if(dialogid == FAHRZEUG6)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,FAHRZEUG6,DIALOG_STYLE_LIST,"Nitro einbauen","{FFFFFF}1x Nitro - {FFFF00}1000\n{FFFFFF}5x Nitro - {FFFF00}5000\n{FFFFFF}10x Nitro - {FFFF00}10000","Einbauen","Zurück");
		}
		if(response == 1)
		{
			if(CompatibleWithNitro(HouseInfo[house][hVec]))
			{
				if(listitem == 0)
				{
					if(geld < 1000)
					{
						ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
						SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (1.000) !");
						return 1;
					}
					if(HouseInfo[house][hNitro] == 1)
					{
						ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
						SendClientMessage(playerid,Rot,"Dein Hausfahrzeug hat schon die 1x Nitroeinspritzung!");
						return 1;
					}
					SendClientMessage(playerid,Weiß,"Die 1x Nitroeinspritzungen wird in kürze vorgenommen!");
					GivePlayerEuro(playerid,-1000);
					HouseInfo[house][hNitro] = 1;
				}
				if(listitem == 1)
				{
					if(geld < 5000)
					{
						ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
						SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (5.000) !");
						return 1;
					}
					if(HouseInfo[house][hNitro] == 2)
					{
						ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
						SendClientMessage(playerid,Rot,"Dein Hausfahrzeug hat schon die 5x Nitroeinspritzung!");
						return 1;
					}
					SendClientMessage(playerid,Weiß,"Die 5x Nitroeinspritzungen wird in kürze vorgenommen!");
					GivePlayerEuro(playerid,-5000);
					HouseInfo[house][hNitro] = 2;
				}
				if(listitem == 2)
				{
					if(geld < 10000)
					{
						ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
						SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (10.000) !");
						return 1;
					}
					if(HouseInfo[house][hNitro] == 3)
					{
						ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
						SendClientMessage(playerid,Rot,"Dein Hausfahrzeug hat schon die 10x Nitroeinspritzung!");
						return 1;
					}
					SendClientMessage(playerid,Weiß,"Die 10x Nitroeinspritzungen wird in kürze vorgenommen!");
					GivePlayerEuro(playerid,-10000);
					HouseInfo[house][hNitro] = 3;
				}
			}
			else
			{
				ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
				SendClientMessage(playerid,Rot,"Dein Hausfahrzeug ist nicht mit Nitro kompatibel!");
				return 1;
			}
		}
	}
	if(dialogid == FAHRZEUG4)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
		}
		if(response == 1)
		{
			if(geld < 100000)
			{
				ShowPlayerDialog(playerid,FAHRZEUG4,DIALOG_STYLE_LIST,"Neues Normales Haus-Fahrzeug kaufen","Blistacompact\nClover\nElegant\nLandstalker\nUranus\nWindsor\nPCJ-600\nBF-400","Kaufen","Zurück");
				SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (100.000) !");
				return 1;
			}
			if(listitem == 0)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Blista Compact.");
				HouseInfo[house][hVec] = 496;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-100000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 1)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Clover.");
				HouseInfo[house][hVec] = 542;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-100000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 2)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Elegant.");
				HouseInfo[house][hVec] = 507;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-100000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 3)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Landstalker.");
				HouseInfo[house][hVec] = 400;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-100000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 4)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Uranus.");
				HouseInfo[house][hVec] = 558;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-100000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 5)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Windsor.");
				HouseInfo[house][hVec] = 555;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-100000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 6)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun eine {F7F700}PCJ-600.");
				HouseInfo[house][hVec] = 558;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-100000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 7)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun eine {F7F700}BF-400.");
				HouseInfo[house][hVec] = 581;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-100000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
		}
	}
	if(dialogid == FAHRZEUG5)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,FAHRZEUG,DIALOG_STYLE_LIST, "Haus-Fahrzeug aufrüsten", "Neues Fahrzeug kaufen\nFahrzeug tunen", "Auswählen", "Abbrechen");
		}
		if(response == 1)
		{
			if(geld < 300000)
			{
				ShowPlayerDialog(playerid,FAHRZEUG5,DIALOG_STYLE_LIST,"Neues Premium Haus-Fahrzeug kaufen","Stretch-Limosine\nElegy\nBandito\nSultan\nInfernus\nCheetah\nBanshee\nNRG-500\nQuad","Kaufen","Zurück");
				SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld dabei (300.000) !");
				return 1;
			}
			if(sStats[playerid][sPremium] < 1)
			{
				ShowPlayerDialog(playerid,FAHRZEUG2,DIALOG_STYLE_LIST,"Neues Haus-Fahrzeug kaufen","Normale Fahrzeuge\nPremium Fahrzeuge","Auswählen","Zurück");
				SendClientMessage(playerid,Rot,"Du besitzt keinen Premium Account!");
				return 1;
			}
			if(listitem == 0)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Stretch-Limosine.");
				HouseInfo[house][hVec] = 409;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 1)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Elegy.");
				HouseInfo[house][hVec] = 562;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 2)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Bandito.");
				HouseInfo[house][hVec] = 568;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 3)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Sultan.");
				HouseInfo[house][hVec] = 560;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 4)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Infernus.");
				HouseInfo[house][hVec] = 411;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 5)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun ein {F7F700}Cheetah.");
				HouseInfo[house][hVec] = 415;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 6)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun eine {F7F700}Banshee.");
				HouseInfo[house][hVec] = 429;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 7)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun eine {F7F700}NRG-500.");
				HouseInfo[house][hVec] = 522;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
			if(listitem == 8)
			{
				SendClientMessage(playerid, Gelb, "{F7F700}Haus-Fahrzeug Upgrade: {E0E0E0}Dein Hausfahrzeug ist nun eine {F7F700}Freeway.");
				HouseInfo[house][hVec] = 463;
				DestroyVehicle(HouseInfo[house][hCID]);
				HouseInfo[sStats[playerid][sHaus]][hCID] = CreateServerVehicle(0,HouseInfo[house][hVec], HouseInfo[sStats[playerid][sHaus]][hCarSpawnX], HouseInfo[sStats[playerid][sHaus]][hCarSpawnY], HouseInfo[sStats[playerid][sHaus]][hCarSpawnZ], HouseInfo[sStats[playerid][sHaus]][hCarSpawnRot], HouseInfo[sStats[playerid][sHaus]][hVcol1], HouseInfo[sStats[playerid][sHaus]][hVcol2], sStats[playerid][sHaus]+200);
				GivePlayerEuro(playerid,-200000);
				SetVehicleNumberPlate(HouseInfo[sStats[playerid][sHaus]][hCID], HouseInfo[sStats[playerid][sHaus]][hOwner]);
			}
		}
	}
	if(dialogid == PERSO1) {
		if(response) {
			if(GetPlayerEuros(playerid) <= 500) {
				SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei (500)!");
				return 1;
			}
			if(sStats[playerid][sPersonalausweis] > 0) {
				SendClientMessage(playerid,Rot,"Tut mir leid, du hast schon einen Personalausweis!");
				return 1;
			}
			ClearChat(playerid);
			TogglePlayerControllable(playerid, false);
			SetPlayerPosEx(playerid,355.5017,211.9204,1008.3828);
			SetPlayerFacingAngle(playerid,183.5683);
			SetPlayerCameraPos(playerid,355.6645,205.8404,1008.3828);
			SetPlayerCameraLookAt(playerid,355.7407,207.2040,1008.3828);
			SetPlayerVirtualWorld(playerid, 1+playerid);
			GivePlayerEuro(playerid, -500);
			Staatskasse += 500;
			new gtext[20];
			new persostring[285];
			//Geschlecht
			if(sStats[playerid][sGeschlecht] == 1) { gtext = "Männlich"; }
			else if(sStats[playerid][sGeschlecht] == 2) { gtext = "Weiblich"; }
			format(persostring,sizeof(persostring),"{C0C0C0}Dein Personalausweis :\n\n{C0C0C0}Name : {FFF2F2}%s\n{C0C0C0}Alter : {FFF2F2}%d\n{C0C0C0}Geschlecht : {FFF2F2}%s\n{C0C0C0}Staatszugehörigkeit : {FFF2F2}Bayside\n{C0C0C0}Job : {FFF2F2}%s\n{C0C0C0}Fraktion : {FFF2F2}%s\n\n{C0C0C0}Sind diese Daten korrekt?",GetName(playerid),sStats[playerid][sAlter],gtext,GetPlayerJob(playerid),GetPlayerFraktion(playerid));
			ShowPlayerDialog(playerid,PERSO4,DIALOG_STYLE_MSGBOX,"Personalausweis beantragen",persostring,"Bestätigen","");
		}
		else {
			GivePlayerEuro(playerid, 500);
			SendClientMessage(playerid, Rot, "Ein Tipp von mir : Ohne Personalausweis geht hier im Dorf nix.");
		}
	}
	if(dialogid == PERSO4) {
		if(response == 0)
		{
			new gtext[20];
			new persostring[280];
			//Geschlecht
			if(sStats[playerid][sGeschlecht] == 1) { gtext = "Männlich"; }
			else if(sStats[playerid][sGeschlecht] == 2) { gtext = "Weiblich"; }
			format(persostring,sizeof(persostring),"{C0C0C0}Dein Personalausweis :\n\n{C0C0C0}Name : {FFF2F2}%s\n{C0C0C0}Alter : {FFF2F2}%d\n{C0C0C0}Geschlecht : {FFF2F2}%s\n{C0C0C0}Staatszugehörigkeit : {FFF2F2}Bayside\n{C0C0C0}Job : {FFF2F2}%s\n{C0C0C0}Fraktion : {FFF2F2}%s\n\n{C0C0C0}Sind diese Daten korrekt?",GetName(playerid),sStats[playerid][sAlter],gtext,GetPlayerJob(playerid),GetPlayerFraktion(playerid));
			ShowPlayerDialog(playerid,PERSO4,DIALOG_STYLE_MSGBOX,"Personalausweis beantragen",persostring,"Bestätigen","");
		}
		if(response) {
			sStats[playerid][sPersonalausweis] = 1;
			SetPlayerVirtualWorld(playerid, 0);
			TogglePlayerControllable(playerid, true);
			SetPlayerPosEx(playerid,359.1841,211.5167,1008.3828);
			SetPlayerFacingAngle(playerid,180.3031);
			SetCameraBehindPlayer(playerid);
			SendClientMessage(playerid, Gelb, "{FFFF00}So, hier ist ihr Personalausweis frisch aus dem Drucker.");
			SendClientMessage(playerid, Gelb, "{FFFF00}Sie können diesen mit {FFFFFF}/showpersonalausweis{FFFF00} rumzeigen oder mit {FFFFFF}/personalausweis{FFFF00} selbst einsehen.");
			SendClientMessage(playerid, Gelb, "{FFFF00}Viel Spass und passen Sie gut darauf auf!");
			if(sStats[playerid][sQuest] == 999 && sStats[playerid][sPersonalausweis] == 1)
			{
			    ClearChat(playerid);
			    SendClientMessage(playerid,COLOR_LIGHTRED,"Sekretärin: WARTEEEEEEEEEEEEEENNNNNN SIE!!!!!");
   		 		format(string, sizeof(string), "Du bist doch %s oder?.",GetName(playerid));
		 		SendClientMessage(playerid,Gelb,string);
			    SendClientMessage(playerid,Weiß,"Ich habe hier eine Nachricht von Jack für dich:");
   		 		format(string, sizeof(string), "%s beweg deinen Arsc* schnellstmöglich zum Handyladen, ich habe einen wichtigen Auftrag für dich!",GetName(playerid));
		 		SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
			    SendClientMessage(playerid,COLOR_LIGHTRED,". . . . Jack");
   			}
		}
		else {
		}
	}
	if(dialogid == HELP1)
	{
		if(response == 0)
		{
		}
		if(response == 1)
		{
			if(listitem == 0)
			{
				format(helpstring,sizeof(helpstring),
				"{FFFFFF}/perso -- {C0C0C0}Dein Personalausweis.\n{FFFFFF}/showpersonalausweis -- {C0C0C0}Personalausweis zeigen.\n{FFFFFF}/credits -- {C0C0C0}Öffnet die Credits.\n{FFFFFF}/pay -- {C0C0C0}Anderen Spielern Geld geben.\n{FFFFFF}/me -- {C0C0C0}Me Aktion.\n{FFFFFF}/stats -- {C0C0C0}Statistik aufrufen.\n{FFFFFF}/admins -- {C0C0C0}Administratorliste.\n{FFFFFF}/afkliste -- {C0C0C0}AFKliste.");
				ShowPlayerDialog(playerid,HELP2,DIALOG_STYLE_MSGBOX,"{FFFF00}Allgemeine Hilfe",helpstring,"Weiter","Zurück");
				return 1;
			}
			if(listitem == 1)
			{
				return cmd_handyhelp(playerid, inputtext);
			}
			if(listitem == 2)
			{
				return cmd_haushelp(playerid, inputtext);
			}
			if(listitem == 3)
			{
				return cmd_bussihelp(playerid, inputtext);
			}
			if(listitem == 4)
			{
				return cmd_jobhelp(playerid, inputtext);
			}
			if(listitem == 5)
			{
				return cmd_frakhelp(playerid, inputtext);
			}
			if(listitem == 6)
			{
				return cmd_autohelp(playerid, inputtext);
			}
			if(listitem == 7)
			{
				return cmd_whelp(playerid, inputtext);
			}
			if(listitem == 8)
			{
				return cmd_radiohelp(playerid, inputtext);
			}
			if(listitem == 9)
			{
				return cmd_linkhelp(playerid, inputtext);
			}
			if(listitem == 10)
			{
				return cmd_drifthelp(playerid, inputtext);
			}
			if(listitem == 11)
			{
				return cmd_paintballhelp(playerid, inputtext);
			}
			if(listitem == 12)
			{
				return cmd_autoscooterhelp(playerid, inputtext);
			}
		}
		return 1;
	}
	if(dialogid == HELP22)
	{
		if(response == 1)
		{
			format(helpstring,sizeof(helpstring),
			"{FFFFFF}/perso -- {C0C0C0}Dein Personalausweis.\n{FFFFFF}/showpersonalausweis -- {C0C0C0}Personalausweis zeigen.\n{FFFFFF}/credits -- {C0C0C0}Öffnet die Credits.\n{FFFFFF}/pay -- {C0C0C0}Anderen Spielern Geld geben.\n{FFFFFF}/me -- {C0C0C0}Me Aktion.\n{FFFFFF}/stats -- {C0C0C0}Statistik aufrufen.\n{FFFFFF}/admins -- {C0C0C0}Administratorliste.\n{FFFFFF}/afkliste -- {C0C0C0}AFKliste.");
			ShowPlayerDialog(playerid,HELP2,DIALOG_STYLE_MSGBOX,"{FFFF00}Allgemeine Hilfe",helpstring,"Weiter","Zurück");
			return 1;
		}
		else
		{
		}
	}
	if(dialogid == HELP2)
	{
		if(response == 1)
		{
		    format(helpstring,sizeof(helpstring),
			"{FFFFFF}/b -- {C0C0C0}UNRP Chat.\n{FFFFFF}/support -- {C0C0C0}Support-Ticket eröffnen.{FFFFFF}/animlist -- {C0C0C0}Animationsliste.{FFFFFF}/s -- {C0C0C0}Schreiben.{FFFFFF}/w -- {C0C0C0}Flüstern.{FFFFFF}? Nachricht -- {C0C0C0}Newbiechat.");
			ShowPlayerDialog(playerid,HELP22,DIALOG_STYLE_MSGBOX,"{FFFF00}Allgemeine Hilfe",helpstring,"Zurück","");
			return 1;
		}
		else
		{
			ShowPlayerDialog(playerid,HELP1,DIALOG_STYLE_LIST,"Hilfezentrum","Allgemeines\nHandy\nHaus\nFirma\nJob\nFraktion\nFahrzeug\nWohnwagen\nRadio\nVerlinkung\nDrift\nPaintball\nAutoscooter","Auswählen","Beenden");
			return 1;
		}
	}
	if(dialogid == HAUSERSTELLEN7)
	{
		if(response == 1)
		{
			if(zahl < 0 || (zahl < 10 && zahl > 7) || zahl > 20)
			{
				SendClientMessage(playerid, Gelb2, "Kleine Wohnungen: 0-7, Große Häuser 10-20!");
				return 1;
			}
			SetPlayerInterior(playerid, HouseInt_Interior[zahl]);
			SetPlayerPosEx(playerid, HouseInt_Spawn_X[zahl],HouseInt_Spawn_Y[zahl],HouseInt_Spawn_Z[zahl]);
			format(string, sizeof(string), "Innenraum %d", zahl);
			SendClientMessage(playerid,Gelb2,string);
		}
	}
	if(dialogid == HAUSMIETER)
	{
		if(response == 1)
		{
			if(zahl < 1 || zahl > 20)
			{
				SendClientMessage(playerid,Rot,"Es können nur maximal 20 Mieter Platz haben!");
				ShowPlayerDialog(playerid,HAUSMIETER,DIALOG_STYLE_INPUT,"Haus Erstell Prozess 4/6","{FFFFFF}Wieviele Plätze für {FFA000}Mieter{FFFFFF} sind in diesem Haus frei?","Weiter","");
				return 1;
			}
			format(string, sizeof(string), "Haus %d: Hat Platz für %d Mieter.",sStats[playerid][sHausE], zahl);
			SendClientMessage(playerid, Gelb2, string);
			HouseInfo[sStats[playerid][sHausE]][hMaxMieter] = zahl;
			HouseInfo[sStats[playerid][sHausE]][hMieter] = 0;
			SetPVarInt(playerid, "Hauscar", 1);
			ShowPlayerDialog(playerid,HAUSERSTELLEN6,DIALOG_STYLE_MSGBOX,"Haus Erstell Prozess 5/6","{FFFFFF}Gehe nun an die Position wo das {FFA000}Hausauto{FFFFFF} hinsoll und benutze den Befehl {FFA000}/hauscar.","Weiter","");
		}
	}
	if(dialogid == HAUSERSTELLEN4)
	{
		if(response == 1)
		{
			if(zahl < 1 || zahl > 99)
			{
				SendClientMessage(playerid,Rot,"Das Level kann nicht kleiner als 1 oder größer als 99 sein!");
				ShowPlayerDialog(playerid,HAUSERSTELLEN4,DIALOG_STYLE_INPUT,"Haus Erstell Prozess 3/6","{FFFFFF}Gebe nun das benötigte {FFA000}Level{FFFFFF} des Hauses ein :","Weiter","");
				return 1;
			}
			format(string, sizeof(string), "Haus %d: Benötigt jetzt Level: %d",sStats[playerid][sHausE], zahl);
			SendClientMessage(playerid, Gelb2, string);
			HouseInfo[sStats[playerid][sHausE]][hLevel] = zahl;
			ShowPlayerDialog(playerid,HAUSMIETER,DIALOG_STYLE_INPUT,"Haus Erstell Prozess 4/6","{FFFFFF}Wieviele Plätze für {FFA000}Mieter{FFFFFF} sind in diesem Haus frei?","Weiter","");
		}
	}
	if(dialogid == HAUSERSTELLEN3)
	{
		if(response == 1)
		{
			if(zahl < 1 || zahl > 1000000)
			{
				SendClientMessage(playerid,Rot,"Der Verkaufspreis kann nicht kleiner als 1 oder größer als 1.000.000 sein!");
				ShowPlayerDialog(playerid,HAUSERSTELLEN3,DIALOG_STYLE_INPUT,"Haus Erstell Prozess 2/6","{FFFFFF}Gebe nun den {FFA000}Preis{FFFFFF} des Hauses ein :","Weiter","");
				return 1;
			}
			format(string, sizeof(string), "Haus %d: Kostet jetzt: %d",sStats[playerid][sHausE], zahl);
			SendClientMessage(playerid, Gelb2, string);
			HouseInfo[sStats[playerid][sHausE]][hValue] = zahl;
			ShowPlayerDialog(playerid,HAUSERSTELLEN4,DIALOG_STYLE_INPUT,"Haus Erstell Prozess 3/6","{FFFFFF}Gebe nun das benötigte {FFA000}Level{FFFFFF} des Hauses ein :","Weiter","");
		}
	}
	if(dialogid == HAUSERSTELLEN2)
	{
		if(response == 1)
		{
			if(zahl < 0 || (zahl < 10 && zahl > 7) || zahl > 20)
			{
				SendClientMessage(playerid, Gelb, "Kleine Wohnung: 0-7, Große Häuser 10-20!");
				ShowPlayerDialog(playerid,HAUSERSTELLEN2,DIALOG_STYLE_INPUT,"Haus Erstell Prozess 2/6","{FFFFFF}Gebe nun die {FFA000}Interior ID{FFFFFF} des Innenraumes ein :","Weiter","");
				return 1;
			}
			format(string, sizeof(string), "Haus %d:Innenraum %d wird verwendet.",sStats[playerid][sHausE], zahl);
			SendClientMessage(playerid, Gelb2, string);
			HouseInfo[sStats[playerid][sHausE]][hInteriorID] = zahl;
			ShowPlayerDialog(playerid,HAUSERSTELLEN3,DIALOG_STYLE_INPUT,"Haus Erstell Prozess 2/6","{FFFFFF}Gebe nun den {FFA000}Preis{FFFFFF} des Hauses ein :","Weiter","");
		}
	}
	if(dialogid == HAUSERSTELLEN)
	{
		if(response == 0)
		{
			SendClientMessage(playerid,Rot,"Die Hauserstellung wurde abgebrochen!");
		}
		if(response == 1)
		{
			sStats[playerid][sHausE] = Houses_Index;
			format(string, sizeof(string), "Du erstellst nun Haus %d!", Houses_Index);
			SendClientMessage(playerid, Gelb2, string);
			HouseInfo[Houses_Index][hLock] = 1;
			HouseInfo[Houses_Index][hCarlock] = 0;
			HouseInfo[Houses_Index][hOwned] = 0;
			HouseInfo[Houses_Index][hVec] = 589;
			HouseInfo[Houses_Index][hVcol1] = -1;
			HouseInfo[Houses_Index][hVcol2] = -1;
			HouseInfo[Houses_Index][hRentabil] = 0;
			HouseInfo[Houses_Index][hRent] = 0;
			HouseInfo[Houses_Index][hMaxMieter] = 0;
			HouseInfo[Houses_Index][hMieter] = 0;
			Houses_Index++;
			new Float:x88,Float:y88,Float:z88;
			GetPlayerPos(playerid, x88,y88,z88);
			HouseInfo[sStats[playerid][sHausE]][hEntrancex] = x88;
			HouseInfo[sStats[playerid][sHausE]][hEntrancey] = y88;
			HouseInfo[sStats[playerid][sHausE]][hEntrancez] = z88;
			format(string, sizeof(string), "Haus %d:Spawn-Außen %f/%f/%f",sStats[playerid][sHausE], x88,y88,z88);
			house = sStats[playerid][sHausE];
			CreateSellSchild(house);
			SendClientMessage(playerid, Gelb2, string);
			CreatePickup(1273, 1, x88, y88, z88,-1);
			ShowPlayerDialog(playerid,HAUSERSTELLEN2,DIALOG_STYLE_INPUT,"Haus Erstell Prozess 2/6","{FFFFFF}Gebe nun die {FFA000}Interior ID{FFFFFF} des Innenraumes ein :","Weiter","");
		}
	}
	if(dialogid == TUTORIALFRAGE)
	{
		ResetPlayerEuro(playerid);
		if(response == 1)
		{
		    ClearChat(playerid);
			ShowPlayerDialog(playerid,TUTORIAL1,DIALOG_STYLE_MSGBOX,"Art des Servers","{FFFFFF}Du befindest dich hier auf dem {FF9600}Bayside-Roleplay Server{FFFFFF},\nWie im Namen schon zu erkennen ist, ist dies ein Roleplay Server d.h hier gelten spezielle Regeln und wir spielen und Verhalten uns\nhier wie im richtigen Leben.\nBeispiel: Ein Konflikt wird nicht mit Waffen,sondern durch Wörter geregelt.","",">>");
		}
		if(response == 0)
		{
		    KillTimer(timert[playerid]);
			ResetPlayerEuro(playerid);
			sStats[playerid][sLevel] = 1;
			SetPlayerScore(playerid,sStats[playerid][sLevel]);
			new randphone = 100000 + random(899999);
			sStats[playerid][sNummer] = randphone;
			Handy[playerid][Nummer] = sStats[playerid][sNummer];
			UnSetStartbildschirm(playerid);
			SetPVarInt(playerid,"Clown",1);
			SpawnPlayer(playerid);
		}
	}
	if(dialogid == EINLEITUNGA)
	{
	    new count = 1;
		if(response == 0)
		{
			ClearChat(playerid);
			SendClientMessage(playerid,Weiß,"Alles klar du benötigst also keine Einweisung, solltest du trotzdem hilfe benötigen melde dich bei einem Administrator (/support)!");
			SendClientMessage(playerid,Gelb2,"Viel Spass weiterhin wünscht dir das Bayside-Roleplay.de Administratoren Team!");
			SetTimerEx("Jackboy",3229,false,"i",playerid);
			return 1;
		}
		if(response == 1)
		{
 			for(new i = 0; i < MAX_PLAYERS; i++)
 			{
				if(IsPlayerConnected(i) && sStats[i][sAdminlevel] > 0 && sStats[i][sAdminlevel] < 5)
				{
				    count ++;
				}
			}
			if(count != 1)
			{
			    ShowPlayerDialog(playerid,SUPPORT1,DIALOG_STYLE_LIST,"Support-Zentrale","{C0C0C0}1. {FFFFFF}Allgemeiner Support\n{C0C0C0}2. {FFFFFF}Cheater melden\n{C0C0C0}3. {FFFFFF}Bugs melden\n{C0C0C0}4. {FFFFFF}Es sind keine Zivibikes mehr da","Auswählen","Abbrechen");
			    return 1;
			}
			else
			{
				SendClientMessage(playerid,Rot,"Zurzeit ist kein Supporter online!");
				DeletePVar(playerid, "Einweisung");
				SetTimerEx("Jackboy",3323,false,"i",playerid);
				return 1;
			}
		}
	}
	if(dialogid == GEWORBEN)
	{
	    if(response == 0)
	    {
  			ClearChat(playerid);
			SendClientMessage(playerid,Gelb,"Du wurdest also nicht geworben, Okay!");
			format(sStats[playerid][sGeworbenVon], 15, "Keinem");
			if ((!noeinweisung))
			{
				ShowPlayerDialog(playerid,EINLEITUNGA,DIALOG_STYLE_MSGBOX,"Einführung","{FEFEFE}Möchtest du von einem {FF9600}Administrator{FEFEFE} in den Server eingeführt werden?","Ja","Nein");
				return 1;
   			}
   			else
   			{
   			    SetTimerEx("Jackboy",3323,false,"i",playerid);
   			    return 1;
   			}
	    }
	    if(response == 1)
  		{
			if(!strlen(inputtext))
			{
				ClearChat(playerid);
				SendClientMessage(playerid,Gelb,"Du wurdest also nicht geworben, Okay!");
				format(sStats[playerid][sGeworbenVon], 15, "Keinem");
				if ((!noeinweisung))
				{
					ShowPlayerDialog(playerid,EINLEITUNGA,DIALOG_STYLE_MSGBOX,"Einführung","{FEFEFE}Möchtest du von einem {FF9600}Administrator{FEFEFE} in den Server eingeführt werden?","Ja","Nein");
					return 1;
	   			}
	   			else
	   			{
	   			    SetTimerEx("Jackboy",3323,false,"i",playerid);
	   			    return 1;
	   			}
			}
			if(!strcmp(GetName(playerid),inputtext,true))
			{
		        ClearChat(playerid);
		        SendClientMessage(playerid,Rot,"Du kannst dich nicht selber werben!");
		        ShowPlayerDialog(playerid,GEWORBEN,DIALOG_STYLE_INPUT,"Wurdest du von einem Spieler geworben?","{FFFFFF}Wurdest du von einem bestimmten {FF9600}Spieler{FFFFFF} geworben? Wenn ja gebe seinen {FF9600}Namen{FFFFFF} bitte unten in das Feld ein.\nSofern du nicht geworben wurdest lass dieses Feld einfach {FF9600}frei{FFFFFF}.","Weiter","");
		        return 1;
		    }
	 		format(string, sizeof(string), "SELECT * FROM accounts WHERE Name = '%s'", inputtext);
			mysql_query(string);
			mysql_store_result();

			if(!mysql_num_rows())
			{
			    ClearChat(playerid);
				SendClientMessage(playerid,Rot,"Dieser Spieler existiert leider nicht!");
				ShowPlayerDialog(playerid,GEWORBEN,DIALOG_STYLE_INPUT,"Wurdest du von einem Spieler geworben?","{FFFFFF}Wurdest du von einem bestimmten {FF9600}Spieler{FFFFFF} geworben? Wenn ja gebe seinen {FF9600}Namen{FFFFFF} bitte unten in das Feld ein.\nSofern du nicht geworben wurdest lass dieses Feld einach {FF9600}frei{FFFFFF}.","Weiter","");
				return 1;
			}
			else
	  		{
			    ClearChat(playerid);
				format(string, sizeof(string), "Du wurdest also von %s geworben!", inputtext);
				SendClientMessage(playerid,Gelb,string);
				format(string, sizeof(string), "Sofern du LvL.5 erreichts, erhältst du und %s einen Premium Account im Wert von +1.Woche!", inputtext);
				SendClientMessage(playerid,Weiß,string);
				format(geworbennamen[playerid], 128, inputtext);
				sStats[playerid][sGeworbenVon] = geworbennamen[playerid];
				if ((!noeinweisung))
				{
					ShowPlayerDialog(playerid,EINLEITUNGA,DIALOG_STYLE_MSGBOX,"Einführung","{FEFEFE}Möchtest du von einem {FF9600}Administrator{FEFEFE} in den Server eingeführt werden?","Ja","Nein");
					return 1;
	   			}
	   			else
	   			{
	   			    SetTimerEx("Jackboy",3323,false,"i",playerid);
	   			}
				mysql_query(string);
			 	for(new p = 0; p < MAX_PLAYERS; p++)
			 	{
					if(!strcmp(GetName(p),inputtext,true))
					{
					        PlayerPlaySound(p, 1137, 0.0, 0.0, 0.0);
					        format(string, sizeof(string), "Du hast erfolgreich den Spieler %s geworben!", GetName(playerid));
					        SendClientMessage(p,Gruen,string);
					        SendClientMessage(p,Weiß,"Sofern dieser Spieler LvL.5 erreicht, erhältst du einen Premium Account im Wert von +1.Woche!");
		   			}
				}
			}
		}
 	}
	if(dialogid == ALTERSFRAGE)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,ALTERSFRAGE,DIALOG_STYLE_INPUT,"Step 2/3 | Alters Frage","{FEFEFE}Wie {FF9600}alt{FEFEFE} bist du?\n{CC0000}Beachte das diese Angabe für einige Features benötigt wird!","Bestätigen","");
		}
		if(response == 1)
		{
			if(!strlen(inputtext))
			{
				ClearChat(playerid);
				SendClientMessage(playerid,Rot,"Bitte gebe dein Alter ein!");
				SendClientMessage(playerid,Rot,"");
				ShowPlayerDialog(playerid,ALTERSFRAGE,DIALOG_STYLE_INPUT,"Step 2/3 | Alters Frage","{FEFEFE}Wie {FF9600}alt{FEFEFE} bist du?\n{CC0000}Beachte das diese Angabe für einige Features benötigt wird!","Bestätigen","");
				return 1;
			}
			if(zahl < 10 || zahl > 99)
			{
				ClearChat(playerid);
				SendClientMessage(playerid,Rot,"Dein Alter kann nicht kleiner als 10 oder größer als 99 Jahre sein!");
				SendClientMessage(playerid,Rot,"");
				ShowPlayerDialog(playerid,ALTERSFRAGE,DIALOG_STYLE_INPUT,"Step 2/3 | Alters Frage","{FEFEFE}Wie {FF9600}alt{FEFEFE} bist du?\n{CC0000}Beachte das diese Angabe für einige Features benötigt wird!","Bestätigen","");
				return 1;
			}
			ClearChat(playerid);
			format(string, sizeof(string), "Okay, %s, deine Altersangabe %d wurde in unserer Datenbank gespeichert!", GetName(playerid),zahl);
			SendClientMessage(playerid,Gelb,string);
			SendClientMessage(playerid,Gelb,"");
			sStats[playerid][sAlter] = zahl;
			ShowPlayerDialog(playerid,TUTORIALFRAGE,DIALOG_STYLE_MSGBOX,"Step 3/3 | Tutorial Frage","{FEFEFE}Möchtest du dir das {FF9600}Tutorial ansehen?","Ja","Nein");
		}
	}
	if(dialogid == GESCHLECHT)
	{
		if(response == 1)
		{
			ClearChat(playerid);
			SendClientMessage(playerid,Gelb,"Deine Angabe Mann wurde in unserer Datenbank gespeichert.");
			SendClientMessage(playerid,Gelb,"");
			ShowPlayerDialog(playerid,ALTERSFRAGE,DIALOG_STYLE_INPUT,"Step 2/3 | Alters Frage","{FEFEFE}Wie {FF9600}alt{FEFEFE} bist du?\n{CC0000}Beachte das diese Angabe für einige Features benötigt wird!","Bestätigen","");
			sStats[playerid][sGeschlecht] = 1;
			sStats[playerid][sSkin] = 58;
			SetPlayerSkin(playerid,58);
			return 1;
		}
		if(response == 0)
		{
			ClearChat(playerid);
			SendClientMessage(playerid,Gelb,"Deine Angabe Frau wurde in unserer Datenbank gespeichert.");
			SendClientMessage(playerid,Gelb,"");
			ShowPlayerDialog(playerid,ALTERSFRAGE,DIALOG_STYLE_INPUT,"Step 2/3 | Alters Frage","{FEFEFE}Wie {FF9600}alt{FEFEFE} bist du?\n{CC0000}Beachte das diese Angabe für einige Features benötigt wird!","Bestätigen","");
			sStats[playerid][sGeschlecht] = 2;
            sStats[playerid][sSkin] = 56;
            SetPlayerSkin(playerid,56);
            return 1;
		}
	}
	if(dialogid == ERSTELLUNG)
	{
		if(response == 1)
		{
		    new pip[16];
   			SetPlayerWantedLevel(playerid,0);
	 		sStats[playerid][sWanteds] = 0;
		    GetPlayerIp(playerid, pip, sizeof(pip));
		    format(string2, sizeof(string2), "{FEFEFE}Bitte wähle ein Passwort um dir einen {FF9600}Account {FEFEFE}zu erstellen!\nDeine IP {FF9600}%s{FEFEFE} wird aus Sicherheitsgründen gespeichert.\n\nMit der Registrierung stimmst du automatisch unseren {FF9600}Regeln{FEFEFE} zu.", pip);
			ShowPlayerDialog(playerid,REGISTER,DIALOG_STYLE_PASSWORD,"Registrieren",string2,"Registrieren","Regeln");
		}
		else
		{
		    ShowPlayerDialog(playerid, ERSTELLUNG, DIALOG_STYLE_MSGBOX, "Authentifizierung", "{FFFFFF}Herzlich Willkommen auf dem {FF9600}Bayside-Roleplay Server.{FFFFFF}\num auf diesem Server spielen zu können benötigst du einen Account.\nMöchtest du einen erstellen?", "Ja","");
		}
	}
	if(dialogid == TUTORIAL2)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,TUTORIAL3,DIALOG_STYLE_MSGBOX,"Fraktionen und Jobs","{FFFFFF}Wie auf jedem anderen Server gibt es auch hier feste {FF9600}Fraktionen {FFFFFF}und {FF9600}Jobs{FFFFFF}.\nFür unsere Fraktionen musst du dich in unserem {FF9600}/forum{FFFFFF} bewerben.\nFür die Jobs kannst du dich im Rathaus für einen entscheiden!","<<",">>");
		}
		if(response == 1)
		{
		    ShowPlayerDialog(playerid,TUTORIAL1,DIALOG_STYLE_MSGBOX,"Art des Servers","{FFFFFF}Du befindest dich hier auf dem {FF9600}Bayside-Roleplay Server{FFFFFF},\nWie im Namen schon zu erkennen ist, ist dies ein Roleplay Server d.h hier gelten spezielle Regeln und wir spielen und Verhalten uns\nhier wie im richtigen Leben.\nBeispiel: Ein Konflikt wird nicht mit Waffen,sondern durch Wörter geregelt.","",">>");
		}
	}
	if(dialogid == TUTORIAL3)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,TUTORIAL4,DIALOG_STYLE_MSGBOX,"Verlinkung","{FFFFFF}Um komplett alle {FF9600}Funktionen{FFFFFF} und {FF9600}Features{FFFFFF} nutzen zu können, musst du deinen Account in unserem {FF9600}UCP{FFFFFF} verlinken,\ndies fördert zur Sicherheit und der Kommunikation zwischen Homepage und Server bei. {FF9600}(/linkhelp){FFFFFF}!","<<",">>");
		}
		if(response == 1)
		{
		    ShowPlayerDialog(playerid,TUTORIAL2,DIALOG_STYLE_MSGBOX,"Betrugsversuche","{FF9600}Betrugsversuche {FFFFFF}darunter werden gezählt:\nCheaten,Hacken,Bugusen,Glitchen werden mit einem permanenten Bann\nbishin zu einem {FF9600}Blacklist{FFFFFF} Eintrag bestraft!","<<",">>");
		}
	}
	if(dialogid == TUTORIAL4)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,TUTORIAL5,DIALOG_STYLE_MSGBOX,"Die Administratoren","{FFFFFF}Unsere {FF9600}Administratoren{FFFFFF} sind bemüht jeden Spieler schnell und erfolgreich zu helfen,\ndoch ich bitte zu beachten da wir nicht zu jeder Tages-Nachtzeit Support leisten können!\n\nFür Support ausserhalb des Spieles könnt ihr uns gerne eine Email an\n{FF9600}Support@Bayside-Roleplay.de{FFFFFF} schicken.","<<",">>");
		}
		if(response == 1)
  		{
  		    ShowPlayerDialog(playerid,TUTORIAL3,DIALOG_STYLE_MSGBOX,"Fraktionen und Jobs","{FFFFFF}Wie auf jedem anderen Server gibt es auch hier feste {FF9600}Fraktionen {FFFFFF}und {FF9600}Jobs{FFFFFF}.\nFür unsere Fraktionen musst du dich in unserem {FF9600}/forum{FFFFFF} bewerben.\nFür die Jobs kannst du dich im Rathaus für einen entscheiden!","<<",">>");
		}
	}
	if(dialogid == TUTORIAL5)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,TUTORIAL4,DIALOG_STYLE_MSGBOX,"Verlinkung","{FFFFFF}Um komplett alle {FF9600}Funktionen{FFFFFF} und {FF9600}Features{FFFFFF} nutzen zu können, musst du deinen Account in unserem {FF9600}UCP{FFFFFF} verlinken,\ndies fördert zur Sicherheit und der Kommunikation zwischen Homepage und Server bei. {FF9600}(/linkhelp){FFFFFF}!","<<",">>");
	    }
		if(response == 0)
		{
			ShowPlayerDialog(playerid,TUTORIAL6,DIALOG_STYLE_MSGBOX,"Das Ende","{FFFFFF}Wir bedanken uns bei dir, das du dir die Zeit genommen hast und dieses {FF9600}Tutorial {FFFFFF}durchgelesen hast.\nUm den Anfang leichter zu gestalten empfehlen wir dir die {FF9600}Befehle /help /faq /support{FFFFFF}\nWeiterhin viel Spass wünscht das {FF9600}Bayside-Roleplay.de Administratoren Team.\n\n{FFFF00}Info: mit dem klicken auf Start wird deine Karriere hier auf dem Server beginnen!","<<","Start");
		}
	}
	if(dialogid == TUTORIAL6)
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid,TUTORIAL5,DIALOG_STYLE_MSGBOX,"Die Administratoren","{FFFFFF}Unsere {FF9600}Administratoren{FFFFFF} sind bemüht jeden Spieler schnell und erfolgreich zu helfen,\ndoch ich bitte zu beachten da wir nicht zu jeder Tages-Nachtzeit Support leisten können!\n\nFür Support ausserhalb des Spieles könnt ihr uns gerne eine Email an\n{FF9600}Support@Bayside-Roleplay.de{FFFFFF} schicken.","<<",">>");
	    }
	    if(response == 0)
	    {
	        KillTimer(timert[playerid]);
			ResetPlayerEuro(playerid);
			sStats[playerid][sLevel] = 1;
			SetPlayerScore(playerid,sStats[playerid][sLevel]);
			new randphone = 100000 + random(899999);
			sStats[playerid][sNummer] = randphone;
			UnSetStartbildschirm(playerid);
			SetPVarInt(playerid,"Clown",1);
			SpawnPlayer(playerid);
		}
	}
	if(dialogid == TUTORIAL1)
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid,TUTORIAL2,DIALOG_STYLE_MSGBOX,"Betrugsversuche","{FF9600}Betrugsversuche {FFFFFF}darunter werden gezählt:\nCheaten,Hacken,Bugusen,Glitchen werden mit einem permanenten Bann\nbishin zu einem {FF9600}Blacklist{FFFFFF} Eintrag bestraft!","<<",">>");
		}
		if(response == 1)
		{
			ShowPlayerDialog(playerid,TUTORIAL1,DIALOG_STYLE_MSGBOX,"Art des Servers","{FFFFFF}Du befindest dich hier auf dem {FF9600}Bayside-Roleplay Server{FFFFFF},\nWie im Namen schon zu erkennen ist, ist dies ein Roleplay Server d.h hier gelten spezielle Regeln und wir spielen und Verhalten uns\nhier wie im richtigen Leben.\nBeispiel: Ein Konflikt wird nicht mit Waffen,sondern durch Wörter geregelt.","",">>");
		}
	}
	if(dialogid == REGELN)
	{
		if(response == 0)
		{
			ClearChat(playerid);
			SendClientMessage(playerid,Rot,"Du hast die Regeln nicht akzeptiert und wurdest somit von unserem Server entfernt!");
			SendClientMessage(playerid,Rot,"");
			Kick(playerid);
		}
		if(response == 1)
		{
			ClearChat(playerid);
			SendClientMessage(playerid,Gelb,"Du hast die Regeln akzeptiert, also halte dich auch bitte dran . . . es folgen einige Fragen.");
			SendClientMessage(playerid,Gelb,"");
			ShowPlayerDialog(playerid,GESCHLECHT,DIALOG_STYLE_MSGBOX,"Step 1/3 | Geschlechter Frage","{FFFFFF}Bist du ein {FFB400}Mann{FFFFFF} oder eine {FFB400}Frau?","Mann","Frau");
		}
	}
	if(dialogid == REGELNN)
	{
		if(response)
		{
  			new pip[16];
		    GetPlayerIp(playerid, pip, sizeof(pip));
		    format(string2, sizeof(string2), "{FEFEFE}Bitte wähle ein Passwort um dir einen {FF9600}Account {FEFEFE}zu erstellen!\nDeine IP {FF9600}%s{FEFEFE} wird aus Sicherheitsgründen gespeichert.\n\nMit der Registrierung stimmst du automatisch unseren {FF9600}Regeln{FEFEFE} zu.", pip);
			ShowPlayerDialog(playerid,REGISTER,DIALOG_STYLE_PASSWORD,"Registrieren",string2,"Registrieren","Regeln");
		}
		else
		{
		    ShowPlayerDialog(playerid,REGELNN,DIALOG_STYLE_MSGBOX,"Server Regeln","{FFFFFF}Server Regeln: {FFFFFF}\n\n1 - {FFB400}Hacken/Cheaten ist strengstens verboten.\n{FFFFFF}2 - {FFB400}Buguser sind unerwünscht\n{FFFFFF}3 - {FFB400}Dies ist ein Roleplay Server also spielt auch bitte Roleplay\n{FFFFFF}4 - {FFB400}Sinnloses Deathmatch ist verboten\n{FFFFFF}5 - {FFB400}Driveby ist nur als Beifahrer erlaubt","Zurück","");
		}
	}
	if(dialogid == LOGIN)
	{
		if(response == 1)
		{
		    if(!strlen(inputtext))
		    {
		        SendClientMessage(playerid,Rot,"Bitte gebe dein Passwort ein!");
		        ShowPlayerDialog(playerid,LOGIN,DIALOG_STYLE_PASSWORD,"Login","{FEFEFE}Dein {FF9600}Account {FEFEFE}wurde in unserer Datenbank gefunden, bitte gebe nun dein Passwort ein und logge dich somit ein.","Login","");
		        return 1;
		    }
	    	new hashed_pass[65];
			SHA256_PassHash(inputtext, "!bsrp6136kL", hashed_pass, 65);
			Login(playerid,hashed_pass);
			return 1;
		}
		else
		{
		    ShowPlayerDialog(playerid,LOGIN,DIALOG_STYLE_PASSWORD,"Login","{FEFEFE}Dein {FF9600}Account {FEFEFE}wurde in unserer Datenbank gefunden, bitte gebe nun dein Passwort ein und logge dich somit ein.","Login","");
		}
	}
	if(dialogid == REGISTER)
	{
		if(response == 0)
		{
			ClearChat(playerid);
			ShowPlayerDialog(playerid,REGELNN,DIALOG_STYLE_MSGBOX,"Server Regeln","{FFFFFF}Server Regeln: {FFFFFF}\n\n1 - {FFB400}Hacken/Cheaten ist strengstens verboten.\n{FFFFFF}2 - {FFB400}Buguser sind unerwünscht\n{FFFFFF}3 - {FFB400}Dies ist ein Roleplay Server also spielt auch bitte Roleplay\n{FFFFFF}4 - {FFB400}Sinnloses Deathmatch ist verboten\n{FFFFFF}5 - {FFB400}Driveby ist nur als Beifahrer erlaubt","Zurück","");
			return 1;
		}
		else
		{
			if(!strlen(inputtext))
			{
				ClearChat(playerid);
				SendClientMessage(playerid,Rot,"Bitte gebe ein Passwort ein!");
	    		new pip[16];
			    GetPlayerIp(playerid, pip, sizeof(pip));
			    format(string2, sizeof(string2), "{FEFEFE}Bitte wähle ein Passwort um dir einen {FF9600}Account {FEFEFE}zu erstellen!\nDeine IP {FF9600}%s{FEFEFE} wird aus Sicherheitsgründen gespeichert.\n\nMit der Registrierung stimmst du automatisch unseren {FF9600}Regeln{FEFEFE} zu.", pip);
				ShowPlayerDialog(playerid,REGISTER,DIALOG_STYLE_PASSWORD,"Registrieren",string2,"Registrieren","Regeln");
				return 1;
			}
			if(strlen(inputtext) < 4)
			{
				ClearChat(playerid);
				SendClientMessage(playerid,Rot,"Dein Passwort muss mind. 4 Zeichen lang sein!");
			    new pip[16];
			    GetPlayerIp(playerid, pip, sizeof(pip));
			    format(string2, sizeof(string2), "{FEFEFE}Bitte wähle ein Passwort um dir einen {FF9600}Account {FEFEFE}zu erstellen!\nDeine IP {FF9600}%s{FEFEFE} wird aus Sicherheitsgründen gespeichert.\n\nMit der Registrierung stimmst du automatisch unseren {FF9600}Regeln{FEFEFE} zu.",pip);
				ShowPlayerDialog(playerid,REGISTER,DIALOG_STYLE_PASSWORD,"Registrieren",string2,"Registrieren","Regeln");
				return 1;
			}
  			new hashed_pass[65];
			SHA256_PassHash(inputtext, "!bsrp6136kL", hashed_pass, 65);
			Register(playerid,hashed_pass);
			return 1;
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(sStats[playerid][sAdminlevel] == 5)
	{
		if(GetPVarInt(playerid, "Adminduty") < 1)
		{
			SendClientMessage(playerid, Rot, "Du musst erst als Admin im Einsatz sein um dich auf der Map rumteleportieren zu können!");
			return 1;
		}
 		SetPlayerPosFindZ(playerid, fX, fY, fZ);
  		SendClientMessage(playerid,Weiß,"Erfolgreich teleportiert!");
	}
    return 1;
}

//Register/Login System
stock Register(playerid,key[])
{
	if(IsPlayerNPC(playerid)) return 1;
	new string[128];

	format(string, sizeof(string), "INSERT INTO accounts (name,passwort) VALUES ('%s','%s')", GetName(playerid), key);
	mysql_query(string);

	AccountExists[playerid] = 1;

	//Audiostream ausschalten
	StopAudioStreamForPlayer(playerid);
	
	//Automatisches Einloggen
	Login(playerid,key);
	return 1;
}

stock Login(playerid,key[])
{
	if(IsPlayerNPC(playerid)) return 1;
	new string[350];
	//Loggen
	new year, month, day;
	new hour,minute,second;
	getdate(year,month,day);
	gettime(hour,minute,second);

	format(string, sizeof(string), "SELECT * FROM accounts WHERE name = '%s' AND passwort = '%s'", GetName(playerid), key);
	mysql_query(string);
	mysql_store_result();

	if(!mysql_num_rows())
	{
		FalschesPW[playerid] ++;
		if(FalschesPW[playerid] >= 3)
		{
			FalschesPW[playerid] = 0;
			SendClientMessage(playerid,Rot,"Du wurdest vom Server gekickt da du dein Passwort 3x falsch eingeben hast!");
			SendClientMessage(playerid,Rot,"");
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Server gekickt. Grund: 3x Falsche Passwort Eingabe",day,month,year,hour,minute,second,GetName(playerid));
			KickLog(string);
			SetPVarInt(playerid,"Angezogen",0);
			Kick(playerid);
			return 1;
		}
		SendClientMessage(playerid, Rot, "Falsches Passwort, bitte gebe das richtige ein!");
		ShowPlayerDialog(playerid,LOGIN,DIALOG_STYLE_PASSWORD,"Login","{FEFEFE}Dein {FF9600}Account {FEFEFE}wurde in unserer Datenbank gefunden, bitte gebe nun dein Passwort ein und logge dich somit ein.","Login","");
		return 1;
	}
	else
	{
	    sStats[playerid][sAdminlevel] = mysql_GetInt("accounts", "adminlevel", "name", GetName(playerid));
	    sStats[playerid][sLevel] = mysql_GetInt("accounts", "level", "name", GetName(playerid));
	    sStats[playerid][sAlter] = mysql_GetInt("accounts", "alt", "name", GetName(playerid));
	    sStats[playerid][sJob] = mysql_GetInt("accounts", "job", "name", GetName(playerid));
	    sStats[playerid][sGeld] = mysql_GetInt("accounts", "geld", "name", GetName(playerid));
	    sStats[playerid][sTutorial] = mysql_GetInt("accounts", "tutorial", "name", GetName(playerid));
	    sStats[playerid][sSkin] = mysql_GetInt("accounts", "skin", "name", GetName(playerid));
		sStats[playerid][sGeschlecht] = mysql_GetInt("accounts", "geschlecht", "name", GetName(playerid));
		sStats[playerid][sMitglied] = mysql_GetInt("accounts", "mitglied", "name", GetName(playerid));
		sStats[playerid][sLeiter] = mysql_GetInt("accounts", "leiter", "name", GetName(playerid));
		sStats[playerid][sMute] = mysql_GetInt("accounts", "mute", "name", GetName(playerid));
		sStats[playerid][sHaus] = mysql_GetInt("accounts", "haus", "name", GetName(playerid));
		sStats[playerid][sHausE] = mysql_GetInt("accounts", "hause", "name", GetName(playerid));
		sStats[playerid][sPersonalausweis] = mysql_GetInt("accounts", "perso", "name", GetName(playerid));
		sStats[playerid][sSpawnChange] = mysql_GetInt("accounts", "spawn", "name", GetName(playerid));
		sStats[playerid][sPremium] = mysql_GetInt("accounts", "premium", "name", GetName(playerid));
		sStats[playerid][sLink] = mysql_GetInt("accounts", "link", "name", GetName(playerid));
		sStats[playerid][sEingeloggt] = mysql_GetInt("accounts", "eingeloggt", "name", GetName(playerid));
		sStats[playerid][sPremiumZeit] = mysql_GetInt("accounts", "premiumtage", "name", GetName(playerid));
		sStats[playerid][sKaufpunkte] = mysql_GetInt("accounts", "coins", "name", GetName(playerid));
		sStats[playerid][sHandy] = mysql_GetInt("accounts", "handy", "name", GetName(playerid));
		sStats[playerid][sGuthaben] = mysql_GetInt("accounts", "guthaben", "name", GetName(playerid));
		sStats[playerid][sVertrag] = mysql_GetInt("accounts", "vertrag", "name", GetName(playerid));
		sStats[playerid][sAkku] = mysql_GetInt("accounts", "akku", "name", GetName(playerid));
		sStats[playerid][sGPS] = mysql_GetInt("accounts", "gps", "name", GetName(playerid));
		sStats[playerid][sNummer] = mysql_GetInt("accounts", "nummer", "name", GetName(playerid));
		sStats[playerid][sWanteds] = mysql_GetInt("accounts", "wanteds", "name", GetName(playerid));
		sStats[playerid][sWaffenschein] = mysql_GetInt("accounts", "waffenschein", "name", GetName(playerid));
		sStats[playerid][sTelefonBuch] = mysql_GetInt("accounts", "telefonbuch", "name", GetName(playerid));
		sStats[playerid][sJailed] = mysql_GetInt("accounts", "jailed", "name", GetName(playerid));
		sStats[playerid][sKlingelton] = mysql_GetInt("accounts", "klingelton", "name", GetName(playerid));
		sStats[playerid][sAutoschein] = mysql_GetInt("accounts", "autoschein", "name", GetName(playerid));
		sStats[playerid][sAnglerschein] = mysql_GetInt("accounts", "anglerschein", "name", GetName(playerid));
		sStats[playerid][sMotorradschein] = mysql_GetInt("accounts", "motorradschein", "name", GetName(playerid));
		sStats[playerid][sBootschein] = mysql_GetInt("accounts", "bootschein", "name", GetName(playerid));
		sStats[playerid][sFlugschein] = mysql_GetInt("accounts", "flugschein", "name", GetName(playerid));
		sStats[playerid][sAngel] = mysql_GetInt("accounts", "angel", "name", GetName(playerid));
		sStats[playerid][sKoeder] = mysql_GetInt("accounts", "koeder", "name", GetName(playerid));
		sStats[playerid][sKondom] = mysql_GetInt("accounts", "kondom", "name", GetName(playerid));
		sStats[playerid][sMP3Player] = mysql_GetInt("accounts", "mp3player", "name", GetName(playerid));
		sStats[playerid][s247Rob] = mysql_GetInt("accounts", "247rob", "name", GetName(playerid));
		sStats[playerid][sPreamie] = mysql_GetInt("accounts", "preamie", "name", GetName(playerid));
		sStats[playerid][sJailTime] = mysql_GetInt("accounts", "JailTime", "name", GetName(playerid));
		sStats[playerid][sHotel] = mysql_GetInt("accounts", "hotel", "name", GetName(playerid));
		sStats[playerid][sArbeitslosengeld] = mysql_GetInt("accounts", "arbeitslosengeld", "name", GetName(playerid));
		sStats[playerid][sKrankenver] = mysql_GetInt("accounts", "krankenver", "name", GetName(playerid));
		sStats[playerid][sAutover] = mysql_GetInt("accounts", "autover", "name", GetName(playerid));
		sStats[playerid][sAutos] = mysql_GetInt("accounts", "autos", "name", GetName(playerid));
		sStats[playerid][sJobTime] = mysql_GetInt("accounts", "jobtime", "name", GetName(playerid));
		sStats[playerid][sArztkosten] = mysql_GetInt("accounts", "arztkosten", "name", GetName(playerid));
		sStats[playerid][sMats] = mysql_GetInt("accounts", "mats", "name", GetName(playerid));
		sStats[playerid][sSpielstunden] = mysql_GetInt("accounts", "spielstunden", "name", GetName(playerid));
		sStats[playerid][sDrogen] = mysql_GetInt("accounts", "drogen", "name", GetName(playerid));
		sStats[playerid][sBetrunken] = mysql_GetInt("accounts", "betrunken", "name", GetName(playerid));
		sStats[playerid][sQuest] = mysql_GetInt("accounts", "quest", "name", GetName(playerid));
		sStats[playerid][sGeworbenNach] = mysql_GetInt("accounts", "geworbennach", "name", GetName(playerid));
		sStats[playerid][sHelm] = mysql_GetInt("accounts", "helm", "name", GetName(playerid));
		sStats[playerid][sErf] = mysql_GetInt("accounts", "exp", "name", GetName(playerid));
		sStats[playerid][sDriftZeit] = mysql_GetInt("accounts", "drifzeit", "name", GetName(playerid));
		sStats[playerid][sPKlingelton] = mysql_GetInt("accounts", "pklingelton", "name", GetName(playerid));
		sStats[playerid][sPKlingeltonHat] = mysql_GetInt("accounts", "pklingeltonhat", "name", GetName(playerid));
		sStats[playerid][sFraktion] = mysql_GetInt("accounts", "fraktion", "name", GetName(playerid));
		sStats[playerid][sSonnenbrille] = mysql_GetInt("accounts", "sonnenbrille", "name", GetName(playerid));
		sStats[playerid][sKarte] = mysql_GetInt("accounts", "karte", "name", GetName(playerid));
		sStats[playerid][sMob] = mysql_GetInt("accounts", "mob", "name", GetName(playerid));
		sStats[playerid][sbap] = mysql_GetInt("accounts", "bap", "name", GetName(playerid));
		sStats[playerid][sMission] = mysql_GetInt("accounts", "mission", "name", GetName(playerid));
		sStats[playerid][sMissionZeit] = mysql_GetInt("accounts", "missionzeit", "name", GetName(playerid));
		sStats[playerid][sBenzinkanister] = mysql_GetInt("accounts", "benzinkanister", "name", GetName(playerid));
		sStats[playerid][sTimeBan] = mysql_GetInt("accounts", "timeban", "name", GetName(playerid));
		sStats[playerid][sKonto] = mysql_GetInt("accounts", "konto", "name", GetName(playerid));
		sStats[playerid][sTruckschein] = mysql_GetInt("accounts", "truckschein", "name", GetName(playerid));
		sStats[playerid][sPin] = mysql_GetInt("accounts", "pin", "name", GetName(playerid));
		sStats[playerid][sBankRaub] = mysql_GetInt("accounts", "bankraub", "name", GetName(playerid));
		sStats[playerid][sATMRob] = mysql_GetInt("accounts", "atmrob", "name", GetName(playerid));
		sStats[playerid][sReisePass] = mysql_GetInt("accounts", "reisepass", "name", GetName(playerid));
		sStats[playerid][sMieter] = mysql_GetInt("accounts", "mieter", "name", GetName(playerid));
		sStats[playerid][sPayPoints] = mysql_GetInt("accounts", "paypoints", "name", GetName(playerid));
		sStats[playerid][sKrankheit] = mysql_GetInt("accounts", "krankheit", "name", GetName(playerid));
		sStats[playerid][sDrogenSamen] = mysql_GetInt("accounts", "drogensamen", "name", GetName(playerid));
		sStats[playerid][sDrogenDuenger] = mysql_GetInt("accounts", "drogenduenger", "name", GetName(playerid));
		sStats[playerid][sWaffenscheinZeit] = mysql_GetInt("accounts", "waffenscheinzeit", "name", GetName(playerid));
		sStats[playerid][sPkills] = mysql_GetInt("accounts", "pkills", "name", GetName(playerid));
		sStats[playerid][sPdeaths] = mysql_GetInt("accounts", "pdeaths", "name", GetName(playerid));
		sStats[playerid][sPpunkte] = mysql_GetInt("accounts", "pbpunkte", "name", GetName(playerid));
		sStats[playerid][sPwaffe] = mysql_GetInt("accounts", "pwaffe", "name", GetName(playerid));
		sStats[playerid][sDrogenDuenger] = mysql_GetInt("accounts", "drogenduenger", "name", GetName(playerid));
		sStats[playerid][sDrogenAngebaut] = mysql_GetInt("accounts", "drogenangebaut", "name", GetName(playerid));
		sStats[playerid][sDrogenZeit] = mysql_GetInt("accounts", "drogenzeit", "name", GetName(playerid));
		sStats[playerid][sRank] = mysql_GetInt("accounts", "rank", "name", GetName(playerid));
		sStats[playerid][sWohnwagen] = mysql_GetInt("accounts", "wohnwagen", "name", GetName(playerid));
		sStats[playerid][sMaske] = mysql_GetInt("accounts", "maske", "name", GetName(playerid));
		sStats[playerid][sPfand] = mysql_GetInt("accounts", "pfand", "name", GetName(playerid));
		sStats[playerid][sTod] = mysql_GetInt("accounts", "tod", "name", GetName(playerid));
		sStats[playerid][sBombe] = mysql_GetInt("accounts", "bombe", "name", GetName(playerid));
		sStats[playerid][sFisch] = mysql_GetInt("accounts", "fisch", "name", GetName(playerid));
		sStats[playerid][sDetSkill] = mysql_GetInt("accounts", "detskill", "name", GetName(playerid));
	 	sStats[playerid][sWA] = mysql_GetInt("accounts", "wa", "name", GetName(playerid));
	 	sStats[playerid][sBizz] = mysql_GetInt("accounts", "bizz", "name", GetName(playerid));
	 	sStats[playerid][sDietrich] = mysql_GetInt("accounts", "dietrich", "name", GetName(playerid));
	 	sStats[playerid][spPayday] = mysql_GetInt("accounts", "ppayday", "name", GetName(playerid));
	 	sStats[playerid][sLastOnline] = mysql_GetInt("accounts", "lastonline", "name", GetName(playerid));
	 	sStats[playerid][sGB] = mysql_GetInt("accounts", "gb", "name", GetName(playerid));
	 	SetPVarInt(playerid,"FeuerSpawn",mysql_GetInt("accounts", "fspawn", "name", GetName(playerid)));

		SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
		SetPlayerScore(playerid,sStats[playerid][sLevel]);

		FalschesPW[playerid] = 0;

		//Eingeloggt
		sStats[playerid][sEingeloggt] = 1;
		SetPVarInt(playerid,"Eingeloggt",1);

		//Linkstatus setzen
		sStats[playerid][sLink] = 1;

		//Für die Feuerwehr der Spawn
		SetPVarInt(playerid,"Feuerwehr",1);

		//Auto vom Spieler laden
		LoadPlayerCar(playerid);

		//Wohnwagen laden lassen
		LoadWohnwagen(playerid);

		//Spieler
		if(sStats[playerid][sGB] == 0)
		{
			SpielerGeburtstag(playerid);
		}

		//Feuerwehr job wegnehmen
		if(sStats[playerid][sJob] == 4)
		{
		    sStats[playerid][sJob] = 0;
		    sStats[playerid][sJobTime] = 0;
		}

		//Timeban
		if(gettime()<sStats[playerid][sTimeBan] && sStats[playerid][sTimeBan] > 0)
		{
			new days,hours,mins;
			new wartezeit = sStats[playerid][sTimeBan];
			new restzeit= wartezeit -gettime();
	   		days = floatround(restzeit / 86400,floatround_floor);
	   		hours = restzeit - (days * 86400);
	   		hours = floatround(hours / 3600,floatround_floor);
	   		mins = restzeit - ( (days * 86400) + (hours * 3600) );
	   		mins = floatround(mins / 60,floatround_floor);
			format(string, sizeof(string), "Du bist noch für %d Minuten gebannt.(%d Stunden).",mins,hours);
			SendClientMessage(playerid, Rot,string);
			TogglePlayerControllable(playerid, false);
			SaveSpieler(playerid);
			Kick(playerid);
		    return 1;
		}
		else
		{
		    sStats[playerid][sTimeBan] = 0;
		}
		if(sStats[playerid][sLevel] == 999)
		{
			sStats[playerid][sLevel] = 2;
		    return 1;
		}
		//Endmute
		if(sStats[playerid][sMute] == 1)
		{
			SetTimerEx("EndMute", 300956, false, "d", playerid);
		}
		else
		{
			sStats[playerid][sMute] = 0;
		}
		//Wohnwagen laden
		if(sStats[playerid][sWohnwagen] == 1)
		{
	 		LoadWohnwagen(playerid);
		}
		//Für Nemesus und Shooti eine Variabele setzen
		if(strcmp(GetName(playerid),"Nemesus",true) ==0 || strcmp(GetName(playerid),"sHoOTi",true) ==0)
		{
		    SetPVarInt(playerid,"NSGesicht",1);
		}
		else
		{
		    SetPVarInt(playerid,"NSGesicht",0);
		}

		//Haussystem
		CheckHaus(playerid);

		//Gangwarzones
		for(new fs;fs<sizeof(FightSystem);fs++)
		{
			GangZoneShowForPlayer(playerid,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
		}
		//Gangzones
	 	GangZoneShowForPlayer(playerid, bunker, 0xAFAFAF00);
	 	GangZoneShowForPlayer(playerid, premiumzone, 0xAFAFAF00);
	 	GangZoneShowForPlayer(playerid, adminzone, 0xAFAFAF00);
	 	GangZoneShowForPlayer(playerid, nodmzone, 0xFFFFFFBD);
	 	GangZoneShowForPlayer(playerid, ms14zone, 0x00FFC889);
	 	GangZoneShowForPlayer(playerid, cripzone, 0x0000FF6F);

		//Entfernte Objekte
		RemoveBuildingForPlayer(playerid, 10712, -2490.5703, -160.5547, 35.2891, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, -2491.3984, -180.3047, 24.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, -2497.1719, -170.5313, 28.4922, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, -2473.8359, -160.2500, 24.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, -2463.8906, -135.7031, 24.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 10956, -1904.5000, -1210.3203, 16.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 10957, -1759.2422, -1381.1328, 15.7109, 0.25);
		RemoveBuildingForPlayer(playerid, 10958, -1903.9844, -1225.8047, 37.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 10959, -1809.7969, -1152.4609, 44.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 10963, -1809.7969, -1152.4609, 44.1563, 0.25);
		RemoveBuildingForPlayer(playerid, 11134, -1904.0078, -1093.6875, 35.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 11137, -1874.5078, -1169.6875, 32.7891, 0.25);
		RemoveBuildingForPlayer(playerid, 11201, -1903.9844, -1225.8047, 37.5859, 0.25);
		RemoveBuildingForPlayer(playerid, 11203, -1874.5078, -1169.6875, 32.7891, 0.25);
		RemoveBuildingForPlayer(playerid, 11278, -1904.0078, -1093.6875, 35.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 11377, -1904.5000, -1210.3203, 16.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 11378, -1759.2422, -1381.1328, 15.7109, 0.25);
		RemoveBuildingForPlayer(playerid, 17389, -1788.4375, -1407.3828, 35.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 17081, -1788.4375, -1407.3828, 35.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 9243, -2444.6563, 2275.9844, 8.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 731, -2325.3125, 2350.0078, 3.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 9378, -2444.6563, 2275.9844, 8.9453, 0.25);
		RemoveBuildingForPlayer(playerid, 9379, -2445.1719, 2311.6328, 9.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 9381, -2235.5547, 2361.7734, 15.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 9383, -2227.5391, 2326.8750, 5.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1223, -2430.3438, 2282.0781, 3.9688, 0.25);
		RemoveBuildingForPlayer(playerid, 9244, -2445.1719, 2311.6328, 9.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 9241, -2227.5391, 2326.8750, 5.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1297, -2279.3750, 2327.1484, 3.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 1282, -2408.7813, 2351.1406, 4.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1282, -2406.4922, 2351.6563, 4.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1282, -2404.2109, 2352.1797, 4.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1282, -2401.9219, 2352.6953, 4.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1282, -2399.6406, 2353.2188, 4.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1358, -2401.6250, 2357.5313, 5.1250, 0.25);
		RemoveBuildingForPlayer(playerid, 1282, -2397.3516, 2353.7344, 4.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1282, -2395.0703, 2354.2500, 4.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1282, -2392.7813, 2354.7734, 4.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1635, -2226.0625, 2360.8281, 6.3984, 0.25);
		RemoveBuildingForPlayer(playerid, 9245, -2235.5547, 2361.7734, 15.8047, 0.25);
		RemoveBuildingForPlayer(playerid, 9302, -2488.0859, 2280.2813, 11.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 9371, -2488.0859, 2280.2813, 11.1875, 0.25);
		RemoveBuildingForPlayer(playerid, 1440, -2500.8203, 2273.9688, 4.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1617, -2498.2266, 2287.4531, 7.6797, 0.25);
		RemoveBuildingForPlayer(playerid, 1227, -2480.8828, 2295.0313, 4.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1689, -2480.0078, 2285.7813, 18.8594, 0.25);
		RemoveBuildingForPlayer(playerid, 1367, -2477.3984, 2274.1875, 4.6016, 0.25);
		RemoveBuildingForPlayer(playerid, 1440, -2476.2891, 2294.7109, 4.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 9389, -2437.5938, 2360.3984, 6.8359, 0.25);
		RemoveBuildingForPlayer(playerid, 1367, -2607.5547, 2341.2734, 7.9766, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, -2606.0859, 2344.3672, 7.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, -2606.0625, 2349.8125, 8.0859, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, -2606.0469, 2355.2422, 8.2109, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, -2447.4766, 2342.4375, 4.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, -2442.1172, 2343.4922, 4.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, -2436.7656, 2344.5469, 4.5313, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, -2417.9453, 2348.5078, 4.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 9341, -2437.5938, 2360.3984, 6.8359, 0.25);
		RemoveBuildingForPlayer(playerid, 1408, -2412.6484, 2349.7969, 4.5156, 0.25);
		RemoveBuildingForPlayer(playerid, 715, -2463.0156, 2380.6172, 17.2891, 0.25);
		RemoveBuildingForPlayer(playerid, 715, -2450.1250, 2367.9141, 11.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 767, -2434.8672, 2384.6719, 8.0938, 0.25);
		RemoveBuildingForPlayer(playerid, 715, -2360.0469, 2372.2266, 12.1328, 0.25);
		RemoveBuildingForPlayer(playerid, 2198, 243.4766, 184.2578, 1007.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 1806, 244.1094, 184.8359, 1007.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 2198, 243.4766, 186.3203, 1007.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 1806, 244.1094, 187.0156, 1007.1719, 0.25);
		RemoveBuildingForPlayer(playerid, 2162, 242.9766, 189.5703, 1007.1953, 0.25);
		RemoveBuildingForPlayer(playerid, 2162, 242.9766, 191.7266, 1007.1953, 0.25);
		RemoveBuildingForPlayer(playerid, 2197, 244.4297, 188.2813, 1007.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 2197, 248.0781, 188.3203, 1007.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 2197, 251.0703, 188.2813, 1007.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 1227, -2527.2422, 2353.1250, 4.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1227, -2520.7188, 2353.1250, 4.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1227, -2524.0625, 2353.1250, 4.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1227, -2503.0703, 2364.2188, 4.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1227, -2503.0469, 2368.0469, 4.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1440, -2506.6953, 2369.6641, 4.3906, 0.25);
		RemoveBuildingForPlayer(playerid, 1440, -2503.3125, 2341.3672, 4.4531, 0.25);
		RemoveBuildingForPlayer(playerid, 7172, 2546.0313, 2828.7344, 11.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 3460, 940.3828, 2397.7109, 13.7656, 0.25); //Bamboo
		RemoveBuildingForPlayer(playerid, 1350, -2496.1328, -140.4844, 24.6094, 0.25); //Crip or Die Laterne

		//Geldtextdraw
		Money3[playerid] = CreatePlayerTextDraw(playerid,616.000000, 78.000000, "~n~~n~");
		PlayerTextDrawBackgroundColor(playerid,Money3[playerid], 255);
		PlayerTextDrawFont(playerid,Money3[playerid], 1);
		PlayerTextDrawLetterSize(playerid,Money3[playerid], 0.800000, 1.200000);
		PlayerTextDrawColor(playerid,Money3[playerid], -1);
		PlayerTextDrawSetOutline(playerid,Money3[playerid], 0);
		PlayerTextDrawSetProportional(playerid,Money3[playerid], 1);
		PlayerTextDrawSetShadow(playerid,Money3[playerid], 1);
		PlayerTextDrawUseBox(playerid,Money3[playerid], 1);
		PlayerTextDrawBoxColor(playerid,Money3[playerid], -1);
		PlayerTextDrawTextSize(playerid,Money3[playerid], 492.000000, 31.000000);
		Money2[playerid] = CreatePlayerTextDraw(playerid,515,85.0,"0 Euro");
		PlayerTextDrawLetterSize(playerid,Money2[playerid],0.299999,1.000000);
		PlayerTextDrawColor(playerid,Money2[playerid],0xffffffff);
		PlayerTextDrawFont(playerid,Money2[playerid],2);
		Money[playerid] = CreatePlayerTextDraw(playerid,498,80.0,"~n~~n~");
		PlayerTextDrawFont(playerid,Money[playerid],2);
		PlayerTextDrawUseBox(playerid,Money[playerid],1);
		PlayerTextDrawBoxColor(playerid,Money[playerid],0x000000FF);
		PlayerTextDrawTextSize(playerid,Money[playerid],610.000000,150.000000);
		PlayerTextDrawLetterSize(playerid,Money[playerid],0.299999,1.000000);
		PlayerTextDrawColor(playerid,Money[playerid],0xffffffff);
		PlayerTextDrawSetProportional(playerid,Money[playerid],1);
		//DJTextdraw
		DJText1[playerid] = CreatePlayerTextDraw(playerid,503.000000, 13.000000, "DJ-Modus");
		PlayerTextDrawBackgroundColor(playerid,DJText1[playerid], 65535);
		PlayerTextDrawFont(playerid,DJText1[playerid], 1);
		PlayerTextDrawLetterSize(playerid,DJText1[playerid], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,DJText1[playerid], -1);
		PlayerTextDrawSetOutline(playerid,DJText1[playerid], 1);
		PlayerTextDrawSetProportional(playerid,DJText1[playerid], 1);
		DJText2[playerid] = CreatePlayerTextDraw(playerid,119.000000,431.000000, "~w~Benutze ~y~Space ~w~um eine Animation auszufuehren!");
		PlayerTextDrawBackgroundColor(playerid,DJText2[playerid], 255);
		PlayerTextDrawFont(playerid,DJText2[playerid], 1);
		PlayerTextDrawLetterSize(playerid,DJText2[playerid], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,DJText2[playerid], -1);
		PlayerTextDrawSetOutline(playerid,DJText2[playerid], 0);
		PlayerTextDrawSetProportional(playerid,DJText2[playerid], 1);
		PlayerTextDrawSetShadow(playerid,DJText2[playerid], 1);

		//Audiostream ausschalten
		StopAudioStreamForPlayer(playerid);

		//Handy
		Handy[playerid][Nummer] = sStats[playerid][sNummer];
	 	Handy[playerid][Akku] = sStats[playerid][sAkku];
	   	SetPVarInt(playerid, "HandyStatus", 1);
	   	wirdangerufen[playerid] = -1;
	    Anderer[playerid] = 0-1;

		if(sStats[playerid][sTutorial] == 1)
		{
		    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		    SetPVarInt(playerid, "Spawned", 1);
		}
		
		//Tutorial Abfrage
		if(sStats[playerid][sTutorial] <= 0 && GetPVarInt(playerid, "FlugzeugStart") == 0 && GetPVarInt(playerid, "Flugzeugluke") == 0 && GetPVarInt(playerid, "ImIntro") == 0)
		{
		    SetPlayerWantedLevel(playerid,0);
	 		sStats[playerid][sWanteds] = 0;
	 		sStats[playerid][sGB] = 5;
			SetPVarInt(playerid, "Spawned", 0);
			SetStartbildschirm(playerid);
			timert[playerid] = SetTimerEx("SetTutorial",16127,false,"i",playerid);
			PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/register.mp3");
			ClearChat(playerid);
			ShowPlayerDialog(playerid,REGELN,DIALOG_STYLE_MSGBOX,"Server Regeln","{FFFFFF}Server Regeln: {FFFFFF}\n\n1 - {FFB400}Hacken/Cheaten ist strengstens verboten.{FFFFFF}\n2 - {FFB400}Buguser sind unerwünscht.{FFFFFF}\n3 - {FFB400}Dies ist ein Roleplay Server also spielt auch bitte Roleplay.{FFFFFF}\n4 - {FFB400}Sinnloses Deathmatch ist verboten.{FFFFFF}\n5 - {FFB400}Driveby ist nur als Beifahrer erlaubt.\n\n{FFFFFF}Gamemode by Nemesus.de!","Akzeptieren","Ablehnen");
			return 1;
		}
		else
		{
			SpawnPlayer(playerid);
		}
	}
	return 1;
}

stock SaveSpieler(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
 	if(sStats[playerid][sEingeloggt] == 0 && GetPVarInt(playerid, "Eingeloggt") == 0) return 1;

	sStats[playerid][sGeld] = GetPlayerEuros(playerid);
	SetPlayerScore(playerid,sStats[playerid][sLevel]);

	if(GetPVarInt(playerid, "DJDienst") == 0 && GetPVarInt(playerid, "FDienst") == 0 && GetPVarInt(playerid, "MechaDienst") == 0 && GetPVarInt(playerid, "SDienst") == 0 && GetPVarInt(playerid, "Undercover") == 0)
	{
		sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	}

	//Autos vom Spieler speichern
	UpdatePlayerCar(playerid);

	new string[1024];
	format(string, sizeof(string), "UPDATE accounts SET adminlevel='%d',geld='%d',level='%d',alt='%d',job='%d',tutorial='%d',skin='%d',geschlecht='%d',mitglied='%d',leiter='%d',mute='%d',haus='%d',hause='%d',perso='%d',spawn='%d',premium='%d',link='%d',eingeloggt='%d',premiumtage='%d',coins='%d' WHERE Name='%s'",
	sStats[playerid][sAdminlevel],sStats[playerid][sGeld], sStats[playerid][sLevel],sStats[playerid][sAlter],sStats[playerid][sJob],sStats[playerid][sTutorial],sStats[playerid][sSkin],sStats[playerid][sGeschlecht],sStats[playerid][sMitglied],sStats[playerid][sLeiter],sStats[playerid][sMute],sStats[playerid][sHaus],sStats[playerid][sHausE],
	sStats[playerid][sPersonalausweis],sStats[playerid][sSpawnChange],sStats[playerid][sPremium],sStats[playerid][sLink],sStats[playerid][sEingeloggt],sStats[playerid][sPremiumZeit],sStats[playerid][sKaufpunkte], GetName(playerid));
	mysql_query(string);

	format(string, sizeof(string), "UPDATE accounts SET guthaben='%d',vertrag='%d',akku='%d',gps='%d',nummer='%d',wanteds='%d',waffenschein='%d',telefonbuch='%d',jailed='%d',klingelton='%d',autoschein='%d',motorradschein='%d',anglerschein='%d',bootschein='%d',flugschein='%d',angel='%d',koeder='%d',kondom='%d',mp3player='%d' WHERE Name='%s'",
	sStats[playerid][sGuthaben], sStats[playerid][sVertrag],sStats[playerid][sAkku],sStats[playerid][sGPS],sStats[playerid][sNummer],sStats[playerid][sWanteds],sStats[playerid][sWaffenschein],sStats[playerid][sTelefonBuch],sStats[playerid][sJailed],sStats[playerid][sKlingelton],sStats[playerid][sAutoschein],
	sStats[playerid][sMotorradschein],sStats[playerid][sAnglerschein],sStats[playerid][sBootschein],sStats[playerid][sFlugschein],sStats[playerid][sAngel],sStats[playerid][sKoeder],sStats[playerid][sKondom],sStats[playerid][sMP3Player], GetName(playerid));
	mysql_query(string);

	format(string, sizeof(string), "UPDATE accounts SET 247rob='%d',preamie='%d',JailTime='%d',hotel='%d',arbeitslosengeld='%d',krankenver='%d',autover='%d',autos='%d',jobtime='%d',arztkosten='%d',mats='%d',spielstunden='%d',drogen='%d',betrunken='%d',geworbenvon='%s',quest='%d',geworbennach='%d',helm='%d' WHERE Name='%s'",
	sStats[playerid][s247Rob], sStats[playerid][sPreamie],sStats[playerid][sJailTime],sStats[playerid][sHotel],sStats[playerid][sArbeitslosengeld],sStats[playerid][sKrankenver],sStats[playerid][sAutover],sStats[playerid][sAutos],sStats[playerid][sJobTime],sStats[playerid][sArztkosten],sStats[playerid][sMats],
	sStats[playerid][sSpielstunden],sStats[playerid][sDrogen],sStats[playerid][sBetrunken],sStats[playerid][sGeworbenVon],sStats[playerid][sQuest],sStats[playerid][sGeworbenNach],sStats[playerid][sHelm], GetName(playerid));
	mysql_query(string);

	format(string, sizeof(string), "UPDATE accounts SET driftzeit='%d',pklingelton='%d',pklingeltonhat='%d',fraktion='%d',sonnenbrille='%d',bap='%d',mission='%d',missionzeit='%d',benzinkanister='%d',timeban='%d',konto='%d',truckschein='%d',warnungen='%d' WHERE Name='%s'",
	sStats[playerid][sDriftZeit],sStats[playerid][sPKlingelton],sStats[playerid][sPKlingeltonHat],sStats[playerid][sFraktion],sStats[playerid][sSonnenbrille],sStats[playerid][sbap],sStats[playerid][sMission],sStats[playerid][sMissionZeit],
	sStats[playerid][sBenzinkanister],sStats[playerid][sTimeBan],sStats[playerid][sKonto],sStats[playerid][sTruckschein],sStats[playerid][sWarns], GetName(playerid));
	mysql_query(string);

	format(string, sizeof(string), "UPDATE accounts SET pin='%d',karte='%d',mob='%d',supportsperre='%d',bankraub='%d',atmrob='%d',reisepass='%d',mieter='%d',paypoints='%d',krankheit='%d',drogensamen='%d',drogenduenger='%d',waffenscheinzeit='%d',pkills='%d',pdeaths='%d',pbpunkte='%d',pwaffe='%d' WHERE Name='%s'",
	sStats[playerid][sPin],sStats[playerid][sKarte],sStats[playerid][sMob],sStats[playerid][sSupportsperre],sStats[playerid][sBankRaub],sStats[playerid][sATMRob],sStats[playerid][sReisePass],sStats[playerid][sMieter],sStats[playerid][sPayPoints],sStats[playerid][sKrankheit],
	sStats[playerid][sDrogenSamen],sStats[playerid][sDrogenDuenger],sStats[playerid][sWaffenscheinZeit],sStats[playerid][sPkills],sStats[playerid][sPdeaths],sStats[playerid][sPpunkte],sStats[playerid][sPwaffe], GetName(playerid));
	mysql_query(string);

	format(string, sizeof(string), "UPDATE accounts SET drogenwartezeit='%d',drogenangebaut='%d',drogenzeit='%d',rank='%d',wohnwagen='%d',maske='%d',pfand='%d',tod='%d',bombe='%d',fisch='%d',detskill='%d',wa='%d',bizz='%d',ppayday='%d',dietrich='%d',gb='%d',krankheit='%d',exp='%d',fspawn='%d',lastonline='%d',handy='%d',drogend='%d' WHERE Name='%s'",
	sStats[playerid][sDrogenWarteZeit],sStats[playerid][sDrogenZeit],sStats[playerid][sDrogenAngebaut],sStats[playerid][sRank],sStats[playerid][sWohnwagen],sStats[playerid][sMaske],sStats[playerid][sPfand],sStats[playerid][sTod],sStats[playerid][sBombe],sStats[playerid][sFisch],
	sStats[playerid][sDetSkill],sStats[playerid][sWA],sStats[playerid][sBizz],sStats[playerid][spPayday],sStats[playerid][sDietrich],sStats[playerid][sGB],sStats[playerid][sKrankheit],sStats[playerid][sErf],GetPVarInt(playerid, "FeuerSpawn"),sStats[playerid][sLastOnline],sStats[playerid][sHandy],sStats[playerid][sDrogenDuenger], GetName(playerid));
	mysql_query(string);
	return 1;
}

stock ResetSpieler(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	ResetPlayerEuro(playerid);
	sStats[playerid][sAdminlevel] = 0;
	sStats[playerid][sLevel] = 1;
	SetPlayerScore(playerid,sStats[playerid][sLevel]);
	sStats[playerid][sAlter] = 0;
	sStats[playerid][sJob] = 0;
	sStats[playerid][sGeld] = 0;
	sStats[playerid][sTutorial] = 0;
	sStats[playerid][sSkin] = 58;
	SetPlayerSkin(playerid,58);
	sStats[playerid][sGeschlecht] = 0;
	sStats[playerid][sMitglied] = 0;
	sStats[playerid][sLeiter] = 0;
	sStats[playerid][sMute] = 0;
	sStats[playerid][sHaus] = 255;
	sStats[playerid][sHausE] = 0;
	sStats[playerid][sPersonalausweis] = 0;
	sStats[playerid][sSpawnChange] = 0;
	sStats[playerid][sPremium] = 0;
	sStats[playerid][sLink] = 1;
	sStats[playerid][sEingeloggt] = 0;
	sStats[playerid][sPremiumZeit] = 0;
	sStats[playerid][sKaufpunkte] = 0;
	sStats[playerid][sHandy] = 0;
	sStats[playerid][sGuthaben] = 0;
	sStats[playerid][sVertrag] = 0;
	sStats[playerid][sAkku] = 0;
	sStats[playerid][sGPS] = 0;
	sStats[playerid][sNummer] = 0;
	sStats[playerid][sWanteds] = 1;
	SetPlayerWantedLevel(playerid,0);
	sStats[playerid][sWaffenschein] = 0;
	sStats[playerid][sTelefonBuch] = 0;
	sStats[playerid][sJailed] = 0;
	sStats[playerid][sKlingelton] = 0;
	SetPlayerWantedLevel(playerid,0);
	sStats[playerid][sAutoschein] = 0;
	sStats[playerid][sAnglerschein] = 0;
	sStats[playerid][sMotorradschein] = 0;
	sStats[playerid][sBootschein] = 0;
	sStats[playerid][sFlugschein] = 0;
	sStats[playerid][sAngel] = 0;
	sStats[playerid][sKoeder] = 0;
	sStats[playerid][sKondom] = 0;
	sStats[playerid][sMP3Player] = 0;
	sStats[playerid][s247Rob] = 0;
	sStats[playerid][sPreamie] = 0;
	sStats[playerid][sJailTime] = 0;
	sStats[playerid][sHotel] = 0;
	sStats[playerid][sArbeitslosengeld] = 0;
	sStats[playerid][sKrankenver] = 0;
	sStats[playerid][sAutover] = 0;
	sStats[playerid][sAutos] = 0;
	sStats[playerid][sJobTime] = 0;
	sStats[playerid][sArztkosten] = 0;
	sStats[playerid][sMats] = 0;
	sStats[playerid][sSpielstunden] = 0;
	sStats[playerid][sDrogen] = 0;
	sStats[playerid][sBetrunken] = 0;
	sStats[playerid][sGeworbenVon] = 0;
	sStats[playerid][sQuest] = 0;
	sStats[playerid][sGeworbenNach] = 0;
	sStats[playerid][sHelm] = 0;
	sStats[playerid][sErf] = 0;
	sStats[playerid][sDriftZeit] = -1;
	sStats[playerid][sPKlingelton] = 0;
	sStats[playerid][sPKlingeltonHat] = 0;
	sStats[playerid][sFraktion] = 0;
	sStats[playerid][sSonnenbrille] = 0;
	sStats[playerid][sbap] = 0;
	sStats[playerid][sMission] = 0;
	sStats[playerid][sMissionZeit] = 0;
	sStats[playerid][sBenzinkanister] = 0;
	sStats[playerid][sTimeBan] = 0;
	sStats[playerid][sKonto] = 0;
	sStats[playerid][sSupportsperre] = 0;
	sStats[playerid][sTruckschein] = 0;
	sStats[playerid][sWarns] = 0;
	sStats[playerid][sKarte] = 0;
	sStats[playerid][sPin] = 0;
	sStats[playerid][sBankRaub] = 0;
	sStats[playerid][sATMRob] = 0;
	sStats[playerid][sReisePass] = 0;
	sStats[playerid][sMieter] = 0;
	sStats[playerid][sPayPoints] = 0;
	sStats[playerid][sKrankheit] = 0;
	sStats[playerid][sDrogenSamen] = 0;
	sStats[playerid][sDrogenDuenger] = 0;
	sStats[playerid][sWaffenscheinZeit] = 0;
	sStats[playerid][sPkills] = 0;
	sStats[playerid][sPdeaths] = 0;
	sStats[playerid][sPpunkte] = 0;
	sStats[playerid][sDrogenAngebaut] = 0;
	sStats[playerid][sDrogenZeit] = 0;
	sStats[playerid][sRank] = 0;
	sStats[playerid][sWohnwagen] = 0;
	sStats[playerid][sMaske] = 0;
	sStats[playerid][sPfand] = 0;
	sStats[playerid][sTod] = 0;
	sStats[playerid][sBombe] = 0;
	sStats[playerid][sFisch] = 0;
	sStats[playerid][sDetSkill] = 0;
	sStats[playerid][sWA] = 0;
	sStats[playerid][sBizz] = 255;
	sStats[playerid][sDietrich] = 0;
	sStats[playerid][spPayday] = 0;
	sStats[playerid][sLastOnline] = 0;
	sStats[playerid][sGB] = 0;
	return 1;
}

//Geld System
stock GivePlayerEuro(playerid,euros)
{
	SetPVarInt(playerid,"Euros",GetPVarInt(playerid,"Euros")+euros);
	new cashtext[64];
	format(cashtext,64,"%d Euro",GetPVarInt(playerid,"Euros"));
	PlayerTextDrawSetString(playerid,Money2[playerid],cashtext);
}

stock EnoughEuro(playerid,euros)
{
	if(GetPVarInt(playerid,"Euros") > euros) return 1;
	else if((GetPVarInt(playerid,"Euros") == euros)) return 1;
	else return 0;
}

stock ResetPlayerEuro(playerid)
{
	SetPVarInt(playerid,"Euros",0);
	GivePlayerEuro(playerid,0);
}

stock GetPlayerEuros(playerid)
{
	return GetPVarInt(playerid,"Euros");
}

stock SetPlayerEuro(playerid,euros)
{
	SetPVarInt(playerid,"Euros",0);
	GivePlayerEuro(playerid,euros);
}

//Clear Chatbox
stock ClearChat(playerid)
{
	for(new i = 0; i < 12; i++) SendClientMessage(playerid, Rot,"");
	return 1;
}

//Clear ChatboxBWT
stock ClearChatBWT(playerid)
{
	for(new i = 0; i < 9; i++) SendClientMessage(playerid, Rot,"");
	return 1;
}

//GetDistanceToPoint
stock GetDistanceToPoint(playerid,Float:x2,Float:y2,Float:z2)
{
	new Float:dis;
	new Float:x1,Float:y1,Float:z1;
	if (!IsPlayerConnected(playerid)) return -1;
	GetPlayerPos(playerid,x1,y1,z1);
	dis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
	return floatround(dis);
}

//GetVehcicleSpeed
stock Float:GetVehicleSpeed(vehicleid,UseMPH = 0)
{
	new Float:speed_x,Float:speed_y,Float:speed_z,Float:temp_speed;
	GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
	if(UseMPH == 0)
	{
	    temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*136.666667;
	} else {
	    temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*85.4166672;
	}
	floatround(temp_speed,floatround_round);return temp_speed;
}

//Anti IP
forward CheckPlayerText(playerid,string[]);
public CheckPlayerText(playerid,string[])
{
	new countit = 0,str[128];

	for(new ip=0; ip<sizeof(AllowedIPs); ip++)
	{
		if(strfind(string,AllowedIPs[ip],true) != -1)
		{
			return 1;
		}
	}
	for(new x=0; x<strlen(string); x++)
   	 {
		for(new d=0; d<sizeof(IPDelimiters); d++)
		{
			if(string[x] == IPDelimiters[d])
			{
				if(string[x+1] <= '9' && string[x+1] >= '0')
				{
					countit++;
				}
				else if(string[x+2] <= '9' && string[x+2] >= '0')
				{
					countit++;
				}
			}
		}
	}
	if(countit >= 3)
	{
		format(str,sizeof(str),"Warnung: %s[%d] ist im Verdacht Fremdwerbung zu machen!",GetName(playerid),playerid);
		SendAdminMessage(Rot, str);
		SendClientMessage(playerid,Rot,"Es ist verboten für andere Server Werbung zu machen!");
		pIPWarns[playerid]++;
		if(pIPWarns[playerid] >= MAX_IP_WARNS)
		{
			format(str,sizeof(str),"** Anti-Cheat: %s wurde vom Server gebannt. Grund: Fremdwerbung",GetName(playerid));
			SendClientMessageToAll(Rot,str);
			TogglePlayerControllable(playerid, false);
			//Loggen
			new y, m, d;
			new h,mi,s;
			getdate(y,m,d);
			gettime(h,mi,s);
			CheatLog(string);
			//Bannen
			SaveSpieler(playerid);
			BanEx(playerid,"Fremdwerbung");
		}
		return 0;
	}
	return 1;
}


//Allgemein Timer2
forward Timer2();
public Timer2()
{
	new string[240];
	new color = random(25);
	for(new i=0; i<MAX_PLAYERS; i++) {
		if (IsPlayerConnected (i))
		{
   			new npcname[MAX_PLAYER_NAME],surfing;
			new bot = GetNearestBot(i, 4);
			new bot2 = GetNearestBot(i, 9);
//			new player = GetNearestPlayer(i, 8);
			GetPlayerName(i, npcname, sizeof(npcname));
			//Zeitsystem
			new hour,minute,second;
			gettime(hour,minute,second);
			if (minute <= 9){format(string,25,"%d:0%d",hour,minute);}
			else {format(string,25,"%d:%d",hour,minute);}
			TextDrawSetString(Clock,string);
			SetWorldTime(hour);
			if(high[i] == 0) {
				SetPlayerTime(i,hour,0);
			}
			//Ballonrundfahrt
			surfing = (GetPlayerSurfingObjectID (i) == ballonx);
			if(surfing && GetPVarInt(i, "BTicket") == 0)
			{
			    SendClientMessage(i,Rot,"Du besitzt kein Ballonrundfahrtticket!");
			    SetPlayerPos(i,-2082.7251,2307.1902,24.0784);
			    SetPlayerFacingAngle(i,233.9359);
			}
			//NO DM Zone
			if(IsPlayerInZonee(i,-2639.2, 2230.474, -2592.488, 2277.186) && GetPVarInt(i, "NODMT") == 0 && sStats[i][sTutorial] == 1)
			{
			    SetPVarInt(i,"NODMT",1);
			    TextDrawShowForPlayer(i,NoDMTextdraw);
			    SetPlayerArmedWeapon(i,0);
			}
			if(!IsPlayerInZonee(i,-2639.2, 2230.474, -2592.488, 2277.186) && GetPVarInt(i, "NODMT") == 1 && sStats[i][sTutorial] == 1)
			{
			    SetPVarInt(i,"NODMT",0);
			    TextDrawHideForPlayer(i,NoDMTextdraw);
			    SetPlayerArmedWeapon(i,0);
			}
			//Krankheit Erhältung
			if(sStats[i][sKrankheit] == 0 && !IsPlayerInAnyVehicle(i))
			{
	 			if(wetterid == 8 || wetterid == 16 || wetterid == 8 && GetPlayerInterior(i) > 0)
				{
					new rnd = random(1544);
					if(rnd >=85 && rnd <=164)
					{
						sStats[i][sKrankheit] = 6;
						SendClientMessage(i,Weiß,"Du fühlst dich nicht gut dir ist ein bisschen schwindelig.");
						SendClientMessage(i,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
						new anm = random(3);
						switch(anm)
						{
							case 0:PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/husten.wav");
							case 1:PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/niesen.mp3");
							case 2:PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/husten.wav");
						}
	                }
				}
			}
			//Bots die mit Spieler zutun haben
			//Peter
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(i, X, Y, Z);
			new bott = GetNearestBot(i, 6);
			if(!strcmp(GetName(bott),"Peter",true))
			{
   				if(GetPVarInt(i, "NSGesicht") == 0)
			    {
					SetPlayerToFacePlayer(bott,i);
					SetPlayerHealth(i,1.0);
					CreateExplosion(X, Y, Z, 1, 50.0);
					SetPlayerChatBubble(bott,"Eindringling!",0xFF0000FF,35.0,8000);
					ApplyAnimation(bott, "GRENADE","WEAPON_start_throw", 4.0, 0, 1, 1, 1, 0, 0);
//					Peter = 1;
		   		}
			    else
			    {
       				SetPlayerChatBubble(bott,"{FFFFFF}Willkommen zurück {FFFF00}Meister",0xFF0000FF,35.0,8000);
			        ClearAnimations(bott);
//			        Peter = 1;
			    }
			}
			//Wanni hof
			if(!strcmp(GetName(i), "Wanni", true ))
			{
		    	SetPlayerChatBubble(i,"Oh Yeah! Open your mouth !!!!",Gelb,3,86400000);
			}
			//Gesichtschecks
			//Autopate
			if(IsPlayerInRangeOfPoint(i, 3.5, -2380.5850,2441.5269,9.5141) && GetPVarInt(i, "APate") == 0 && !IsPlayerInAnyVehicle(i) && !IsPlayerNPC(i))
			{
				if(!strcmp(GetName(bot),"Volker",true))
				{
					ClearChat(i);
					SetPlayerChatBubble(bot,"Volker: {FFFFFF}Kontrolle...",0xFFFF00DD,35.0,5000);
					SendClientMessage(i,Gelb,"Kleinen Moment bitte, ich muss Sie kurz durchsuchen!");
					SetPVarInt(i, "APate", 1);
					TogglePlayerControllable(i, false);
					SetTimerEx("PateCheck", 2293, false, "i", i);
					SetCameraBehindPlayer(i);
				}
			}
			//Casino Gesichtscheck
			if(IsPlayerInRangeOfPoint(i, 4.0, -2456.9143,2281.2747,4.9844) && GetPVarInt(i, "Gesicht") == 0 && !IsPlayerInAnyVehicle(i) && !IsPlayerNPC(i))
			{
				if(!strcmp(GetName(bot),"Dennis",true) || !strcmp(GetName(bot),"Ralle",true))
				{
					ClearChat(i);
					SetPlayerChatBubble(bot,"Dennis: {FFFFFF}Gesichts Kontrolle...",0xFFFF00DD,35.0,5000);
					SendClientMessage(i,Gelb,"Kleinen Moment bitte, wir müssen Sie kurz durchsuchen!");
					SetPVarInt(i, "Gesicht", 1);
					TogglePlayerControllable(i, false);
					SetTimerEx("GesichtsCheck", 2311, false, "i", i);
				}
			}
			//Club Gesichtscheck
			if(IsPlayerInRangeOfPoint(i, 1.5, -2485.9680,2270.3315,4.9844) && GetPVarInt(i, "Gesicht2") == 0 && sStats[i][sJob] != 2 && !IsPlayerInAnyVehicle(i) && !IsPlayerNPC(i))
			{
				if(!strcmp(GetName(bot),"Michael",true))
				{
					ClearChat(i);
					SetPlayerChatBubble(bot,"Michael: {FFFFFF}Gesichts Kontrolle...",0xFFFF00DD,35.0,3200);
					SendClientMessage(i,Gelb,"Kleinen Moment bitte, ich muss Sie kurz durchsuchen!");
					SetPVarInt(i, "Gesicht2", 1);
					TogglePlayerControllable(i, false);
					SetTimerEx("GesichtsCheck2", 2347, false, "i", i);
				}
			}
			//Airport laufende Ticketkontrolle
			if(!strcmp(GetName(bot2),"Pascal",true))
			{
			    if(GetPVarInt(i, "Flugticket") == 0)
			    {
			        SetPlayerChatBubble(bot2,"Pascal: {FFFFFF}Oh ein unerwünschter Gast...",0xFFFF00DD,35.0,3000);
		   			SetPVarInt(i, "Gesicht3", 0);
					SendClientMessage(i,Gelb,"Du wurdest von der Kontrolle rausgeworfen, weil du kein gültiges Flugticket hast!");
					SetPlayerPosEx(i,-2416.1257,2308.7815,4.2915);
					SetPlayerFacingAngle(i,84.4044);
					PlayerPlaySound(i, 1130, 0.0, 0.0, 0.0);
                }
			}
			//Premiumlieferservice
			new surf = GetPlayerSurfingVehicleID(i);
			if(surf == pveh && sStats[i][sPremium] < 1)
			{
			    if(sStats[i][sAdminlevel] > 0)
			    {
			        return 1;
			    }
				if(IsPlayerNPC(i)) return 1;
		    		GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~w~Du bist kein ~r~Premium",3000, 5);
					SetPlayerPosEx(i,-2595.4509,2245.3042,4.9844);
					SetPlayerFacingAngle(i,224.6488);
			}
			//Airport Kontrolle
			if(IsPlayerInRangeOfPoint(i, 2.0, -2410.9153,2302.4248,4.2915) && GetPVarInt(i, "Gesicht3") == 0 && !IsPlayerInAnyVehicle(i))
			{
				if(!strcmp(GetName(bot),"Jeremy",true))
				{
					ClearChat(i);
					SetPlayerChatBubble(bot,"Jeremy: {FFFFFF}Kontrolle...",0xFFFF00DD,35.0,5000);
					ApplyAnimation(bot, "ON_LOOKERS","point_loop", 4.0, 1, 1, 1, 1, 0, 1);
					SendClientMessage(i,Gelb,"Kleinen Moment bitte, ich muss Sie kurz durchsuchen!");
					SetPVarInt(i, "Gesicht3", 1);
					TogglePlayerControllable(i, false);
					SetTimerEx("GesichtsCheck3", 2141, false, "d", i);
				}
			}
			//Bots
			if(IsPlayerNPC(i))
			{
				//Clown
				if(!strcmp(npcname, "Sasa", true))
				{
				    ApplyAnimation(i,"PED","IDLE_chat", 4.0, 1, 1, 1, 1, 0, 1);
		  		}
				//WannisVater
				if(!strcmp(npcname, "WannisVater", true))
				{
					if(wwv == 0)
					{
						new wvv = random(7);
						switch(wvv)
						{
							case 0:ApplyAnimation(i,"PED","WALK_DRUNK", 4.0, 0, 1, 1, 1, 0, 1);
							case 1:ApplyAnimation(i,"PED","WALK_DRUNK", 4.0, 0, 1, 1, 1, 0, 1);
							case 3:ApplyAnimation(i, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
							case 4:SetPlayerChatBubble(i,"Haste mal nen Euro für mich?",Gelb2,10.0,8000);
							case 5:SetPlayerChatBubble(i,"Morgen erstmal zum Arbeitsamt . . .",Gelb2,10.0,5000);
							case 6:ApplyAnimation(i,"PED","WALK_DRUNK", 4.0, 0, 1, 1, 1, 0, 1);
						}
					}
				}
				//sHoOTi
				if(!strcmp(npcname, "Shootiii", true))
				{
					new wvv = random(7);
					switch(wvv)
					{
							case 0:ApplyAnimation(i, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 1);
							case 1:ApplyAnimation(i, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 1);
							case 3:ApplyAnimation(i, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 1);
							case 4:ApplyAnimation(i, "FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 1);
							case 5:ApplyAnimation(i, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 1);
							case 6:ApplyAnimation(i, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 1);
					}
				}
				//Lumar
				if(!strcmp(npcname, "Lumar", true ))
				{
					new anm = random(7);
					switch(anm)
					{
						case 0:ApplyAnimation(i, "DANCING","DAN_Down_A", 4.0, 0, 1, 1, 1, 0, 1);
						case 1:ApplyAnimation(i, "DANCING","dance_loop", 4.0, 1, 1, 1, 1, 0, 1);
						case 2:ApplyAnimation(i, "DANCING","DAN_Down_A", 4.0, 1, 1, 1, 1, 0, 1);
						case 3:ApplyAnimation(i, "DANCING","dance_loop", 4.0, 1, 1, 1, 1, 0, 1);
						case 4:ApplyAnimation(i, "DANCING","DAN_Down_A", 4.0, 1, 1, 1, 1, 0, 1);
						case 5:ApplyAnimation(i, "DANCING","dance_loop", 4.0, 1, 1, 1, 1, 0, 1);
						case 6:ApplyAnimation(i, "DANCING","DAN_Down_A", 4.0, 1, 1, 1, 1, 0, 1);
					}
				}
				//Mike
				color = random(25);
				new colors[25] =
				{
					0xFF0000FF, 0xFF2C00FF, 0xFF5000FF, 0xFF8700FF, 0xFFA700FF,
					0xFFDC00FF, 0xFFFB00FF, 0xC4FF00FF, 0x7BFF00FF, 0x00FF00FF,
					0x00FF1EFF, 0x00FF3BFF, 0x00FF7CFF, 0x00FFAEFF, 0x00FFD5FF,
					0x00FFFFFF, 0x00CCFFFF, 0x00ACFFFF, 0x0083FFFF, 0x0054FFFF,
					0x0000FFFF, 0x2C00FFFF, 0x5F00FFFF, 0x9B00FFFF, 0xCB00FFFF
				};
				new str[5][170] =
				{
					{"Mike : Herzlich Willkommen auf dem Bayside-Roleplay Server."},
					{"Mike : Herzlich Willkommen auf dem Bayside-Roleplay Server."},
					{"Mike : Herzlich Willkommen auf dem Bayside-Roleplay Server."},
					{"Mike : Herzlich Willkommen auf dem Bayside-Roleplay Server."},
					{"Mike : Herzlich Willkommen auf dem Bayside-Roleplay Server."}
				};
				if(!strcmp(npcname, "Mike", true))
				{
					SetPlayerChatBubble(i,str[random(5)],colors[color],35.0,8000);
					ApplyAnimation(i, "ON_LOOKERS","wave_loop", 4.0, 1, 1, 1, 1, 0, 1);
				}
				//Maya
				new str2[5][170] =
				{
					{"Maya : Um dein Driftrennen zu starten benutze /startdrift."},
					{"Maya : Um den Highscore zu sehen besuche ucp.bayside-roleplay.de."},
					{"Maya : Um dieses Gebiet zu verlassen benutze /exitdrift."},
					{"Maya : Viel Spass beim driften."},
					{"Maya : http://bayside-roleplay.de für mehr Informationen!"}
				};
				if(MayaBusy == 0)
				{
					if(!strcmp(npcname, "Maya", true))
					{
						SetPlayerChatBubble(i,str2[random(5)],colors[color],15.0,8000);
						ApplyAnimation(i, "DANCING","dance_loop", 4.0, 1, 1, 1, 1, 0, 1);
					}
				}
				//John
				if(!strcmp(npcname, "Fernandez", true))
				{
					SetPlayerToFacePlayer(bott,i);
				}
				//Fernandez
				if(!strcmp(npcname, "John", true))
				{
				    SetPlayerChatBubble(i,"John",Gelb,15,6000);
				    ApplyAnimation(i, "DEALER","DEALER_IDLE", 4.0, 1, 1, 1, 1, 0, 1);
				}
				//DJ Otto
				if(!strcmp(npcname, "Otto", true))
				{
					SetPlayerChatBubble(i,"Yeah! Yeah! Yeah!",0xFF0000FF,35.0,8000);
					new anm = random(7);
					switch(anm)
					{
						case 0:ApplyAnimation(i, "DANCING","dnce_M_b", 4.0, 1, 1, 1, 1, 0, 1);
						case 1:ApplyAnimation(i, "RIOT","RIOT_CHANT", 4.0, 1, 1, 1, 1, 0, 1);
						case 2:ApplyAnimation(i, "SCRATCHING","scdrdlp", 4.0, 1, 1, 1, 1, 0, 1);
						case 3:ApplyAnimation(i, "SCRATCHING","scdrulp", 4.0, 1, 1, 1, 1, 0, 1);
						case 4:ApplyAnimation(i,"RIOT", "RIOT_CHANT",4.1,1,1,1,1,0,1);
						case 5:ApplyAnimation(i, "DANCING","dnce_M_b", 4.0, 1, 1, 1, 1, 0, 1);
						case 6:ApplyAnimation(i, "SCRATCHING","sclng_l", 4.0, 1, 1, 1, 1, 0, 1);
					}
				}
				//Neko
				if(!strcmp(npcname, "Neko", true ))
				{
		            ApplyAnimation(i, "BLOWJOBZ","BJ_COUCH_Loop_W", 4.0, 1, 1, 1, 1, 1, 1);
				}
				//Tom
				if(!strcmp(npcname, "Tom", true))
				{
				    format(string, sizeof(string), "{FFFFFF}Tankwart Tom:\n{FFFF00}%d pro Liter.",BizzInfo[0][bEntranceCost]);
				    SetPlayerChatBubble(i,string,Gelb,15.0,20000);
				}
				//DDealer
				if(!strcmp(npcname, "DDealer", true))
				{
					if(ddealer == 0)
					{
					    SetPlayerChatBubble(i,"Drogendealer Peter",Gelb,15,6000);
					    ApplyAnimation(i, "DEALER","DEALER_IDLE", 4.0, 1, 1, 1, 1, 0, 1);
					}
				}
				//DDDealer
				if(!strcmp(npcname, "DDDealer", true))
				{
		  			SetPlayerChatBubble(i,"Drogendealer Peter",Gelb,15,6000);
			    	ApplyAnimation(i, "DEALER","DEALER_IDLE", 4.0, 1, 1, 1, 1, 0, 1);
				}
				//Dominique
				if(!strcmp(npcname, "Dominique", true) && nutte == 0)
				{
					ApplyAnimation(i, "SMOKING","M_smklean_loop", 4.0, 1, 1, 1, 1, 0, 1);
					SetPlayerChatBubble(i,"Prostituierte Dominique",0xFFFF00DD,25.0,6000);
		        }
		 		//Jack
				if(!strcmp(npcname, "Jack", true))
				{
				    ApplyAnimation(i, "SMOKING","M_smklean_loop", 4.0, 1, 1, 1, 1, 0, 1);
				    SetPlayerChatBubble(i,"Jack",Gelb,15.0,6000);
				}
				//DJ_Paddy
				if(!strcmp(npcname, "DJ_Paddy", true))
				{
					SetPlayerChatBubble(i,"PARTY!",0xFF0000FF,35.0,8000);
					new anm = random(7);
					switch(anm)
					{
						case 0:ApplyAnimation(i, "SCRATCHING","scdldlp", 4.0, 1, 1, 1, 1, 0, 1);
						case 1:ApplyAnimation(i, "RIOT","RIOT_CHANT", 4.0, 1, 1, 1, 1, 0, 1);
						case 2:ApplyAnimation(i, "SCRATCHING","scdrdlp", 4.0, 1, 1, 1, 1, 0, 1);
						case 3:ApplyAnimation(i, "SCRATCHING","scdrulp", 4.0, 1, 1, 1, 1, 0, 1);
						case 4:ApplyAnimation(i,"RIOT", "RIOT_CHANT",4.1,1,1,1,1,0,1);
						case 5:ApplyAnimation(i, "DANCING","dnce_M_b", 4.0, 1, 1, 1, 1, 0, 1);
						case 6:ApplyAnimation(i, "SCRATCHING","sclng_l", 4.0, 1, 1, 1, 1, 0, 1);
					}
				}
			}
			//Business Produkte System
			for(new h = 0; h < sizeof(BizzInfo); h++)
			{
			    if(IsASpeditionsCar(GetPlayerVehicleID(i)))
			    {
				    if(!IsPlayerInRangeOfPoint(i, 5.0, BizzInfo[0][bEntranceX], BizzInfo[0][bEntranceY], BizzInfo[0][bEntranceZ]))
				    {
						if(IsPlayerInRangeOfPoint(i, 5.0, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]))
						{
							format(string, sizeof(string), "~w~%s~n~~r~Erforderliche Produkte~w~: %d~n~~y~Preis pro Produkt: ~w~: %d Euro~n~~g~Verfuegbares Geld: ~w~: %d Euro",BizzInfo[h][bMessage],(BizzInfo[h][bMaxProducts]-BizzInfo[h][bProducts]),BizzInfo[h][bPriceProd],BizzInfo[h][bTill]);
							GameTextForPlayer(i, string, 10000, 5);
							return 1;
						}
					}
					else
					{
						format(string, sizeof(string), "~w~%s~n~~r~Erforderliches Benzin~w~: %d~n~~y~Preis pro Benzin: ~w~: %d Euro~n~~g~Verfuegbares Geld: ~w~: %d Euro",BizzInfo[0][bMessage],(BizzInfo[0][bMaxProducts]-BizzInfo[0][bProducts]),BizzInfo[0][bPriceProd],BizzInfo[0][bTill]);
						GameTextForPlayer(i, string, 10000, 5);
						return 1;
					}
				}
			}
			//Paintballcheck
			if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
			{
	 			StartingPaintballRound = 1;
	 			SetTimer("PreparePaintball", 15349, 0);
			}
			if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
			{
	 			AnnouncedPaintballRound = 1;
	  			if(PlayerPaintballing[i] != 0)
	   			{
	   				SendClientMessage(i, Gelb2, "Das Paintballmatch startet in kürze . . .");
	    		}
			}
			//Autoscootercheck
			if(AutoscooterPlayers >= 2 && AutoscooterRound != 1 && StartingAutoscooterRound != 1)
			{
	 			StartingAutoscooterRound = 1;
	 			SetTimer("PrepareAutoscooter", 15359, 0);
			}
			if(AutoscooterRound == 1 && AutoscooterPlayers < 2)
			{
			    KillTimer(ascooter);
	      		AutoscooterEnded();
			}
			if(StartingAutoscooterRound == 1 && AnnouncedAutoscooterRound == 0)
			{
	 			AnnouncedAutoscooterRound = 1;
				if(GetPVarInt(i, "Autoscooter") == 1)
				{
	   				SendClientMessage(i, Gelb2, "Das Autoscootermatch startet in kürze . . .");
	    		}
			}
			//vor Lotto
			if(hour == 16 && minute == 55)
			{
				if(LottoNews == 0)
				{
  					if(sStats[i][sEingeloggt] == 1 && sStats[i][sTutorial] == 1)
	    			{
		  				SendClientMessage(i,Weiß,"{FFFFFF}--------------------------------------------- {ff8c00}NEWS {FFFFFF}---------------------------------------------");
						SendClientMessage(i,Gelb2,"Die Lottoziehungen beginnen in 5 Minuten, besorge dir einen Lotterieschein,");
						SendClientMessage(i,Gelb2,"in der Lotterie in der nähe vom Casino.");
						SendClientMessage(i,Weiß,"{FFFFFF}--------------------------------------------- {ff8c00}ENDE {FFFFFF}-----------------------------------------------");
						LottoNews = 1;
					}
				}
			}
			//Lotto
			if(hour == 17 && LottoNews == 1)
			{
			    TicketDraw();
			    LottoNews = 0;
			}
			//Schwarzmarkt umändern
			if(hour == 24 && minute == 10 && second == 10 && johnc == 0 || hour == 4 && minute == 10 && second == 10 && johnc == 0 || hour == 8 && minute == 10 && second == 10 && johnc == 0 || hour == 12 && minute == 10 && second == 10 && johnc == 0 || hour == 15 && minute == 10 && second == 10 && johnc == 0 || hour == 18 && minute == 10 && second == 10 && johnc == 0 || hour == 21 && minute == 10 && second == 10 && johnc == 0)
			{
			    johnc = 1;
				CreateSchwarzmarkt();
				SetTimer("JohncR", 60293, false);
			}
			//Event starten
			if(Event == 0 && (!noevent))
			{
				if(hour == 24 && minute == 55 && EventStarted == 0 || hour == 3 && minute == 55 && EventStarted == 0 || hour == 6 && minute == 55 && EventStarted == 0 || hour == 9 && minute == 55 && EventStarted == 0 || hour == 12 && minute == 55 && EventStarted == 0 || hour == 15 && minute == 55 && EventStarted == 0  || hour == 18 && minute == 55 && EventStarted == 0 || hour == 21 && minute == 55 && EventStarted == 0)
				{
				    EventStarted = 1;
					StartEvent();
					SetTimer("EventR", 61261, false);
				}
			}
			//vor Pferderennen
			if(hour == 19 && minute == 55)
			{
				if(PferderennenNews == 0)
				{
				    	PferderennenNews = 1;
	  					if(sStats[i][sEingeloggt] == 1 && sStats[i][sTutorial] == 1)
	  					{
				  			SendClientMessage(i,Weiß,"{FFFFFF}----------------------------------------- {ff8c00}NEWS {FFFFFF}-----------------------------------------");
							SendClientMessage(i,Gelb2,"In 5 Minuten startet das Pferderennen, begebe dich zum Pferderennen Wettbüro um deine Wetten abzuschließen.");
							SendClientMessage(i,Gelb2,"Das Pferderennen Wettbüro befindet sich in der nähe vom Burger Shot. Viel Glück!");
							SendClientMessage(i,Weiß,"{FFFFFF}----------------------------------------- {ff8c00}ENDE {FFFFFF}-------------------------------------------");
						}
				}
			}
			//Pferderennenstart
			if(hour == 20 && PferderennenNews == 1)
			{
			    GameTimeTimer();
			    PferderennenNews = 0;
			}
			//Anti Adminlevel
			if(sStats[i][sWanteds] > 6)
			{
			    sStats[i][sWanteds] = 6;
			}
			//Anti Wanteds
			if(sStats[i][sAdminlevel] > 5)
			{
			    sStats[i][sAdminlevel] = 0;
			}
			//Missionzeit zurücksetzen
			if(gettime()>sStats[i][sMissionZeit] && sStats[i][sMissionZeit] > 0)
			{
			    sStats[i][sMissionZeit] = 0;
			}
			//Cooldown zurücksetzen
			if(gettime()>GetPVarInt(i, "Cooldown") && GetPVarInt(i, "Cooldown") > 0)
			{
			    SetPVarInt(i,"Cooldown",0);
			}
			//Cooldown2 zurücksetzen
			if(gettime()>GetPVarInt(i, "Cooldown2") && GetPVarInt(i, "Cooldown2") > 0)
			{
			    SetPVarInt(i,"Cooldown2",0);
			}
			//Cooldown3 zurücksetzen
			if(gettime()>GetPVarInt(i, "Cooldown3") && GetPVarInt(i, "Cooldown3") > 0)
			{
			    SetPVarInt(i,"Cooldown3",0);
			}
			//Cooldown3 zurücksetzen
			if(gettime()>GetPVarInt(i, "Cooldown3") && GetPVarInt(i, "Cooldown3") > 0)
			{
			    SetPVarInt(i,"Cooldown3",0);
			}
			//Cooldown4 zurücksetzen
			if(gettime()>GetPVarInt(i, "Cooldown4") && GetPVarInt(i, "Cooldown4") > 0)
			{
			    SetPVarInt(i,"Cooldown4",0);
			}
			//Cooldown5 zurücksetzen
			if(gettime()>GetPVarInt(i, "Cooldown5") && GetPVarInt(i, "Cooldown5") > 0)
			{
			    SetPVarInt(i,"Cooldown5",0);
			}
			//Farmer
			if(gettime()>sStats[i][sDrogenZeit] && sStats[i][sDrogenZeit] > 0)
			{
			    sStats[i][sDrogenZeit] = 0;
			}
			//Premiumaccount ist abgelaufen
			if(gettime()>sStats[i][sPremiumZeit] && sStats[i][sPremium] > 0)
			{
			    ClearChat(i);
	            sStats[i][sPremiumZeit] = 0;
	            sStats[i][sPremium] = 0;
			    SendClientMessage(i,Weiß,"Dein Premiumaccount ist abgelaufen!");
			    SendClientMessage(i,Gelb2,"Du kannst dir jederzeit auf http://ucp.bayside-roleplay.de einen neuen kaufen!");
			    SendClientMessage(i,Gelb2,"Viel Spass weiterhin :)!");
			}
			//gefälschter Waffenschein abgelaufen
			if(gettime()>sStats[i][sWaffenscheinZeit] && sStats[i][sWaffenschein] > 0 && sStats[i][sWaffenscheinZeit] > 0)
			{
			    SendClientMessage(i,Weiß,"Dein gefälschter Waffenschein ist abgelaufen!");
			    SendClientMessage(i,Gelb2,"Du kannst dir jederzeit beim Schwarzmarkt einen neuen kaufen!");
			}
			//ATM Überfall zurücksetzen
			if(gettime()>sStats[i][sATMRob] && sStats[i][sATMRob] > 0)
			{
			    sStats[i][sATMRob] = 0;
			}
			//Waffenscheinprüfung durchgefallen Check
			if(WaffenscheinStep[i] > 0 && WaffenscheinSchuss[i] <= 0 && Getroffen[i] < 5 && GetPVarInt(i, "InWschein") == 1 && GetPlayerWeapon(i) == 0)
			{
				//Durchgefallen
				ClearChat(i);
				SendClientMessage(i,Gelb2,"Du bist leider durchgefallen, da du es nicht geschafft hast alle Atrappen zu treffen!");
				SendClientMessage(i,Weiß,"Du hast die Hälfte des Waffenschein Preises zurück bekommen!");
				ResetPlayerWeapons(i);
				GivePlayerEuro(i,5000);
				sStats[i][sWaffenschein] = 0;
				SetPVarInt(i, "InWschein", 0);
				ClearAnimations(i);
				SetCameraBehindPlayer(i);
				TogglePlayerControllable(i, true);
				SetPlayerPosEx(i,1497.4021,1306.4576,1093.2891);
				SetPlayerFacingAngle(i,89.5907);
				SetPlayerInterior(i, 3);
				SetPlayerVirtualWorld(i, 0);
				DeletePlayer3DTextLabel(i,Target);
				Getroffen[i] = 0;
				WaffenscheinSchuss[i] = 0;
				WaffenscheinStep[i] = 0;
				Targets[i] = 0;
			}
			//DJ Job On Air
			if(GetPVarInt(i, "DJMusik") == 1)
			{
				format(string, sizeof(string), "[DJ %s on air!]",GetName(i));
				Update3DTextLabelText(DJLabel[i], colors[color], string);
			}
			//Feuersystem im Auto
			new veh;
			veh = GetPlayerVehicleID(i);
			if(FeuerwehrOn >= 1 && !IsAPlane(veh) && !IsABoat(veh) && !IsAFahrrad(veh))
			{
				if(IsPlayerInAnyVehicle(i) && GetPVarInt(i, "Unfall") == 0 && GetPVarInt(i, "Spawned") == 1 && !IsPlayerNPC(i) && GetPVarInt(i, "StartDrift") == 0 && GetPVarInt(i, "InFschein") == 0 && GetPVarInt(i, "InMschein") == 0 && GetPVarInt(i, "InFLschein") == 0 && GetPVarInt(i, "InBschein") == 0 && GetPVarInt(i, "InTschein") == 0) {
					GetPlayerPos(i, X, Y, Z);
					new Float:health;
					GetVehicleHealth(veh, health);
					if(health <= 250) {
						SetRadioStation(veh,0);
						ClearChat(i);
						SendClientMessage(i,Gelb,"Du klemmst fest und dein Auto brennt, ruf schnell die Feuerwehr (/service) damit Sie dir helfen kann!");
						SendClientMessage(i,Gelb,"Du hast 3 Minuten Zeit dich befreien zu lassen, ansonsten gehst du mit deinem Auto in die Luft!");
						VehicleStarted[veh] = 0;
						SetPVarInt(i,"Unfall",1);
						HideSpeedometer(i);
						KillTimer(timer2[i]);
						GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~W~Motor ~r~ausgefallen!", 10400, 5);
						PlayerPlaySound(i, 1148, 0.0, 0.0, 0.0);
						FeuerTimer[i] = SetTimerEx("InDieLuft", 180146, false, "d", i);
						//Motor ausschalten
						TogglePlayerControllable(i, false);
						SetVehicleParamsEx(GetPlayerVehicleID(i),VEHICLE_PARAMS_OFF,0,0,0,0,0,0);
					}
				}
			}
		}
	}
	return 1;
}


//AntiCheat
//- Airbrake
//- Rüstung
//- Jetpack
//- Geld
//- Waffen
//- Ping
//- Speedhack
//- Leben
forward Timer1();
public Timer1()
{
	new year, month, day;
	getdate(year, month, day);
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	new string[128],var,surfing;
	new Float:xxx,Float:yyy,Float:zzz/*,Float:health*/,Float:fvar;
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
	    //Jailzeit runtersetzen
		if (IsPlayerConnected (i) && !IsPlayerNPC(i))
		{
			if(sStats[i][sJailed] > 0)
			{
				if(sStats[i][sJailTime] > 0)
				{
					sStats[i][sJailTime]--;
				}
				if(sStats[i][sJailTime] <= 0)
				{
					sStats[i][sJailTime] = 0;
					sStats[i][sJailed] = 0;
					sStats[i][sJailTime] = 0;
					SendClientMessage(i, Weiß,"Du hast deine Haftstrafe abgesessen!");
					format(string, sizeof(string), "~g~Freiheit");
					DeletePVar(i, "JailDM");
					SetPlayerInterior(i, 0);
					SetPlayerPosEx(i, -2249.1746,2355.4294,4.9730);
					SetPlayerFacingAngle(i,132.2612);
					GameTextForPlayer(i, string, 5000, 1);
				}
			}
			//Surfing
			surfing = (GetPlayerSurfingVehicleID (i) != INVALID_VEHICLE_ID || GetPlayerSurfingObjectID (i) != INVALID_OBJECT_ID);
			//Airbrake ty to Junkbuster
			if (!surfing && (!noacheat) && (GetPlayerState(i) == PLAYER_STATE_ONFOOT || GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerSpeed (i, true) < 30) && sStats[i][sTutorial] == 1 && GetPVarInt(i, "Spawned") == 1 && GetPVarInt(i, "InDrift") == 0 && GetPVarInt(i, "Bankk") == 0 && GetPlayerPing(i) < 100 && GetPlayerInterior(i) == 0)
			{
				if(sStats[i][sAdminlevel] == 5 && GetPVarInt(i, "Funmodus") == 1 && sStats[i][sTutorial] == 1) continue;
				var = floatround(GetPlayerDistanceFromPoint(i, CheatPosX[i], CheatPosY[i], CheatPosZ[i]));
				if (var >= 150)
				{
					SetPVarInt(i,"Airbrake",GetPVarInt(i, "Airbrake")+1);
					if (GetPVarInt(i, "Airbrake") >= (MAX_CHECKS + 4))
					{
						SetPVarInt(i,"Airbrakew",GetPVarInt(i, "Airbrakew")+1);
						if (GetPVarInt(i, "Airbrakew") < MAX_CHECKS)
						{
							if(IsPlayerInAnyVehicle(i))
							{
								format(string,sizeof(string),"Airbrake Warnung: Spieler: %s, Höhe: %.2f, ~%d m/s, Fahrzeug: %s!",GetName(i),  CheatPosZ[i], var, VehicleNames[GetPlayerVehicleID(i)]);
							}
							else
							{
								format(string,sizeof(string),"Airbrake Warnung: Spieler: %s, Höhe: %.2f, ~%d m/s!",GetName(i),  CheatPosZ[i], var);
							}
							SendAdminMessage(Rot, string);
						}
						else
						{
							format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Airbrake", GetName(i));
							SendClientMessageToAll(Rot, string);
							TogglePlayerControllable(i, false);
							//Loggen
							format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gebannt. Grund: Airbrake",day,month,year,Hour,Minute,Second,GetName(i));
							CheatLog(string);
							//Bannen
							BanEx(i, "Airbrake Cheat");
						}
					}
				}
				else
			SetPVarInt(i,"Airbrake", 0);
		}
		//Anti High Ping
		new ping = GetPlayerPing(i);
		if(ping > 550 && IsPlayerConnected(i) && GetPVarInt(i, "Spawned") == 1 && sStats[i][sTutorial] == 1 && sStats[i][sAdminlevel] < 1)
		{
			format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gekickt. Grund: High-Ping", GetName(i));
			SendClientMessageToAll(Rot, string);
			//Loggen
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gekickt. Grund: High Ping",day,month,year,Hour,Minute,Second,GetName(i));
			CheatLog(string);
			SendClientMessage(i,Rot,"Du wurdest wegen einem zu hohen Ping gekickt!");
			TogglePlayerControllable(i, false);
			SaveSpieler(i);
			Kick(i);
		}
		//Anti Rüstungs Cheat
		new Float:Armour;
		GetPlayerArmour(i, Armour);
		if(Armour != pArmour[i] && Armour > 0 && (!noacheat))
		{
			if(Armour > pArmour[i] && AllowArmour[i] == 0)
			{
				format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Rüstungs Cheat", GetName(i));
				SendClientMessageToAll(Rot, string);
				TogglePlayerControllable(i, false);
				//Loggen
				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gebannt. Grund: Ruestungs Cheat",day,month,year,Hour,Minute,Second,GetName(i));
				CheatLog(string);
				//Bannen
				BanEx(i, "Rüstungs Cheat");
			}
			else if(Armour > pArmour[i] && AllowArmour[i] == 1)
			{
				pArmour[i] = Armour;
				AllowArmour[i] = 0;
			}
		}
		//AntiSpeed Hack
		if((!surfing && GetPlayerState(i) == PLAYER_STATE_DRIVER) && (GetPlayerSpeedXY(i) > MAX_SPEED_VEHICLE) && (!noacheat) && GetPVarInt(i, "Spawned") == 1)
		{
			if(sStats[i][sAdminlevel] == 5 && GetPVarInt(i, "Funmodus") == 1 && sStats[i][sTutorial] == 1 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				return 1;
			}
			else
			{
				if(sStats[i][sAdminlevel] > 0)
				{
					new speed = floatround(GetVehicleSpeed(GetPlayerVehicleID(i),0));
					format(string, sizeof(string), "Warnung: %s[%d] ist im Verdacht einen Speedhack zu nutzen (Geschwindigkeit: %d KM/H)!", GetName(i), i,speed);
					SendAdminMessage(Rot, string);
					SetVehicleVelocity(GetPlayerVehicleID(i), -0.0, -0.0, -0.0);
					TogglePlayerControllable(i, false); TogglePlayerControllable(i, true);
				}
				else
				{
					if (GetPVarInt(i, "Speedhackw") >= (MAX_CHECKS + 2))
					{
						format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Speedhack", GetName(i));
						SendClientMessageToAll(Rot, string);
						TogglePlayerControllable(i, false);
						//Loggen
						format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gebannt. Grund: Speedhack",day,month,year,Hour,Minute,Second,GetName(i));
						CheatLog(string);
						//Bannen
						BanEx(i, "Speedhack Cheat");
					}
					else
					{
						SetPVarInt(i,"Speedhackw",GetPVarInt(i, "Speedhackw")+1);
						new speed = floatround(GetVehicleSpeed(GetPlayerVehicleID(i),0));
						format(string, sizeof(string), "Warnung: %s[%d] ist im Verdacht einen Speedhack zu nutzen (Geschwindigkeit: %d KM/H)!", GetName(i), i,speed);
						SendAdminMessage(Rot, string);
						SendClientMessage(i,Rot,"Bitte unterlasse den Speedhack!");
						SetVehicleVelocity(GetPlayerVehicleID(i), -0.0, -0.0, -0.0);
						TogglePlayerControllable(i, false); TogglePlayerControllable(i, true);
						format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System als Speedhacker entdeckt!",day,month,year,Hour,Minute,Second,GetName(i));
						CheatLog(string);
					}
				}
			}
		}
		//Jetpack Anti Cheat
		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && (!noacheat) && GetPVarInt(i, "Spawned") == 1)
		{
			if(sStats[i][sAdminlevel] > 0)
			{
				if(sStats[i][sAdminlevel] > 0)
				{
					SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					format(string, sizeof(string), "Warnung: %s[%d] ist im Verdacht sich ein Jetpack zu cheaten!", GetName(i), i);
					SendAdminMessage(Rot, string);
				}
				else
				{
					format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Jetpack Cheat", GetName(i));
					SendClientMessageToAll(Rot, string);
					SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
					TogglePlayerControllable(i, false);
					//Loggen
					format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gebannt. Grund: Jetpack Cheat",day,month,year,Hour,Minute,Second,GetName(i));
					CheatLog(string);
					//Bannen
					BanEx(i, "Jetpack Cheat");
				}
			}
		}
		//Anti Money Cheat
		if(GetPlayerMoney(i) > 0 && (!noacheat))
		{
			if(sStats[i][sAdminlevel] > 0)
			{
				format(string, sizeof(string), "Warnung: %s[%d] ist im Verdacht Geld zu cheaten! (Summe: %d)", GetName(i), i, GetPlayerMoney(i));
				SendAdminMessage(Rot, string);

				new const old_money = GetPlayerEuros(i);
				ResetPlayerEuro(i), GivePlayerEuro(i, old_money);
				ResetPlayerMoney(i);
			}
			else
			{
				format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Geld Cheat | Summe: %d", GetName(i),GetPlayerMoney(i));
				SendClientMessageToAll(Rot, string);

				new const old_money = GetPlayerEuros(i);
				ResetPlayerEuro(i), GivePlayerEuro(i, old_money);
				ResetPlayerMoney(i);
				TogglePlayerControllable(i, false);
				//Loggen
				format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gebannt. Grund: Geld Cheat",day,month,year,Hour,Minute,Second,GetName(i));
				CheatLog(string);
				//Bannen
				BanEx(i, "Geld Cheat");
			}
		}
		//Position ermitteln
		GetPlayerPos(i, xxx, yyy, zzz);
		CheatPosX[i] = xxx;
		CheatPosY[i] = yyy;
		CheatPosZ[i] = zzz;
		//Rüstung abrufen
		GetPlayerArmour (i, fvar);
		if (fvar < pArmour[i])
		pArmour[i] = fvar;
		//Andeere Sachen die nicht zum Anticheat gehören
		//Anti CBug
		new Keys, ud, lr;
		GetPlayerKeys(i, Keys, ud, lr);
		if(CheckCrouch[i] == 1)
		{
			switch(WeaponID[i])
			{
				case 23..25, 27, 29..34, 41:
				{
					if((Keys & KEY_CROUCH) && !((Keys & KEY_FIRE) || (Keys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK )
					{
						if(Ammo[i][GetPlayerWeapon(i)] > GetPlayerAmmo(i))
						{
							OnPlayerCBug(i);
						}
					}
				}
			}
		}
		//Waffenschein
		if(WaffenscheinStep[i] >= 1 && GetPVarInt(i, "InWschein") == 1 && sStats[i][sWaffenschein] == 0)
		{
			if(GetPlayerWeapon(i) != 24)
			{
				SetPlayerArmedWeapon(i,24);
			}
			if(GetPlayerWeapon(i) == 0)
			{
				//Durchgefallen
				ClearChat(i);
				SendClientMessage(i,Gelb2,"Du bist leider durchgefallen, da du es nicht geschafft hast alle Atrappen zu treffen!");
				SendClientMessage(i,Weiß,"Du hast die Hälfte des Waffenschein Preises zurück bekommen!");
				ResetPlayerWeapons(i);
				GivePlayerEuro(i,5000);
				sStats[i][sWaffenschein] = 0;
				SetPVarInt(i, "InWschein", 0);
				ClearAnimations(i);
				SetCameraBehindPlayer(i);
				TogglePlayerControllable(i, true);
				SetPlayerPosEx(i,1497.4021,1306.4576,1093.2891);
				SetPlayerFacingAngle(i,89.5907);
				SetPlayerInterior(i, 3);
				SetPlayerVirtualWorld(i, 0);
				DeletePlayer3DTextLabel(i,Target);
				Getroffen[i] = 0;
				WaffenscheinSchuss[i] = 0;
				WaffenscheinStep[i] = 0;
				Targets[i] = 0;
			}
		}
		//Detektiv
		if(UsedFind[i] >= 1)
		{
			UsedFind[i] += 1;
			if(UsedFind[i] >= 60)
			{
				UsedFind[i] = 0;
			}
		}
		if(FindTime[i] > 0)
		{
			if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); }
			else
			{
				format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				FindTime[i] += 1;
			}
		}
		//Slotmachine
		rdy=!rdy;
		if(rdy)
		{
			TextDrawSetString(ReadyText,"~w~Setze deinen ~y~Einsatz~w~!~n~~b~ ~k~~PED_SPRINT~ ~w~- ~g~spielen~n~~b~~k~~VEHICLE_ENTER_EXIT~ ~w~- ~r~beenden~n~~b~~k~~PED_JUMPING~ ~w~- ~y~Einsatz erhoehen");
		}
		else
		{
			TextDrawSetString(ReadyText,"_~n~~b~ ~k~~PED_SPRINT~ ~w~- ~g~spielen~n~~b~~k~~VEHICLE_ENTER_EXIT~ ~w~- ~r~beenden~n~~b~~k~~PED_JUMPING~ ~w~- ~y~Einsatz erhoehen");
		}
		//Premium Radius
		if(IsPlayerInZonee(i,-2580.811, 1669.936, -2008.595, 2113.696))
		{
			if (sStats[i][sPremium] < 1)
			{
				if(sStats[i][sAdminlevel] > 0)
				{
					return 1;
				}
				if(IsPlayerNPC(i)) return 1;
				GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~w~Du bist kein ~r~Premium",3000, 5);
				SetPlayerPosEx(i,-2595.4509,2245.3042,4.9844);
				SetPlayerFacingAngle(i,224.6488);
			}
		}
		//Admin Radius
		if(IsPlayerInZonee(i,2497.562, 2633.674, 2716.233, 2846.418))
		{
			if (sStats[i][sAdminlevel] < 1)
			{
				if(IsPlayerNPC(i)) return 1;
				GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~w~Du bist kein ~r~Administrator",3000, 5);
				PushPlayer(i, xxx+5, yyy+50);
			}
		}
		if (IsPlayerConnected (i) && !IsPlayerNPC(i)) //Fragen ob Spieler Connectet ist ?
		{
			//Nagelbänder
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				for(new ii = 0; ii < sizeof(SpikeInfo); ii++)
				{
					if(IsPlayerInRangeOfPoint(i, 3.0, SpikeInfo[ii][sX], SpikeInfo[ii][sY], SpikeInfo[ii][sZ]))
					{
						if(SpikeInfo[ii][sCreated] == 1)
						{
							new panels, doors, lightsss, tires;
							new carid = GetPlayerVehicleID(i);
							GetVehicleDamageStatus(carid, panels, doors, lightsss, tires);
							tires = encode_tires(1, 1, 1, 1);
							UpdateVehicleDamageStatus(carid, panels, doors, lightsss, tires);
							return 0;
						}
					}
				}
			}
			//Zoll LS /LV
			if(mautstelle[i] == 0 && !IsABoat(GetPlayerVehicleID(i)) && !IsAPlane(!IsABoat(GetPlayerVehicleID(i))) && sStats[i][sReisePass] != 1 && !IsACop(i))
			{
				//LV-LS
				if(IsPlayerInRangeOfPoint(i,15,1707.1208,418.0956,30.7846) || IsPlayerInRangeOfPoint(i,15,1698.6002,419.8175,30.7674) && sStats[i][sReisePass] != 1 && !IsAStaat(i) && mautstelle[i] == 0)
				{
					if(sStats[i][sWanteds] < 7)
					{
						sStats[i][sWanteds] +=1;
					}
					SetPlayerWantedLevel(i,sStats[i][sWanteds]);
					SetTimerEx("ResetMaustelle",31129,false,"d",i);
					SendClientMessage(i,COLOR_LIGHTRED,"Du hast die Mautstelle LS/LV ohne gültigen Reisepass überquert!");
					SendClientMessage(i,COLOR_LIGHTRED,"Die Mautstellenwächter haben dich dabei beobachtet und die Polizei alarmiert!");
					format(string, sizeof(string), "Der Spieler %s hat die Mautstelle LS/LV illegal überquert.",GetName(i));
					SendRadioMessage(1,COLOR_DBLUE,string);
					mautstelle[i] = 1;
					return 1;
				}
				//BS-LV
				if(IsPlayerInRangeOfPoint(i,15,-2266.8726,2672.6206,55.4017) || IsPlayerInRangeOfPoint(i,17,-2271.8284,2643.5769,55.4297) && sStats[i][sReisePass] != 1 && !IsAStaat(i) && mautstelle[i] == 0)
				{
					if(IsPlayerInAnyVehicle(i) && Kennzeichen[GetPlayerVehicleID(i)] == 0) //Tüv abfrage
					{
						return 1;
					}
					if(sStats[i][sWanteds] < 7)
					{
						sStats[i][sWanteds] +=1;
					}
					SetPlayerWantedLevel(i,sStats[i][sWanteds]);
					SetTimerEx("ResetMaustelle",31129,false,"d",i);
					SendClientMessage(i,COLOR_LIGHTRED,"Du hast die Mautstelle BS/LV ohne gültigen Reisepass überquert!");
					SendClientMessage(i,COLOR_LIGHTRED,"Die Mautstellenwächter haben dich dabei beobachtet und die Polizei alarmiert!");
					format(string, sizeof(string), "Der Spieler %s hat die Mautstelle BS/LV illegal überquert.",GetName(i));
					SendRadioMessage(1,COLOR_DBLUE,string);
					mautstelle[i] = 1;
					return 1;
				}
				//LV-SF
				if(IsPlayerInRangeOfPoint(i,15,-1312.7072,911.5247,46.1799) || IsPlayerInRangeOfPoint(i,15,-1319.2623,918.5071,46.1638) && sStats[i][sReisePass] != 1 && !IsAStaat(i) && mautstelle[i] == 0 && sStats[i][sJob] != 5)
				{
					if(sStats[i][sWanteds] < 7)
					{
						sStats[i][sWanteds] +=1;
					}
					SetPlayerWantedLevel(i,sStats[i][sWanteds]);
					SetTimerEx("ResetMaustelle",31129,false,"d",i);
					SendClientMessage(i,COLOR_LIGHTRED,"Du hast die Mautstelle SF/LV ohne gültigen Reisepass überquert!");
					SendClientMessage(i,COLOR_LIGHTRED,"Die Mautstellenwächter haben dich dabei beobachtet und die Polizei alarmiert!");
					format(string, sizeof(string), "Der Spieler %s hat die Mautstelle SF/LV illegal überquert.",GetName(i));
					SendRadioMessage(1,COLOR_DBLUE,string);
					mautstelle[i] = 1;
					return 1;
				}
			}
			//Blitzer
			new car = GetPlayerVehicleID(i);
			if(!IsPlayerConnected(i)) continue;
			if(!IsPlayerInAnyVehicle(i)) continue;
			if(!IsACopCar(car) && !IsAPlane(car) && !IsABoat(car) && !IsAFahrrad(car) && !IsSupportCar(car) && spawncar_job[car] != 4)
			{
				if(GetPVarInt(i,"PlayerHasBeenFlashed") == 1)
				{
					continue;
				} else if (GetPVarInt(i,"PlayerHasBeenFlashed") == 2)
				{
					DeletePVar(i,"PlayerHasBeenFlashed");
					continue;
				}
				for(new b = 0;b<currentid +1;b++)
				{
					if(SpeedCameras[b][_active] == false) continue;
					if(IsPlayerInRangeOfPoint(i,SpeedCameras[b][_range],SpeedCameras[b][_x],SpeedCameras[b][_y],SpeedCameras[b][_z]))
					{
						new speed = floatround(GetVehicleSpeed(GetPlayerVehicleID(i),0));
						new limit = SpeedCameras[b][_limit];
						if(speed > limit)
						{
							TextDrawShowForPlayer(i,flash);
							PlayerPlaySound(i, 1132, 0.0, 0.0, 0.0);
							SetPVarInt(i,"PlayerHasBeenFlashed",1);
							SetTimerEx("RemoveFlash",CAMERA_FLASH_TIME,false,"i",i);
							if(GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleStarted[car] == 1)
							{
								if(SpeedCameras[b][_usemph] == 0)
								{
								} else {
									SendClientMessageEx(i,0xFF1E00FF,"sisis","Du fährst zu schnell! du wurdest geblitzt",speed,"MP/H wären erlaubt gewesen zu fahren",limit, "MP/H.");
									SendClientMessageEx(i,0xFF1E00FF,"sis","Du musst eine Strafe von ",speed+31," bezahlen.");
								}
								if(GetPlayerEuros(i) > speed)
								{
									SendClientMessageEx(i,COLOR_LIGHTRED,"sisis","Du fährst zu schnell! du wurdest geblitzt ",speed," KM/H, erlaubt gewesen wären: ",limit, " KM/H.");
									SendClientMessageEx(i,COLOR_LIGHTRED,"sis","Du musst eine Strafe von ",speed+31," bezahlen.");
									SendClientMessage(i,COLOR_LIGHTRED,"Außerdem hast du einen Punkt in Bayside dazubekommen!");
									GivePlayerEuro(i, - speed+31);
									Staatskasse+=speed+31;
									sStats[i][sbap] +=1;
								}
								else
								{
									if(sStats[i][sWanteds] < 6)
									{
										SendClientMessageEx(i,COLOR_LIGHTRED,"sisis","Du fährst zu schnell! du wurdest geblitzt ",speed," KM/H, erlaubt gewesen wären: ",limit, " KM/H.");
										SendClientMessageEx(i,COLOR_LIGHTRED,"sis","Als Strafe hast du ein Wanted erhalten!");
										SendClientMessage(i,COLOR_LIGHTRED,"Außerdem hast du einen Punkt in Bayside dazubekommen!");
										sStats[i][sWanteds] += 1;
										SetPlayerWantedLevel(i,sStats[i][sWanteds]);
										format(string, sizeof(string), "Der Spieler %s wurde geblitzt! [%d KM/H].",GetName(i),speed);
										SendRadioMessage(1,COLOR_DBLUE,string);
									}
								}

							}
						}
					}
				}
			}
			//Feuersystem
			if(!IsPlayerConnected(i) || IsPlayerNPC(i)) { continue; }
			if(PlayerOnFire[i] && !CanPlayerBurn(i, 1))
			{ StopPlayerBurning(i); }
			if(Pissing_at_Flame(i) != -1 || Aiming_at_Flame(i) != -1)
			{
				if(IsAFW(i))
				{
					GameTextForPlayer(i,"~n~~n~~n~~n~~n~~n~~r~Feuer ~w~in Sicht",5500, 5);
				}
				if(!ExtTimer[i] && ((Aiming_at_Flame(i) != -1 && Pressing(i) & KEY_FIRE) || Pissing_at_Flame(i) != -1))
				{
					new value, time, Float:x, Float:y, Float:z;
					if(Pissing_at_Flame(i) != -1)
					{
						value = Pissing_at_Flame(i);
						time = EXTINGUISH_TIME_PEEING;
					}
					else if(Aiming_at_Flame(i) != -1)
					{
						value = Aiming_at_Flame(i);
						if(GetPlayerWeapon(i) == 41)
						{
							CreateExplosion(Flame[value][Flame_x], Flame[value][Flame_y], Flame[value][Flame_z], 2, 5);
							continue;
						}
						if(IsPlayerInAnyVehicle(i))
						{
							time = EXTINGUISH_TIME_VEHICLE;
						}
						else
						{
							time = EXTINGUISH_TIME_ONFOOT;
						}
					}
					if(value < -1) { time = EXTINGUISH_TIME_PLAYER; }
					time *= 700;
					if(value >= -1)
					{
						x = Flame[value][Flame_x];
						y = Flame[value][Flame_y];
						z = Flame[value][Flame_z];
						DestroySmoke(value);
						Flame[value][Smoke][0] = CreateDynamicObject(18727, x, y, z, 0.0, 0.0, 0.0);
						Flame[value][Smoke][1] = CreateDynamicObject(18727, x+1, y, z, 0.0, 0.0, 0.0);
						Flame[value][Smoke][2] = CreateDynamicObject(18727, x-1, y, z, 0.0, 0.0, 0.0);
						Flame[value][Smoke][3] = CreateDynamicObject(18727, x, y+1, z, 0.0, 0.0, 0.0);
						Flame[value][Smoke][4] = CreateDynamicObject(18727, x, y-1, z, 0.0, 0.0, 0.0);
						SetTimerEx("DestroySmoke", time, 0, "d", value);
					}
					ExtTimer[i] = SetTimerEx("FireTimer", time, 0, "dd", i, value);
				}
			}
			if(CanPlayerBurn(i) && IsAtFlame(i)) { SetPlayerBurn(i); }
			new Float:x, Float:y, Float:z;
			if(i != i && IsPlayerConnected(i) && !IsPlayerNPC(i))
			{
				if(CanPlayerBurn(i) && PlayerOnFire[i] && !PlayerOnFire[i])
				{
					GetPlayerPos(i, x, y, z);
					if(IsPlayerInRangeOfPoint(i, 1, x, y, z))
					{
						SetPlayerBurn(i);
					}
				}
			}
			//Speedometer
			UpdateSpeedometer(i);
		}
	}
}
return 1;
}

//Fahrzeug System
forward CreateServerVehicle(interior,modelid,Float:xxX,Float:y,Float:zzZ,Float:R,color1,color2,jobid);
public CreateServerVehicle(interior,modelid,Float:xxX,Float:y,Float:zzZ,Float:R,color1,color2,jobid)
{
	new v,string[128];
	v = AddStaticVehicleEx(modelid,Float:xxX,Float:y,Float:zzZ,Float:R,color1,color2,120000000);
	spawncar_job[v] = jobid;
	spawncar_interior[v] = interior;
	new engine,lightss,alarm,doors,bonnet,boot,objective;
	if(interior != 0)
	{
		LinkVehicleToInterior(v, interior);
	}
	if(jobid == 1)
	{
		pk+=1;
	    format(string, sizeof(string), "BSPD - %d",pk);
	    SetVehicleNumberPlate(v,string);
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 3)
	{
		bmck+=1;
	    format(string, sizeof(string), "BSMC - %d",bmck);
	    SetVehicleNumberPlate(v,string);
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 4)
	{
	    SetVehicleNumberPlate(v,"Newstime");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 5)
	{
 		GetVehicleParamsEx(v,engine,lightss,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(v,engine,lightss,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
	    SetVehicleNumberPlate(v,"MS-14");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 6)
	{
	    GetVehicleParamsEx(v,engine,lightss,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(v,engine,lightss,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
	    SetVehicleNumberPlate(v,"Crip or Die");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 102)
	{
	    SetVehicleNumberPlate(v,"Wohnwagen");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 101)
	{
	    SetVehicleNumberPlate(v,"Admin");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 100)
	{
	    SetVehicleNumberPlate(v,"Admin");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 99)
	{
	    SetVehicleNumberPlate(v,"Zivilist");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 98)
	{
	    SetVehicleNumberPlate(v,"Feuerwehr");
	    SetVehicleHealth(v,1500.0);
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 97)
	{
	    SetVehicleNumberPlate(v,"Mechaniker");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 96)
	{
	    SetVehicleNumberPlate(v,"Drift");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 95)
	{
	    SetVehicleNumberPlate(v,"Fahrschule");
		VehicleStarted[v] = 1;
		SetVehicleParamsEx(v,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
		Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
		Kennzeichen[v] = 1;
	}
	if(jobid == 94)
	{
	    SetVehicleNumberPlate(v,"Fahrschule");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 93)
	{
	    SetVehicleNumberPlate(v,"Farmer");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 92)
	{
	    SetVehicleNumberPlate(v,"Event");
		VehicleStarted[v] = 1;
		SetVehicleParamsEx(v,VEHICLE_PARAMS_ON,lightss,alarm,doors,bonnet,boot,objective);
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    Kennzeichen[v] = 1;
	}
	if(jobid == 91)
	{
	    SetVehicleNumberPlate(v,"Spedition");
	    Tankmenge[v] = GasMax[GetVehicleModel(v)-400];
	    PlayerHaul[v][pLoad] = 0;
	    PlayerHaul[v][pBenzin] = 0;
	    Kennzeichen[v] = 1;
		if(GetVehicleModel(v) == 440 || GetVehicleModel(v) == 459)
	    {
	        PlayerHaul[v][pCapasity] = 150;
	    }
   		if(GetVehicleModel(v) == 414)
	    {
	        PlayerHaul[v][pCapasity] = 200;
	    }
   		if(GetVehicleModel(v) == 403)
	    {
	        PlayerHaul[v][pCapasity] = 250;
	    }
	}
	return v;
}

//IsAtWA
forward IsAtWA(playerid);
public IsAtWA(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,1.0,-2574.1035,2436.0068,16.0398) || IsPlayerInRangeOfPoint(playerid,1.0,-2547.7634,2309.2964,4.9844))
	{//1+2
		return 1;
	}
		if(IsPlayerInRangeOfPoint(playerid,1.0,-2397.5027,2223.2363,4.9844) || IsPlayerInRangeOfPoint(playerid,1.0,-2345.6057,2392.2632,6.1081))
	{//3+4
		return 1;
	}
		if(IsPlayerInRangeOfPoint(playerid,1.0,-2429.7532,2473.4556,13.7410) || IsPlayerInRangeOfPoint(playerid,1.0,-2429.7532,2473.4556,13.7410))
	{//5
		return 1;
	}
	return 0;
}

//IsAtBar
forward IsAtBar(playerid);
public IsAtBar(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,2.5,499.8167,-20.7163,1000.6797) || IsPlayerInRangeOfPoint(playerid,3.0,-2479.9958,2227.1008,10.8202))
	{//Calligulas - BSN Bar
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,7.5,499.8167,-20.7163,1000.6797) || IsPlayerInRangeOfPoint(playerid,8.5,1955.3680,1018.1191,992.4688) || IsPlayerInRangeOfPoint(playerid,9.5,1945.3640,1017.4532,992.4688))
	{//Casino Bar 1+2
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.5,968.8604,-47.2961,1001.1172) || IsPlayerInRangeOfPoint(playerid,3.5,3141.7996,-3003.4907,19.6954) || IsPlayerInRangeOfPoint(playerid,2.5,968.8604,-47.2961,1001.1172))
	{//Adminbase + Kirche + f
		return 1;
	}
	return 0;
}

//IsAtSlotMachine
forward IsAtSlotmachine(playerid);
public IsAtSlotmachine(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,2.0,1965.8586,1037.4901,992.4688) || IsPlayerInRangeOfPoint(playerid,2.0,1963.8291,1037.0765,992.4688) || IsPlayerInRangeOfPoint(playerid,2.0,1961.2910,1042.9292,992.4688))
	{
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,1963.0018,1044.1005,992.4688) || IsPlayerInRangeOfPoint(playerid,2.0,1958.0819,1049.0446,992.4688) || IsPlayerInRangeOfPoint(playerid,2.0,1956.8635,1047.3711,992.4688))
	{
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,1963.8270,998.5135,992.4745) || IsPlayerInRangeOfPoint(playerid,2.0,1965.8623,998.1885,992.4688) || IsPlayerInRangeOfPoint(playerid,2.0,1963.0648,991.4611,992.4688))
	{
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,1961.3153,992.5781,992.4688) || IsPlayerInRangeOfPoint(playerid,2.0,1956.9939,988.2781,992.4688) || IsPlayerInRangeOfPoint(playerid,2.0,1958.2095,986.6071,992.4688))
	{
		return 1;
	}
	return 0;
}

//IsAtPokerAutomat
forward IsAtPokerAutomat(playerid); //ty an smeti für das Pokersystem
public IsAtPokerAutomat(playerid)
{
	for(new i = 0; i < sizeof(PokerPositions); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,PokerPositions[i][0],PokerPositions[i][1],PokerPositions[i][2]))
		{
			return 1;
		}
	}
	return 0;
}

//IsAtZelle
forward IsAtZelle(playerid);
public IsAtZelle(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,6.0,1557.4146,-1654.7910,1718.9063) || IsPlayerInRangeOfPoint(playerid,6.0,1557.2992,-1662.8873,1718.9063))
	{
		return 1;
	}
	return 0;
}

//IsAtAngel
forward IsAtAngel(playerid);
public IsAtAngel(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,4.0,-2328.9043,2327.6016,3.4975) || IsPlayerInRangeOfPoint(playerid,4.0,-2328.7139,2322.2063,3.4975) || IsPlayerInRangeOfPoint(playerid,4.0,-2328.6992,2304.2073,3.5000))
	{
		return 1;
	}
	return 0;
}

//IsAtSeinHaus
forward IsAtHaus(playerid);
public IsAtHaus(playerid)
{
	if(sStats[playerid][sHaus] != 255)
	{
	    new i = sStats[playerid][sHaus];
		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || IsPlayerInRangeOfPoint(playerid,5,HouseInt_Spawn_X[HouseInfo[i][hInteriorID]], HouseInt_Spawn_Y[HouseInfo[i][hInteriorID]],HouseInt_Spawn_Z[HouseInfo[i][hInteriorID]]))
		{
		    return 1;
		}
	}
	return 0;
}

//IsAtATM
forward IsAtATM(playerid);
public IsAtATM(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,2.0,1417.7025,-981.1413,1639.7843) || IsPlayerInRangeOfPoint(playerid,2.0,1421.2108,-981.1113,1639.7843) || IsPlayerInRangeOfPoint(playerid,2.0,1424.5815,-981.1927,1639.7843))
	{
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,-2335.2368,2357.8799,5.1844) || IsPlayerInRangeOfPoint(playerid,2.0,-2477.4395,2240.3604,4.8435) || IsPlayerInRangeOfPoint(playerid,2.0,1424.5815,-981.1927,1639.7843))
	{
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid,2.0,-2491.8936,2358.4924,10.2765))
	{
		return 1;
	}
	return 0;
}

//IsAtRestaurant
forward IsAtRestaurant(playerid);
public IsAtRestaurant(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,377.3739,-67.4481,1001.5078) || IsPlayerInRangeOfPoint(playerid,4.0,373.6567,-118.0272,1002.5215))
		{//Burgershot + Pizzaladen
			return 1;
		}
	}
	return 0;
}

//IsAtZeitung
forward IsAtZeitung(playerid);
public IsAtZeitung(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,-2626.5479,2249.7253,8.1624) || IsPlayerInRangeOfPoint(playerid,2.0,-2244.0732,2336.3325,4.9680) || IsPlayerInRangeOfPoint(playerid,2.0,-2467.3345,2240.2593,4.7897))
		{//Zeitungsstände
			return 1;
		}
	}
	return 0;
}

//IsAtPfand
forward IsAtPfand(playerid);
public IsAtPfand(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,-2488.0977,2235.1609,4.9948) || IsPlayerInRangeOfPoint(playerid,2.0,-2337.4124,2352.0017,5.0846) || IsPlayerInRangeOfPoint(playerid,2.0,-2487.9934,2535.9775,18.0562))
		{//Pfandpunkte
			return 1;
		}
	}
	return 0;
}

//IsAtAD
forward IsAtAD(playerid);
public IsAtAD(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,-1506.5461,1001.1448,7.1875) || IsPlayerInRangeOfPoint(playerid,2.0,-2478.0146,2237.2798,4.8428) || IsPlayerInRangeOfPoint(playerid,2.0,-2243.7861,2331.8669,4.9676))
		{//AD Punkte
			return 1;
		}
	}
	return 0;
}

//IsAtBaum
forward IsAtBaum(playerid);
public IsAtBaum(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,-2503.89990234,2336.69995117,4.09999990) || IsPlayerInRangeOfPoint(playerid,2.0,-2387.30004883,2339.69995117,4.09999990) || IsPlayerInRangeOfPoint(playerid,2.0,-2536.69995117,2272.50000000,4.30000019))
		{//Baum 24/7 + Baum Spedition + Baum PFerderennbahn
			return 1;
		}
	}
	return 0;
}

//IsAtTanke
forward IsAtTanke(playerid);
public IsAtTanke(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,4.0,-2325.1433,2366.5344,5.1675) || IsPlayerInRangeOfPoint(playerid,4.0,-2324.1099,2359.7986,4.9973) || IsPlayerInRangeOfPoint(playerid,6.0,2530.9690,2712.4160,10.8203) || IsPlayerInRangeOfPoint(playerid,4.0,-1896.6831,251.7451,41.0469))
		{//Tanke Bayside + Tanke Adminbase + SF Gangautohaus
			return 1;
		}
	}
	return 0;
}

//Bsn Essen bekommen
forward GetBsn(bot,playerid);
public GetBsn(bot,playerid)
{
	new Float:Leben;
	GetPlayerHealth(playerid,Leben);
	new geld;
	geld = GetPlayerEuros(playerid);
	BsnMenBusy = 0;
	if(!strcmp(PlayerOrder[playerid],"KidsMenü",true))
	{
		if(geld < 12)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (12)!");
			return 1;
		}
		GivePlayerEuro(playerid, -12);
		if(Leben + 12 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Burger Shot: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+12);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	if(!strcmp(PlayerOrder[playerid],"MaxiMenü",true))
	{
		if(geld < 16)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (16)!");
			return 1;
		}
		GivePlayerEuro(playerid, -16);
		if(Leben + 16 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+16);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	if(!strcmp(PlayerOrder[playerid],"Cheeseburger ohne Cheese",true))
	{
		if(geld < 20)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (20)!");
			return 1;
		}
		GivePlayerEuro(playerid, -20);
		if(Leben + 20 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+18);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	if(!strcmp(PlayerOrder[playerid],"Salat",true))
	{
		if(geld < 25)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (25)!");
			return 1;
		}
		GivePlayerEuro(playerid, -25);
		if(Leben + 25 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+25);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	if(!strcmp(PlayerOrder[playerid],"KingMenü",true))
	{
		if(geld < 30)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (30)!");
			return 1;
		}
		GivePlayerEuro(playerid, -30);
		if(Leben + 30 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00}Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+30);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Gruen,"{FFFFFF}Burger Shot: {FFFF00}Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	BizzInfo[7][bProducts] -= 15;
	BizzInfo[7][bTill] += 20;
	SetPlayerChatBubble(bot,"Tatjana: {FFFFFF}Hier deine Bestellung!",0xFFFF00DD,35.0,3000);
	ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 0);
	return 1;
}

//Pizza Essen bekommen
forward GetPizza(bot,playerid);
public GetPizza(bot,playerid)
{
	new Float:Leben;
	GetPlayerHealth(playerid,Leben);
	new geld;
	geld = GetPlayerEuros(playerid);
	PizzaMenBusy = 0;
	if(!strcmp(PlayerOrder[playerid],"Margarita",true))
	{
		if(geld < 12)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (12)!");
			return 1;
		}
		GivePlayerEuro(playerid, -12);
		if(Leben + 12 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+12);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	if(!strcmp(PlayerOrder[playerid],"Salami",true))
	{
		if(geld < 16)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (16)!");
			return 1;
		}
		GivePlayerEuro(playerid, -16);
		if(Leben + 16 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+16);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	if(!strcmp(PlayerOrder[playerid],"Thunfisch",true))
	{
		if(geld < 20)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (20)!");
			return 1;
		}
		GivePlayerEuro(playerid, -20);
		if(Leben + 20 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+18);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	if(!strcmp(PlayerOrder[playerid],"Peperoni",true))
	{
		if(geld < 25)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (25)!");
			return 1;
		}
		GivePlayerEuro(playerid, -25);
		if(Leben + 25 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+25);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	if(!strcmp(PlayerOrder[playerid],"Hawaii",true))
	{
		if(geld < 30)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (30)!");
			return 1;
		}
		GivePlayerEuro(playerid, -30);
		if(Leben + 30 >=100)
		{
			SetPlayerHealth(playerid,100);
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SendClientMessage(playerid,Weiß,"Du hast zuviel gegessen, und musst dich übergeben!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
		else
		{
			SetPlayerHealth(playerid,Leben+30);
			ApplyAnimation(playerid, "FOOD","EAT_Burger", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Well Stacked Pizza: {FFFF00} Danke für ihre Bestellung, beehren Sie uns bald wieder!");
			SetTimerEx("ClearBsn",4799,false,"i",playerid);
		}
	}
	BizzInfo[7][bProducts] -= 16;
	BizzInfo[7][bTill] += 25;
	SetPlayerChatBubble(bot,"Hugo: {FFFFFF}Hier deine Pizza!",0xFFFF00DD,35.0,3000);
	ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 0);
	return 1;
}

//Kampf bekommen
forward GetKampf(bot,playerid);
public GetKampf(bot,playerid)
{
	new Float:Leben;
	GetPlayerHealth(playerid,Leben);
	new geld;
	geld = GetPlayerEuros(playerid);
	if(!strcmp(PlayerOrder[playerid],"Boxxen",true))
	{
		if(geld < 12)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (12)!");
			return 1;
		}
			GivePlayerEuro(playerid, -12);
			ApplyAnimation(playerid, "FIGHT_B","FightB_IDLE", 4.0, 0, 1, 1, 1, 0, 0);
			SendClientMessage(playerid,Weiß,"{FFFFFF}Norbert: {FFFF00} Du bist nun Profi des Kampfstiles Boxxen!");
			SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
			PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
			SetTimerEx("ClearKampf",4799,false,"i",playerid);
	}
	if(!strcmp(PlayerOrder[playerid],"Kungfu",true))
	{
		if(geld < 16)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (16)!");
			return 1;
		}
		GivePlayerEuro(playerid, -16);
		ApplyAnimation(playerid, "FIGHT_B","FightB_IDLE", 4.0, 0, 1, 1, 1, 0, 0);
		SendClientMessage(playerid,Weiß,"{FFFFFF}Norbert: {FFFF00} Du bist nun Profi des Kampfstiles Kungfu!");
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
		PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		SetTimerEx("ClearKampf",4799,false,"i",playerid);
	}
	if(!strcmp(PlayerOrder[playerid],"Ellbogen",true))
	{
		if(geld < 20)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (20)!");
			return 1;
		}
		GivePlayerEuro(playerid, -20);
		ApplyAnimation(playerid, "FIGHT_B","FightB_IDLE", 4.0, 0, 1, 1, 1, 0, 0);
		SendClientMessage(playerid,Weiß,"{FFFFFF}Norbert: {FFFF00} Du bist nun Profi des Kampfstiles Ellbogen!");
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
		PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		SetTimerEx("ClearKampf",4799,false,"i",playerid);
	}
	if(!strcmp(PlayerOrder[playerid],"Grabkick",true))
	{
		if(geld < 25)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (25)!");
			return 1;
		}
		GivePlayerEuro(playerid, -25);
		ApplyAnimation(playerid, "FIGHT_B","FightB_IDLE", 4.0, 0, 1, 1, 1, 0, 0);
		SendClientMessage(playerid,Weiß,"{FFFFFF}Norbert: {FFFF00} Du bist nun Profi des Kampfstiles Grabkick!");
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
		PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		SetTimerEx("ClearKampf",4799,false,"i",playerid);
	}
	if(!strcmp(PlayerOrder[playerid],"Kneehead",true))
	{
		if(geld < 30)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (30)!");
			return 1;
		}
		GivePlayerEuro(playerid, -30);
		ApplyAnimation(playerid, "FIGHT_B","FightB_IDLE", 4.0, 0, 1, 1, 1, 0, 0);
		SendClientMessage(playerid,Weiß,"{FFFFFF}Norbert: {FFFF00} Du bist nun Profi des Kampfstiles Kneehead!");
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
		PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
		SetTimerEx("ClearKampf",4799,false,"i",playerid);
	}
	SetPlayerChatBubble(bot,"Norbert: {FFFFFF}HUAARGHHH!",0xFFFF00DD,35.0,3000);
	ApplyAnimation(bot, "FIGHT_B","HitB_1", 4.0, 0, 1, 1, 1, 0, 0);
	SetTimerEx("ClearAnimationss",4799,false,"i",bot);
	return 1;
}

//ProxDetector
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i = 0; i < GetMaxPlayers(); i++)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return 1;
}


//Nachrichten an Newbies senden
forward SendNewbieMessage(color, string[], requireduty);
public SendNewbieMessage(color, string[], requireduty)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(sStats[i][sLevel] < 3 || sStats[i][sAdminlevel] > 0)
		{
			if(IsPlayerConnected(i))
			{
				if(requireduty == 1)
				{
					SendClientMessage(i, color, string);
				}
				else if(requireduty == 0)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}

//Nachrichten an Premiums senden
forward SendPremiumMessage(color, string[], requireduty);
public SendPremiumMessage(color, string[], requireduty)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(sStats[i][sPremium] == 1 || sStats[i][sAdminlevel] > 0)
		{
			if(IsPlayerConnected(i))
			{
				if(requireduty == 1)
				{
					SendClientMessage(i, color, string);
				}
				else if(requireduty == 0)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}

//Nachrichten an Admins senden
forward SendAdminMessage(color, string[]);
public SendAdminMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(sStats[i][sAdminlevel] > 0)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPVarInt(i, "Adminduty") == 1)
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
	return 1;
}

//Waffen Anticheat
forward GivePlayerWeaponEx(playerid,weaponid,ammo);
public GivePlayerWeaponEx(playerid,weaponid,ammo)
{
	PlayerWeapons[playerid][weaponid]=true;
	return GivePlayerWeapon(playerid,weaponid,ammo);
}

forward RealSpawn(playerid);
public RealSpawn(playerid)
{
	Spawned[playerid]=true;
}

//Gesichtscheck
forward GesichtsCheck(playerid);
public GesichtsCheck(playerid)
{
		if(GetPVarInt(playerid, "Gesicht") == 1 && sStats[playerid][sAlter] >= 18 && sStats[playerid][sPersonalausweis] == 1)
		{
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,Gelb,"OK, gehen Sie durch!");
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht") == 1 && sStats[playerid][sAlter] < 18)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du noch keine 18 Jahre alt bist!");
			SetPlayerPosEx(playerid,-2460.0989,2281.0029,4.9844);
			SetPlayerFacingAngle(playerid,92.8953);
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht") == 1 && sStats[playerid][sPersonalausweis] < 1)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du noch keinen Personalausweis hast!");
			SetPlayerPosEx(playerid,-2460.0989,2281.0029,4.9844);
			SetPlayerFacingAngle(playerid,92.8953);
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht") == 1 && sStats[playerid][sAlter] < 18 &&  sStats[playerid][sPersonalausweis] == 0)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du keinen Personalausweis hast!");
			SetPlayerPosEx(playerid,-2460.0989,2281.0029,4.9844);
			SetPlayerFacingAngle(playerid,92.8953);
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht") == 1 && sStats[playerid][sDrogen] > 0)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du Drogen dabei hast!");
			SetPlayerPosEx(playerid,-2460.0989,2281.0029,4.9844);
			SetPlayerFacingAngle(playerid,92.8953);
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht") == 1 && sStats[playerid][sBetrunken] > 0)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du betrunken bist!");
			SetPlayerPosEx(playerid,-2460.0989,2281.0029,4.9844);
			SetPlayerFacingAngle(playerid,92.8953);
			return 1;
		}
		else
		{
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,Gelb,"OK, gehen Sie durch!");
			return 1;
		}
}

//Pate Check
forward PateCheck(playerid);
public PateCheck(playerid)
{
		if(GetPVarInt(playerid, "APate") == 1 && sStats[playerid][sPersonalausweis] == 1 && !IsAStaat(playerid) && sStats[playerid][sLevel] > 1)
		{
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,Gelb,"OK, gehen Sie durch!");
			return 1;
		}
		if(GetPVarInt(playerid, "APate") == 1 && sStats[playerid][sSpielstunden] < 3)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht2", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Bodyguard weggeschubst, weil du noch keine 3 Spielstunden hast!");
			SetPlayerPosEx(playerid,-2381.2393,2439.9736,9.2430);
			SetPlayerFacingAngle(playerid,155.1115);
			return 1;
		}
		if(GetPVarInt(playerid, "APate") == 1 && IsAStaat(playerid))
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht2", 0);
			SendClientMessage(playerid,Gelb,"Du hast hier nichts zu suchen verschwinde!");
			SetPlayerPosEx(playerid,-2381.2393,2439.9736,9.2430);
			SetPlayerFacingAngle(playerid,155.1115);
			return 1;
		}
		else
		{
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,Gelb,"OK, gehen Sie durch!");
			return 1;
		}
}

//Gesichtscheck
forward GesichtsCheck2(playerid);
public GesichtsCheck2(playerid)
{
		if(GetPVarInt(playerid, "Gesicht2") == 1 && sStats[playerid][sAlter] >= 16 && sStats[playerid][sPersonalausweis] == 1)
		{
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,Gelb,"OK, gehen Sie durch!");
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht2") == 1 && sStats[playerid][sAlter] < 16)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht2", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du noch keine 16 Jahre alt bist!");
			SetPlayerPosEx(playerid,-2485.9341,2268.1409,4.9844);
			SetPlayerFacingAngle(playerid,180.4920);
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht2") == 1 && sStats[playerid][sPersonalausweis] < 1)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht2", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du noch keinen Personalausweis hast!");
			SetPlayerPosEx(playerid,-2485.9341,2268.1409,4.9844);
			SetPlayerFacingAngle(playerid,180.4920);
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht2") == 1 && sStats[playerid][sAlter] < 16 && sStats[playerid][sPersonalausweis] == 0)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht2", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du keinen Personalausweis hast!");
			SetPlayerPosEx(playerid,-2460.0989,2281.0029,4.9844);
			SetPlayerFacingAngle(playerid,92.8953);
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht2") == 1 && sStats[playerid][sDrogen] > 0)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht2", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du Drogen dabei hast!");
			SetPlayerPosEx(playerid,-2460.0989,2281.0029,4.9844);
			SetPlayerFacingAngle(playerid,92.8953);
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht2") == 1 && sStats[playerid][sBetrunken] > 0)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht2", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest vom Türsteher weggeschubst, weil du betrunken bist!");
			SetPlayerPosEx(playerid,-2460.0989,2281.0029,4.9844);
			SetPlayerFacingAngle(playerid,92.8953);
			return 1;
		}
		else
		{
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,Gelb,"OK, gehen Sie durch!");
			return 1;
		}
}

//Gesichtscheck
forward GesichtsCheck3(playerid);
public GesichtsCheck3(playerid)
{
	    new ammo,weapon;
	    new bot = GetNearestBot(playerid, 5);
	    GetPlayerWeaponData(playerid, 10, weapon, ammo);
		if(GetPVarInt(playerid, "Gesicht3") == 1 && weapon == 0 && ammo == 0 && sStats[playerid][sDrogen] == 0 && sStats[playerid][sBetrunken] == 0 && GetPVarInt(playerid, "Flugticket") == 1)
		{
			TogglePlayerControllable(playerid, true);
			SendClientMessage(playerid,Gelb,"OK, Sie dürfen passieren!");
			if(!strcmp(GetName(bot),"Jeremy",true))
			{
	    		ClearAnimations(bot);
			}
			return 1;
		}
		if(GetPVarInt(playerid, "Gesicht3") == 1 && GetPVarInt(playerid, "Flugticket") == 0)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht3", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest von der Kontrolle weggeschubst, weil du kein Flugticket hast!");
			SetPlayerPosEx(playerid,-2416.1257,2308.7815,4.2915);
			SetPlayerFacingAngle(playerid,84.4044);
			if(!strcmp(GetName(bot),"Jeremy",true))
			{
	    		ClearAnimations(bot);
			}
			return 1;
		}
		if(weapon > 1 && ammo > 1 && GetPVarInt(playerid, "Gesicht3") == 1 && GetPVarInt(playerid, "Flugticket") == 1)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht3", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest von der Kontrolle weggeschubst, weil du Waffen bei dir hast!");
			SetPlayerPosEx(playerid,-2416.1257,2308.7815,4.2915);
			SetPlayerFacingAngle(playerid,84.4044);
			if(!strcmp(GetName(bot),"Jeremy",true))
			{
	    		ClearAnimations(bot);
			}
			return 1;
		}
		if(sStats[playerid][sDrogen] > 0 && GetPVarInt(playerid, "Gesicht3") == 1 && GetPVarInt(playerid, "Flugticket") == 1)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht3", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest von der Kontrolle weggeschubst, weil du Drogen bei dir hast!");
			SetPlayerPosEx(playerid,-2416.1257,2308.7815,4.2915);
			SetPlayerFacingAngle(playerid,84.4044);
			if(!strcmp(GetName(bot),"Jeremy",true))
			{
	    		ClearAnimations(bot);
			}
			return 1;
		}
		if(sStats[playerid][sPersonalausweis] < 1 && GetPVarInt(playerid, "Gesicht3") == 1 && GetPVarInt(playerid, "Flugticket") == 1)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht3", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest von der Kontrolle weggeschubst, weil du keinen Personalausweis hast!");
			SetPlayerPosEx(playerid,-2416.1257,2308.7815,4.2915);
			SetPlayerFacingAngle(playerid,84.4044);
			if(!strcmp(GetName(bot),"Jeremy",true))
			{
	    		ClearAnimations(bot);
			}
			return 1;
		}
		if(sStats[playerid][sBetrunken] > 0 && GetPVarInt(playerid, "Gesicht3") == 1 && GetPVarInt(playerid, "Flugticket") == 1)
		{
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "Gesicht3", 0);
			SendClientMessage(playerid,Gelb,"Du wurdest von der Kontrolle weggeschubst, weil du Betrunken bist!");
			SetPlayerPosEx(playerid,-2416.1257,2308.7815,4.2915);
			SetPlayerFacingAngle(playerid,84.4044);
			if(!strcmp(GetName(bot),"Jeremy",true))
			{
	    		ClearAnimations(bot);
			}
			return 1;
		}
		return 1;
}

//Anti Spawnkill
forward SpawnKillSchutzende(playerid);
public SpawnKillSchutzende(playerid)
{
	if(GetPVarInt(playerid, "Spawnkill") == 1)
	{
		DeletePVar(playerid, "Spawnkill");
		SetPlayerHealth(playerid,100.0);
		Delete3DTextLabel(SpawnKilllabel[playerid]);
		SendClientMessage(playerid,Blau,"Der Spawnkillschutz wurde deaktiviert!");
	}
}

//Haussystem
forward CheckHaus(playerid);
public CheckHaus(playerid)
{
	new curdate = getdate();
	for(new h = 0; h < Houses_Index; h++)
	{
		if (strcmp(GetName(playerid), HouseInfo[h][hOwner], true) == 0)
		{
			HouseInfo[h][hDate] = curdate;
			SaveHaus();
		}
	}
	return 1;
}

forward Hausleer();
public Hausleer()
{
	new olddate;
	new string[100];
	new curdate = getdate();
	for(new h = 0; h < Houses_Index; h++)
	{
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9)
		{
			olddate = HouseInfo[h][hDate];
			if(curdate-olddate >= 12)
			{
				HouseInfo[h][hLock] = 1;
				HouseInfo[h][hRentabil] = 0;
				HouseInfo[h][hRent] = 0;
				HouseInfo[h][hCarlock] = 1;
				HouseInfo[h][hOwned] = 0;
				HouseInfo[h][hVec] = 589;
				HouseInfo[h][hVcol1] = -1;
				HouseInfo[h][hVcol2] = -1;
				strmid(HouseInfo[h][hOwner], "", 0, strlen(""), 255);
				format(string, sizeof(string), "Immobilien-Makler: Ein neues Haus ist verfügbar: %d",HouseInfo[h][hValue]);
				SendClientMessageToAll(Orange, string);
				SaveHaus();
			}
		}
	}
	return 1;
}

forward LoadHaus();
public LoadHaus()
{
	new arrCoords[31][64];
	new strFromFile2[180];
//	new string[260];
	new File: file = fopen("Sonstiges/Haeuser.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < Houses_Index)
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			HouseInfo[idx][hEntrancex] = floatstr(arrCoords[0]);
			HouseInfo[idx][hEntrancey] = floatstr(arrCoords[1]);
			HouseInfo[idx][hEntrancez] = floatstr(arrCoords[2]);
			HouseInfo[idx][hExitx] = floatstr(arrCoords[3]);
			HouseInfo[idx][hExity] = floatstr(arrCoords[4]);
			HouseInfo[idx][hExitz] = floatstr(arrCoords[5]);
			strmid(HouseInfo[idx][hOwner], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(HouseInfo[idx][hDiscription], arrCoords[7], 0, strlen(arrCoords[13]), 255);
			HouseInfo[idx][hValue] = strval(arrCoords[8]);
			HouseInfo[idx][hInt] = strval(arrCoords[9]);
			HouseInfo[idx][hLock] = strval(arrCoords[10]);
			HouseInfo[idx][hOwned] = strval(arrCoords[11]);
			HouseInfo[idx][hRooms] = strval(arrCoords[12]);
			HouseInfo[idx][hRent] = strval(arrCoords[13]);
			HouseInfo[idx][hRentabil] = strval(arrCoords[14]);
			HouseInfo[idx][hTakings] = strval(arrCoords[15]);
			HouseInfo[idx][hVec] = strval(arrCoords[16]);
			if(HouseInfo[idx][hVec] == 0)
			{
				HouseInfo[idx][hVec] = 589;
			}
			HouseInfo[idx][hVcol1] = strval(arrCoords[17]);
			HouseInfo[idx][hVcol2] = strval(arrCoords[18]);
			HouseInfo[idx][hDate] = strval(arrCoords[19]);
			HouseInfo[idx][hLevel] = strval(arrCoords[20]);
			HouseInfo[idx][hNitro] = strval(arrCoords[21]);
			HouseInfo[idx][hInteriorID] = strval(arrCoords[22]);
			HouseInfo[idx][hCarSpawnX] = floatstr(arrCoords[23]);
			HouseInfo[idx][hCarSpawnY] = floatstr(arrCoords[24]);
			HouseInfo[idx][hCarSpawnZ] = floatstr(arrCoords[25]);
			HouseInfo[idx][hCarSpawnRot] = floatstr(arrCoords[26]);
			HouseInfo[idx][hMaxMieter] = strval(arrCoords[27]);
			HouseInfo[idx][hMieter] = strval(arrCoords[28]);
			HouseInfo[idx][hCarlock] = strval(arrCoords[29]);
			CreateSellSchild(idx);
			UpdateHouseLabel(idx);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

forward SaveHaus();
public SaveHaus()
{
	new idx;
	new File: file2;
	while (idx < Houses_Index)
	{
		new coordsstring[180];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%f,%f,%f,%f,%d,%d,%d\n",
		HouseInfo[idx][hEntrancex],
		HouseInfo[idx][hEntrancey],
		HouseInfo[idx][hEntrancez],
		HouseInfo[idx][hExitx],
		HouseInfo[idx][hExity],
		HouseInfo[idx][hExitz],
		HouseInfo[idx][hOwner],
		HouseInfo[idx][hDiscription],
		HouseInfo[idx][hValue],
		HouseInfo[idx][hInt],
		HouseInfo[idx][hLock],
		HouseInfo[idx][hOwned],
		HouseInfo[idx][hRooms],
		HouseInfo[idx][hRent],
		HouseInfo[idx][hRentabil],
		HouseInfo[idx][hTakings],
		HouseInfo[idx][hVec],
		HouseInfo[idx][hVcol1],
		HouseInfo[idx][hVcol2],
		HouseInfo[idx][hDate],
		HouseInfo[idx][hLevel],
		HouseInfo[idx][hNitro],
		HouseInfo[idx][hInteriorID],
		HouseInfo[idx][hCarSpawnX],
		HouseInfo[idx][hCarSpawnY],
		HouseInfo[idx][hCarSpawnZ],
		HouseInfo[idx][hCarSpawnRot],
		HouseInfo[idx][hMaxMieter],
		HouseInfo[idx][hMieter],
		HouseInfo[idx][hCarlock]);
		if(idx == 0)
		{
			file2 = fopen("Sonstiges/Haeuser.cfg", io_write);
		}
		else
		{
			file2 = fopen("Sonstiges/Haeuser.cfg", io_append);
		}
		UpdateHouseLabel(idx);
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

forward ConnectBots();
public ConnectBots()
{
	ConnectNPC("PaulDerBarkeeper","barkeeper");
	ConnectNPC("Daniel","passa1");
	ConnectNPC("Joeline","passa2");
	ConnectNPC("Michaela","michaela");
	ConnectNPC("Christina","feuer");
	ConnectNPC("Jeremy","jeremy");
	ConnectNPC("Jackson","jackson");
	ConnectNPC("Susanna","binco");
	ConnectNPC("Tatjana","bugershot");
	ConnectNPC("Marie","cityhall");
	ConnectNPC("Anna","hotel");
	ConnectNPC("James","casino1");
	ConnectNPC("Semaj","casino2");
	ConnectNPC("Melanie","lotto");
	ConnectNPC("Charlie","ammu");
	ConnectNPC("Martin","shop");
	ConnectNPC("Leo","police");
	ConnectNPC("Hagermann","haga");
	ConnectNPC("Nils","nils");
	ConnectNPC("Laura","sekt");
	ConnectNPC("Stefania","stefa");
	ConnectNPC("Hugo","pizza");
	ConnectNPC("Norbert","kampf");
	ConnectNPC("Jan","bsnbar");
	ConnectNPC("Eddy","wohnwagen");
	ConnectNPC("Alberto","handy");
	ConnectNPC("AutoPate","derpate");
	ConnectNPC("Shootiii","shooti");
	ConnectNPC("Vivienn","vivien");
	ConnectNPC("Roman","kirchenbar");
	//Gangzones erstellen
	//Gangzones
	//Bunker
 	bunker = GangZoneCreate(-455.4371, 1261.211, -303.6248, 1448.057);
 	//Premiuminsel
  	premiumzone = GangZoneCreate(-2580.811, 1669.936, -2008.595, 2113.696);
 	//Adminbase
  	adminzone = GangZoneCreate(2497.562, 2633.674, 2716.233, 2846.418);
	//NODM Zone
	nodmzone = GangZoneCreate( -2650.878, 2253.83, -2592.488, 2300.542 );
  	//MS14 Base
   	ms14zone = GangZoneCreate(-2792.539, 61.49159, -2695.972, 168.0056);
   	//COD Base
 	cripzone = GangZoneCreate(-2483.524, -183.0962, -2421.721, -60.80231);
  	//Gangfahrzeuge
	START_FRAC();
	//AutoPate
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(!strcmp(GetName(i), "AutoPate", true ))
		{
		    TogglePlayerControllable(i, false);
			ApplyAnimation(i, "PED","SEAT_down", 4.0, 0, 1, 1, 1, 0, 0);
		}
	}
	return 1;
}

forward CreateHouseCar();
public CreateHouseCar()
{
	//Bots
	//Hotel 3D text updaten
	new string[128];
	format(string, sizeof(string), "[* {FFFFFF}Hotel {0C9BCB} *]\n[* {FFFFFF}Freie Zimmer %d von 8{0C9BCB} *]", Hotelzimmer);
	UpdateDynamic3DTextLabelText(IDsafeLabels[22], 0x0C9BCBFF, string);
	//Drogen 3D text updaten
	format(string, sizeof(string), "{FFFF00}Drogenstelle /getdrugs.\n{FFFFFF}Verfügbare Drogen: {FFFF00}0\n{FFFFFF}Preis pro Gramm: {FFFF00}500.", Drogenn);
	UpdateDynamic3DTextLabelText(drugss, 0x0C9BCBFF, string);
	//Andere Autos erstellen lassen
	//Hauscars
	new vec;
	for(new h = 0; h < Houses_Index; h++)
	{
		vec = HouseInfo[h][hVec];
		if(vec == 0)
		{
			vec = 589;
		}
		HouseInfo[h][hCID] = CreateServerVehicle(0,vec, HouseInfo[h][hCarSpawnX], HouseInfo[h][hCarSpawnY], HouseInfo[h][hCarSpawnZ]+0.5, HouseInfo[h][hCarSpawnRot], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], h+200);
		Tankmenge[HouseInfo[h][hCID]] = GasMax[vec-400];
		Kennzeichen[HouseInfo[h][hCID]] = 1;
		SetVehicleNumberPlate(HouseInfo[h][hCID], HouseInfo[h][hOwner]);
		SetVehicleLock(HouseInfo[h][hCID],1);
		HouseInfo[h][hCarlock] = 1;
		if(HouseInfo[h][hNitro] != 0)
		{
			if(CompatibleWithNitro(HouseInfo[h][hVec]))
			{
				if(HouseInfo[h][hNitro] == 1) { AddVehicleComponent(HouseInfo[h][hCID], 1009); } //Nitro 2x
				if(HouseInfo[h][hNitro] == 2) { AddVehicleComponent(HouseInfo[h][hCID], 1008); } //Nitro 5x
				if(HouseInfo[h][hNitro] == 3) { AddVehicleComponent(HouseInfo[h][hCID], 1010); } //Nitro 10x
			}
		}
	}
	return 1;
}

forward DefineHouseInteriors();
public DefineHouseInteriors() //0-7 kleine Wohnung, 10-20 zweistöckig, groß
{
	new idx; //0
	HouseInt_Spawn_X[idx] = 244.500000;
	HouseInt_Spawn_Y[idx] = 305.000000;
	HouseInt_Spawn_Z[idx] = 999.099975;
	HouseInt_Interior[idx] = 1;
	idx++;//1
	HouseInt_Spawn_X[idx] = 267.100006;
	HouseInt_Spawn_Y[idx] = 305.000000;
	HouseInt_Spawn_Z[idx] = 999.099975;
	HouseInt_Interior[idx] = 2;
	idx++;//2
	HouseInt_Spawn_X[idx] = 2464.100097;
	HouseInt_Spawn_Y[idx] = -1698.599975;
	HouseInt_Spawn_Z[idx] = 1013.500000;
	HouseInt_Interior[idx] = 2;
	idx++;//3
	HouseInt_Spawn_X[idx] = 386.100006;
	HouseInt_Spawn_Y[idx] = 1471.800048;
	HouseInt_Spawn_Z[idx] = 1080.099975;
	HouseInt_Interior[idx] = 15;
	idx++;//4
	HouseInt_Spawn_X[idx] = 261.000000;
	HouseInt_Spawn_Y[idx] = 1286.000000;
	HouseInt_Spawn_Z[idx] = 1080.199951;
	HouseInt_Interior[idx] = 4;
	idx++;//5
	HouseInt_Spawn_X[idx] = 745.299987;
	HouseInt_Spawn_Y[idx] = 1437.699951;
	HouseInt_Spawn_Z[idx] = 1102.699951;
	HouseInt_Interior[idx] = 6;
	idx++;//6
	HouseInt_Spawn_X[idx] = 376.299987;
	HouseInt_Spawn_Y[idx] = 1417.199951;
	HouseInt_Spawn_Z[idx] = 1081.300048;
	HouseInt_Interior[idx] = 15;
	idx++;//7
	HouseInt_Spawn_X[idx] = 300.8124;
	HouseInt_Spawn_Y[idx] = 305.9135;
	HouseInt_Spawn_Z[idx] = 1003.5391;
	HouseInt_Interior[idx] = 4;
	idx=10;//10
	HouseInt_Spawn_X[idx] = 27.100000;
	HouseInt_Spawn_Y[idx] = 1341.099975;
	HouseInt_Spawn_Z[idx] = 1084.300048;
	HouseInt_Interior[idx] = 10;
	idx++;//11
	HouseInt_Spawn_X[idx] = 23.000000;
	HouseInt_Spawn_Y[idx] = 1405.599975;
	HouseInt_Spawn_Z[idx] = 1084.400024;
	HouseInt_Interior[idx] = 5;
	idx++;//12
	HouseInt_Spawn_X[idx] = 235.300003;
	HouseInt_Spawn_Y[idx] = 1189.199951;
	HouseInt_Spawn_Z[idx] = 1080.199951;
	HouseInt_Interior[idx] = 3;
	idx++;//13
	HouseInt_Spawn_X[idx] = 447.000000;
	HouseInt_Spawn_Y[idx] = 1400.300048;
	HouseInt_Spawn_Z[idx] = 1084.300048;
	HouseInt_Interior[idx] = 2;
	idx++;//14
	HouseInt_Spawn_X[idx] = 234.199996;
	HouseInt_Spawn_Y[idx] = 1064.900024;
	HouseInt_Spawn_Z[idx] = 1084.199951;
	HouseInt_Interior[idx] = 6;
	idx++;//15
	HouseInt_Spawn_X[idx] = 140.399993;
	HouseInt_Spawn_Y[idx] = 1370.300048;
	HouseInt_Spawn_Z[idx] = 1083.800048;
	HouseInt_Interior[idx] = 5;
	idx++;//16
	HouseInt_Spawn_X[idx] = 489.700012;
	HouseInt_Spawn_Y[idx] = 1402.500000;
	HouseInt_Spawn_Z[idx] = 1080.199951;
	HouseInt_Interior[idx] = 2;
	idx++;//17
	HouseInt_Spawn_X[idx] = 83.300003;
	HouseInt_Spawn_Y[idx] = 1324.699951;
	HouseInt_Spawn_Z[idx] = 1083.800048;
	HouseInt_Interior[idx] = 9;
	idx++;//18
	HouseInt_Spawn_X[idx] = 225.600006;
	HouseInt_Spawn_Y[idx] = 1023.500000;
	HouseInt_Spawn_Z[idx] = 1084.000000;
	HouseInt_Interior[idx] = 7;
	idx++;//19
	HouseInt_Spawn_X[idx] = 2324.399902;
	HouseInt_Spawn_Y[idx] = -1147.500000;
	HouseInt_Spawn_Z[idx] = 1050.699951;
	HouseInt_Interior[idx] = 12;
	idx++;//20 _ Mad Doggs Villa
	HouseInt_Spawn_X[idx] = 1299.122436;
	HouseInt_Spawn_Y[idx] = -794.918884;
	HouseInt_Spawn_Z[idx] =1084.007812;
	HouseInt_Interior[idx] = 5;
	return 1;
}

//Split Funktion
forward split(const strsrc[], strdest[][], delimiter);
public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

//Endemute
forward EndMute(playerid);
public EndMute(playerid)
{
	if(sStats[playerid][sMute] == 1 && GetPVarInt(playerid, "Beleidigung") == 99)
	{
		sStats[playerid][sMute] = 0;
		SendClientMessage(playerid,Rot,"Du wurdest automatisch vom Server endmutet!");
		SetPVarInt(playerid, "Beleidigung", 0);
	}
	return 1;
}

//Speicherungs Funktion
forward Speicherung();
public Speicherung()
{
	new string[128];
	new hour,minute,second;
	gettime(hour,minute,second);
	format(string, sizeof(string), "Der komplette Server wurde gespeichert!");
	SendAdminMessage(Rot, string);
	//Gangautos
	SaveFactionCars(false);
	//Business speichern
	SaveBizz();
 	for(new p = 0; p < MAX_PLAYERS; p++)
 	{
		if (IsPlayerConnected (p) && !IsPlayerNPC(p))
		{
			SaveSpieler(p); // Spieler speichern
	  		//Alle Fahrzeuge respawnen
	  		RespawnAllVehicles();
			//Hinweis auf die Verlinkung
			if(sStats[p][sLink] == 0)
			{
				SendClientMessage(p,Gelb,"Wichtige Nachricht : Du hast deinen Account noch nicht mit unserem UCP verlinkt!");
				SendClientMessage(p,Gelb,"Dadurch sind dir einige Funktionen nicht erlaubt (gesperrt)!");
				SendClientMessage(p,Gelb,"Du kannst deinen Account auf ucp.bayside-roleplay.de verlinken!");
				SendClientMessage(p,Rot,"Viel Spass wünscht dir weiterhin das Bayside-Roleplay Administratoren Team!");
			}
			//Prämie für die Feuerwehrmänner
			if(sStats[p][sJob] == 4)
			{
				if(Staatskasse > 300)
				{
					sStats[p][sPreamie] += 300;
					Staatskasse -= 300;
				}
			}
			if (Desktop_Status[p] == 0 && hour > 1 && hour < 7)
			{
			    ShowPlayerDialog(p,ANWESEND,DIALOG_STYLE_MSGBOX,"{FFFF00}ANTI AFKCHECK","{FFFF00}AFKCHECK: {FFFF00}Bist du anwesend 'Ja' oder 'Nein'?","Ja","Nein");
			    new randtime = 9643 + random (5216);
			    antimer[p] = SetTimerEx("ANWESENDTIMER",randtime,false,"i",p);
			}
		}
	}
	//Geld in die Gangkassen wegen den Gebieten
	for(new fs;fs<sizeof(FightSystem);fs++)
	{
		if(FightSystem[fs][fsOwnerFaction] == 5)
		{
			MS14Kasse += 5500;
		}
		if(FightSystem[fs][fsOwnerFaction] == 6)
		{
			CODKasse += 5500;
		}
	}
	//Wettersystem
	Weather = WetterRandom[random(sizeof(WetterRandom))];
	SetWeather(Weather);
	wetterid = Weather;
	//Speicherung von anderen Sachen
	SaveSonstiges();
	SaveHaus();
	//Fahrzeuge respawnen silent (Zivibikes)
	RespawnZiviBikesS();
}


//SaveSonstiges
forward SaveSonstiges();
public SaveSonstiges()
{
	new coordsstring[170];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", ScriptCheck,Houses_Index,Staatskasse,Hotelzimmer,CNNKasse,MS14Kasse,MS14DrogenKasse,MS14Upgrade,MS14MatKasse,MS14Waffen,CODUpgrade,CODKasse,CODDrogenKasse,CODMatKasse,CODWaffen,Drogenn,Datenbank);
	new File: file2 = fopen("Sonstiges.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

forward LoadSonstiges();
public LoadSonstiges()
{
	new arrCoords[17][64];
	new strFromFile2[160];
	new File: file = fopen("Sonstiges.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		ScriptCheck = strval(arrCoords[0]);
		Houses_Index = strval(arrCoords[1]);
		Staatskasse = strval(arrCoords[2]);
		Hotelzimmer = strval(arrCoords[3]);
		CNNKasse = strval(arrCoords[4]);
		MS14Kasse = strval(arrCoords[5]);
		MS14DrogenKasse = strval(arrCoords[6]);
		MS14Upgrade = strval(arrCoords[7]);
		MS14MatKasse = strval(arrCoords[8]);
		MS14Waffen = strval(arrCoords[9]);
		CODUpgrade = strval(arrCoords[10]);
		CODKasse = strval(arrCoords[11]);
		CODDrogenKasse = strval(arrCoords[12]);
		CODWaffen = strval(arrCoords[13]);
		CODMatKasse = strval(arrCoords[14]);
		Drogenn = strval(arrCoords[15]);
		Datenbank = strval(arrCoords[16]);
		fclose(file);
		printf("Es wurden erfolgreich [%d] Häuser geladen!",Houses_Index);
	}
	else
	{
		SendRconCommand("exit");
		return 1;
	}
	return 1;
}

//MS tor
forward MSZU();
public MSZU()
{
	MoveDynamicObject(msdoor,-2757.8999, 84.8000, 7.3000,1.2);
	Msuse = 0;
}

//Alhambra Djtor
forward Closedjtor();
public Closedjtor()
{
	SetObjectRot(djtor,0.0000, 0.0000, 91.4998);
	djopen = 0;
}

//BSPDtore zumachen
forward Closelspdtor1();
public Closelspdtor1()
{
	MoveDynamicObject(lspddoor1,1559.95, -1677.83, 1722.10,1);
 	lspduse1 = 0;
}

forward Closelspdtor2();
public Closelspdtor2()
{
	MoveDynamicObject(lspddoor2,1552.50, -1691.50, 1722.10,1);
 	lspduse2 = 0;
}

//Kirchen Bereich
forward kirchezu();
public kirchezu()
{
	MoveDynamicObject(kabsperr,3137.73, -3015.15, 18.28,1.7);
 	ksuse = 0;
}

//Feuerwehrtore zumachen
forward Closefwtor1();
public Closefwtor1()
{
    fwtor1use = 0;
	MoveDynamicObject(fwtor1,250.60000610,61.79999924,1002.59997559,1);
	MoveDynamicObject(fwtor2,250.60000610,64.80000305,1002.59997559,1);
}

forward Closefwtor2();
public Closefwtor2()
{
    fwtor2use = 0;
	MoveDynamicObject(fwtor3,244.89999390,72.59999847,1002.59997559,1);
	MoveDynamicObject(fwtor4,247.89999390,72.59999847,1002.59997559,1);
}

//BSN Bar
//Club
forward GetBottle2(bot,playerid);
public GetBottle2(bot,playerid)
{
	new geld;
	geld = GetPlayerEuros(playerid);
	BarMenBusy = 0;
	if(!strcmp(PlayerOrder[playerid],"bier",true))
	{
		if(geld < 6)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (6)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		GivePlayerEuro(playerid, -6);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"champagner",true))
	{
		if(geld < 95)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (95)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -95);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"wein",true))
	{
		if(geld < 70)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (70)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -70);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"vodka",true))
	{
		if(geld < 15)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (15)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -15);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"sprunk",true))
	{
		if(geld < 7)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (7)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		GivePlayerEuro(playerid, -7);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	SetPlayerChatBubble(bot,"Jan: {FFFFFF}Hier dein Getränk!",0xFFFF00DD,35.0,3000);
	ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 1);
	return 1;
}

//Club
forward GetBottle3(bot,playerid);
public GetBottle3(bot,playerid)
{
	new geld;
	geld = GetPlayerEuros(playerid);
	BarMenBusy = 0;
	if(!strcmp(PlayerOrder[playerid],"bier",true))
	{
		if(geld < 6)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (6)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		GivePlayerEuro(playerid, -6);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"champagner",true))
	{
		if(geld < 95)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (95)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -95);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"wein",true))
	{
		if(geld < 70)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (70)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -70);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"vodka",true))
	{
		if(geld < 15)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (15)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -15);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"sprunk",true))
	{
		if(geld < 7)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (7)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		GivePlayerEuro(playerid, -7);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	SetPlayerChatBubble(bot,"Phillip: {FFFFFF}Hier dein Getränk!",0xFFFF00DD,35.0,3000);
	ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 1);
	return 1;
}

//Casino Bars
forward GetBottle4(bot,playerid);
public GetBottle4(bot,playerid)
{
	new geld;
	geld = GetPlayerEuros(playerid);
	BarMenBusy2 = 0;
	if(!strcmp(PlayerOrder[playerid],"bier",true))
	{
		if(geld < 6)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (6)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		GivePlayerEuro(playerid, -6);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"champagner",true))
	{
		if(geld < 95)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (95)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -95);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"wein",true))
	{
		if(geld < 70)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (70)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -70);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"vodka",true))
	{
		if(geld < 15)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (15)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -15);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"sprunk",true))
	{
		if(geld < 7)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (7)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		GivePlayerEuro(playerid, -7);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	SetPlayerChatBubble(bot,"James: {FFFFFF}Hier dein Getränk!",0xFFFF00DD,35.0,3000);
	ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 1);
	return 1;
}

forward GetBottle5(bot,playerid);
public GetBottle5(bot,playerid)
{
	new geld;
	geld = GetPlayerEuros(playerid);
	BarMenBusy2 = 0;
	if(!strcmp(PlayerOrder[playerid],"bier",true))
	{
		if(geld < 6)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (6)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		GivePlayerEuro(playerid, -6);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"champagner",true))
	{
		if(geld < 95)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (95)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -95);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"wein",true))
	{
		if(geld < 70)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (70)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -70);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"vodka",true))
	{
		if(geld < 15)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (15)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
		GivePlayerEuro(playerid, -15);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"sprunk",true))
	{
		if(geld < 7)
		{
			SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (7)!");
			return 1;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		GivePlayerEuro(playerid, -7);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	SetPlayerChatBubble(bot,"Semaj: {FFFFFF}Hier dein Getränk!",0xFFFF00DD,35.0,3000);
	ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 1);
	return 1;
}

forward GetBottle6(bot,playerid);
public GetBottle6(bot,playerid)
{
		new geld;
		geld = GetPlayerEuros(playerid);
	if(!strcmp(PlayerOrder[playerid],"bier",true))
	{
	if(geld < 6)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (6)!");
		return 1;
	}
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	    GivePlayerEuro(playerid, -6);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"champagner",true))
	{
	if(geld < 95)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (95)!");
		return 1;
	}
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
	    GivePlayerEuro(playerid, -95);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"wein",true))
	{
	if(geld < 70)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (70)!");
		return 1;
	}
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
	    GivePlayerEuro(playerid, -70);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"vodka",true))
	{
	if(geld < 15)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (15)!");
		return 1;
	}
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
	    GivePlayerEuro(playerid, -15);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"sprunk",true))
	{
	if(geld < 7)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (7)!");
		return 1;
	}
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	GivePlayerEuro(playerid, -7);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
    SetPlayerChatBubble(bot,"Paul: {FFFFFF}Hier dein Getränk!",0xFFFF00DD,35.0,3000);
   	ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 1);
   	BarMenBusy = 0;
   	return 1;
}

forward GetBottle7(bot,playerid);
public GetBottle7(bot,playerid)
{
		new geld;
		geld = GetPlayerEuros(playerid);
	if(!strcmp(PlayerOrder[playerid],"bier",true))
	{
	if(geld < 6)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (6)!");
		return 1;
	}
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	    GivePlayerEuro(playerid, -6);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"champagner",true))
	{
	if(geld < 95)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (95)!");
		return 1;
	}
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
	    GivePlayerEuro(playerid, -95);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"wein",true))
	{
	if(geld < 70)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (70)!");
		return 1;
	}
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
	    GivePlayerEuro(playerid, -70);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"vodka",true))
	{
	if(geld < 15)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (15)!");
		return 1;
	}
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
	    GivePlayerEuro(playerid, -15);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
	if(!strcmp(PlayerOrder[playerid],"sprunk",true))
	{
	if(geld < 7)
	{
		SendClientMessage(playerid,Rot,"Du hast nicht genug Geld dabei. (7)!");
		return 1;
	}
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
	GivePlayerEuro(playerid, -7);
		if(sStats[playerid][sKrankheit] == 0)
		{
			new rnd = random(444);
			if(rnd >=1 && rnd <=3)
			{
				sStats[playerid][sKrankheit] = 5;
				SendClientMessage(playerid,Weiß,"Das letzte Getränk war wohl zu viel, du hast aufeinmal sehr starke Kopfschmerzen!");
				SendClientMessage(playerid,Weiß,"Ruf am besten mal einen Arzt an und lass dich untersuchen! (/service)");
			}
		}
	}
    SetPlayerChatBubble(bot,"Roman: {FFFFFF}Hier dein Getränk!",0xFFFF00DD,35.0,3000);
   	ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 1);
   	return 1;
}

forward MayaUnBusy(bot,playerid);
public MayaUnBusy(bot,playerid)
{
	MayaBusy = 0;
	ClearAnimations(bot);
	return 1;
}

forward MayaUnBusy1();
public MayaUnBusy1()
{
	MayaBusy = 0;
	return 1;
}

//Handysystem
forward SellHandy(playerid, handyid);
public SellHandy(playerid, handyid)
{
	if(handyid == 1)
	{
		GivePlayerEuro(playerid,100/2);
		SendClientMessage(playerid, Weiß, "Du hast dein Nokia 3310 erfolgreich für 50 verkauft!");
		sStats[playerid][sHandy] = 0;
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		sStats[playerid][sGuthaben] = 0;
		BizzInfo[6][bProducts] += 12;
		BizzInfo[6][bTill] -= 100/2;
	}
	else if(handyid == 2)
	{
		GivePlayerEuro(playerid,250/2);
		SendClientMessage(playerid, Weiß, "Du hast dein Nokia 6500 erfolgreich für 125 verkauft!");
		sStats[playerid][sHandy] = 0;
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		sStats[playerid][sGuthaben] = 0;
		BizzInfo[6][bProducts] += 13;
		BizzInfo[6][bTill] -= 250/2;
	}
	else if(handyid == 3)
	{
		GivePlayerEuro(playerid,500/2);
		SendClientMessage(playerid, Weiß, "Du hast dein Nokia N95 erfolgreich für 250 verkauft!");
		sStats[playerid][sHandy] = 0;
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		sStats[playerid][sGuthaben] = 0;
		BizzInfo[6][bProducts] += 14;
		BizzInfo[6][bTill] -= 500/2;
	}
	else if(handyid == 4)
	{
		GivePlayerEuro(playerid,1000/2);
		SendClientMessage(playerid, Weiß, "Du hast dein Sony Ericsson C905 erfolgreich für 500 verkauft!");
		sStats[playerid][sHandy] = 0;
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		sStats[playerid][sGuthaben] = 0;
		BizzInfo[6][bProducts] += 15;
		BizzInfo[6][bTill] -= 1000/2;
	}
	else if(handyid == 5)
	{
		GivePlayerEuro(playerid,2500/2);
		SendClientMessage(playerid, Weiß, "Du hast dein Motorola Q9h erfolgreich für 1250 verkauft!");
		sStats[playerid][sHandy] = 0;
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		sStats[playerid][sGuthaben] = 0;
		BizzInfo[6][bProducts] += 16;
		BizzInfo[6][bTill] -= 2500/2;
	}
	else if(handyid == 6)
	{
		GivePlayerEuro(playerid,4000/2);
		SendClientMessage(playerid, Weiß, "Du hast dein Blackbarry BOLD erfolgreich für 2000 verkauft!");
		sStats[playerid][sHandy] = 0;
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		sStats[playerid][sGuthaben] = 0;
		BizzInfo[6][bProducts] += 17;
		BizzInfo[6][bTill] -= 4000/2;
	}
	else if(handyid == 7)
	{
		GivePlayerEuro(playerid,8500/2);
		SendClientMessage(playerid, Weiß, "Du hast dein iPhone erfolgreich für 4250 verkauft!");
		sStats[playerid][sHandy] = 0;
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		sStats[playerid][sGuthaben] = 0;
		BizzInfo[6][bProducts] += 18;
		BizzInfo[6][bTill] -= 8500/2;
	}
	return 1;
}

forward BuyHandy(playerid, handyid);
public BuyHandy(playerid, handyid)
{
	if(handyid == 1)
	{
		if(GetPlayerEuros(playerid) < 100) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (100)!"); return 1; }
		GivePlayerEuro(playerid,-100);
		SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch, du hast dir erfolgreich ein Nokia 3330 gekauft!");
		SendClientMessage(playerid, COLOR_YELLOW, "Du erhältst außerdem ein Startguthaben von 5!");
		sStats[playerid][sHandy] = 1;
		sStats[playerid][sGuthaben] = 5;
		sStats[playerid][sAkku] = 10;
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		BizzInfo[6][bProducts] -= 12;
		BizzInfo[6][bTill] += 100;
	}
	else if(handyid == 2)
	{
		if(GetPlayerEuros(playerid) < 250) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (250)!"); return 1; }
		GivePlayerEuro(playerid,-250);
		SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch, du hast dir erfolgreich ein 6500 gekauft!");
		SendClientMessage(playerid, COLOR_YELLOW, "Du erhältst außerdem ein Startguthaben von 10!");
		sStats[playerid][sHandy] = 2;
		sStats[playerid][sGuthaben] = 10;
		sStats[playerid][sAkku] = 10;
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		BizzInfo[6][bProducts] -= 13;
		BizzInfo[6][bTill] += 250;
	}
	else if(handyid == 3)
	{
		if(GetPlayerEuros(playerid) < 500) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (500)!"); return 1; }
		GivePlayerEuro(playerid,-500);
		SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch, du hast dir erfolgreich ein Nokia N95 gekauft!");
		SendClientMessage(playerid, COLOR_YELLOW, "Du erhältst außerdem ein Startguthaben von 10!");
		sStats[playerid][sHandy] = 3;
		sStats[playerid][sGuthaben] = 10;
		sStats[playerid][sAkku] = 10;
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		BizzInfo[6][bProducts] -= 14;
		BizzInfo[6][bTill] += 500;
	}
	else if(handyid == 4)
	{
		if(GetPlayerEuros(playerid) < 1000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1000)!"); return 1; }
		GivePlayerEuro(playerid,-1000);
		SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch, du hast dir erfolgreich ein Sony Ericsson C905 gekauft!");
		SendClientMessage(playerid, COLOR_YELLOW, "Du erhältst außerdem ein Startguthaben von 10!");
		sStats[playerid][sHandy] = 4;
		sStats[playerid][sGuthaben] = 10;
		sStats[playerid][sAkku] = 10;
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		BizzInfo[6][bProducts] -= 15;
		BizzInfo[6][bTill] += 100;
	}
	else if(handyid == 5)
	{
		if(GetPlayerEuros(playerid) < 2500) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (2500)!"); return 1; }
		GivePlayerEuro(playerid,-2500);
		SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch, du hast dir erfolgreich ein Motorola Q9h gekauft!");
		SendClientMessage(playerid, COLOR_YELLOW, "Du erhältst außerdem ein Startguthaben von 10!");
		sStats[playerid][sHandy] = 5;
		sStats[playerid][sGuthaben] = 10;
		sStats[playerid][sAkku] = 10;
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		BizzInfo[6][bProducts] -= 16;
		BizzInfo[6][bTill] += 2500;
	}
	else if(handyid == 6)
	{
		if(GetPlayerEuros(playerid) < 4000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (4000)!"); return 1; }
		GivePlayerEuro(playerid,-4000);
		SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch, du hast dir erfolgreich ein Samsung Galaxy S3 gekauft!");
		SendClientMessage(playerid, COLOR_YELLOW, "Du erhältst außerdem ein Startguthaben von 10!");
		sStats[playerid][sHandy] = 6;
		sStats[playerid][sGuthaben] = 10;
		sStats[playerid][sAkku] = 10;
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		BizzInfo[6][bProducts] -= 17;
		BizzInfo[6][bTill] += 4000;
	}
	else if(handyid == 7)
	{
		if(GetPlayerEuros(playerid) < 6500) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (6500)!"); return 1; }
		GivePlayerEuro(playerid,-6500);
		SendClientMessage(playerid, COLOR_WHITE, "Glückwunsch, du hast dir erfolgreich ein iPhone gekauft!");
		SendClientMessage(playerid, COLOR_YELLOW, "Du erhältst außerdem ein Startguthaben von 10!");
		sStats[playerid][sHandy] = 7;
		sStats[playerid][sGuthaben] = 10;
		sStats[playerid][sAkku] = 10;
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
		BizzInfo[6][bProducts] -= 18;
		BizzInfo[6][bTill] += 6500;
	}
	if(sStats[playerid][sQuest] == 999)
	{
	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: alles klar Kollege? Zum Glück hab ich Kontakt zum Handyladen Verkäufer und konnte somit deine Nummer herrausbekommen,");
	    SendClientMessage(playerid, COLOR_YELLOW, "so pass mal auf gestern ging die Party meines Lebens ab, doch irgendwie habe ich meine heißgeliebte Rolex unten am Strand verloren,");
	    SendClientMessage(playerid, COLOR_YELLOW, "Ich würde mir diese ja selber holen aber ich hab den übertriebensten Kater, also tust du mir den Gefallen und bringst mir meine Rolex?");
	    SendClientMessage(playerid, COLOR_ORANGE, "Info: Suche Jacks verlorene Armbanduhr unten am Strand und bringe Jack diese zurück (/jackuhr)");
	    sStats[playerid][sQuest] = 1;
	}
	return 1;
}

//ProxDetectorS
forward ProxDetectorS(Float:radi, playerid, targetid);
public ProxDetectorS(Float:radi, playerid, targetid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

//Handy
//GetGPS
forward GetGps(playerid);
public GetGps(playerid)
{
	ClearChat(playerid);
	TogglePlayerControllable(playerid, true);
	sStats[playerid][sGPS] = 1;
	SendClientMessage(playerid,Weiß,"Das GPS App wurde erfolgreich auf dein Handy transferiert.");
	SendClientMessage(playerid,Gelb,"Du kannst dieses nun mit /gps benutzen!");
}

//GetWA
forward GetWA(playerid);
public GetWA(playerid)
{
	ClearChat(playerid);
	TogglePlayerControllable(playerid, true);
	sStats[playerid][sWA] = 1;
	SendClientMessage(playerid,Weiß,"Die WhatzzApp App wurde erfolgreich auf dein Handy transferiert.");
	SendClientMessage(playerid,Gelb,"Du kannst dieses nun mit /chat benutzen!");
}

//Akkuladen
forward AkkuLaden(playerid);
public AkkuLaden(playerid)
{
	ClearChat(playerid);
	TogglePlayerControllable(playerid, true);
	sStats[playerid][sAkku] = 10;
	SendClientMessage(playerid,Gelb2,"Dein Akku wurde erfolgreich aufgeladen!");
}

//Anruf
forward Anruf(playerid);
public Anruf(playerid)
{
	if(GetPVarInt(playerid, "Anrufen") == 1)
 	{
	 	DeletePVar(playerid, "Anrufen");
		SendClientMessage(playerid,Gelb,"Dein Anruf wurde abgebrochen, da sich keiner gemeldet hat!");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
		StopAudioStreamForPlayer(playerid);
		return 1;
    }
   	if(GetPVarInt(playerid, "Anrufen") == 2)
 	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
	 	wirdangerufen[playerid] = -1;
	 	DeletePVar(playerid, "Anrufen");
	 	StopAudioStreamForPlayer(playerid);
	 	return 1;
 	}
 	return 1;
}

//GetTon
forward GetTon(playerid, handyid);
public GetTon(playerid, handyid)
{
        PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	    TogglePlayerControllable(playerid, true);
		if(handyid == 1)
		{
		    if(GetPlayerEuros(playerid) < 1000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1000)!"); return 1; }
			GivePlayerEuro(playerid,-1000);
		    SendClientMessage(playerid, Weiß, "Du hast erfolgreich den Klingelton Higher ausgewählt!");
			sStats[playerid][sKlingelton] = 1;
		}
		else if(handyid == 2)
		{
		    if(GetPlayerEuros(playerid) < 1000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1000)!"); return 1; }
			GivePlayerEuro(playerid,-1000);
			SendClientMessage(playerid, Weiß, "Du hast erfolgreich den Klingelton I'Am On You ausgewählt!");
			sStats[playerid][sKlingelton] = 2;
		}
		else if(handyid == 3)
		{
		    if(GetPlayerEuros(playerid) < 1000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1000)!"); return 1; }
			GivePlayerEuro(playerid,-1000);
			SendClientMessage(playerid, Weiß, "Du hast erfolgreich den Klingelton Dynamite ausgewählt!");
			sStats[playerid][sKlingelton] = 3;
		}
		else if(handyid == 4)
		{
		    if(GetPlayerEuros(playerid) < 1000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1000)!"); return 1; }
			GivePlayerEuro(playerid,-1000);
			SendClientMessage(playerid, Weiß, "Du hast erfolgreich den Klingelton Never Say Never ausgewählt!");
			sStats[playerid][sKlingelton] = 4;
		}
		else if(handyid == 5)
		{
		    if(GetPlayerEuros(playerid) < 1000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1000)!"); return 1; }
			GivePlayerEuro(playerid,-1000);
			SendClientMessage(playerid, Weiß, "Du hast erfolgreich den Klingelton Nossa Nossa Assim Voce Me Mata ausgewählt!");
			sStats[playerid][sKlingelton] = 5;
		}
		else if(handyid == 6)
		{
		    if(GetPlayerEuros(playerid) < 1000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1000)!"); return 1; }
			GivePlayerEuro(playerid,-1000);
			SendClientMessage(playerid, Weiß, "Du hast erfolgreich den Klingelton Welcome to St'Tropez ausgewählt!");
			sStats[playerid][sKlingelton] = 6;
		}
		else if(handyid == 7)
		{
		    if(GetPlayerEuros(playerid) < 1000) { SendClientMessage(playerid, Rot, "Du hast nicht genug Geld dabei (1000)!"); return 1; }
			GivePlayerEuro(playerid,-1000);
			SendClientMessage(playerid, Weiß, "Du hast erfolgreich den Klingelton Knall diese Schlampe ausgewählt!");
			sStats[playerid][sKlingelton] = 7;
		}
	return 1;
}

//ClearHandy
forward ClearHandy(playerid);
public ClearHandy(playerid)
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	RemovePlayerAttachedObject(playerid, 9);
	StopAudioStreamForPlayer(playerid);

}

//Ringtone
forward StopRingTone(playerid);
public StopRingTone(playerid)
{
	StopAudioStreamForPlayer(playerid);
}

forward PlayRingTone(playerid);
public PlayRingTone(playerid)
{
	if(sStats[playerid][sKlingelton] == 0) //Standert Ring Ring Ton
	{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/ton0.mp3");
	return 1;
	}
	if(sStats[playerid][sKlingelton] == 1) //Higher
	{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/ton1.mp3");
	return 1;
	}
	if(sStats[playerid][sKlingelton] == 2) //Iam on You
	{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/ton2.mp3");
	return 1;
	}
	if(sStats[playerid][sKlingelton] == 3) // Dynamity
	{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/ton3.mp3");
	return 1;
	}
	if(sStats[playerid][sKlingelton] == 4) //Never Say Never
	{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/ton4.mp3");
	return 1;
	}
	if(sStats[playerid][sKlingelton] == 5) //Mossa
	{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/ton5.mp3");
	return 1;
	}
	if(sStats[playerid][sKlingelton] == 6) //Welcome to St.Tropez
	{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/ton6.mp3");
	return 1;
	}
	if(sStats[playerid][sKlingelton] == 7) //Knall diese Schlampe
	{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/ton7.mp3");
	return 1;
	}
 	return 1;
}

//PlaySMSTone
forward PlaySMSTone(playerid);
public PlaySMSTone(playerid)
{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
}

//OnPlayerGiveDamage
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	new string[128];
	if(IsPlayerInZonee(damagedid,-2639.2, 2230.474, -2592.488, 2277.186))
	{
	    TogglePlayerControllable(playerid, false);
	    SetTimerEx("UnfreezePlayer",5869,false,"i",playerid);
	    return 1;
	}
	if(GetPVarInt(playerid, "Tazer") == 1 && GetPlayerWeapon(playerid) == TAZE_WEAPON && IsACop(playerid))
 	{
  		new Float:health,Float:losehp;
        GetPlayerHealth(damagedid,health);
        losehp = TAZE_LOSEHP;
        if(Tazed[damagedid] == 1) return 1;
            new Float:x, Float:y, Float:z;
            GetPlayerPos(damagedid, x, y, z);
            Spark[damagedid] = CreateDynamicObject(TAZE_SPARK, x, y, z-3, 0, 0, 0);
            SetTimerEx("DestroySpark", TAZE_DESTROY, 0, "i", damagedid);
            SetTimerEx("TazedRemove", TAZE_TIMER, 0, "i", damagedid);
            TogglePlayerControllable(damagedid, false);
            Tazed[damagedid] = 1;
            GameTextForPlayer(damagedid,"~r~tazed",5000,4);
            if(losehp) {} else SetPlayerHealth(damagedid, health+amount);
    		format(string, sizeof(string),"* %s %s ziehlt mit seinem Tazer auf %s und drückt ab.",GetPlayerRank(playerid),GetName(playerid),GetName(damagedid));
    		ProxDetector(12.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        return 1;
}

//OnPlayerTakeDamage
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
	new string[135];
	new Float:xP,Float:xY,Float:xZ;
	GetPlayerPos(playerid, xP, xY, xZ);
	if(weaponid == 34)
	{
		SetPlayerHealth(playerid,0.0);
	}//Funmodus Superpunch
	if(weaponid == 0 && GetPVarInt(issuerid, "FunModus") == 1 && sStats[issuerid][sAdminlevel] == 5 && GetPVarInt(issuerid, "Feuerpunch") == 0)
	{
	    PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);
	    format(string, sizeof(string), "Du hast ein Megapunch von %s bekommen!", GetName(issuerid));
	    SendClientMessage(playerid,Gelb,string);
	    format(string, sizeof(string), "Du hast %s einen Megapunch gegeben!", GetName(playerid));
	    SendClientMessage(issuerid,Gelb,string);
     	PushPlayer(playerid, xP+5, xY+50);
	    SetPlayerHealth(playerid, 0.0);
	}
	//Superfaust Paintball
	if(weaponid == 0 && GetPVarInt(issuerid, "Superfaust") == 1 && PlayerPaintballing[playerid] != 0 && PlayerPaintballing[issuerid] != 0)
	{
	    PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);
	    PushPlayer(playerid, xP+1, xY+1.5);
	    SetPlayerHealth(playerid, 0.0);
	}
	//In Waffenscheinprüfung
	if(weaponid == 24 && GetPVarInt(issuerid, "InWschein") == 1)
	{
	    SetPlayerHealth(issuerid,0.0);
	}
	return 1;
}

//Autoradio
forward HideRadioTextdraw(playerid,vehicleid);
public HideRadioTextdraw(playerid, vehicleid)
{
	TextDrawHideForPlayer(playerid,v_VehicleInfo[vehicleid][r_Draw]);
	SetPVarInt(playerid,"ID_HideRadioTextdraw",-1);
	return 1;
}

forward HorseStartTimer();
public HorseStartTimer()
{
	if (HorseCD > 0)
	{
		new string[128];
		format(string, sizeof(string), "%d",HorseCD);
		if (Horsemsg == 1)
		{
			SendClientMessageToAll(ORANGE, "Das Pferderennen hat begonnen! Gehe zum Pferderennen Wettbüro um zuzuschauen!");
			Horsemsg = 0;
		}
		HorseCD -= 1;
 		for(new i = 0; i < MAX_PLAYERS; i++)
 		{
		if(Watching[i] == 1)
		{
  			SendClientMessage(i,Weiß,string);
		}
		}
		SetTimer("HorseStartTimer", 2297, 0);
 		for(new i = 0; i < MAX_PLAYERS; i++)
 		{
			if(IsPlayerInRangeOfPoint(i,8.0, 833.3153,7.6225,1004.1797) && Watching[i] == 1)
			{
				PlayerPlaySound(i, 3200, 0.0, 0.0, 0.0);
			}
		}
	}
	else
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
					if(Watching[i] == 1)
		{
		        SetTimerEx("PferdeGo",4219,false,"i",i);
				SendClientMessage(i,Gruen,"Los!");
		}
				Horsemsg = 1;
			if(IsPlayerInRangeOfPoint(i,8.0, 833.3153,7.6225,1004.1797) && Watching[i] == 1)
			{
				new Float:X[MAX_PLAYERS], Float:Y[MAX_PLAYERS], Float:Z[MAX_PLAYERS];
				GetPlayerPos(i, X[i], Y[i], Z[i]);
				PlayerPlaySound(i, 3201, X[i], Y[i], Z[i]);
			}
		}
		SetTimer("HorseAnimTimer", 127, 0);
	}
	return 1;
}

forward HorseAnimTimer();
public HorseAnimTimer()
{
	new string[12], HorseWon;
 	format(string, sizeof(string), "LD_OTB:hrs%i", HorseAnimCount);
 	HorseAnimCount++;
 	if (HorseAnimCount == 9) HorseAnimCount = 1;

  	HorsePosX1 = HorsePosX1 + (random(600) / 100);
  	HorsePosX2 = HorsePosX2 + (random(600) / 100);
  	HorsePosX3 = HorsePosX3 + (random(600) / 100);
  	HorsePosX4 = HorsePosX4 + (random(600) / 100);

  	TextDrawDestroy(Horse1);
  	TextDrawDestroy(Horse2);
  	TextDrawDestroy(Horse3);
  	TextDrawDestroy(Horse4);
  	TextDrawDestroy(HorseNum1);
  	TextDrawDestroy(HorseNum2);
  	TextDrawDestroy(HorseNum3);
  	TextDrawDestroy(HorseNum4);


    Horse1 = TextDrawCreate(HorsePosX1, 200, string);
    HorseInfo(Horse1);
    Horse2 = TextDrawCreate(HorsePosX2, 250, string);
    HorseInfo(Horse2);
    Horse3 = TextDrawCreate(HorsePosX3, 300, string);
    HorseInfo(Horse3);
    Horse4 = TextDrawCreate(HorsePosX4, 350, string);
    HorseInfo(Horse4);
    HorseNum1 = TextDrawCreate(HorsePosX1 + 15, 204, "LD_OTB2:Ric1");
    HorseNumInfo(HorseNum1);
    HorseNum2 = TextDrawCreate(HorsePosX2 + 15, 254, "LD_OTB2:Ric2");
    HorseNumInfo(HorseNum2);
    HorseNum3 = TextDrawCreate(HorsePosX3 + 15, 304, "LD_OTB2:Ric3");
    HorseNumInfo(HorseNum3);
    HorseNum4 = TextDrawCreate(HorsePosX4 + 15, 354, "LD_OTB2:Ric4");
    HorseNumInfo(HorseNum4);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if (Watching[i] == 1)
		{
			TextDrawShowForPlayer(i,Horse1);
			TextDrawShowForPlayer(i,Horse2);
			TextDrawShowForPlayer(i,Horse3);
			TextDrawShowForPlayer(i,Horse4);
			TextDrawShowForPlayer(i,HorseNum1);
			TextDrawShowForPlayer(i,HorseNum2);
			TextDrawShowForPlayer(i,HorseNum3);
			TextDrawShowForPlayer(i,HorseNum4);
		}
	}

	if (HorsePosX1 >= 560)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerInRangeOfPoint(i,11.0, 833.3153,7.6225,1004.1797))
			{
   				 SendClientMessage(i,Orange, "Pferd 1 hat beim Pferderennen gewonnen!");
			}
		}
		HorseStop = 1;
		HorseWon = 1;
	}
	else if (HorsePosX2 >= 560)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerInRangeOfPoint(i,11.0, 833.3153,7.6225,1004.1797))
			{
    SendClientMessage(i,Orange, "Pferd 2 hat beim Pferderennen gewonnen!");
			}
		}
		HorseStop = 1;
		HorseWon = 2;
	}
	else if (HorsePosX3 >= 560)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerInRangeOfPoint(i,11.0, 833.3153,7.6225,1004.1797))
			{
   				SendClientMessage(i,Orange, "Pferd 3 hat beim Pferderennen gewonnen!");
			}
		}
		HorseStop = 1;
		HorseWon = 3;
	}
	else if (HorsePosX4 >= 560)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerInRangeOfPoint(i,11.0, 833.3153,7.6225,1004.1797))
			{
				SendClientMessage(i,Orange, "Pferd 4 hat beim Pferderennen gewonnen!");
			}
		}
		HorseStop = 1;
		HorseWon = 4;
	}
	if (HorseStop == 0)
	{
		SetTimer("HorseAnimTimer", 139, 0);
	}
	if (HorseStop == 1)
	{
		HorseStop = 1;
		RaceStarted = 0;
  		TextDrawDestroy(BG2);
	    TextDrawDestroy(BG1);
	    TextDrawDestroy(Start2);
	    TextDrawDestroy(Finish2);
	    TextDrawDestroy(Horse1);
	    TextDrawDestroy(Horse2);
	    TextDrawDestroy(Horse3);
	    TextDrawDestroy(Horse4);
	    TextDrawDestroy(HorseNum1);
	    TextDrawDestroy(HorseNum2);
	    TextDrawDestroy(HorseNum3);
	    TextDrawDestroy(HorseNum4);
	    TextDrawDestroy(Start);
	    TextDrawDestroy(Finish);
	    PferderennenNews = 0;
 		for(new i = 0; i < MAX_PLAYERS; i++)
 		{
			if(IsPlayerInRangeOfPoint(i,11.0, 833.3153,7.6225,1004.1797))
			{
				if (BetOnHorse[i] == HorseWon)
				{
					new Float:X[MAX_PLAYERS], Float:Y[MAX_PLAYERS], Float:Z[MAX_PLAYERS];
					GetPlayerPos(i, X[i], Y[i], Z[i]);
					PlayerPlaySound(i, 5448, X[i], Y[i], Z[i]);
					SendClientMessage(i, Gelb, "Du hast gewonnen! Dein Einsatz wurde verdoppelt!");
					GivePlayerEuro(i, MoneyBet[i] * 2);
  					MoneyBet[i] = 0;
       				BetOnHorse[i] = 0;
				}
				else if (MoneyBet[i] != 0 && BetOnHorse[i] != HorseWon)
				{
					SendClientMessage(i, Rot, "Du hast leider nicht gewonnen!");
					new Float:X[MAX_PLAYERS], Float:Y[MAX_PLAYERS], Float:Z[MAX_PLAYERS];
					GetPlayerPos(i, X[i], Y[i], Z[i]);
					PlayerPlaySound(i, 5453, X[i], Y[i], Z[i]);
  					MoneyBet[i] = 0;
       				BetOnHorse[i] = 0;
				}
			}
			if (Watching[i] == 1)
			{
   				TextDrawHideForPlayer(i,BG2);
	            TextDrawHideForPlayer(i,BG1);
	            TextDrawHideForPlayer(i,Start2);
	            TextDrawHideForPlayer(i,Finish2);
	            TextDrawHideForPlayer(i,Start);
	            TextDrawHideForPlayer(i,Finish);
				TextDrawHideForPlayer(i,Horse1);
				TextDrawHideForPlayer(i,Horse2);
				TextDrawHideForPlayer(i,Horse3);
				TextDrawHideForPlayer(i,Horse4);
				TextDrawHideForPlayer(i,HorseNum1);
				TextDrawHideForPlayer(i,HorseNum2);
				TextDrawHideForPlayer(i,HorseNum3);
				TextDrawHideForPlayer(i,HorseNum4);
				TogglePlayerControllable(i, true);
				Watching[i] = 0;
				PlayerTextDrawShow(i,Money3[i]);
				PlayerTextDrawShow(i,Money[i]);
				PlayerTextDrawShow(i,Money2[i]);
 				TextDrawShowForPlayer(i,Ad1);
				TextDrawShowForPlayer(i,Ad2);
				TextDrawShowForPlayer(i,Clock);
				TextDrawShowForPlayer(i, Script1);
				TextDrawShowForPlayer(i, Script2);
				SetCameraBehindPlayer(i);
			}
		}
	}
}

//Slotmachine
forward Gambler(playerid);
public Gambler(playerid)
{
	if(Gambling[playerid] != G_STATE_GAMBLING)
	{
		print("Error @ Slotmachine");
		KillTimer(SlotTimer[playerid]);
		SlotTimer[playerid] = -1;
		Gambling[playerid] = G_STATE_NOT_GAMBLING;
		return 0;
	}
	SlotCounter[playerid] -= 1;

	new slot = SlotCounter[playerid];

	if(slot < 10)
	{
		Slots[playerid][2]+=random(3)+1;
	}
	else if(slot < 20)
	{
		Slots[playerid][1]+=random(3)+1;
		Slots[playerid][2]+=random(3)+1;
	}
	else
	{
		Slots[playerid][0]+=random(3)+1;
		Slots[playerid][1]+=random(3)+1;
		Slots[playerid][2]+=random(3)+1;
	}
	if(Slots[playerid][0] >= 6) Slots[playerid][0] = 0;
	if(Slots[playerid][1] >= 6) Slots[playerid][1] = 0;
	if(Slots[playerid][2] >= 6) Slots[playerid][2] = 0;

	ShowPlayerSlots(playerid,Slots[playerid][0],Slots[playerid][1],Slots[playerid][2]);

	if(SlotCounter[playerid] == 0)
	{
		KillTimer(SlotTimer[playerid]);
		SlotTimer[playerid] = -1;
		Gambling[playerid] = G_STATE_DISPLAY;

		if(Slots[playerid][0] == Slots[playerid][1] && Slots[playerid][0] == Slots[playerid][2])
		{

			new Float:Multiplier = 0.3;

			switch(Slots[playerid][0])
			{
				case 0: Multiplier = 3;    // Cherries
				case 1: Multiplier = 12;   // Grapes
				case 2: Multiplier = 25;   // 69's
				case 3: Multiplier = 50;   // Bells
				case 4: Multiplier = 115;  // Bar
				case 5: Multiplier = 201;  // Double Bars
			}

			new money = floatround(Bet[playerid] * Multiplier * WIN_MULTIPLIER_GLOBAL);
			new str[128];
			format(str,sizeof(str),"~w~Gewonnen: ~g~%d Euro~w~!",money);
			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid,str,5000,4);

			Balance[playerid] += money;

			UpdateBetText(playerid);

			Slots[playerid][0] = random(5); // Randomize the slots again
			Slots[playerid][1] = random(5);
			Slots[playerid][2] = random(5);
		}
		else
		{
			if(Slots[playerid][0] == Slots[playerid][1] || Slots[playerid][1] == Slots[playerid][2] || Slots[playerid][0] == Slots[playerid][2]) GameTextForPlayer(playerid,"Fast!",3000,4);
			else GameTextForPlayer(playerid,"Leider Pech gehabt!",3000,4);
		}

		SetTimerEx("PlayAgainTimer",DISPLAY_TIME,0,"d",playerid);
		return 1;
	}
	return 0;
}

forward PlayAgainTimer(playerid);
public PlayAgainTimer(playerid)
{
	Gambling[playerid] = G_STATE_READY;
	TextDrawShowForPlayer(playerid,ReadyText);

	new keys,lr,ud;
	GetPlayerKeys(playerid,keys,ud,lr);
	if(keys & KEY_SPRINT) OnPlayerKeyStateChange(playerid,KEY_SPRINT,0);
}

forward TicketDraw();
public TicketDraw()
{
	MakeNumber();
	new Winning[MAX_PLAYERS];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(HaveTicket[i] == 1)
		{
			for(new n = 0; n < 6; n++)
			{
				if(PlayerNumber[0][i] == Number[n])
				{
					Winning[i]++;
				}
				if(PlayerNumber[1][i] == Number[n])
				{
					Winning[i]++;
				}
				if(PlayerNumber[2][i] == Number[n])
				{
					Winning[i]++;
				}
				if(PlayerNumber[3][i] == Number[n])
				{
					Winning[i]++;
				}
				if(PlayerNumber[4][i] == Number[n])
				{
					Winning[i]++;
				}
				if(PlayerNumber[5][i] == Number[n])
				{
					Winning[i]++;
				}
			}
			new string[150];
            LottoNews = 0;
            SendClientMessage(i, Gruen, "");
            SendClientMessage(i, Weiß, "Die heutige Lottoziehung beginnt jetzt:");
            SendClientMessage(i, Gruen, "");
			SendClientMessage(i, Gruen, "--------> Lotterie 6/47 <--------");

			format(string, sizeof(string), "Deine Lotterie Zahlen: %d, %d, %d, %d, %d, %d", PlayerNumber[0][i], PlayerNumber[1][i], PlayerNumber[2][i], PlayerNumber[3][i], PlayerNumber[4][i], PlayerNumber[5][i]);
			SendClientMessage(i, Weiß, string);

			format(string, sizeof(string), "Die Gewinner Lotterie Zahlen: %d, %d, %d, %d, %d, %d", Number[0], Number[1], Number[2], Number[3], Number[4], Number[5]);
			SendClientMessage(i, Gruen, string);

			if(Winning[i] == 0)
			{
				SendClientMessage(i, Weiß, "Du hast 0 richtige.");
				SendClientMessage(i, Gelb, "Gewinn: 0");
			}
			if(Winning[i] == 1)
			{
				SendClientMessage(i, Weiß, "Du hast 1 richtige.");
				SendClientMessage(i, Gelb, "Gewinn: 45");
				GivePlayerEuro(i, 5);
			}
			if(Winning[i] == 2)
			{
				SendClientMessage(i, Weiß, "Du hast 2 richtige.");
				SendClientMessage(i, Gelb, "Gewinn: 175");
				GivePlayerEuro(i, 10);
			}
			if(Winning[i] == 3)
			{
				SendClientMessage(i, Weiß, "Du hast 3 richtige.");
				SendClientMessage(i, Gelb, "Gewinn: 630");
				GivePlayerEuro(i, 63);
			}
			if(Winning[i] == 4)
			{
				SendClientMessage(i, Weiß, "Du hast 4 richtige.");
				SendClientMessage(i, Gelb, "Gewinn: 1,730");
				GivePlayerEuro(i, 1730);
			}
			if(Winning[i] == 5)
			{
				SendClientMessage(i, Weiß, "Du hast 5 richtige.");
				SendClientMessage(i, Gelb, "Gewinn: 65,128");
				GivePlayerEuro(i, 65128);
			}
			if(Winning[i] == 6)
			{
				SendClientMessage(i, Weiß, "Du hast 6 richtige.");
				SendClientMessage(i, Gelb, "Gewinn: 1,000,000");
				GivePlayerEuro(i, 1000000);
			}
			HaveTicket[i] = 0;
		}
	}
}

//Wer gehört zur Staatsfraktion
forward IsAStaat(playerid);
public IsAStaat(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new leader = sStats[playerid][sLeiter];
		new member = sStats[playerid][sMitglied];
		new job = sStats[playerid][sJob];
		if(member==1 || member==2 || member==3)
		{
			return 1;
		}
		else if(leader==1 || leader==2 || leader==3)
		{
			return 1;
		}
		else if(job==4)
		{
		    return 1;
		}
	}
	return 0;
}

//Gangs/Mafien
forward IsAGang(playerid);
public IsAGang(playerid)
{
	new leader = sStats[playerid][sLeiter];
 	new member = sStats[playerid][sMitglied];
  	if(member==5 || member==6)
	{
 		return 1;
	}
	else if(leader==6 || leader==5)
	{
 	return 1;
	}
	return 0;
}

//IsACNN
forward IsACNN(playerid);
public IsACNN(playerid)
{
	new leader = sStats[playerid][sLeiter];
 	new member = sStats[playerid][sMitglied];
  	if(member==4)
	{
 		return 1;
	}
	else if(leader==4)
	{
 	return 1;
	}
	return 0;
}

//IsMS
forward IsAMS(playerid);
public IsAMS(playerid)
{
	new leader = sStats[playerid][sLeiter];
 	new member = sStats[playerid][sMitglied];
  	if(member==5)
	{
 		return 1;
	}
	else if(leader==5)
	{
 	return 1;
	}
	return 0;
}

//IsACrip
forward IsACrip(playerid);
public IsACrip(playerid)
{
	new leader = sStats[playerid][sLeiter];
 	new member = sStats[playerid][sMitglied];
  	if(member==6)
	{
 		return 1;
	}
	else if(leader==6)
	{
 	return 1;
	}
	return 0;
}

//IsSani
forward IsASani(playerid);
public IsASani(playerid)
{
	new leader = sStats[playerid][sLeiter];
 	new member = sStats[playerid][sMitglied];
  	if(member==3)
	{
 		return 1;
	}
	else if(leader==3)
	{
 		return 1;
	}
	return 0;
}

//IsSani
forward IsAFW(playerid);
public IsAFW(playerid)
{
	new leader = sStats[playerid][sLeiter];
 	new member = sStats[playerid][sMitglied];
  	if(member==2)
	{
 		return 1;
	}
	else if(leader==2)
	{
 		return 1;
	}
	return 0;
}

//IsSani
forward IsACop(playerid);
public IsACop(playerid)
{
	new leader = sStats[playerid][sLeiter];
 	new member = sStats[playerid][sMitglied];
  	if(member==1)
	{
 		return 1;
	}
	else if(leader==1)
	{
 	return 1;
	}
	return 0;
}

//Radio Funknachricht
forward SendRadioMessage(member, color, string[]);
public SendRadioMessage(member, color, string[])
{
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(sStats[i][sMitglied] == member || sStats[i][sLeiter] == member)
		{
			SendClientMessage(i, color, string);
			return 1;
		}
		if(member == 99)
		{
			if(IsAFW(i) && GetPVarInt(i, "Unfall") == 0 && GetPVarInt(i, "FDienst") == 1)
			{
				SendClientMessage(i, color, string);
				return 1;
			}
		}
		if(member == 98)
		{
			if(sStats[i][sJob] == 1)
			{
				SendClientMessage(i, color, string);
				return 1;
			}
		}
		if(member == 101)
		{
			if(sStats[i][sLevel] < 3 || sStats[i][sAdminlevel] > 0)
			{
				SendClientMessage(i, color, string);
				return 1;
			}
		}
		if(member == 109)
		{
		    if(sStats[i][sMitglied] == 1 || sStats[i][sLeiter] == 1 || sStats[i][sMitglied] == 3 || sStats[i][sLeiter] == 3 || IsAFW(i))
		    {
  				SendClientMessage(i, color, string);
				return 1;
		    }
		}
	}
	return 1;
}

//Job Nachricht
forward SendJobMessage(member, color, string[]);
public SendJobMessage(member, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(sStats[i][sJob] == member)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

//ClearPlayer
forward ClearPlayer(playerid);
public ClearPlayer(playerid)
{
	ClearAnimations(playerid);
}

//24/7 Ausrauben
forward StoreRob1();
public StoreRob1()
{
for(new i = 0; i < MAX_PLAYERS; i++)
{
if(Robber[i] == 1)
{
if(IsPlayerInRangeOfPoint(i,30, -27.1061,-184.6697,1003.5469))
{
	SendClientMessage(i, COLOR_YELLOW,"20 Sekunden sind vergangen!");
	KillTimer(rob);
	rob1 = SetTimer("StoreRob2",20201,1);
	return 1;
}
else
{
	SendClientMessage(i, Rot,"Da du aus dem 24/7 Shop gegangen bist, wurde der Überfall abgebrochen!");
	StopAudioStreamForPlayer(i);
	rob3 = SetTimer("RobWait",100261,1);
	StoreRobed[i] =0;
	Robber[i] = 0;
	robbing = 0;
	wait = 1;
	KillTimer(rob);
	return 1;
}
}
}
return 1;
}

forward StoreRob2();
public StoreRob2()
{
for(new i = 0; i < MAX_PLAYERS; i++)
{
if(IsPlayerInRangeOfPoint(i,30, -27.1061,-184.6697,1003.5469))
{
StopAudioStreamForPlayer(i);
if(Robber[i] == 1)
{
	SendClientMessage(i, Gelb,"40 Sekunden sind vergangen!");
	KillTimer(rob1);
	rob2 = SetTimer("StoreRob3",20201,1);
	return 1;
}
else
{
	SendClientMessage(i, Rot,"Da du aus dem 24/7 Shop gegangen bist wurde der Überfall abgebrochen!");
	StopAudioStreamForPlayer(i);
	rob3 = SetTimer("RobWait",100052,1);
	StoreRobed[i] =0;
	Robber[i] = 0;
	robbing = 0;
	wait = 1;
	KillTimer(rob1);
	return 1;
}
}
}
return 1;
}

forward StoreRob3();
public StoreRob3()
{
for(new i = 0; i < MAX_PLAYERS; i++)
{
if(Robber[i] == 1)
{
if(IsPlayerInRangeOfPoint(i,30, -27.1061,-184.6697,1003.5469))
{
    new bot = GetNearestBot(i, 30);
	new pcash = robumont;
	new robcash = random(pcash)+217;
	new string[100];
	ClearChat(i);
	PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
	sStats[i][s247Rob] = robcash;
	BizzInfo[1][bTill] -= robcash;
	format(string, sizeof(string), "Du hast den 24/7 Laden erfolgreich ausgeraubt, du erhältst {FF0000}%d!", robcash);
	SendClientMessage(i, Weiß, string);
	SendClientMessage(i,Gelb2, "Hinweis: Du musst nun 25 Minuten flüchten, danach mindert sich dein Wantedlevel!");
	SetTimerEx("RobEndee247", 1500171, false, "d", i); // 25 Minuten
	format(string, sizeof(string), "Überwachungskamera: Der Spieler %s[%d] hat erfolgreich einen 24/7 Laden ausgebraubt!", GetName(i), i);
	sStats[i][sWanteds] += 5;
	SetPlayerWantedLevel(i,sStats[i][sWanteds]);
	SendRadioMessage(1, COLOR_BLUE, string);
	GivePlayerEuro(i,robcash);
	StoreRobed[i] =0;
	Robber[i] = 0;
	robbing = 0;
	wait = 1;
	rob3 = SetTimer("RobWait",100621,1);
	KillTimer(rob2);
	if(!strcmp(GetName(bot),"Martin",true))
 	{
 	    ClearAnimations(bot);
 	    ClearAnimations(i);
 	}
	return 1;
}
else
{
	SendClientMessage(i, Rot,"Da du aus dem 24/7 Shop gegangen bist wurde der Überfall abgebrochen!");
	StopAudioStreamForPlayer(i);
	rob3 = SetTimer("RobWait",100832,1);
	StoreRobed[i] =0;
	Robber[i] = 0;
	robbing = 0;
	wait = 1;
	KillTimer(rob2);
	return 1;
}
}
}
return 1;
}

forward RobWait();
public RobWait()
{
wait = 0;
KillTimer(rob3);
}

forward RobAgain();
public RobAgain()
{
for(new i = 0; i < MAX_PLAYERS; i++)
{
StoreRobed[i] =0;
}
}

forward RobEndee247(playerid);
public RobEndee247(playerid)
{
	ClearChat(playerid);
	SendClientMessage(playerid,Gelb2,"Du bist erfolgreich geflüchtet, dein Wantedlevel mindert sich!");
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	StoreRobed[playerid] = 0;
	Robber[playerid] = 0;
	SetPlayerWantedLevel(playerid,1);
	sStats[playerid][sWanteds] = 1;
	sStats[playerid][s247Rob] = 0;
	return 1;
}

//DJ
forward DJGeld(playerid);
public DJGeld(playerid)
{
	if(Desktop_Status[playerid] == 0)
	{
    	sStats[playerid][sPreamie] += 100;
	}
}

//Logs
forward TeleLog(string[]);
public TeleLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/teleport.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
forward AglLog(string[]);
public AglLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/agl.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward WeaponLog(string[]);
public WeaponLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/waffen.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward AdminLog(string[]);
public AdminLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/admin.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward PremiumLog(string[]);
public PremiumLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/premium.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward TestLog(string[]);
public TestLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/test.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward CheatLog(string[]);
public CheatLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/cheat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward CNNLog(string[]);
public CNNLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/cnn.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward MS14Log(string[]);
public MS14Log(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/ms14.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward CODLog(string[]);
public CODLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/cod.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward KickLog(string[]);
public KickLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward BanLog(string[]);
public BanLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward PayLog(string[]);
public PayLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/pay.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

forward RconLog(string[]);
public RconLog(string[])
{
	new entry[200];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("Logs/rcon.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

//Waffenhändler
forward Umarbeitung(playerid);
public Umarbeitung(playerid)
{
    TogglePlayerControllable(playerid, true);
	DeletePVar(playerid,"MPaket");
 	ClearChat(playerid);
  	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
  	SendClientMessage(playerid,Weiß,"Dein (Roh)Materialpaket wurde erfolgreich in 1000 Materialien umgearbeitet!");
   	sStats[playerid][sMats] += 1000;
}

//Feuersystem
forward AddFire(Float:x, Float:y, Float:z);
public AddFire(Float:x, Float:y, Float:z)
{
	new slot = GetFlameSlot();
	if(slot == -1) {return slot;}
	Flame[slot][Flame_Exists] = 1;
	Flame[slot][Flame_x] = x;
	Flame[slot][Flame_y] = y;
	Flame[slot][Flame_z] = z - Z_DIFFERENCE;
	Flame[slot][Flame_id] = CreateDynamicObject(18689, Flame[slot][Flame_x], Flame[slot][Flame_y], Flame[slot][Flame_z], 0.0, 0.0, 0.0);
	Flammen += 1;
	return slot;
}

//Feuersystem
forward AddFireEx(Float:x, Float:y, Float:z);
public AddFireEx(Float:x, Float:y, Float:z)
{
	new slot = GetFlameSlot();
	if(slot == -1) {return slot;}
	Flame[slot][Flame_Exists] = 1;
	Flame[slot][Flame_x] = x;
	Flame[slot][Flame_y] = y;
	Flame[slot][Flame_z] = z - Z_DIFFERENCE;
	Flame[slot][Flame_id] = CreateDynamicObject(18689, Flame[slot][Flame_x], Flame[slot][Flame_y], Flame[slot][Flame_z], 0.0, 0.0, 0.0);
	return slot;
}

forward KillFire(id);
public KillFire(id)
{
 	DestroyDynamicObject(Flame[id][Flame_id]);
	Flame[id][Flame_Exists] = 0;
	Flame[id][Flame_x] = 0.0;
	Flame[id][Flame_y] = 0.0;
	Flame[id][Flame_z] = 0.0;
	DestroySmoke(id);
	Flammen -= 1;
	if(Flammen <= 0 && brand == 1)
			{
			    Flammen = 0;
			 	for(new p = 0; p < MAX_PLAYERS; p++)
			 	{
 		    	if(sStats[p][sJob] == 4 && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1)
	  		    {
	  		        ClearChat(p);
	  		        brand = 0;
	  		        sStats[p][sPreamie] += 462;
	  		        PlayerPlaySound(p, 1058, 0.0, 0.0, 0.0);
	  		        SendClientMessage(p,Weiß,"Der Brand wurde erfolgreich gelöscht!");
	  		        SendClientMessage(p,Gelb2,"Die Prämie für die Löschung des Feuers wird am nächsten Zahltag gutgeschrieben.");
	  		    }
	  		    if(bsnbrand  == 1)
	  		    {
	  		        ConnectNPC("Jan","bsnbar");
	  		        bsnbrand = 0;
	  		    }
	  		    if(kirchenbrand  == 1)
	  		    {
	  		        kirchenbrand = 0;
	  		    }
 	  		   	if(bankbrand  == 1)
	  		    {
	  		        bankbrand = 0;
	  		    }
	  		   	if(haus1brand  == 1)
	  		    {
	  		        haus1brand = 0;
	  		    }
	  		   	if(haus2brand == 1)
	  		    {
	  		        haus2brand = 0;
	  		    }
	  		   	if(ammubrand == 1)
	  		    {
	  		        ammubrand = 0;
	  		    }
	  		   	if(casinobrand  == 1)
	  		    {
        			ConnectNPC("Dennis","b1");
					ConnectNPC("Ralle","b3");
	  		        casinobrand = 0;
	  		    }
	  		   	if(hladenbrand  == 1)
	  		    {
	  		        hladenbrand = 0;
	  		    }
	  		    }
			}
}

forward FireTimer(playerid, id);
public FireTimer(playerid, id)
{
	if(id < -1 && Aiming_at_Flame(playerid) == id) { StopPlayerBurning(id+MAX_PLAYERS); }
	else if(id < -1 && Pissing_at_Flame(playerid) == id) { StopPlayerBurning(id+MAX_PLAYERS); }
	else if(Flame[id][Flame_Exists] && ((Pressing(playerid) & KEY_FIRE && Aiming_at_Flame(playerid) == id) || (Pissing_at_Flame(playerid) == id)))
	{
		new sendername[MAX_PLAYER_NAME+26];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(Pissing_at_Flame(playerid) == id)
			{
					if(IsAFW(playerid))
					{
					    sStats[playerid][sPreamie] += 2;
					}
			}
			else if(Aiming_at_Flame(playerid) == id)
			{
					if(IsAFW(playerid))
					{
					    sStats[playerid][sPreamie] += 3;
					}
			}
	    KillFire(id);
	}
	KillTimer(ExtTimer[playerid]);
	ExtTimer[playerid] = 0;
}

forward DestroySmoke(id);
public DestroySmoke(id)
{
    for(new i; i < 5; i++)
	{
		DestroyDynamicObject(Flame[id][Smoke][i]);
	}
	return 1;
}

forward StopPlayerBurning(playerid);
public StopPlayerBurning(playerid)
{
	KillTimer(PlayerOnFireTimer[playerid]);
	PlayerOnFire[playerid] = 0;
	RemovePlayerAttachedObject(playerid, FIRE_OBJECT_SLOT);
}

forward SetPlayerBurn(playerid);
public SetPlayerBurn(playerid)
{
    SetPlayerAttachedObject(playerid, FIRE_OBJECT_SLOT, 18690, 2, -1, 0, -1.9, 0, 0);
	PlayerOnFire[playerid] = 1;
	GetPlayerHealth(playerid, PlayerOnFireHP[playerid]);
	KillTimer(PlayerOnFireTimer[playerid]); KillTimer(PlayerOnFireTimer2[playerid]);
	PlayerOnFireTimer[playerid] = SetTimerEx("BurningTimer", 101, 1, "d", playerid);
	PlayerOnFireTimer2[playerid] = SetTimerEx("StopPlayerBurning", 7177, 0, "d", playerid);
	return 1;
}

forward BurningTimer(playerid);
public BurningTimer(playerid)
{
	if(PlayerOnFire[playerid])
	{
	    new Float:hp;
	    GetPlayerHealth(playerid, hp);
	    if(hp < PlayerOnFireHP[playerid])
	    {
	        PlayerOnFireHP[playerid] = hp;
		}
		SetPlayerHealth(playerid, PlayerOnFireHP[playerid]-1.0);
	    PlayerOnFireHP[playerid] -= 1.0;
	}
	else
	{
		KillTimer(PlayerOnFireTimer[playerid]); KillTimer(PlayerOnFireTimer2[playerid]);
	}
}

//StopAudioStream
forward StopAudioStream(playerid);
public StopAudioStream(playerid)
{
    StopAudioStreamForPlayer(playerid);
}

//InDieLuft
forward InDieLuft(playerid);
public InDieLuft(playerid)
{
    TogglePlayerControllable(playerid, true);
    DeletePVar(playerid, "Unfall");
    DeletePVar(playerid, "FW");
   	new Float:xP,Float:xY,Float:xZ;
	GetPlayerPos(playerid, xP, xY, xZ);
	RemovePlayerFromVehicle(playerid);
	SetPlayerHealth(playerid,0.0);
	CreateExplosion(xP, xY, xZ, 12, 3.0);
	if(GetPVarInt(playerid, "FW") == 1)
	{
	    SetPVarInt(DeinFW[playerid], "FW2", 1);
	    DeinFW[DeinFW[playerid]] = 0;
		DeinFW[playerid] = 0;
		DeletePVar(playerid, "InFW");
		DeletePVar(playerid, "FW");
	}
}

//IsABike
forward IsABike(vehicleid);
public IsABike(vehicleid)
{
	new vmod = GetVehicleModel(vehicleid);
	if(vmod == 481 || vmod == 509 || vmod == 510 || vmod == 581 || vmod == 521 || vmod == 463 || vmod == 522 || vmod == 461 || vmod == 448 || vmod == 468 || vmod == 586 || vmod == 523)
	{
		return 1;
	}
	return 0;
}

//IsAFiretruck
forward IsAFiretruck(vehicleid);
public IsAFiretruck(vehicleid)
{
	new vmod = GetVehicleModel(vehicleid);
	if(vmod == 544 || vmod == 407)
	{
		return 1;
	}
	return 0;
}

//IsATruck
forward IsATruck(vehicleid);
public IsATruck(vehicleid)
{
	new vmod = GetVehicleModel(vehicleid);
	if(vmod == 403 || vmod == 515)
	{
		return 1;
	}
	return 0;
}

//IsABoat
forward IsABoat(vehicleid);
public IsABoat(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	if(model==472||model==493||model==473||model==493||model==595||model==484||model==430||model==453||model==446||model==553||model==464)
	{
		return 1;
	}
	return 0;
}

//IsANotCar
forward IsANotCar(carid);
public IsANotCar(carid)
{
    new realcarid;
    realcarid = GetVehicleModel(carid);
    if(realcarid==582||realcarid==601||realcarid==568||realcarid==432||realcarid==495||realcarid==525||realcarid==406||realcarid==407||realcarid==416||realcarid==423||realcarid==427||realcarid==428||realcarid==431||realcarid==432||realcarid==433||realcarid==437||realcarid==486||realcarid==514||realcarid==528||realcarid==530||realcarid==532||realcarid==434)
    {
        return 1;
    }
    return 0;
}

//IsANotSpoilerCar
forward IsANotSpoilerCar(carid);
public IsANotSpoilerCar(carid)
{
    new realcarid;
    realcarid = GetVehicleModel(carid);
    if(realcarid==552)
    {
        return 1;
    }
    return 0;
}

//IsAPaintjobCar
forward IsAPaintjobCar(carid);
public IsAPaintjobCar(carid)
{
 	new model = GetVehicleModel(carid);
	if(model==483||model==534||model==535||model==536||model==513||model==558||model==559||model==560||model==561||model==562||model==565||model==567||model==575||model==576)
	{
		return 1;
	}
	return 0;
}

//IsAWAACar
forward IsAWAACar(carid);
public IsAWAACar(carid)
{
 	new model = GetVehicleModel(carid);
	if(model==562||model==565||model==559||model==561||model==560||model==558)
	{
		return 1;
	}
	return 0;
}

forward IsALocoCar(carid);
public IsALocoCar(carid)
{
 	new model = GetVehicleModel(carid);
	if(model==536||model==575||model==534||model==567||model==535||model==566||model==576||model==412)
	{
		return 1;
	}
	return 0;
}

//IsAPlane
forward IsAPlane(vehicleid);
public IsAPlane(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	if(model==520||model==476||model==593||model==553||model==513||model==512||model==577||model==592||model==511||model==464||model==460||model==519||model==487||model==488||model==497)
	{
		return 1;
	}
	return 0;
}

//Adminsystem
stock IstSpielerAdmin(playerid,level)
{
	if(sStats[playerid][sAdminlevel] >= level) return 1;
	return 0;
}

//SpawninBayside
forward SpawninBayside(playerid);
public SpawninBayside(playerid)
{
    SpawnBayside(playerid);
}

forward CheckpointWeg(playerid);
public CheckpointWeg(playerid)
{
    DisablePlayerCheckpoint(playerid);
    QuestCP[playerid] = 0;
}

//Jackboy
forward Jackboy(playerid);
public Jackboy(playerid)
{
	ClearChat(playerid);
	SendClientMessage(playerid,Weiß,"{FFFF00}Jack: {FFFFFF}Hey du, komm mal rüber zu mir ich hab ein interessantes Angebot für dich!");
	SendClientMessage(playerid,Gruen,"Info: Gehe zu Jack und benutze /reden!");
	sStats[playerid][sQuest] = 0;
	sStats[playerid][sErf] = 0;
	return 1;
}

//Drift
//Maya Blowjob
forward StartMayaBlow();
public StartMayaBlow()
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Maya", true))
  			{
  				SetPlayerChatBubble(i,"Maya: {FFFFFF}Mhhh... Lecker!",0xFFFF00DD,35.0,10000);
				ApplyAnimation(i, "BLOWJOBZ","BJ_COUCH_Loop_W", 4.0, 1, 1, 1, 1, 1, 1);
  			}
  		}
  	}
}

forward MayaBlowEnd(playerid);
public MayaBlowEnd(playerid)
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Maya", true))
  			{
  				SetPlayerChatBubble(i,"Maya: {FFFFFF}So Endspurt . . .!",0xFFFF00DD,35.0,6006);
				ApplyAnimation(i, "BLOWJOBZ","BJ_COUCH_End_W", 4.0, 0, 1, 1, 1, 1, 1);
  			}
  		}
  		        SetTimerEx("MayaEnde", 6053, false, "d", playerid);
  	}
}

forward MayaEnde(playerid);
public MayaEnde(playerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Maya", true))
  			{
				ClearAnimations(i);
  			}
  		}
  	}
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	SetTimer("MayaUnBusy1",1063,false);
  	return 1;
}

forward Prepare1(playerid);
public Prepare1(playerid)
{
    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    GameTextForPlayer(playerid,"~y~2!",1028,4);
}

forward Prepare2(playerid);
public Prepare2(playerid)
{
	DestroyAllDriftCP(playerid);
    Score[playerid] = 0;
    SetPVarInt(playerid, "FunModus", 0);
    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
    GameTextForPlayer(playerid,"~b~1!",1028,4);
}

forward Prepare3(playerid);
public Prepare3(playerid)
{
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    GameTextForPlayer(playerid,"~g~GO GO GO!",1028,4);
    SetPlayerCheckpoint(playerid,-215.0820,1402.2438,119.9135, 5);
    TogglePlayerControllable(playerid, true);
    DriftCP1[playerid]=CreateDynamicCP(-299.6890,1475.9454,74.7772, 5, 1+playerid, 0, playerid,600.0);
    Driftzeit[playerid] = gettime();
    ClearChat(playerid);
    return 1;
}

forward StartDriftrennen(playerid);
public StartDriftrennen(playerid)
{
    new carid = GetPlayerVehicleID(playerid);
	if(GetPVarInt(playerid, "StartDrift") == 1)
	{
	    ClearChat(playerid);
		SetVehiclePos(carid,-248.1471,1445.7998,119.9145);
		SetVehicleZAngle(carid, 226.2195);
  		DisablePlayerCheckpoint(playerid);
    	TogglePlayerControllable(playerid, false);
	    SendClientMessage(playerid,Gelb,"Dein Driftrennen startet in . . .");
	    GameTextForPlayer(playerid,"~r~3!",1028,4);
	    PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	    SetTimerEx("Prepare1",1069,false,"i",playerid);
	    SetTimerEx("Prepare2",2087,false,"i",playerid);
	    SetTimerEx("Prepare3",3023,false,"i",playerid);
	    SetVehicleVirtualWorld(carid,1+playerid);
	    SetPlayerVirtualWorld(playerid,1+playerid);
	    SetCameraBehindPlayer(playerid);
	}
}

//CleanAnimations
forward CleanAnimations(playerid);
public CleanAnimations(playerid)
{
	ClearAnimations(playerid);
}

//Premium Klingelton
forward GetPRingTone(playerid);
public GetPRingTone(playerid)
{
    TogglePlayerControllable(playerid, true);
    StopAudioStreamForPlayer(playerid);
    ShowPlayerDialog(playerid, PREMIUM2, DIALOG_STYLE_MSGBOX, "Musik Authentifizierung", "{FFFFFF}Konntest du die {FFFF00}Musik{FFFFFF} hören?\nWenn {FFFF00}Ja{FFFFFF} klicke auf Weiter um deinen Klingelton zu speichern.\nWenn {FFFF00}Nein{FFFFFF} klicke auf Zurück um einen andereren auszuwählen!", "Weiter","Zurück");
}

//Motorradschein Checkpoint anzeigen lassen
forward INMSCHEIN(playerid);
public INMSCHEIN(playerid)
{
	FscheinCP[playerid] = 10;
	SetPlayerCheckpoint(playerid,-2512.5864,2430.2268,16.6847,3.0);
}

//Sonnenbrille
forward Sonnenbrillekaufen(playerid);
public Sonnenbrillekaufen(playerid)
{
    ShowPlayerDialog(playerid, SONNENBRILLEN2, DIALOG_STYLE_MSGBOX, "Sonnenbrille kaufen", "{FFFFFF}Möchtest du diese {FFFF00}Sonnenbrille{FFFFFF} kaufen?", "Ja","Nein");
}

forward SetSonnenbrille(playerid);
public SetSonnenbrille(playerid)
{
	new skin = 225;
    SetPlayerAttachedObject(playerid, 2, 19006,2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
}

forward AnimationsEnd(playerid);
public AnimationsEnd(playerid)
{
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);
	SendClientMessage(playerid,Weiß,"Der Kuss war fabelhaft, du fühlst dich sehr gut!");
	SetPlayerPosEx(playerid,-2617.7407,2436.3701,15.0689);
	SetPlayerFacingAngle(playerid,64.3041);
	GivePlayerEuro(playerid,-100);
	SetCameraBehindPlayer(playerid);
	nutte = 0;
}

//Fahrzeug herausfinden
forward IsACopCar(carid);
public IsACopCar(carid)
{
		if(spawncar_job[carid] == 1 || spawncar_job[carid] == 98 || spawncar_job[carid] == 3)
		{
            return 1;
    	}
    return 0;
}

forward IsAAdminCar(carid);
public IsAAdminCar(carid)
{
		if(spawncar_job[carid] == 100)
		{
            return 1;
    	}
    return 0;
}

forward IsSupportCar(carid);
public IsSupportCar(carid)
{
		if(spawncar_job[carid] == 101)
		{
            return 1;
    	}
    return 0;
}

forward IsAFahrschulCar(carid);
public IsAFahrschulCar(carid)
{
		if(spawncar_job[carid] == 95 || spawncar_job[carid] == 94)
		{
            return 1;
    	}
    return 0;
}

forward IsASpeditionsCar(carid);
public IsASpeditionsCar(carid)
{
		if(spawncar_job[carid] == 91)
		{
            return 1;
    	}
    return 0;
}

forward IsAEventCar(carid);
public IsAEventCar(carid)
{
		if(spawncar_job[carid] == 92)
		{
            return 1;
    	}
    return 0;
}

forward IsAFarmerCar(carid);
public IsAFarmerCar(carid)
{
		if(spawncar_job[carid] == 93)
		{
            return 1;
    	}
    return 0;
}

forward IsAMechaCar(carid);
public IsAMechaCar(carid)
{
		if(spawncar_job[carid] == 97)
		{
            return 1;
    	}
    return 0;
}

forward IsASanCar(carid);
public IsASanCar(carid)
{
		if(spawncar_job[carid] == 6)
		{
            return 1;
    	}
    return 0;
}

forward IsAFahrrad(carid);
public IsAFahrrad(carid)
{
 	new model = GetVehicleModel(carid);
	if(model==481||model==509||model==510)
	{
		return 1;
	}
	return 0;
}

//Tanksystem
forward Tanken(playerid);
public Tanken(playerid)
{
    ShowPlayerDialog(playerid, TANKEN1, DIALOG_STYLE_INPUT, "Tanken", "{FFFFFF}Wieviele {FFFF00}Liter{FFFFFF} möchtest du tanken?", "Tanken","Abbrechen");
}

forward TankTimer(playerid);
public TankTimer(playerid)
{
	if(IsPlayerConnected(playerid) && IsPlayerInAnyVehicle(playerid) && VehicleStarted[GetPlayerVehicleID(playerid)] == 1 && MotorKaputt[GetPlayerVehicleID(playerid)] == 0 && GetPVarInt(playerid, "Betankt") == 0 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 481)
	{
 		if(Tankmenge[GetPlayerVehicleID(playerid)] >= 1)
	    {
        	Tankmenge[GetPlayerVehicleID(playerid)] -= 1;
  			if(Tankmenge[GetPlayerVehicleID(playerid)] == 1)
		    {
	        	PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			}
			if(Tankmenge[GetPlayerVehicleID(playerid)] == 2)
		    {
	        	PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			}
			if(Tankmenge[GetPlayerVehicleID(playerid)] == 3)
		    {
	        	PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			}
			if(Tankmenge[GetPlayerVehicleID(playerid)] <= 0)
		    {
				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~w~Motor ~r~ausgefallen!", 5100, 5);
				SendClientMessage(playerid,Rot,"Dein Motor ist ausgefallen da dein Tank leer ist!");
				SendClientMessage(playerid,Gelb2,"Mit /service kannst du einen Mechatroniker anrufen, der dein Auto abschleppt!");
				HideSpeedometer(playerid);
				VehicleStarted[GetPlayerVehicleID(playerid)] = 0;
				SetVehicleParamsEx(GetPlayerVehicleID(playerid),VEHICLE_PARAMS_OFF,0,0,0,0,0,0);
				SetRadioStation(GetPlayerVehicleID(playerid),0);
	        	return 1;
			}
		}
	}
	return 1;
}

forward TankenEnde(playerid);
public TankenEnde(playerid)
{
    new carid = GetPlayerVehicleID(playerid);
    new string[128];
    if(IsSupportCar(carid))
    {
 	  	ClearChat(playerid);
		format(string, sizeof(string), "Du hast erfolgreich %d Liter getankt.",GetPVarInt(playerid, "Tankmenge"));
	 	SendClientMessage(playerid,Weiß,string);
	 	SendClientMessage(playerid,Gelb2,"Tankwart: Die Tankkosten für das Supportauto wurden vom Server übernommen!");
	 	Tankmenge[GetPlayerVehicleID(playerid)] +=GetPVarInt(playerid, "Tankmenge");
		SetPVarInt(playerid,"Tankpreis",0);
		SetPVarInt(playerid,"Tankmenge",0);
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		TogglePlayerControllable(playerid, true);
		SetPVarInt(playerid,"Betankt",0);
	    return 1;
    }
	if(IsACopCar(carid) && Staatskasse >=GetPVarInt(playerid, "Tankpreis"))
	{
	    ClearChat(playerid);
		format(string, sizeof(string), "Du hast erfolgreich %d Liter getankt.",GetPVarInt(playerid, "Tankmenge"));
	 	SendClientMessage(playerid,Weiß,string);
	 	SendClientMessage(playerid,Gelb2,"Tankwart: Die Tankkosten wurden vom Staat übernommen!");
	 	Staatskasse -= GetPVarInt(playerid, "Tankpreis");
	 	Tankmenge[GetPlayerVehicleID(playerid)] +=GetPVarInt(playerid, "Tankmenge");
 		BizzInfo[0][bProducts] -= GetPVarInt(playerid, "Tankmenge");
		BizzInfo[0][bTill] += GetPVarInt(playerid, "Tankpreis");
		SetPVarInt(playerid,"Tankpreis",0);
		SetPVarInt(playerid,"Tankmenge",0);
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		TogglePlayerControllable(playerid, true);
		SetPVarInt(playerid,"Betankt",0);
	    return 1;
	}
	if(IsACopCar(carid) && Staatskasse <=GetPVarInt(playerid, "Tankpreis"))
	{
	    ClearChat(playerid);
		format(string, sizeof(string), "Du hast erfolgreich %d Liter getankt.",GetPVarInt(playerid, "Tankmenge"));
	 	SendClientMessage(playerid,Weiß,string);
	 	SendClientMessage(playerid,Gelb2,"Tankwart: Du musstest die Tankkosten selber begleichen da die Staatskasse leer ist!");
        GivePlayerEuro(playerid,-GetPVarInt(playerid, "Tankpreis"));
	 	Tankmenge[GetPlayerVehicleID(playerid)] +=GetPVarInt(playerid, "Tankmenge");
 		BizzInfo[0][bProducts] -= GetPVarInt(playerid, "Tankmenge");
		BizzInfo[0][bTill] += GetPVarInt(playerid, "Tankpreis");
		SetPVarInt(playerid,"Tankpreis",0);
		SetPVarInt(playerid,"Tankmenge",0);
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		TogglePlayerControllable(playerid, true);
		SetPVarInt(playerid,"Betankt",0);
	    return 1;
	}
	if(GetPVarInt(playerid,"ATanke") == 1)
	{
		ClearChat(playerid);
		GivePlayerEuro(playerid,-GetPVarInt(playerid, "Tankpreis"));
		Tankmenge[GetPlayerVehicleID(playerid)] +=GetPVarInt(playerid, "Tankmenge");
	 	format(string, sizeof(string), "Du hast erfolgreich %d Liter getankt.",GetPVarInt(playerid, "Tankmenge"));
	 	SendClientMessage(playerid,Weiß,string);
		BizzInfo[0][bProducts] -= GetPVarInt(playerid, "Tankmenge");
		BizzInfo[0][bTill] += GetPVarInt(playerid, "Tankpreis");
		SetPVarInt(playerid,"Tankpreis",0);
		SetPVarInt(playerid,"Tankmenge",0);
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		TogglePlayerControllable(playerid, true);
		SetPVarInt(playerid,"Betankt",0);
	    SetPVarInt(playerid,"ATanke",0);
	    return 1;
	}
	if(!IsACopCar(carid))
	{
		ClearChat(playerid);
		GivePlayerEuro(playerid,-GetPVarInt(playerid, "Tankpreis"));
		Tankmenge[GetPlayerVehicleID(playerid)] +=GetPVarInt(playerid, "Tankmenge");
	 	format(string, sizeof(string), "Du hast erfolgreich %d Liter getankt.",GetPVarInt(playerid, "Tankmenge"));
	 	SendClientMessage(playerid,Weiß,string);
	 	SendClientMessage(playerid,Gelb2,"Tankwart: Beehren Sie uns bald wieder!");
		BizzInfo[0][bProducts] -= GetPVarInt(playerid, "Tankmenge");
		BizzInfo[0][bTill] += GetPVarInt(playerid, "Tankpreis");
		SetPVarInt(playerid,"Tankpreis",0);
		SetPVarInt(playerid,"Tankmenge",0);
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		TogglePlayerControllable(playerid, true);
		SetPVarInt(playerid,"Betankt",0);
		return 1;
	}
	return 1;
}

//Business System
forward SaveBizz();
public SaveBizz()
{
	new idx;
	new File: file2;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bMessage],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntranceX],
		BizzInfo[idx][bEntranceY],
		BizzInfo[idx][bEntranceZ],
		BizzInfo[idx][bExitX],
		BizzInfo[idx][bExitY],
		BizzInfo[idx][bExitZ],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bEntranceCost],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bLocked],
		BizzInfo[idx][bInterior],
		BizzInfo[idx][bProducts],
		BizzInfo[idx][bMaxProducts],
		BizzInfo[idx][bPriceProd]);
		if(idx == 0)
		{
			file2 = fopen("Sonstiges/Business.txt", io_write);
		}
		else
		{
			file2 = fopen("Sonstiges/Business.txt", io_append);
		}
		UpdateBizzLabel(idx);
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
}

forward LoadBizz();
public LoadBizz()
{
	new arrCoords[19][64];
	new strFromFile2[256];
	new File: file = fopen("Sonstiges/Business.txt", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			BizzInfo[idx][bOwned] = strval(arrCoords[0]);
			strmid(BizzInfo[idx][bOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BizzInfo[idx][bMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BizzInfo[idx][bExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			BizzInfo[idx][bEntranceX] = floatstr(arrCoords[4]);
			BizzInfo[idx][bEntranceY] = floatstr(arrCoords[5]);
			BizzInfo[idx][bEntranceZ] = floatstr(arrCoords[6]);
			BizzInfo[idx][bExitX] = floatstr(arrCoords[7]);
			BizzInfo[idx][bExitY] = floatstr(arrCoords[8]);
			BizzInfo[idx][bExitZ] = floatstr(arrCoords[9]);
			BizzInfo[idx][bLevelNeeded] = strval(arrCoords[10]);
			BizzInfo[idx][bBuyPrice] = strval(arrCoords[11]);
			BizzInfo[idx][bEntranceCost] = strval(arrCoords[12]);
			BizzInfo[idx][bTill] = strval(arrCoords[13]);
			BizzInfo[idx][bLocked] = strval(arrCoords[14]);
			BizzInfo[idx][bInterior] = strval(arrCoords[15]);
			BizzInfo[idx][bProducts] = strval(arrCoords[16]);
			BizzInfo[idx][bMaxProducts] = strval(arrCoords[17]);
			BizzInfo[idx][bPriceProd] = strval(arrCoords[18]);
			UpdateBizzLabel(idx);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

//TowtruckAnzeige
forward TowtruckAnzeige(playerid);
public TowtruckAnzeige(playerid)
{
    SendClientMessage(playerid,Gelb,"Mit der [STRG] Taste kannst du Fahrzeug abschleppen!");
}

//Stopsound
forward StopSound(playerid);
public StopSound(playerid)
{
	StopAudioStreamForPlayer(playerid);
}

//StopSoundEx
forward StopSoundEx(playerid);
public StopSoundEx(playerid)
{
    PlayerPlaySound(playerid, 1186, 0, 0, 0);
}

//CheckZAngle
forward CheckZAngle(playerid);
public CheckZAngle(playerid)
{
	if(GetPVarInt(playerid, "InFschein") > 0)
	{
		new Float:z_rot;
		GetVehicleZAngle(GetPlayerVehicleID(playerid), z_rot);
		if(z_rot >= 265.000 && z_rot <= 273.5000)
		{
			ClearChat(playerid);
			DisablePlayerCheckpoint(playerid);
			PlayerPlaySound(playerid, 1057, -1,-1,-1);
			SendClientMessage(playerid, COLOR_WHITE, "Fahre nun zurück zur Kreuzung.");
			SetPlayerCheckpoint(playerid, -2018.0583,-196.1216,35.3203, 3.0); //Führerschein Praxis CP 7
			FscheinCP[playerid] = 7;
			SetPVarInt(playerid,"Nachricht",0);
			KillTimer(rtimer[playerid]);
		}
		else
		{
			if(GetPVarInt(playerid, "Nachricht") == 0)
			{
				ClearChat(playerid);
				SetPVarInt(playerid,"Nachricht",1);
				SendClientMessage(playerid, COLOR_WHITE, "Bitte versuche nun so sauber wie möglich hier Rückwärts einzuparken.");
			}
		}
	}
}

//Support
forward BikesRespawn();
public BikesRespawn()
{
    BikesR = 0;
}

//Adminaufzug
forward Adminaufzug();
public Adminaufzug()
{
   	MoveDynamicObject(adminaufzug1, 2500.287354, 2771.257568, 9.868746, 3.0);
	MoveDynamicObject(adminaufzug2, 2494.605957, 2771.261719, 9.897823, 3.0);
	AdminAufzugB = 0;
	return 1;
}

//SN Haus Überwachung
forward GiveWeapon(playerid);
public GiveWeapon(playerid)
{
    GivePlayerWeapon(playerid, 30, 500);
}

//Blitzer
forward RemoveFlash(playerid);
public RemoveFlash(playerid)
{
	TextDrawHideForPlayer(playerid,flash);
	SetPVarInt(playerid,"PlayerHasBeenFlashed",2);
}

//Banksystem
forward SetBankRaub();
public SetBankRaub()
{
     	BankRaub = 1;
}

forward BankRaub2(playerid);
public BankRaub2(playerid)
{
	new string[150];
	SetPVarInt(playerid, "Bankraub", 1);
	ClearChat(playerid);
	SetCameraBehindPlayer(playerid);
	BankRaubATM = 0;
	SendClientMessage(playerid, Rot, "|___________________________________| Banküberfall |_______________________________________|");
    SendClientMessage(playerid, Gelb2, "Du hast die Bank überfallen!                                      ");
    SendClientMessage(playerid, Gelb2, "Du hast nun Wanted Lvl. 6 und musst vor dem Staat flüchten!                   ");
    SendClientMessage(playerid, Gelb2, "ausloggen bringt dir nichts, beim nächsten Login wird jede Sicherheitskraft benachrichtigt!");
    SendClientMessage(playerid, COLOR_LIGHTRED, "INFO: Gehe nun zum roten Punkt nach Las Venturas und lasse das Geld waschen!");
    SendClientMessage(playerid, Rot, "|_______________________________________________________________________________________|");
	sStats[playerid][sWanteds] = 6;
	SetPlayerWantedLevel(playerid,sStats[playerid][sWanteds]);
    format(string, sizeof(string), "Der Spieler %s[%d] hat erfolgreich die Bank in Bayside überfallen!", GetName(playerid), playerid);
	SendRadioMessage(1, COLOR_BLUE, string);
	SendRadioMessage(2, COLOR_BLUE, string);
	SendRadioMessage(3, COLOR_BLUE, string);
	SetPlayerAttachedObject( playerid, 0, 1550, 1, 0.000000, -0.220224, 0.000000, 1.166815, 85.423309, 0.000000, 1.000000, 1.000000, 1.000000 ); //Geldsack an den Spieler hängen
	SetPlayerCheckpoint(playerid, 1026.5580,2365.8740,10.8203, 2.0); //Geld Wäsche
	QuestCP[playerid] = 955;
	TogglePlayerControllable(playerid, true); TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	new bot = GetNearestBot(playerid,6);
	if(!strcmp(GetName(bot),"Lissa",true))
	{
		ApplyAnimation(bot, "BAR","Barserve_give", 4.0, 0, 1, 1, 1, 0, 1);
		SetPlayerChatBubble(bot,"Lissa: Hier das Geld!",Rot,35.0,4000);
	}
}

//PayNSpray
forward Umlackieren(playerid);
public Umlackieren(playerid)
{
    new color = random(127);
    PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	psn = 0;
	ClearChat(playerid);
	SendClientMessage(playerid,Weiß,"Dein Fahrzeug wurde erfolgreich umgefärbt!");
	SendClientMessage(playerid,Gelb2,"Viel Spass mit ihrer neuen Farbe!");
	TogglePlayerControllable(playerid, true);
	RepairVehicle(GetPlayerVehicleID(playerid));
	MoveDynamicObject(psgate,-2298.4157714844, 2343.5158691406, 0.4969425201416,2);
	ChangeVehicleColor(GetPlayerVehicleID(playerid), color, color);
	return 1;
}

//PayNSpray
forward Umlackieren2(playerid);
public Umlackieren2(playerid)
{
    PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	psn = 0;
	ClearChat(playerid);
	SendClientMessage(playerid,Weiß,"Dein Fahrzeug wurde erfolgreich umgefärbt!");
	SendClientMessage(playerid,Gelb2,"Viel Spass mit ihrer neuen Farbe!");
	TogglePlayerControllable(playerid, true);
	RepairVehicle(GetPlayerVehicleID(playerid));
	MoveDynamicObject(psgate,-2298.4157714844, 2343.5158691406, 0.4969425201416,2);
	return 1;
}

//ResetMaustelle
forward ResetMaustelle(playerid);
public ResetMaustelle(playerid)
{
    mautstelle[playerid] = 0;
}

//SetTutorial
forward SetTutorial(playerid);
public SetTutorial(playerid)
{
    SetPlayerPosEx(playerid,-2299.3298,2348.9004,5.1230);
}

//10 Minuten Timer
forward MMinuteTimer();
public MMinuteTimer()
{
	//Feuerwehreinsatz
	if(FeuerwehrOn >= 1)
	{
		Feuerwehreinsatz();
	}
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if (IsPlayerConnected (i) && !IsPlayerNPC(i))
		{
		    if(Desktop_Status[i] >= 1)
		    {
		        return 1;
		    }
			new Float:Leben;
			GetPlayerHealth(i,Leben);
		    //Krankheiten
			if(sStats[i][sKrankheit] == 6)
			{
			    SendClientMessage(i,Weiß,"Du fühlst dich immer noch nicht berauschend dein Magen grummelt immer heftiger!");
			    SetPlayerHealth(i,Leben-3.0);
			    if(!IsPlayerInAnyVehicle(i))
		 	    return ApplyAnimation(i,"FOOD","EAT_Vomit_P", 4.0, 0, 0, 0, 0, 0, 1);
				return 1;
		 	}
			if(sStats[i][sKrankheit] == 5)
			{
			    SendClientMessage(i,Weiß,"Du hast immer noch sehr starke Kopfschmerzen du denkst dein Kopf wirde jeden moment explodieren!");
			    SetPlayerHealth(i,Leben-5.0);
			    return 1;
		 	}
			if(sStats[i][sKrankheit] == 7)
			{
			    SendClientMessage(i,Weiß,"Deine Erkältung wird schlimmer und schlimmer, such schnellst möglich einen Arzt auf!");
			    SetPlayerHealth(i,Leben-4.0);
			    if(!IsPlayerInAnyVehicle(i) && GetPlayerInterior(i) == 0)
		 	    {
		 	        new anm = random(3);
	   				switch(anm)
					{
						case 0:PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/husten.wav");
						case 1:PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/niesen.mp3");
						case 2:PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/husten.wav");
					}
		 	    }
		   	}
		}
	}
	return 1;
}

//Levelsystem
forward MinuteTimer();
public MinuteTimer()
{
	//Pfand
	new anm = random(5);
	switch(anm)
	{
		case 0:Pfand += 0;
		case 1:Pfand += 1;
		case 2:Pfand += 2;
		case 3:Pfand += 3;
		case 4:Pfand += 0;
	}
 	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if (IsPlayerConnected(i) && !IsPlayerNPC(i) && Desktop_Status[i] == 0)
		{
				sStats[i][sPayPoints] ++;
				if(sStats[i][sPayPoints] >= 60 && Desktop_Status[i] == 0)
				{
					PayDay(i);
				}
		 }
	}
}

forward PayDay(playerid);
public PayDay(playerid)
{
    new nxtlevel = sStats[playerid][sLevel]+1;
    new expamount = nxtlevel*levelexp;
    new lohn,key,string[128];
    sStats[playerid][sErf] ++;
    key = sStats[playerid][sHaus];
    sStats[playerid][sSpielstunden] ++;
    sStats[playerid][sPayPoints] = 0;
    if(sStats[playerid][sPremium] > 0)
    {
    	sStats[playerid][spPayday] +=1;
    }
    if(sStats[playerid][spPayday] == 2 && sStats[playerid][sPremium] > 0)
    {
        sStats[playerid][sErf] ++;
        sStats[playerid][spPayday] = 0;
	}
	//Kündigungszeit -1
	if(sStats[playerid][sJobTime] > 0 && sStats[playerid][sJob] > 0)
	{
		sStats[playerid][sJobTime] --;
	}
    //PayDay
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Zahltag",5000, 5);
    ClearChat(playerid);
    format(string,sizeof(string),"--- Kontozugänge ---");
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    if(sStats[playerid][sArbeitslosengeld] == 0 && sStats[playerid][sFraktion] > 0)
    {
        lohn = sStats[playerid][sLevel] * (sStats[playerid][sRank]/2) * 581;
        if(lohn > 1000)
        {
		    format(string,sizeof(string),"Lohn: {00FF14}%d.",lohn);
		    SendClientMessage(playerid,Weiß,string);
		    sStats[playerid][sKonto] += lohn;
	    }
	    else if(lohn < 1000)
	    {
	        new llohn = lohn +221;
	    	format(string,sizeof(string),"Lohn: {00FF14}%d.",llohn);
		    SendClientMessage(playerid,Weiß,string);
		    sStats[playerid][sKonto] += llohn;
	    }
    }
    else if(sStats[playerid][sArbeitslosengeld] == 1 && Staatskasse > 450)
	{
	    lohn = 450;
 		format(string,sizeof(string),"Arbeitslosengeld: {00FF14}%d.", lohn);
	    SendClientMessage(playerid,Weiß,string);
	    sStats[playerid][sKonto] += lohn;
		Staatskasse-=lohn;
	}
	if(sStats[playerid][sPreamie] > 0)
	{
	    format(string,sizeof(string),"Sonstige Verdienste: {00FF14}%d.",sStats[playerid][sPreamie]);
	    SendClientMessage(playerid,Weiß,string);
	    sStats[playerid][sKonto] += sStats[playerid][sPreamie];
	    sStats[playerid][sPreamie] = 0;
    }
    new zinsen = (sStats[playerid][sKonto]/1000)*2;
    format(string,sizeof(string),"0,1 Prozent Zinsen aufs Bankguthaben: {00FF14}+%d.",zinsen);
    SendClientMessage(playerid,Weiß,string);
    sStats[playerid][sKonto] += zinsen;
    format(string,sizeof(string),"--- Kontoabgänge ---");
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    if(sStats[playerid][sVertrag] == 1)
    {
	    format(string,sizeof(string),"Handy Vertrag: {FF0000}-500");
	    SendClientMessage(playerid,Weiß,string);
		sStats[playerid][sKonto] -= 500;
		BizzInfo[6][bTill] += 500;
    }
    if(sStats[playerid][sKrankenver] == 1)
    {
    	format(string,sizeof(string),"Krankenversicherung: {FF0000}-800");
	    SendClientMessage(playerid,Weiß,string);
		sStats[playerid][sKonto] -= 800;
		Staatskasse += 500;
    }
    else if(sStats[playerid][sKrankenver] == 0 && sStats[playerid][sArztkosten] > 0)
    {
   		format(string,sizeof(string),"Arztkosten: {FF0000}-%d",sStats[playerid][sArztkosten]);
	    SendClientMessage(playerid,Weiß,string);
		sStats[playerid][sKonto] -= sStats[playerid][sArztkosten];
        sStats[playerid][sArztkosten] = 0;
        Staatskasse+=sStats[playerid][sArztkosten];
    }
    if(sStats[playerid][sAutover] == 1)
    {
    	format(string,sizeof(string),"Autoversicherung: {FF0000}-1000");
	    SendClientMessage(playerid,Weiß,string);
		sStats[playerid][sKonto] -= 1000;
		Staatskasse += 1000;
    }
    if(!IsAStaat(playerid) && sStats[playerid][sArbeitslosengeld] == 0 && sStats[playerid][sFraktion] != 0 || sStats[playerid][sJob] != 0)
    {
	    format(string,sizeof(string),"--- Steuern ---");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
        new steuern = sStats[playerid][sLevel] * 80 - 45;
   		format(string,sizeof(string),"Steuern: {FF0000}-%d",steuern);
	    SendClientMessage(playerid,Weiß,string);
		sStats[playerid][sKonto] -= steuern;
		Staatskasse += steuern;
    }
    if(key != 255)
    {
   		format(string,sizeof(string),"--- Haus ---");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    }
    if(sStats[playerid][sMieter] == 1 && key != 255)
    {
        new rent = HouseInfo[key][hRent];
   		format(string,sizeof(string),"Miete: {FF0000}-%d",rent);
	    SendClientMessage(playerid,Weiß,string);
		sStats[playerid][sKonto] -= rent;
		HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
    }
    if(sStats[playerid][sHaus] != 255 && sStats[playerid][sMieter] == 0)
    {
  		format(string,sizeof(string),"Stromkosten: {FF0000}-%d",BizzInfo[4][bEntranceCost]);
	    SendClientMessage(playerid,Weiß,string);
		sStats[playerid][sKonto] -= BizzInfo[4][bEntranceCost];
		BizzInfo[4][bTill] += BizzInfo[4][bEntranceCost];
    }
/*    if(sStats[playerid][sBizz] != 255)
    {
	    format(string,sizeof(string),"--- Business ---");
	    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
  		format(string,sizeof(string),"Stromkosten: {FF0000}-%d",BizzInfo[4][bEntranceCost]);
	    SendClientMessage(playerid,Weiß,string);
		sStats[playerid][sKonto] -= BizzInfo[4][bEntranceCost];
		BizzInfo[4][bTill] += BizzInfo[4][bEntranceCost];
    }*/
    format(string,sizeof(string),"--- Neuer Kontostand ---");
    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
    format(string,sizeof(string),"Neuer Kontostand: {00FF14}%d",sStats[playerid][sKonto]);
	SendClientMessage(playerid,Weiß,string);
	lohn = 0;
 	if(sStats[playerid][sErf] >= expamount)
    {
        sStats[playerid][sErf] = 0;
        LevelUp(playerid);
        return 1;
    }
    return 1;
}

forward LevelUp(playerid);
public LevelUp(playerid)
{
	new string[128];
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Level ~g~aufstieg",8000, 5);
    sStats[playerid][sLevel] ++;
    format(string, sizeof(string), "Herzlichen Glückwunsch, du bist jetzt Level %d!",sStats[playerid][sLevel]);
    SendClientMessage(playerid,Gelb2,string);
    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
    SetPlayerScore(playerid,sStats[playerid][sLevel]);
    if(sStats[playerid][sQuest] == 3 && sStats[playerid][sLevel] > 1)
    {
        sStats[playerid][sQuest] = 4;
   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: jo Bro, es gibt da ein kleines Problem um das du dich kümmern müsstest!");
	    SendClientMessage(playerid, COLOR_YELLOW, "Son Azzlack verkauft Drogen in meinem Revier ich hab dem schon öfters gesagt da er sich aus meiner Hood verpissen soll.");
	    SendClientMessage(playerid, COLOR_YELLOW, "Aber er will nicht lernen, begib dich bitte zum Startower, und erledige diesen **** für mich!");
	    SendClientMessage(playerid, COLOR_ORANGE, "Meine Männer haben da schon alles vorbereitet. Viel Glück!");
   		SetPlayerCheckpoint(playerid, 1544.3213,-1354.3120,329.4726, 4.0);
		QuestCP[playerid] = 800;
    }
    if(sStats[playerid][sQuest] == 5 && sStats[playerid][sLevel] > 2)
    {
        sStats[playerid][sQuest] = 6;
        SetPVarInt(playerid,"Schuss",0);
   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Es gibt große Probleme komm am besten mal dringen vorbei!");
	    SendClientMessage(playerid, COLOR_ORANGE, "Info: Begebe dich nach Jack und benutze /jackr");
    }
    if(sStats[playerid][sQuest] == 7 && sStats[playerid][sLevel] > 3)
    {
        sStats[playerid][sQuest] = 8;
        SetPVarInt(playerid,"Laptop",0);
   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Ich habe da eine Idee wie wir mehr über den Leader der MS-14 Gang herrausbekommen.");
	    SendClientMessage(playerid, COLOR_YELLOW, "Komm mal bei mir vorbei und hole dir meinen Laptop ab, mithilfe dessen du versuchen kannst den Hauptcomputer des Bayside Police Department zu hacken,");
	    SendClientMessage(playerid, COLOR_YELLOW, "um einige Informationen herraus zu finden. Also bis gleich !!! (/laptop)");
    }
    if(sStats[playerid][sQuest] == 9 && sStats[playerid][sLevel] > 4)
    {
        sStats[playerid][sQuest] = 10;
   	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/post.wav");
	    ClearChat(playerid);
	    SendClientMessage(playerid, COLOR_YELLOW, "[SMS] Jack: Ey komm schnell vorbei ich brauche dringend deine Hilfe!");
	    SendClientMessage(playerid, COLOR_YELLOW, "Meine Freund Rainer wurde von der MS-14 Gang entführt und wird auf deren Transportschiff festgehalten.");
	    SendClientMessage(playerid, COLOR_YELLOW, "du musst ihm umbedingt befreien, komm zu mir und ich bringe dich zu diesem Schiff. (/startmission)");
    }
   	new premium = mysql_GetInt("accounts", "premium", "name", sStats[playerid][sGeworbenVon]);
   	new premiumzeit = mysql_GetInt("accounts", "premiumzeit", "name", sStats[playerid][sGeworbenVon]);
   	new nach = 1;
    if(sStats[playerid][sGeworbenVon] != 0 && sStats[playerid][sLevel] == 5)
    {
        if(sStats[playerid][sPremium] == 0)
        {
            SendClientMessage(playerid,Weiß,"Du hast Level 5 erreicht das heisst du erhälts einen Premiumbronzeaccount im Wert von 1 Woche!");
            format(string, sizeof(string), "Der Spieler %s erhält auch zusätzlich einen Premiumbronzeaccount im Wert von 1 Woche da er dich geworben hat.",sStats[playerid][sGeworbenVon]);
            SendClientMessage(playerid,Weiß,string);
            SendClientMessage(playerid,Gelb2,"Das Bayside-Roleplay.de Administrator Team wünscht euch beiden viel Spass mit dem Premiumaccount!");
            sStats[playerid][sPremium] = 1;
            sStats[playerid][sPremiumZeit] = gettime()+(60*60*24*7);
            if(premium > 0)
            {
                premiumzeit = sStats[playerid][sPremiumZeit]+premiumzeit;
				format(string, sizeof(string), "UPDATE accounts SET geworbennach='%d',premiumzeit='%d', WHERE Name='%s'",
				nach, premiumzeit, sStats[playerid][sGeworbenVon]);
				mysql_query(string);
            }
            else
            {
            	premiumzeit = sStats[playerid][sPremiumZeit]+premiumzeit;
				format(string, sizeof(string), "UPDATE accounts SET geworbennach='%d',premiumzeit='%d',premium='%d', WHERE Name='%s'",
				nach, sStats[playerid][sPremiumZeit],sStats[playerid][sPremium], sStats[playerid][sGeworbenVon]);
				mysql_query(string);
            }
        }
        else
        {
        	SendClientMessage(playerid,Weiß,"Du hast Level 5 erreicht das heisst dein aktueller Premiumaccount wird um 1 Woche verlängert.!");
            format(string, sizeof(string), "Der Spieler %s erhält auch zusätzlich einen Premiumbronzeaccount im Wert von 1 Woche da er dich geworben hat.",sStats[playerid][sGeworbenVon]);
            SendClientMessage(playerid,Weiß,string);
            SendClientMessage(playerid,Gelb2,"Das Bayside-Roleplay.de Administrator Team wünscht euch beiden viel Spass mit dem Premiumaccount!");
            sStats[playerid][sPremiumZeit] += gettime()+(60*60*24*7);
            if(premium > 0)
            {
                premiumzeit = sStats[playerid][sPremiumZeit]+premiumzeit;
				format(string, sizeof(string), "UPDATE accounts SET geworbennach='%d',premiumzeit='%d', WHERE Name='%s'",
				nach, premiumzeit, sStats[playerid][sGeworbenVon]);
				mysql_query(string);
            }
            else
            {
                premium = 1;
            	premiumzeit = sStats[playerid][sPremiumZeit]+premiumzeit;
				format(string, sizeof(string), "UPDATE accounts SET geworbennach='%d',premiumzeit='%d',premium='%d', WHERE Name='%s'",
				nach, premiumzeit,premium, sStats[playerid][sGeworbenVon]);
				mysql_query(string);
            }
        }
    }
}

//RefreshBot Nutte
forward RefreshBot(playerid);
public RefreshBot(playerid)
{
	ClearAnimations(playerid);
    ApplyAnimation(playerid, "RAPPING","RAP_A_Loop", 4.0, 1, 1, 1, 1, 0, 0);
    nutte = 0;
}

//SexAnimation Nutte
forward SexAnimation(playerid);
public SexAnimation(playerid)
{
	nutte = 1;
    ApplyAnimation(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,1);
}

//ClearAnimations
forward ClearAnimationss(playerid);
public ClearAnimationss(playerid)
{
    ClearAnimations(playerid);
}

//ClearAnimationsw
forward ClearAnimationssw(playerid);
public ClearAnimationssw(playerid)
{
    ClearAnimations(playerid);
    wwv = 0;
}

//Bsn clear
forward ClearBsn(playerid);
public ClearBsn(playerid)
{
    ClearAnimations(playerid);
    if(sStats[playerid][sKrankheit] == 0)
    {
		new rnd = random(444);
		if(rnd >=1 && rnd <=3)
		{
			sStats[playerid][sKrankheit] = 6;
			SendClientMessage(playerid,Weiß,"Du fühlst dich nicht gut dein ganzer Magen grummelt.");
			SendClientMessage(playerid,Gelb2,"Ruf am besten mal das Bayside Medical-Center an und lass dich untersuchen! (/service)");
			ApplyAnimation(playerid,"FOOD","EAT_Vomit_P", 4.0, 0, 1, 1, 1, 0, 0);
			SetTimerEx("ClearBsn2",4057,false,"i",playerid);
		}
	}
	return 1;
}

//Bsn clear
forward ClearBsn2(playerid);
public ClearBsn2(playerid)
{
    ClearAnimations(playerid);
	return 1;
}

//Bsn clear
forward ClearKampf(playerid);
public ClearKampf(playerid)
{
    ClearAnimations(playerid);
    NorbertBusy = 0;
	return 1;
}

//Nutte Ornanieren
forward StartOrnaGirl();
public StartOrnaGirl()
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dominiqueeee", true))
  			{
  				SetPlayerChatBubble(i,"Dominique: {FFFFFF}Dann fang mal an, ich will die komplette Ladung haben <3!",0xFFFF00DD,35.0,7000);
				ApplyAnimation(i, "Attractors","Stepsit_loop", 4.0, 1, 1, 1, 1, 1, 1);
  			}
  		}
  	}
}

forward StartOrnaAnimation(playerid);
public StartOrnaAnimation(playerid)
{
	if(GetPVarInt(playerid, "Wixxen") == 1)
	{
 		ApplyAnimation(playerid,"PAULNMAC","wank_in",4.0, 0, 1, 1, 1, 0, 0);
	}

}

forward StartOrnaAnimationLoop(playerid);
public StartOrnaAnimationLoop(playerid)
{
	if(GetPVarInt(playerid, "Wixxen") == 1)
	{
 		ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.0, 1, 1, 1, 1, 0, 0);
	}
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dominiqueeee", true))
  			{
  				SetPlayerChatBubble(i,"Dominique: {FFFFFF}Kannst du nicht schneller?!",0xFFFF00DD,35.0,6000);
  			}
  		}
  	}

}

forward StartOrnaBot(playerid);
public StartOrnaBot(playerid)
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dominiqueeee", true))
  			{
  				SetPlayerChatBubble(i,"Dominique: {FFFFFF}Ohh ja nur weiter so!",0xFFFF00DD,35.0,6000);
  			}
  		}
  	}
}

forward StartOrnaAnimationEnde(playerid);
public StartOrnaAnimationEnde(playerid)
{
	if(GetPVarInt(playerid, "Wixxen") == 1)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
 		SetTimerEx("OrnaEnde", 1399, false, "d", playerid);
	}
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dominiqueeee", true))
  			{
  				SetPlayerChatBubble(i,"Dominique: {FFFFFF}Gib mir den Endstoß LOS!",0xFFFF00DD,35.0,6000);
  			}
  		}
  	}

}

forward OrnaEnde(playerid);
public OrnaEnde(playerid)
{
    new bot = GetNearestBot(playerid, 5);
	if(GetPVarInt(playerid, "Wixxen") == 1)
	{
		if(!strcmp(GetName(bot),"Dominiqueeee",true))
		{
			Kick(bot);
			ConnectNPC("Dominique","nutte1");
			SetTimerEx("ClearAnimationss",1009,false,"d",playerid);
   			TogglePlayerControllable(playerid, true);
			ClearChat(playerid);
			SendClientMessage(playerid,Weiß,"Nach der Ornation fühlst du dich befreit, du konntest deinen Druck abbauen!");
			SendClientMessage(playerid,Weiß,"Deine Gesundheit wurde auf 100.0 Leben erhöht!");
			SetPlayerHealth(playerid,100.0);
			SetPlayerPosEx(playerid,-2617.7407,2436.3701,15.0689);
			SetPlayerFacingAngle(playerid,64.3041);
			SetCameraBehindPlayer(playerid);
			UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{7fff00}Frei{FFFFFF}| <--");
			SetPVarInt(playerid,"Wixxen",0);
			SetPlayerInterior(playerid,0);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
			nutte = 0;
		}
	}
}

forward StartDagmar(playerid);
public StartDagmar(playerid)
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dagmar", true))
  			{
  				SetPlayerChatBubble(i,"Dagmar: {FFFFFF}Oh Ja ... gibs mir!",0xFFFF00DD,35.0,30000);
  				ApplyAnimation(i,"SNM","SPANKINGW",4.1,1,1,1,1,1);
  			}
  			if(!strcmp(npcname, "AutoPate", true))
  			{
  			    ApplyAnimation(i, "MISC","bitchslap", 4.0, 1, 1, 1, 1, 0, 1);
  				SetPlayerChatBubble(i,"AutoPate: {FFFF00}muhahahahahahaha",0xFFFF00DD,35.0,30000);
  			}
  		}
  	}
}

forward StopDagmar(playerid);
public StopDagmar(playerid)
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
  		    Pate = 0;
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dagmar", true))
  			{
				Kick(i);
  			}
  			if(!strcmp(npcname, "AutoPate", true))
  			{
				ClearAnimations(i);
  			}
  		}
  	}
}

//Nutte Blowjob
forward StartShowGirl();
public StartShowGirl()
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dominiqueee", true))
  			{
  			    ClearAnimations(i);
  				SetPlayerChatBubble(i,"Dominique: {FFFFFF}Dann pack mal dein Prachtstück aus, damit ich anfangen kann <3!",0xFFFF00DD,35.0,6000);
				ApplyAnimation(i, "BLOWJOBZ","BJ_COUCH_START_W", 4.0, 0, 1, 1, 1, 0, 0);
  			}
  		}
  	}
}

forward StartShowAnimation(playerid);
public StartShowAnimation(playerid)
{
	if(GetPVarInt(playerid, "InDerShow") == 1)
	{
		ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_START_P", 4.0, 0, 1, 1, 1, 0, 0);
	}

}

forward StartShowJoinGirl(playerid);
public StartShowJoinGirl(playerid)
{
		ConnectNPC("Dominiqueee","nutte3");
}

forward StartShowBlowGirl(playerid);
public StartShowBlowGirl(playerid)
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dominiqueee", true))
  			{
  				SetPlayerChatBubble(i,"Dominique: {FFFFFF}Mhhh... Lecker!",0xFFFF00DD,35.0,6000);
				ApplyAnimation(i, "BLOWJOBZ","BJ_COUCH_Loop_W", 4.0, 1, 1, 1, 1, 1, 1);
  			}
  		}
  	}
}
forward StartShowEndGirl(playerid);
public StartShowEndGirl(playerid)
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dominiqueee", true))
  			{
  				SetPlayerChatBubble(i,"Dominique: {FFFFFF}So Endspurt!",0xFFFF00DD,35.0,6000);
				ApplyAnimation(i, "BLOWJOBZ","BJ_COUCH_End_W", 4.0, 0, 1, 1, 1, 1, 1);
  			}
  		}
  		        SetTimer("StartShowkEndGirl",6043,0);
  	}
}

forward StartShowkEndGirl();
public StartShowkEndGirl()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerNPC(i))
  		{
			new npcname[MAX_PLAYER_NAME];
			GetPlayerName(i, npcname, sizeof(npcname));
  			if(!strcmp(npcname, "Dominiqueee", true))
  			{
				Kick(i);
  			}
  		}
  	}
				UpdateDynamic3DTextLabelText(nuttenlabel, 0x0C9BCBFF, "{FFFFFF}--> |{7fff00}Frei{FFFFFF}| <--");
				StopShow();
}

//DriftObjekteladen
forward DriftOLaden(playerid);
public DriftOLaden(playerid)
{
	ClearChat(playerid);
	Streamer_Update(playerid);
	SendClientMessage(playerid,Weiß,"Um weitere Informationen über das Driften zu erfahren benutze /drifthelp!");
 	SendClientMessage(playerid,Gelb2,"Du kannst die Driftstrecke jederzeit mit /exitdrift beenden.");
  	TogglePlayerControllable(playerid, true);
}

//Drift Respawn
forward DriftRespawn(playerid);
public DriftRespawn(playerid)
{
	new string[128];
	SetPVarInt(playerid, "StartDrift", 0);
	SetPVarInt(playerid, "InDrift", 1);
	ClearChat(playerid);
 	TogglePlayerControllable(playerid, false);
  	SetTimerEx("DriftOLaden",2143,false,"i",playerid);
	format(string, sizeof(string), "~y~Objekte ~w~werden geladen");
	GameTextForPlayer(playerid, string, 2028, 3);
 	SetPlayerPosEx(playerid,-269.3078,1442.3734,120.2559);
 	SetPlayerFacingAngle(playerid,227.3237);
  	DisablePlayerCheckpoint(playerid);
   	SetPlayerVirtualWorld(playerid,0);
   	Driftzeit[playerid] = 0;
   	Score[playerid] = 0;
   	DestroyAllDriftCP(playerid);
}

//Pferderennen
forward PferdeGo(playerid);
public PferdeGo(playerid)
{
	if (Watching[playerid] == 1)
	{
		if (MoneyBet[playerid] < 1 && BetOnHorse[playerid] < 1)
    	{
			ClearChat(playerid);
			SendClientMessage(playerid, Weiß, "Du bist nun Zuschauer vom Pferderennen, nutze /exitpr um das zuschauen abzubrechen!");
		}
		else
		{
	    	ClearChat(playerid);
		}
	}
}

//Autoscooter
forward OpenAutoscooter();
public OpenAutoscooter()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(sStats[i][sTutorial] == 1)
 		{
			SendClientMessage(i,Weiß,"{FFFFFF}------------------------------------------- {ff8c00}NEWS {FFFFFF}-------------------------------------------------");
			SendClientMessage(i,Gelb2,"Die Autoscooter Arena ist jetzt offen und sobald mehr als 1 Spieler");
			SendClientMessage(i,Gelb2,"in der Autoscooter Arena ist startet eine neue Runde Autoscooter.");
			SendClientMessage(i,Weiß,"{FFFFFF}------------------------------------------- {ff8c00}ENDE {FFFFFF}---------------------------------------------------");
		}
	}
	autoscootertimer = SetTimer("AutoscooterCheck", 300721, false);
 	//Autoscooterprepare = 0;
    autoscooteroffen = 1;
	return 1;
}

forward PrepareAutoscooter();
public PrepareAutoscooter()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "Autoscooter") != 0)
		{
     		SendClientMessage(i, Gelb2, "Das Autoscootermatch startet in 30 Sekunden.");
       	}
	}
	KillTimer(autoscootertimer);
 	SetTimer("StartAutoscooter", 30111, 0);
	return 1;
}

forward StartAutoscooter();
public StartAutoscooter()
{
	AutoscooterRound = 1;
	StartingAutoscooterRound = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "Autoscooter") != 0)
		{
     		TogglePlayerControllable(i, true);
       		SendClientMessage(i, Gelb2, "Das Autoscootermatch hat gestartet, begibt euch in einen Autoscooter! {FFFFFF}[Restzeit: 5 Minuten].");
       		PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/autoscooter.mp3");
       	}
   	}
	ascooter = SetTimer("AutoscooterEnded", 300644, 0);
	return 1;
}

forward AutoscooterEnded();
public AutoscooterEnded()
{
    Event = 0;
    autoscooteroffen = 0;
   	AnnouncedAutoscooterRound = 0;
    AutoscooterRound = 0;
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(GetPVarInt(i, "Autoscooter") != 0)
		{
   			SetPVarInt(i,"Autoscooter",0);
      		SetPlayerPosEx(i,-2458.4407,2257.5825,4.9538);
        	SetPlayerFacingAngle(i,91.7514);
	        TogglePlayerControllable(i, true);
	        SetPlayerInterior(i,0);
	        SetPlayerWeather(i, 2);
	        SendClientMessage(i,Gelb2,"Das Autoscootermatch wurde beendet!");
        	AutoscooterPlayers = 0;
		}
  	}
}

forward AutoscooterCheck();
public AutoscooterCheck()
{
		if(AutoscooterPlayers <= 1 && AutoscooterRound != 1 && StartingAutoscooterRound != 1)
		{
 			StartingAutoscooterRound = 0;
 			Event = 0;
 			autoscooteroffen = 0;
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
				if(GetPVarInt(i, "Autoscooter") != 0)
				{
				    SetPVarInt(i,"Autoscooter",0);
   				    ClearChat(i);
		            PlayerPaintballing[i] = 0;
			        SetPlayerPosEx(i,-2458.4407,2257.5825,4.9538);
			        SetPlayerFacingAngle(i,91.7514);
			        TogglePlayerControllable(i, true);
			        SendClientMessage(i,Gelb2,"Das Autoscootermatch wurde abgebrochen, da es nicht genügend Teilnehmer gab!");
		         	AutoscooterPlayers = 0;
				}
			}
	 	}
}

//Paintball
forward PreparePaintball();
public PreparePaintball()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(PlayerPaintballing[i] != 0)
   		{
     		SendClientMessage(i, Gelb2, "Das Paintballmatch startet in 30 Sekunden.");
        }
	}
	KillTimer(paintballtimer);
 	SetTimer("StartPaintball", 30211, 0);
	return 1;
}

forward StartPaintball();
public StartPaintball()
{
	PaintballRound = 1;
	StartingPaintballRound = 0;
	PaintballWinner = 999;
	PaintballWinnerKills = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(PlayerPaintballing[i] != 0)
   		{
     		TogglePlayerControllable(i, true);
     		PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/prepare.mp3");
     		ClearChat(i);
       		SendClientMessage(i, Gelb2, "Das Paintballmatch hat gestartet, Viel Glück an alle beteiligten {FFFFFF}[Restzeit: 5 Minuten].");
          	TextDrawShowForPlayer(i,PBText);
       		TextDrawHideForPlayer(i,Ad1);
			TextDrawHideForPlayer(i,Ad2);
			ShowPlayerNameTagForPlayer(i, i, 0);
			if(GetPVarInt(i, "Adminduty") == 1)
			{
				DeletePlayer3DTextLabel(i,DutyLabel[i]);
			    if(sStats[i][sAdminlevel] == 5)
			    {
   					RemovePlayerAttachedObject(i,5);
					RemovePlayerAttachedObject(i,6);
			    }
		 	}
       	}
   	}
   	PBBS = 1;
	SetTimer("PaintballEnded", 300344, 0);
	return 1;
}

forward PaintballEnded();
public PaintballEnded()
{
	new string[148];
	AnnouncedPaintballRound = 0;
	PaintballRound = 0;
	Event = 0;
	OpenPaintballl = 0;
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(PlayerPaintballing[i] != 0)
		{
			if(IsPlayerConnected(PaintballWinner))
			{
				format(string,sizeof(string), "Der Spieler %s[%d] hat das Paintballmatch mit {FFFF00}%d Kills{FFFFFF} gewonnen!",GetName(PaintballWinner),PaintballWinner,PaintballWinnerKills);
				SendClientMessage(i, Weiß, string);
				PBBS = 0;
			}
			PlayAudioStreamForPlayer(PaintballWinner, "http://www.bayside-roleplay.de/audiogta/applaus.mp3");
			ShowPlayerNameTagForPlayer(i, i, 1);
			ResetPlayerWeapons(i);
			PlayerPaintballing[i] = 0;
			SetPlayerPosEx(i,-2459.0935,2304.6450,4.9844);
			SetPlayerFacingAngle(i,86.9723);
			TogglePlayerControllable(i, true);
			SetPlayerHealth(i,100.0);
			SetPlayerVirtualWorld(i, 0);
			SetPlayerInterior(i,0);
			sStats[i][sPwaffe] = 0;
			SetPlayerWeather(i, 2);
			SendClientMessage(i,Gelb2,"Das Paintballmatch wurde beendet!");
			SetPVarInt(i, "Superfaust", 0);
			PaintballPlayers = 0;
			format(string,124,"~w~Paintball gerade am gewinnen: ~y~Keiner.");
			TextDrawSetString(PBText,string);
			TextDrawHideForPlayer(i,PBText);
			TextDrawShowForPlayer(i,Ad1);
			TextDrawShowForPlayer(i,Ad2);
			if(GetPVarInt(i, "Adminduty") == 1 && sStats[i][sAdminlevel] > 0)
			{
			    new Float:X,Float:Y,Float:Z;
				GetPlayerPos(i, X, Y, Z);
				if(sStats[i][sAdminlevel] == 5)
				{
					format(string,84,"{FFFFFF}[{FF0000}Projektleiter{FFFFFF}]");
					DutyLabel[i] = CreatePlayer3DTextLabel(i,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,i, INVALID_VEHICLE_ID, 0);
					RemovePlayerAttachedObject(i,5);
					RemovePlayerAttachedObject(i,6);
					SetPlayerAttachedObject(i, 5, 19079, 17, 0.054798, -0.068864, 0.143832, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
					SetPlayerAttachedObject(i, 6, 1276, 1, 0.026707, 0.049716, 0.044027, 0.000000, 166.186828, 295.838226, -0.335559, 1.000000, 0.018289);
				}
				else if(sStats[i][sAdminlevel] == 4)
				{
					format(string,84,"{FFFFFF}[{FF0000}Hauptsupporter{FFFFFF}]");
					DutyLabel[i] = CreatePlayer3DTextLabel(i,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,i, INVALID_VEHICLE_ID, 0);
				}
				else if(sStats[i][sAdminlevel] == 3)
				{
					format(string,84,"{FFFFFF}[{FF0000}Administrator{FFFFFF}]");
					DutyLabel[i] = CreatePlayer3DTextLabel(i,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,i, INVALID_VEHICLE_ID, 0);
				}
				else if(sStats[i][sAdminlevel] == 2)
				{
					format(string,84,"{FFFFFF}[{FF0000}Supporter{FFFFFF}]");
					DutyLabel[i] = CreatePlayer3DTextLabel(i,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,i, INVALID_VEHICLE_ID, 0);
				}
				else if(sStats[i][sAdminlevel] == 1)
				{
					format(string,84,"{FFFFFF}[{FF0000}Moderator/Scout{FFFFFF}]");
					DutyLabel[i] = CreatePlayer3DTextLabel(i,string, 0xAAAAFFFF,X,Y,Z+0.3,10.0,i, INVALID_VEHICLE_ID, 0);
				}
			}
		}
	}
}


forward OpenPaintball();
public OpenPaintball()
{
	OpenPaintballl = 1;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		 if(sStats[i][sEingeloggt] == 1 && sStats[i][sTutorial] == 1)
		 {
			SendClientMessage(i,Weiß,"{FFFFFF}------------------------------------------- {ff8c00}NEWS {FFFFFF}-------------------------------------------------");
			SendClientMessage(i,Gelb2,"Die Paintball Arena ist jetzt offen und sobald mehr als 1 Spieler");
			SendClientMessage(i,Gelb2,"in der Paintball Arena ist startet das, Paintballmatch.");
			SendClientMessage(i,Weiß,"{FFFFFF}------------------------------------------- {ff8c00}ENDE {FFFFFF}---------------------------------------------------");
		}
	}
	//Paintballprepare = 0;
	paintballtimer = SetTimer("PaintballCheck", 300774, false);
}

forward PaintballCheck();
public PaintballCheck()
{
	new string[128];
	if(OpenPaintballl == 1)
	{
		if(PaintballPlayers <= 1 && PaintballRound != 1 && StartingPaintballRound != 1)
		{
 			StartingPaintballRound = 0;
 			Event = 0;
 			OpenPaintballl = 0;
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
 				if(PlayerPaintballing[i] != 0)
   				{
   				    ClearChat(i);
	     			ResetPlayerWeapons(i);
		            PlayerPaintballing[i] = 0;
			        SetPlayerPosEx(i,-2459.0935,2304.6450,4.9844);
			        SetPlayerFacingAngle(i,86.9723);
			        TogglePlayerControllable(i, true);
			        SetPlayerVirtualWorld(i, 0);
			        sStats[i][sPwaffe] = 0;
			        SetPlayerWeather(i, 1);
			        SendClientMessage(i,Gelb2,"Das Paintballmatch wurde abgebrochen, da es nicht genügend Teilnehmer gab!");
			        SetPVarInt(i, "Superfaust", 0);
		         	PaintballPlayers = 0;
			        format(string,124,"~w~Paintball gerade am gewinnen: ~y~Keiner.");
			        TextDrawSetString(PBText,string);
			        TextDrawHideForPlayer(i,PBText);
		        	TextDrawShowForPlayer(i,Ad1);
					TextDrawShowForPlayer(i,Ad2);
				}
			}
	 	}
    }
}

//Schwarzmarkt
forward CreateSchwarzmarkt();
public CreateSchwarzmarkt()
{
	if(Johnn == 0)
	{
		DestroyDynamic3DTextLabel(schwarzmarktt);
		new schwarz = random(3);
		switch(schwarz)
		{
		    case 0:
		    {
		        Johnn = 1;
		        ConnectNPC("John","schwarz1");
		        schwarzmarktt = CreateDynamic3DTextLabel("{FFFFFF}Schwarzmarkt!\n{FFFF00}[Space] Taste um mit John zu interagieren!",0xAAAAFFFF,-1483.9031,2612.7129,58.7879+0.7,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		        return 1;
		    }
		    case 1:
		    {
		        Johnn = 1;
		        ConnectNPC("John","schwarz2");
		        schwarzmarktt = CreateDynamic3DTextLabel("{FFFFFF}Schwarzmarkt!\n{FFFF00}[Space] Taste um mit John zu interagieren!",0xAAAAFFFF,-2492.0430,156.8819,8.7640+0.7,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		        return 1;
		    }
		    case 2:
		    {
		        Johnn = 1;
		        ConnectNPC("John","schwarz3");
		        schwarzmarktt = CreateDynamic3DTextLabel("{FFFFFF}Schwarzmarkt!\n{FFFF00}[Space] Taste um mit John zu interagieren!",0xAAAAFFFF,1367.9554,-1543.0424,13.5469+0.7,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		        return 1;
		    }
		}
	}
	else
	{
 		CheckSchwarzmarkt();
 		return 1;
	}
	return 1;
}

forward checkk(playerid,targetid);
public checkk(playerid,targetid)
{
	new Float:nh,string[256];
	if(!IsPlayerConnected(targetid))return SendClientMessage(playerid,Rot,"Der Spieler hat den Server verlassen!");
	GetPlayerHealth(targetid,nh);
	SendClientMessage(targetid,Weiß,">> Der Check wurde erfolgreich beendet!");
	SendClientMessage(targetid,Weiß,">> Das Ergebnis wurde dem Administrator übermittelt.");
	format(string,sizeof(string),">> Du hast den Spieler '%s' (ID: %i) auf Godmode überprüft.",GetName(targetid),targetid);
	SendClientMessage(playerid,Gelb2,string);
	SendClientMessage(playerid,Gelb2,">> Ergebnis:");
	if(nh == 100) {
		SendClientMessage(playerid,Weiß,">> Godmode: {00FF00}Vorhanden{FFFFFF}!");
		SetPlayerHealth(targetid,100);
	} else {
    	SendClientMessage(playerid,Weiß,">> Godmode: {FF0000}Nicht vorhanden{FFFFFF}!");
    	SetPlayerHealth(targetid,100);
	}
	return 1;
}

forward CheckSchwarzmarkt();
public CheckSchwarzmarkt()
{
	if(Johnn == 1)
	{
		for(new i = 0; i < GetMaxPlayers(); i++)
		{
			if(IsPlayerNPC(i))
			{
				new npcname[MAX_PLAYER_NAME];
				GetPlayerName(i, npcname, sizeof(npcname));
				if(!strcmp(npcname, "John", true))
				{
					Kick(i);
	    			Johnn = 0;
	    			CreateSchwarzmarkt();
	    			return 1;
	 			}
			}
		}
	}
	return 1;
}

forward JohncR();
public JohncR()
{
	johnc = 0;
}

//AFK System
public Desktop_Function(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    new string[128];
    new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(Desktop_Check[playerid] > 0) { Desktop_Status[playerid] = 0; }
	if(Desktop_Check[playerid] <= 0) { Desktop_Status[playerid] +=1; }
	Desktop_Check[playerid] = 0;
	if(sStats[playerid][sTutorial] == 1)
	{
		if (Desktop_Status[playerid] == MAX_DESKTOP_TIME)
		{
		    new afkrandom = random(8888)+1111;
		    SetPVarInt(playerid, "AFKNUMMER", afkrandom);
		    format(string, sizeof(string), "{ffffff}Du bist AFK. Bitte gebe folgenden Code ein, um zu bestätigen, dass du wieder da bist:\n{da5905}%d",afkrandom);
		    ShowPlayerDialog(playerid, DIALOG_AFK, DIALOG_STYLE_INPUT, "{e13333}Away From Keyboard", string, "Absenden", "");
		}
		else if(Desktop_Status[playerid] == 1 && !IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerChatBubble(playerid,"[AFK]\n seit 1 Sekunde\n",COLOR_GREY,7.0,5000);
		}
		else if (Desktop_Status[playerid] >= 2 && !IsPlayerInAnyVehicle(playerid))
		{
		    format(string, sizeof(string), "[AFK]\n seit %d Sekunden\n",Desktop_Status[playerid]);
	  		SetPlayerChatBubble(playerid,string,COLOR_GREY,7.0,5000);
		}
		else if (Desktop_Status[playerid] < 1)
		{
		    SetPlayerChatBubble(playerid,"",COLOR_GREY,7.0,1000);
		}
	}
	return 1;
}

//Event
forward EventR();
public EventR()
{
	EventStarted = 0;
}

//Farmer kühe melken
forward Gemolken(playerid);
public Gemolken(playerid)
{
    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/kuh.mp3");
    TogglePlayerControllable(playerid, true);
    return 1;
}

forward Gemolkenende(playerid);
public Gemolkenende(playerid)
{
	new string[128];
	FarmerCP[playerid] = 0;
 	ClearChat(playerid);
   	SendClientMessage(playerid,Weiß,"Du hast erfolgreich alle Kühe gemolken!");
	SetPVarInt(playerid,"Kuhmelken",0);
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	new geld = 312 + random (425);
	format(string, sizeof(string), "Als Belohnung erhältst du %d!",geld);
	GivePlayerEuro(playerid,geld);
	SendClientMessage(playerid,Gelb2,string);
	SetPVarInt(playerid,"Cooldown5",gettime()+(60*3));
	return 1;
}

//Werbesystem
forward AdWillOpen();
public AdWillOpen()
{
	if(adopen == 2) return 1;
    adopen = 0;
	return 1;
}

forward LoadWerbetafel();
public LoadWerbetafel()
{
	new string[128];
	new text1[55];
	new text2[55];
	new Data[100];

	//Tafel 1
	format(string, sizeof(string), "SELECT * FROM werbeschilder WHERE id = 1");
	mysql_query(string);
 	mysql_store_result();
  	if(mysql_fetch_row(Data))
  	{
		mysql_get_field("text",text1);
		mysql_get_field("textt",text2);
        format(string, sizeof(string), "%s\n%s",text1,text2);
        DestroyObject(tafel1);
		tafel1 = CreateObject(7912, -1535.73, 990.48, 27.51,   0.00, -0.06, 337.27);
		SetObjectMaterialText(tafel1, string, 0, 50, "Arial", 15, 1, -32256, -16777216, 1);
	}
	//____________________________________________________________________________________________
	//Tafel 2
	format(string, sizeof(string), "SELECT * FROM werbeschilder WHERE id = 2");
	mysql_query(string);
 	mysql_store_result();
  	if(mysql_fetch_row(Data))
  	{
		mysql_get_field("text",text1);
		mysql_get_field("textt",text2);
        format(string, sizeof(string), "%s\n%s",text1,text2);
        DestroyObject(tafel2);
		tafel2 = CreateObject(7912, -2260.60, 2269.18, 20.39,   0.46, -0.10, 206.81);
		SetObjectMaterialText(tafel2, string, 0, 50, "Arial", 15, 1, -32256, -16777216, 1);
	}
	//____________________________________________________________________________________________
	//Tafel 3
	format(string, sizeof(string), "SELECT * FROM werbeschilder WHERE id = 3");
	mysql_query(string);
 	mysql_store_result();
  	if(mysql_fetch_row(Data))
  	{
		mysql_get_field("text",text1);
		mysql_get_field("textt",text2);
        format(string, sizeof(string), "%s\n%s",text1,text2);
        DestroyObject(tafel3);
		tafel3 = CreateObject(7912, -2577.41, 2226.84, 24.57,   0.00, 0.00, 231.53);
		SetObjectMaterialText(tafel3, string, 0, 50, "Arial", 15, 1, -32256, -16777216, 1);
	}
}

//Newsreporter News
forward OOCNews(color,const string[]);
public OOCNews(color,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(sStats[i][sEingeloggt] == 1 && sStats[i][sTutorial] == 1)
	 	{
			SendClientMessage(i, color, string);
		}
	}
}

//Flugzeugbrand
forward FlugzeugBrand(playerid);
public FlugzeugBrand(playerid)
{
    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/explosion.wav");
    ClearChat(playerid);
    ClearAnimations(playerid);
    SetPVarInt(playerid,"Flugzeugluke",1);
    SendClientMessage(playerid,Weiß,"Sehr geehrte Fluggäste,");
    SendClientMessage(playerid,Weiß,"Bitte verfallen Sie jetzt nicht in Panik, ein Terrorist hat sich hinten im Laderaum in die Luft gesprengt!");
    SendClientMessage(playerid,Weiß,"Unser Pilot hat den Autopilot angeschaltet somit bleibt das Flugzeug noch einige Minuten in der Luft!");
    SendClientMessage(playerid,Weiß,"Schnappen Sie sich ihren Fallschirm unter ihrem Sitz, und begeben Sie sich richtung Ladeluke.");
    SendClientMessage(playerid,COLOR_LIGHTRED,"UND DAS AM BESTEN ZÜGIG!");
    SetTimerEx("SpawnPlayerFlugzeug",8311,false,"i",playerid);
}

forward SpawnPlayerFlugzeug(playerid);
public SpawnPlayerFlugzeug(playerid)
{
	SpawnPlayer(playerid);
}

forward StartIntro(playerid);
public StartIntro(playerid)
{
	SpawnPlayer(playerid);
	return 1;
}

forward StartIntro2(playerid);
public StartIntro2(playerid)
{
	InterpolateCameraPos(playerid, -2568.930175, 2302.583984, 24.633666, -2373.371093, 2176.482666, 34.481754, 17000);
	InterpolateCameraLookAt(playerid, -2564.593994, 2300.207519, 23.891714, -2377.220458, 2179.319580, 33.020420, 17000);
	SetPlayerPosEx(playerid,-2475.0981,2220.9497,4.9844);
	TextDrawHideForPlayer(playerid,Intro);
	TextDrawShowForPlayer(playerid,Intro2);
	SetTimerEx("StartIntro3",10029,false,"i",playerid);
	return 1;
}

forward StartIntro3(playerid);
public StartIntro3(playerid)
{
	InterpolateCameraPos(playerid, -2467.765380, 2255.992431, 10.190484, -2553.888427, 2465.364257, 59.244724, 16000);
	InterpolateCameraLookAt(playerid, -2465.127441, 2260.124755, 9.208626, -2550.467041, 2463.884277, 55.912441, 16000);
	SetPlayerPosEx(playerid,-2456.8584,2358.1057,5.8539);
	TextDrawHideForPlayer(playerid,Intro2);
	TextDrawShowForPlayer(playerid,Intro3);
	SetTimerEx("StartIntro4",10029,false,"i",playerid);
	return 1;
}

forward StartIntro4(playerid);
public StartIntro4(playerid)
{
	InterpolateCameraPos(playerid, -2460.755371, 2330.839599, 7.741323, -2289.663085, 2358.301513, 19.012804, 14000);
	InterpolateCameraLookAt(playerid, -2455.818847, 2331.583251, 7.464122, -2285.421630, 2356.355224, 17.217844, 14000);
	SetPlayerPosEx(playerid,-2345.6626,2344.9932,5.0172);
	TextDrawHideForPlayer(playerid,Intro3);
	TextDrawShowForPlayer(playerid,Intro4);
	SetTimerEx("StartIntro5",9029,false,"i",playerid);
	return 1;
}

forward StartIntro5(playerid);
public StartIntro5(playerid)
{
	InterpolateCameraPos(playerid, -2262.468994, 2198.759765, 15.164472, -2289.096435, 2504.532470, 19.206558, 15000);
	InterpolateCameraLookAt(playerid, -2262.037109, 2203.716308, 14.669193, -2292.298828, 2508.372314, 19.202651, 15000);
	SetPlayerPosEx(playerid,-2237.1938,2361.0308,4.9831);
	TextDrawHideForPlayer(playerid,Intro4);
	TextDrawShowForPlayer(playerid,Intro5);
	SetTimerEx("SpawninBayside",15029,false,"i",playerid);
	return 1;
}

//Nachbehandlung
forward NachBehandlung2(playerid);
public NachBehandlung2(playerid)
{
	sStats[playerid][sTod] = 0;
	SetPlayerVirtualWorld(playerid,0);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid,0);
	SpawnPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	if (GetPVarInt(playerid, "CopDuty") == 1 && GetPVarInt(playerid, "SwatDuty") == 1)
	{
		if(sStats[playerid][sAdminlevel] < 5)
		{
			SetPlayerAttachedObject(playerid,5,19142,1,0.113999,0.033000,0.012000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
		}
	}
	return 1;
}

forward NachBehandlung(playerid);
public NachBehandlung(playerid)
{
	new string[128];
	ClearAnimations(playerid);
	ClearChat(playerid);
	format(string, sizeof(string), "Die Behandlung wurde erfolgreich abgeschlossen, du wurdest von deiner Geschlechtskrankheit %s erfolgreich befreit!",GetPlayerKrankheit(playerid));
	SendClientMessage(playerid,Weiß,string);
	SendClientMessage(playerid,Gelb2,"Und denke immer daran ein Kondom schützt vor Geschlechtskrankheiten");
	behandlungg = 0;
	Staatskasse+=350;
	GivePlayerEuro(playerid,-350);
	SetPlayerPosEx(playerid,1231.7834,318.2209,-11.7422);
	SetPlayerFacingAngle(playerid,332.5923);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	sStats[playerid][sKrankheit] = 0;
}

//Tazer
forward DestroySpark(playerid);
public DestroySpark(playerid)
{
	DestroyDynamicObject(Spark[playerid]);
	return 1;
}

forward TazedRemove(playerid);
public TazedRemove(playerid)
{
    ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);
	Tazed[playerid] = 0;
	return 1;
}

//Nagelband Update
forward NagelBandUpdate(playerid);
public NagelBandUpdate(playerid)
{
	DeletePVar(playerid, "NagelbandGelegt");
}

//Angelsystem
forward Fisch(playerid);
public Fisch(playerid)
{
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~w~Fisch ~g~. . .",2873, 5);
    SetPVarInt(playerid,"Fisch",1);
    FischTimer[playerid] = SetTimerEx("SetLeihne",1871,false,"i",playerid);
}

forward AngelCheck(playerid);
public AngelCheck(playerid)
{
	if(GetPVarInt(playerid, "InAschein") == 1 && GetPVarInt(playerid, "FGefangen") < 2 && GetPVarInt(playerid, "AVersuche") == 0)
	{
		ClearChat(playerid);
		DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil der Anglerlizens leider nicht bestanden!");
		SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Anglerlizens Preises zurück bekommen!");
		SetPVarInt(playerid,"AVersuche",0);
		SetPVarInt(playerid, "FGefangen", 0);
		SetPVarInt(playerid, "Angela", 0);
		SetPVarInt(playerid, "InAschein", 0);
		sStats[playerid][sFisch] = 0;
		GivePlayerEuro(playerid,1600);
  		RemovePlayerAttachedObject(playerid, 5);
  		RemovePlayerAttachedObject(playerid, 6);
  		ClearAnimations(playerid);
		SetCameraBehindPlayer(playerid);
     	TogglePlayerControllable(playerid, true);
		SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
		SetPlayerFacingAngle(playerid,89.5907);
		SetPlayerInterior(playerid, 3);
		KillTimer(AngelTimer[playerid]);
		KillTimer(FischTimer[playerid]);
		if(GetPVarInt(playerid, "Adminduty") == 1 && sStats[playerid][sAdminlevel] == 5)
		{
			SetPlayerAttachedObject(playerid, 5, 19079, 17, 0.054798, -0.068864, 0.143832, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetPlayerAttachedObject(playerid, 6, 1276, 1, 0.026707, 0.049716, 0.044027, 0.000000, 166.186828, 295.838226, -0.335559, 1.000000, 0.018289);
		}
		return 1;
	}
	return 1;
}

forward SetLeihne(playerid);
public SetLeihne(playerid)
{
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~w~Leine ~r~gerissen",3873, 5);
    TogglePlayerControllable(playerid, true);
    SetPVarInt(playerid,"Fisch",0);
    ClearAnimations(playerid);
}

//Admin Feuerpunch
forward Firemen(playerid);
public Firemen(playerid)
{

	if(dist[playerid] >= FIRE_FINAL_DIST)
	{
		KillTimer(Timer[playerid]);
		//dist[playerid] = 100.0;
		if(Fires[playerid] == 0)
		{
			S[playerid] = -1;
			return 1;
		}
		S[playerid] = 1;
		return 1;
	}
	GetXYInFrontOfPoint(P[0][playerid],P[1][playerid], PEX[0][playerid], PEX[1][playerid], P[3][playerid], dist[playerid]);
	CreateExplosion(PEX[0][playerid],PEX[1][playerid],P[2][playerid],Explosion_Type,Explosion_Rad);
	for(new i; i < GetMaxPlayers(); i ++)
	{
		if(!IsPlayerConnected(i))continue;
		if(GetPlayerDistanceFromPoint(i,PEX[0][playerid],PEX[1][playerid],P[2][playerid]) < PLAYER_DAMAGE_DIST)
		{
			new Float:hp;
			GetPlayerHealth(i,hp);
			if(hp <= 0)continue;
			SetPlayerHealth(i,hp-1);

		}
	}
	dist[playerid] += FIRE_NEXT_DIST;
	return 1;
}

//Gangwarsystem
public FightUpdate_1()
{
	for(new fs;fs<sizeof(FightSystem);fs++)
	{
		if(FightSystem[fs][fsFightTime] && FightSystem[fs][fsAttackFaction] != -255)
		{
			new fsText[128];
			if(FightSystem[fs][fsCTF][0] != -255)
			{
				if(IsPlayerConnected(FightSystem[fs][fsCTF][0]))
				{
					if(IsPlayerInRangeOfPoint(FightSystem[fs][fsCTF][0],5.0,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz]))
					{
						FightSystem[fs][fsCTF][2] = 0;
						FightSystem[fs][fsCTF][1]++;
						format(fsText,sizeof(fsText),"~n~~n~~n~~n~~n~~n~~n~~w~Bonus in:~n~~y~%d ~w~Sekunden",(60-FightSystem[fs][fsCTF][1]));
						GameTextForPlayer(FightSystem[fs][fsCTF][0],fsText,1250,3);
						if(FightSystem[fs][fsCTF][1] >= 60)
						{
							new fsName[MAX_PLAYER_NAME];
							GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
							FightSystem[fs][fsCTF][1] = 0;
							format(fsText,sizeof(fsText),"--> Gangfight <-- | %s hat die Flagge erobert!",fsName);
						 	for(new i = 0; i < MAX_PLAYERS; i++)
						 	{
								if(IsPlayerConnected(i))
								{
								    DeletePVar(i,"Spawneddd");
									if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction])
									{
										PlayerPlaySound(i,1058,0.0,0.0,0.0);
										SendClientMessage(i,Weiß,fsText);
									}
								}
							}
							if(GetPlayerFaction(FightSystem[fs][fsCTF][0]) == FightSystem[fs][fsOwnerFaction])
							FightSystem[fs][fsKillsOfOwner]++;
							if(GetPlayerFaction(FightSystem[fs][fsCTF][0]) == FightSystem[fs][fsAttackFaction])
							FightSystem[fs][fsKillsOfAttack]++;
							if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack])
							{
								format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
								TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
								format(fsText,sizeof(fsText),"~g~%d Punkte",FightSystem[fs][fsKillsOfOwner]);
								TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
								format(fsText,sizeof(fsText),"~r~%d Punkte",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
							}
							else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner])
							{
								format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
								format(fsText,sizeof(fsText),"~g~%d Punkte",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
								format(fsText,sizeof(fsText),"~r~%d Punkte",FightSystem[fs][fsKillsOfOwner]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
							}
							else
							{
								format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
								TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
								format(fsText,sizeof(fsText),"~y~%d Punkte",FightSystem[fs][fsKillsOfOwner]);
								TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
								format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
								TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
								format(fsText,sizeof(fsText),"~y~%d Punkte",FightSystem[fs][fsKillsOfAttack]);
								TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
							}
							FightSystem[fs][fsCTF][0] = -255;
						}
					}
					else
					{
						format(fsText,sizeof(fsText),"~n~~n~~n~~n~~n~~n~~n~~r~Erobere die Flagge!~n~~b~%d Sekunden",(10-FightSystem[fs][fsCTF][2]));
						GameTextForPlayer(FightSystem[fs][fsCTF][0],fsText,1250,3);
						FightSystem[fs][fsCTF][2]++;
						if(FightSystem[fs][fsCTF][2] >= 10){
							new fsName[MAX_PLAYER_NAME];
							GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
							format(fsText,sizeof(fsText),"--> Gangfight <-- | %s hat es nicht geschafft die Flagge zu erobern!",fsName);
						 	for(new i = 0; i < MAX_PLAYERS; i++)
						 	{
								if(IsPlayerConnected(i)){
									if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
										PlayerPlaySound(i,1058,0.0,0.0,0.0);
										SendClientMessage(i,Weiß,fsText);
									}
								}
							}
							FightSystem[fs][fsCTF][0] = -255;
							FightSystem[fs][fsCTF][1] = 0;
							FightSystem[fs][fsCTF][2] = 0;
						}
					}
				}
				else
				{
					FightSystem[fs][fsCTF][0] = -255;
					FightSystem[fs][fsCTF][1] = 0;
					FightSystem[fs][fsCTF][2] = 0;
				}
			}
		}
	}
	return 1;
}
public FightUpdate_2()
{
	for(new fs;fs<sizeof(FightSystem);fs++)
	{
		if(FightSystem[fs][fsFightTimeCool])
		{
			FightSystem[fs][fsFightTimeCool]--;
		}
		if(FightSystem[fs][fsFightTime])
		{
			FightSystem[fs][fsFightTime]--;
			new fsText[64];
			format(fsText,sizeof(fsText),"Verbl. Zeit: %d Minuten",FightSystem[fs][fsFightTime]);
			TextDrawSetString(FightSystem[fs][fsTime],fsText);
			if(!FightSystem[fs][fsFightTime])
			{
				FightSystem[fs][fsLastFight] = 0;
				new fsTextToOwner[255];
				new fsTextToAttack[255];
				new fsType;
				if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack])
				{
					fsType = 2;
					format(fsTextToOwner,sizeof(fsTextToOwner),"--> Gangfight <-- | Ihr habt gewonnen...");
					format(fsTextToAttack,sizeof(fsTextToAttack),"--> Gangfight <-- | Ihr habt verloren...");
				}
				else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner])
				{
					fsType = 3;
					format(fsTextToOwner,sizeof(fsTextToOwner),"--> Gangfight <-- | Ihr habt verloren...");
					format(fsTextToAttack,sizeof(fsTextToAttack),"--> Gangfight <-- | Ihr habt gewonnen...");
				}
				else
				{
					fsType = 1;
					format(fsTextToOwner,sizeof(fsTextToOwner),"--> Gangfight <-- |Unentschieden, ihr behaltet euer Gebiet.");
					format(fsTextToAttack,sizeof(fsTextToAttack),"--> Gangfight <-- | Unentschieden, vielleicht habt ihr nächstes mal mehr Glück.");
				}
			 	for(new i = 0; i < MAX_PLAYERS; i++)
			 	{
					if(IsPlayerConnected(i))
					{
						GangZoneStopFlashForPlayer(i,FightSystem[fs][fsZoneID]);
						if(fsType == 3)
						{
							GangZoneHideForPlayer(i,FightSystem[fs][fsZoneID]);
							GangZoneShowForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
						}
						if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction])
						{
							PlayerPlaySound(i,1058,0.0,0.0,0.0);
							TextDrawHideForPlayer(i,Fight);
							TextDrawHideForPlayer(i,FightUnderline);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
							SendClientMessage(i,Weiß,fsTextToOwner);
							if(fsType == 3 && GetPlayerFightzone(i) == fs)
							SetPlayerHealth(i,0.0);
							SetPVarInt(i, "NoTod", 1);
						}
						else if(GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction])
						{
							PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
							TextDrawHideForPlayer(i,Fight);
							TextDrawHideForPlayer(i,FightUnderline);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
							TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
							SendClientMessage(i,Weiß,fsTextToAttack);
							if(fsType != 3 && GetPlayerFightzone(i) == fs)
							SetPlayerHealth(i,0.0);
							SetPVarInt(i, "NoTod", 1);
						}
					}
				}
				FightSystem[fs][fsKillsOfAttack] = 0;
				FightSystem[fs][fsKillsOfOwner] = 0;
				if(fsType == 3)
				FightSystem[fs][fsOwnerFaction] = FightSystem[fs][fsAttackFaction];
				FightSystem[fs][fsAttackFaction] = -255;
				FightSystem[fs][fsCTF][0] = -255;
			}
		}
		if(FightSystem[fs][fsLastFight])
		FightSystem[fs][fsLastFight]--;
	}
	return 1;
}

forward Fight_Init();
public Fight_Init()
{
	Fight = TextDrawCreate(88.000000,244.000000,"Gangfight:~n~_~n~_~n~_~n~_~n~_");
	TextDrawUseBox(Fight,1);
	TextDrawBoxColor(Fight,0x00000066);
	TextDrawTextSize(Fight,102.000000,124.000000);
	TextDrawAlignment(Fight,2);
	TextDrawFont(Fight,2);
	TextDrawLetterSize(Fight,0.499999,1.000000);
	TextDrawColor(Fight,0xffffffff);
	TextDrawSetOutline(Fight,1);
	TextDrawSetProportional(Fight,1);
	FightUnderline = TextDrawCreate(91.000000,274.000000,".");
	TextDrawAlignment(FightUnderline,2);
	TextDrawBackgroundColor(FightUnderline,0x000000ff);
	TextDrawFont(FightUnderline,3);
	TextDrawLetterSize(FightUnderline,14.799997,1.000000);
	TextDrawColor(FightUnderline,0xffffffff);
	TextDrawSetProportional(FightUnderline,1);
	TextDrawSetShadow(FightUnderline,1);
	if(!fexist("Sonstiges/Gangzones.cfg"))
	{
		new File:fFile=fopen("Sonstiges/Gangzones.cfg",io_write);
		for(new fs;fs<sizeof(FightSystem);fs++)
		fwrite(fFile,"-255 -255 0 0 0\r\n");
		fclose(fFile);
	}
	new File:fFile=fopen("Sonstiges/Gangzones.cfg",io_read),Content[64],fs;
	while(fread(fFile,Content) && fs < sizeof(FightSystem)){
		FightSystem[fs][fsWinFaction] = TextDrawCreate(26.000000,256.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsWinFaction],1);
		TextDrawAlignment(FightSystem[fs][fsWinFaction],0);
		TextDrawBackgroundColor(FightSystem[fs][fsWinFaction],0x000000ff);
		TextDrawFont(FightSystem[fs][fsWinFaction],2);
		TextDrawLetterSize(FightSystem[fs][fsWinFaction],0.199999,1.000000);
		TextDrawColor(FightSystem[fs][fsWinFaction],0xffffffff);
		TextDrawSetOutline(FightSystem[fs][fsWinFaction],1);
		FightSystem[fs][fsLoseFaction] = TextDrawCreate(26.000000,267.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsLoseFaction],1);
		TextDrawSetOutline(FightSystem[fs][fsLoseFaction],1);
		TextDrawColor(FightSystem[fs][fsLoseFaction],0xffffffff);
		TextDrawFont(FightSystem[fs][fsLoseFaction],2);
		TextDrawLetterSize(FightSystem[fs][fsLoseFaction],0.199999,0.899999);
		TextDrawBackgroundColor(FightSystem[fs][fsLoseFaction],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsLoseFaction],0);
		FightSystem[fs][fsWinKills] = TextDrawCreate(107.000000,256.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsWinKills],1);
		TextDrawSetOutline(FightSystem[fs][fsWinKills],1);
		TextDrawColor(FightSystem[fs][fsWinKills],0xffffffff);
		TextDrawSetShadow(FightSystem[fs][fsWinKills],1);
		TextDrawFont(FightSystem[fs][fsWinKills],2);
		TextDrawLetterSize(FightSystem[fs][fsWinKills],0.199999,1.000000);
		TextDrawBackgroundColor(FightSystem[fs][fsWinKills],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsWinKills],0);
		FightSystem[fs][fsLoseKills] = TextDrawCreate(107.000000,267.000000," ");
		TextDrawSetProportional(FightSystem[fs][fsLoseKills],1);
		TextDrawSetShadow(FightSystem[fs][fsLoseKills],1);
		TextDrawSetOutline(FightSystem[fs][fsLoseKills],1);
		TextDrawColor(FightSystem[fs][fsLoseKills],0xffffffff);
		TextDrawFont(FightSystem[fs][fsLoseKills],2);
		TextDrawLetterSize(FightSystem[fs][fsLoseKills],0.199999,1.000000);
		TextDrawBackgroundColor(FightSystem[fs][fsLoseKills],0x000000ff);
		TextDrawAlignment(FightSystem[fs][fsLoseKills],0);
		FightSystem[fs][fsTime] = TextDrawCreate(26.000000,286.000000," ");
		TextDrawColor(FightSystem[fs][fsTime],0xffffffff);
		TextDrawAlignment(FightSystem[fs][fsTime],0);
		TextDrawBackgroundColor(FightSystem[fs][fsTime],0x000000ff);
		TextDrawFont(FightSystem[fs][fsTime],2);
		TextDrawLetterSize(FightSystem[fs][fsTime],0.199999,0.899999);
		TextDrawSetProportional(FightSystem[fs][fsTime],1);
		StripNewLinee(Content);
		sscanf(Content,"dddddd",FightSystem[fs][fsOwnerFaction],FightSystem[fs][fsAttackFaction],FightSystem[fs][fsKillsOfOwner],FightSystem[fs][fsKillsOfAttack],FightSystem[fs][fsFightTime],FightSystem[fs][fsFightTimeCool]);
		FightSystem[fs][fsCTF][0] = -255;
		FightSystem[fs][fsCTF][1] = 0;
		FightSystem[fs][fsCTF][2] = 0;
		FightSystem[fs][fsLastFight] = 0;
		FightSystem[fs][fsZoneID] = GangZoneCreate(FightSystem[fs][fsMinX],FightSystem[fs][fsMinY],FightSystem[fs][fsMaxX],FightSystem[fs][fsMaxY]);
		FightSystem[fs][fsFlag] = CreatePickup(2914,1,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz],-1);
		FightSystem[fs][fstext] = CreateDynamic3DTextLabel("{FFFF00}Flagge erobern\n{FFFFFF}/ctf.",Weiß,FightSystem[fs][fsCTFx],FightSystem[fs][fsCTFy],FightSystem[fs][fsCTFz]+ 0.5,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1); //Flaggen 3D Text
		if(FightSystem[fs][fsFightTime] && FightSystem[fs][fsAttackFaction] != -255)
		{
			new fsText[64];
			format(fsText,sizeof(fsText),"Verbl. Zeit: %d Minuten",FightSystem[fs][fsFightTime]);
			TextDrawSetString(FightSystem[fs][fsTime],fsText);
			if(FightSystem[fs][fsKillsOfOwner] > FightSystem[fs][fsKillsOfAttack])
			{
				format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfOwner]);
				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
			}
			else if(FightSystem[fs][fsKillsOfAttack] > FightSystem[fs][fsKillsOfOwner])
			{
				format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[fs][fsKillsOfOwner]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
			}
			else
			{
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsOwnerFaction]));
				TextDrawSetString(FightSystem[fs][fsWinFaction],fsText);
				format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfOwner]);
				TextDrawSetString(FightSystem[fs][fsWinKills],fsText);
				format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[fs][fsAttackFaction]));
				TextDrawSetString(FightSystem[fs][fsLoseFaction],fsText);
				format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[fs][fsKillsOfAttack]);
				TextDrawSetString(FightSystem[fs][fsLoseKills],fsText);
			}
		}
	 	for(new i = 0; i < MAX_PLAYERS; i++)
	 	{
			if(IsPlayerConnected(i))
			{
			    SetPVarInt(i,"Spawneddd",1);
				GangZoneShowForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
				if(FightSystem[fs][fsAttackFaction] && FightSystem[fs][fsFightTime])
				{
					GangZoneFlashForPlayer(i,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
					if(GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction] || GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction])
					{
						TextDrawShowForPlayer(i,Fight);
						TextDrawShowForPlayer(i,FightUnderline);
						TextDrawShowForPlayer(i,FightSystem[fs][fsWinFaction]);
						TextDrawShowForPlayer(i,FightSystem[fs][fsLoseFaction]);
						TextDrawShowForPlayer(i,FightSystem[fs][fsWinKills]);
						TextDrawShowForPlayer(i,FightSystem[fs][fsLoseKills]);
						TextDrawShowForPlayer(i,FightSystem[fs][fsTime]);
					}
				}
			}
		}
		fs++;
	}
	fclose(fFile);
	FightTimer[0] = SetTimer("FightUpdate_1",1033,true);
	FightTimer[1] = SetTimer("FightUpdate_2",60127,true);
	return 1;
}
public Fight_Close()
{
	KillTimer(FightTimer[0]);
	KillTimer(FightTimer[1]);
	if(fexist("Sonstiges/Gangzones.cfg")) fremove("Sonstiges/Gangzones.cfg");
	new File:fFile=fopen("Sonstiges/Gangzones.cfg",io_append),Content[64];
	for(new fs;fs<sizeof(FightSystem);fs++){
		if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime])
		{
			GangZoneStopFlashForAll(FightSystem[fs][fsZoneID]);
		 	for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
				if(IsPlayerConnected(i))
				{
					if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction])
					{
						TextDrawHideForPlayer(i,Fight);
						TextDrawHideForPlayer(i,FightUnderline);
						TextDrawHideForPlayer(i,FightSystem[fs][fsWinFaction]);
						TextDrawHideForPlayer(i,FightSystem[fs][fsLoseFaction]);
						TextDrawHideForPlayer(i,FightSystem[fs][fsWinKills]);
						TextDrawHideForPlayer(i,FightSystem[fs][fsLoseKills]);
						TextDrawHideForPlayer(i,FightSystem[fs][fsTime]);
					}
				}
			}
		}
		TextDrawDestroy(FightSystem[fs][fsWinFaction]);
		TextDrawDestroy(FightSystem[fs][fsLoseFaction]);
		TextDrawDestroy(FightSystem[fs][fsWinKills]);
		TextDrawDestroy(FightSystem[fs][fsLoseKills]);
		TextDrawDestroy(FightSystem[fs][fsTime]);
		GangZoneHideForAll(FightSystem[fs][fsZoneID]);
		GangZoneDestroy(FightSystem[fs][fsZoneID]);
		DestroyPickup(FightSystem[fs][fsFlag]);
		DestroyDynamic3DTextLabel(FightSystem[fs][fstext]);
		format(Content,sizeof(Content),"%d %d %d %d %d %d\r\n",FightSystem[fs][fsOwnerFaction],FightSystem[fs][fsAttackFaction],FightSystem[fs][fsKillsOfOwner],FightSystem[fs][fsKillsOfAttack],FightSystem[fs][fsFightTime],FightSystem[fs][fsFightTimeCool]);
		fwrite(fFile,Content);
	}
	fclose(fFile);
	TextDrawDestroy(Fight);
	TextDrawDestroy(FightUnderline);
	return 1;
}

forward GW_OnPlayerDisconnect(playerid);
public GW_OnPlayerDisconnect(playerid){
	new stringx[128];
	for(new fs;fs<sizeof(FightSystem);fs++){
	    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime]){
			new TempZone = GetPlayerFightzone(playerid);
			new Float:hp;
			GetPlayerHealth(playerid, hp);
			if(hp <= 20) {
				if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid)){
					FightSystem[TempZone][fsKillsOfAttack]++;
				    format(stringx, sizeof(stringx), "--> Gangfight <-- | %s hat sich mit low HP im Gangfight ausgeloggt.", GetName(playerid));
					SendFamilyMessage(FightSystem[TempZone][fsOwnerFaction], Weiß, stringx);
					SendFamilyMessage(FightSystem[TempZone][fsAttackFaction], Weiß, stringx);
				    format(stringx, sizeof(stringx), "--> Gangfight <-- | Die %s bekommen einen Gangfightpunkt.", GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
					SendFamilyMessage(FightSystem[TempZone][fsOwnerFaction], Weiß, stringx);
					SendFamilyMessage(FightSystem[TempZone][fsAttackFaction], Weiß, stringx);
				}
				else if(FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)) {
					FightSystem[TempZone][fsKillsOfOwner]++;
				    format(stringx, sizeof(stringx), "--> Gangfight <-- | %s hat sich mit low HP im Gangfight ausgeloggt.", GetName(playerid));
					SendFamilyMessage(FightSystem[TempZone][fsAttackFaction], Weiß, stringx);
					SendFamilyMessage(FightSystem[TempZone][fsOwnerFaction], Weiß, stringx);
				    format(stringx, sizeof(stringx), "--> Gangfight <-- | Die %s Gang bekommen einen Gangfightpunkt.", GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
					SendFamilyMessage(FightSystem[TempZone][fsAttackFaction], Weiß, stringx);
					SendFamilyMessage(FightSystem[TempZone][fsOwnerFaction], Weiß, stringx);
				}
			}
	        if(FightSystem[fs][fsCTF][0] != -255 && FightSystem[fs][fsCTF][0] == playerid){
                new fsName[MAX_PLAYER_NAME];
    			GetPlayerName(FightSystem[fs][fsCTF][0],fsName,MAX_PLAYER_NAME);
    			new fsText[128];
	            format(fsText,sizeof(fsText),"--> Gangfight <-- | %s hat es nicht geschafft die Flagge zu erobern!",fsName);
			 	for(new i = 0; i < MAX_PLAYERS; i++)
			 	{
	            	if(IsPlayerConnected(i)){
	                	if(GetPlayerFaction(i) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[fs][fsAttackFaction]){
							PlayerPlaySound(i,1058,0.0,0.0,0.0);
							SendClientMessage(i,Weiß,fsText);
						}
					}
				}
	            FightSystem[fs][fsCTF][0] = -255;
	            FightSystem[fs][fsCTF][1] = 0;
	            FightSystem[fs][fsCTF][2] = 0;
	        }
	    	if(GetPVarInt(playerid,"Spawneddd")==1){
	        	GangZoneStopFlashForPlayer(playerid,FightSystem[fs][fsZoneID]);
	        	if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction]){
					TextDrawHideForPlayer(playerid,Fight);
	        	    TextDrawHideForPlayer(playerid,FightUnderline);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsWinFaction]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsLoseFaction]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsWinKills]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsLoseKills]);
	        	    TextDrawHideForPlayer(playerid,FightSystem[fs][fsTime]);
	        	}
			}
		}GangZoneHideForPlayer(playerid,FightSystem[fs][fsZoneID]);
	}DeletePVar(playerid,"Spawneddd");
	return 1;
}
forward GW_OnPlayerSpawn(playerid);
public GW_OnPlayerSpawn(playerid){
	if(GetPVarInt(playerid,"Spawneddd")==0){
	    SetPVarInt(playerid,"Spawneddd",1);
		for(new fs;fs<sizeof(FightSystem);fs++){
		    if(FightSystem[fs][fsAttackFaction] != -255 && FightSystem[fs][fsFightTime]){
	        	GangZoneFlashForPlayer(playerid,FightSystem[fs][fsZoneID],GetZoneColorOfFaction(FightSystem[fs][fsAttackFaction]));
	        	if(GetPlayerFaction(playerid) == FightSystem[fs][fsOwnerFaction] || GetPlayerFaction(playerid) == FightSystem[fs][fsAttackFaction]){
	        	    TextDrawShowForPlayer(playerid,Fight);
	        	    TextDrawShowForPlayer(playerid,FightUnderline);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsWinFaction]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsLoseFaction]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsWinKills]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsLoseKills]);
	        	    TextDrawShowForPlayer(playerid,FightSystem[fs][fsTime]);
	        	}
			}
		}
	}return 1;
}
forward GW_OnPlayerDeath(playerid, killerid, reason);
public GW_OnPlayerDeath(playerid, killerid, reason){
	if(IsPlayerConnected(killerid)){
		if(IsAFightFaction(GetPlayerFaction(killerid))){
	    	new TempZone = GetPlayerFightzone(killerid);
	    	if(TempZone != -255){
	        	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){
	            	if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(killerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(killerid)){
     	        		if(IsAFightFaction(GetPlayerFaction(playerid))){
     	        		    new fsText[64];
   	            			if(FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(killerid) && FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid)){
						  		PlayerPlaySound(killerid,1084,0.0,0.0,0.0);
								GameTextForPlayer(killerid,"~g~GANGFIGHTKILL",3125,3);
								GameTextForPlayer(playerid,"~r~GANGFIGHTKILL",3125,3);
								SetPVarInt(playerid, "NoTod", 1);
                    			FightSystem[TempZone][fsKillsOfAttack]++;
                    			if(FightSystem[TempZone][fsKillsOfOwner] > FightSystem[TempZone][fsKillsOfAttack]){
                    	    		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
                    			else if(FightSystem[TempZone][fsKillsOfAttack] > FightSystem[TempZone][fsKillsOfOwner]){
                        			format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}else{
                    		    	format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
           					}
	            	        else if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(killerid) && FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)){
								PlayerPlaySound(killerid,1084,0.0,0.0,0.0);
								GameTextForPlayer(killerid,"~g~GANGFIGHTKILL",3125,3);
								GameTextForPlayer(playerid,"~r~GANGFIGHTKILL",3125,3);
								SetPVarInt(playerid, "NoTod", 1);
                    			FightSystem[TempZone][fsKillsOfOwner]++;
                    			if(FightSystem[TempZone][fsKillsOfOwner] > FightSystem[TempZone][fsKillsOfAttack]){
                    	    		format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
                    			else if(FightSystem[TempZone][fsKillsOfAttack] > FightSystem[TempZone][fsKillsOfOwner]){
                        			format(fsText,sizeof(fsText),"~g~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~g~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~r~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~r~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}else{
                    		    	format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsOwnerFaction]));
				        			TextDrawSetString(FightSystem[TempZone][fsWinFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfOwner]);
                        			TextDrawSetString(FightSystem[TempZone][fsWinKills],fsText);
									format(fsText,sizeof(fsText),"~y~%s",GetFactionNameOfFaction(FightSystem[TempZone][fsAttackFaction]));
									TextDrawSetString(FightSystem[TempZone][fsLoseFaction],fsText);
				        			format(fsText,sizeof(fsText),"~y~%d Kills",FightSystem[TempZone][fsKillsOfAttack]);
									TextDrawSetString(FightSystem[TempZone][fsLoseKills],fsText);
                    			}
	            	        }
	            	    }
	            	}
	        	}
	    	}
		}
	}
	if(IsAFightFaction(GetPlayerFaction(playerid))){
       	new TempZone = GetPlayerFightzone(playerid);
		if(TempZone != -255){
	    	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){
	        	if(FightSystem[TempZone][fsOwnerFaction] == GetPlayerFaction(playerid) || FightSystem[TempZone][fsAttackFaction] == GetPlayerFaction(playerid)){
			    	if(FightSystem[TempZone][fsCTF][0] == playerid){
					    new fsName[MAX_PLAYER_NAME];
					    GetPlayerName(playerid,fsName,MAX_PLAYER_NAME);
					    new fsText[128];
			        	format(fsText,sizeof(fsText),"--> Gangfight <-- | %s hat es nicht geschafft die Flagge zu erobern.",fsName);
					 	for(new i = 0; i < MAX_PLAYERS; i++)
					 	{
   						    if(IsPlayerConnected(i)){
	                    		if(GetPlayerFaction(i) == FightSystem[TempZone][fsOwnerFaction] || GetPlayerFaction(i) == FightSystem[TempZone][fsAttackFaction]){
									PlayerPlaySound(i,1058,0.0,0.0,0.0);
									SendClientMessage(i,Weiß,fsText);
								}
							}
						}
			        	FightSystem[TempZone][fsCTF][0] = -255;
  						FightSystem[TempZone][fsCTF][1] = 0;
       					FightSystem[TempZone][fsCTF][2] = 0;
			  	  	}
				}
	    	}
		}
	}return 1;
}

//Fraktionsautohaus
forward START_FRAC();
public START_FRAC(){
	LoadFactionCars();
	SaveFactionCarsTimer = SetTimerEx("SaveFactionCars",((1069*60)*15),true,"d",false);
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++){
	    FactionBuylist[fbl][fbCarid] = CreateVehicle(FactionBuylist[fbl][fbVehid],FactionBuylist[fbl][fbX],FactionBuylist[fbl][fbY],FactionBuylist[fbl][fbZ],FactionBuylist[fbl][fbA],-1,-1,-255);
	    Tankmenge[FactionBuylist[fbl][fbCarid]] = GasMax[FactionBuylist[fbl][fbVehid]-400];
		new fblText[128];
		format(fblText,sizeof(fblText),"{FFFFFF} --> Gangautohaus <-- \n\n{FFFFFF}Fahrzeugname: {FFFF00}%s\n{FFFFFF}Preis: {FFFF00}%d",VehicleNames[FactionBuylist[fbl][fbVehid]-400],FactionBuylist[fbl][fbPrice]);
		FactionBuylist[fbl][fbLabel] = Create3DTextLabel(fblText,0xFFFFFFFF,FactionBuylist[fbl][fbX],FactionBuylist[fbl][fbY],FactionBuylist[fbl][fbZ],40.0,0,true);
		Attach3DTextLabelToVehicle(FactionBuylist[fbl][fbLabel],FactionBuylist[fbl][fbCarid],0.0,0.0,0.75);
	}
	BuylistRespawner = SetTimer("RespawnFactionBuylist",(1069*60)*10,true);
	return 1;
}
forward STOP_FRAC();
public STOP_FRAC()
{
	KillTimer(SaveFactionCarsTimer);
	SaveFactionCars(true);
	KillTimer(BuylistRespawner);
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++)
	{
		DestroyVehicle(FactionBuylist[fbl][fbCarid]);
		Delete3DTextLabel(FactionBuylist[fbl][fbLabel]);
	}
	return 1;
}

forward FRAC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
public FRAC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger){
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++){
	    if(vehicleid == FactionBuylist[fbl][fbCarid]){
	        if(!IsAllowedFactionToBuy(GetPlayerLeader(playerid))){
	            SendClientMessage(playerid,Rot,"Du bist nicht dazu berechtigt Gangautos zu kaufen!");
				TogglePlayerControllable(playerid, false); TogglePlayerControllable(playerid, true);
	        }
	    }
	}return 1;
}
forward FRAC_OnVehicleDeath(vehicleid, killerid);
public FRAC_OnVehicleDeath(vehicleid, killerid){
    for(new fc;fc<sizeof(FactionCars);fc++){
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	    	if(FactionCars[fc][fCarid] == vehicleid){
	        	SetTimerEx("DestroyAndCreateFactionCar",3163,0,"d",fc);
	        	break;
	    	}
		}
	}return 1;
}

forward FRAC_OnPlayerStateChange(playerid, newstate, oldstate);
public FRAC_OnPlayerStateChange(playerid, newstate, oldstate){
    if(newstate==PLAYER_STATE_DRIVER){
    	new Carid1 = GetPlayerVehicleID(playerid);
		for(new fbl;fbl<sizeof(FactionBuylist);fbl++){
			if(Carid1 == FactionBuylist[fbl][fbCarid]){
		    	if(IsAllowedFactionToBuy(GetPlayerLeader(playerid))){
		        	TogglePlayerControllable(playerid,false);
		        	new fblText[278];
		        	format(fblText,sizeof(fblText),"{FFFFFF}Möchtest du das Fahrzeug deiner Fraktion kaufen?\n\n{FFFFFF}Fahrzeugname:  {007DFF}%s\n{FFFFFF}Preis:		  {007DFF}%d\n\n{FFFFFF}Um das Fahrzeug zu kaufen benutze den Button {007DFF}'Ja'{FFFFFF}, um es nicht zu kaufen den Button {007DFF}'Nein'{FFFFFF}.",VehicleNames[FactionBuylist[fbl][fbVehid]-400],FactionBuylist[fbl][fbPrice]);
		        	ShowPlayerDialog(playerid,DIALOG_FACTION_CAR_BUY,DIALOG_STYLE_MSGBOX,"{FFFFFF}Fraktionsautohaus:",fblText,"Nein","Ja");
				}else{
				    SendClientMessage(playerid,Rot,"Du bist nicht dazu berechtigt Gangautos zu kaufen!");
				    new Float:pPos[3];
				    GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
				    SetPlayerPosEx(playerid,pPos[0]+2.5,pPos[1]+2.5,pPos[2]);
				}break;
		    }
		}
	}return 1;
}
forward FRAC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
public FRAC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]){
	if(dialogid == DIALOG_FACTION_CAR_BUY){
	    if(response){
	        new Float:pPos[3];
			GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
			SetPlayerPosEx(playerid,pPos[0]+2.5,pPos[1]+2.5,pPos[2]);
			TogglePlayerControllable(playerid,true);
	    }
	    if(!response){
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
				if(IsAllowedFactionToBuy(GetPlayerLeader(playerid))){
			    	if(GetFactioncarsOfFaction(GetPlayerLeader(playerid)) < MAX_BUY){
			            new Carid1 = GetPlayerVehicleID(playerid);
			            for(new fbl;fbl<sizeof(FactionBuylist);fbl++){
			                if(Carid1 == FactionBuylist[fbl][fbCarid]){
			                    if(GetPlayerEuros(playerid) >= FactionBuylist[fbl][fbPrice]){
			                        for(new fc;fc<sizeof(FactionCars);fc++){
			                            if(FactionCars[fc][fVehid] < 400 || FactionCars[fc][fVehid] > 611){
			                                FactionCars[fc][fVehid] = FactionBuylist[fbl][fbVehid];
			                                FactionCars[fc][fPos][0] = FactionBuySpawn[0];
			                                FactionCars[fc][fPos][1] = FactionBuySpawn[1];
			                                FactionCars[fc][fPos][2] = FactionBuySpawn[2];
			                                FactionCars[fc][fPos][3] = FactionBuySpawn[3];
			                                new Color[2];
			                                GetDefaultCarColorOfFaction(GetPlayerLeader(playerid),Color[0],Color[1]);
			                                FactionCars[fc][fCol][0] = Color[0];
			                                FactionCars[fc][fCol][1] = Color[1];

											FactionCars[fc][fPrice] = FactionBuylist[fbl][fbPrice];
											for(new slot;slot<14;slot++)
												FactionCars[fc][fTuning][slot] = 0;
											FactionCars[fc][fCarid] = CreateServerVehicle(0,FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],GetPlayerLeader(playerid));
											print(">>> Nach dem Autoerstellen!");
											for(new f;f<5;f++)
											{
											    FactionCars[fc][fFaction][f] = -255;
											}
											FactionCars[fc][fFaction][0] = GetPlayerLeader(playerid);
											GivePlayerEuro(playerid, -FactionBuylist[fbl][fbPrice]);
											new Float:pPos[3];
											GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
											SetPlayerPosEx(playerid,pPos[0]+2.5,pPos[1]+2.5,pPos[2]);
											TogglePlayerControllable(playerid,true);
											ClearChat(playerid);
											PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			                                SendClientMessage(playerid,Weiß,"Glückwunsch zu dem neuen Fahrzeug.");
			                                SendClientMessage(playerid,Weiß,"Bitte vergesse nicht das Fahrzeug mit: '/fpark' umzuparken.");
			                                SendClientMessage(playerid,Gelb2,"Das Fahrzeug steht am Ausgabepunkt bereit!");
			                                return 1;
			                            }
			                        }SendClientMessage(playerid,Rot,"Die maximale Anzahl von Gangautos ist bereits erreicht.");
			                    }else SendClientMessage(playerid,Rot,"Du hast nicht genügend Geld bei dir!");
			                    break;
			                }
			            }
			    	}else SendClientMessage(playerid,Rot,"Deine Fraktion hat das Limit von Fahrzeugen bereits erreicht.");
				}else SendClientMessage(playerid,Rot,"Du bist nicht berchtigt Gangautos zu kaufen!");
				new Float:pPos[3];
				GetPlayerPos(playerid,pPos[0],pPos[1],pPos[2]);
				SetPlayerPosEx(playerid,pPos[0]+2.5,pPos[1]+2.5,pPos[2]);
				TogglePlayerControllable(playerid,true);
	    	}
		}return 1;
	}return 0;
}
forward FRAC_OnVehicleMod(playerid, vehicleid, componentid);
public FRAC_OnVehicleMod(playerid, vehicleid, componentid){
    for(new fc;fc<sizeof(FactionCars);fc++){
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	        if(FactionCars[fc][fCarid] == vehicleid){
				if((FactionCars[fc][fFaction][0] == GetPlayerLeader(playerid) || sStats[playerid][sAdminlevel] > 0) && IsAllowedFactionToTune(FactionCars[fc][fFaction][0]))
				    FactionCars[fc][fTuning][GetVehicleComponentType(componentid)] = componentid;
				else
				    SetTimerEx("RemoveComponent",3109,false,"dd",vehicleid,componentid);
				break;
			}
	    }
	}return 1;
}
forward FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
public FRAC_OnVehiclePaintjob(playerid, vehicleid, paintjobid){
    for(new fc;fc<sizeof(FactionCars);fc++){
	    if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	        if(FactionCars[fc][fCarid] == vehicleid){
	            SetTimerEx("ChangePaintjob",3163,false,"dd",FactionCars[fc][fCarid],3);
	            break;
	        }
	    }
	}return 1;
}
forward FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2);
public FRAC_OnVehicleRespray(playerid, vehicleid, color1, color2){
    for(new fc;fc<sizeof(FactionCars);fc++){
		if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
		    if(FactionCars[fc][fCarid] == vehicleid){
		        SetTimerEx("ChangeColor",3181,false,"ddd",FactionCars[fc][fCarid],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1]);
				break;
			}
		}
	}return 1;
}

public DestroyAndCreateFactionCar(fc){
	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
    	DestroyVehicle(FactionCars[fc][fCarid]);
    	FactionCars[fc][fCarid] = CreateServerVehicle(0,FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],FactionCars[fc][fFaction]);
		if(IsAllowedFactionToTune(FactionCars[fc][fFaction][0])){
		    if(FactionCars[fc][fTuning][0] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][0]); }
		    if(FactionCars[fc][fTuning][1] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][1]); }
		    if(FactionCars[fc][fTuning][2] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][2]); }
		    if(FactionCars[fc][fTuning][3] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][3]); }
		    if(FactionCars[fc][fTuning][4] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][4]); }
		    if(FactionCars[fc][fTuning][5] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][5]); }
		    if(FactionCars[fc][fTuning][6] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][6]); }
		    if(FactionCars[fc][fTuning][7] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][7]); }
		    if(FactionCars[fc][fTuning][8] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][8]); }
		    if(FactionCars[fc][fTuning][9] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][9]); }
		    if(FactionCars[fc][fTuning][10] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][10]); }
		    if(FactionCars[fc][fTuning][11] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][11]); }
		    if(FactionCars[fc][fTuning][12] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][12]); }
		    if(FactionCars[fc][fTuning][13] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][13]); }
		}
	}return true;
}
public LoadFactionCars(){
	if(!fexist(FACTION_CAR_FILE)){
    	new File:tfFile=fopen(FACTION_CAR_FILE,io_write);
		fclose(tfFile);
	}
	new File:fFile=fopen(FACTION_CAR_FILE,io_read),Content[1024],fc;
 	while(fread(fFile,Content) && fc<sizeof(FactionCars)){
    	StripNewLinee(Content);
        sscanf(Content,"dffffdddddddddddddddddddddd",
		FactionCars[fc][fVehid],
		FactionCars[fc][fPos][0],
		FactionCars[fc][fPos][1],
		FactionCars[fc][fPos][2],
		FactionCars[fc][fPos][3],
		FactionCars[fc][fCol][0],
		FactionCars[fc][fCol][1],
		FactionCars[fc][fFaction][0],
		FactionCars[fc][fFaction][1],
		FactionCars[fc][fFaction][2],
		FactionCars[fc][fFaction][3],
		FactionCars[fc][fFaction][4],
		FactionCars[fc][fTuning][0],
		FactionCars[fc][fTuning][1],
		FactionCars[fc][fTuning][2],
		FactionCars[fc][fTuning][3],
		FactionCars[fc][fTuning][4],
		FactionCars[fc][fTuning][5],
		FactionCars[fc][fTuning][6],
		FactionCars[fc][fTuning][7],
		FactionCars[fc][fTuning][8],
		FactionCars[fc][fTuning][9],
		FactionCars[fc][fTuning][10],
		FactionCars[fc][fTuning][11],
		FactionCars[fc][fTuning][12],
		FactionCars[fc][fTuning][13],
		FactionCars[fc][fPrice]);
        if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
        	FactionCars[fc][fCarid] = CreateServerVehicle(0,FactionCars[fc][fVehid],FactionCars[fc][fPos][0],FactionCars[fc][fPos][1],FactionCars[fc][fPos][2],FactionCars[fc][fPos][3],FactionCars[fc][fCol][0],FactionCars[fc][fCol][1],FactionCars[fc][fFaction]);
			if(IsAllowedFactionToTune(FactionCars[fc][fFaction][0])){
			    if(FactionCars[fc][fTuning][0] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][0]); }
			    if(FactionCars[fc][fTuning][1] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][1]); }
			    if(FactionCars[fc][fTuning][2] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][2]); }
			    if(FactionCars[fc][fTuning][3] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][3]); }
			    if(FactionCars[fc][fTuning][4] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][4]); }
			    if(FactionCars[fc][fTuning][5] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][5]); }
			    if(FactionCars[fc][fTuning][6] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][6]); }
			    if(FactionCars[fc][fTuning][7] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][7]); }
			    if(FactionCars[fc][fTuning][8] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][8]); }
			    if(FactionCars[fc][fTuning][9] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][9]); }
			    if(FactionCars[fc][fTuning][10] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][10]); }
			    if(FactionCars[fc][fTuning][11] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][11]); }
			    if(FactionCars[fc][fTuning][12] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][12]); }
			    if(FactionCars[fc][fTuning][13] != 0) { AddVehicleComponent(FactionCars[fc][fCarid],FactionCars[fc][fTuning][13]); }
			}
			fc++;
		}
   	}fclose(fFile);
 	return printf("'%d' Gangautos wurden geladen & erstellt.",fc);
}
public SaveFactionCars(bool:destroy){
	if(fexist(FACTION_CAR_FILE)) fremove(FACTION_CAR_FILE);
    new File:fFile=fopen(FACTION_CAR_FILE,io_append),Content[1024];
    for(new fc;fc<sizeof(FactionCars);fc++){
    	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
        	format(Content,sizeof(Content),"%d %.3f %.3f %.3f %.3f %03d %03d %02d %02d %02d %02d %02d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\r\n",
			FactionCars[fc][fVehid],
			FactionCars[fc][fPos][0],
			FactionCars[fc][fPos][1],
			FactionCars[fc][fPos][2],
			FactionCars[fc][fPos][3],
			FactionCars[fc][fCol][0],
			FactionCars[fc][fCol][1],
			FactionCars[fc][fFaction][0],
			FactionCars[fc][fFaction][1],
			FactionCars[fc][fFaction][2],
			FactionCars[fc][fFaction][3],
			FactionCars[fc][fFaction][4],
			FactionCars[fc][fTuning][0],
	        FactionCars[fc][fTuning][1],
	        FactionCars[fc][fTuning][2],
	        FactionCars[fc][fTuning][3],
	        FactionCars[fc][fTuning][4],
	        FactionCars[fc][fTuning][5],
	        FactionCars[fc][fTuning][6],
	        FactionCars[fc][fTuning][7],
	        FactionCars[fc][fTuning][8],
	        FactionCars[fc][fTuning][9],
	        FactionCars[fc][fTuning][10],
            FactionCars[fc][fTuning][11],
            FactionCars[fc][fTuning][12],
            FactionCars[fc][fTuning][13],
			FactionCars[fc][fPrice]);
            fwrite(fFile,Content);
            if(destroy == true){
                if(DestroyVehicle(FactionCars[fc][fCarid]))
					FactionCars[fc][fCarid] = -255;
            }
		}
	}fclose(fFile);
	return true;
}
public RespawnFactionBuylist(){
	for(new fbl;fbl<sizeof(FactionBuylist);fbl++)
	    SetVehicleToRespawn(FactionBuylist[fbl][fbCarid]);
	return 1;
}
public RemoveComponent(vehicleid,componentid)
	return RemoveVehicleComponent(vehicleid,componentid);
public ChangePaintjob(vehicleid,paintjobid)
	return ChangeVehiclePaintjob(vehicleid,paintjobid);
public ChangeColor(vehicleid,color1,color2)
	return ChangeVehicleColor(vehicleid,color1,color2);

//Ballon
forward MoveBallon();
public MoveBallon()
{
	new Float:X,Float:Y,Float:Z;
	GetObjectPos(ballonx,X,Y,Z);
	ballonn = 1;
	if(X == -2089.66 && Y == 2314.26 && Z == 24.90 && fahrt == 0)//1
	{
		MoveObject(ballonx,-2507.6206, 2159.7930, 28.5988,2.0);
		fahrt = 1;
		DestroyDynamicObject(lturm);
	}
	if(X == -2507.6206 && Y == 2159.7930 && Z == 28.5988 && fahrt == 1)//1
	{
		MoveObject(ballonx,-2541.5320, 2358.1592, 27.9200,2.0);
		lturm = CreateDynamicObject(6295, -2382.8098144531, 2216.0661621094, 27.666767120361, 0, 0, 90);
		fahrt = 2;
	}
	if(X == -2541.5320 && Y == 2358.1592 && Z == 27.9200 && fahrt == 2)//2
	{
		MoveObject(ballonx,-2342.2390, 2408.5222, 38.2000,2.0);
		DestroyDynamicObject(bbaum);
		fahrt = 3;
	}
	if(X == -2342.2390 && Y == 2408.5222 && Z == 38.2000 && fahrt == 3)//3
	{
		MoveObject(ballonx,-2089.66, 2314.26, 24.90,2.0);
		fahrt = 4;
	}
	if(X == -2089.66 && Y == 2314.26 && Z == 24.90 && fahrt == 4)//4
	{
		ballonn = 0;
		fahrt = 0;
		bbaum = CreateDynamicObject(714, -2290.6105957031, 2385.2478027344, 4.7796869277954, 0, 0, 0);
		SetTimer("RestartBallon", 1800722, false);
		KillTimer(TimerBalloon);
	}
}


public RestartBallon()
{
    TimerBalloon = SetTimer("MoveBallon",1069,true);
}

//Atombombe
forward bombtor();
public bombtor()
{
	MoveDynamicObject(atomgate1,-395.33563232422, 1257.5810546875, 11.195314407349,0.5);
	MoveDynamicObject(atomgate2,-394.24423217773, 1255.4013671875, 13.894744873047,0.5);
	MoveDynamicObject(atomgate3,-394.78442382813, 1254.3929443359, 13.856538772583,0.5);
	MoveDynamicObject(atomgate4,-394.62783813477, 1252.5374755859, 13.802545547485,0.5);
	MoveDynamicObject(atomgate5,-394.37945556641, 1251.6022949219, 13.777733802795,0.5);
	MoveDynamicObject(atomgate6,-395.05053710938, 1248.0109863281, 8.9105672836304,0.5);
	MoveDynamicObject(atomgate7,-394.90997314453, 1246.9406738281, 7.8817310333252,0.5);
	MoveDynamicObject(atomgate8,-386.84042358398, 1243.66796875, 8.8132982254028,0.5);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		SendClientMessage(i,Weiß,"Die Atomschutzbunker Türen werden jetzt geschlossen!");
	}
}

forward bombtorclose();
public bombtorclose()
{
	MoveDynamicObject(atomgate1,-395.33563232422, 1257.5810546875, 11.195314407349,0.5);
	MoveDynamicObject(atomgate2,-394.24423217773, 1255.4013671875, 13.894744873047,0.5);
	MoveDynamicObject(atomgate3,-394.78442382813, 1254.3929443359, 13.856538772583,0.5);
	MoveDynamicObject(atomgate4,-394.62783813477, 1252.5374755859, 13.802545547485,0.5);
	MoveDynamicObject(atomgate5,-394.37945556641, 1251.6022949219, 13.777733802795,0.5);
	MoveDynamicObject(atomgate6,-395.05053710938, 1248.0109863281, 8.9105672836304,0.5);
	MoveDynamicObject(atomgate7,-394.90997314453, 1246.9406738281, 7.8817310333252,0.5);
	MoveDynamicObject(atomgate8,-386.84042358398, 1243.66796875, 8.8132982254028,0.5);
}

forward bombexplode();
public bombexplode()
{
	new Float:pX,Float:pY;
	DestroyDynamicObject(Abombeo);
	CreateExplosion(PlayerExplosionX[1], PlayerExplosionY[1], PlayerExplosionZ[1], 10, 0);
	SendClientMessageToAll(COLOR_CNN, "Bayside-Newstime: Eine Atombombe ist explodiert!");
	MoveDynamicObject(atomgate1,-395.33563232422, 1257.5810546875, 1.195314407349,0.5);
	MoveDynamicObject(atomgate2,-394.24423217773, 1255.4013671875, 1.894744873047,0.5);
	MoveDynamicObject(atomgate3,-394.78442382813, 1254.3929443359, 1.856538772583,0.5);
	MoveDynamicObject(atomgate4,-394.62783813477, 1252.5374755859, 1.802545547485,0.5);
	MoveDynamicObject(atomgate5,-394.37945556641, 1251.6022949219, 1.777733802795,0.5);
	MoveDynamicObject(atomgate6,-395.05053710938, 1248.0109863281, 1.9105672836304,0.5);
	MoveDynamicObject(atomgate7,-394.90997314453, 1246.9406738281, 1.8817310333252,0.5);
	MoveDynamicObject(atomgate8,-386.84042358398, 1243.66796875, 1.8132982254028,0.5);
	SetTimer("bombtorclose",302162,false);
	Abombe=0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if (IsPlayerInRangeOfPoint(i,99999, PlayerExplosionX[1],PlayerExplosionY[1], PlayerExplosionZ[1]) && sStats[i][sTutorial] == 1 && PlayerPaintballing[i] == 0 && GetPVarInt(i, "Autoscooter") == 0 && GetPVarInt(i, "InDrift") == 0 && !IsPlayerInZonee(i,-455.4371, 1261.211, -303.6248, 1448.057))
   		{
   		    ClearChat(i);
   		    SendClientMessage(i,COLOR_LIGHTRED,"Du wurdest von der Schallwelle der Atombombe getroffen!");
   		    PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/atombombe.wav");
			PushPlayer(i, pX+5, pY+90);
			if(QuestCP[i] == 160)
			{
 				DisablePlayerCheckpoint(i);
 	    		QuestCP[i] = 0;
			}
 		}
		else if(IsPlayerInZonee(i,-455.4371, 1261.211, -303.6248, 1448.057))
		{
  			ClearChat(i);
	    	SendClientMessage(i,Weiß,"Die Atombombe ist explodiert!");
		    SendClientMessage(i,Gelb2,"Der Atomschutzbunker hat dich vor der Atombombe geschützt!");
		}
	}
}

//NoDM
//UnfreezePlayer
forward UnfreezePlayer(playerid);
public UnfreezePlayer(playerid)
{
	TogglePlayerControllable(playerid,true);
    return 1;
}

//Anti Bunnyhop
forward PressJump(playerid);
public PressJump(playerid)
{
    PlayerPressedJump[playerid] = 0;
    ClearAnimations(playerid);
    return 1;
}

forward PressJumpReset(playerid);
public PressJumpReset(playerid)
{
    PlayerPressedJump[playerid] = 0;
    return 1;
}

//Anti CBug
forward OnPlayerCBug(playerid);
public OnPlayerCBug(playerid) {
	new str2[128];
	SetPVarInt(playerid,"PlayerCBug",GetPVarInt(playerid, "PlayerCBug")+1);
	if(GetPVarInt(playerid, "PlayerCBug") > 4 && PlayerPaintballing[playerid] == 0)
	{
		format(str2, sizeof(str2), "** Anti-Cheat: Der Spieler %s wurde für 10 Sekunden eingefroren. Grund: CBug.", GetName(playerid));
		SendClientMessageToAll(Rot, str2);
		ClearChat(playerid);
		SendClientMessage(playerid,Rot,"Du wurdest vom Server für 10 Sekunden eingefroren. Grund: CBug!");
		CheckCrouch[playerid] = 0;
		TogglePlayerControllable(playerid, false);
		SetTimerEx("CrouchUn", 10135, 0, "d", playerid);
	}
	return 1;
}

forward CrouchUn(playerid);
public CrouchUn(playerid) {
    SetPVarInt(playerid,"PlayerCBug",0);
	TogglePlayerControllable(playerid, true);
	return 1;
}

forward CrouchCheck(playerid);
public CrouchCheck(playerid) {
    SetPVarInt(playerid,"PlayerCBug",0);
	CheckCrouch[playerid] = 0;
	return 1;
}

//Nitrosystem
forward IsPlayerInInvalidNosVehicle(playerid);
public IsPlayerInInvalidNosVehicle(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
	new carmodel = GetVehicleModel(carid);
	for (new i=0; i<sizeof(InvalidNosVehicles); i++)
	{
	    if (carmodel == InvalidNosVehicles[i]) return 1;
	}
	return 0;
}

//Türe Hacken
forward HackSchrott(playerid);
public HackSchrott(playerid)
{
	new anm = random(9);
	switch(anm)
	{
		case 0:SendClientMessage(playerid,Orange,"GSAGAGWG21626JZ$BSEQHUJHWB8328FWSG1FWGSHBEJWHSBSHRNWIDNWDWHJGMCEJWI1337");
		case 1:SendClientMessage(playerid,Orange,"ÖKLWINFNFAZUFWPQMQFQM2424JJHFIFMSFJS5252MFJJWFSMFMWF2515fKWFJSFMWFSJ222");
		case 2:SendClientMessage(playerid,Orange,"ÄWLFFWJFWV;WITZQUZPASFMAM2MFMNQMFfaFJfsFKSFSKF53KFSFM;WFIfSKF($§§KFSFKK");
		case 3:SendClientMessage(playerid,Orange,"NSFUWFJ25252MFSMF$/&TZ$§MDGJSGN4764374MSFJSFJKSM/436KMSFKSFJSM2KFSFLSCC");
		case 4:SendClientMessage(playerid,Orange,"2525KSFGJSFMWFIPFÖFJWFJ§(&(§&(§&MFSJFSFJ363262626KKSFSFWMFSFOWTGÖQ%&!!!");
		case 5:SendClientMessage(playerid,Orange,";WFM6363636JFSNFJGWIGWBHTNNFSJUJWF§=&§363636362262783453325262356789221");
		case 6:SendClientMessage(playerid,Orange,"FKASFJSGNOOBSFJWI6886jmfjiqfioqm9dfm3090djfskmfejhs9f3mfaso390jm56kds0f");
		case 7:SendClientMessage(playerid,Orange,"önfönfn.21öfsöafhöahöäf20fahöfhs21´fmföwqföfahfwfh29a.fhwafö229fsbafxxa");
		case 8:SendClientMessage(playerid,Orange,"3fqbbcqjcnqwhcgqcnqsnc284591515jfqfnqbcqucwnfdc1qu2cjnabcw6195176185iii");
	}
}

forward HackVorgang(playerid);
public HackVorgang(playerid)
{
    KillTimer(Hacktimer[playerid]);
	new anm = random(1);
	switch(anm)
	{
	    case 0:
	    {
	        PlayerPlaySound(playerid, 1152, 0.0, 0.0, 0.0);
	        ClearChat(playerid);
	        SendClientMessage(playerid,Gruen,"Hackvorgang erfolgreich abgeschlossen!");
	        SendClientMessage(playerid,Weiß,"Tür wurde geöffnet!");
	        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Begebe dich jetzt schnellstmöglich zum Serverraum!");
	        TogglePlayerControllable(playerid, true);
       		MoveDynamicObject(lspddoor2,1553.9800, -1691.5000, 1722.1000,1);
			SetTimer("Closelspdtor2",9283,false);
			SetPlayerCheckpoint(playerid, 1562.8668,-1661.2628,1730.1024, 4.0);
			QuestCP[playerid] = 797;
		    lspduse2 = 1;
	 	}
	 	case 1:
	 	{
	 	    PlayerPlaySound(playerid, 1153, 0.0, 0.0, 0.0);
   			ClearChat(playerid);
	        SendClientMessage(playerid,Rot,"Hackvorgang fehlgeschlagen!");
	        SendClientMessage(playerid,Weiß,"Probiere es erneut!");
	        TogglePlayerControllable(playerid, true);
   		}
	}
}

forward HackVorgang2(playerid);
public HackVorgang2(playerid)
{
    KillTimer(Hacktimer[playerid]);
	new anm = random(1);
	switch(anm)
	{
	    case 0:
	    {
	        PlayerPlaySound(playerid, 1152, 0.0, 0.0, 0.0);
	        ClearChat(playerid);
	        SendClientMessage(playerid,Gruen,"Hackvorgang erfolgreich abgeschlossen!");
	        SendClientMessage(playerid,Weiß,"Du hast die Daten von dem MS-14 Leader erfolgreich auf deinen USB-Stick gezogen!");
	        SendClientMessage(playerid,COLOR_LIGHTBLUE,"Sieh zu das du schnell nach Jack kommst (/daten)!");
	        TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid,"Daten",1);

	 	}
	 	case 1:
	 	{
	 	    PlayerPlaySound(playerid, 1153, 0.0, 0.0, 0.0);
   			ClearChat(playerid);
	        SendClientMessage(playerid,Rot,"Hackvorgang fehlgeschlagen!");
	        SendClientMessage(playerid,Weiß,"Probiere es erneut!");
	        TogglePlayerControllable(playerid, true);
   		}
	}
}

//Autohaus
forward SetCarSpawn(playerid,carslot);
public SetCarSpawn(playerid,carslot)
{
	//Generelles
	SetPVarInt(playerid,"Carslotid",carslot);
	DisablePlayerCheckpoint(playerid);
	SetPVarInt(playerid,"Pate",1);
	SendClientMessage(playerid,Gelb,"{FFFFFF}Der Autopate: {FFFF00}Dein Fahrzeug ist nun abholbereit, begebe dich nach den Docks und befolge den weiteren Instruktionen!");
	SendClientMessage(playerid,Gelb,"{FFFFFF}Der Autopate: {FFFF00}Ich habe dir dein Ziel rot auf der Karte makiert!");
	SetPlayerCheckpoint(playerid, -1649.3591,16.3381,3.5495, 3.0); //SF Pier
	QuestCP[playerid] = 160;
	//Das Auto generell
	PlayerCar[playerid][carslot][cPos_x] = -1573.4369;
	PlayerCar[playerid][carslot][cPos_y] = 67.9502;
	PlayerCar[playerid][carslot][cPos_z] = 17.8856;
	PlayerCar[playerid][carslot][cORotate] = 46.9488;
	PlayerCar[playerid][carslot][cLock] = 1;
	DestroyVehicle(PlayerCar[playerid][carslot][cId]);
	//Sound zu bestätigung
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
}

forward SpawnCar(playerid,carslot);
public SpawnCar(playerid,carslot)
{
new model = PlayerCar[playerid][carslot][cModel];
if(model >= 400 && model <= 611)
{
PlayerCar[playerid][carslot][cId] = CreateServerVehicle(0,PlayerCar[playerid][carslot][cModel], PlayerCar[playerid][carslot][cPos_x],PlayerCar[playerid][carslot][cPos_y],PlayerCar[playerid][carslot][cPos_z],PlayerCar[playerid][carslot][cORotate],PlayerCar[playerid][carslot][cC1],PlayerCar[playerid][carslot][cC2],999);
//Tanksetzen
Tankmenge[PlayerCar[playerid][carslot][cId]] = GasMax[PlayerCar[playerid][carslot][cModel]-400];
SetPVarInt(playerid,"Carslot",PlayerCar[playerid][carslot][cId]);
if(PlayerCar[playerid][carslot][cPj] >= 0) {ChangeVehiclePaintjob(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cPj]);}
if(PlayerCar[playerid][carslot][cMod1] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod1]);}
if(PlayerCar[playerid][carslot][cMod2] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod2]);}
if(PlayerCar[playerid][carslot][cMod3] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod3]);}
if(PlayerCar[playerid][carslot][cMod4] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod4]);}
if(PlayerCar[playerid][carslot][cMod5] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod5]);}
if(PlayerCar[playerid][carslot][cMod6] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod6]);}
if(PlayerCar[playerid][carslot][cMod7] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod7]);}
if(PlayerCar[playerid][carslot][cMod8] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod8]);}
if(PlayerCar[playerid][carslot][cMod9] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod9]);}
if(PlayerCar[playerid][carslot][cMod10] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod10]);}
if(PlayerCar[playerid][carslot][cMod11] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod11]);}
if(PlayerCar[playerid][carslot][cMod12] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod12]);}
if(PlayerCar[playerid][carslot][cMod13] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod13]);}
if(PlayerCar[playerid][carslot][cMod14] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod14]);}
if(PlayerCar[playerid][carslot][cMod15] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod15]);}
if(PlayerCar[playerid][carslot][cMod16] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod16]);}
if(PlayerCar[playerid][carslot][cMod17] != 0) {AddVehicleComponent(PlayerCar[playerid][carslot][cId],PlayerCar[playerid][carslot][cMod17]);}
if(PlayerCar[playerid][carslot][cNeon] == 0)
{
	Neonlichter[PlayerCar[playerid][carslot][cId]] = 0;
}
if(PlayerCar[playerid][carslot][cTuev] == 1)
{
	new string[128];
	Kennzeichen[PlayerCar[playerid][carslot][cId]] = 1;
	format(string, sizeof(string), "%s",GetName(playerid));
	SetVehicleNumberPlate(PlayerCar[playerid][carslot][cId],string);
}
else
{
    Kennzeichen[PlayerCar[playerid][carslot][cId]] = 0;
}
if(PlayerCar[playerid][carslot][cNeon] != 0)
{
        Neonlichter[PlayerCar[playerid][carslot][cId]] = PlayerCar[playerid][carslot][cNeon];
	    if(Neonlichter[PlayerCar[playerid][carslot][cId]] == 1)
	    {
    		rot1[PlayerCar[playerid][carslot][cId]] = CreateObject(18647,0,0,0,0,0,0);
			rot2[PlayerCar[playerid][carslot][cId]] = CreateObject(18647,0,0,0,0,0,0);
			AttachObjectToVehicle(rot1[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(rot2[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[PlayerCar[playerid][carslot][cId]] = 1;
	    }
	    if(Neonlichter[PlayerCar[playerid][carslot][cId]] == 2)
	    {
    		blau1[PlayerCar[playerid][carslot][cId]] = CreateObject(18648,0,0,0,0,0,0);
			blau2[PlayerCar[playerid][carslot][cId]] = CreateObject(18648,0,0,0,0,0,0);
			AttachObjectToVehicle(blau1[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(blau2[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[PlayerCar[playerid][carslot][cId]] = 2;
	    }
	    if(Neonlichter[PlayerCar[playerid][carslot][cId]] == 3)
	    {
    		gelb1[PlayerCar[playerid][carslot][cId]] = CreateObject(18650,0,0,0,0,0,0);
			gelb2[PlayerCar[playerid][carslot][cId]] = CreateObject(18650,0,0,0,0,0,0);
			AttachObjectToVehicle(gelb1[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(gelb2[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[PlayerCar[playerid][carslot][cId]] = 3;
	    }
	    if(Neonlichter[PlayerCar[playerid][carslot][cId]] == 4)
	    {
    		weis1[PlayerCar[playerid][carslot][cId]] = CreateObject(18652,0,0,0,0,0,0);
			weis2[PlayerCar[playerid][carslot][cId]] = CreateObject(18652,0,0,0,0,0,0);
			AttachObjectToVehicle(weis1[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(weis2[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[PlayerCar[playerid][carslot][cId]] = 4;
	    }
	    if(Neonlichter[PlayerCar[playerid][carslot][cId]] == 5)
	    {
    		pinke1[PlayerCar[playerid][carslot][cId]] = CreateObject(18651,0,0,0,0,0,0);
			pinke2[PlayerCar[playerid][carslot][cId]] = CreateObject(18651,0,0,0,0,0,0);
			AttachObjectToVehicle(pinke1[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(pinke2[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[PlayerCar[playerid][carslot][cId]] = 5;
	    }
	    if(Neonlichter[PlayerCar[playerid][carslot][cId]] == 6)
	    {
	       	grun1[PlayerCar[playerid][carslot][cId]] = CreateObject(18649,0,0,0,0,0,0);
			grun2[PlayerCar[playerid][carslot][cId]] = CreateObject(18649,0,0,0,0,0,0);
			AttachObjectToVehicle(grun1[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(grun2[PlayerCar[playerid][carslot][cId]], PlayerCar[playerid][carslot][cId], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			Neonlichter[PlayerCar[playerid][carslot][cId]] = 6;
	    }
	    new rand = random(sizeof(PatenSpawns));
	    PlayerCar[playerid][carslot][cORotate] = PatenSpawns[rand][3];
		PlayerCar[playerid][carslot][cPos_x] = PatenSpawns[rand][0];
		PlayerCar[playerid][carslot][cPos_y] = PatenSpawns[rand][1];
		PlayerCar[playerid][carslot][cPos_z] = PatenSpawns[rand][2];
}
if(PlayerCar[playerid][carslot][cLock] == 1)
{
	SetVehicleLock(PlayerCar[playerid][carslot][cId],1);
}
if(PlayerCar[playerid][carslot][cLock] == 0)
{
	SetVehicleLock(PlayerCar[playerid][carslot][cId],0);
}
}
}

public UpdatePlayerCar(playerid)
{
if(IsPlayerConnected(playerid))
{
if(sStats[playerid][sAutos] != 0)
{
	for(new i = 0;i<sStats[playerid][sAutos];i++)
	{
		new string3[150];
		new playername3[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername3, sizeof(playername3));
		format(string3, sizeof(string3), "/Autos/%s%d.bscar", playername3,i);
		new File: hFile = fopen(string3, io_write);
		if (hFile)
		{
			new var[32];
			format(var, 32, "Id=%d\n",PlayerCar[playerid][i][cId]);fwrite(hFile, var);
			format(var, 32, "Model=%d\n",PlayerCar[playerid][i][cModel]);fwrite(hFile, var);
			format(var, 32, "C1=%d\n",PlayerCar[playerid][i][cC1]);fwrite(hFile, var);
			format(var, 32, "C2=%d\n",PlayerCar[playerid][i][cC2]);fwrite(hFile, var);
			format(var, 32, "Pj=%d\n",PlayerCar[playerid][i][cPj]);fwrite(hFile, var);
			format(var, 32, "Preis=%d\n",PlayerCar[playerid][i][cPreis]);fwrite(hFile, var);
			format(var, 32, "Pos_a=%.3f\n",PlayerCar[playerid][i][cPos_a]);fwrite(hFile, var);
			format(var, 32, "Pos_x=%.3f\n",PlayerCar[playerid][i][cPos_x]);fwrite(hFile, var);
			format(var, 32, "Pos_y=%.3f\n",PlayerCar[playerid][i][cPos_y]);fwrite(hFile, var);
			format(var, 32, "Pos_z=%.3f\n",PlayerCar[playerid][i][cPos_z]);fwrite(hFile, var);
			format(var, 32, "Mod1=%d\n",PlayerCar[playerid][i][cMod1]);fwrite(hFile, var);
			format(var, 32, "Mod2=%d\n",PlayerCar[playerid][i][cMod2]);fwrite(hFile, var);
			format(var, 32, "Mod3=%d\n",PlayerCar[playerid][i][cMod3]);fwrite(hFile, var);
			format(var, 32, "Mod4=%d\n",PlayerCar[playerid][i][cMod4]);fwrite(hFile, var);
			format(var, 32, "Mod5=%d\n",PlayerCar[playerid][i][cMod5]);fwrite(hFile, var);
			format(var, 32, "Mod6=%d\n",PlayerCar[playerid][i][cMod6]);fwrite(hFile, var);
			format(var, 32, "Mod7=%d\n",PlayerCar[playerid][i][cMod7]);fwrite(hFile, var);
			format(var, 32, "Mod8=%d\n",PlayerCar[playerid][i][cMod8]);fwrite(hFile, var);
			format(var, 32, "Mod9=%d\n",PlayerCar[playerid][i][cMod9]);fwrite(hFile, var);
			format(var, 32, "Mod10=%d\n",PlayerCar[playerid][i][cMod10]);fwrite(hFile, var);
			format(var, 32, "Mod11=%d\n",PlayerCar[playerid][i][cMod11]);fwrite(hFile, var);
			format(var, 32, "Mod12=%d\n",PlayerCar[playerid][i][cMod12]);fwrite(hFile, var);
			format(var, 32, "Mod13=%d\n",PlayerCar[playerid][i][cMod13]);fwrite(hFile, var);
			format(var, 32, "Mod14=%d\n",PlayerCar[playerid][i][cMod14]);fwrite(hFile, var);
			format(var, 32, "Mod15=%d\n",PlayerCar[playerid][i][cMod15]);fwrite(hFile, var);
			format(var, 32, "Mod16=%d\n",PlayerCar[playerid][i][cMod16]);fwrite(hFile, var);
			format(var, 32, "Mod17=%d\n",PlayerCar[playerid][i][cMod17]);fwrite(hFile, var);
			format(var, 32, "Lock=%d\n",PlayerCar[playerid][i][cLock]);fwrite(hFile, var);
			format(var, 32, "Gesperrt=%d\n",PlayerCar[playerid][i][cGesperrt]);fwrite(hFile, var);
			format(var, 32, "OPos_x=%.3f\n",PlayerCar[playerid][i][cOPos_x]);fwrite(hFile, var);
			format(var, 32, "OPos_y=%.3f\n",PlayerCar[playerid][i][cOPos_y]);fwrite(hFile, var);
			format(var, 32, "OPos_z=%.3f\n",PlayerCar[playerid][i][cOPos_z]);fwrite(hFile, var);
			format(var, 32, "ORotate=%.3f\n",PlayerCar[playerid][i][cORotate]);fwrite(hFile, var);
			format(var, 32, "Neon=%d\n",PlayerCar[playerid][i][cNeon]);fwrite(hFile, var);
			format(var, 32, "Tuev=%d\n",PlayerCar[playerid][i][cTuev]);fwrite(hFile, var);
			fclose(hFile);
		}
	}
}
}
}

public LoadPlayerCar(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(sStats[playerid][sAutos] != 0)
		{
			for(new i = 0;i<sStats[playerid][sAutos];i++)
			{
			    new string2[64];
				new playername2[MAX_PLAYER_NAME];
			    GetPlayerName(playerid, playername2, sizeof(playername2));
				format(string2, sizeof(string2), "/Autos/%s%d.bscar", playername2,i);
				new File: UserFile = fopen(string2, io_read);
				if ( UserFile )
				{
				    new key[ 256 ] , val[ 256 ];
				    new Data[ 256 ];
				    while ( fread( UserFile , Data , sizeof( Data ) ) )
					{
						key = ini_GetKey( Data );
						if( strcmp( key , "Model" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cModel] = strval( val ); }
						if( strcmp( key , "C1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cC1] = strval( val ); }
						if( strcmp( key , "C2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cC2] = strval( val ); }
						if( strcmp( key , "Pj" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cPj] = strval( val ); }
						if( strcmp( key , "Preis" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cPreis] = strval( val ); }
						if( strcmp( key , "Pos_a" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cPos_a] = floatstr( val ); }
						if( strcmp( key , "Pos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cPos_x] = floatstr( val ); }
						if( strcmp( key , "Pos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cPos_y] = floatstr( val ); }
						if( strcmp( key , "Pos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cPos_z] = floatstr( val ); }
						if( strcmp( key , "Mod1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod1] = strval( val ); }
						if( strcmp( key , "Mod2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod2] = strval( val ); }
						if( strcmp( key , "Mod3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod3] = strval( val ); }
						if( strcmp( key , "Mod4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod4] = strval( val ); }
						if( strcmp( key , "Mod5" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod5] = strval( val ); }
						if( strcmp( key , "Mod6" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod6] = strval( val ); }
						if( strcmp( key , "Mod7" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod7] = strval( val ); }
						if( strcmp( key , "Mod8" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod8] = strval( val ); }
						if( strcmp( key , "Mod9" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod9] = strval( val ); }
						if( strcmp( key , "Mod10" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod10] = strval( val ); }
						if( strcmp( key , "Mod11" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod11] = strval( val ); }
						if( strcmp( key , "Mod12" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod12] = strval( val ); }
						if( strcmp( key , "Mod13" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod13] = strval( val ); }
						if( strcmp( key , "Mod14" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod14] = strval( val ); }
						if( strcmp( key , "Mod15" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod15] = strval( val ); }
						if( strcmp( key , "Mod16" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod16] = strval( val ); }
						if( strcmp( key , "Mod17" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cMod17] = strval( val ); }
						if( strcmp( key , "Lock" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cLock] = strval( val ); }
						if( strcmp( key , "Gesperrt" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cGesperrt] = strval( val ); }
						if( strcmp( key , "OPos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cOPos_x] = floatstr( val ); }
						if( strcmp( key , "OPos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cOPos_y] = floatstr( val ); }
						if( strcmp( key , "OPos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cOPos_z] = floatstr( val ); }
						if( strcmp( key , "ORotate" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cORotate] = floatstr( val ); }
						if( strcmp( key , "Neon" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cNeon] = strval( val ); }
						if( strcmp( key , "Tuev" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerCar[playerid][i][cTuev] = strval( val ); }

					}
					fclose(UserFile);//close the file after everything has been read in the while
					SpawnCar(playerid,i);
				}
			}
		}
	}
}

//SpawnPlayer
forward SpawnPlayerr(playerid);
public SpawnPlayerr(playerid)
{
    SpawnPlayer(playerid);
}

//StartClown
forward StartClown(playerid);
public StartClown(playerid)
{
	PlayAudioStreamForPlayer(playerid, "http://nemesus.de/Sounds/BaysideIntro.wav"); //Muss erneuert werden, bitte ersetzen
	ClearChat(playerid);
}

//AutoPate Autoabholung
forward AutoFertig(playerid);
public AutoFertig(playerid)
{
    SetPlayerPosEx(playerid,-1635.2585,57.7475,3.5547);
	SetPlayerCameraPos(playerid,-1678.7289,-30.1850,20.1822);
	SetPlayerCameraLookAt(playerid,-1678.5647,-29.4447,20.1822,1);
	MoveObject(magnetob,-1701.8076, 37.7221, 39.9300,2.0);
	MoveObject(magnetob2,-1700.9790, 37.2528, 26.4000,2.0);
	MoveObject(magnetob3,-1702.8674, 38.6440, 26.8000,2.0);
	SetTimerEx("AutoFertig2",6037,false,"i",playerid);
	SetPVarInt(playerid,"NoMotor",0);
	return 1;
}

//AutoPate Autoabholung 2
forward AutoFertig2(playerid);
public AutoFertig2(playerid)
{
    MoveObject(magnetob4,-1673.8000, 22.4000, 0.1171,3.0);
	MoveObject(magnetob,-1685.3961, 30.5544, 39.9300,2.0);
	MoveObject(magnetob2,-1684.6924, 30.1329, 26.4000,2.0);
	MoveObject(magnetob3,-1687.8177, 31.8694, 26.8000,2.0);
	SetTimerEx("AutoFertig3",5099,false,"i",playerid);
	return 1;
}

//AutoPate Autoabholung 3
forward AutoFertig3(playerid);
public AutoFertig3(playerid)
{
	MoveObject(magnetob,-1690.3961, 30.5544, 31.9300,2.0);
	MoveObject(magnetob2,-1686.9200, 30.5258, 17.6473,2.0);
	MoveObject(magnetob3,-1687.8177, 31.8694, 17.5925,2.0);
	SetTimerEx("AutoFertig4",5099,false,"i",playerid);
	return 1;
}

//AutoPate Autoabholung 3
forward AutoFertig4(playerid);
public AutoFertig4(playerid)
{
	new rand = random(sizeof(PatenSpawns));
	new carslotidd = GetPVarInt(playerid, "Carslotid");
    PlayerCar[playerid][carslotidd][cORotate] = PatenSpawns[rand][3];
	PlayerCar[playerid][carslotidd][cPos_x] = PatenSpawns[rand][0];
	PlayerCar[playerid][carslotidd][cPos_y] = PatenSpawns[rand][1];
	PlayerCar[playerid][carslotidd][cPos_z] = PatenSpawns[rand][2];
	PlayerCar[playerid][carslotidd][cNeon] = 0;
	PlayerCar[playerid][carslotidd][cTuev] = 0;
	Neonlichter[PlayerCar[playerid][carslotidd][cId]] = 0;
	UpdatePlayerCar(playerid);
	ClearChat(playerid);
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	SetPlayerPosEx(playerid,-1601.9358,61.9867,7.9902);
	SetPlayerFacingAngle(playerid,135.1236);
	SetCameraBehindPlayer(playerid);
	SendClientMessage(playerid,Weiß,"Dein Fahrzeug wurde erfolgreich transportiert und ist jetzt einsatzfähig!");
	SendClientMessage(playerid,Gelb2,"/autohelp um die wichtigsten Informationen deines neuen Fahrzeuges zu erhalten!");
	SendClientMessage(playerid,Gruen,"Info: Du benötigst für dieses Fahrzeug eine KFZ-Zulassung besorge dir eine bei der KFZ-Zulassungstelle!");
	TogglePlayerControllable(playerid, true);
	TextDrawShowForPlayer(playerid,Ad1);
	TextDrawShowForPlayer(playerid,Ad2);
	DestroyVehicle(PlayerCar[playerid][GetPVarInt(playerid, "Carslotid")][cId]);
 	SpawnCar(playerid,GetPVarInt(playerid, "Carslotid"));
	SetPVarInt(playerid, "Carslot", 0);
	SetPVarInt(playerid, "Carslotid", 0);
	SetPVarInt(playerid, "AutoPate", 0);
	SaveSpieler(playerid);
	CreateMagnet();
	return 1;
}

//CreateMagnet
forward CreateMagnet();
public CreateMagnet()
{
    MoveObject(magnetob4,-1673.80, 22.40, 5.80,4.0);
    MoveObject(magnetob,-1697.82, 44.71, 97.93,5.0);
    MoveObject(magnetob2,-1697.65, 44.24, 26.40,5.0);
    MoveObject(magnetob3,-1696.68, 44.30, 26.80,5.0);
    SetTimer("CreateMagnet2",8123,false);
    return 1;
}

forward CreateMagnet2();
public CreateMagnet2()
{
    MoveObject(magnetob,-1697.82, 44.71, 37.93,2.0);
    return 1;
}

//Quest Bots kicken
forward KickQuestBots();
public KickQuestBots()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(!strcmp(GetName(i),"Fernandez",true))
		{
			Kick(i);
 		}
	 	if(!strcmp(GetName(i),"Rainer",true))
		{
			Kick(i);
  		}
	}
	return 1;
}

//Für Airbrake
forward GetPlayerSpeed (playerid, get3d);
public GetPlayerSpeed (playerid, get3d)
{
	new Float: x, Float: y, Float: z;
	if (IsPlayerInAnyVehicle (playerid))
		GetVehicleVelocity (GetPlayerVehicleID (playerid), x, y, z);
	else
		GetPlayerVelocity (playerid, x, y, z);

	return aSpeed(x, y, z, 100.0, get3d);
}

//Kameraa für Autofabrik
forward Kameraa(playerid);
public Kameraa(playerid)
{
	SetPlayerPosEx(playerid,-1644.9174,54.9090,3.5547);
	SetPlayerCameraPos(playerid,-1649.5668,16.7610,18.5593);
	SetPlayerCameraLookAt(playerid,-1649.3870,17.5114,18.0593,1);
}

//Events öffnen
//Autoscooter
forward AutoScooterAnsage();
public AutoScooterAnsage()
{
    SetTimer("OpenAutoscooter",300216,false); // 5 Minuten
    //Autoscooterprepare = 1;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(sStats[i][sEingeloggt] == 1 && sStats[i][sTutorial] == 1)
	    {
			SendClientMessage(i,Weiß,"{FFFFFF}------------------------------------------- {ff8c00}NEWS {FFFFFF}-------------------------------------------------");
			SendClientMessage(i,Gelb2,"In 5 Minuten beginnt ein neue Runde Autoscooter,");
			SendClientMessage(i,Gelb2,"Begibt euch zur Autoscooter Arena um mitzumachen (/navi).");
			SendClientMessage(i,Weiß,"{FFFFFF}------------------------------------------- {ff8c00}ENDE {FFFFFF}---------------------------------------------------");
	 	}
	}
}

//Paintball
forward PreParePaintball();
public PreParePaintball()
{
    SetTimer("OpenPaintball",300632,false); // 5 Minuten
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(sStats[i][sEingeloggt] == 1 && sStats[i][sTutorial] == 1)
	    {
			SendClientMessage(i,Weiß,"{FFFFFF}------------------------------------------- {ff8c00}NEWS {FFFFFF}-------------------------------------------------");
			SendClientMessage(i,Gelb2,"In 5 Minuten beginnt ein neues Paintballmatch,");
			SendClientMessage(i,Gelb2,"Begibt euch zur Paintball Arena um mitzumachen (/navi).");
			SendClientMessage(i,Weiß,"{FFFFFF}------------------------------------------- {ff8c00}ENDE {FFFFFF}---------------------------------------------------");
  		}
	}
	//Paintballprepare = 1;
	new map = random(3);
	switch(map)
	{
	    case 0:
	    {
			PaintballMap = 1;
	    }
	    case 1:
	    {
	        PaintballMap = 2;
	    }
	    case 2:
	    {
	        PaintballMap = 3;
	    }
	}
}

//Tüv
forward Tuev1(playerid);
public Tuev1(playerid)
{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/motoryes.wav");
	ClearChat(playerid);
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Motor ~y~Pruefung",3000, 5);
	SetTimerEx("Tuev2",6833,false,"i",playerid);
}

forward Tuev2(playerid);
public Tuev2(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	SetPlayerCameraPos(playerid,-1514.7457,2631.2041,58.9674);
	SetPlayerCameraLookAt(playerid,-1515.5724,2631.2354,58.9374,1);
	Flasher[vehicleid] = 1;
	FlasherState[vehicleid] = 0;
	FlashTimer = SetTimer("FlasherFunc",251,1);
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Licht ~y~Pruefung",3000, 5);
	SetTimerEx("Tuev3",10177,false,"i",playerid);
}

forward Tuev3(playerid);
public Tuev3(playerid)
{
	SetPlayerCameraPos(playerid,-1540.3800,2631.7561,56.8326);
	SetPlayerCameraLookAt(playerid,-1540.1633,2631.7534,56.8326,1);
    new engine,lights,alarm,doors,bonnet,boot,objective;
	Flasher[GetPlayerVehicleID(playerid)] = 0;
	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 0, alarm, doors, bonnet, boot, objective);
	FlasherState[GetPlayerVehicleID(playerid)] = 0;
	KillTimer(FlashTimer);
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/bremsen.wav");
	ClearChat(playerid);
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Bremsen ~y~Pruefung",3000, 5);
	SetTimerEx("Tuev4",8171,false,"i",playerid);
}

forward Tuev4(playerid);
public Tuev4(playerid)
{
    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~w~Allgemeiner ~y~Check",3000, 5);
	SetTimerEx("Tuev5",7177,false,"i",playerid);
}

forward Tuev5(playerid);
public Tuev5(playerid)
{
	new string[128];
	ClearChat(playerid);
	TogglePlayerControllable(playerid, true);
	SetCameraBehindPlayer(playerid);
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	Tuev = 0;
	SetPVarInt(playerid,"InTuev",0);
	new vehicleid = GetPlayerVehicleID(playerid);
 	new Float:vhealth;
	GetVehicleHealth(vehicleid,vhealth);
	format(string, sizeof(string), "%s",GetName(playerid));
	SetVehicleNumberPlate(vehicleid,string);
 	if(vhealth>250.0)
 	{
 	    SendClientMessage(playerid,Gelb,"KFZ-Zulassungstelle:");
 	    SendClientMessage(playerid,Gruen,"Dein Fahrzeug war in einem einwandfreien Zustand!");
 	    SendClientMessage(playerid,Weiß,"Hier deine KFZ-Zulassung.");
 	    SendClientMessage(playerid,Weiß,"Ihr Kennzeichen wird in spätestens 12h eintreffen, solange gebe ich ihnen ein vorrübergehendes Kennzeichen.");
      	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Pass gut auf dein Fahrzeug auf!.");
      	Kennzeichen[vehicleid] = 1;
 		if(vehicleid == wohnwagen[playerid])
      	{
			format(Query, sizeof(Query), "UPDATE `wohnwagen` SET `tuev` = '1' WHERE `inhaber` = '%s'", GetName(playerid));
			mysql_query(Query);
			wohnwagentuev[playerid] = 1;
      	}
      	else
      	{
      		for(new i=0;i<sStats[playerid][sAutos];i++)
	  		{
				if(vehicleid == PlayerCar[playerid][i][cId])
				{
					PlayerCar[playerid][i][cTuev] = 1;
				}
			}
      	}
		ShowSpeedometer(playerid);
		UpdateSpeedometer(playerid);
		SetRadioStation(GetPlayerVehicleID(playerid),0);
 	    return 1;
 	}
 	else
 	{
  		SendClientMessage(playerid,Gelb,"KFZ-Zulassungstelle:");
 	    SendClientMessage(playerid,COLOR_LIGHTRED,"Dein Fahrzeug war in einem miserablen Zustand!");
 	    SendClientMessage(playerid,Weiß,"Hier deine KFZ-Zulassung (obwohl ich alle meine Augen dafür zudrücken musste!).");
 	    SendClientMessage(playerid,Weiß,"Ihr Kennzeichen wird in spätestens 12h eintreffen, solange gebe ich ihnen ein vorrübergehendes Kennzeichen.");
      	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Pass gut auf dein Fahrzeug auf!.");
      	Kennzeichen[vehicleid] = 1;
 		if(vehicleid == wohnwagen[playerid])
      	{
			format(Query, sizeof(Query), "UPDATE `wohnwagen` SET `tuev` = '1' WHERE `inhaber` = '%s'", GetName(playerid));
			mysql_query(Query);
			wohnwagentuev[playerid] = 1;
      	}
      	else
      	{
      		for(new i=0;i<sStats[playerid][sAutos];i++)
	  		{
				if(vehicleid == PlayerCar[playerid][i][cId])
				{
					PlayerCar[playerid][i][cTuev] = 1;
				}
			}
      	}
		ShowSpeedometer(playerid);
		UpdateSpeedometer(playerid);
		VehicleStarted[GetPlayerVehicleID(playerid)] = 1;
		SetVehicleParamsEx(GetPlayerVehicleID(playerid),VEHICLE_PARAMS_ON,0,0,0,0,0,0);
		SetRadioStation(GetPlayerVehicleID(playerid),0);
   	}
  	UpdatePlayerCar(playerid);
  	return 1;
}

forward FlasherFunc();
public FlasherFunc() {
	new engine,lights,alarm,doors,bonnet,boot,objective;
	for (new p=0; p<MAX_VEHICLES; p++)
	{
		if (Flasher[p] == 1)
		{
			if (FlasherState[p] == 1)
			{
				GetVehicleParamsEx(p, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(p, engine, 0, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(p, engine, 1, alarm, doors, bonnet, boot, objective);
				FlasherState[p] = 0;
			}
			else
			{
				GetVehicleParamsEx(p, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(p, engine, 0, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(p, engine, 4, alarm, doors, bonnet, boot, objective);
				FlasherState[p] = 1;
			}
		}
	}
	return 1;
}

//Slotmachine
forward LoadSlotmachine();
public LoadSlotmachine()
{
   	new Float:YY = 168.0;

	Box = CreateBox(194.0,YY-20,3*64.0 + 3*20,84,0x00000077);

	// Cherries (x25)
	Digit1[0] = CreateSprite(214.0,YY,"LD_SLOT:cherry",64,64);
	Digit2[0] = CreateSprite(288.0,YY,"LD_SLOT:cherry",64,64);
	Digit3[0] = CreateSprite(362.0,YY,"LD_SLOT:cherry",64,64);

	// grapes (x100)
	Digit1[1] = CreateSprite(214.0,YY,"LD_SLOT:grapes",64,64);
	Digit2[1] = CreateSprite(288.0,YY,"LD_SLOT:grapes",64,64);
	Digit3[1] = CreateSprite(362.0,YY,"LD_SLOT:grapes",64,64);

	// 69's (x250)
	Digit1[2] = CreateSprite(214.0,YY,"LD_SLOT:r_69",64,64);
	Digit2[2] = CreateSprite(288.0,YY,"LD_SLOT:r_69",64,64);
	Digit3[2] = CreateSprite(362.0,YY,"LD_SLOT:r_69",64,64);

	// bells (x500)
	Digit1[3] = CreateSprite(214.0,YY,"LD_SLOT:bell",64,64);
	Digit2[3] = CreateSprite(288.0,YY,"LD_SLOT:bell",64,64);
	Digit3[3] = CreateSprite(362.0,YY,"LD_SLOT:bell",64,64);

	// Bars [1 bar] (x1000)
	Digit1[4] = CreateSprite(214.0,YY,"LD_SLOT:bar1_o",64,64);
	Digit2[4] = CreateSprite(288.0,YY,"LD_SLOT:bar1_o",64,64);
	Digit3[4] = CreateSprite(362.0,YY,"LD_SLOT:bar1_o",64,64);

	// Bars [2 bar] (x2000)
	Digit1[5] = CreateSprite(214.0,YY,"LD_SLOT:bar2_o",64,64);
	Digit2[5] = CreateSprite(288.0,YY,"LD_SLOT:bar2_o",64,64);
	Digit3[5] = CreateSprite(362.0,YY,"LD_SLOT:bar2_o",64,64);


	ReadyText=TextDrawCreate(320.0,YY+1.4,"~w~Bereit zum spielen?.~n~~b~ ~k~~PED_SPRINT~ ~w~- ~g~spielen~n~~b~~k~~VEHICLE_ENTER_EXIT~ ~w~- ~r~Beenden~n~~b~~k~~PED_JUMPING~ ~w~- ~y~Einsatz erhoehen");
	TextDrawUseBox(ReadyText,1);
	TextDrawFont(ReadyText,2);
	TextDrawSetShadow(ReadyText,0);
	TextDrawSetOutline(ReadyText,1);
	TextDrawLetterSize(ReadyText,0.3,1.23);
	TextDrawAlignment(ReadyText,2);
	TextDrawBoxColor(ReadyText,0x00000077);
	TextDrawTextSize(ReadyText,350,210);

	VerText=TextDrawCreate(194.0,YY-21,"~g~$$$ ~p~$lot Machine ~g~$$$");
	TextDrawFont(VerText,1);
	TextDrawSetShadow(VerText,0);
	TextDrawSetOutline(VerText,1);
	TextDrawLetterSize(VerText,0.16,0.65);
}

//Feuerwerk
forward LaunchFirework(id);
public LaunchFirework(id)
{
        //smoke 18715
        FireworkObj[id][Object0] = CreateObject(18716,Firework[id][fwX],Firework[id][fwY],Firework[id][fwZ],0.0,0.0,0.0,800);
        MoveObject(FireworkObj[id][Object0],Firework[id][fwX],Firework[id][fwY],Firework[id][fwZ] + Firework[id][fwA],12);
        Firework[id][fwLoop]--;
}

//Drogensystem
forward DrugsOff(playerid);
public DrugsOff(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        SetCameraBehindPlayer(playerid);
		SetPlayerDrunkLevel(playerid, 0);
		SetPlayerWeather(playerid, 2);
		high[playerid] = 0;
    }
    return 0;
}

//ShowPlayerStats
forward ShowPlayerStats(playerid);
public ShowPlayerStats(playerid)
{
	new string1[470];
	new string2[128];

	//Payday
	new payday = 60 - sStats[playerid][sPayPoints];

	//level
	new nxtlevel = sStats[playerid][sLevel]+1;
	new expamount = nxtlevel*levelexp;

	//Premium
	new ptext[22];
	if(sStats[playerid][sPremium] == 1) { ptext = "{663300}Bronze"; }
	else if(sStats[playerid][sPremium] == 2) { ptext = "{999999}Silber"; }
	else if(sStats[playerid][sPremium] == 3) { ptext = "{FFcc00}Gold"; }
	else if(sStats[playerid][sPremium] == 0) { ptext = "{FFFFFF}Nein"; }

	//Geschlecht
	new gtext[15];
	if(sStats[playerid][sGeschlecht] == 1) { gtext = "Männlich"; }
	else if(sStats[playerid][sGeschlecht] == 2) { gtext = "Weiblich"; }

	//Stats Befehl
    format(string1, sizeof(string1),
	"{009BFF}[Allgemein]{FFFFFF}\n\nLevel: %d | Alter: %d | Geschlecht: %s | Spielstunden: %d \nErfahrungspunkte: %d/%d{009BFF}\n\n[Beruf]{FFFFFF}\n\nJob: %s | Fraktion: %s{009BFF}\n\n[Finanzen]{FFFFFF}\n\nBargeld: %d | Konto: %d\n\n{009BFF}[Premium]\n\n{FFFFFF}%s\n\n{009BFF}[Sonstiges]{FFFFFF}\n\nDriftzeit: %d Minuten | Geworben von: %s | Zahltag in: %d Minuten | Aktuelle Wanteds: %d"
	,sStats[playerid][sLevel],sStats[playerid][sAlter],gtext,sStats[playerid][sSpielstunden],sStats[playerid][sErf],expamount,GetPlayerJob(playerid),GetPlayerFraktion(playerid),GetPlayerEuros(playerid),sStats[playerid][sKonto],ptext,sStats[playerid][sDriftZeit],sStats[playerid][sGeworbenVon],payday,sStats[playerid][sWanteds]);
    format(string2, sizeof(string2), "{009BFF}Statistik von {FFFFFF}%s", GetName(playerid));
	ShowPlayerDialog(playerid, STATSS, DIALOG_STYLE_MSGBOX, string2, string1, "Abbrechen", "");
	return 1;
}

//Leichnahm System
forward DeleteTotenkopf(playerid);
public DeleteTotenkopf(playerid)
{
	DestroyDynamicPickup(TotenKopf[playerid]);
	DestroyDynamic3DTextLabel(TotenKopfLabel[playerid]);
	KillTimer(Totentimer[playerid]);
}

forward DrugsOff2(playerid);
public DrugsOff2(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        SetCameraBehindPlayer(playerid);
		SetPlayerDrunkLevel(playerid, 0);
		SetPlayerWeather(playerid, 2);
		high[playerid] = 0;
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid);
    }
    return 0;
}

//Medic Variabele
forward Sanniaus(playerid);
public Sanniaus(playerid)
{
    SetPVarInt(playerid,"saus",0);
}

//BUYWP
forward BUYWPP(playerid);
public BUYWPP(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,15.0, -1862.0784,-145.2836,11.8984))
	{
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	 	GivePlayerEuro(playerid,-6000);
	  	ClearChat(playerid);
	   	transporterwaffen = 1;
	    SendClientMessage(playerid,Weiß,"Du hast dir erfolgreich das Gang Waffenupgrade Paket gekauft, bringe dieses schnellstens zu deiner Gangbase!");
	    SendClientMessage(playerid,Gelb2,"Und nutze /wpablegen um das Paket einzulagern!");
	    return 1;
 	}
	else
	{
	    transporterwaffen = 0;
	    SendClientMessage(playerid,Rot,"Du warst nicht in der Nähe vom Ausgabepunkt, Übergabe fehlgeschlagen!");
	    return 1;
	}
}

//ShowCheckpoint
forward ShowCheckpoint(playerid);
public ShowCheckpoint(playerid)
{
	QuestCP[playerid] = 701;
	SetPlayerCheckpoint(playerid, -2573.4722,2488.2373,21.3673, 3.0);
}

//Fahrradverleih
forward Fahrradverleih(playerid);
public Fahrradverleih(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(vehicleid == fahrrad[playerid])
	    {
	        RemovePlayerFromVehicle(playerid);
	    }
	}
	    SendClientMessage(playerid,Gelb,"Der Fahrradverleih hat sich das geliehene Fahrrad zurück geholt! (30 Minuten sind abgelaufen!).");
		DestroyVehicle(fahrrad[playerid]);
		KillTimer(fatimer[playerid]);
	 	DeletePVar(playerid, "Fahrrad");
	 	DeletePVar(playerid, "Fahrradstatus");
}

//Pokersystem
forward OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid);
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
        if(Start3[playerid] == PlayerText:INVALID_TEXT_DRAW) return 1;
        if(DEALSTEXT == playertextid)
        {
                if(PP_Info[playerid][click_dealbutton] == WAIT_CLICKDEALTEXT) return 1;
                if(PP_Info[playerid][click_dealbutton] == FIRST_CLICKDEALTEXT)
                {
                        if(PP_Info[playerid][Credit] < 1) return SendClientMessage(playerid, -1, "Kein Geld mehr verfügbar, klick auf Addcoin um welches hinzuzufügen.");
                        if(PP_Info[playerid][Credit] < PP_Info[playerid][Bett])
                        {
                                PP_Info[playerid][Bett] = PP_Info[playerid][Credit];
                        }
                        PP_Info[playerid][Credit] -= PP_Info[playerid][Bett];
                        PP_Info[playerid][click_dealbutton] = WAIT_CLICKDEALTEXT;
                        PlayerTextDrawHide(playerid, ADDCOINSTEXT);
                        PlayerTextDrawHide(playerid, BETTEXT);
                        PlayerPlaySound(playerid, 43000, 0.00, 0.00, 0.00);
                        RandomCard(PP_Info[playerid][fivecards_hand], 10);
                        WinnText(playerid);
                        BetCredit(playerid);
                        TextDrawDizajn(playerid, 0);
                } else {
                        PP_Info[playerid][click_dealbutton] = FIRST_CLICKDEALTEXT;
                        PlayerTextDrawShow(playerid, ADDCOINSTEXT);
                        PlayerTextDrawShow(playerid, BETTEXT);
                        for(new i; i < 5; i++)
                        {
                                if(PP_Info[playerid][holdstate][i] == HOLDON)
                                {
                                        PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, " ");
                                        PP_Info[playerid][holdstate][i] = HOLDOFF;
                                } else {
                                        Swap(PP_Info[playerid][fivecards_hand][i], PP_Info[playerid][fivecards_hand][i + 5]);
                                        PlayerTextDrawSetString(playerid, CARDSTEXT + PlayerText:i, LD_POKE[PP_Info[playerid][fivecards_hand][i]]);
                                }
                        }
                        new
                                first,
                                second,
                                rank = get_rank(PP_Info[playerid][fivecards_hand]),
                                win = get_win(rank);
                        rankname(rank, first, second);
                        if(win > ONE_PAIR)
                        {
                                PP_Info[playerid][Credit] += (pot[win] * PP_Info[playerid][Bett]);
                                switch(win)
                                {
                                        case STRAIGHT, FLUSH, STRAIGHT_FLUSH, FULL_HOUSE, ROYAL_FLUSH:
                                        {
                                                for(new i = 0; i < 5; i++)
                                                {
                                                        PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "LD_POKE:holdmid");
                                                }
                                        }
                                        case TWO_PAIR:
                                        {
                                                for(new i = 0; i < 5; i++)
                                                {
                                                        if(first == Card_Value[PP_Info[playerid][fivecards_hand][i]] ||
                                                                second == Card_Value[PP_Info[playerid][fivecards_hand][i]])
                                                        {
                                                                PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "LD_POKE:holdmid");
                                                        }
                                                }
                                        }
                                        case THREE_OF_A_KIND, FOUR_OF_A_KIND:
                                        {
                                                for(new i = 0; i < 5; i++)
                                                {
                                                        if(first == Card_Value[PP_Info[playerid][fivecards_hand][i]])
                                                        {
                                                                PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "LD_POKE:holdmid");
                                                        }
                                                }
                                        }
                                }
                                PlayerPlaySound(playerid, 5448, 0.00, 0.00, 0.00);
                                WinnText(playerid, win, rank);
                                BetCredit(playerid);
                        } else {
                                for(new i = 0; i < 5; i++)
                                {
                                        PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "_");
                                }
                        }
                }
        } else {
                if(PP_Info[playerid][click_dealbutton] == SECOND_CLICKDEALTEXT)
                {
                        for(new i = 0; i < 5; i++)
                        {
                                if(CARDSTEXT + PlayerText:i == playertextid)
                                {
                                        PP_Info[playerid][holdstate][i] = HOLDOFF - PP_Info[playerid][holdstate][i];
                                        if(PP_Info[playerid][holdstate][i])
                                                PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "_");
                                        else
                                                PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "LD_POKE:holdon");
                                        PlayerPlaySound(playerid, 21000, 0.00, 0.00, 0.00);
                                        return 1;
                                }
                        }
                }
                else if(ADDCOINSTEXT == playertextid)
                {
                        if(GetPlayerMoney(playerid) < 100)
                        {
                                SendClientMessage(playerid, Rot, "Du hast nicht genügend Geld dabei.");
                        } else {
                                GivePlayerEuro(playerid, -100);
                                PP_Info[playerid][Credit] += 100;
                                BetCredit(playerid);
                                PlayerPlaySound(playerid, 4203, 0.00, 0.00, 0.00);
                        }
                        return 1;
                }
                else if(BETTEXT == playertextid)
                {
                        if(PP_Info[playerid][Bett] < 100)
                                PP_Info[playerid][Bett]++;
                        else
                                PP_Info[playerid][Bett] = MIN_BET;

                        BetCredit(playerid);
                        WinnText(playerid);
                        PlayerPlaySound(playerid, 4202, 0.00, 0.00, 0.00);
                        return 1;
                }
        }

        if(CHANGEBACKGROUND == playertextid)
        {
                PP_Info[playerid][LastBackGround]++;
                if(PP_Info[playerid][LastBackGround] == sizeof BackGroundData)
                        PP_Info[playerid][LastBackGround] = 0;
                PlayerTextDrawSetString(playerid, BACKGROUND, BackGroundData[PP_Info[playerid][LastBackGround]]);
                return 1;
        }

        if(EXITPOKER == playertextid)
        {
                ExitPoker(playerid);
                return 1;
        }
        return 1;
}

public TextDrawDizajn(playerid, index)
{
        if(index == 5)
        {
                new
                        first,
                        second,
                        rank = get_rank(PP_Info[playerid][fivecards_hand]),
                        win = get_win(rank);
                rankname(rank, first, second);
                SetTimerEx("TextDrawDizajn2", 200, false, "iiiii", playerid, win, rank, first, second);
        } else {
                PlayerPlaySound(playerid, 20800, 0.00, 0.00, 0.00);
                PlayerTextDrawSetString(playerid, CARDSTEXT + PlayerText:index, "LD_POKE:cdback");
                PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:index, " ");
                SetTimerEx("TextDrawDizajn", 100, false, "ii", playerid, ++index);
        }
        return 1;
}

public TextDrawDizajn2(playerid, win, rank, first, second)
{
        for(new i; i < 5; i++)
        {
                PlayerTextDrawSetString(playerid, CARDSTEXT + PlayerText:i, LD_POKE[PP_Info[playerid][fivecards_hand][i]]);
        }
        switch(win)
        {
                case STRAIGHT, FLUSH, STRAIGHT_FLUSH, FULL_HOUSE, ROYAL_FLUSH:
                {
                        for(new i = 0; i < 5; i++)
                        {
                                PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "LD_POKE:holdon");
                                PP_Info[playerid][holdstate][i] = HOLDON;
                        }
                }
                case ONE_PAIR:
                {
                        for(new i = 0; i < 5; i++)
                        {
                                if(first == Card_Value[PP_Info[playerid][fivecards_hand][i]])
                                {
                                        PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "LD_POKE:holdon");
                                        PP_Info[playerid][holdstate][i] = HOLDON;
                                }
                        }
                }
                case TWO_PAIR:
                {
                        for(new i = 0; i < 5; i++)
                        {
                                if(first == Card_Value[PP_Info[playerid][fivecards_hand][i]] ||
                                        second == Card_Value[PP_Info[playerid][fivecards_hand][i]])
                                {
                                        PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "LD_POKE:holdon");
                                        PP_Info[playerid][holdstate][i] = HOLDON;
                                }
                        }
                }
                case THREE_OF_A_KIND, FOUR_OF_A_KIND:
                {
                        for(new i = 0; i < 5; i++)
                        {
                                if(first == Card_Value[PP_Info[playerid][fivecards_hand][i]])
                                {
                                        PlayerTextDrawSetString(playerid, HOLDSTEXT + PlayerText:i, "LD_POKE:holdon");
                                        PP_Info[playerid][holdstate][i] = HOLDON;
                                }
                        }
                }
        }
        PP_Info[playerid][click_dealbutton] = SECOND_CLICKDEALTEXT;
        WinnText(playerid, win, rank);
        return 1;
}

forward OnPlayerClickTextDraw(playerid, Text:clickedid);
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
        if(Start3[playerid] != PlayerText:INVALID_TEXT_DRAW && clickedid == Text:INVALID_TEXT_DRAW)
        {
                ExitPoker(playerid);
                return 1;
        }
        return 1;
}

forward Waffenanzeige(playerid,targetid);
public Waffenanzeige(playerid,targetid)
{
	if(IsPlayerConnected( playerid ) && IsPlayerConnected( targetid ))
	{
		new Float:px,Float:py,Float:pz;
		new Munition[12], Waffenname[12][50];
		new coordsstring[256];

		GetPlayerPos(targetid, px, py, pz);

		GetPlayerWeaponData(targetid,1,Waffe[0],Munition[0]); GetPlayerWeaponData(targetid,2,Waffe[1],Munition[1]);
		GetPlayerWeaponData(targetid,3,Waffe[2],Munition[2]); GetPlayerWeaponData(targetid,4,Waffe[3],Munition[3]);
		GetPlayerWeaponData(targetid,5,Waffe[4],Munition[4]); GetPlayerWeaponData(targetid,6,Waffe[5],Munition[5]);
		GetPlayerWeaponData(targetid,7,Waffe[6],Munition[6]); GetPlayerWeaponData(targetid,8,Waffe[7],Munition[7]);
		GetPlayerWeaponData(targetid,9,Waffe[8],Munition[8]); GetPlayerWeaponData(targetid,10,Waffe[9],Munition[9]);
		GetPlayerWeaponData(targetid,11,Waffe[10],Munition[10]); GetPlayerWeaponData(targetid,12,Waffe[11],Munition[11]);

		GetWeaponName(Waffe[0],Waffenname[0],50); GetWeaponName(Waffe[1],Waffenname[1],50); GetWeaponName(Waffe[2],Waffenname[2],50);
		GetWeaponName(Waffe[3],Waffenname[3],50); GetWeaponName(Waffe[4],Waffenname[4],50); GetWeaponName(Waffe[5],Waffenname[5],50);
		GetWeaponName(Waffe[6],Waffenname[6],50); GetWeaponName(Waffe[7],Waffenname[7],50); GetWeaponName(Waffe[8],Waffenname[8],50);
		GetWeaponName(Waffe[9],Waffenname[9],50); GetWeaponName(Waffe[10],Waffenname[10],50); GetWeaponName(Waffe[11],Waffenname[11],50);

		ClearChat(playerid);
		SendClientMessage(playerid, Weiß,"|======================================== Waffen ========================================|");
		format(coordsstring,sizeof(coordsstring),"Aktuelle Waffen : %s [0] %s [%d Schuss] %s [%d Schuss] %s [%d Schuss] %s [%d Schuss] %s [%d Schuss]",Waffenname[0],Waffenname[1],Munition[1],Waffenname[2],Munition[2],Waffenname[3],Munition[3],Waffenname[4],Munition[4],Waffenname[5],Munition[5]);
		SendClientMessage(playerid,Gelb,coordsstring);
		format(coordsstring,sizeof(coordsstring),"Aktuelle Waffen : %s [%d Schuss] %s [%d Schuss] %s [%d Schuss] %s [0] %s [0] %s [0]",Waffenname[6],Munition[6],Waffenname[7],Munition[7],Waffenname[8],Munition[8],Waffenname[9],Waffenname[10],Waffenname[11]);
		SendClientMessage(playerid,Gelb,coordsstring);
		SendClientMessage(playerid, Weiß,"|======================================== Waffen ========================================|");
	}
}

/*//UCP
forward OnUcpLink(playerid);
public OnUcpLink(playerid)
{
	if(playerid == -1)
	{
	    return 1;
	}
	sStats[playerid][sLink] = 1;
}*/

forward OnUcpKick(playerid,Adminname[],reason[]);
public OnUcpKick(playerid,Adminname[],reason[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new string[128];
		format(string, sizeof(string), "* Du wurdest vom Administrator %s via UCP vom Server gekickt. Grund: %s", Adminname, reason);
		SendClientMessage(playerid, Rot, string);
		format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s via UCP gekickt. Grund: %s", GetName(playerid),playerid, Adminname, reason);
		SendClientMessageToAll(Rot, string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Administrator %s via UCP gekickt. Grund: %s",day,month,year,hour,minute,second,GetName(playerid),Adminname,reason);
		KickLog(string);
		TogglePlayerControllable(playerid, false);
		SaveSpieler(playerid);
		Kick(playerid);
	}
	return 1;
}

forward OnUcpBan(playerid,Adminname[],reason[]);
public OnUcpBan(playerid,Adminname[],reason[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new string[128];
		format(string, sizeof(string), "* Du wurdest vom Administrator %s via UCP vom Server gebannt. Grund: %s", Adminname, reason);
		SendClientMessage(playerid, Rot, string);
		format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s via UCP gebannt. Grund: %s", GetName(playerid),playerid, Adminname, reason);
		SendClientMessageToAll(Rot, string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Administrator %s via UCP gebannt. Grund: %s",day,month,year,hour,minute,second,GetName(playerid),Adminname,reason);
		BanLog(string);
		TogglePlayerControllable(playerid, false);
		SaveSpieler(playerid);
		BanEx(playerid,"UCP Ban");
	}
	return 1;
}

forward OnUcpExe(playerid,Adminname[],grund[]);
public OnUcpExe(playerid,Adminname[],grund[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new string[128];
		format(string, sizeof(string), "* Administrator %s hat dem Spieler %s via UCP einen .exe Fehler gegeben.", Adminname,playerid, GetName(playerid));
		SendAdminMessage(Rot, string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen .exe Fehler via UCP gegeben.",day,month,year,hour,minute,second,Adminname,GetName(playerid));
		AdminLog(string);
		CrashPlayer(playerid);
	}
	return 1;
}

forward OnUcpFreeze(playerid,Adminname[],grund[]);
public OnUcpFreeze(playerid,Adminname[],grund[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new string[128];
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
	   	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s via UCP eingefroren.", GetName(playerid),playerid, Adminname);
		SendClientMessageToAll(Rot, string);
		format(string,sizeof(string),"Du wurdest von Administrator %s via UCP eingefroren.",Adminname);
		SendClientMessage(playerid,Weiß,string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s via UCP eingefroren.",day,month,year,hour,minute,second,Adminname,GetName(playerid));
		AdminLog(string);
		TogglePlayerControllable(playerid, false);
	}
	return 1;
}

forward OnUcpUnFreeze(playerid,Adminname[],grund[]);
public OnUcpUnFreeze(playerid,Adminname[],grund[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new string[128];
	    TogglePlayerControllable(playerid,true);
	   	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s via UCP entfriert.", GetName(playerid),playerid, Adminname);
		SendClientMessageToAll(Rot, string);
		format(string,sizeof(string),"Du wurdest von Administrator %s via UCP entfriert.",Adminname);
		SendClientMessage(playerid,Weiß,string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s via UCP entfriert.",day,month,year,hour,minute,second,Adminname,GetName(playerid));
		AdminLog(string);
	}
	return 1;
}

/*forward OnUcpSayAs(playerid, adminname[], grund[]);
public OnUcpSayAs(playerid, adminname[], grund[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		format(string, sizeof(string), "* Administrator %s lässt den Spieler %s via UCP folgendes sagen:", adminname,GetName(playerid));
	    OnPlayerText(playerid, grund[]);
	    SendAdminMessage(Rot, string);
	    SendAdminMessage(Rot, grund);
 	}
 	return 1;
}*/

forward OnUcpWarn(playerid,Adminname[],reason[]);
public OnUcpWarn(playerid,Adminname[],reason[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new string[128];
		format(string, sizeof(string), "* Du wurdest vom Administrator %s via UCP verwarnt. Grund: %s", Adminname, reason);
		SendClientMessage(playerid, Rot, string);
		format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s via UCP verwarnt. Grund: %s", GetName(playerid),playerid, Adminname, reason);
		SendClientMessageToAll(Rot, string);
		if(sStats[playerid][sWarns] == 0)
		{
		    sStats[playerid][sWarns] += 1;
		    format(string, sizeof(string), "* Administrator %s(%d) hat %s via UCP verwarnt. Grund: %s [%d/3]", GetName(playerid), playerid, Adminname, reason, sStats[playerid][sWarns]);
		    SendClientMessageToAll(Rot, string);
			format(Query, sizeof(Query), "UPDATE `accounts` SET `warning1` = '%s' WHERE `name` = '%s'", reason, Adminname);
			mysql_query(Query);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s via UCP verwarnt. Grund: %s.",day,month,year,hour,minute,second,Adminname,GetName(playerid),reason);
			AdminLog(string);
		}
		else if(sStats[playerid][sWarns] == 1)
		{
		    sStats[playerid][sWarns] += 1;
		    format(string, sizeof(string), "* Administrator %s(%d) hat %s via UCP verwarnt. Grund: %s [%d/3]", GetName(playerid), playerid, Adminname, reason, sStats[playerid][sWarns]);
		    SendClientMessageToAll(Rot, string);
			format(Query, sizeof(Query), "UPDATE `accounts` SET `warning1` = '%s' WHERE `name` = '%s'", reason, Adminname);
			mysql_query(Query);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s via UCP verwarnt. Grund: %s.",day,month,year,hour,minute,second,Adminname,GetName(playerid),reason);
			AdminLog(string);
		}
		else if(sStats[playerid][sWarns] == 2)
		{
		    sStats[playerid][sWarns] += 1;
		    format(string, sizeof(string), "* Administrator %s(%d) hat %s via UCP verwarnt. Grund: %s [%d/3]", GetName(playerid), playerid, Adminname, reason, sStats[playerid][sWarns]);
		    SendClientMessageToAll(Rot, string);
		    format(string, sizeof(string), "* %s[%d] wurde vom Server gekickt. Grund: 3 Verwarnungen", GetName(playerid), playerid);
		    SendClientMessageToAll(Rot, string);
			format(Query, sizeof(Query), "UPDATE `accounts` SET `warning1` = '%s' WHERE `name` = '%s'", reason, Adminname);
			mysql_query(Query);
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s via UCP verwarnt. Grund: %s.",day,month,year,hour,minute,second,Adminname,GetName(playerid),reason);
			AdminLog(string);
			SaveSpieler(playerid);
			Kick(playerid);
	 	}
	}
	return 1;
}

forward OnUcpMute(playerid,Adminname[],grund[]);
public OnUcpMute(playerid,Adminname[],grund[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new string[128];
	    sStats[playerid][sMute] = 1;
	   	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s via UCP gemutet.", GetName(playerid),playerid, Adminname);
		SendClientMessageToAll(Rot, string);
		format(string,sizeof(string),"Du wurdest von Administrator %s via UCP gemutet.",Adminname);
		SendClientMessage(playerid,Weiß,string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s via UCP gemutet.",day,month,year,hour,minute,second,Adminname,GetName(playerid));
		AdminLog(string);
	}
	return 1;
}

forward OnUcpUnMute(playerid,Adminname[],grund[]);
public OnUcpUnMute(playerid,Adminname[],grund[])
{
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new string[128];
	    sStats[playerid][sMute] = 0;
	   	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s via UCP entmutet.", GetName(playerid),playerid, Adminname);
		SendClientMessageToAll(Rot, string);
		format(string,sizeof(string),"Du wurdest von Administrator %s via UCP entmutet.",Adminname);
		SendClientMessage(playerid,Weiß,string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat den Spieler %s via UCP entmutet.",day,month,year,hour,minute,second,Adminname,GetName(playerid));
		AdminLog(string);
	}
	return 1;
}

forward OnUcpRankSet(playerid,rank,Adminname[],Grund[]);
public OnUcpRankSet(playerid,rank,Adminname[],Grund[])
{
	new string[128];
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
	    sStats[playerid][sRank] = rank;
	   	format(string, sizeof(string), "* %s hat deinen Rank via UCP auf %d gesetzt.", Adminname, rank);
		SendClientMessage(playerid,Weiß, string);
	}
	return 1;
}

forward OnUcpMegaPunch(playerid,Adminname[],grund[]);
public OnUcpMegaPunch(playerid,Adminname[],grund[])
{
	new string[128];
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		new year, month, day;
		new hour,minute,second;
		getdate(year,month,day);
		gettime(hour,minute,second);
		new Float:xP,Float:xY,Float:xZ;
		GetPlayerPos(playerid, xP, xY, xZ);
 		format(string, sizeof(string), "* Administrator %s hat dir einen Megapunch via UCP gegeben.", Adminname);
		SendClientMessage(playerid,Weiß, string);
		format(string, sizeof(string), "* Administrator %s hat dem Spieler %s via UCP einen Megapunch gegeben.", Adminname,playerid, GetName(playerid));
		SendAdminMessage(Rot, string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] Administrator %s hat dem Spieler %s einen Megapunch via UCP gegeben.",day,month,year,hour,minute,second,Adminname,GetName(playerid));
		AdminLog(string);
  		PushPlayer(playerid, xP+5, xY+50);
	    SetPlayerHealth(playerid, -55.0);
	}
	return 1;
}

forward OnUcpFraktionKick(playerid,Adminname[],grund[]);
public OnUcpFraktionKick(playerid,Adminname[],grund[])
{
	new string[128];
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		format(string, sizeof(string), "* %s hat dich aus seiner Fraktion via UCP gekickt gekickt. Grund: %s", Adminname,grund);
		SendClientMessage(playerid,Weiß, string);
 		sStats[playerid][sMitglied] = 0;
  		sStats[playerid][sLeiter] = 0;
  		sStats[playerid][sRank] = 0;
  		sStats[playerid][sFraktion] = 0;
		if(sStats[playerid][sGeschlecht] == 1)
		{
		    sStats[playerid][sSkin] = 58;
		}
		else
		{
		    sStats[playerid][sSkin] = 56;
		}
  		SaveSpieler(playerid);
	}
	return 1;
}

forward OnPlayerCleoDetected( playerid, cleoid );
public OnPlayerCleoDetected( playerid, cleoid )
{
	//Loggen
	new year, month, day;
	new Hour,Minute,Second;
	getdate(year,month,day);
	gettime(Hour,Minute,Second);
	new string[128];
    switch(cleoid)
    {
        case CLEO_FAKEKILL:
        {
 			format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Fakekill", GetName(playerid));
			SendClientMessageToAll(Rot, string);
			BanEx( playerid, "Fake kill" );
			//Loggen
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gekickt. Grund: Fakekill",day,month,year,Hour,Minute,Second,GetName(playerid));
			CheatLog(string);
        }
        case CLEO_CARWARP:
        {
 			format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Fahrzeug Teleport Cheat", GetName(playerid));
			SendClientMessageToAll(Rot, string);
			BanEx( playerid, "Fake kill" );
			//Loggen
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gekickt. Grund: Fahrzeug Teleport Cheat",day,month,year,Hour,Minute,Second,GetName(playerid));
			CheatLog(string);
        }
        case CLEO_CARSWING:
        {
 			format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Fahrzeug Swinging", GetName(playerid));
			SendClientMessageToAll(Rot, string);
			BanEx( playerid, "Fake kill" );
			//Loggen
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gekickt. Grund: Fahrzeug Swinging",day,month,year,Hour,Minute,Second,GetName(playerid));
			CheatLog(string);
        }
        case CLEO_CAR_PARTICLE_SPAM:
        {
 			format(string, sizeof(string), "** Anti-Cheat: %s wurde vom Server gebannt. Grund: Fahrzeug Partikel Spam", GetName(playerid));
			SendClientMessageToAll(Rot, string);
			BanEx( playerid, "Fake kill" );
			//Loggen
			format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Anti-Cheat System gekickt. Grund: Fahrzeug Partikel Spam",day,month,year,Hour,Minute,Second,GetName(playerid));
			CheatLog(string);
        }
    }
    return 1;
}

/*forward OnUcpBan(playerid,Adminname[],reason[],zeit);
public OnUcpBan(playerid,Adminname[],reason[],zeit)
{
	new string[128];
	if(playerid == -1)
	{
	    return 1;
	}
	if(sStats[playerid][sEingeloggt] == 1)
	{
		//Loggen
		format(string, sizeof(string), "* Du wurdest vom Administrator %s für %d Minuten vom Server gebannt. Grund: %s", GetName(playerid),zeit, reason);
		SendClientMessage(playerid, Rot, string);
		format(string, sizeof(string), "* Spieler %s[%d] wurde vom Administrator %s für %d Minuten gebannt. Grund: %s", GetName(playerid),playerid, Adminname,zeit, reason);
		SendClientMessageToAll(Rot, string);
		format(string,sizeof(string),"(%d/%d/%d) [%d:%d:%d] %s wurde vom Administrator %s fuer %d Minuten gebannt. Grund: %s",day,month,year,hour,minute,second,GetName(playerid),Adminname,zeit,reason);
		BanLog(string);
		TogglePlayerControllable(playerid, false);
		sStats[playerid][sTimeBan] = gettime()+(60*zeit);
		BanEx(playerid,"UCP Timeban");
	}
	return 1;
}*/

forward ANWESENDTIMER(playerid);
public ANWESENDTIMER(playerid)
{
	new string[128];
	format(string, sizeof(string), "* Spieler %s[%d] wurde vom Server gekickt. Grund: AFK-Farming", GetName(playerid),playerid);
	SendClientMessageToAll(Rot, string);
	Kick(playerid);
	return 1;
}

//SpielerSpeichern jede 5 Minuten
forward SpielerSpeichern();
public SpielerSpeichern()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
		if(IsPlayerConnected(i) && sStats[i][sEingeloggt] == 1)
		{
			SaveSpieler(i);
		}
	}
}

stock IsAllowedFactionToTune(Faction){
	if(Faction){
		if((Faction >= 5 && Faction <= 6)/* || Faction >= 5 && Faction <= 6*/) return true;
	}return false;
}

stock IsAllowedFactionToBuy(Faction){
	if(Faction){
		if((Faction >= 5 && Faction <= 6)/* || Faction >= 5 && Faction <= 6*/) return true;
	}return false;
}
stock GetDefaultCarColorOfFaction(Faction,&col1,&col2){
   	if(Faction==5)
	{
		col1 = 98;
	    col2 = 98;
	}
	else if(Faction==6)
	{
		col1 = 7;
	    col2 = 7;
	}
	return 1;
}

//Gangautohaus
stock GetFactioncarsOfFaction(Faction){
	new Cars;
	for(new fc;fc<sizeof(FactionCars);fc++){
	   	if(FactionCars[fc][fVehid] >= 400 && FactionCars[fc][fVehid] <= 611){
	       	if(FactionCars[fc][fFaction][0] == Faction)
	           	Cars++;
	   	}
	}return Cars;
}


//GetName
stock GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	if(IsPlayerConnected(playerid)) GetPlayerName(playerid, name, sizeof(name));
	else name = "Unbekannt";
	return name;
}

//GetNameEx
stock GetNameEx(playerid)
{
        new str[24],name[32],pos;
        name = GetName(playerid);
        strmid(str, name, 0, strlen(name), 24);
        for(new i = 0; i < MAX_PLAYER_NAME; i++)
        {
                if (str[i] == ']') pos = i+1;
        }
        strmid(str, name, pos, strlen(name), 24);
        return str;
}

//SpawnBayside
stock SpawnBayside(playerid)
{
	ClearChat(playerid);
	SetPlayerSkin(playerid,sStats[playerid][sSkin]);
	TogglePlayerControllable(playerid, true);
	SetSpielerFarbe(playerid);
	//Werbungtextdraws
	TextDrawShowForPlayer(playerid,Ad1);
	TextDrawShowForPlayer(playerid,Ad2);
	TextDrawShowForPlayer(playerid, Clock);
	TextDrawShowForPlayer(playerid, Script1);
	TextDrawShowForPlayer(playerid, Script2);
	PlayerTextDrawShow(playerid,Money3[playerid]);
	PlayerTextDrawShow(playerid,Money2[playerid]);
	PlayerTextDrawShow(playerid,Money[playerid]);
	TextDrawHideForPlayer(playerid,lbt);
	TextDrawHideForPlayer(playerid,lbb);
	TextDrawHideForPlayer(playerid,Intro5);
	SetPVarInt(playerid, "Ersterspawn", 1);
    SetPVarInt(playerid,"ImIntro",0);
	PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
	StopAudioStreamForPlayer(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosEx(playerid,-2624.8716,2255.8379,8.1374);
	SetPlayerFacingAngle(playerid,271.0459);
	SetCameraBehindPlayer(playerid);
	//Wanteds auf 0 setzen
	sStats[playerid][sWanteds] = 0;
	//Tutorial auf 1 setzen
	sStats[playerid][sTutorial] = 1;
	//Driftrennen um einen Bug zu verhindern
	sStats[playerid][sDriftZeit] = -1;
	//Hausbug vermeiden
	sStats[playerid][sHaus] = 255;
	//Geld setzen
	GivePlayerEuro(playerid,2500);
	sStats[playerid][sKonto] = 2500;
	//Busness
	sStats[playerid][sBizz] = 255;
	//Autos
	sStats[playerid][sAutos] = 0;
	//Tod
	sStats[playerid][sTod] = 0;
	//DJ
	SetPVarInt(playerid,"ListenToDJ", 0);
	//Spawnvariabele
	SetPVarInt(playerid, "Spawned", 1);
	//Adminlevel
	sStats[playerid][sAdminlevel] = 0;
	//Spieler speichern
	SaveSpieler(playerid);
	//Farbe
	SetSpielerFarbe(playerid);
	//Werbe Dialog
	ShowPlayerDialog(playerid,GEWORBEN,DIALOG_STYLE_INPUT,"Wurdest du von einem Spieler geworben?","{FFFFFF}Wurdest du von einem bestimmten {FF9600}Spieler{FFFFFF} geworben? Wenn ja gebe seinen {FF9600}Namen{FFFFFF} bitte unten in das Feld ein.\nSofern du nicht geworben wurdest lass dieses Feld einach {FF9600}frei{FFFFFF}.","Weiter","");
}

//SetBildschirm
stock SetStartbildschirm(playerid)
{
	TextDrawShowForPlayer(playerid,lbt);
	TextDrawShowForPlayer(playerid,lbb);
	SetPlayerVirtualWorld(playerid,1+playerid);
	SetPlayerPosEx(playerid,-2532.8091,2220.0801,4.9844);
	SetPlayerCameraPos(playerid,-2532.6721,2220.4890,14.9844);
	SetPlayerCameraLookAt(playerid,-2532.3628,2221.4133,14.9844);
}

stock UnSetStartbildschirm(playerid)
{
	TextDrawHideForPlayer(playerid,lbt);
	TextDrawHideForPlayer(playerid,lbb);
	SetPlayerVirtualWorld(playerid,0);
}

//GetNearestBot
stock GetNearestBot(playerid, Float:abstand)
{
	new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vZ, Float:vY;
	GetPlayerPos(playerid, pX, pY, pZ);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerNPC(i))
		{
			GetPlayerPos(i, vX, vY, vZ);
			if(floatabs(pX-vX) < abstand && floatabs(pY-vY) < abstand && floatabs(pZ-vZ) < abstand &&  i != playerid)
			{
				return i;
			}
		}
	}
	return 9999;
}

//GetNearestPlayer
stock GetNearestPlayer(playerid, Float:abstand)
{
	new Float:pX, Float:pY, Float:pZ, Float:vX, Float:vZ, Float:vY;
	GetPlayerPos(playerid, pX, pY, pZ);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
			GetPlayerPos(i, vX, vY, vZ);
			if(floatabs(pX-vX) < abstand && floatabs(pY-vY) < abstand && floatabs(pZ-vZ) < abstand &&  i != playerid)
			{
				return i;
			}
	}
	return 9999;
}

//GetModelID
stock GetVehicleModelIDFromName(vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if(strfind(VehicleNames[i], vname, true) != -1)
		return i + 400;
	}
	return -1;
}

//Nitro einsetzbar?
stock CompatibleWithNitro(vehicleid)
{
	new v = vehicleid;
	if(v == 447 || v == 534 || v == 411 || v == 568 || v == 451 || v == 562 || v == 429 || v == 535 || v == 565)
	{
		return 1;
	}
	if(v == 480 || v == 536 || v == 492 || v == 579|| v == 559|| v == 480 || v == 541 || v == 561 || v == 550 || v == 566)
	{
		return 1;
	}
	if(v == 558 || v == 533 || v == 522 || v == 589)
	{
		return 1;
	}
	return 0;
}

//MYSQL Check
ConnectMySQL()
{
	mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DB, MYSQL_PASS);
	if(mysql_ping() == 1)
	{
		print("<-| [MYSQL] Verbindung zur Datenbank wurde erfolgreich hergestellt!");
		return 1;
	}
	else
	{
		print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
		print("<-| [MYSQL] Es wird erneut versucht eine Verbindung zur Datenbank herzustellen!");
		mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DB, MYSQL_PASS);
		if(mysql_ping() == 1)
		{
			print("<-| [MYSQL] Es konnte im 2 Versuch eine Verbindung hergestellt werden!");
			return 1;
		}
		else
		{
			print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
			print("<-| [MYSQL] Der Server wird nun beendet!");
			SendRconCommand("exit");
			return 1;
		}
	}
}

CheckMySQL()
{
	if(mysql_ping() == -1)
	mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DB, MYSQL_PASS);
}

stock mysql_GetInt(Table[], Field[], Where[], Is[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Is, Is);
    format(query, 128, "SELECT `%s` FROM `%s` WHERE `%s` = '%s'", Field, Table, Where, Is);
    mysql_query(query);
    mysql_store_result();
    new sqlint = mysql_fetch_int();
    mysql_free_result();
    return sqlint;
}

CheckAccountExists(account[])
{
	new string[128];
	format(string, sizeof(string), "SELECT * FROM accounts WHERE Name = '%s'", account);
	mysql_query(string);

	mysql_store_result();

	new value;
	value = mysql_num_rows();
	mysql_free_result();
	return value;
}

//MYSQL GetFloat
stock Float:mysql_GetFloat(Table[], Field[], Where[], Is[])
{
    new query[128], Float:sqlfloat;
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Is, Is);
    format(query, 128, "SELECT %s FROM %s WHERE %s = '%s'", Field, Table, Where, Is);
    mysql_query(query);
    mysql_store_result();
    mysql_fetch_float(sqlfloat);
    mysql_free_result();
    return sqlfloat;
}

//mysql_Getstring
stock mysql_GetString(Table[], Field[], Where[], Is[])
{
	new query[128], Get[128];
	mysql_real_escape_string(Table, Table);
	mysql_real_escape_string(Field, Field);
	mysql_real_escape_string(Where, Where);
	mysql_real_escape_string(Is, Is);
	format(query, 128, "SELECT %s FROM %s WHERE %s = '%s'", Field, Table, Where, Is);
	mysql_query(query);
	mysql_store_result();
	mysql_fetch_row(Get);
	return Get;
}

//LoadWohnwagen
stock LoadWohnwagen(playerid)
{
	if(sStats[playerid][sWohnwagen] == 1)
	{
		new Float:A,Float:X,Float:Y,Float:Z,status,farbe1,farbe2,string[128],tv;
		format(string, sizeof(string), "SELECT * FROM wohnwagen WHERE inhaber = '%s'",GetName(playerid));
		mysql_query(string);
		mysql_store_result();

		if(!mysql_num_rows())
		{
			return 1;
		}
		else
		{
		    status = mysql_GetInt("wohnwagen", "status", "inhaber", GetName(playerid));
		    X = mysql_GetFloat("wohnwagen", "posx", "inhaber", GetName(playerid));
		    Y = mysql_GetFloat("wohnwagen", "posy", "inhaber", GetName(playerid));
		    Z = mysql_GetFloat("wohnwagen", "posz", "inhaber", GetName(playerid));
		    A = mysql_GetFloat("wohnwagen", "posa", "inhaber", GetName(playerid));
		    tv = mysql_GetInt("wohnwagen", "tuev", "inhaber", GetName(playerid));
		    farbe1 = mysql_GetInt("wohnwagen", "farbe1", "inhaber", GetName(playerid));
		    farbe2 = mysql_GetInt("wohnwagen", "farbe2", "inhaber", GetName(playerid));
			wohnwagen[playerid] = AddStaticVehicleEx(508,X,Y,Z,A,farbe1,farbe2,120000000); // Wohnwagen
			Tankmenge[wohnwagen[playerid]] = GasMax[GetVehicleModel(wohnwagen[playerid])-400];
			wohnwagentuev[playerid] = tv;
			Kennzeichen[wohnwagen[playerid]] = tv;
			wohnwagenx[playerid] = X;
			wohnwageny[playerid] = Y;
			wohnwagenz[playerid] = Z;
			wohnwagena[playerid] = A;
			if(status == 1)
			{
		  		wohnwagenstatus[playerid] = 1;
				SetVehicleLock(wohnwagen[playerid],1);
			}
			if(status == 0)
			{
		  		wohnwagenstatus[playerid] = 0;
				SetVehicleLock(wohnwagen[playerid],0);
			}
			if(Kennzeichen[wohnwagen[playerid]] == 1)
			{
		 		format(string, sizeof(string), "%s",GetName(playerid));
				SetVehicleNumberPlate(wohnwagen[playerid],string);
			}
			mysql_free_result();
		}
	}
	return 1;
}

//Explode/Split Funktion by Westie
stock explode(const sSource[], aExplode[][], const sDelimiter[] = " ", iVertices = sizeof aExplode, iLength = sizeof aExplode[]) // Created by Westie
{
	new
	iNode,
	iPointer,
	iPrevious = -1,
	iDelimiter = strlen(sDelimiter);

	while(iNode < iVertices)
	{
		iPointer = strfind(sSource, sDelimiter, false, iPointer);

		if(iPointer == -1)
		{
			strmid(aExplode[iNode], sSource, iPrevious, strlen(sSource), iLength);
			break;
		}
		else
		{
			strmid(aExplode[iNode], sSource, iPrevious, iPointer, iLength);
		}

		iPrevious = (iPointer += iDelimiter);
		++iNode;
	}
	return iPrevious;
}

//SetSpielerFarbe
stock SetSpielerFarbe(playerid)
{
	if(sStats[playerid][sMaske] == 1)
	{
	    SetPlayerColor(playerid,Weiß);
	    return 1;
	}
	if(sStats[playerid][sTutorial] == 0)
	{
	    SetPlayerColor(playerid,COLOR_PURPLE);
	    return 1;
	}
	if(sStats[playerid][sTutorial] == 0 && sStats[playerid][sFraktion] == 0)
	{
	    SetPlayerColor(playerid,Weiß);
	    return 1;
	}
	if(sStats[playerid][sMitglied] == 0 && sStats[playerid][sLeiter] == 0 && sStats[playerid][sTutorial] == 1)
	{
		SetPlayerColor(playerid,Weiß);
		return 1;
	}
	if(IsACNN(playerid)) //Bayside-Newstime
	{
	    SetPlayerColor(playerid,CNNFARBE);
	    return 1;
	}
	if(IsAMS(playerid)) //MS-14
	{
	    SetPlayerColor(playerid,MSFARBE);
	    return 1;
	}
	if(IsACrip(playerid)) //Crip or Die
	{
	    SetPlayerColor(playerid,CRIPFARBE);
	    return 1;
	}
	if(IsASani(playerid)) //Sanitäter
	{
	    SetPlayerColor(playerid,SANIFARBE);
	    return 1;
	}
	if(IsACop(playerid) && GetPVarInt(playerid, "CopDuty") == 0 && GetPVarInt(playerid, "SwatDuty") == 0) //BSPD
	{
	    SetPlayerColor(playerid,Weiß);
	    return 1;
	}
	if(IsACop(playerid) && GetPVarInt(playerid, "CopDuty") == 1 && GetPVarInt(playerid, "SwatDuty") == 1) //BSPD
	{
	    SetPlayerColor(playerid,COLOR_LIGHTBLUE);
	    return 1;
	}
	else
	{
 		SetPlayerColor(playerid,Weiß);
	    return 1;
	}
}

//Tuningteil vom Fahrzeug herrausfinden | ty @ Pablo Borsellino
GetVehicleUpgrade(VehicleModel,ComponentID){
	switch(VehicleModel){case 400:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}
				case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 401:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1004:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1017:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}
			}}case 404:{switch(ComponentID){
				case 1000:{return 1;}case 1002:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1016:{return 1;}case 1017:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}
				case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 405:{switch(ComponentID){
				case 1000:{return 1;}case 1001:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1014:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}
				case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 410:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1017:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1023:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}
				case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 415:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}
				case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 418:{switch(ComponentID){
				case 1002:{return 1;}case 1006:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1016:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}
				case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 420:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1004:{return 1;}case 1005:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1019:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}
				case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 421:{switch(ComponentID){
				case 1000:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1014:{return 1;}case 1016:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}
				case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 422:{switch(ComponentID){
				case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1017:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}
				case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 426:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1004:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1019:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}
				case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 436:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1017:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1022:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 439:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1017:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}
				case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 477:{switch(ComponentID){
				case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}
				case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 478:{switch(ComponentID){
				case 1004:{return 1;}case 1005:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1012:{return 1;}case 1013:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1022:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}
				case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 489:{switch(ComponentID){
				case 1000:{return 1;}case 1002:{return 1;}case 1004:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1016:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}
				case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}
				case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 491:{switch(ComponentID){
				case 1003:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1014:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}
				case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 492:{switch(ComponentID){
				case 1000:{return 1;}case 1004:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1016:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}
				case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 496:{switch(ComponentID){
				case 1001:{return 1;}case 1002:{return 1;}case 1003:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1011:{return 1;}case 1017:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}
			}}case 500:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}
				case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 516:{switch(ComponentID){
				case 1000:{return 1;}case 1002:{return 1;}case 1004:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1015:{return 1;}case 1016:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}
				case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 517:{switch(ComponentID){
				case 1002:{return 1;}case 1003:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1016:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}
				case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 518:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 527:{switch(ComponentID){
				case 1001:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1014:{return 1;}case 1015:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}
				case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 529:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1011:{return 1;}case 1012:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}
				case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 534:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
				case 1100:{return 1;}case 1101:{return 1;}case 1106:{return 1;}case 1122:{return 1;}case 1123:{return 1;}case 1124:{return 1;}case 1125:{return 1;}case 1126:{return 1;}case 1127:{return 1;}case 1178:{return 1;}case 1179:{return 1;}case 1180:{return 1;}case 1185:{return 1;}
			}}case 535:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
				case 1109:{return 1;}case 1110:{return 1;}case 1113:{return 1;}case 1114:{return 1;}case 1115:{return 1;}case 1116:{return 1;}case 1117:{return 1;}case 1118:{return 1;}case 1119:{return 1;}case 1120:{return 1;}case 1121:{return 1;}
			}}case 536:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
				case 1103:{return 1;}case 1104:{return 1;}case 1105:{return 1;}case 1107:{return 1;}case 1108:{return 1;}case 1128:{return 1;}case 1181:{return 1;}case 1182:{return 1;}case 1183:{return 1;}case 1184:{return 1;}
			}}case 540:{switch(ComponentID){
				case 1001:{return 1;}case 1004:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 542:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1014:{return 1;}case 1015:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}
				case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 546:{switch(ComponentID){
				case 1001:{return 1;}case 1002:{return 1;}case 1004:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1023:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 547:{switch(ComponentID){
				case 1000:{return 1;}case 1003:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1016:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}
				case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}
			}}case 549:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1011:{return 1;}case 1012:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 550:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1004:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}
				case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 551:{switch(ComponentID){
				case 1002:{return 1;}case 1003:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1016:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1021:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 558:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1088:{return 1;}case 1089:{return 1;}case 1090:{return 1;}
				case 1091:{return 1;}case 1092:{return 1;}case 1093:{return 1;}case 1094:{return 1;}case 1095:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1163:{return 1;}case 1164:{return 1;}case 1165:{return 1;}case 1166:{return 1;}case 1167:{return 1;}case 1168:{return 1;}
			}}case 559:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1065:{return 1;}case 1066:{return 1;}case 1067:{return 1;}case 1068:{return 1;}case 1069:{return 1;}case 1070:{return 1;}case 1071:{return 1;}case 1072:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}
				case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1158:{return 1;}case 1159:{return 1;}case 1160:{return 1;}case 1161:{return 1;}case 1162:{return 1;}case 1173:{return 1;}
			}}case 560:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1026:{return 1;}case 1027:{return 1;}case 1028:{return 1;}case 1029:{return 1;}case 1030:{return 1;}case 1031:{return 1;}case 1032:{return 1;}case 1033:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}
				case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1138:{return 1;}case 1139:{return 1;}case 1140:{return 1;}case 1141:{return 1;}case 1169:{return 1;}case 1170:{return 1;}
			}}case 561:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1055:{return 1;}case 1056:{return 1;}case 1057:{return 1;}case 1058:{return 1;}case 1059:{return 1;}case 1060:{return 1;}case 1061:{return 1;}case 1062:{return 1;}case 1063:{return 1;}case 1064:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1154:{return 1;}case 1155:{return 1;}case 1156:{return 1;}case 1157:{return 1;}
			}}case 562:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1034:{return 1;}case 1035:{return 1;}case 1036:{return 1;}case 1037:{return 1;}case 1038:{return 1;}case 1039:{return 1;}case 1040:{return 1;}case 1041:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}
				case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1146:{return 1;}case 1147:{return 1;}case 1148:{return 1;}case 1149:{return 1;}case 1171:{return 1;}case 1172:{return 1;}
			}}case 565:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1045:{return 1;}case 1046:{return 1;}case 1047:{return 1;}case 1048:{return 1;}case 1049:{return 1;}case 1050:{return 1;}case 1051:{return 1;}case 1052:{return 1;}case 1053:{return 1;}case 1054:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1150:{return 1;}case 1151:{return 1;}case 1152:{return 1;}case 1153:{return 1;}
			}}case 567:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
				case 1102:{return 1;}case 1129:{return 1;}case 1130:{return 1;}case 1131:{return 1;}case 1132:{return 1;}case 1133:{return 1;}case 1186:{return 1;}case 1187:{return 1;}case 1188:{return 1;}case 1189:{return 1;}
			}}case 575:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1042:{return 1;}case 1043:{return 1;}case 1044:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}
				case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1099:{return 1;}case 1174:{return 1;}case 1175:{return 1;}case 1176:{return 1;}case 1177:{return 1;}
			}}case 576:{switch(ComponentID){
				case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
				case 1134:{return 1;}case 1135:{return 1;}case 1136:{return 1;}case 1137:{return 1;}case 1190:{return 1;}case 1191:{return 1;}case 1192:{return 1;}case 1193:{return 1;}
			}}case 580:{switch(ComponentID){
				case 1001:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}
				case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 585:{switch(ComponentID){
				case 1001:{return 1;}case 1003:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}
				case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 589:{switch(ComponentID){
				case 1000:{return 1;}case 1004:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1016:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1020:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}
				case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}case 600:{switch(ComponentID){
				case 1004:{return 1;}case 1005:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1013:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1020:{return 1;}case 1022:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}
				case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}case 603:{switch(ComponentID){
				case 1001:{return 1;}case 1006:{return 1;}case 1007:{return 1;}case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1017:{return 1;}case 1018:{return 1;}case 1019:{return 1;}case 1020:{return 1;}case 1023:{return 1;}case 1024:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}
				case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}case 1142:{return 1;}case 1143:{return 1;}case 1144:{return 1;}case 1145:{return 1;}
			}}default:{
			switch(ComponentID){case 1008:{return 1;}case 1009:{return 1;}case 1010:{return 1;}case 1025:{return 1;}case 1073:{return 1;}case 1074:{return 1;}case 1075:{return 1;}case 1076:{return 1;}case 1077:{return 1;}case 1078:{return 1;}case 1079:{return 1;}case 1080:{return 1;}case 1081:{return 1;}case 1082:{return 1;}case 1083:{return 1;}case 1084:{return 1;}case 1085:{return 1;}case 1087:{return 1;}case 1096:{return 1;}case 1097:{return 1;}case 1098:{return 1;}
			}}}return 0;
}
randomEx(...)return getarg(random(numargs()));


//Zufälliges Tunen | ty @ Pablo Borsellino
stock TuneVehicleRandomly(VehicleID)
{
	new Tuningpart[36],Tick=0,Model=GetVehicleModel(VehicleID);
	for(new i=999;i<1194;i++){if(i>=1000&&i<=1993&&GetVehicleUpgrade(Model,i)){Tuningpart[Tick]=i;Tick++;}}
	AddVehicleComponent(VehicleID,randomEx(Tuningpart[0],Tuningpart[1],Tuningpart[2],Tuningpart[3],Tuningpart[4],Tuningpart[5]));
	AddVehicleComponent(VehicleID,randomEx(Tuningpart[6],Tuningpart[7],Tuningpart[8],Tuningpart[9],Tuningpart[0]));
	AddVehicleComponent(VehicleID,randomEx(Tuningpart[11],Tuningpart[12],Tuningpart[13],Tuningpart[14],Tuningpart[15]));
	AddVehicleComponent(VehicleID,randomEx(Tuningpart[16],Tuningpart[17],Tuningpart[18],Tuningpart[19],Tuningpart[20]));
	AddVehicleComponent(VehicleID,randomEx(Tuningpart[20],Tuningpart[21],Tuningpart[22],Tuningpart[23],Tuningpart[24]));
	AddVehicleComponent(VehicleID,randomEx(Tuningpart[26],Tuningpart[27],Tuningpart[28],Tuningpart[29],Tuningpart[30]));
	AddVehicleComponent(VehicleID,randomEx(Tuningpart[30],Tuningpart[31],Tuningpart[32],Tuningpart[33],Tuningpart[34],Tuningpart[35]));
	ChangeVehicleColor(VehicleID,randomEx(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,32,41,42,43,44,45,46,47,48,49,50,123,124,125,126,130,131,132,142,144,146,147,148,149,150,141,128,129,130,131,132,142,144,145,1146,147,148,149,150,151,160,165,166,181,182,183,184,185,186,255,252),
	randomEx(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,32,41,42,43,44,45,46,47,48,49,50,123,124,125,126,130,131,132,142,144,146,147,148,149,150,141,128,129,130,131,132,142,144,145,1146,147,148,149,150,151,160,165,166,181,182,183,184,185,186,255,252));
	return 1;
}

//Autoradio
stock IsPlayerInSameVehicle(playerid, asplayerid)
{
	if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(asplayerid)) return 1;
	else return 0;
}

stock AddRadioStation(name[NAME_SIZE], link[LINK_SIZE], m = 1)
{
	if(RadioCount < MAX_RADIO_STATIONS)
	{
		format(r_RadioInfo[RadioCount][r_Name],NAME_SIZE,"%s",name);
		format(r_RadioInfo[RadioCount][r_Link],LINK_SIZE,"%s",link);
		if(m)
		RadioCount ++;
		return RadioCount -1;
	}
	else
	{
		printf("Error: Die maximale Menge an Radiostationen [%d] wurde erreicht!",MAX_RADIO_STATIONS);
		return -1;
	}
}

stock SetRadioStation(vehicleid, stationid)
{
	if(GetVehicleModel(vehicleid) == 481)
	{
		return 1;
	}
	new timer = -1;
	v_VehicleInfo[vehicleid][RadioPlaying] = stationid;
	#if USE_TEXTDRAW_SET == 2
	new string[50];
	format(string,sizeof(string),"Aktuelle Radiostation: ~n~~w~%s",r_RadioInfo[stationid][r_Name]);
	TextDrawSetString(v_VehicleInfo[vehicleid][r_Draw],string);
	#else
	TextDrawSetString(v_VehicleInfo[vehicleid][r_Draw],r_RadioInfo[stationid][r_Name]);
	#endif
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerVehicleID(i) == vehicleid)
			{
				timer = GetPVarInt(i,"ID_HideRadioTextdraw");
				if(timer != -1)
				{
					TextDrawHideForPlayer(i,v_VehicleInfo[vehicleid][r_Draw]);
					KillTimer(timer);
				}
				TextDrawShowForPlayer(i,v_VehicleInfo[vehicleid][r_Draw]);
				SetPVarInt(i,"ID_HideRadioTextdraw",SetTimerEx("HideRadioTextdraw",TEXTDRAW_DISAPPEAR_TIME,false,"ii",i,vehicleid));
				PlayAudioStreamForPlayer(i,r_RadioInfo[stationid][r_Link]);
			}
		}
	}
	return 1;
}

//RespawnZiviBikes
stock RespawnZiviBikes()
{
	new string[128];
	new bool:unwanted[CAR_AMOUNT];
	for(new player=0; player<GetMaxPlayers(); player++)
	{
		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
	}
	for(new car = 0; car <= 5; car++)
	{
		if(!unwanted[car]) SetVehicleToRespawn(car);
	}
	format(string, sizeof(string), "Server: Alle unbenutzten Zivilisten-Fahhräder wurden respawned.");
	SendClientMessageToAll(Weiß,string);
}

//RespawnZiviBikesS
stock RespawnZiviBikesS()
{
//	new string[128];
	new bool:unwanted[CAR_AMOUNT];
	for(new player=0; player<GetMaxPlayers(); player++)
	{
		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
	}
	for(new car = 0; car <= 5; car++)
	{
		if(!unwanted[car]) SetVehicleToRespawn(car);
	}
}

//RespawnAllVehicles
stock RespawnAllVehicles()
{
	//new string[128];
	new bool:unwanted[CAR_AMOUNT];
	for(new player = 0; player < MAX_PLAYERS; player++)
	{
		if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
	}
	for(new car = 0; car <= MAX_VEHICLES; car++)
	{
		if(spawncar_job[car] != 1)
		{
			if(!unwanted[car]) SetVehicleToRespawn(car);
		}
	}
}

//Pferderennen
stock HorseInfo(Text:horseid)
{
	TextDrawFont(horseid, 4);
	TextDrawColor(horseid,0xFFFFFFFF);
	TextDrawTextSize(horseid,64,64);
}

stock HorseNumInfo(Text:horsenumid)
{
	TextDrawFont(horsenumid, 4);
	TextDrawColor(horsenumid,0xFFFFFFFF);
	TextDrawTextSize(horsenumid,32,32);
}

//Lotto
stock MakeNumber()
{
	Number[0] = random(99);
	Number[1] = random(99);
	Number[2] = random(99);
	Number[3] = random(99);
	Number[4] = random(99);
	Number[5] = random(99);
}

stock MakePlayerNumber(playerid)
{
	PlayerNumber[0][playerid] = random(99);
	PlayerNumber[1][playerid] = random(99);
	PlayerNumber[2][playerid] = random(99);
	PlayerNumber[3][playerid] = random(99);
	PlayerNumber[4][playerid] = random(99);
	PlayerNumber[5][playerid] = random(99);
}

//DJ Modus
stock SetDJStatus(playerid)
{
	new string[128];
	ClearAnimations(playerid);
    SetPlayerAttachedObject(playerid,9,19421,2,0.057999,-0.000000,-0.001000,90.699882,-15.900001,-92.400032,1.000000,1.000000);
	PlayerTextDrawShow(playerid,DJText1[playerid]);
	PlayerTextDrawShow(playerid,DJText2[playerid]);
	//3D Text setzen
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	format(string,54,"{FFFFFF}[{FF0000}DJ %s on air!{FFFFFF}]", GetName(playerid));
	DJLabel[playerid] = Create3DTextLabel(string, 0xAAAAFFFF,X,Y,Z+3.1, 11.0, 0, 0);
	TextDrawHideForPlayer(playerid,Ad1);
	TextDrawHideForPlayer(playerid,Ad2);
}

stock UnSetDJStatus(playerid)
{
    RemovePlayerAttachedObject(playerid,9);
	PlayerTextDrawHide(playerid,DJText1[playerid]);
	PlayerTextDrawHide(playerid,DJText2[playerid]);
	ClearAnimations(playerid);
	Delete3DTextLabel(DJLabel[playerid]);
	TextDrawShowForPlayer(playerid,Ad1);
	TextDrawShowForPlayer(playerid,Ad2);
}

//Feuersystem
stock GetFireID(Float:x, Float:y, Float:z, &Float:dista)
{
	new id = -1;
	dista = 99999.99;
	for(new i; i < MAX_FLAMES; i++)
	{
	    if(GetDistanceBetweenPoints(x,y,z,Flame[i][Flame_x],Flame[i][Flame_y],Flame[i][Flame_z]) < dist)
	    {
	        dista = GetDistanceBetweenPoints(x,y,z,Flame[i][Flame_x],Flame[i][Flame_y],Flame[i][Flame_z]);
	        id = i;
		}
	}
	return id;
}

CanPlayerBurn(playerid, val = 0)
{
	if(CallRemoteFunction("CanBurn", "d", playerid) >= 0  && GetPlayerSkin(playerid) != 277 && GetPlayerSkin(playerid) != 278 && GetPlayerSkin(playerid) != 279 && ((!val && !PlayerOnFire[playerid]) || (val && PlayerOnFire[playerid]))) { return 1; }
	return 1;
}

stock IsPlayerInWater(playerid)
{
   new Float:MV_wpos[3];
   GetPlayerPos(playerid,MV_wpos[0],MV_wpos[1],MV_wpos[2]);
   if((MV_wpos[2] > 0.00) || IsPlayerInZonee(playerid,1808.2019,1424.5392,-2230.5024,-2347.7979)) { return 0; }
   else if((MV_wpos[2] < 0.00) && (MV_wpos[2] > -1.00)) { return 1; }
   else if(MV_wpos[2] < -1.00) { return 2; }
   return 0;
}

stock IsPlayerInZonee(playerid, Float:minX, Float:minY, Float:maxX, Float:maxY)
{
        new Float:MV_ZoneX, Float:MV_ZoneY, Float:MV_ZoneZ;
        GetPlayerPos(playerid, MV_ZoneX, MV_ZoneY, MV_ZoneZ);
        if((MV_ZoneX >= minX && MV_ZoneX <= maxX) && (MV_ZoneY >= minY && MV_ZoneY <= maxY) && MV_ZoneZ <= 500) { return 1; }
        return 0;
}

GetFlameSlot()
{
	for(new i = 0; i < MAX_FLAMES; i++)
	{
		if(!Flame[i][Flame_Exists]) { return i; }
	}
	return -1;
}

IsAtFlame(playerid)
{
	for(new i = 0; i < MAX_FLAMES; i++)
	{
	    if(Flame[i][Flame_Exists])
		{
		    if(!IsPlayerInAnyVehicle(playerid) && (IsPlayerInRangeOfPoint(playerid, FLAME_ZONE, Flame[i][Flame_x], Flame[i][Flame_y], Flame[i][Flame_z]+Z_DIFFERENCE) ||
												   IsPlayerInRangeOfPoint(playerid, FLAME_ZONE, Flame[i][Flame_x], Flame[i][Flame_y], Flame[i][Flame_z]+Z_DIFFERENCE-1)))
		    {
				return 1;
			}
		}
	}
	return 0;
}

stock Aiming_at_Flame(playerid)
{
	new id = -1;
	new Float:dis = 99999.99;
	new Float:dis2;
	new Float:Zx, Float:Zy, Float:Zz;

	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && PlayerOnFire[i] && (IsInWaterCar(playerid) || HasExtinguisher(playerid) || GetPlayerWeapon(playerid) == 41) && PlayerOnFire[i])
	    {
	        GetPlayerPos(i, Zx, Zy, Zz);
	        dis2 = DistanceCameraTargetToLocation(cx, cy, cz, Zx, Zy, Zz, fx, fy, fz);
	        if(dis2 < dis)
	        {
				dis = dis2;
	    		id = i;
			}
		}
	}
	if(id != -1) { return id-MAX_PLAYERS; }
	for(new i; i < MAX_FLAMES; i++)
	{
		if(Flame[i][Flame_Exists])
		{
		    if(IsInWaterCar(playerid) || HasExtinguisher(playerid) || GetPlayerWeapon(playerid) == 41)
		    {
				dis2 = DistanceCameraTargetToLocation(cx, cy, cz, Flame[i][Flame_x], Flame[i][Flame_y], Flame[i][Flame_z]+Z_DIFFERENCE, fx, fy, fz);
				if(IsPlayerInAnyVehicle(playerid) && dis2 < CAR_RADIUS && dis2 < dis)
				{
				    dis = dis2;
				    id = i;
				}
				else if(!IsPlayerInAnyVehicle(playerid) && dis2 < ONFOOT_RADIUS && dis2 < dis)
				{
				    dis = dis2;
				    id = i;
				}
			}
		}
	}
	if(id != -1)
	{
		if
		(
			(
				IsPlayerInAnyVehicle(playerid) && !IsPlayerInRangeOfPoint(playerid, 50, Flame[id][Flame_x], Flame[id][Flame_y], Flame[id][Flame_z])
			)
			||
			(
				!IsPlayerInAnyVehicle(playerid)  && !IsPlayerInRangeOfPoint(playerid, 5, Flame[id][Flame_x], Flame[id][Flame_y], Flame[id][Flame_z])
			)
		)
		{ id = -1; }
	}
	return id;
}

Pissing_at_Flame(playerid)
{
	new id = -1;
	new Float:dis = 99999.99, Float:dis2;
	new Float:x,Float:y,Float:z,Float:x1,Float:y1,Float:z1,Float:a;
	GetXYInFrontOfPlayer(playerid, x, y, z, a, 1);
	z -= Z_DIFFERENCE;
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_PISSING)
	{
 		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnected(i) && PlayerOnFire[i] && PlayerOnFire[i])
		    {
		        GetPlayerPos(i, x1, y1, z1);
		        if(IsPlayerInRangeOfPoint(playerid, ONFOOT_RADIUS, x1, y1, z1))
		        {
		    		id = i;
				}
			}
		}
		if(id != -1) { return id-MAX_PLAYERS; }
		for(new i; i < MAX_FLAMES; i++)
		{
			if(Flame[i][Flame_Exists])
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
				    dis2 = GetDistanceBetweenPoints(x,y,z,Flame[i][Flame_x],Flame[i][Flame_y],Flame[i][Flame_z]);
				    if(dis2 < PISSING_WAY && dis2 < dis)
					{
					    id = i;
					    dis = dis2;
					}
				}
			}
		}
	}
	return id;
}

IsInWaterCar(playerid)
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 601) { return 1; }
	return 0;
}

HasExtinguisher(playerid)
{
    if(GetPlayerWeapon(playerid) == 42 && !IsPlayerInAnyVehicle(playerid)) { return 1; }
	return 0;
}

Pressing(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid, keys, updown, leftright);
	return keys;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, &Float:z, &Float:a, Float:distance)
{
	GetPlayerPos(playerid, x, y ,z);
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid),a);
	}
	else
	{
		GetPlayerFacingAngle(playerid, a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return 0;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
    if(IsPlayerConnected(playerid))
    {
        new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
        GetPlayerPos(playerid,PX,PY,PZ);
        GetVehiclePos(vehicleid, X,Y,Z);
        new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
        if(Distance <= radi*radi)
        {
            return true;
        }
    }
    return false;
}

stock IsPlayerNearVehicle(playerid, vehicleid, Float:range)
{
    if(!GetVehicleModel(vehicleid)) return 0;
    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);
    return IsPlayerInRangeOfPoint(playerid, range, x, y, z);
}

//IsAHelmBike
stock IsAHelmBike(vehicleid)
{
        new result;
        new model = GetVehicleModel(vehicleid);
            switch(model)
    {
        case 509,481,510,462,448,581,522,461,521,523,463,586,468,471,571,568: result = model;
        default: result = 0;
    }
        return result;
}

//Helm System
stock SetPlayerHelm(playerid)
{
	new object;
	if(sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 0)
	{
		if(sStats[playerid][sHelm] == 1)
		{
		    object = 18645;
		}
		else if(sStats[playerid][sHelm] == 2)
		{
		    object = 18976;
		}
		else if(sStats[playerid][sHelm] == 3)
		{
		    object = 18977;
		}
		else if(sStats[playerid][sHelm] == 4)
		{
		    object = 18978;
		}
		else if(sStats[playerid][sHelm] == 5)
		{
		    object = 18979;
		}
	    switch(GetPlayerSkin(playerid))
     	{
			#define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SLOT, object, 2, (%0), (%1), (%2), (%3), (%4), (%5));
			case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
			case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
   			case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
      		case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
        	case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
         	case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
          	case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
           	case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
            case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
            case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
            case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
            case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
            case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
            case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
     	}
		if(GetPVarInt(playerid, "Angezogen") > 0 && sStats[playerid][sSonnenbrille] > 0)
		{
		    RemovePlayerAttachedObject(playerid,2);
  		}
		if(GetPVarInt(playerid, "Adminduty") > 0)
		{
		    RemovePlayerAttachedObject(playerid, 5);
		}
	}
	return 1;
}

stock RemovePlayerHelm(playerid)
{
	if(sStats[playerid][sHelm] > 0 && GetPVarInt(playerid, "Helm") == 1)
	{
	    RemovePlayerAttachedObject(playerid, SLOT);
		if(GetPVarInt(playerid, "Angezogen") == 1 && sStats[playerid][sSonnenbrille] > 0)
		{
  			new skin = GetPlayerSkin(playerid);
 	    	SetPlayerAttachedObject(playerid, 2, sStats[playerid][sSonnenbrille],2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
  		}
		if(GetPVarInt(playerid, "Adminduty") > 0)
		{
		    SetPlayerAttachedObject(playerid, 5, 19079, 17, 0.054798, -0.068864, 0.143832, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		}
    }
    return 1;
}

//Drift
stock DestroyAllDriftCP(playerid)
{
    DestroyDynamicCP(DriftCP1[playerid]),DestroyDynamicCP(DriftCP2[playerid]),DestroyDynamicCP(DriftCP3[playerid]),DestroyDynamicCP(DriftCP4[playerid]),
    DestroyDynamicCP(DriftCP5[playerid]),DestroyDynamicCP(DriftCP6[playerid]),DestroyDynamicCP(DriftCP7[playerid]),DestroyDynamicCP(DriftCP8[playerid]),
    DestroyDynamicCP(DriftCP9[playerid]),DestroyDynamicCP(DriftCP10[playerid]),DestroyDynamicCP(DriftCP11[playerid]);
}

stock SetNachDrift(playerid)
{
	//Spieler
	new string[360];
	new days,hours,mins;
	new zeit = gettime()-Driftzeit[playerid];
	new restzeit = zeit;
 	days = floatround(restzeit / 86400,floatround_floor);
 	hours = restzeit - (days * 86400);
  	hours = floatround(hours / 3600,floatround_floor);
  	mins = restzeit - ( (days * 86400) + (hours * 3600) );
   	mins = floatround(mins / 60,floatround_floor);
	Score[playerid] = mins;
	TogglePlayerControllable(playerid, false);
	SetPlayerPosEx(playerid,-310.3801,1316.8145,54.0043);
	SetPlayerCameraPos(playerid,-311.4695,1318.6599,53.9849);
	SetPlayerCameraLookAt(playerid,-312.7233,1320.7847,53.8518);
	format(string, sizeof(string), "{FFFFFF}Driftstrecke erfolgreich abgeschlossen!\n\n{FFFFFF}Benötigte Zeit: {FFFF00}%d{FFFFFF} Minuten.\n\n{FFFF00}1{FFFFFF} drücken um die Driftstrecke zu verlassen\n{FFFF00}2{FFFFFF} um zurück zur Lobby zu gelangen!",mins);
	ShowPlayerDialog(playerid,DRIFT2,DIALOG_STYLE_MSGBOX,"Driftstatistik",string,"1","2");
	if(mins < sStats[playerid][sDriftZeit])
	{
	    sStats[playerid][sDriftZeit] = mins;
	    PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/applaus.mp3");
	    SendClientMessage(playerid,Weiß,"Persönlicher Highscore geknackt!");
	}
}

//Waffenprüfung
stock SetNachWaffenP(playerid)
{
	//Bestanden
	ClearChat(playerid);
	SendClientMessage(playerid,Gelb2,"Du hast erfolgreich alle Attrappen getroffen, und somit den Test bestanden!");
	SendClientMessage(playerid,Weiß,"Viel Spass mit dem Waffenschein!");
	sStats[playerid][sWaffenschein] = 1;
	SetPVarInt(playerid, "InWschein", 0);
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, true);
	SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
	SetPlayerFacingAngle(playerid,89.5907);
	SetCameraBehindPlayer(playerid);
	SetPlayerInterior(playerid, 3);
	SetPlayerVirtualWorld(playerid, 0);
	DeletePlayer3DTextLabel(playerid,Target);
	Getroffen[playerid] = 0;
	WaffenscheinSchuss[playerid] = 0;
	WaffenscheinStep[playerid] = 0;
	Targets[playerid] = 0;
	ResetPlayerWeapons(playerid);
	return 1;
}

//GetPlayerJob
stock GetPlayerJob(playerid)
{
	new jtext[30];
	if(sStats[playerid][sJob] == 0) { jtext = "Arbeitslos"; }
	else if(sStats[playerid][sJob] == 1) { jtext = "Mechatroniker"; }
	else if(sStats[playerid][sJob] == 2) { jtext = "DJ"; }
	else if(sStats[playerid][sJob] == 3) { jtext = "Spedition"; }
	else if(sStats[playerid][sJob] == 4) { jtext = "Platzhalter"; }
	else if(sStats[playerid][sJob] == 5) { jtext = "Farmer"; }
	else if(sStats[playerid][sJob] == 6) { jtext = "Detektiv"; }
	else if(sStats[playerid][sJob] == 7) { jtext = "Drogenhändler"; }
	else if(sStats[playerid][sJob] == 8) { jtext = "Waffenhändler"; }
	return jtext;
}

//GetPlayerFraktion
stock GetPlayerFraktion(playerid)
{
	new ftext[30];
	if(sStats[playerid][sFraktion] == 0) { ftext = "Keine"; }
	else if(sStats[playerid][sFraktion] == 6) { ftext = "Crip or Die"; }
	else if(sStats[playerid][sFraktion] == 5) { ftext = "MS-14"; }
	else if(sStats[playerid][sFraktion] == 4) { ftext = "Bayside-Newstime a.G"; }
	else if(sStats[playerid][sFraktion] == 3) { ftext = "Bayside Medical-Center"; }
	else if(sStats[playerid][sFraktion] == 2) { ftext = "Bayside Fire Department"; }
	else if(sStats[playerid][sFraktion] == 1) { ftext = "Bayside Police-Department"; }
	return ftext;
}

//GetPlayerKrankheit
stock GetPlayerKrankheit(playerid)
{
    new ftext[30];
	if(sStats[playerid][sKrankheit] == 0) { ftext = "keine"; }
	else if(sStats[playerid][sKrankheit] == 1) { ftext = "Tripper"; }
	else if(sStats[playerid][sKrankheit] == 2) { ftext = "Hepatitis A"; }
	else if(sStats[playerid][sKrankheit] == 3) { ftext = "Herpes"; }
	else if(sStats[playerid][sKrankheit] == 4) { ftext = "HI-Virus"; }
	else if(sStats[playerid][sKrankheit] == 5) { ftext = "Kopfschmerzen"; }
	else if(sStats[playerid][sKrankheit] == 6) { ftext = "Lebensmittelvergiftung"; }
	else if(sStats[playerid][sKrankheit] == 7) { ftext = "Erkältung"; }
	return ftext;
}

//GetPlayerRank
stock GetPlayerRank(playerid)
{
	new ftext[45];
	if(IsACop(playerid))
	{
	    if(sStats[playerid][sRank] == 0) { ftext = "Polizeireferendar"; }
		else if(sStats[playerid][sRank] == 1) { ftext = "Polizeireferendar"; }
		else if(sStats[playerid][sRank] == 2) { ftext = "Polizeikommissar"; }
		else if(sStats[playerid][sRank] == 3) { ftext = "Polizeioberkommissar"; }
		else if(sStats[playerid][sRank] == 4) { ftext = "Polizeimeisterkommissar"; }
		else if(sStats[playerid][sRank] == 5) { ftext = "Polizeioberwachtmeisteranwärter"; }
		else if(sStats[playerid][sRank] == 6) { ftext = "Polizeidirektor"; }
	}
	if(IsAFW(playerid))
	{
		if(sStats[playerid][sRank] == 1) { ftext = "Feuerwehrmann-Anwärter"; }
		else if(sStats[playerid][sRank] == 2) { ftext = "Feuerwehrmann"; }
		else if(sStats[playerid][sRank] == 3) { ftext = "Oberfeuerwehrmann"; }
		else if(sStats[playerid][sRank] == 4) { ftext = "Hauptfeuerwehrmann"; }
		else if(sStats[playerid][sRank] == 5) { ftext = "Brandmeister"; }
		else if(sStats[playerid][sRank] == 6) { ftext = "Feuerwehrdirektor"; }
	}
	if(IsACNN(playerid))
	{
		if(sStats[playerid][sRank] == 1) { ftext = "Reporter Assistant"; }
		else if(sStats[playerid][sRank] == 2) { ftext = "Local Reporter"; }
		else if(sStats[playerid][sRank] == 3) { ftext = "Local Editor"; }
		else if(sStats[playerid][sRank] == 4) { ftext = "Network Anchor"; }
		else if(sStats[playerid][sRank] == 5) { ftext = "Network Editor"; }
		else if(sStats[playerid][sRank] == 6) { ftext = "Network Producer"; }
	}
	if(IsAMS(playerid))
	{
		if(sStats[playerid][sRank] == 1) { ftext = "Prospect"; }
		else if(sStats[playerid][sRank] == 2) { ftext = "Patched Member"; }
		else if(sStats[playerid][sRank] == 3) { ftext = "The Enforcer"; }
		else if(sStats[playerid][sRank] == 4) { ftext = "Captain"; }
		else if(sStats[playerid][sRank] == 5) { ftext = "Vice-President"; }
		else if(sStats[playerid][sRank] == 6) { ftext = "President"; }
	}
	if(IsACrip(playerid))
	{
		if(sStats[playerid][sRank] == 1) { ftext = "Prospect"; }
		else if(sStats[playerid][sRank] == 2) { ftext = "Patched Member"; }
		else if(sStats[playerid][sRank] == 3) { ftext = "The Enforcer"; }
		else if(sStats[playerid][sRank] == 4) { ftext = "Captain"; }
		else if(sStats[playerid][sRank] == 5) { ftext = "Vice-President"; }
		else if(sStats[playerid][sRank] == 6) { ftext = "President"; }
	}
	if(IsASani(playerid))
	{
		if(sStats[playerid][sRank] == 1) { ftext = "Auszubildener"; }
		else if(sStats[playerid][sRank] == 2) { ftext = "Jungarzt"; }
		else if(sStats[playerid][sRank] == 3) { ftext = "Arzt"; }
		else if(sStats[playerid][sRank] == 4) { ftext = "Sanitäter"; }
		else if(sStats[playerid][sRank] == 5) { ftext = "Vize Chefarzt"; }
		else if(sStats[playerid][sRank] == 6) { ftext = "Chefarzt"; }
	}
	return ftext;
}

//GetPlayerAdminRank
stock GetPlayerAdminRank(playerid)
{
	new atext[30];
	if(sStats[playerid][sAdminlevel] == 0) { atext = "Kein Administrator"; }
	else if(sStats[playerid][sAdminlevel] == 1) { atext = "Moderator/Scout"; }
	else if(sStats[playerid][sAdminlevel] == 2) { atext = "Supporter"; }
	else if(sStats[playerid][sAdminlevel] == 3) { atext = "Administrator"; }
	else if(sStats[playerid][sAdminlevel] == 4) { atext = "Hauptsupporter"; }
	else if(sStats[playerid][sAdminlevel] == 5) { atext = "Projektleiter"; }
	return atext;
}

//SetPlayerFrakSkin
stock SetPlayerFrakSkin(playerid)
{
	if(IsAMS(playerid))
	{
	    if(sStats[playerid][sRank] == 1 || sStats[playerid][sRank] == 2 || sStats[playerid][sRank] == 3)
	    {
     		SetPlayerSkin(playerid,114);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 5)
	    {
     		SetPlayerSkin(playerid,115);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 4)
	    {
     		SetPlayerSkin(playerid,115);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
     	if(sStats[playerid][sRank] == 6)
     	{
      		SetPlayerSkin(playerid,116);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
     	}
	}
	if(IsAFW(playerid))
 	{
  		if(sStats[playerid][sRank] == 6)
	    {
     		SetPlayerSkin(playerid,279);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
 	   	if(sStats[playerid][sRank] == 5)
	    {
     		SetPlayerSkin(playerid,278);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] < 5)
	    {
     		SetPlayerSkin(playerid,277);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
 	}
	if(IsACrip(playerid))
	{
	    if(sStats[playerid][sRank] == 1 || sStats[playerid][sRank] == 2 || sStats[playerid][sRank] == 3)
	    {
     		SetPlayerSkin(playerid,121);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 4 || sStats[playerid][sRank] == 5)
	    {
     		SetPlayerSkin(playerid,122);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
     	if(sStats[playerid][sRank] == 6)
     	{
      		SetPlayerSkin(playerid,123);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
     	}
	}
	if(IsACop(playerid))
	{
	    if(sStats[playerid][sRank] == 1)
	    {
	        SetPlayerSkin(playerid,280);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 2)
	    {
	        SetPlayerSkin(playerid,280);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 3)
	    {
	        SetPlayerSkin(playerid,281);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 4)
	    {
	        SetPlayerSkin(playerid,281);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 5)
	    {
	        SetPlayerSkin(playerid,284);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 6)
	    {
	        SetPlayerSkin(playerid,283);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	}
	if(IsASani(playerid))
	{
 		if(sStats[playerid][sRank] == 1 || sStats[playerid][sRank] == 2 || sStats[playerid][sRank] == 3 || sStats[playerid][sRank] == 4)
	    {
	        SetPlayerSkin(playerid,276);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 5)
	    {
	        SetPlayerSkin(playerid,274);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 6)
	    {
	        SetPlayerSkin(playerid,275);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	}
	if(IsACNN(playerid))
	{
	    if(sStats[playerid][sRank] == 1)
	    {
	        SetPlayerSkin(playerid,208);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 2)
	    {
	        SetPlayerSkin(playerid,227);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 3)
	    {
	        SetPlayerSkin(playerid,228);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 4)
	    {
	        SetPlayerSkin(playerid,247);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 5)
	    {
	        SetPlayerSkin(playerid,187);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 6)
	    {
	        SetPlayerSkin(playerid,17);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	}
}

//SetPlayerSkinEx
stock SetPlayerSkinEx(playerid)
{
	if(sStats[playerid][sTutorial] == 1)
	{
		if(GetPVarInt(playerid, "DJDienst") == 1)
		{
   			SetPlayerSkin(playerid,83);
   			return 1;
		}
		if(GetPVarInt(playerid, "MechaDienst") == 1)
		{
   			SetPlayerSkin(playerid,16);
   			return 1;
		}
		if(GetPVarInt(playerid, "FMDienst") == 1)
		{
   			SetPlayerSkin(playerid,161);
   			return 1;
		}
		if(GetPVarInt(playerid, "SDienst") == 1)
		{
   			SetPlayerSkin(playerid,50);
   			return 1;
		}
		if(GetPVarInt(playerid, "FDienst") == 1)
		{
	  		if(sStats[playerid][sLevel] > 1 && sStats[playerid][sLevel] < 3)
		 	{
		 	    SetPlayerSkin(playerid,277);
		 	    return 1;
		 	}
		 	else
		 	{
		 	    SetPlayerSkin(playerid,278);
		 	    return 1;
		 	}
		}
		if(GetPVarInt(playerid, "DJDienst") == 0 && GetPVarInt(playerid, "FDienst") == 0 && GetPVarInt(playerid, "MechaDienst") == 0 && GetPVarInt(playerid, "SDienst") == 0 && GetPVarInt(playerid, "FMDienst") == 0)
		{
			SetPlayerSkin(playerid,sStats[playerid][sSkin]);
			return 1;
		}
	}
	return 1;
}

//Sonnenbrilleanprobieren
stock Sonnenbrilleanprobieren(playerid)
{
	new skin = GetPlayerSkin(playerid);
	new glasseid = GetPVarInt(playerid, "Sonnenbrille");
	TogglePlayerControllable(playerid, false);
	SetPlayerAttachedObject(playerid, 2, glasseid,2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
	SetPlayerPosEx(playerid,669.4913,-572.7059,16.3359);
	SetPlayerFacingAngle(playerid,88.5723);
	SetPlayerCameraPos(playerid,666.1304,-572.5131,16.3359);
	SetPlayerCameraLookAt(playerid,666.8203,-572.5472,16.3359);
	SetPlayerVirtualWorld(playerid,1+playerid);
	SetTimerEx("Sonnenbrillekaufen", 8161, false, "d", playerid);
}

//SetHandy
stock SetHandy(playerid)
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	SetPlayerAttachedObject(playerid,9,18866,6,0.068998,0.017998,0.006999,-95.399902,2.199996,-128.200042,1.000000,1.000000,1.000000);
}

//Speedometer
stock ShowSpeedometer(playerid)
{
	if(IsAFahrrad(GetPlayerVehicleID(playerid)))
 	{
 	    SetPVarInt(playerid, "Speedometer", 0);
 		return 1;
 	}
	if(GetPVarInt(playerid, "Speedometer") <= 0)
	{
			PlayerTextDrawShow(playerid,Speedo0[playerid]);
			PlayerTextDrawShow(playerid,Speedo1[playerid]);
			PlayerTextDrawShow(playerid,Speedo3[playerid]);
			PlayerTextDrawShow(playerid,Speedo4[playerid]);
			PlayerTextDrawShow(playerid,Speedo5[playerid]);
			SetT(playerid);
			SetPVarInt(playerid, "Speedometer", 1);
	}
	return 1;
}


stock HideSpeedometer(playerid)
{
	if(IsAFahrrad(GetPlayerVehicleID(playerid)))
 	{
 	    SetPVarInt(playerid, "Speedometer", 0);
 		return 1;
 	}
	if(GetPVarInt(playerid, "Speedometer") >= 1)
	{
			PlayerTextDrawHide(playerid,Speedo0[playerid]);
			PlayerTextDrawHide(playerid,Speedo1[playerid]);
			PlayerTextDrawHide(playerid,Speedo3[playerid]);
			PlayerTextDrawHide(playerid,Speedo4[playerid]);
			PlayerTextDrawHide(playerid,Speedo5[playerid]);
			SetPVarInt(playerid, "Speedometer", 0);
	}
	return 1;
}


stock SetT(playerid)
{
	new car = GetPlayerVehicleID(playerid);
	new string[90];
	if(Kennzeichen[car] == 1)
   	{
		format(string, sizeof(string), "Tuev: ~g~%gueltig");
		PlayerTextDrawSetString(playerid,Speedo5[playerid],string);
		return 1;
   	}
   	else
   	{
   		format(string, sizeof(string), "Tuev: ~r~%ungueltig");
		PlayerTextDrawSetString(playerid,Speedo5[playerid],string);
		return 1;
	}
}

stock SetPunkte(playerid)
{
	new string[90];
	new punkte = sStats[playerid][sbap];
	if(IsAFahrrad(GetPlayerVehicleID(playerid)))
	{
		format(string, sizeof(string), "Punkte in BS: ~g~- - - - - -");
		PlayerTextDrawSetString(playerid,Speedo5[playerid],string);
	}
	if(!IsAFahrrad(GetPlayerVehicleID(playerid)))
	{
		if(punkte < 8)
		{
			format(string, sizeof(string), "Punkte in BS: ~g~%d", punkte);
			PlayerTextDrawSetString(playerid,Speedo4[playerid],string);
		}
		if(punkte > 8)
		{
			format(string, sizeof(string), "Punkte in BS: ~y~%d", punkte);
			PlayerTextDrawSetString(playerid,Speedo4[playerid],string);
		}
		if(punkte > 10)
		{
			format(string, sizeof(string), "Punkte in BS: ~r~%d", punkte);
			PlayerTextDrawSetString(playerid,Speedo4[playerid],string);
		}
		if(punkte >= 12)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    if(!IsABike(GetPlayerVehicleID(playerid)))
			    {
					RemovePlayerFromVehicle(playerid);
					sStats[playerid][sbap] = 0;
					sStats[playerid][sAutoschein] = 0;
					format(string, sizeof(string), "Punkte in BS: ~r~%d", punkte);
					PlayerTextDrawSetString(playerid,Speedo4[playerid],string);
					SendClientMessage(playerid,Gelb,"Du hattest 12 Punkte in Bayside, dein Führerschein wurde dir abgenommen.");
					SendClientMessage(playerid,Gelb,"Gehe zur Fahrschule in Los Santos und lasse dir einen neuen erstellen!");
					SendClientMessage(playerid,COLOR_LIGHTRED,"Deine Punkte in Bayside wurden auf 0 gesetzt!");
				}
    			if(IsABike(GetPlayerVehicleID(playerid)))
			    {
					RemovePlayerFromVehicle(playerid);
					sStats[playerid][sbap] = 0;
					sStats[playerid][sMotorradschein] = 0;
					format(string, sizeof(string), "Punkte in BS: ~r~%d", punkte);
					PlayerTextDrawSetString(playerid,Speedo4[playerid],string);
					SendClientMessage(playerid,Gelb,"Du hattest 12 Punkte in Bayside, dein Motorradschein wurde dir abgenommen.");
					SendClientMessage(playerid,Gelb,"Gehe zur Fahrschule in Los Santos und lasse dir einen neuen erstellen!");
					SendClientMessage(playerid,COLOR_LIGHTRED,"Deine Punkte in Bayside wurden auf 0 gesetzt!");
				}
			}
		}
	}
	return 1;
}

stock SetHealth(playerid) // Danke an Sniper für seine Zustand berechnung.
{
	new string[90];
	new Float:CarHealth;
	GetVehicleHealth(GetPlayerVehicleID(playerid),CarHealth);
	CarHealth = CarHealth - 250;
	CarHealth = CarHealth /10;
	CarHealth = CarHealth /75;
	CarHealth = CarHealth *100;
	new CarHealthIni =floatround(CarHealth,floatround_floor);
	if(CarHealthIni < 0){CarHealthIni = 0;}
	if(CarHealthIni > 101 && IsSupportCar(GetPlayerVehicleID(playerid)))
	{
		format(string, sizeof(string), "Zustand: ~g~100%");
		PlayerTextDrawSetString(playerid,Speedo3[playerid],string);
	}
	if(CarHealthIni > 50 && CarHealthIni < 101)
	{
		format(string, sizeof(string), "Zustand: ~g~%d%", CarHealthIni);
		PlayerTextDrawSetString(playerid,Speedo3[playerid],string);
	}
	if(CarHealthIni < 50)
	{
		format(string, sizeof(string), "Zustand: ~y~%d%", CarHealthIni);
		PlayerTextDrawSetString(playerid,Speedo3[playerid],string);
	}
	if(CarHealthIni < 25)
	{
		format(string, sizeof(string), "Zustand: ~r~%d%", CarHealthIni);
		PlayerTextDrawSetString(playerid,Speedo3[playerid],string);
	}
	return 1;
}

stock SetSpeed(playerid)
{
		new speed = floatround(GetVehicleSpeed(GetPlayerVehicleID(playerid),0));
		new string[145];
		if(speed <= 88)
		{
			format(string, sizeof(string), "Tempo: ~g~%d KM/h", speed);
			PlayerTextDrawSetString(playerid,Speedo0[playerid],string);
		}
		if(speed > 88)
		{
			format(string, sizeof(string), "Tempo: ~y~%d KM/h", speed);
			PlayerTextDrawSetString(playerid,Speedo0[playerid],string);
		}
		if(speed > 120)
		{
			format(string, sizeof(string), "Tempo: ~r~%d KM/h", speed);
			PlayerTextDrawSetString(playerid,Speedo0[playerid],string);
		}
		if(GetPVarInt(playerid, "InFschein") > 0)
		{
		    if(speed > 80)
	  		{
	    		format(string, sizeof(string), "Achte auf deine Geschwindigkeit, nach 3 Warnungen endet deine Prüfung. (Warnung %d/3)",GetPVarInt(playerid, "SWarnungen")+1);
       	    	SendClientMessage(playerid,Rot,string);
	  		    SetPVarInt(playerid, "SWarnungen", GetPVarInt(playerid, "SWarnungen")+1);
	  		}
	  		if(GetPVarInt(playerid, "SWarnungen") >=3)
	  		{
	  		    SetPVarInt(playerid, "SWarnungen",0);
   				ClearChat(playerid);
		  		DisablePlayerCheckpoint(playerid);
				FscheinCP[playerid] = 0;
		  		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Führerscheines leider nicht bestanden, da du 3x zu schnell gefahren bist!");
			    SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Führerschein Preises zurück bekommen!");
		   		KillTimer(rtimer[playerid]);
				SetPVarInt(playerid,"Nachricht",0);
		   		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		   		sStats[playerid][sAutoschein] = 0;
		   		GivePlayerEuro(playerid,600);
				SetPVarInt(playerid, "InFschein", 0);
				ClearAnimations(playerid);
				SetCameraBehindPlayer(playerid);
		     	TogglePlayerControllable(playerid, true);
				SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
				SetPlayerFacingAngle(playerid,89.5907);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 0);
	  		}
		}
		if(GetPVarInt(playerid, "InTschein") > 0)
		{
		    if(speed > 110)
	  		{
	    		format(string, sizeof(string), "Achte auf deine Geschwindigkeit, nach 3 Warnungen endet deine Prüfung. (Warnung %d/3)",GetPVarInt(playerid, "SWarnungen")+1);
       	    	SendClientMessage(playerid,Rot,string);
	  		    SetPVarInt(playerid, "SWarnungen", GetPVarInt(playerid, "SWarnungen")+1);
	  		}
	  		if(GetPVarInt(playerid, "SWarnungen") >=3)
	  		{
	  		    SetPVarInt(playerid, "SWarnungen",0);
   				ClearChat(playerid);
   				SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
		  		DisablePlayerCheckpoint(playerid);
				QuestCP[playerid] = 0;
		  		SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Truckerscheines leider nicht bestanden, da du 3x zu schnell gefahren bist!");
			    SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Truckerschein Preises zurück bekommen!");
		   		GivePlayerEuro(playerid,3500);
				SetPVarInt(playerid, "InTschein", 0);
				ClearAnimations(playerid);
				SetCameraBehindPlayer(playerid);
		     	TogglePlayerControllable(playerid, true);
				SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
				SetPlayerFacingAngle(playerid,89.5907);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 0);
				DestroyVehicle(Truck[playerid]);
	  		}
		}
		if(GetPVarInt(playerid, "InMschein") > 0)
		{
		    if(speed > 85)
	  		{
	    		format(string, sizeof(string), "Achte auf deine Geschwindigkeit, nach 3 Warnungen endet deine Prüfung. (Warnung %d/3)",GetPVarInt(playerid, "SWarnungen")+1);
       	    	SendClientMessage(playerid,Rot,string);
	  		    SetPVarInt(playerid, "SWarnungen", GetPVarInt(playerid, "SWarnungen")+1);
	  		}
	  		if(GetPVarInt(playerid, "SWarnungen") >=3)
	  		{
	  		    SetPVarInt(playerid, "SWarnungen",0);
		 		ClearChat(playerid);
				SendClientMessage(playerid,Gelb2,"Du hast den Praxis Teil des Motorradscheines leider nicht bestanden, da du 3x zu schnell gefahren bist!");
			    SendClientMessage(playerid,Weiß,"Du hast die Hälfte des Motorradschein Preises zurück bekommen!");
		   		KillTimer(rtimer[playerid]);
				SetPVarInt(playerid,"Nachricht",0);
		  		DisablePlayerCheckpoint(playerid);
		  		DestroyVehicle(MotorAuto[playerid]);
				FscheinCP[playerid] = 0;
		   		sStats[playerid][sMotorradschein] = 0;
		   		RemovePlayerHelm(playerid);
		   		SetPVarInt(playerid, "Helm", 0);
		   		sStats[playerid][sHelm] = 0;
		   		GivePlayerEuro(playerid,2500);
				SetPVarInt(playerid, "InMschein", 0);
				ClearAnimations(playerid);
				SetCameraBehindPlayer(playerid);
		     	TogglePlayerControllable(playerid, true);
				SetPlayerPosEx(playerid,1497.4021,1306.4576,1093.2891);
				SetPlayerFacingAngle(playerid,89.5907);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 0);
	  		}
		}
		return 1;
}

stock SetTank(playerid)
{
	new string[128];
    new tank = Tankmenge[GetPlayerVehicleID(playerid)];
    new hattank = GasMax[GetVehicleModel(GetPlayerVehicleID(playerid))-400];
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481)
	{
		format(string, sizeof(string), "Tank: - - - - - -");
		PlayerTextDrawSetString(playerid,Speedo1[playerid],string);
	}
   	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 481)
	{
	    if(tank <= hattank)
	    {
			format(string, sizeof(string), "Tank: ~g~%dl~g~/~g~%dl", tank,hattank);
			PlayerTextDrawSetString(playerid,Speedo1[playerid],string);
		}
	 	if(tank <= hattank/2)
	    {
			format(string, sizeof(string), "Tank: ~y~%dl~g~/~g~%dl", tank,hattank);
			PlayerTextDrawSetString(playerid,Speedo1[playerid],string);
		}
		if(tank <= hattank/3)
	    {
			format(string, sizeof(string), "Tank: ~r~%dl~g~/~g~%dl", tank,hattank);
			PlayerTextDrawSetString(playerid,Speedo1[playerid],string);
		}
	}
	return 1;
}

//UpdateSpeedo
stock UpdateSpeedometer(playerid)
{
	if(GetPVarInt(playerid, "Speedometer") == 1 && IsPlayerInAnyVehicle(playerid))
	{
		SetSpeed(playerid); // Um die Geschnwindigkeit zu ermitteln!
		SetHealth(playerid); // Um den Zustand zu ermitteln!
		SetPunkte(playerid); // Um den Punkte in SA zu ermitteln!
		SetTank(playerid); // Tank ermitteln
	}
	return 1;
}

//Blitzer
stock CreateSpeedCam(Float:x,Float:y,Float:z,Float:rot,range,limit,fine)
{
	if(currentid +1 > CAMERA_LIMIT)
	{
	    print("Error! Das maximum an Blitzern wurde erreicht!");
	    return -1;
	}
	currentid++;
	SpeedCameras[currentid][_x] = x;
	SpeedCameras[currentid][_y] = y;
	SpeedCameras[currentid][_z] = z;
	SpeedCameras[currentid][_rot] = rot;
	SpeedCameras[currentid][_range] = range;
	SpeedCameras[currentid][_limit] = limit;
	SpeedCameras[currentid][_fine] = fine;
	SpeedCameras[currentid][_usemph] = 0;
	SpeedCameras[currentid][_objectid] = CreateDynamicObject(18880,x,y,z-1,0,0,rot+180);
	SpeedCameras[currentid][_active] = true;
	return currentid;
}
stock DestroySpeedCam(cameraid)
{
    SpeedCameras[cameraid][_active] = false;
    DestroyObject(SpeedCameras[cameraid][_objectid]);
	return 1;
}
stock SetSpeedCamRange(cameraid,limit)
{
	SpeedCameras[cameraid][_limit] = limit;
	return 1;
}
stock SetSpeedCamFine(cameraid,fine)
{
    SpeedCameras[cameraid][_fine] = fine;
	return 1;
}

//Feuerpunch
stock GetXYInFrontOfPoint(Float:x, Float:y, &Float:x2, &Float:y2, Float:A, Float:distance)
{
    x2 = x + (distance * floatsin(-A, degrees));
    y2 = y + (distance * floatcos(-A, degrees));
}

//Mechatroniker

stock Hebean(playerid)
{
	if(sStats[playerid][sJob] != 1)
	{
	    SendClientMessage(playerid,Rot,"Du bist kein Mechatroniker!");
	    return 1;
	}
	if(Hebeann == 1)
	{
	    SendClientMessage(playerid,Rot,"Die Hebebühne wird gerade schon benutzt!");
	    return 1;
	}
	if(GetPVarInt(playerid, "Hebe") == 1)
	{
 		SendClientMessage(playerid,Rot,"Du benutzt die Hebebühne schon!");
	    return 1;
	}
	    PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
	    SetTimerEx("StopSoundEx", 2131, false, "i", playerid);
	    MoveDynamicObject(tm1,-2549.8967285156, 2353.2314453125, -2.1156234741211,1);
	    MoveDynamicObject(tm2,-2542.8896484375, 2353.2609863281, -2.0906245708466,1);
	    MoveDynamicObject(tm3,-2546.0920410156, 2369.5224609375, 6.3418111801147,1);
	    MoveDynamicObject(tm4,-2549.3095703125, 2360.1176757813, 5.1489601135254,1);
	    MoveDynamicObject(tm5,-2549.3413085938, 2358.603515625, 5.1489601135254,1);
	    MoveDynamicObject(tm6,-2546.3991699219, 2360.08984375, 5.1489601135254,1);
	    MoveDynamicObject(tm7,-2546.4094238281, 2358.595703125, 5.1489601135254,1);
	    MoveDynamicObject(tm8,-2549.3608398438, 2357.1069335938, 5.1489601135254,1);
	    MoveDynamicObject(tm9,-2549.3664550781, 2355.6201171875, 5.1489601135254,1);
	    MoveDynamicObject(tm10,-2549.376953125, 2354.1137695313, 5.1489601135254,1);
	    MoveDynamicObject(tm11,-2549.3869628906, 2352.64453125, 5.1489601135254,1);
	    MoveDynamicObject(tm12,-2546.4228515625, 2357.1000976563, 5.1489601135254,1);
	    MoveDynamicObject(tm13,-2546.4536132813, 2355.6142578125, 5.1489601135254,1);
	    MoveDynamicObject(tm14,-2546.4523925781, 2354.1245117188, 5.1489601135254,1);
	    MoveDynamicObject(tm15,-2546.4494628906, 2352.6381835938, 5.1489601135254,1);
	    MoveDynamicObject(tm16,-2543.4982910156, 2360.0749511719, 5.1489601135254,1);
	    MoveDynamicObject(tm17,-2543.4951171875, 2358.5891113281, 5.1489601135254,1);
	    MoveDynamicObject(tm18,-2543.4892578125, 2357.0969238281, 5.1489601135254,1);
	    MoveDynamicObject(tm19,-2543.4897460938, 2355.6020507813, 5.1489601135254,1);
	    MoveDynamicObject(tm20,-2543.4997558594, 2354.1281738281, 5.1489601135254,1);
	    MoveDynamicObject(tm21,-2543.4938964844, 2352.6325683594, 5.1489601135254,1);
	    MoveDynamicObject(tm22,-2544.0925292969, 2360.7119140625, 6.6717939376831,1);
	    MoveDynamicObject(tm23,-2548.3371582031, 2360.7231445313, 6.696795463562,1);
	    MoveDynamicObject(tm24,-2550.5859375, 2358.6376953125, 6.7217955589294,1);
	    MoveDynamicObject(tm25,-2550.5607910156, 2354.4306640625, 6.7467956542969,1);

	    Hebeann = 1;
	    SetPVarInt(playerid,"Hebe",1);

	    new string[128];
   		format(string, sizeof(string), "* Mechatroniker %s fährt die Hebebühne hoch.", GetName(playerid));
		ProxDetector(15.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	    ShowPlayerDialog(playerid, HEBE1, DIALOG_STYLE_LIST, "Hebebühne","{00AA00}1. {FFFFFF}Farbe ändern {FFFF00}(100)\n{00AA00}2. {FFFFFF}Nitro einbauen {FFFF00}(1000)\n{00AA00}3. {FFFFFF}Tank befüllen {FFFF00}(Normaler Liter Preis)\n{00AA00}4. {FFFFFF}Auto reparieren {FFFF00}(600)\n{00AA00}5. {FFFFFF}Motorschaden reparieren {FFFF00}(500)", "Auswählen", "Abbrechen");
	    return 1;
}

stock Hebeaus(playerid)
{
	if(Hebeann == 1)
	{
	    PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
	    SetTimerEx("StopSoundEx", 2131, false, "i", playerid);
 		Hebeann = 0;
	    SetPVarInt(playerid,"Hebe",0);
		MoveDynamicObject(tm1,-2549.8999023438, 2353.1999511719, -4.3000001907349,1);
		MoveDynamicObject(tm2,-2542.8999023438, 2353.3000488281, -4.4000000953674,1);
		MoveDynamicObject(tm3,-2546.0920410156, 2369.5224609375, 6.3418111801147,1);
		MoveDynamicObject(tm4,-2549.3000488281, 2360.1000976563, 3,1);
		MoveDynamicObject(tm5,-2549.3000488281, 2358.6000976563, 3,1);
		MoveDynamicObject(tm6,-2546.3999023438, 2360.1000976563, 3,1);
		MoveDynamicObject(tm7,-2546.3999023438, 2358.6000976563, 3,1);
		MoveDynamicObject(tm8,-2549.3999023438, 2357.1000976563, 3,1);
		MoveDynamicObject(tm9,-2549.3999023438, 2355.6000976563, 3,1);
		MoveDynamicObject(tm10,-2549.3999023438, 2354.1000976563, 3,1);
		MoveDynamicObject(tm11,-2549.3999023438, 2352.6000976563, 3,1);
		MoveDynamicObject(tm12,-2546.3999023438, 2357.1000976563, 3,1);
		MoveDynamicObject(tm13,-2546.5, 2355.6000976563, 3,1);
		MoveDynamicObject(tm14,-2546.5, 2354.1000976563, 3,1);
		MoveDynamicObject(tm15,-2546.3999023438, 2352.6000976563, 3,1);
		MoveDynamicObject(tm16,-2543.5, 2360.1000976563, 3,1);
		MoveDynamicObject(tm17,-2543.5, 2358.6000976563, 3,1);
		MoveDynamicObject(tm18,-2543.5, 2357.1000976563, 3,1);
		MoveDynamicObject(tm19,-2543.5, 2355.6000976563, 3,1);
		MoveDynamicObject(tm20,-2543.5, 2354.1000976563, 3,1);
		MoveDynamicObject(tm21,-2543.5, 2352.6000976563, 3,1);
		MoveDynamicObject(tm22,-2544.1000976563, 2360.6999511719, 4.5,1);
		MoveDynamicObject(tm23,-2548.3000488281, 2360.6999511719, 4.5,1);
		MoveDynamicObject(tm24,-2550.6000976563, 2358.6000976563, 4.5,1);
		MoveDynamicObject(tm25,-2550.6000976563, 2354.3999023438, 4.5,1);

  		new string[128];
   		format(string, sizeof(string), "* Mechatroniker %s fährt die Hebebühne runter.", GetName(playerid));
		ProxDetector(15.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	}
	return 1;
}

stock Feuerwehreinsatz()
{
	//Feuersystem
	new string[128];
	new Zufall = random(15);
	switch(Zufall)
	{
		case 0:
		{
			//Passiert nix
		}
		case 1:
		{//BSN Feuer
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				bsnbrand = 1;
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand beim Burger Shot gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				if(IsPlayerNPC(p))
				{
					new npcname[MAX_PLAYER_NAME];
					GetPlayerName(p, npcname, sizeof(npcname));
					if(!strcmp(npcname, "Jan", true))
					{
						Kick(p);
					}
				}
			}
			AddFire(-2484.7598,2237.2810,4.8438); // BSN Feuer
			AddFire(-2482.8057,2237.2810,4.8438); // BSN Feuer
			AddFire(-2480.8831,2237.2810,4.8438); // BSN Feuer
			AddFire(-2478.0110,2237.2810,4.8428); // BSN Feuer
			AddFire(-2476.4924,2239.8882,4.8418); // BSN Feuer
			AddFire(-2470.4302,2241.4353,4.8155); // BSN Feuer
			AddFire(-2465.4978,2240.2610,4.7879); // BSN Feuer
			AddFire(-2462.7852,2231.4419,4.8438); // BSN Feuer
			AddFire(-2462.7854,2226.6587,4.8438); // BSN Feuer
			AddFire(-2485.5928,2238.8286,8.5463); // BSN Feuer
			AddFire(-2483.1653,2238.5769,8.8412); // BSN Feuer
			AddFire(-2480.3174,2238.5769,8.8412); // BSN Feuer
			AddFire(-2479.3267,2239.1934,8.8413); // BSN Feuer
			AddFire(-2476.1721,2240.9668,8.8696); // BSN Feuer
			AddFire(-2475.4407,2240.9663,8.8701); // BSN Feuer
			AddFire(-2467.6145,2240.8552,10.4293); // BSN Feuer
			AddFire(-2464.4163,2240.9324,8.9099); // BSN Feuer
			AddFire(-2463.2559,2240.9355,8.9062); // BSN Feuer
		}
		case 2:
		{//Kirchen Feuer
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				kirchenbrand = 1;
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand bei der Kirche gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
			}
			AddFire(-2483.5647,2409.2961,17.1094); // Feuer bei der Kirche
			AddFire(-2481.9036,2406.4111,17.1094); // Feuer bei der Kirche
			AddFire(-2480.6282,2404.2026,17.1094); // Feuer bei der Kirche
			AddFire(-2483.5474,2409.2656,19.1094); // Feuer bei der Kirche
			AddFire(-2481.9478,2406.4890,19.1094); // Feuer bei der Kirche
			AddFire(-2480.4475,2403.8972,19.4770); // Feuer bei der Kirche
			AddFire(-2478.6379,2402.0530,18.0268); // Feuer bei der Kirche
			AddFire(-2475.9614,2399.9131,15.9502); // Feuer bei der Kirche
			AddFire(-2474.4888,2400.7607,16.3252); // Feuer bei der Kirche
			AddFire(-2473.7446,2405.9275,16.6625); // Feuer bei der Kirche
			AddFire(-2469.9878,2408.0974,16.6621); // Feuer bei der Kirche
			AddFire(-2465.6521,2410.5972,16.6681); // Feuer bei der Kirche
		}
		case 3:
		{//Kleidungsladen Feuer
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand bei dem Kleidungsladen gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
			}
			AddFire(-2537.3252,2318.6868,4.9844); // Kleidungsladen Feuer
			AddFire(-2538.6433,2318.7700,4.9844); // Kleidungsladen Feuer
			AddFire(-2540.5894,2319.8599,4.9844); // Kleidungsladen Feuer
			AddFire(-2534.2090,2320.0442,4.9844); // Kleidungsladen Feuer
			AddFire(-2532.3953,2321.1211,4.9844); // Kleidungsladen Feuer
			AddFire(-2530.6724,2321.4839,4.9844); // Kleidungsladen Feuer
			AddFire(-2528.1938,2321.4832,4.9844); // Kleidungsladen Feuer
			AddFire(-2545.7876,2321.4841,4.9835); // Kleidungsladen Feuer
			AddFire(-2546.9468,2321.4832,4.9829); // Kleidungsladen Feuer
			AddFire(-2545.0920,2321.4832,4.9847); // Kleidungsladen Feuer
			AddFire(-2543.0344,2321.2336,4.9872); // Kleidungsladen Feuer
			AddFire(-2532.2175,2321.2271,4.9844); // Kleidungsladen Feuer
			AddFire(-2530.5051,2321.4917,4.9844); // Kleidungsladen Feuer
			AddFire(-2528.1445,2321.4868,4.9844); // Kleidungsladen Feuer
		}
		case 4:
		{//Haus1 Feuer
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				haus1brand = 1;
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand bei dem Haus hinter der Spedition gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
			}
			AddFire(-2348.3213,2423.5664,7.3295); // Haus 1 Feuer
			AddFire(-2347.4041,2422.9419,7.3294); // Haus 1 Feuer
			AddFire(-2344.0840,2423.7266,7.3200); // Haus 1 Feuer
			AddFire(-2342.8848,2422.9165,7.3177); // Haus 1 Feuer
			AddFire(-2349.5657,2427.4316,7.3411); // Haus 1 Feuer
			AddFire(-2350.7742,2428.2488,7.3772); // Haus 1 Feuer
			AddFire(-2348.5591,2423.7251,9.3296); // Haus 1 Feuer
			AddFire(-2349.2388,2427.2122,9.3279); // Haus 1 Feuer
			AddFire(-2350.1162,2427.8049,9.3635); // Haus 1 Feuer
			AddFire(-2342.0095,2422.3242,9.3160); // Haus 1 Feuer
			AddFire(-2338.1333,2426.8516,7.3047); // Haus 1 Feuer
			AddFire(-2336.8875,2428.7070,7.3120); // Haus 1 Feuer
			AddFire(-2335.2957,2432.0374,7.3047); // Haus 1 Feuer
			AddFire(-2336.0718,2435.5808,7.3047); // Haus 1 Feuer
		}
		case 5:
		{//Bank Feuer
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				bankbrand = 1;
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand bei Bank gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
			}
			AddFire(-2288.5310,2281.9810,6.0922); // Bank Feuer
			AddFire(-2289.1423,2282.1497,6.0922); // Bank Feuer
			AddFire(-2290.4954,2282.1497,6.0922); // Bank Feuer
			AddFire(-2292.6343,2282.1494,6.0922); // Bank Feuer
			AddFire(-2293.2971,2280.9136,6.0922); // Bank Feuer
			AddFire(-2295.3513,2280.8965,6.0985); // Bank Feuer
			AddFire(-2296.1614,2282.1479,6.0922); // Bank Feuer
			AddFire(-2297.8669,2282.1479,6.0922); // Bank Feuer
			AddFire(-2299.7820,2282.1494,6.0985); // Bank Feuer
			AddFire(-2301.0120,2282.1497,5.8786); // Bank Feuer
			AddFire(-2301.2666,2280.9231,5.6826); // Bank Feuer
			AddFire(-2292.6396,2282.1475,8.0922); // Bank Feuer
			AddFire(-2290.4194,2282.1475,8.0922); // Bank Feuer
			AddFire(-2288.6567,2282.1499,8.0922); // Bank Feuer
			AddFire(-2296.8767,2282.1499,8.0922); // Bank Feuer
			AddFire(-2298.4417,2282.1499,8.0922); // Bank Feuer
			AddFire(-2293.9072,2280.9121,7.1233); // Bank Feuer
		}
		case 6:
		{//Haus 2 Feuer
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				haus2brand = 1;
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand bei einem Haus neben dem Burger Shot gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
			}
			AddFire(-2519.7268,2236.8899,5.1875); // Haus 2 Brand
			AddFire(-2517.9922,2236.0845,5.1875); // Haus 2 Brand
			AddFire(-2520.5696,2237.2820,5.1875); // Haus 2 Brand
			AddFire(-2522.7510,2238.2957,5.3984); // Haus 2 Brand
			AddFire(-2524.4885,2239.1030,5.4058); // Haus 2 Brand
			AddFire(-2526.6113,2240.0896,5.4058); // Haus 2 Brand
			AddFire(-2528.7786,2241.0967,5.4058); // Haus 2 Brand
			AddFire(-2528.6140,2242.8005,4.9844); // Haus 2 Brand
			AddFire(-2527.9541,2244.2202,4.9844); // Haus 2 Brand
			AddFire(-2528.9917,2246.2893,4.9844); // Haus 2 Brand
			AddFire(-2531.1414,2247.0552,4.9844); // Haus 2 Brand
			AddFire(-2532.1765,2247.5317,4.9844); // Haus 2 Brand
			AddFire(-2526.1489,2240.8271,8.2259); // Haus 2 Brand
			AddFire(-2525.0837,2239.9980,8.2259); // Haus 2 Brand
			AddFire(-2523.3972,2239.4131,8.2259); // Haus 2 Brand
			AddFire(-2519.8279,2237.6563,8.2259); // Haus 2 Brand
			AddFire(-2516.8574,2236.6577,8.2259); // Haus 2 Brand
		}
		case 7:
		{//Rathaus Feuer
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand beim Rathaus gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
			}
			AddFire(-2240.7222,2328.8127,5.2325); // Rathaus Feuer
			AddFire(-2240.7195,2325.9617,5.2320); // Rathaus Feuer
			AddFire(-2240.7197,2323.3022,5.2313); // Rathaus Feuer
			AddFire(-2240.7197,2321.1660,5.2308); // Rathaus Feuer
			AddFire(-2240.7170,2318.1611,5.2303); // Rathaus Feuer
			AddFire(-2240.7170,2317.6575,5.2302); // Rathaus Feuer
			AddFire(-2240.7178,2311.9788,5.2287); // Rathaus Feuer
			AddFire(-2240.7195,2313.5833,5.2290); // Rathaus Feuer
			AddFire(-2240.7212,2315.8621,5.2294); // Rathaus Feuer
			AddFire(-2241.7183,2310.3799,5.1562); // Rathaus Feuer
			AddFire(-2240.7163,2322.0095,5.2313); // Rathaus Feuer
			AddFire(-2240.7163,2319.5859,5.2307); // Rathaus Feuer
			AddFire(-2240.7163,2317.6648,5.2302); // Rathaus Feuer
			AddFire(-2240.7192,2312.9158,5.2288); // Rathaus Feuer
			AddFire(-2240.7166,2326.7046,5.2324); // Rathaus Feuer
			AddFire(-2243.7866,2330.0598,4.9676); // Rathaus Feuer
			AddFire(-2243.7852,2304.4949,4.9676); // Rathaus Feuer
			AddFire(-2240.7227,2306.5850,5.2534); // Rathaus Feuer
		}
		case 8:
		{//Ammunation Feuer
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				ammubrand = 1;
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer (kleiner) Brand beim Ammunation Shop gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
			}
			AddFire(-2280.0464,2320.0874,4.9635); // Rathaus Feuer
			AddFire(-2280.0464,2321.0464,4.9635); // Rathaus Feuer
			AddFire(-2280.0464,2322.9309,4.9635); // Rathaus Feuer
			AddFire(-2280.0464,2324.8594,4.9635); // Rathaus Feuer
			AddFire(-2280.0464,2326.8901,4.9635); // Rathaus Feuer
			AddFire(-2280.3083,2328.1807,5.0776); // Rathaus Feuer
			AddFire(-2280.3796,2329.8496,5.0776); // Rathaus Feuer
			AddFire(-2280.3792,2330.1255,5.0776); // Rathaus Feuer
			AddFire(-2280.0427,2332.0698,4.9636); // Rathaus Feuer
			AddFire(-2280.0427,2333.8684,4.9636); // Rathaus Feuer
			AddFire(-2280.0427,2335.7617,4.9636); // Rathaus Feuer
			AddFire(-2279.3389,2338.0916,4.9646); // Rathaus Feuer
		}
		case 9:
		{
			//Passiert nix
		}
		case 10:
		{//Casino Brand
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				casinobrand = 1;
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand beim Casino gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				if(IsPlayerNPC(p))
				{
					new npcname[MAX_PLAYER_NAME];
					GetPlayerName(p, npcname, sizeof(npcname));
					if(!strcmp(npcname, "Ralle", true))
					{
						Kick(p);
					}
					if(!strcmp(npcname, "Dennis", true))
					{
						Kick(p);
					}
				}
			}
			AddFire(-2445.8508,2277.6355,5.0542); // Casino Feuer
			AddFire(-2446.2397,2278.3420,5.0527); // Casino Feuer
			AddFire(-2446.6228,2279.0386,5.0514); // Casino Feuer
			AddFire(-2446.9697,2279.8738,5.0498); // Casino Feuer
			AddFire(-2447.0266,2279.9800,5.0496); // Casino Feuer
			AddFire(-2447.1230,2281.5178,5.0457); // Casino Feuer
			AddFire(-2446.5708,2283.4375,5.0479); // Casino Feuer
			AddFire(-2445.7175,2285.2341,5.0730); // Casino Feuer
			AddFire(-2447.3247,2285.2322,5.0421); // Casino Feuer
			AddFire(-2446.9609,2287.2820,5.0735); // Casino Feuer
			AddFire(-2445.2942,2287.2795,5.0735); // Casino Feuer
			AddFire(-2441.2048,2287.2783,5.0735); // Casino Feuer
			AddFire(-2441.2021,2288.3364,5.0737); // Casino Feuer
			AddFire(-2441.2009,2289.7317,5.0741); // Casino Feuer
			AddFire(-2441.2031,2291.1467,5.0744); // Casino Feuer
			AddFire(-2441.2058,2292.6609,5.0748); // Casino Feuer
			AddFire(-2441.2126,2294.0232,5.0751); // Casino Feuer
			AddFire(-2441.2153,2295.7314,5.0755); // Casino Feuer
			AddFire(-2441.2175,2297.1780,5.0759); // Casino Feuer
			AddFire(-2440.9724,2275.2148,5.0698); // Casino Feuer
			AddFire(-2440.9697,2273.8730,5.0698); // Casino Feuer
			AddFire(-2440.9661,2273.0081,5.0698); // Casino Feuer
			AddFire(-2440.9661,2272.3806,5.0698); // Casino Feuer
			AddFire(-2440.9675,2271.4451,5.0698); // Casino Feuer
			AddFire(-2440.9695,2270.4612,5.0698); // Casino Feuer
			AddFire(-2440.9700,2269.6360,5.0706); // Casino Feuer
			AddFire(-2440.9722,2268.4907,5.0723); // Casino Feuer
			AddFire(-2440.9746,2267.3308,5.0740); // Casino Feuer
			AddFire(-2440.9773,2265.9585,5.0760); // Casino Feuer
			AddFire(-2440.9802,2264.4644,5.0784); // Casino Feuer
		}
		case 11:
		{//Handyladen Brand
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				hladenbrand = 1;
				brand = 1;
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Es wurde ein neuer Brand beim Handyladen gemeldet.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Löschwagen und Feuerlöscher dorthin");
				SendClientMessage(p,Weiß,"und versucht den Brand zu löschen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreicher Löschung erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Brandmeldung{FF0000}-----------------------------");
			}
			AddFire(-2512.5239,2321.6223,4.9844); // Handyladen Feuer
			AddFire(-2512.8628,2321.4839,4.9844); // Handyladen Feuer
			AddFire(-2514.6340,2321.4836,4.9844); // Handyladen Feuer
			AddFire(-2516.3835,2320.5557,4.9844); // Handyladen Feuer
			AddFire(-2516.9453,2320.0264,4.9844); // Handyladen Feuer
			AddFire(-2515.7332,2321.3894,4.9844); // Handyladen Feuer
			AddFire(-2517.9722,2320.0398,4.9844); // Handyladen Feuer
			AddFire(-2518.7900,2320.2673,4.9844); // Handyladen Feuer
			AddFire(-2519.7581,2319.5947,4.9844); // Handyladen Feuer
			AddFire(-2520.7224,2320.0056,4.9844); // Handyladen Feuer
			AddFire(-2521.3740,2320.7146,4.9844); // Handyladen Feuer
			AddFire(-2522.1880,2321.4807,4.9844); // Handyladen Feuer
			AddFire(-2523.1919,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2524.1748,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2525.1545,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2526.1396,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2527.0500,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2528.1099,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2529.1702,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2530.3003,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2531.1418,2321.4827,4.9844); // Handyladen Feuer
			AddFire(-2524.3091,2321.6287,4.9844); // Handyladen Feuer
			AddFire(-2520.7388,2320.9668,4.9844); // Handyladen Feuer
			AddFire(-2519.7261,2320.9431,4.9844); // Handyladen Feuer
			AddFire(-2518.3401,2320.8530,4.9844); // Handyladen Feuer
			AddFire(-2518.0005,2320.2029,4.9844); // Handyladen Feuer
			AddFire(-2518.7988,2319.8994,4.9844); // Handyladen Feuer
			AddFire(-2519.5386,2320.2026,4.9844); // Handyladen Feuer
		}
		case 12:
		{//Baumeinsatz 24/7
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Gefahrenmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Vor dem 24/7 Shop droht ein Baum auf die Straße zu fallen.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Einsatzwagen und Kettensäge dorthin");
				SendClientMessage(p,Weiß,"und versucht den Baum zu fällen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreichem Einsatz erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Gefahrenmeldung{FF0000}-----------------------------");
			}
			baumeinsatz = 1;
			baum1 = CreateObject(737,-2503.89990234,2336.69995117,4.09999990,0.00000000,346.00000000,114.00015259); // Baum vor dem 24/7 Shop
		}
		case 13:
		{//Baumeinsatz Spedition
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(sStats[p][sJob] == 4 && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Gefahrenmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Vor der Spedition droht ein Baum auf die Straße zu fallen.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Einsatzwagen und Kettensäge dorthin");
				SendClientMessage(p,Weiß,"und versucht den Baum zu fällen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreichem Einsatz erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Gefahrenmeldung{FF0000}-----------------------------");
			}
			baum2 = CreateObject(737,-2387.30004883,2339.69995117,4.09999990,0.00000000,321.75000000,307.00000000); //Baum vor der Spedition
			baumeinsatz = 1;
		}
		case 14:
		{//Baumeinsatz Pferderennbahn
 			for(new p = 0; p < MAX_PLAYERS; p++)
 			{
				if(IsAFW(p) && GetPVarInt(p, "FDienst") == 1 && GetPVarInt(p, "Pieper") == 1 && FeuerwehrOn >= 1)
				{
					PlayAudioStreamForPlayer(p, "http://www.bayside-roleplay.de/audiogta/pieper.mp3");
					SetTimerEx("StopAudioStream", 15017, false, "d", p);
					SendClientMessage(p,Weiß,"Dein Pieper fängt an zu piepen!");
					format(string, sizeof(string), "* %s's Pieper fängt an zu piepen.", GetName(p));
					ProxDetector(5.0, p, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				ClearChat(p);
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Gefahrenmeldung{FF0000}-----------------------------");
				SendClientMessage(p,Weiß,"Vor der Pferderennbahn droht ein Baum auf die Straße zu fallen.");
				SendClientMessage(p,Weiß,"Bitte begibt euch mit Einsatzwagen und Kettensäge dorthin");
				SendClientMessage(p,Weiß,"und versucht den Baum zu fällen!");
				SendClientMessage(p,Gelb2,"Bei erfolgreichem Einsatz erwartet euch eine Prämie beim nächsten Zahltag!");
				SendClientMessage(p,Rot,"{FF0000}-----------------------------{FFFFFF}Gefahrenmeldung{FF0000}-----------------------------");
			}
			baumeinsatz = 1;
			baum3 = CreateObject(737,-2536.69995117,2272.50000000,4.30000019,336.79602051,317.94482422,316.43206787); //Baum vor Pferderennbahn
		}
		case 15:
		{
			//Passiert nix
		}
	}
}

//GetClosestVehicle
stock GetClosestVehicle(playerid,Float:max = 3.0)
{
	new Float:pos[3], id = -1, Float:temp;
	for(new v = 0; v <= MAX_VEHICLES; v++)
	{
		GetVehiclePos(v,pos[0],pos[1],pos[2]);
		temp = GetPlayerDistanceFromPoint(playerid,pos[0],pos[1],pos[2]);
		if(temp < max)
		{
			max = temp;
			id = v;
		}
	}
	return id;
}

//PushPlayer
stock PushPlayer(playerid, Float:X1, Float:Y2)
{
    new
       Float:pX1,
       Float:pY2,
       Float:pZ3;
       GetPlayerPos(playerid, X1, Y2, pZ3);

    new Float:ang = (-acos((X1 - pX1) / floatsqroot((X1 - pX1)*(X1 - pX1) + (Y2 - pY2)*(Y2 - pY2))) - 90.0);
    pX1 = (-3 * floatsin(-ang, degrees));
    pY2= (-3 * floatcos(-ang, degrees));

    if(GetPlayerState(playerid) == 2)
    {
        SetVehicleVelocity(GetPlayerVehicleID(playerid), pX1+5, pY2+5, 100.0);
        SetVehicleHealth(GetPlayerVehicleID(playerid), 15.0);
    }
    else if(GetPlayerState(playerid) == 1)
    {
        SetPlayerVelocity(playerid, pX1+5, pY2+5,100.0);
    }
    SetPlayerHealth(playerid, 15.0);
    return 0;
}

//SetPlayerToFacePlayer
stock SetPlayerToFacePlayer(playerid, targetid) // From a_angles.inc ( Tannz0rz )
{

	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, X, Y, Z);
	GetPlayerPos(playerid, pX, pY, pZ);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);

	SetPlayerFacingAngle(playerid, ang);

 	return 0;

}

//Gangsterauto
stock PlaySoundCool(playerid)
{
    new Float:px,Float:py,Float:pz;
	GetPlayerPos(playerid, px, py, pz);
 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInRangeOfPoint(i,15.0,px,py,pz))
		{
			PlayAudioStreamForPlayer(i, "http://www.bayside-roleplay.de/audiogta/gangster.mp3");
			SetPVarInt(i, "GMusik", 1);
		}
	}
}

//SendClientMessageEx
stock SendClientMessageEx(playerid,color,type[],{Float,_}:...)
{
	new string[128];
	for(new i = 0;i<numargs() -2;i++)
	{
	    switch(type[i])
	    {
	        case 's':
	        {
				new result[128];
				for(new a= 0;getarg(i +3,a) != 0;a++)
				{
				    result[a] = getarg(i +3,a);
				}
				if(!strlen(string))
				{
				    format(string,sizeof string,"%s",result);
				} else format(string,sizeof string,"%s%s",string,result);
	        }

	        case 'i':
	        {
	            new result = getarg(i +3);
				if(!strlen(string))
				{
				    format(string,sizeof string,"%i",result);
				} else format(string,sizeof string,"%s%i",string,result);
	        }

	        case 'f':
	        {
				new Float:result = Float:getarg(i +3);
				if(!strlen(string))
				{
				    format(string,sizeof string,"%f",result);
				} else format(string,sizeof string,"%s%f",string,result);
	        }
	    }
	}
    SendClientMessage(playerid,color,string);
    return 1;
}

//Nutte Blowjob
stock StopShow()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPVarInt(i, "InDerShow") == 1)
		{
		    ConnectNPC("Dominique","nutte1");
			SetPlayerHealth(i,100.0);
			SetPlayerPosEx(i,-2617.7407,2436.3701,15.0689);
			SetPlayerFacingAngle(i,64.3041);
			SetPlayerInterior(i,0);
			SetCameraBehindPlayer(i);
			nutte = 0;
			ClearChat(i);
			if(GetPVarInt(i, "Kondom") == 1)
			{
				SendClientMessage(i,Weiß,"Nach der Vorführung fühlst du dich sehr erholt du strahlst vor Glück.");
			    SendClientMessage(i,Weiß,"Deine Leben ist wieder auf 100 angestiegen.");
		    }
   			if(GetPVarInt(i, "Kondom") <= 0)
			{
			new krank = random(7);
			switch(krank)
			{
				case 0:
				{
					SendClientMessage(i,Weiß,"Nach der Vorführung fühlst du dich sehr erholt du strahlst vor Glück.");
				    SendClientMessage(i,Weiß,"Deine Leben ist wieder auf 100 angestiegen.");
				}
				case 1:
				{
					SendClientMessage(i,Weiß,"Nach der Vorführung fühlst du dich nicht so gut.");
			    	SendClientMessage(i,Weiß,"Da du Oralsex ohne Kondom hattest, und die Prostituierte nicht sauber war, hast du dir einen {FFFF00}Tripper{FFFFFF} eingefangen.");
			    	SendClientMessage(i,Gelb2,"Info: Besuche am besten das Krankenhaus, oder rufe dir einen Krankenwagen und lasse dich untersuchen.");
			    	sStats[i][sKrankheit] = 1;
				}
				case 2:
				{
					SendClientMessage(i,Weiß,"Nach der Vorführung fühlst du dich sehr erholt du strahlst vor Glück.");
			    	SendClientMessage(i,Weiß,"Deine Leben ist wieder auf 100 angestiegen.");
				}
				case 3:
				{
					SendClientMessage(i,Weiß,"Nach der Vorführung fühlst du dich nicht so gut.");
        			SendClientMessage(i,Weiß,"Da du Oralsex ohne Kondom hattest, und die Prostituierte nicht sauber war, hast du dir {FFFF00}Herpes{FFFFFF} eingefangen.");
			    	SendClientMessage(i,Gelb2,"Info: Besuche am besten das Krankenhaus, oder rufe dir einen Krankenwagen und lasse dich untersuchen.");
			    	sStats[i][sKrankheit] = 3;
				}
				case 4:
				{
					SendClientMessage(i,Weiß,"Nach der Vorführung fühlst du dich sehr erholt du strahlst vor Glück.");
			    	SendClientMessage(i,Weiß,"Deine Leben ist wieder auf 100 angestiegen.");
				}
				case 5:
				{
					SendClientMessage(i,Weiß,"Nach der Vorführung fühlst du dich nicht so gut.");
			    	SendClientMessage(i,Weiß,"Da du Oralsex ohne Kondom hattest, und die Prostituierte nicht sauber war, hast du dir {FFFF00}Hepatitis A{FFFFFF} eingefangen.");
			    	SendClientMessage(i,Gelb2,"Info: Besuche am besten das Krankenhaus, oder rufe dir einen Krankenwagen und lasse dich untersuchen.");
			    	sStats[i][sKrankheit] = 2;
				}
				case 6:
				{
					SendClientMessage(i,Weiß,"Nach der Vorführung fühlst du dich nicht so gut.");
			    	SendClientMessage(i,Weiß,"Da du Oralsex ohne Kondom hattest, und die Prostituierte nicht sauber war, hast du dir den {FFFF00}HI-Virus{FFFFFF} eingefangen.");
			    	SendClientMessage(i,Gelb2,"Info: Besuche am besten das Krankenhaus, oder rufe dir einen Krankenwagen und lasse dich untersuchen.");
			    	sStats[i][sKrankheit] = 4;
				}

			}
		    }
			RefreshPlayerNachShow(i);
			SetPVarInt(i, "Kondom", 0);
		}
	}
}

stock RefreshPlayerNachShow(playerid)
{
	if(GetPVarInt(playerid, "InDerShow") == 1)
	{
		TogglePlayerControllable(playerid, false);
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid);
		DeletePVar(playerid, "InDerShow");
 	}
 	return 1;
}

//Geldsystem
stock UnloadGeldSystem(playerid)
{
	//Textdraws
	PlayerTextDrawDestroy(playerid, Money3[playerid]);
	PlayerTextDrawDestroy(playerid, Money2[playerid]);
	PlayerTextDrawDestroy(playerid, Money[playerid]);
}

//Speedosystem
stock UnloadSpeedoSystem(playerid)
{
    //Speedotextdraw
	PlayerTextDrawHide(playerid,Speedo0[playerid]);
	PlayerTextDrawHide(playerid,Speedo1[playerid]);
 	PlayerTextDrawHide(playerid,Speedo3[playerid]);
 	PlayerTextDrawHide(playerid,Speedo4[playerid]);
 	PlayerTextDrawHide(playerid,Speedo5[playerid]);
 	SetPVarInt(playerid, "Speedometer", 0);
 	return 1;
}

stock LoadSpeedoSystem(playerid)
{
	//Speedotextdraw
	SetPVarInt(playerid, "Speedometer", 0);
	Speedo0[playerid] = CreatePlayerTextDraw(playerid,496.000000,361.000000,"Tempo: ~g~0 KM/h");
	Speedo1[playerid] = CreatePlayerTextDraw(playerid,496.000000,373.300000,"Tank: ~g~10l/10l");
	Speedo3[playerid] = CreatePlayerTextDraw(playerid,496.000000,385.700000,"Zustand: ~g~100%");
	Speedo4[playerid] = CreatePlayerTextDraw(playerid,496.000000,398.100000,"Punkte in BS: ~g~0");
	Speedo5[playerid] = CreatePlayerTextDraw(playerid,496.000000,410.600000,"Tuev: ~g~gueltig");
	PlayerTextDrawUseBox(playerid,Speedo0[playerid],1);
	PlayerTextDrawBoxColor(playerid,Speedo0[playerid],0x00000066);
	PlayerTextDrawTextSize(playerid,Speedo0[playerid],631.000000,0.000000);
	PlayerTextDrawUseBox(playerid,Speedo1[playerid],1);
	PlayerTextDrawBoxColor(playerid,Speedo1[playerid],0x00000066);
	PlayerTextDrawTextSize(playerid,Speedo1[playerid],631.000000,-5.000000);
	PlayerTextDrawUseBox(playerid,Speedo3[playerid],1);
	PlayerTextDrawBoxColor(playerid,Speedo3[playerid],0x00000066);
	PlayerTextDrawTextSize(playerid,Speedo3[playerid],631.000000,0.000000);
	PlayerTextDrawUseBox(playerid,Speedo4[playerid],1);
	PlayerTextDrawBoxColor(playerid,Speedo4[playerid],0x00000066);
	PlayerTextDrawTextSize(playerid,Speedo4[playerid],631.000000,10.000000);
	PlayerTextDrawUseBox(playerid,Speedo5[playerid],1);
	PlayerTextDrawBoxColor(playerid,Speedo5[playerid],0x00000066);
	PlayerTextDrawTextSize(playerid,Speedo5[playerid],631.000000,-6.000000);
	PlayerTextDrawAlignment(playerid,Speedo0[playerid],0);
	PlayerTextDrawAlignment(playerid,Speedo1[playerid],0);
	PlayerTextDrawAlignment(playerid,Speedo3[playerid],0);
	PlayerTextDrawAlignment(playerid,Speedo4[playerid],0);
	PlayerTextDrawAlignment(playerid,Speedo5[playerid],0);
	PlayerTextDrawBackgroundColor(playerid,Speedo0[playerid],0x000000ff);
	PlayerTextDrawBackgroundColor(playerid,Speedo1[playerid],0x000000ff);
	PlayerTextDrawBackgroundColor(playerid,Speedo3[playerid],0x000000ff);
	PlayerTextDrawBackgroundColor(playerid,Speedo4[playerid],0x000000ff);
	PlayerTextDrawBackgroundColor(playerid,Speedo5[playerid],0x000000ff);
	PlayerTextDrawFont(playerid,Speedo0[playerid],2);
	PlayerTextDrawLetterSize(playerid,Speedo0[playerid],0.299999,1.000000);
	PlayerTextDrawFont(playerid,Speedo1[playerid],2);
	PlayerTextDrawLetterSize(playerid,Speedo1[playerid],0.299999,1.000000);
	PlayerTextDrawFont(playerid,Speedo3[playerid],2);
	PlayerTextDrawLetterSize(playerid,Speedo3[playerid],0.299999,1.000000);
	PlayerTextDrawFont(playerid,Speedo4[playerid],2);
	PlayerTextDrawLetterSize(playerid,Speedo4[playerid],0.299999,1.000000);
	PlayerTextDrawFont(playerid,Speedo5[playerid],2);
	PlayerTextDrawLetterSize(playerid,Speedo5[playerid],0.299999,1.000000);
	PlayerTextDrawColor(playerid,Speedo0[playerid],0xffffffff);
	PlayerTextDrawColor(playerid,Speedo1[playerid],0xffffffff);
	PlayerTextDrawColor(playerid,Speedo3[playerid],0xffffffff);
	PlayerTextDrawColor(playerid,Speedo4[playerid],0xffffffff);
	PlayerTextDrawColor(playerid,Speedo5[playerid],0xffffffff);
	PlayerTextDrawSetOutline(playerid,Speedo0[playerid],1);
	PlayerTextDrawSetOutline(playerid,Speedo1[playerid],1);
	PlayerTextDrawSetOutline(playerid,Speedo3[playerid],1);
	PlayerTextDrawSetOutline(playerid,Speedo4[playerid],1);
	PlayerTextDrawSetOutline(playerid,Speedo5[playerid],1);
	PlayerTextDrawSetProportional(playerid,Speedo0[playerid],1);
	PlayerTextDrawSetProportional(playerid,Speedo1[playerid],1);
	PlayerTextDrawSetProportional(playerid,Speedo3[playerid],1);
	PlayerTextDrawSetProportional(playerid,Speedo4[playerid],1);
	PlayerTextDrawSetProportional(playerid,Speedo5[playerid],1);
	PlayerTextDrawSetShadow(playerid,Speedo0[playerid],1);
	PlayerTextDrawSetShadow(playerid,Speedo1[playerid],1);
	PlayerTextDrawSetShadow(playerid,Speedo3[playerid],1);
	PlayerTextDrawSetShadow(playerid,Speedo4[playerid],1);
	PlayerTextDrawSetShadow(playerid,Speedo5[playerid],1);
}

//Eventsystem
stock StartEvent()
{
	new event = random(3);
	if(Event != 0)
	{
	    return 1;
	}
	switch(event)
	{
	    case 0:
	    {
			PreParePaintball();
			Event = 1;
			return 1;
	    }
	    case 1:
	    {
	        AutoScooterAnsage();
	        Event = 2;
	        return 1;
	    }
	    case 2:
	    {
	        PreParePaintball();
	        Event = 1;
	        return 1;
	    }
	}
	return 1;
}

//SetPaintballSpawn
stock SetPaintballSpawn(playerid)
{
   	if(PlayerPaintballing[playerid] != 0)
	{
		if(PaintballMap == 1)
		{
			new rand = random(sizeof(PaintballSpawns));
			SetPlayerPosEx(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
			SetPlayerFacingAngle(playerid,PaintballSpawns[rand][3]);
			GivePlayerWeaponEx(playerid, 29, 999);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,1);
		}
		if(PaintballMap == 2)
		{
			new rand = random(sizeof(PaintballSpawns2));
			SetPlayerPosEx(playerid, PaintballSpawns2[rand][0], PaintballSpawns2[rand][1], PaintballSpawns2[rand][2]);
			SetPlayerFacingAngle(playerid,PaintballSpawns2[rand][3]);
			GivePlayerWeaponEx(playerid, 29, 999);
			SetPlayerInterior(playerid,10);
			SetPlayerVirtualWorld(playerid,1);
		}
		if(PaintballMap == 3)
		{
			new rand = random(sizeof(PaintballSpawns3));
			SetPlayerPosEx(playerid, PaintballSpawns3[rand][0], PaintballSpawns3[rand][1], PaintballSpawns3[rand][2]);
			SetPlayerFacingAngle(playerid,PaintballSpawns3[rand][3]);
			GivePlayerWeaponEx(playerid, 29, 999);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,1);
		}
	}
	return 1;
}

//Hotelspawn
stock SetHotelSpawn(playerid)
{
	if(sStats[playerid][sHotel] > 0)
	{
		if(sStats[playerid][sHotel] == 1)
	    {
	        SetPlayerPosEx(playerid,2251.5110,-1158.3503,1029.7969);
	        SetPlayerFacingAngle(playerid,174.5968);
	    }
   		if(sStats[playerid][sHotel] == 2)
	    {
	        SetPlayerPosEx(playerid,2231.1328,-1161.6278,1029.7969);
	        SetPlayerFacingAngle(playerid,352.6529);
	    }
   		if(sStats[playerid][sHotel] == 3)
	    {
	        SetPlayerPosEx(playerid,2230.9980,-1172.1659,1029.7969);
	        SetPlayerFacingAngle(playerid,356.6401);
	    }
   		if(sStats[playerid][sHotel] == 4)
	    {
	        SetPlayerPosEx(playerid,2223.7061,-1178.6460,1029.7969);
	        SetPlayerFacingAngle(playerid,276.5308);
	    }
   		if(sStats[playerid][sHotel] == 5)
	    {
	        SetPlayerPosEx(playerid,2211.4763,-1198.8115,1029.7969);
	        SetPlayerFacingAngle(playerid,81.0090);
	    }
   		if(sStats[playerid][sHotel] == 6)
	    {
	        SetPlayerPosEx(playerid,2203.4495,-1171.6108,1029.7969);
	        SetPlayerFacingAngle(playerid,172.4381);
	    }
   		if(sStats[playerid][sHotel] == 7)
	    {
	        SetPlayerPosEx(playerid,2203.4504,-1155.6696,1029.7969);
	        SetPlayerFacingAngle(playerid,178.8695);
	    }
   		if(sStats[playerid][sHotel] == 8)
	    {
	        SetPlayerPosEx(playerid,2183.0681,-1158.7920,1029.7969);
	        SetPlayerFacingAngle(playerid,356.6540);
	    }
	}
	return 1;
}

//GetPlayerID
stock GetPlayerID(const name[])
{
    new pName[MAX_PLAYER_NAME];
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(!IsPlayerConnected(i)) continue;
        GetPlayerName(i, pName, MAX_PLAYER_NAME);
        if(!strcmp(pName, name))
            return i;
    }
    return INVALID_PLAYER_ID;
}

//Farmer
stock StartDrogenAnbauen(playerid)
{
    DisablePlayerCheckpoint(playerid);
    FarmerCP[playerid] = 1;
    new rand = random(sizeof(FarmerCPan));
    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
    return 1;
}

stock StartDrogenAbbau(playerid)
{
    DisablePlayerCheckpoint(playerid);
    FarmerCP[playerid] = 37;
    new rand = random(sizeof(FarmerCPan));
    SetPlayerCheckpoint(playerid, FarmerCPan[rand][0], FarmerCPan[rand][1], FarmerCPan[rand][2], 7.0);
    return 1;
}

stock StartKuhMelken(playerid)
{
    DisablePlayerCheckpoint(playerid);
    FarmerCP[playerid] = 63;
    SetPlayerCheckpoint(playerid, -0.4949,-24.6686,3.1172, 1.0);
    return 1;
}

//Zeitung
stock UpdateZeitung(playerid)
{
	//Loggen
	new year, month, day;
	getdate(year,month,day);
	//Zeitung speichern
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `erstellt` = '1'");
	mysql_query(Query);
	mysql_free_result();
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz1` = '%s'",zsatz1[playerid]);
	mysql_query(Query);
	//_______________________
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz2` = '%s'",zsatz2[playerid]);
	mysql_query(Query);
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz3` = '%s'",zsatz3[playerid]);
	mysql_query(Query);
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz4` = '%s'",zsatz4[playerid]);
	mysql_query(Query);
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz5` = '%s'",zsatz5[playerid]);
	mysql_query(Query);
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `satz6` = '%s'",zsatz6[playerid]);
	mysql_query(Query);
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `hauptschrift` = '%s'",zsatz7[playerid]);
	mysql_query(Query);
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `ersteller` = '%s'",GetName(playerid));
	mysql_query(Query);
	//_______________________________________________________________________________________
	format(Query, sizeof(Query), "UPDATE `zeitungen` SET `datum` = '%d/%d/%d'",day,month,year);
	mysql_query(Query);
	return 1;
}

//ShowZeitung
stock ShowZeitung(playerid)
{
	new string1[200],string[200],hauptschrift[20],satzz1[20],satzz2[20],satzz3[20],satzz4[20],satzz5[20],satzz6[20],ersteller[30],datum[30],erstelltt;
	new row[128];
	new field[10][128];
	format(string, sizeof(string), "SELECT * FROM zeitungen WHERE id = '1'");
	mysql_query(string);
	mysql_store_result();
	if(!mysql_num_rows())
	{
	}
	else
	{
		mysql_fetch_row_format(row, "|");
		explode(row, field, "|");
		mysql_free_result();
		erstelltt = strval(field[0]);
		format(hauptschrift, 20, "%s", field[1]);
		format(satzz1, 20, "%s", field[2]);
		format(satzz2, 20, "%s", field[3]);
		format(satzz3, 20, "%s", field[4]);
		format(satzz4, 20, "%s", field[5]);
		format(satzz5, 20, "%s", field[6]);
		format(satzz6, 20, "%s", field[7]);
		format(ersteller, 30, "%s", field[8]);
		format(datum, 30, "%s", field[9]);
	}
	if(erstelltt == 0)
	{
	    SendClientMessage(playerid,Rot,"Zurzeit wurde keine Zeitung erstellt!");
	    return 1;
	}
    format(string1, sizeof(string1), "{FFFFFF}%s",hauptschrift);
    format(string, sizeof(string), "{FFFFFF}%s\n%s\n%s\n%s\n%s\n%s\n\nDiese Zeitung wurde von {FFFF00}%s{FFFFFF} am {FF8C00}%s{FFFFFF} erstellt.",satzz1,satzz2,satzz3,satzz4,satzz5,satzz6,ersteller,datum);
    ShowPlayerDialog(playerid,CNN21,DIALOG_STYLE_MSGBOX,string1,string,"Abbrechen","");
    return 1;
}

stock DeleteWohnwagen(playerid)
{
	if(sStats[playerid][sWohnwagen] == 1)
	{
	    new Color1,Color2;
		GetVehicleColor(wohnwagen[playerid], Color1, Color2);
  		format(Query, sizeof(Query), "UPDATE `wohnwagen` SET `farbe1`='%d',`farbe2`='%d',`status`='%d' WHERE `inhaber` = '%s'", Color1,Color2,wohnwagenstatus[playerid], GetName(playerid));
		mysql_query(Query);
	    DestroyVehicle(wohnwagen[playerid]);
	    mysql_free_result();
	}
}

//SetDienstkleidung
stock SetDienstkleidung(playerid)
{
	if(IsASani(playerid))
	{
	    if(sStats[playerid][sRank] == 1 || sStats[playerid][sRank] == 2 || sStats[playerid][sRank] == 3 || sStats[playerid][sRank] == 4)
	    {
     		if(GetPlayerSkin(playerid) != 276)
	        {
	            SetPlayerSkin(playerid,276);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
	    if(sStats[playerid][sRank] == 5)
	    {
	        if(GetPlayerSkin(playerid) != 274)
	        {
	            SetPlayerSkin(playerid,274);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
	    if(sStats[playerid][sRank] == 6)
	    {
	        if(GetPlayerSkin(playerid) != 275)
	        {
	            SetPlayerSkin(playerid,275);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
 	}
 	if(IsAFW(playerid))
 	{
  		if(sStats[playerid][sRank] == 6)
	    {
     		SetPlayerSkin(playerid,279);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
 	   	if(sStats[playerid][sRank] == 5)
	    {
     		SetPlayerSkin(playerid,278);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] < 5)
	    {
     		SetPlayerSkin(playerid,277);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
 	}
	if(IsACop(playerid))
	{
	    if(sStats[playerid][sRank] == 1)
	    {
	        SetPlayerSkin(playerid,280);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 2)
	    {
	        SetPlayerSkin(playerid,280);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 3)
	    {
	        SetPlayerSkin(playerid,281);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 4)
	    {
	        SetPlayerSkin(playerid,281);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 5)
	    {
	        SetPlayerSkin(playerid,284);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	    if(sStats[playerid][sRank] == 6)
	    {
	        SetPlayerSkin(playerid,283);
	        sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	    }
	}
	if(IsACNN(playerid))
	{
	    if(sStats[playerid][sRank] == 1)
	    {
	        if(GetPlayerSkin(playerid) != 208)
	        {
	            SetPlayerSkin(playerid,208);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
	    if(sStats[playerid][sRank] == 2)
	    {
     		if(GetPlayerSkin(playerid) != 227)
	        {
	            SetPlayerSkin(playerid,227);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
	    if(sStats[playerid][sRank] == 3)
	    {
     		if(GetPlayerSkin(playerid) != 228)
	        {
	            SetPlayerSkin(playerid,228);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
	    if(sStats[playerid][sRank] == 4)
	    {
     		if(GetPlayerSkin(playerid) != 247)
	        {
	            SetPlayerSkin(playerid,247);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
	    if(sStats[playerid][sRank] == 5)
	    {
     		if(GetPlayerSkin(playerid) != 187)
	        {
	            SetPlayerSkin(playerid,187);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
	    if(sStats[playerid][sRank] == 6)
	    {
     		if(GetPlayerSkin(playerid) != 17)
	        {
	            SetPlayerSkin(playerid,17);
	            sStats[playerid][sSkin] = GetPlayerSkin(playerid);
	            SendClientMessage(playerid,Weiß,"Du hast erfolgreich deine Dienstkleidung angezogen!");
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,Rot,"Du trägst schon deine Dienstkleidung!");
	            return 1;
	        }
	    }
	}
	return 1;
}

//Nagelbänder
stock CreateStrip(Float:x,Float:y,Float:z,Float:Angles)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 0)
  	    {
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angles-90);
            nagelband +=1;
	        return 1;
  	    }
  	}
  	return 0;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
  	    {
  	        SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            DestroyDynamicObject(SpikeInfo[i][sObject]);
            nagelband =0;
  	    }
	}
    return 0;
}

stock DeleteClosestStrip(playerid)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
  	        if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                DestroyDynamicObject(SpikeInfo[i][sObject]);
                nagelband -=1;
                return 1;
  	        }
  	    }
  	}
    return 0;
}

encode_tires(tires1, tires2, tires3, tires4) {

	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

}

//Carlock
stock SetVehicleLock(vehicleid,lock)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
 	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
  	SetVehicleParamsEx_Fixed(vehicleid,engine,lights,alarm,lock,bonnet,boot,objective);
  	return 1;
}

stock SetVehicleParamsEx_Fixed(vehicleid, &engine, &lights, &alarm, &doors, &bonnet, &boot, &objective)
{
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return 1;
}

//SetBehandlung
stock SetBehandlung(playerid)
{
	PlayAudioStreamForPlayer(playerid, "http://www.bayside-roleplay.de/audiogta/heal.mp3");
	ClearChat(playerid);
	SetPlayerPosEx(playerid,1230.0480,317.2171,-10.6867);
	SetPlayerFacingAngle(playerid,337.5666);
	SetPlayerCameraPos(playerid,1233.3658,322.7894,-11.7422);
	SetPlayerCameraLookAt(playerid,1233.1150,322.3973,-11.7422);
	TogglePlayerControllable(playerid, false);
	ApplyAnimation(playerid, "CRACK","crckdeth1", 4.0, 0, 1, 1, 1, 0, 1);
	SendClientMessage(playerid,Weiß,"Die Behandlung dauert etwa 10 Sekunden!");
	SetTimerEx("NachBehandlung",10891,false,"i",playerid);
}

//Houselabel updaten lassen
stock UpdateHouseLabel(h)
{
	new string[248];
	if(HouseInfo[h][hOwned] == 1)
	{
		if(HouseInfo[h][hRentabil] == 0)
		{
			format(string, sizeof(string), "{FFFFFF}Dieses Haus gehoert: {F7F700}%s\n{FFFFFF}Level: {F7F700}%d",HouseInfo[h][hOwner],HouseInfo[h][hLevel]);
			DestroyDynamic3DTextLabel(HouseInfo[h][label]);
			HouseInfo[h][label] = CreateDynamic3DTextLabel(string,COLOR_WHITE,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		}
		else
		{
			format(string, sizeof(string), "{FFFFFF}Dieses Haus gehoert: {F7F700}%s\n{FFFFFF}Miete: {F7F700}%d{4EF700}\n{FFFFFF}Level: {F7F700}%d{F7F700}\n{FFFFFF}Aktuelle Mieter: {F7F700}%d/%d{F7F700}\n/einmieten{FFFFFF} um einzumieten",HouseInfo[h][hOwner],HouseInfo[h][hRent],HouseInfo[h][hLevel],HouseInfo[h][hMieter],HouseInfo[h][hMaxMieter]);
			DestroyDynamic3DTextLabel(HouseInfo[h][label]);
			HouseInfo[h][label] = CreateDynamic3DTextLabel(string,COLOR_WHITE,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		}
	}
	else
	{
		format(string, sizeof(string), "{FFFFFF}Dieses Haus steht zum Verkauf :\n{FFFFFF}Preis: {F7F700}%d{4EF700}\n{FFFFFF}Level: {F7F700}%d{F7F700}\n/hauskaufen{FFFFFF} um es zu kaufen!",HouseInfo[h][hValue],HouseInfo[h][hLevel]);
		DestroyDynamic3DTextLabel(HouseInfo[h][label]);
		HouseInfo[h][label] = CreateDynamic3DTextLabel(string,COLOR_WHITE,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	return 1;
}

//Bittlabel updaten lassen
stock UpdateBizzLabel(h)
{
	new string[248];
	if(BizzInfo[h][bOwned] == 1)
	{
		format(string, sizeof(string), "{FFFFFF}Business:{F7F700}%s.\n{FFFFFF}Inhaber: {F7F700}%s.",BizzInfo[h][bMessage],BizzInfo[h][bOwner]);
		DestroyDynamic3DTextLabel(BizzInfo[h][blabel]);
		BizzInfo[h][blabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]+0.5,8.0,INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	else
	{
		format(string, sizeof(string), "{FFFFFF}Das Business {F7F700}%s{FFFFFF} steht zum Verkauf:\n{FFFFFF}Preis: {F7F700}%d{4EF700}.{F7F700}\n\n/buybusiness{FFFFFF} um es zu kaufen!",BizzInfo[h][bMessage],BizzInfo[h][bBuyPrice]);
		DestroyDynamic3DTextLabel(BizzInfo[h][blabel]);
		BizzInfo[h][blabel] = CreateDynamic3DTextLabel(string,COLOR_WHITE,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]+0.5,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	return 1;
}

//Gangfightsystem
stock GetPlayerFightzone(playerid)
{
	new Float:GangZone[3];
	GetPlayerPos(playerid,GangZone[0],GangZone[1],GangZone[2]);
	for(new fs;fs<sizeof(FightSystem);fs++)
	{
    	if((GangZone[0] >= FightSystem[fs][fsMinX] && GangZone[0] <= FightSystem[fs][fsMaxX]) && (GangZone[1] >= FightSystem[fs][fsMinY] && GangZone[1] <= FightSystem[fs][fsMaxY]) && GangZone[2] <= 500)
			return fs;
	}
	return -14;
}
stock IsAFightFaction(Faction)
{
	if(Faction == 5 || Faction == 6)
	{
	    return 1;
	}
	return 0;
}
stock GetZoneColorOfFaction(Faction)
{
	if(Faction == 5) return 0x00FFC889; // MS-14
	else if(Faction == 6) return 0x0000FF6F; // Crip's or Die
	else return 0x000000D4; // NoN-Gang
}
stock GetFactionNameOfFaction(Faction)
{
	new FactionName[64];
	if(Faction == 5) format(FactionName,sizeof(FactionName),"MS-14");
	else if(Faction == 6) format(FactionName,sizeof(FactionName),"Crip or Die");
	else format(FactionName,sizeof(FactionName),"keine");
	return FactionName;
}
stock IstInGangFight(playerid)
{
   	new TempZone = GetPlayerFightzone(playerid);
   	if(TempZone != -255){ // In Zone
       	if(FightSystem[TempZone][fsFightTime] && FightSystem[TempZone][fsAttackFaction] != -255){ // Wenn Gegner nicht gleich -255 ist
       	    return 1;
       	}
	}
	return 1;
}

stock GetPlayerFaction(playerid){
	new Member = GetPlayerMember(playerid);
	if(Member)
	    return Member;
	new Leader = GetPlayerLeader(playerid);
	if(Leader)
	    return Leader;
	return 0;
}

stock GetPlayerLeader(playerid){
	if(sStats[playerid][sLeiter])
	    return sStats[playerid][sLeiter];
	return 0;
}

stock GetPlayerMember(playerid){
	if(sStats[playerid][sMitglied])
	    return sStats[playerid][sMitglied];
	return 0;
}

//Fraktionsnachricht
stock SendFamilyMessage(family, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(sStats[i][sMitglied] == family || sStats[i][sLeiter] == family)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

//GPS

stock GPSZone(playerid,gpsid)
{
	DisablePlayerCheckpoint(playerid);
	QuestCP[playerid] = 0;
	if(gpsid == 1)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2607.5203,2268.3008,8.2109, 3.0); //Zivispawn
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 2)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2538.1741,2322.6802,4.5391, 3.0); //Kleidungsladen
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 3)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2518.9614,2322.3547,4.5564, 3.0); //Handyladen
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 4)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2473.3386,2244.1765,4.4114, 3.0); //Burger Shot
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 5)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2487.7595,2267.1575,4.5572, 3.0); //Club
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 6)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2459.0889,2285.7971,4.5392, 3.0); //Casino
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 7)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid,-2459.0833,2303.9255,4.5474, 3.0); //Paintball Arena
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 8)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2487.4810,2364.0615,9.8315, 3.0); //24/7 Shop
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 9)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2441.6160,2318.7266,4.5774, 3.0); //Hotel
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 10)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2479.0322,2321.1089,4.5339, 3.0); //Lotto
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 11)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2517.7793,2452.4839,17.4915, 3.0); //Fahrschule
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 12)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2611.7834,2439.5818,14.4335, 3.0); //Nutte
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 13)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2486.9182,2406.3899,15.7610, 3.0); //Kirche
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 14)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2325.6399,2366.7373,4.7685, 3.0); //Tankstelle
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 15)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2277.5645,2333.7354,4.5265, 3.0); //Ammunation
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 16)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2295.1445,2345.4050,5.0530, 3.0); //pns
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 17)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2268.8689,2295.6836,4.3737, 3.0); //Krankenhaus
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 18)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2288.6355,2275.8687,4.5205, 3.0); //Bank
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 19)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2244.9226,2318.1052,4.5324, 3.0); //Rathaus
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 20)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2250.7375,2354.8140,4.5357, 3.0); //Polizei
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 21)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2434.8682,2466.9785,13.3415, 3.0); //Wohnviertel
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 22)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -1987.5286,290.9000,34.4644, 3.0); //Gangautohaus
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 23)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -2384.4924,2434.3896,9.6089, 3.0); //Autopate
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
	if(gpsid == 24)
	{
	    QuestCP[playerid] = 9999;
	    SetPlayerCheckpoint(playerid, -1552.6274,2639.4929,55.8359, 3.0); //Tüv
	    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~w~Route wird ~g~kalkuliert . . .",4500, 5);
	}
}

//Animationen vorladen
stock PreloadAnims(playerid) {
    ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid,"SNM","SPANKINGW", 0.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid,"ped","abseil", 0.0, 0, 0, 0, 0, 0);
    return 1;
}

//Bewerbertest
stock StartBWTest(playerid)
{
	ClearChat(playerid);
	SetPlayerInterior(playerid,10);
	TogglePlayerControllable(playerid, false);
	SetPlayerVirtualWorld(playerid,1+playerid);
	SetPlayerPosEx(playerid,1552.5938,-1715.5587,1724.5088);
	SetPlayerCameraPos(playerid,1550.8842,-1713.8700,1724.5088);
	SetPlayerCameraLookAt(playerid,1551.1703,-1714.1896,1724.5088);
	SetPlayerFacingAngle(playerid,347.6650);
	ApplyAnimation(playerid, "PED","SEAT_down", 4.0, 0, 1, 1, 1, 0, 0);
    ShowPlayerDialog(playerid,SUPPORTER1,DIALOG_STYLE_MSGBOX,"Eignungstest zum Supporter","{FFFFFF}Willkommen bei dem Eignungstest für den Posten als Supporter, anbei werden dir {00AFFF}ca. 20 Fragen{FFFFFF} gestellt.\nAus deinen Antworten wird am Ende ein 'Schnitt' berechnet und dem Administrator mitgeteilt.\nDieser wird dir dan das Ergebnis mitteilen.\n{00AFFF}Viel Glück bei dem Eignungstest!.","Weiter","");
	return 1;
}

//Fahrzeuge
stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
	if ( strfind( line , "=" , true ) == -1 ) return keyRes;
	strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
	return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

//Feuerwerk
stock CreateFirework(id,Float:X,Float:Y,Float:Z,Float:A,Loop)
{
    Firework[id][fwid] = CreateObject(3013,X,Y,Z,0.000000,0.000000,0.000000,800);
    Firework[id][fwX] = X;
    Firework[id][fwY] = Y;
    Firework[id][fwZ] = Z;
    Firework[id][fwA] = A;
    Firework[id][fwLoop] = Loop;
}

//Haus zum Verkauf Schilder erstellen
stock CreateSellSchild(house)
{
	if(HouseInfo[house][hOwner] == 0)
	{
		if(house == 0)
		{
			HouseInfo[house][hObjekt] = CreateDynamicObject(19471, HouseInfo[house][hEntrancex]+2.0, HouseInfo[house][hEntrancey]+1.0, HouseInfo[house][hEntrancez]-1.0, 0, 0, 0);
		}
		if(house == 1)
		{
			HouseInfo[house][hObjekt] = CreateDynamicObject(19471, HouseInfo[house][hEntrancex]+2.0, HouseInfo[house][hEntrancey]+1.0, HouseInfo[house][hEntrancez]-1.0, 0, 0, 0);
		}
		if(house == 2)
		{
			HouseInfo[house][hObjekt] = CreateDynamicObject(19471, HouseInfo[house][hEntrancex]+2.0, HouseInfo[house][hEntrancey]+1.0, HouseInfo[house][hEntrancez]-1.0, 0, 0, 0);
		}
		if(house == 3)
		{
			HouseInfo[house][hObjekt] = CreateDynamicObject(19471, HouseInfo[house][hEntrancex]+2.0, HouseInfo[house][hEntrancey]+1.0, HouseInfo[house][hEntrancez]-1.0, 0, 0, 0);
		}
		if(house == 4)
		{
			HouseInfo[house][hObjekt] = CreateDynamicObject(19471, HouseInfo[house][hEntrancex]+2.0, HouseInfo[house][hEntrancey]+1.0, HouseInfo[house][hEntrancez]-1.0, 0, 0, 0);
		}
		if(house == 6)
		{
			HouseInfo[house][hObjekt] = CreateDynamicObject(19471, HouseInfo[house][hEntrancex]-1.0, HouseInfo[house][hEntrancey], HouseInfo[house][hEntrancez]-1.0, 0, 0, -45);
		}
		if(house == 7)
		{
			HouseInfo[house][hObjekt] = CreateDynamicObject(19471, HouseInfo[house][hEntrancex]-1.0, HouseInfo[house][hEntrancey], HouseInfo[house][hEntrancez]-1.0, 0, 0, -45);
		}
		if(house == 8)
		{
			HouseInfo[house][hObjekt] = CreateDynamicObject(19471, HouseInfo[house][hEntrancex]+2.0, HouseInfo[house][hEntrancey]+1.0, HouseInfo[house][hEntrancez]-1.0, 0, 0, 0);
		}
		if(house == 5)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2552.3928,2269.0251,5.0625-1.0, 0, 0, -360);
		}
		if(house == 9)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2347.1121,2421.7356,7.3447-1.0, 0, 0, -180); //- 180
		}
		if(house == 10)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2524.5820,2240.7178,4.9844-1.0, 0, 0, -360);
		}
		if(house == 11)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2530.6912,1990.8936,10.6116-1.0, 0, 0, -45);
		}
		if(house == 12)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2560.5137,1990.8285,10.6062-1.0, 0, 0, -45);
		}
		if(house == 13)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2586.8889,1952.4373,10.6191-1.0, 0, 0, -360);
		}
		if(house == 14)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2509.0796,1860.3170,10.6138-1.0, 0, 0, -310);
		}
		if(house == 15)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2451.9939,1860.5504,10.5694-1.0, 0, 0, -310);
		}
		if(house == 16)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2428.7163,2034.0302,10.6453-1.0, 0, 0, -45);
		}
		if(house == 17)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2410.5313,2034.5155,10.6703-1.0, 0, 0, -45);
		}
		if(house == 18)
		{
		    HouseInfo[house][hObjekt] = CreateDynamicObject(19471, -2392.3025,2034.3247,10.6453-1.0, 0, 0, -45);
		}
	}
}

//SetFraktionSpawn
stock SetFraktionsSpawn(playerid)
{
	//Leben
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	SetPlayerHealth(playerid,100.0);
	//Bayside-Newstime Spawn
	if(IsACNN(playerid) && sStats[playerid][sTutorial] == 1 && sStats[playerid][sSpawnChange] == 0 && sStats[playerid][sHotel] == 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0 && sStats[playerid][sFraktion] == 4) //Bayside-Newstime
	{
	    SetPlayerPosEx(playerid,-1494.4993,986.7475,7.2254);
	    SetPlayerFacingAngle(playerid,88.6943);
	    GivePlayerWeaponEx(playerid,43,50);
	    SetPlayerInterior(playerid,0);
	    SetPlayerFrakSkin(playerid);
	}
	//Feuerwehr Spawn
	if(IsAFW(playerid) && sStats[playerid][sTutorial] == 1 && sStats[playerid][sSpawnChange] == 0 && sStats[playerid][sHotel] == 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0 && sStats[playerid][sFraktion] == 2) //Feuerwehr
	{
	    SetPlayerPosEx(playerid,234.1289,71.9656,1005.0391);
	    SetPlayerFacingAngle(playerid,3.1535);
	    GivePlayerWeaponEx(playerid,43,50);
	    SetPlayerInterior(playerid,6);
	    SetPlayerFrakSkin(playerid);
	    AllowArmour[playerid] = 1;
	    SetPlayerArmour(playerid,100);
	    if(GetPVarInt(playerid, "Feuerspawn") == 0)
	    {
	    	SetPVarInt(playerid,"Feuerwehr",1);
		}
	    if(GetPVarInt(playerid, "Feuerspawn") == 1)
	    {
	    	SetPVarInt(playerid,"Feuerwehr",1);
		}
  		if(GetPVarInt(playerid, "Feuerspawn") == 2)
	    {
	    	SetPVarInt(playerid,"Feuerwehr",2);
		}
  		if(GetPVarInt(playerid, "Feuerspawn") == 3)
	    {
	    	SetPVarInt(playerid,"Feuerwehr",3);
		}
	}
	//Sanitäter Spawn
	if(IsASani(playerid) && sStats[playerid][sTutorial] == 1 && sStats[playerid][sSpawnChange] == 0 && sStats[playerid][sHotel] == 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0 && sStats[playerid][sFraktion] == 3) //Sanitäter
	{
	    SetPlayerPosEx(playerid,1255.1409,318.3552,-11.7422);
	    SetPlayerFacingAngle(playerid,65.0265);
	    SetPlayerInterior(playerid,0);
	    SetPlayerFrakSkin(playerid);
	}
	//BSPD Spawn
	if(IsACop(playerid) && sStats[playerid][sTutorial] == 1 && sStats[playerid][sSpawnChange] == 0 && sStats[playerid][sHotel] == 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0 && sStats[playerid][sFraktion] == 1) //BSPD
	{
	    SetPlayerPosEx(playerid,1551.9386,-1654.0922,1723.2094);
	    SetPlayerFacingAngle(playerid,178.2753);
	    SetPlayerInterior(playerid, 10);
	    SetPlayerFrakSkin(playerid);
	}
	//MS-14 Spawn
	if(IsAMS(playerid) && sStats[playerid][sTutorial] == 1 && sStats[playerid][sSpawnChange] == 0 && sStats[playerid][sHotel] == 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0 && sStats[playerid][sFraktion] == 5) //MS
	{
	    SetPlayerPosEx(playerid,-2757.2607,74.6813,7.1875);
	    SetPlayerFacingAngle(playerid,277.1779);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerFrakSkin(playerid);
	}
	//Crip or Die Spawn
	if(IsACrip(playerid) && sStats[playerid][sTutorial] == 1 && sStats[playerid][sSpawnChange] == 0 && sStats[playerid][sHotel] == 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && sStats[playerid][sJailed] == 0 && sStats[playerid][sFraktion] == 6) //cod
	{
	    SetPlayerPosEx(playerid,-2472.8804,-139.6242,33.6486);
	    SetPlayerFacingAngle(playerid,267.8891);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerFrakSkin(playerid);
	}
	//Zivispawn
	if(sStats[playerid][sTutorial] == 1 && sStats[playerid][sSpawnChange] == 0 && sStats[playerid][sHotel] == 0 && GetPVarInt(playerid, "Spawned") == 1 && PlayerPaintballing[playerid] == 0 && GetPVarInt(playerid, "Autoscooter") == 0 && GetPVarInt(playerid, "ImIntro") == 0 && sStats[playerid][sTod] == 0 && !IsASani(playerid) && !IsACNN(playerid) && sStats[playerid][sJailed] == 0 && sStats[playerid][sFraktion] == 0)
	{
	    if(sStats[playerid][sFraktion] <= 0)
	    {
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPosEx(playerid,-2624.8716,2255.8379,8.1374);
			SetPlayerFacingAngle(playerid,271.0459);
			SetPlayerInterior(playerid,0);
		}
	}
}

//Pokersystem
stock WinnText(playerid, win = 0, rank = 0)
{
        new
                t,
                str[100];
        str = "~w~";
        for(new i = 9; i > 1; i--)
        {
                if(i == win)
                        format(str, sizeof str, "%s~r~$%d(win - %s)~n~~w~", str, PP_Info[playerid][Bett] * pot[i], rankname(rank, t, t));
                else
                        format(str, sizeof str, "%s$%d~n~", str, PP_Info[playerid][Bett] * pot[i]);
        }
        PlayerTextDrawSetString(playerid, WINTEXT, str);
}

stock BetCredit(playerid)
{
        new
                str[128];
        format(str, sizeof str, "  ~g~Einsatz: ~w~%d Euro                             ~g~ver.Geld: ~w~%d Euro",
                                                        PP_Info[playerid][Bett],
                                                        PP_Info[playerid][Credit]);

        PlayerTextDrawSetString(playerid, BETCREDITTEXT, str);
}

stock Delete_PokerTextDraw(playerid)
{
        PlayerTextDrawDestroy(playerid, BACKGROUND);
        for(new i = 0; i < 5; i++)
                PlayerTextDrawDestroy(playerid, CARDSTEXT + PlayerText:i);
        for(new i = 0; i < 5; i++)
                PlayerTextDrawDestroy(playerid, HOLDSTEXT + PlayerText:i);
        PlayerTextDrawDestroy(playerid, WIN_TEXT);
        PlayerTextDrawDestroy(playerid, WINTEXT);
        PlayerTextDrawDestroy(playerid, BETCREDITTEXT);
        PlayerTextDrawDestroy(playerid, DEALSTEXT);
        PlayerTextDrawDestroy(playerid, ADDCOINSTEXT);
        PlayerTextDrawDestroy(playerid, EXITPOKER);
        PlayerTextDrawDestroy(playerid, BETTEXT);
        PlayerTextDrawDestroy(playerid, CHANGEBACKGROUND);
        Start3[playerid] = PlayerText:INVALID_TEXT_DRAW;
}

stock RandomCard(array[], size = sizeof array)
{
	new bool:e[POKERLAPS] = { false, ... };
	for(new p = 0; p < size; p++)
	{
		do array[p] = random(POKERLAPS);
		while(e[array[p]]);
		e[array[p]] = true;
	}
}

stock Swap(&a, &b)
{
        new s;
        s = a;
        a = b;
        b = s;
}

stock ExitPoker(playerid)
{
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid,0);
        Delete_PokerTextDraw(playerid);
        TogglePlayerControllable(playerid, true);
        GivePlayerEuro(playerid, PP_Info[playerid][Credit]);
        PP_Info[playerid][Credit] = 0;
        CancelSelectTextDraw(playerid);
		PlayerTextDrawShow(playerid,Money3[playerid]);
		PlayerTextDrawShow(playerid,Money2[playerid]);
		PlayerTextDrawShow(playerid,Money[playerid]);
}

stock get_win(rank)
{
        if(rank > 6185) return HIGH_CARD;                       // 1277 high card
        if(rank > 3325) return ONE_PAIR;                        // 2860 one pair
        if(rank > 2467) return TWO_PAIR;                        // 858 two pair
        if(rank > 1609) return THREE_OF_A_KIND; // 858 three-kind
        if(rank > 1599) return STRAIGHT;                        // 10 straights
        if(rank > 322)  return FLUSH;                           // 1277 flushes
        if(rank > 166)  return FULL_HOUSE;              // 156 full house
        if(rank > 10)   return FOUR_OF_A_KIND;          // 156 four-kind
        if(rank > 2)    return STRAIGHT_FLUSH;  // 9 straight-flushes
        return ROYAL_FLUSH;
}

stock get_rank(const cards[]) // fast five card hand eval :)
{
        new
                flushes = 0,
                getcolor = Color_Mask[cards[0]] | Color_Mask[cards[1]] | Color_Mask[cards[2]] | Color_Mask[cards[3]] | Color_Mask[cards[4]];
        if((getcolor & (getcolor - 1)) == 0)
        {
                switch(Bynary_Mask[cards[0]] | Bynary_Mask[cards[1]] | Bynary_Mask[cards[2]] | Bynary_Mask[cards[3]] | Bynary_Mask[cards[4]])
                {
                        case 7936:      { return 1; } // ROYAL_FLUSH;
                        case 4111:      { return 2; } // Straight Flush
                        case 3968:      { return 3; } // Straight Flush
                        case 1984:      { return 4; } // Straight Flush
                        case 992:       { return 5; } // Straight Flush
                        case 496:       { return 6; } // Straight Flush
                        case 248:       { return 7; } // Straight Flush
                        case 124:       { return 8; } // Straight Flush
                        case 62:        { return 9; } // Straight Flush
                        case 31:        { return 10; } // Straight Flush
                        default: flushes = 5863;
                }
        }
        switch(Prim_Mask[cards[0]] * Prim_Mask[cards[1]] * Prim_Mask[cards[2]] * Prim_Mask[cards[3]] * Prim_Mask[cards[4]])
        {
                case 104553157: { return 11; } // Four Aces
                case 87598591:  { return 12; }
                case 81947069:  { return 13; }
                case 64992503:  { return 14; }
                case 53689459:  { return 15; }
                case 48037937:  { return 16; }
                case 36734893:  { return 17; }
                case 31083371:  { return 18; }
                case 19780327:  { return 19; }
                case 14128805:  { return 20; }
                case 8477283:   { return 21; }
                case 5651522:   { return 22; }
                case 76840601:  { return 23; } // Four Kings
                case 58098991:  { return 24; }
                case 54350669:  { return 25; }
                case 43105703:  { return 26; }
                case 35609059:  { return 27; }
                case 31860737:  { return 28; }
                case 24364093:  { return 29; }
                case 20615771:  { return 30; }
                case 13119127:  { return 31; }
                case 9370805:   { return 32; }
                case 5622483:   { return 33; }
                case 3748322:   { return 34; }
                case 37864361:  { return 35; } // Four Queens
                case 34170277:  { return 36; }
                case 26782109:  { return 37; }
                case 21240983:  { return 38; }
                case 17546899:  { return 39; }
                case 15699857:  { return 40; }
                case 12005773:  { return 41; }
                case 10158731:  { return 42; }
                case 6464647:   { return 43; }
                case 4617605:   { return 44; }
                case 2770563:   { return 45; }
                case 1847042:   { return 46; }
                case 28998521:  { return 47; } // Four Jacks
                case 26169397:  { return 48; }
                case 21925711:  { return 49; }
                case 16267463:  { return 50; }
                case 13438339:  { return 51; }
                case 12023777:  { return 52; }
                case 9194653:   { return 53; }
                case 7780091:   { return 54; }
                case 4950967:   { return 55; }
                case 3536405:   { return 56; }
                case 2121843:   { return 57; }
                case 1414562:   { return 58; }
                case 11473481:  { return 59; } // Four Tens
                case 10354117:  { return 60; }
                case 8675071:   { return 61; }
                case 8115389:   { return 62; }
                case 5316979:   { return 63; }
                case 4757297:   { return 64; }
                case 3637933:   { return 65; }
                case 3078251:   { return 66; }
                case 1958887:   { return 67; }
                case 1399205:   { return 68; }
                case 839523:    { return 69; }
                case 559682:    { return 70; }
                case 5343161:   { return 71; } // Four Nines
                case 4821877:   { return 72; }
                case 4039951:   { return 73; }
                case 3779309:   { return 74; }
                case 2997383:   { return 75; }
                case 2215457:   { return 76; }
                case 1694173:   { return 77; }
                case 1433531:   { return 78; }
                case 912247:    { return 79; }
                case 651605:    { return 80; }
                case 390963:    { return 81; }
                case 260642:    { return 82; }
                case 3424361:   { return 83; } // Four Eights
                case 3090277:   { return 84; }
                case 2589151:   { return 85; }
                case 2422109:   { return 86; }
                case 1920983:   { return 87; }
                case 1586899:   { return 88; }
                case 1085773:   { return 89; }
                case 918731:    { return 90; }
                case 584647:    { return 91; }
                case 417605:    { return 92; }
                case 250563:    { return 93; }
                case 167042:    { return 94; }
                case 1171001:   { return 95; } // Four Sevens
                case 1056757:   { return 96; }
                case 885391:    { return 97; }
                case 828269:    { return 98; }
                case 656903:    { return 99; }
                case 542659:    { return 100; }
                case 485537:    { return 101; }
                case 314171:    { return 102; }
                case 199927:    { return 103; }
                case 142805:    { return 104; }
                case 85683:             { return 105; }
                case 57122:             { return 106; }
                case 600281:    { return 107; } // Four Sixes
                case 541717:    { return 108; }
                case 453871:    { return 109; }
                case 424589:    { return 110; }
                case 336743:    { return 111; }
                case 278179:    { return 112; }
                case 248897:    { return 113; }
                case 190333:    { return 114; }
                case 102487:    { return 115; }
                case 73205:             { return 116; }
                case 43923:             { return 117; }
                case 29282:             { return 118; }
                case 98441:             { return 119; } // Four Fives
                case 88837:             { return 120; }
                case 74431:             { return 121; }
                case 69629:             { return 122; }
                case 55223:             { return 123; }
                case 45619:             { return 124; }
                case 40817:             { return 125; }
                case 31213:             { return 126; }
                case 26411:             { return 127; }
                case 12005:             { return 128; }
                case 7203:              { return 129; }
                case 4802:              { return 130; }
                case 25625:             { return 131; } // Four Fours
                case 23125:             { return 132; }
                case 19375:             { return 133; }
                case 18125:             { return 134; }
                case 14375:             { return 135; }
                case 11875:             { return 136; }
                case 10625:             { return 137; }
                case 8125:              { return 138; }
                case 6875:              { return 139; }
                case 4375:              { return 140; }
                case 1875:              { return 141; }
                case 1250:              { return 142; }
                case 3321:              { return 143; } // Four Treys
                case 2997:              { return 144; }
                case 2511:              { return 145; }
                case 2349:              { return 146; }
                case 1863:              { return 147; }
                case 1539:              { return 148; }
                case 1377:              { return 149; }
                case 1053:              { return 150; }
                case 891:               { return 151; }
                case 567:               { return 152; }
                case 405:               { return 153; }
                case 162:               { return 154; }
                case 656:               { return 155; } // Four Deuces
                case 592:               { return 156; }
                case 496:               { return 157; }
                case 464:               { return 158; }
                case 368:               { return 159; }
                case 304:               { return 160; }
                case 272:               { return 161; }
                case 208:               { return 162; }
                case 176:               { return 163; }
                case 112:               { return 164; }
                case 80:                { return 165; }
                case 48:                { return 166; }

                case 94352849:  { return 167; } // Aces Full over Kings
                case 66233081:  { return 168; } // Aces Full over Queens
                case 57962561:  { return 169; } // Aces Full over Jacks
                case 36459209:  { return 170; } // Aces Full over Tens
                case 24880481:  { return 171; } // Aces Full over Nines
                case 19918169:  { return 172; } // Aces Full over Eights
                case 11647649:  { return 173; } // Aces Full over Sevens
                case 8339441:   { return 174; } // Aces Full over Sixes
                case 3377129:   { return 175; } // Aces Full over Fives
                case 1723025:   { return 176; } // Aces Full over Fours
                case 620289:    { return 177; } // Aces Full over Treys
                case 275684:    { return 178; } // Aces Full over Deuces

                case 85147693:  { return 179; } // Kings Full over Aces
                case 48677533:  { return 180; } // Kings Full over Queens
                case 42599173:  { return 181; } // Kings Full over Jacks
                case 26795437:  { return 182; } // Kings Full over Tens
                case 18285733:  { return 183; } // Kings Full over Nines
                case 14638717:  { return 184; } // Kings Full over Eights
                case 8560357:   { return 185; } // Kings Full over Sevens
                case 6129013:   { return 186; } // Kings Full over Sixes
                case 2481997:   { return 187; } // Kings Full over Fives
                case 1266325:   { return 188; } // Kings Full over Fours
                case 455877:    { return 189; } // Kings Full over Treys
                case 202612:    { return 190; } // Kings Full over Deuces

                case 50078671:  { return 191; } // Queens Full over Aces
                case 40783879:  { return 192; } // Queens Full over Kings
                case 25054231:  { return 193; } // Queens Full over Jacks
                case 15759439:  { return 194; } // Queens Full over Tens
                case 10754551:  { return 195; } // Queens Full over Nines
                case 8609599:   { return 196; } // Queens Full over Eights
                case 5034679:   { return 197; } // Queens Full over Sevens
                case 3604711:   { return 198; } // Queens Full over Sixes
                case 1459759:   { return 199; } // Queens Full over Fives
                case 744775:    { return 200; } // Queens Full over Fours
                case 268119:    { return 201; } // Queens Full over Treys
                case 119164:    { return 202; } // Queens Full over Deuces

                case 40997909:  { return 203; } // Jacks Full over Aces
                case 33388541:  { return 204; } // Jacks Full over Kings
                case 23437829:  { return 205; } // Jacks Full over Queens
                case 12901781:  { return 206; } // Jacks Full over Tens
                case 8804429:   { return 207; } // Jacks Full over Nines
                case 7048421:   { return 208; } // Jacks Full over Eights
                case 4121741:   { return 209; } // Jacks Full over Sevens
                case 2951069:   { return 210; } // Jacks Full over Sixes
                case 1195061:   { return 211; } // Jacks Full over Fives
                case 609725:    { return 212; } // Jacks Full over Fours
                case 219501:    { return 213; } // Jacks Full over Treys
                case 97556:             { return 214; } // Jacks Full over Deuces

                case 20452727:  { return 215; } // Tens Full over Aces
                case 16656623:  { return 216; } // Tens Full over Kings
                case 11692487:  { return 217; } // Tens Full over Queens
                case 10232447:  { return 218; } // Tens Full over Jacks
                case 4392287:   { return 219; } // Tens Full over Nines
                case 3516263:   { return 220; } // Tens Full over Eights
                case 2056223:   { return 221; } // Tens Full over Sevens
                case 1472207:   { return 222; } // Tens Full over Sixes
                case 596183:    { return 223; } // Tens Full over Fives
                case 304175:    { return 224; } // Tens Full over Fours
                case 109503:    { return 225; } // Tens Full over Treys
                case 48668:             { return 226; } // Tens Full over Deuces

                case 11529979:  { return 227; } // Nines Full over Aces
                case 9389971:   { return 228; } // Nines Full over Kings
                case 6591499:   { return 229; } // Nines Full over Queens
                case 5768419:   { return 230; } // Nines Full over Jacks
                case 3628411:   { return 231; } // Nines Full over Tens
                case 1982251:   { return 232; } // Nines Full over Eights
                case 1159171:   { return 233; } // Nines Full over Sevens
                case 829939:    { return 234; } // Nines Full over Sixes
                case 336091:    { return 235; } // Nines Full over Fives
                case 171475:    { return 236; } // Nines Full over Fours
                case 61731:             { return 237; } // Nines Full over Treys
                case 27436:             { return 238; } // Nines Full over Deuces

                case 8258753:   { return 239; } // Eights Full over Aces
                case 6725897:   { return 240; } // Eights Full over Kings
                case 4721393:   { return 241; } // Eights Full over Queens
                case 4131833:   { return 242; } // Eights Full over Jacks
                case 2598977:   { return 243; } // Eights Full over Tens
                case 1773593:   { return 244; } // Eights Full over Nines
                case 830297:    { return 245; } // Eights Full over Sevens
                case 594473:    { return 246; } // Eights Full over Sixes
                case 240737:    { return 247; } // Eights Full over Fives
                case 122825:    { return 248; } // Eights Full over Fours
                case 44217:             { return 249; } // Eights Full over Treys
                case 19652:             { return 250; } // Eights Full over Deuces

                case 3693157:   { return 251; } // Sevens Full over Aces
                case 3007693:   { return 252; } // Sevens Full over Kings
                case 2111317:   { return 253; } // Sevens Full over Queens
                case 1847677:   { return 254; } // Sevens Full over Jacks
                case 1162213:   { return 255; } // Sevens Full over Tens
                case 793117:    { return 256; } // Sevens Full over Nines
                case 634933:    { return 257; } // Sevens Full over Eights
                case 265837:    { return 258; } // Sevens Full over Sixes
                case 107653:    { return 259; } // Sevens Full over Fives
                case 54925:             { return 260; } // Sevens Full over Fours
                case 19773:             { return 261; } // Sevens Full over Treys
                case 8788:              { return 262; } // Sevens Full over Deuces

                case 2237411:   { return 263; } // Sixes Full over Aces
                case 1822139:   { return 264; } // Sixes Full over Kings
                case 1279091:   { return 265; } // Sixes Full over Queens
                case 1119371:   { return 266; } // Sixes Full over Jacks
                case 704099:    { return 267; } // Sixes Full over Tens
                case 480491:    { return 268; } // Sixes Full over Nines
                case 384659:    { return 269; } // Sixes Full over Eights
                case 224939:    { return 270; } // Sixes Full over Sevens
                case 65219:             { return 271; } // Sixes Full over Fives
                case 33275:             { return 272; } // Sixes Full over Fours
                case 11979:             { return 273; } // Sixes Full over Treys
                case 5324:              { return 274; } // Sixes Full over Deuces

                case 576583:    { return 275; } // Fives Full over Aces
                case 469567:    { return 276; } // Fives Full over Kings
                case 329623:    { return 277; } // Fives Full over Queens
                case 288463:    { return 278; } // Fives Full over Jacks
                case 181447:    { return 279; } // Fives Full over Tens
                case 123823:    { return 280; } // Fives Full over Nines
                case 99127:             { return 281; } // Fives Full over Eights
                case 57967:             { return 282; } // Fives Full over Sevens
                case 41503:             { return 283; } // Fives Full over Sixes
                case 8575:              { return 284; } // Fives Full over Fours
                case 3087:              { return 285; } // Fives Full over Treys
                case 1372:              { return 286; } // Fives Full over Deuces

                case 210125:    { return 287; } // Fours Full over Aces
                case 171125:    { return 288; } // Fours Full over Kings
                case 120125:    { return 289; } // Fours Full over Queens
                case 105125:    { return 290; } // Fours Full over Jacks
                case 66125:             { return 291; } // Fours Full over Tens
                case 45125:             { return 292; } // Fours Full over Nines
                case 36125:             { return 293; } // Fours Full over Eights
                case 21125:             { return 294; } // Fours Full over Sevens
                case 15125:             { return 295; } // Fours Full over Sixes
                case 6125:              { return 296; } // Fours Full over Fives
                case 1125:              { return 297; } // Fours Full over Treys
                case 500:               { return 298; } // Fours Full over Deuces

                case 45387:             { return 299; } // Treys Full over Aces
                case 36963:             { return 300; } // Treys Full over Kings
                case 25947:             { return 301; } // Treys Full over Queens
                case 22707:             { return 302; } // Treys Full over Jacks
                case 14283:             { return 303; } // Treys Full over Tens
                case 9747:              { return 304; } // Treys Full over Nines
                case 7803:              { return 305; } // Treys Full over Eights
                case 4563:              { return 306; } // Treys Full over Sevens
                case 3267:              { return 307; } // Treys Full over Sixes
                case 1323:              { return 308; } // Treys Full over Fives
                case 675:               { return 309; } // Treys Full over Fours
                case 108:               { return 310; } // Treys Full over Deuces

                case 13448:             { return 311; } // Deuces Full over Aces
                case 10952:             { return 312; } // Deuces Full over Kings
                case 7688:              { return 313; } // Deuces Full over Queens
                case 6728:              { return 314; } // Deuces Full over Jacks
                case 4232:              { return 315; } // Deuces Full over Tens
                case 2888:              { return 316; } // Deuces Full over Nines
                case 2312:              { return 317; } // Deuces Full over Eights
                case 1352:              { return 318; } // Deuces Full over Sevens
                case 968:               { return 319; } // Deuces Full over Sixes
                case 392:               { return 320; } // Deuces Full over Fives
                case 200:               { return 321; } // Deuces Full over Fours
                case 72:                { return 322; } // Deuces Full over Treys

                case 31367009:  { return 1600; } // Ace-High Straight
                case 14535931:  { return 1601; } // King-High Straight
                case 6678671:   { return 1602; } // Queen-High Straight
                case 2800733:   { return 1603; } // Jack-High Straight
                case 1062347:   { return 1604; } // Ten-High Straight
                case 323323:    { return 1605; } // Nine-High Straight
                case 85085:             { return 1606; } // Eight-High Straight
                case 15015:             { return 1607; } // Seven-High Straight
                case 2310:              { return 1608; } // Sixes-High Straight
                case 8610:              { return 1609; } // Fives-High Straight
                case 79052387:  { return 1610; } // Three Aces
                case 73952233:  { return 1611; }
                case 58651771:  { return 1612; }
                case 48451463:  { return 1613; }
                case 43351309:  { return 1614; }
                case 33151001:  { return 1615; }
                case 28050847:  { return 1616; }
                case 17850539:  { return 1617; }
                case 12750385:  { return 1618; }
                case 7650231:   { return 1619; }
                case 5100154:   { return 1620; }
                case 61959979:  { return 1621; }
                case 49140673:  { return 1622; }
                case 40594469:  { return 1623; }
                case 36321367:  { return 1624; }
                case 27775163:  { return 1625; }
                case 23502061:  { return 1626; }
                case 14955857:  { return 1627; }
                case 10682755:  { return 1628; }
                case 6409653:   { return 1629; }
                case 4273102:   { return 1630; }
                case 45970307:  { return 1631; }
                case 37975471:  { return 1632; }
                case 33978053:  { return 1633; }
                case 25983217:  { return 1634; }
                case 21985799:  { return 1635; }
                case 13990963:  { return 1636; }
                case 9993545:   { return 1637; }
                case 5996127:   { return 1638; }
                case 3997418:   { return 1639; }
                case 30118477:  { return 1640; }
                case 26948111:  { return 1641; }
                case 20607379:  { return 1642; }
                case 17437013:  { return 1643; }
                case 11096281:  { return 1644; }
                case 7925915:   { return 1645; }
                case 4755549:   { return 1646; }
                case 3170366:   { return 1647; }
                case 22261483:  { return 1648; }
                case 17023487:  { return 1649; }
                case 14404489:  { return 1650; }
                case 9166493:   { return 1651; }
                case 6547495:   { return 1652; }
                case 3928497:   { return 1653; }
                case 2618998:   { return 1654; }
                case 15231541:  { return 1655; }
                case 12888227:  { return 1656; }
                case 8201599:   { return 1657; }
                case 5858285:   { return 1658; }
                case 3514971:   { return 1659; }
                case 2343314:   { return 1660; }
                case 9855703:   { return 1661; }
                case 6271811:   { return 1662; }
                case 4479865:   { return 1663; }
                case 2687919:   { return 1664; }
                case 1791946:   { return 1665; }
                case 5306917:   { return 1666; }
                case 3790655:   { return 1667; }
                case 2274393:   { return 1668; }
                case 1516262:   { return 1669; }
                case 2412235:   { return 1670; }
                case 1447341:   { return 1671; }
                case 964894:    { return 1672; }
                case 1033815:   { return 1673; }
                case 689210:    { return 1674; }
                case 413526:    { return 1675; }
                case 64379963:  { return 1676; } // Three Kings
                case 60226417:  { return 1677; }
                case 47765779:  { return 1678; }
                case 39458687:  { return 1679; }
                case 35305141:  { return 1680; }
                case 26998049:  { return 1681; }
                case 22844503:  { return 1682; }
                case 14537411:  { return 1683; }
                case 10383865:  { return 1684; }
                case 6230319:   { return 1685; }
                case 4153546:   { return 1686; }
                case 45537047:  { return 1687; }
                case 36115589:  { return 1688; }
                case 29834617:  { return 1689; }
                case 26694131:  { return 1690; }
                case 20413159:  { return 1691; }
                case 17272673:  { return 1692; }
                case 10991701:  { return 1693; }
                case 7851215:   { return 1694; }
                case 4710729:   { return 1695; }
                case 3140486:   { return 1696; }
                case 33785551:  { return 1697; }
                case 27909803:  { return 1698; }
                case 24971929:  { return 1699; }
                case 19096181:  { return 1700; }
                case 16158307:  { return 1701; }
                case 10282559:  { return 1702; }
                case 7344685:   { return 1703; }
                case 4406811:   { return 1704; }
                case 2937874:   { return 1705; }
                case 22135361:  { return 1706; }
                case 19805323:  { return 1707; }
                case 15145247:  { return 1708; }
                case 12815209:  { return 1709; }
                case 8155133:   { return 1710; }
                case 5825095:   { return 1711; }
                case 3495057:   { return 1712; }
                case 2330038:   { return 1713; }
                case 16360919:  { return 1714; }
                case 12511291:  { return 1715; }
                case 10586477:  { return 1716; }
                case 6736849:   { return 1717; }
                case 4812035:   { return 1718; }
                case 2887221:   { return 1719; }
                case 1924814:   { return 1720; }
                case 11194313:  { return 1721; }
                case 9472111:   { return 1722; }
                case 6027707:   { return 1723; }
                case 4305505:   { return 1724; }
                case 2583303:   { return 1725; }
                case 1722202:   { return 1726; }
                case 7243379:   { return 1727; }
                case 4609423:   { return 1728; }
                case 3292445:   { return 1729; }
                case 1975467:   { return 1730; }
                case 1316978:   { return 1731; }
                case 3900281:   { return 1732; }
                case 2785915:   { return 1733; }
                case 1671549:   { return 1734; }
                case 1114366:   { return 1735; }
                case 1772855:   { return 1736; }
                case 1063713:   { return 1737; }
                case 709142:    { return 1738; }
                case 759795:    { return 1739; }
                case 506530:    { return 1740; }
                case 303918:    { return 1741; }
                case 45192947:  { return 1742; } // Three Queens
                case 35421499:  { return 1743; }
                case 28092913:  { return 1744; }
                case 23207189:  { return 1745; }
                case 20764327:  { return 1746; }
                case 15878603:  { return 1747; }
                case 13435741:  { return 1748; }
                case 8550017:   { return 1749; }
                case 6107155:   { return 1750; }
                case 3664293:   { return 1751; }
                case 2442862:   { return 1752; }
                case 31965743:  { return 1753; }
                case 25352141:  { return 1754; }
                case 20943073:  { return 1755; }
                case 18738539:  { return 1756; }
                case 14329471:  { return 1757; }
                case 12124937:  { return 1758; }
                case 7715869:   { return 1759; }
                case 5511335:   { return 1760; }
                case 3306801:   { return 1761; }
                case 2204534:   { return 1762; }
                case 19870597:  { return 1763; }
                case 16414841:  { return 1764; }
                case 14686963:  { return 1765; }
                case 11231207:  { return 1766; }
                case 9503329:   { return 1767; }
                case 6047573:   { return 1768; }
                case 4319695:   { return 1769; }
                case 2591817:   { return 1770; }
                case 1727878:   { return 1771; }
                case 13018667:  { return 1772; }
                case 11648281:  { return 1773; }
                case 8907509:   { return 1774; }
                case 7537123:   { return 1775; }
                case 4796351:   { return 1776; }
                case 3425965:   { return 1777; }
                case 2055579:   { return 1778; }
                case 1370386:   { return 1779; }
                case 9622493:   { return 1780; }
                case 7358377:   { return 1781; }
                case 6226319:   { return 1782; }
                case 3962203:   { return 1783; }
                case 2830145:   { return 1784; }
                case 1698087:   { return 1785; }
                case 1132058:   { return 1786; }
                case 6583811:   { return 1787; }
                case 5570917:   { return 1788; }
                case 3545129:   { return 1789; }
                case 2532235:   { return 1790; }
                case 1519341:   { return 1791; }
                case 1012894:   { return 1792; }
                case 4260113:   { return 1793; }
                case 2710981:   { return 1794; }
                case 1936415:   { return 1795; }
                case 1161849:   { return 1796; }
                case 774566:    { return 1797; }
                case 2293907:   { return 1798; }
                case 1638505:   { return 1799; }
                case 983103:    { return 1800; }
                case 655402:    { return 1801; }
                case 1042685:   { return 1802; }
                case 625611:    { return 1803; }
                case 417074:    { return 1804; }
                case 446865:    { return 1805; }
                case 297910:    { return 1806; }
                case 178746:    { return 1807; }
                case 36998113:  { return 1808; } // Three Jacks
                case 30998419:  { return 1809; }
                case 22998827:  { return 1810; }
                case 18999031:  { return 1811; }
                case 16999133:  { return 1812; }
                case 12999337:  { return 1813; }
                case 10999439:  { return 1814; }
                case 6999643:   { return 1815; }
                case 4999745:   { return 1816; }
                case 2999847:   { return 1817; }
                case 1999898:   { return 1818; }
                case 27974183:  { return 1819; }
                case 20755039:  { return 1820; }
                case 17145467:  { return 1821; }
                case 15340681:  { return 1822; }
                case 11731109:  { return 1823; }
                case 9926323:   { return 1824; }
                case 6316751:   { return 1825; }
                case 4511965:   { return 1826; }
                case 2707179:   { return 1827; }
                case 1804786:   { return 1828; }
                case 17389357:  { return 1829; }
                case 14365121:  { return 1830; }
                case 12853003:  { return 1831; }
                case 9828767:   { return 1832; }
                case 8316649:   { return 1833; }
                case 5292413:   { return 1834; }
                case 3780295:   { return 1835; }
                case 2268177:   { return 1836; }
                case 1512118:   { return 1837; }
                case 10657993:  { return 1838; }
                case 9536099:   { return 1839; }
                case 7292311:   { return 1840; }
                case 6170417:   { return 1841; }
                case 3926629:   { return 1842; }
                case 2804735:   { return 1843; }
                case 1682841:   { return 1844; }
                case 1121894:   { return 1845; }
                case 7877647:   { return 1846; }
                case 6024083:   { return 1847; }
                case 5097301:   { return 1848; }
                case 3243737:   { return 1849; }
                case 2316955:   { return 1850; }
                case 1390173:   { return 1851; }
                case 926782:    { return 1852; }
                case 5389969:   { return 1853; }
                case 4560743:   { return 1854; }
                case 2902291:   { return 1855; }
                case 2073065:   { return 1856; }
                case 1243839:   { return 1857; }
                case 829226:    { return 1858; }
                case 3487627:   { return 1859; }
                case 2219399:   { return 1860; }
                case 1585285:   { return 1861; }
                case 951171:    { return 1862; }
                case 634114:    { return 1863; }
                case 1877953:   { return 1864; }
                case 1341395:   { return 1865; }
                case 804837:    { return 1866; }
                case 536558:    { return 1867; }
                case 853615:    { return 1868; }
                case 512169:    { return 1869; }
                case 341446:    { return 1870; }
                case 365835:    { return 1871; }
                case 243890:    { return 1872; }
                case 146334:    { return 1873; }
                case 18457339:  { return 1874; } // Three Tens
                case 15464257:  { return 1875; }
                case 14466563:  { return 1876; }
                case 9478093:   { return 1877; }
                case 8480399:   { return 1878; }
                case 6485011:   { return 1879; }
                case 5487317:   { return 1880; }
                case 3491929:   { return 1881; }
                case 2494235:   { return 1882; }
                case 1496541:   { return 1883; }
                case 997694:    { return 1884; }
                case 13955549:  { return 1885; }
                case 13055191:  { return 1886; }
                case 8553401:   { return 1887; }
                case 7653043:   { return 1888; }
                case 5852327:   { return 1889; }
                case 4951969:   { return 1890; }
                case 3151253:   { return 1891; }
                case 2250895:   { return 1892; }
                case 1350537:   { return 1893; }
                case 900358:    { return 1894; }
                case 10938133:  { return 1895; }
                case 7166363:   { return 1896; }
                case 6412009:   { return 1897; }
                case 4903301:   { return 1898; }
                case 4148947:   { return 1899; }
                case 2640239:   { return 1900; }
                case 1885885:   { return 1901; }
                case 1131531:   { return 1902; }
                case 754354:    { return 1903; }
                case 6704017:   { return 1904; }
                case 5998331:   { return 1905; }
                case 4586959:   { return 1906; }
                case 3881273:   { return 1907; }
                case 2469901:   { return 1908; }
                case 1764215:   { return 1909; }
                case 1058529:   { return 1910; }
                case 705686:    { return 1911; }
                case 3929941:   { return 1912; }
                case 3005249:   { return 1913; }
                case 2542903:   { return 1914; }
                case 1618211:   { return 1915; }
                case 1155865:   { return 1916; }
                case 693519:    { return 1917; }
                case 462346:    { return 1918; }
                case 2688907:   { return 1919; }
                case 2275229:   { return 1920; }
                case 1447873:   { return 1921; }
                case 1034195:   { return 1922; }
                case 620517:    { return 1923; }
                case 413678:    { return 1924; }
                case 1739881:   { return 1925; }
                case 1107197:   { return 1926; }
                case 790855:    { return 1927; }
                case 474513:    { return 1928; }
                case 316342:    { return 1929; }
                case 936859:    { return 1930; }
                case 669185:    { return 1931; }
                case 401511:    { return 1932; }
                case 267674:    { return 1933; }
                case 425845:    { return 1934; }
                case 255507:    { return 1935; }
                case 170338:    { return 1936; }
                case 182505:    { return 1937; }
                case 121670:    { return 1938; }
                case 73002:             { return 1939; }
                case 10405103:  { return 1940; } // Three Nines
                case 8717789:   { return 1941; }
                case 8155351:   { return 1942; }
                case 6468037:   { return 1943; }
                case 4780723:   { return 1944; }
                case 3655847:   { return 1945; }
                case 3093409:   { return 1946; }
                case 1968533:   { return 1947; }
                case 1406095:   { return 1948; }
                case 843657:    { return 1949; }
                case 562438:    { return 1950; }
                case 7867273:   { return 1951; }
                case 7359707:   { return 1952; }
                case 5837009:   { return 1953; }
                case 4314311:   { return 1954; }
                case 3299179:   { return 1955; }
                case 2791613:   { return 1956; }
                case 1776481:   { return 1957; }
                case 1268915:   { return 1958; }
                case 761349:    { return 1959; }
                case 507566:    { return 1960; }
                case 6166241:   { return 1961; }
                case 4890467:   { return 1962; }
                case 3614693:   { return 1963; }
                case 2764177:   { return 1964; }
                case 2338919:   { return 1965; }
                case 1488403:   { return 1966; }
                case 1063145:   { return 1967; }
                case 637887:    { return 1968; }
                case 425258:    { return 1969; }
                case 4574953:   { return 1970; }
                case 3381487:   { return 1971; }
                case 2585843:   { return 1972; }
                case 2188021:   { return 1973; }
                case 1392377:   { return 1974; }
                case 994555:    { return 1975; }
                case 596733:    { return 1976; }
                case 397822:    { return 1977; }
                case 2681869:   { return 1978; }
                case 2050841:   { return 1979; }
                case 1735327:   { return 1980; }
                case 1104299:   { return 1981; }
                case 788785:    { return 1982; }
                case 473271:    { return 1983; }
                case 315514:    { return 1984; }
                case 1515839:   { return 1985; }
                case 1282633:   { return 1986; }
                case 816221:    { return 1987; }
                case 583015:    { return 1988; }
                case 349809:    { return 1989; }
                case 233206:    { return 1990; }
                case 980837:    { return 1991; }
                case 624169:    { return 1992; }
                case 445835:    { return 1993; }
                case 267501:    { return 1994; }
                case 178334:    { return 1995; }
                case 528143:    { return 1996; }
                case 377245:    { return 1997; }
                case 226347:    { return 1998; }
                case 150898:    { return 1999; }
                case 240065:    { return 2000; }
                case 144039:    { return 2001; }
                case 96026:             { return 2002; }
                case 102885:    { return 2003; }
                case 68590:             { return 2004; }
                case 41154:             { return 2005; }
                case 7453021:   { return 2006; } // Three Eights
                case 6244423:   { return 2007; }
                case 5841557:   { return 2008; }
                case 4632959:   { return 2009; }
                case 3827227:   { return 2010; }
                case 2618629:   { return 2011; }
                case 2215763:   { return 2012; }
                case 1410031:   { return 2013; }
                case 1007165:   { return 2014; }
                case 604299:    { return 2015; }
                case 402866:    { return 2016; }
                case 5635211:   { return 2017; }
                case 5271649:   { return 2018; }
                case 4180963:   { return 2019; }
                case 3453839:   { return 2020; }
                case 2363153:   { return 2021; }
                case 1999591:   { return 2022; }
                case 1272467:   { return 2023; }
                case 908905:    { return 2024; }
                case 545343:    { return 2025; }
                case 363562:    { return 2026; }
                case 4416787:   { return 2027; }
                case 3502969:   { return 2028; }
                case 2893757:   { return 2029; }
                case 1979939:   { return 2030; }
                case 1675333:   { return 2031; }
                case 1066121:   { return 2032; }
                case 761515:    { return 2033; }
                case 456909:    { return 2034; }
                case 304606:    { return 2035; }
                case 3276971:   { return 2036; }
                case 2707063:   { return 2037; }
                case 1852201:   { return 2038; }
                case 1567247:   { return 2039; }
                case 997339:    { return 2040; }
                case 712385:    { return 2041; }
                case 427431:    { return 2042; }
                case 284954:    { return 2043; }
                case 2146981:   { return 2044; }
                case 1468987:   { return 2045; }
                case 1242989:   { return 2046; }
                case 790993:    { return 2047; }
                case 564995:    { return 2048; }
                case 338997:    { return 2049; }
                case 225998:    { return 2050; }
                case 1213511:   { return 2051; }
                case 1026817:   { return 2052; }
                case 653429:    { return 2053; }
                case 466735:    { return 2054; }
                case 280041:    { return 2055; }
                case 186694:    { return 2056; }
                case 702559:    { return 2057; }
                case 447083:    { return 2058; }
                case 319345:    { return 2059; }
                case 191607:    { return 2060; }
                case 127738:    { return 2061; }
                case 378301:    { return 2062; }
                case 270215:    { return 2063; }
                case 162129:    { return 2064; }
                case 108086:    { return 2065; }
                case 171955:    { return 2066; }
                case 103173:    { return 2067; }
                case 68782:             { return 2068; }
                case 73695:             { return 2069; }
                case 49130:             { return 2070; }
                case 29478:             { return 2071; }
                case 3332849:   { return 2072; } // Three Sevens
                case 2792387:   { return 2073; }
                case 2612233:   { return 2074; }
                case 2071771:   { return 2075; }
                case 1711463:   { return 2076; }
                case 1531309:   { return 2077; }
                case 990847:    { return 2078; }
                case 630539:    { return 2079; }
                case 450385:    { return 2080; }
                case 270231:    { return 2081; }
                case 180154:    { return 2082; }
                case 2519959:   { return 2083; }
                case 2357381:   { return 2084; }
                case 1869647:   { return 2085; }
                case 1544491:   { return 2086; }
                case 1381913:   { return 2087; }
                case 894179:    { return 2088; }
                case 569023:    { return 2089; }
                case 406445:    { return 2090; }
                case 243867:    { return 2091; }
                case 162578:    { return 2092; }
                case 1975103:   { return 2093; }
                case 1566461:   { return 2094; }
                case 1294033:   { return 2095; }
                case 1157819:   { return 2096; }
                case 749177:    { return 2097; }
                case 476749:    { return 2098; }
                case 340535:    { return 2099; }
                case 204321:    { return 2100; }
                case 136214:    { return 2101; }
                case 1465399:   { return 2102; }
                case 1210547:   { return 2103; }
                case 1083121:   { return 2104; }
                case 700843:    { return 2105; }
                case 445991:    { return 2106; }
                case 318565:    { return 2107; }
                case 191139:    { return 2108; }
                case 127426:    { return 2109; }
                case 960089:    { return 2110; }
                case 859027:    { return 2111; }
                case 555841:    { return 2112; }
                case 353717:    { return 2113; }
                case 252655:    { return 2114; }
                case 151593:    { return 2115; }
                case 101062:    { return 2116; }
                case 709631:    { return 2117; }
                case 459173:    { return 2118; }
                case 292201:    { return 2119; }
                case 208715:    { return 2120; }
                case 125229:    { return 2121; }
                case 83486:             { return 2122; }
                case 410839:    { return 2123; }
                case 261443:    { return 2124; }
                case 186745:    { return 2125; }
                case 112047:    { return 2126; }
                case 74698:             { return 2127; }
                case 169169:    { return 2128; }
                case 120835:    { return 2129; }
                case 72501:             { return 2130; }
                case 48334:             { return 2131; }
                case 76895:             { return 2132; }
                case 46137:             { return 2133; }
                case 30758:             { return 2134; }
                case 32955:             { return 2135; }
                case 21970:             { return 2136; }
                case 13182:             { return 2137; }
                case 2019127:   { return 2138; } // Three Sixes
                case 1691701:   { return 2139; }
                case 1582559:   { return 2140; }
                case 1255133:   { return 2141; }
                case 1036849:   { return 2142; }
                case 927707:    { return 2143; }
                case 709423:    { return 2144; }
                case 381997:    { return 2145; }
                case 272855:    { return 2146; }
                case 163713:    { return 2147; }
                case 109142:    { return 2148; }
                case 1526657:   { return 2149; }
                case 1428163:   { return 2150; }
                case 1132681:   { return 2151; }
                case 935693:    { return 2152; }
                case 837199:    { return 2153; }
                case 640211:    { return 2154; }
                case 344729:    { return 2155; }
                case 246235:    { return 2156; }
                case 147741:    { return 2157; }
                case 98494:             { return 2158; }
                case 1196569:   { return 2159; }
                case 949003:    { return 2160; }
                case 783959:    { return 2161; }
                case 701437:    { return 2162; }
                case 536393:    { return 2163; }
                case 288827:    { return 2164; }
                case 206305:    { return 2165; }
                case 123783:    { return 2166; }
                case 82522:             { return 2167; }
                case 887777:    { return 2168; }
                case 733381:    { return 2169; }
                case 656183:    { return 2170; }
                case 501787:    { return 2171; }
                case 270193:    { return 2172; }
                case 192995:    { return 2173; }
                case 115797:    { return 2174; }
                case 77198:             { return 2175; }
                case 581647:    { return 2176; }
                case 520421:    { return 2177; }
                case 397969:    { return 2178; }
                case 214291:    { return 2179; }
                case 153065:    { return 2180; }
                case 91839:             { return 2181; }
                case 61226:             { return 2182; }
                case 429913:    { return 2183; }
                case 328757:    { return 2184; }
                case 177023:    { return 2185; }
                case 126445:    { return 2186; }
                case 75867:             { return 2187; }
                case 50578:             { return 2188; }
                case 294151:    { return 2189; }
                case 158389:    { return 2190; }
                case 113135:    { return 2191; }
                case 67881:             { return 2192; }
                case 45254:             { return 2193; }
                case 121121:    { return 2194; }
                case 86515:             { return 2195; }
                case 51909:             { return 2196; }
                case 34606:             { return 2197; }
                case 46585:             { return 2198; }
                case 27951:             { return 2199; }
                case 18634:             { return 2200; }
                case 19965:             { return 2201; }
                case 13310:             { return 2202; }
                case 7986:              { return 2203; }
                case 520331:    { return 2204; } // Three Fives
                case 435953:    { return 2205; }
                case 407827:    { return 2206; }
                case 323449:    { return 2207; }
                case 267197:    { return 2208; }
                case 239071:    { return 2209; }
                case 182819:    { return 2210; }
                case 154693:    { return 2211; }
                case 70315:             { return 2212; }
                case 42189:             { return 2213; }
                case 28126:             { return 2214; }
                case 393421:    { return 2215; }
                case 368039:    { return 2216; }
                case 291893:    { return 2217; }
                case 241129:    { return 2218; }
                case 215747:    { return 2219; }
                case 164983:    { return 2220; }
                case 139601:    { return 2221; }
                case 63455:             { return 2222; }
                case 38073:             { return 2223; }
                case 25382:             { return 2224; }
                case 308357:    { return 2225; }
                case 244559:    { return 2226; }
                case 202027:    { return 2227; }
                case 180761:    { return 2228; }
                case 138229:    { return 2229; }
                case 116963:    { return 2230; }
                case 53165:             { return 2231; }
                case 31899:             { return 2232; }
                case 21266:             { return 2233; }
                case 228781:    { return 2234; }
                case 188993:    { return 2235; }
                case 169099:    { return 2236; }
                case 129311:    { return 2237; }
                case 109417:    { return 2238; }
                case 49735:             { return 2239; }
                case 29841:             { return 2240; }
                case 19894:             { return 2241; }
                case 149891:    { return 2242; }
                case 134113:    { return 2243; }
                case 102557:    { return 2244; }
                case 86779:             { return 2245; }
                case 39445:             { return 2246; }
                case 23667:             { return 2247; }
                case 15778:             { return 2248; }
                case 110789:    { return 2249; }
                case 84721:             { return 2250; }
                case 71687:             { return 2251; }
                case 32585:             { return 2252; }
                case 19551:             { return 2253; }
                case 13034:             { return 2254; }
                case 75803:             { return 2255; }
                case 64141:             { return 2256; }
                case 29155:             { return 2257; }
                case 17493:             { return 2258; }
                case 11662:             { return 2259; }
                case 49049:             { return 2260; }
                case 22295:             { return 2261; }
                case 13377:             { return 2262; }
                case 8918:              { return 2263; }
                case 18865:             { return 2264; }
                case 11319:             { return 2265; }
                case 7546:              { return 2266; }
                case 5145:              { return 2267; }
                case 3430:              { return 2268; }
                case 2058:              { return 2269; }
                case 189625:    { return 2270; } // Three Fours
                case 158875:    { return 2271; }
                case 148625:    { return 2272; }
                case 117875:    { return 2273; }
                case 97375:             { return 2274; }
                case 87125:             { return 2275; }
                case 66625:             { return 2276; }
                case 56375:             { return 2277; }
                case 35875:             { return 2278; }
                case 15375:             { return 2279; }
                case 10250:             { return 2280; }
                case 143375:    { return 2281; }
                case 134125:    { return 2282; }
                case 106375:    { return 2283; }
                case 87875:             { return 2284; }
                case 78625:             { return 2285; }
                case 60125:             { return 2286; }
                case 50875:             { return 2287; }
                case 32375:             { return 2288; }
                case 13875:             { return 2289; }
                case 9250:              { return 2290; }
                case 112375:    { return 2291; }
                case 89125:             { return 2292; }
                case 73625:             { return 2293; }
                case 65875:             { return 2294; }
                case 50375:             { return 2295; }
                case 42625:             { return 2296; }
                case 27125:             { return 2297; }
                case 11625:             { return 2298; }
                case 7750:              { return 2299; }
                case 83375:             { return 2300; }
                case 68875:             { return 2301; }
                case 61625:             { return 2302; }
                case 47125:             { return 2303; }
                case 39875:             { return 2304; }
                case 25375:             { return 2305; }
                case 10875:             { return 2306; }
                case 7250:              { return 2307; }
                case 54625:             { return 2308; }
                case 48875:             { return 2309; }
                case 37375:             { return 2310; }
                case 31625:             { return 2311; }
                case 20125:             { return 2312; }
                case 8625:              { return 2313; }
                case 5750:              { return 2314; }
                case 40375:             { return 2315; }
                case 30875:             { return 2316; }
                case 26125:             { return 2317; }
                case 16625:             { return 2318; }
                case 7125:              { return 2319; }
                case 4750:              { return 2320; }
                case 27625:             { return 2321; }
                case 23375:             { return 2322; }
                case 14875:             { return 2323; }
                case 6375:              { return 2324; }
                case 4250:              { return 2325; }
                case 17875:             { return 2326; }
                case 11375:             { return 2327; }
                case 4875:              { return 2328; }
                case 3250:              { return 2329; }
                case 9625:              { return 2330; }
                case 4125:              { return 2331; }
                case 2750:              { return 2332; }
                case 2625:              { return 2333; }
                case 1750:              { return 2334; }
                case 750:               { return 2335; }
                case 40959:             { return 2336; } // Three Treys
                case 34317:             { return 2337; }
                case 32103:             { return 2338; }
                case 25461:             { return 2339; }
                case 21033:             { return 2340; }
                case 18819:             { return 2341; }
                case 14391:             { return 2342; }
                case 12177:             { return 2343; }
                case 7749:              { return 2344; }
                case 5535:              { return 2345; }
                case 2214:              { return 2346; }
                case 30969:             { return 2347; }
                case 28971:             { return 2348; }
                case 22977:             { return 2349; }
                case 18981:             { return 2350; }
                case 16983:             { return 2351; }
                case 12987:             { return 2352; }
                case 10989:             { return 2353; }
                case 6993:              { return 2354; }
                case 4995:              { return 2355; }
                case 1998:              { return 2356; }
                case 24273:             { return 2357; }
                case 19251:             { return 2358; }
                case 15903:             { return 2359; }
                case 14229:             { return 2360; }
                case 10881:             { return 2361; }
                case 9207:              { return 2362; }
                case 5859:              { return 2363; }
                case 4185:              { return 2364; }
                case 1674:              { return 2365; }
                case 18009:             { return 2366; }
                case 14877:             { return 2367; }
                case 13311:             { return 2368; }
                case 10179:             { return 2369; }
                case 8613:              { return 2370; }
                case 5481:              { return 2371; }
                case 3915:              { return 2372; }
                case 1566:              { return 2373; }
                case 11799:             { return 2374; }
                case 10557:             { return 2375; }
                case 8073:              { return 2376; }
                case 6831:              { return 2377; }
                case 4347:              { return 2378; }
                case 3105:              { return 2379; }
                case 1242:              { return 2380; }
                case 8721:              { return 2381; }
                case 6669:              { return 2382; }
                case 5643:              { return 2383; }
                case 3591:              { return 2384; }
                case 2565:              { return 2385; }
                case 1026:              { return 2386; }
                case 5967:              { return 2387; }
                case 5049:              { return 2388; }
                case 3213:              { return 2389; }
                case 2295:              { return 2390; }
                case 918:               { return 2391; }
                case 3861:              { return 2392; }
                case 2457:              { return 2393; }
                case 1755:              { return 2394; }
                case 702:               { return 2395; }
                case 2079:              { return 2396; }
                case 1485:              { return 2397; }
                case 594:               { return 2398; }
                case 945:               { return 2399; }
                case 378:               { return 2400; }
                case 270:               { return 2401; }
                case 12136:             { return 2402; } // Three Deuces
                case 10168:             { return 2403; }
                case 9512:              { return 2404; }
                case 7544:              { return 2405; }
                case 6232:              { return 2406; }
                case 5576:              { return 2407; }
                case 4264:              { return 2408; }
                case 3608:              { return 2409; }
                case 2296:              { return 2410; }
                case 1640:              { return 2411; }
                case 984:               { return 2412; }
                case 9176:              { return 2413; }
                case 8584:              { return 2414; }
                case 6808:              { return 2415; }
                case 5624:              { return 2416; }
                case 5032:              { return 2417; }
                case 3848:              { return 2418; }
                case 3256:              { return 2419; }
                case 2072:              { return 2420; }
                case 1480:              { return 2421; }
                case 888:               { return 2422; }
                case 7192:              { return 2423; }
                case 5704:              { return 2424; }
                case 4712:              { return 2425; }
                case 4216:              { return 2426; }
                case 3224:              { return 2427; }
                case 2728:              { return 2428; }
                case 1736:              { return 2429; }
                case 1240:              { return 2430; }
                case 744:               { return 2431; }
                case 5336:              { return 2432; }
                case 4408:              { return 2433; }
                case 3944:              { return 2434; }
                case 3016:              { return 2435; }
                case 2552:              { return 2436; }
                case 1624:              { return 2437; }
                case 1160:              { return 2438; }
                case 696:               { return 2439; }
                case 3496:              { return 2440; }
                case 3128:              { return 2441; }
                case 2392:              { return 2442; }
                case 2024:              { return 2443; }
                case 1288:              { return 2444; }
                case 920:               { return 2445; }
                case 552:               { return 2446; }
                case 2584:              { return 2447; }
                case 1976:              { return 2448; }
                case 1672:              { return 2449; }
                case 1064:              { return 2450; }
                case 760:               { return 2451; }
                case 456:               { return 2452; }
                case 1768:              { return 2453; }
                case 1496:              { return 2454; }
                case 952:               { return 2455; }
                case 680:               { return 2456; }
                case 408:               { return 2457; }
                case 1144:              { return 2458; }
                case 728:               { return 2459; }
                case 520:               { return 2460; }
                case 312:               { return 2461; }
                case 616:               { return 2462; }
                case 440:               { return 2463; }
                case 264:               { return 2464; }
                case 280:               { return 2465; }
                case 168:               { return 2466; }
                case 120:               { return 2467; }
                case 71339959:  { return 2468; } // Aces and Kings
                case 66737381:  { return 2469; }
                case 52929647:  { return 2470; }
                case 43724491:  { return 2471; }
                case 39121913:  { return 2472; }
                case 29916757:  { return 2473; }
                case 25314179:  { return 2474; }
                case 16109023:  { return 2475; }
                case 11506445:  { return 2476; }
                case 6903867:   { return 2477; }
                case 4602578:   { return 2478; }
                case 59771317:  { return 2479; } // Aces and Queens
                case 46847789:  { return 2480; }
                case 37155143:  { return 2481; }
                case 30693379:  { return 2482; }
                case 27462497:  { return 2483; }
                case 21000733:  { return 2484; }
                case 17769851:  { return 2485; }
                case 11308087:  { return 2486; }
                case 8077205:   { return 2487; }
                case 4846323:   { return 2488; }
                case 3230882:   { return 2489; }
                case 52307677:  { return 2490; } // Aces and Jacks
                case 43825351:  { return 2491; }
                case 32515583:  { return 2492; }
                case 26860699:  { return 2493; }
                case 24033257:  { return 2494; }
                case 18378373:  { return 2495; }
                case 15550931:  { return 2496; }
                case 9896047:   { return 2497; }
                case 7068605:   { return 2498; }
                case 4241163:   { return 2499; }
                case 2827442:   { return 2500; }
                case 32902213:  { return 2501; } // Aces and Tens
                case 27566719:  { return 2502; }
                case 25788221:  { return 2503; }
                case 16895731:  { return 2504; }
                case 15117233:  { return 2505; }
                case 11560237:  { return 2506; }
                case 9781739:   { return 2507; }
                case 6224743:   { return 2508; }
                case 4446245:   { return 2509; }
                case 2667747:   { return 2510; }
                case 1778498:   { return 2511; }
                case 22453117:  { return 2512; } // Aces and Nines
                case 18812071:  { return 2513; }
                case 17598389:  { return 2514; }
                case 13957343:  { return 2515; }
                case 10316297:  { return 2516; }
                case 7888933:   { return 2517; }
                case 6675251:   { return 2518; }
                case 4247887:   { return 2519; }
                case 3034205:   { return 2520; }
                case 1820523:   { return 2521; }
                case 1213682:   { return 2522; }
                case 17974933:  { return 2523; } // Aces and Eights
                case 15060079:  { return 2524; }
                case 14088461:  { return 2525; }
                case 11173607:  { return 2526; }
                case 9230371:   { return 2527; }
                case 6315517:   { return 2528; }
                case 5343899:   { return 2529; }
                case 3400663:   { return 2530; }
                case 2429045:   { return 2531; }
                case 1457427:   { return 2532; }
                case 971618:    { return 2533; }
                case 10511293:  { return 2534; } // Aces and Sevens
                case 8806759:   { return 2535; }
                case 8238581:   { return 2536; }
                case 6534047:   { return 2537; }
                case 5397691:   { return 2538; }
                case 4829513:   { return 2539; }
                case 3124979:   { return 2540; }
                case 1988623:   { return 2541; }
                case 1420445:   { return 2542; }
                case 852267:    { return 2543; }
                case 568178:    { return 2544; }
                case 7525837:   { return 2545; } // Aces and Sixes
                case 6305431:   { return 2546; }
                case 5898629:   { return 2547; }
                case 4678223:   { return 2548; }
                case 3864619:   { return 2549; }
                case 3457817:   { return 2550; }
                case 2644213:   { return 2551; }
                case 1423807:   { return 2552; }
                case 1017005:   { return 2553; }
                case 610203:    { return 2554; }
                case 406802:    { return 2555; }
                case 3047653:   { return 2556; } // Aces and Fives
                case 2553439:   { return 2557; }
                case 2388701:   { return 2558; }
                case 1894487:   { return 2559; }
                case 1565011:   { return 2560; }
                case 1400273:   { return 2561; }
                case 1070797:   { return 2562; }
                case 906059:    { return 2563; }
                case 411845:    { return 2564; }
                case 247107:    { return 2565; }
                case 164738:    { return 2566; }
                case 1554925:   { return 2567; } // Aces and Fours
                case 1302775:   { return 2568; }
                case 1218725:   { return 2569; }
                case 966575:    { return 2570; }
                case 798475:    { return 2571; }
                case 714425:    { return 2572; }
                case 546325:    { return 2573; }
                case 462275:    { return 2574; }
                case 294175:    { return 2575; }
                case 126075:    { return 2576; }
                case 84050:             { return 2577; }
                case 559773:    { return 2578; } // Aces and Treys
                case 468999:    { return 2579; }
                case 438741:    { return 2580; }
                case 347967:    { return 2581; }
                case 287451:    { return 2582; }
                case 257193:    { return 2583; }
                case 196677:    { return 2584; }
                case 166419:    { return 2585; }
                case 105903:    { return 2586; }
                case 75645:             { return 2587; }
                case 30258:             { return 2588; }
                case 248788:    { return 2589; } // Aces and Deuces
                case 208444:    { return 2590; }
                case 194996:    { return 2591; }
                case 154652:    { return 2592; }
                case 127756:    { return 2593; }
                case 114308:    { return 2594; }
                case 87412:             { return 2595; }
                case 73964:             { return 2596; }
                case 47068:             { return 2597; }
                case 33620:             { return 2598; }
                case 20172:             { return 2599; }
                case 53939969:  { return 2600; } // Kings and Queens
                case 38152661:  { return 2601; }
                case 30259007:  { return 2602; }
                case 24996571:  { return 2603; }
                case 22365353:  { return 2604; }
                case 17102917:  { return 2605; }
                case 14471699:  { return 2606; }
                case 9209263:   { return 2607; }
                case 6578045:   { return 2608; }
                case 3946827:   { return 2609; }
                case 2631218:   { return 2610; }
                case 47204489:  { return 2611; } // Kings and Jacks
                case 35691199:  { return 2612; }
                case 26480567:  { return 2613; }
                case 21875251:  { return 2614; }
                case 19572593:  { return 2615; }
                case 14967277:  { return 2616; }
                case 12664619:  { return 2617; }
                case 8059303:   { return 2618; }
                case 5756645:   { return 2619; }
                case 3453987:   { return 2620; }
                case 2302658:   { return 2621; }
                case 29692241:  { return 2622; } // Kings and Tens
                case 22450231:  { return 2623; }
                case 21001829:  { return 2624; }
                case 13759819:  { return 2625; }
                case 12311417:  { return 2626; }
                case 9414613:   { return 2627; }
                case 7966211:   { return 2628; }
                case 5069407:   { return 2629; }
                case 3621005:   { return 2630; }
                case 2172603:   { return 2631; }
                case 1448402:   { return 2632; }
                case 20262569:  { return 2633; } // Kings and Nines
                case 15320479:  { return 2634; }
                case 14332061:  { return 2635; }
                case 11366807:  { return 2636; }
                case 8401553:   { return 2637; }
                case 6424717:   { return 2638; }
                case 5436299:   { return 2639; }
                case 3459463:   { return 2640; }
                case 2471045:   { return 2641; }
                case 1482627:   { return 2642; }
                case 988418:    { return 2643; }
                case 16221281:  { return 2644; } // Kings and Eights
                case 12264871:  { return 2645; }
                case 11473589:  { return 2646; }
                case 9099743:   { return 2647; }
                case 7517179:   { return 2648; }
                case 5143333:   { return 2649; }
                case 4352051:   { return 2650; }
                case 2769487:   { return 2651; }
                case 1978205:   { return 2652; }
                case 1186923:   { return 2653; }
                case 791282:    { return 2654; }
                case 9485801:   { return 2655; } // Kings and Sevens
                case 7172191:   { return 2656; }
                case 6709469:   { return 2657; }
                case 5321303:   { return 2658; }
                case 4395859:   { return 2659; }
                case 3933137:   { return 2660; }
                case 2544971:   { return 2661; }
                case 1619527:   { return 2662; }
                case 1156805:   { return 2663; }
                case 694083:    { return 2664; }
                case 462722:    { return 2665; }
                case 6791609:   { return 2666; } // Kings and Sixes
                case 5135119:   { return 2667; }
                case 4803821:   { return 2668; }
                case 3809927:   { return 2669; }
                case 3147331:   { return 2670; }
                case 2816033:   { return 2671; }
                case 2153437:   { return 2672; }
                case 1159543:   { return 2673; }
                case 828245:    { return 2674; }
                case 496947:    { return 2675; }
                case 331298:    { return 2676; }
                case 2750321:   { return 2677; } // Kings and Fives
                case 2079511:   { return 2678; }
                case 1945349:   { return 2679; }
                case 1542863:   { return 2680; }
                case 1274539:   { return 2681; }
                case 1140377:   { return 2682; }
                case 872053:    { return 2683; }
                case 737891:    { return 2684; }
                case 335405:    { return 2685; }
                case 201243:    { return 2686; }
                case 134162:    { return 2687; }
                case 1403225:   { return 2688; } // Kings and Fours
                case 1060975:   { return 2689; }
                case 992525:    { return 2690; }
                case 787175:    { return 2691; }
                case 650275:    { return 2692; }
                case 581825:    { return 2693; }
                case 444925:    { return 2694; }
                case 376475:    { return 2695; }
                case 239575:    { return 2696; }
                case 102675:    { return 2697; }
                case 68450:             { return 2698; }
                case 505161:    { return 2699; } // Kings and Treys
                case 381951:    { return 2700; }
                case 357309:    { return 2701; }
                case 283383:    { return 2702; }
                case 234099:    { return 2703; }
                case 209457:    { return 2704; }
                case 160173:    { return 2705; }
                case 135531:    { return 2706; }
                case 86247:             { return 2707; }
                case 61605:             { return 2708; }
                case 24642:             { return 2709; }
                case 224516:    { return 2710; } // Kings and Deuces
                case 169756:    { return 2711; }
                case 158804:    { return 2712; }
                case 125948:    { return 2713; }
                case 104044:    { return 2714; }
                case 93092:             { return 2715; }
                case 71188:             { return 2716; }
                case 60236:             { return 2717; }
                case 38332:             { return 2718; }
                case 27380:             { return 2719; }
                case 16428:             { return 2720; }
                case 33136241:  { return 2721; } // Queens and Jacks
                case 29903437:  { return 2722; }
                case 18588623:  { return 2723; }
                case 15355819:  { return 2724; }
                case 13739417:  { return 2725; }
                case 10506613:  { return 2726; }
                case 8890211:   { return 2727; }
                case 5657407:   { return 2728; }
                case 4041005:   { return 2729; }
                case 2424603:   { return 2730; }
                case 1616402:   { return 2731; }
                case 20843129:  { return 2732; } // Queens and Tens
                case 18809653:  { return 2733; }
                case 14742701:  { return 2734; }
                case 9659011:   { return 2735; }
                case 8642273:   { return 2736; }
                case 6608797:   { return 2737; }
                case 5592059:   { return 2738; }
                case 3558583:   { return 2739; }
                case 2541845:   { return 2740; }
                case 1525107:   { return 2741; }
                case 1016738:   { return 2742; }
                case 14223761:  { return 2743; } // Queens and Nines
                case 12836077:  { return 2744; }
                case 10060709:  { return 2745; }
                case 7979183:   { return 2746; }
                case 5897657:   { return 2747; }
                case 4509973:   { return 2748; }
                case 3816131:   { return 2749; }
                case 2428447:   { return 2750; }
                case 1734605:   { return 2751; }
                case 1040763:   { return 2752; }
                case 693842:    { return 2753; }
                case 11386889:  { return 2754; } // Queens and Eights
                case 10275973:  { return 2755; }
                case 8054141:   { return 2756; }
                case 6387767:   { return 2757; }
                case 5276851:   { return 2758; }
                case 3610477:   { return 2759; }
                case 3055019:   { return 2760; }
                case 1944103:   { return 2761; }
                case 1388645:   { return 2762; }
                case 833187:    { return 2763; }
                case 555458:    { return 2764; }
                case 6658769:   { return 2765; } // Queens and Sevens
                case 6009133:   { return 2766; }
                case 4709861:   { return 2767; }
                case 3735407:   { return 2768; }
                case 3085771:   { return 2769; }
                case 2760953:   { return 2770; }
                case 1786499:   { return 2771; }
                case 1136863:   { return 2772; }
                case 812045:    { return 2773; }
                case 487227:    { return 2774; }
                case 324818:    { return 2775; }
                case 4767521:   { return 2776; } // Queens and Sixes
                case 4302397:   { return 2777; }
                case 3372149:   { return 2778; }
                case 2674463:   { return 2779; }
                case 2209339:   { return 2780; }
                case 1976777:   { return 2781; }
                case 1511653:   { return 2782; }
                case 813967:    { return 2783; }
                case 581405:    { return 2784; }
                case 348843:    { return 2785; }
                case 232562:    { return 2786; }
                case 1930649:   { return 2787; } // Queens and Fives
                case 1742293:   { return 2788; }
                case 1365581:   { return 2789; }
                case 1083047:   { return 2790; }
                case 894691:    { return 2791; }
                case 800513:    { return 2792; }
                case 612157:    { return 2793; }
                case 517979:    { return 2794; }
                case 235445:    { return 2795; }
                case 141267:    { return 2796; }
                case 94178:             { return 2797; }
                case 985025:    { return 2798; } // Queens and Fours
                case 888925:    { return 2799; }
                case 696725:    { return 2800; }
                case 552575:    { return 2801; }
                case 456475:    { return 2802; }
                case 408425:    { return 2803; }
                case 312325:    { return 2804; }
                case 264275:    { return 2805; }
                case 168175:    { return 2806; }
                case 72075:             { return 2807; }
                case 48050:             { return 2808; }
                case 354609:    { return 2809; } // Queens and Treys
                case 320013:    { return 2810; }
                case 250821:    { return 2811; }
                case 198927:    { return 2812; }
                case 164331:    { return 2813; }
                case 147033:    { return 2814; }
                case 112437:    { return 2815; }
                case 95139:             { return 2816; }
                case 60543:             { return 2817; }
                case 43245:             { return 2818; }
                case 17298:             { return 2819; }
                case 157604:    { return 2820; } // Queens and Deuces
                case 142228:    { return 2821; }
                case 111476:    { return 2822; }
                case 88412:             { return 2823; }
                case 73036:             { return 2824; }
                case 65348:             { return 2825; }
                case 49972:             { return 2826; }
                case 42284:             { return 2827; }
                case 26908:             { return 2828; }
                case 19220:             { return 2829; }
                case 11532:             { return 2830; }
                case 18240449:  { return 2831; } // Jacks and Tens
                case 16460893:  { return 2832; }
                case 13791559:  { return 2833; }
                case 8452891:   { return 2834; }
                case 7563113:   { return 2835; }
                case 5783557:   { return 2836; }
                case 4893779:   { return 2837; }
                case 3114223:   { return 2838; }
                case 2224445:   { return 2839; }
                case 1334667:   { return 2840; }
                case 889778:    { return 2841; }
                case 12447641:  { return 2842; } // Jacks and Nines
                case 11233237:  { return 2843; }
                case 9411631:   { return 2844; }
                case 6982823:   { return 2845; }
                case 5161217:   { return 2846; }
                case 3946813:   { return 2847; }
                case 3339611:   { return 2848; }
                case 2125207:   { return 2849; }
                case 1518005:   { return 2850; }
                case 910803:    { return 2851; }
                case 607202:    { return 2852; }
                case 9965009:   { return 2853; } // Jacks and Eights
                case 8992813:   { return 2854; }
                case 7534519:   { return 2855; }
                case 5590127:   { return 2856; }
                case 4617931:   { return 2857; }
                case 3159637:   { return 2858; }
                case 2673539:   { return 2859; }
                case 1701343:   { return 2860; }
                case 1215245:   { return 2861; }
                case 729147:    { return 2862; }
                case 486098:    { return 2863; }
                case 5827289:   { return 2864; } // Jacks and Sevens
                case 5258773:   { return 2865; }
                case 4405999:   { return 2866; }
                case 3268967:   { return 2867; }
                case 2700451:   { return 2868; }
                case 2416193:   { return 2869; }
                case 1563419:   { return 2870; }
                case 994903:    { return 2871; }
                case 710645:    { return 2872; }
                case 426387:    { return 2873; }
                case 284258:    { return 2874; }
                case 4172201:   { return 2875; } // Jacks and Sixes
                case 3765157:   { return 2876; }
                case 3154591:   { return 2877; }
                case 2340503:   { return 2878; }
                case 1933459:   { return 2879; }
                case 1729937:   { return 2880; }
                case 1322893:   { return 2881; }
                case 712327:    { return 2882; }
                case 508805:    { return 2883; }
                case 305283:    { return 2884; }
                case 203522:    { return 2885; }
                case 1689569:   { return 2886; } // Jacks and Fives
                case 1524733:   { return 2887; }
                case 1277479:   { return 2888; }
                case 947807:    { return 2889; }
                case 782971:    { return 2890; }
                case 700553:    { return 2891; }
                case 535717:    { return 2892; }
                case 453299:    { return 2893; }
                case 206045:    { return 2894; }
                case 123627:    { return 2895; }
                case 82418:             { return 2896; }
                case 862025:    { return 2897; } // Jacks and Fours
                case 777925:    { return 2898; }
                case 651775:    { return 2899; }
                case 483575:    { return 2900; }
                case 399475:    { return 2901; }
                case 357425:    { return 2902; }
                case 273325:    { return 2903; }
                case 231275:    { return 2904; }
                case 147175:    { return 2905; }
                case 63075:             { return 2906; }
                case 42050:             { return 2907; }
                case 310329:    { return 2908; } // Jacks and Treys
                case 280053:    { return 2909; }
                case 234639:    { return 2910; }
                case 174087:    { return 2911; }
                case 143811:    { return 2912; }
                case 128673:    { return 2913; }
                case 98397:             { return 2914; }
                case 83259:             { return 2915; }
                case 52983:             { return 2916; }
                case 37845:             { return 2917; }
                case 15138:             { return 2918; }
                case 137924:    { return 2919; } // Jacks and Deuces
                case 124468:    { return 2920; }
                case 104284:    { return 2921; }
                case 77372:             { return 2922; }
                case 63916:             { return 2923; }
                case 57188:             { return 2924; }
                case 43732:             { return 2925; }
                case 37004:             { return 2926; }
                case 23548:             { return 2927; }
                case 16820:             { return 2928; }
                case 10092:             { return 2929; }
                case 7829729:   { return 2930; } // Tens and Nines
                case 7065853:   { return 2931; }
                case 5920039:   { return 2932; }
                case 5538101:   { return 2933; }
                case 3246473:   { return 2934; }
                case 2482597:   { return 2935; }
                case 2100659:   { return 2936; }
                case 1336783:   { return 2937; }
                case 954845:    { return 2938; }
                case 572907:    { return 2939; }
                case 381938:    { return 2940; }
                case 6268121:   { return 2941; } // Tens and Eights
                case 5656597:   { return 2942; }
                case 4739311:   { return 2943; }
                case 4433549:   { return 2944; }
                case 2904739:   { return 2945; }
                case 1987453:   { return 2946; }
                case 1681691:   { return 2947; }
                case 1070167:   { return 2948; }
                case 764405:    { return 2949; }
                case 458643:    { return 2950; }
                case 305762:    { return 2951; }
                case 3665441:   { return 2952; } // Tens and Sevens
                case 3307837:   { return 2953; }
                case 2771431:   { return 2954; }
                case 2592629:   { return 2955; }
                case 1698619:   { return 2956; }
                case 1519817:   { return 2957; }
                case 983411:    { return 2958; }
                case 625807:    { return 2959; }
                case 447005:    { return 2960; }
                case 268203:    { return 2961; }
                case 178802:    { return 2962; }
                case 2624369:   { return 2963; } // Tens and Sixes
                case 2368333:   { return 2964; }
                case 1984279:   { return 2965; }
                case 1856261:   { return 2966; }
                case 1216171:   { return 2967; }
                case 1088153:   { return 2968; }
                case 832117:    { return 2969; }
                case 448063:    { return 2970; }
                case 320045:    { return 2971; }
                case 192027:    { return 2972; }
                case 128018:    { return 2973; }
                case 1062761:   { return 2974; } // Tens and Fives
                case 959077:    { return 2975; }
                case 803551:    { return 2976; }
                case 751709:    { return 2977; }
                case 492499:    { return 2978; }
                case 440657:    { return 2979; }
                case 336973:    { return 2980; }
                case 285131:    { return 2981; }
                case 129605:    { return 2982; }
                case 77763:             { return 2983; }
                case 51842:             { return 2984; }
                case 542225:    { return 2985; } // Tens and Fours
                case 489325:    { return 2986; }
                case 409975:    { return 2987; }
                case 383525:    { return 2988; }
                case 251275:    { return 2989; }
                case 224825:    { return 2990; }
                case 171925:    { return 2991; }
                case 145475:    { return 2992; }
                case 92575:             { return 2993; }
                case 39675:             { return 2994; }
                case 26450:             { return 2995; }
                case 195201:    { return 2996; } // Tens and Treys
                case 176157:    { return 2997; }
                case 147591:    { return 2998; }
                case 138069:    { return 2999; }
                case 90459:             { return 3000; }
                case 80937:             { return 3001; }
                case 61893:             { return 3002; }
                case 52371:             { return 3003; }
                case 33327:             { return 3004; }
                case 23805:             { return 3005; }
                case 9522:              { return 3006; }
                case 86756:             { return 3007; } // Tens and Deuces
                case 78292:             { return 3008; }
                case 65596:             { return 3009; }
                case 61364:             { return 3010; }
                case 40204:             { return 3011; }
                case 35972:             { return 3012; }
                case 27508:             { return 3013; }
                case 23276:             { return 3014; }
                case 14812:             { return 3015; }
                case 10580:             { return 3016; }
                case 6348:              { return 3017; }
                case 4277489:   { return 3018; } // Nines and Eights
                case 3860173:   { return 3019; }
                case 3234199:   { return 3020; }
                case 3025541:   { return 3021; }
                case 2399567:   { return 3022; }
                case 1356277:   { return 3023; }
                case 1147619:   { return 3024; }
                case 730303:    { return 3025; }
                case 521645:    { return 3026; }
                case 312987:    { return 3027; }
                case 208658:    { return 3028; }
                case 2501369:   { return 3029; } // Nines and Sevens
                case 2257333:   { return 3030; }
                case 1891279:   { return 3031; }
                case 1769261:   { return 3032; }
                case 1403207:   { return 3033; }
                case 1037153:   { return 3034; }
                case 671099:    { return 3035; }
                case 427063:    { return 3036; }
                case 305045:    { return 3037; }
                case 183027:    { return 3038; }
                case 122018:    { return 3039; }
                case 1790921:   { return 3040; } // Nines and Sixes
                case 1616197:   { return 3041; }
                case 1354111:   { return 3042; }
                case 1266749:   { return 3043; }
                case 1004663:   { return 3044; }
                case 742577:    { return 3045; }
                case 567853:    { return 3046; }
                case 305767:    { return 3047; }
                case 218405:    { return 3048; }
                case 131043:    { return 3049; }
                case 87362:             { return 3050; }
                case 725249:    { return 3051; } // Nines and Fives
                case 654493:    { return 3052; }
                case 548359:    { return 3053; }
                case 512981:    { return 3054; }
                case 406847:    { return 3055; }
                case 300713:    { return 3056; }
                case 229957:    { return 3057; }
                case 194579:    { return 3058; }
                case 88445:             { return 3059; }
                case 53067:             { return 3060; }
                case 35378:             { return 3061; }
                case 370025:    { return 3062; } // Nines and Fours
                case 333925:    { return 3063; }
                case 279775:    { return 3064; }
                case 261725:    { return 3065; }
                case 207575:    { return 3066; }
                case 153425:    { return 3067; }
                case 117325:    { return 3068; }
                case 99275:             { return 3069; }
                case 63175:             { return 3070; }
                case 27075:             { return 3071; }
                case 18050:             { return 3072; }
                case 133209:    { return 3073; } // Nines and Treys
                case 120213:    { return 3074; }
                case 100719:    { return 3075; }
                case 94221:             { return 3076; }
                case 74727:             { return 3077; }
                case 55233:             { return 3078; }
                case 42237:             { return 3079; }
                case 35739:             { return 3080; }
                case 22743:             { return 3081; }
                case 16245:             { return 3082; }
                case 6498:              { return 3083; }
                case 59204:             { return 3084; } // Nines and Deuces
                case 53428:             { return 3085; }
                case 44764:             { return 3086; }
                case 41876:             { return 3087; }
                case 33212:             { return 3088; }
                case 24548:             { return 3089; }
                case 18772:             { return 3090; }
                case 15884:             { return 3091; }
                case 10108:             { return 3092; }
                case 7220:              { return 3093; }
                case 4332:              { return 3094; }
                case 2002481:   { return 3095; } // Eights and Sevens
                case 1807117:   { return 3096; }
                case 1514071:   { return 3097; }
                case 1416389:   { return 3098; }
                case 1123343:   { return 3099; }
                case 927979:    { return 3100; }
                case 537251:    { return 3101; }
                case 341887:    { return 3102; }
                case 244205:    { return 3103; }
                case 146523:    { return 3104; }
                case 97682:             { return 3105; }
                case 1433729:   { return 3106; } // Eights and Sixes
                case 1293853:   { return 3107; }
                case 1084039:   { return 3108; }
                case 1014101:   { return 3109; }
                case 804287:    { return 3110; }
                case 664411:    { return 3111; }
                case 454597:    { return 3112; }
                case 244783:    { return 3113; }
                case 174845:    { return 3114; }
                case 104907:    { return 3115; }
                case 69938:             { return 3116; }
                case 580601:    { return 3117; } // Eights and Fives
                case 523957:    { return 3118; }
                case 438991:    { return 3119; }
                case 410669:    { return 3120; }
                case 325703:    { return 3121; }
                case 269059:    { return 3122; }
                case 184093:    { return 3123; }
                case 155771:    { return 3124; }
                case 70805:             { return 3125; }
                case 42483:             { return 3126; }
                case 28322:             { return 3127; }
                case 296225:    { return 3128; } // Eights and Fours
                case 267325:    { return 3129; }
                case 223975:    { return 3130; }
                case 209525:    { return 3131; }
                case 166175:    { return 3132; }
                case 137275:    { return 3133; }
                case 93925:             { return 3134; }
                case 79475:             { return 3135; }
                case 50575:             { return 3136; }
                case 21675:             { return 3137; }
                case 14450:             { return 3138; }
                case 106641:    { return 3139; } // Eights and Treys
                case 96237:             { return 3140; }
                case 80631:             { return 3141; }
                case 75429:             { return 3142; }
                case 59823:             { return 3143; }
                case 49419:             { return 3144; }
                case 33813:             { return 3145; }
                case 28611:             { return 3146; }
                case 18207:             { return 3147; }
                case 13005:             { return 3148; }
                case 5202:              { return 3149; }
                case 47396:             { return 3150; } // Eights and Deuces
                case 42772:             { return 3151; }
                case 35836:             { return 3152; }
                case 33524:             { return 3153; }
                case 26588:             { return 3154; }
                case 21964:             { return 3155; }
                case 15028:             { return 3156; }
                case 12716:             { return 3157; }
                case 8092:              { return 3158; }
                case 5780:              { return 3159; }
                case 3468:              { return 3160; }
                case 838409:    { return 3161; } // Sevens and Sixes
                case 756613:    { return 3162; }
                case 633919:    { return 3163; }
                case 593021:    { return 3164; }
                case 470327:    { return 3165; }
                case 388531:    { return 3166; }
                case 347633:    { return 3167; }
                case 143143:    { return 3168; }
                case 102245:    { return 3169; }
                case 61347:             { return 3170; }
                case 40898:             { return 3171; }
                case 339521:    { return 3172; } // Sevens and Fives
                case 306397:    { return 3173; }
                case 256711:    { return 3174; }
                case 240149:    { return 3175; }
                case 190463:    { return 3176; }
                case 157339:    { return 3177; }
                case 140777:    { return 3178; }
                case 91091:             { return 3179; }
                case 41405:             { return 3180; }
                case 24843:             { return 3181; }
                case 16562:             { return 3182; }
                case 173225:    { return 3183; } // Sevens and Fours
                case 156325:    { return 3184; }
                case 130975:    { return 3185; }
                case 122525:    { return 3186; }
                case 97175:             { return 3187; }
                case 80275:             { return 3188; }
                case 71825:             { return 3189; }
                case 46475:             { return 3190; }
                case 29575:             { return 3191; }
                case 12675:             { return 3192; }
                case 8450:              { return 3193; }
                case 62361:             { return 3194; } // Sevens and Treys
                case 56277:             { return 3195; }
                case 47151:             { return 3196; }
                case 44109:             { return 3197; }
                case 34983:             { return 3198; }
                case 28899:             { return 3199; }
                case 25857:             { return 3200; }
                case 16731:             { return 3201; }
                case 10647:             { return 3202; }
                case 7605:              { return 3203; }
                case 3042:              { return 3204; }
                case 27716:             { return 3205; } // Sevens and Deuces
                case 25012:             { return 3206; }
                case 20956:             { return 3207; }
                case 19604:             { return 3208; }
                case 15548:             { return 3209; }
                case 12844:             { return 3210; }
                case 11492:             { return 3211; }
                case 7436:              { return 3212; }
                case 4732:              { return 3213; }
                case 3380:              { return 3214; }
                case 2028:              { return 3215; }
                case 243089:    { return 3216; } // Sixes and Fives
                case 219373:    { return 3217; }
                case 183799:    { return 3218; }
                case 171941:    { return 3219; }
                case 136367:    { return 3220; }
                case 112651:    { return 3221; }
                case 100793:    { return 3222; }
                case 77077:             { return 3223; }
                case 29645:             { return 3224; }
                case 17787:             { return 3225; }
                case 11858:             { return 3226; }
                case 124025:    { return 3227; } // Sixes and Fours
                case 111925:    { return 3228; }
                case 93775:             { return 3229; }
                case 87725:             { return 3230; }
                case 69575:             { return 3231; }
                case 57475:             { return 3232; }
                case 51425:             { return 3233; }
                case 39325:             { return 3234; }
                case 21175:             { return 3235; }
                case 9075:              { return 3236; }
                case 6050:              { return 3237; }
                case 44649:             { return 3238; } // Sixes and Treys
                case 40293:             { return 3239; }
                case 33759:             { return 3240; }
                case 31581:             { return 3241; }
                case 25047:             { return 3242; }
                case 20691:             { return 3243; }
                case 18513:             { return 3244; }
                case 14157:             { return 3245; }
                case 7623:              { return 3246; }
                case 5445:              { return 3247; }
                case 2178:              { return 3248; }
                case 19844:             { return 3249; } // Sixes and Deuces
                case 17908:             { return 3250; }
                case 15004:             { return 3251; }
                case 14036:             { return 3252; }
                case 11132:             { return 3253; }
                case 9196:              { return 3254; }
                case 8228:              { return 3255; }
                case 6292:              { return 3256; }
                case 3388:              { return 3257; }
                case 2420:              { return 3258; }
                case 1452:              { return 3259; }
                case 50225:             { return 3260; } // Fives and Fours
                case 45325:             { return 3261; }
                case 37975:             { return 3262; }
                case 35525:             { return 3263; }
                case 28175:             { return 3264; }
                case 23275:             { return 3265; }
                case 20825:             { return 3266; }
                case 15925:             { return 3267; }
                case 13475:             { return 3268; }
                case 3675:              { return 3269; }
                case 2450:              { return 3270; }
                case 18081:             { return 3271; } // Fives and Treys
                case 16317:             { return 3272; }
                case 13671:             { return 3273; }
                case 12789:             { return 3274; }
                case 10143:             { return 3275; }
                case 8379:              { return 3276; }
                case 7497:              { return 3277; }
                case 5733:              { return 3278; }
                case 4851:              { return 3279; }
                case 2205:              { return 3280; }
                case 882:               { return 3281; }
                case 8036:              { return 3282; } // Fives and Deuces
                case 7252:              { return 3283; }
                case 6076:              { return 3284; }
                case 5684:              { return 3285; }
                case 4508:              { return 3286; }
                case 3724:              { return 3287; }
                case 3332:              { return 3288; }
                case 2548:              { return 3289; }
                case 2156:              { return 3290; }
                case 980:               { return 3291; }
                case 588:               { return 3292; }
                case 9225:              { return 3293; } // Fours and Treys
                case 8325:              { return 3294; }
                case 6975:              { return 3295; }
                case 6525:              { return 3296; }
                case 5175:              { return 3297; }
                case 4275:              { return 3298; }
                case 3825:              { return 3299; }
                case 2925:              { return 3300; }
                case 2475:              { return 3301; }
                case 1575:              { return 3302; }
                case 450:               { return 3303; }
                case 4100:              { return 3304; } // Fours and Deuces
                case 3700:              { return 3305; }
                case 3100:              { return 3306; }
                case 2900:              { return 3307; }
                case 2300:              { return 3308; }
                case 1900:              { return 3309; }
                case 1700:              { return 3310; }
                case 1300:              { return 3311; }
                case 1100:              { return 3312; }
                case 700:               { return 3313; }
                case 300:               { return 3314; }
                case 1476:              { return 3315; } // Treys and Deuces
                case 1332:              { return 3316; }
                case 1116:              { return 3317; }
                case 1044:              { return 3318; }
                case 828:               { return 3319; }
                case 684:               { return 3320; }
                case 612:               { return 3321; }
                case 468:               { return 3322; }
                case 396:               { return 3323; }
                case 252:               { return 3324; }
                case 180:               { return 3325; }
                case 55915103:  { return 3326; } // Pair of Aces
                case 44346461:  { return 3327; }
                case 36634033:  { return 3328; }
                case 32777819:  { return 3329; }
                case 25065391:  { return 3330; }
                case 21209177:  { return 3331; }
                case 13496749:  { return 3332; }
                case 9640535:   { return 3333; }
                case 5784321:   { return 3334; }
                case 3856214:   { return 3335; }
                case 41485399:  { return 3336; }
                case 34270547:  { return 3337; }
                case 30663121:  { return 3338; }
                case 23448269:  { return 3339; }
                case 19840843:  { return 3340; }
                case 12625991:  { return 3341; }
                case 9018565:   { return 3342; }
                case 5411139:   { return 3343; }
                case 3607426:   { return 3344; }
                case 27180089:  { return 3345; }
                case 24319027:  { return 3346; }
                case 18596903:  { return 3347; }
                case 15735841:  { return 3348; }
                case 10013717:  { return 3349; }
                case 7152655:   { return 3350; }
                case 4291593:   { return 3351; }
                case 2861062:   { return 3352; }
                case 20089631:  { return 3353; }
                case 15362659:  { return 3354; }
                case 12999173:  { return 3355; }
                case 8272201:   { return 3356; }
                case 5908715:   { return 3357; }
                case 3545229:   { return 3358; }
                case 2363486:   { return 3359; }
                case 13745537:  { return 3360; }
                case 11630839:  { return 3361; }
                case 7401443:   { return 3362; }
                case 5286745:   { return 3363; }
                case 3172047:   { return 3364; }
                case 2114698:   { return 3365; }
                case 8894171:   { return 3366; }
                case 5659927:   { return 3367; }
                case 4042805:   { return 3368; }
                case 2425683:   { return 3369; }
                case 1617122:   { return 3370; }
                case 4789169:   { return 3371; }
                case 3420835:   { return 3372; }
                case 2052501:   { return 3373; }
                case 1368334:   { return 3374; }
                case 2176895:   { return 3375; }
                case 1306137:   { return 3376; }
                case 870758:    { return 3377; }
                case 932955:    { return 3378; }
                case 621970:    { return 3379; }
                case 373182:    { return 3380; }
                case 34758037:  { return 3381; }
                case 28713161:  { return 3382; }
                case 25690723:  { return 3383; }
                case 19645847:  { return 3384; }
                case 16623409:  { return 3385; }
                case 10578533:  { return 3386; }
                case 7556095:   { return 3387; }
                case 4533657:   { return 3388; }
                case 3022438:   { return 3389; }
                case 22772507:  { return 3390; }
                case 20375401:  { return 3391; }
                case 15581189:  { return 3392; }
                case 13184083:  { return 3393; }
                case 8389871:   { return 3394; }
                case 5992765:   { return 3395; }
                case 3595659:   { return 3396; }
                case 2397106:   { return 3397; }
                case 16831853:  { return 3398; }
                case 12871417:  { return 3399; }
                case 10891199:  { return 3400; }
                case 6930763:   { return 3401; }
                case 4950545:   { return 3402; }
                case 2970327:   { return 3403; }
                case 1980218:   { return 3404; }
                case 11516531:  { return 3405; }
                case 9744757:   { return 3406; }
                case 6201209:   { return 3407; }
                case 4429435:   { return 3408; }
                case 2657661:   { return 3409; }
                case 1771774:   { return 3410; }
                case 7451873:   { return 3411; }
                case 4742101:   { return 3412; }
                case 3387215:   { return 3413; }
                case 2032329:   { return 3414; }
                case 1354886:   { return 3415; }
                case 4012547:   { return 3416; }
                case 2866105:   { return 3417; }
                case 1719663:   { return 3418; }
                case 1146442:   { return 3419; }
                case 1823885:   { return 3420; }
                case 1094331:   { return 3421; }
                case 729554:    { return 3422; }
                case 781665:    { return 3423; }
                case 521110:    { return 3424; }
                case 312666:    { return 3425; }
                case 21303313:  { return 3426; }
                case 19060859:  { return 3427; }
                case 14575951:  { return 3428; }
                case 12333497:  { return 3429; }
                case 7848589:   { return 3430; }
                case 5606135:   { return 3431; }
                case 3363681:   { return 3432; }
                case 2242454:   { return 3433; }
                case 15745927:  { return 3434; }
                case 12041003:  { return 3435; }
                case 10188541:  { return 3436; }
                case 6483617:   { return 3437; }
                case 4631155:   { return 3438; }
                case 2778693:   { return 3439; }
                case 1852462:   { return 3440; }
                case 10773529:  { return 3441; }
                case 9116063:   { return 3442; }
                case 5801131:   { return 3443; }
                case 4143665:   { return 3444; }
                case 2486199:   { return 3445; }
                case 1657466:   { return 3446; }
                case 6971107:   { return 3447; }
                case 4436159:   { return 3448; }
                case 3168685:   { return 3449; }
                case 1901211:   { return 3450; }
                case 1267474:   { return 3451; }
                case 3753673:   { return 3452; }
                case 2681195:   { return 3453; }
                case 1608717:   { return 3454; }
                case 1072478:   { return 3455; }
                case 1706215:   { return 3456; }
                case 1023729:   { return 3457; }
                case 682486:    { return 3458; }
                case 731235:    { return 3459; }
                case 487490:    { return 3460; }
                case 292494:    { return 3461; }
                case 12488149:  { return 3462; }
                case 9549761:   { return 3463; }
                case 8080567:   { return 3464; }
                case 5142179:   { return 3465; }
                case 3672985:   { return 3466; }
                case 2203791:   { return 3467; }
                case 1469194:   { return 3468; }
                case 8544523:   { return 3469; }
                case 7229981:   { return 3470; }
                case 4600897:   { return 3471; }
                case 3286355:   { return 3472; }
                case 1971813:   { return 3473; }
                case 1314542:   { return 3474; }
                case 5528809:   { return 3475; }
                case 3518333:   { return 3476; }
                case 2513095:   { return 3477; }
                case 1507857:   { return 3478; }
                case 1005238:   { return 3479; }
                case 2977051:   { return 3480; }
                case 2126465:   { return 3481; }
                case 1275879:   { return 3482; }
                case 850586:    { return 3483; }
                case 1353205:   { return 3484; }
                case 811923:    { return 3485; }
                case 541282:    { return 3486; }
                case 579945:    { return 3487; }
                case 386630:    { return 3488; }
                case 231978:    { return 3489; }
                case 7058519:   { return 3490; }
                case 5972593:   { return 3491; }
                case 3800741:   { return 3492; }
                case 2714815:   { return 3493; }
                case 1628889:   { return 3494; }
                case 1085926:   { return 3495; }
                case 4567277:   { return 3496; }
                case 2906449:   { return 3497; }
                case 2076035:   { return 3498; }
                case 1245621:   { return 3499; }
                case 830414:    { return 3500; }
                case 2459303:   { return 3501; }
                case 1756645:   { return 3502; }
                case 1053987:   { return 3503; }
                case 702658:    { return 3504; }
                case 1117865:   { return 3505; }
                case 670719:    { return 3506; }
                case 447146:    { return 3507; }
                case 479085:    { return 3508; }
                case 319390:    { return 3509; }
                case 191634:    { return 3510; }
                case 4086511:   { return 3511; }
                case 2600507:   { return 3512; }
                case 1857505:   { return 3513; }
                case 1114503:   { return 3514; }
                case 743002:    { return 3515; }
                case 2200429:   { return 3516; }
                case 1571735:   { return 3517; }
                case 943041:    { return 3518; }
                case 628694:    { return 3519; }
                case 1000195:   { return 3520; }
                case 600117:    { return 3521; }
                case 400078:    { return 3522; }
                case 428655:    { return 3523; }
                case 285770:    { return 3524; }
                case 171462:    { return 3525; }
                case 1682681:   { return 3526; }
                case 1201915:   { return 3527; }
                case 721149:    { return 3528; }
                case 480766:    { return 3529; }
                case 764855:    { return 3530; }
                case 458913:    { return 3531; }
                case 305942:    { return 3532; }
                case 327795:    { return 3533; }
                case 218530:    { return 3534; }
                case 131118:    { return 3535; }
                case 647185:    { return 3536; }
                case 388311:    { return 3537; }
                case 258874:    { return 3538; }
                case 277365:    { return 3539; }
                case 184910:    { return 3540; }
                case 110946:    { return 3541; }
                case 176505:    { return 3542; }
                case 117670:    { return 3543; }
                case 70602:             { return 3544; }
                case 50430:             { return 3545; }
                case 50459971:  { return 3546; } // Pair of Kings
                case 40019977:  { return 3547; }
                case 33059981:  { return 3548; }
                case 29579983:  { return 3549; }
                case 22619987:  { return 3550; }
                case 19139989:  { return 3551; }
                case 12179993:  { return 3552; }
                case 8699995:   { return 3553; }
                case 5219997:   { return 3554; }
                case 3479998:   { return 3555; }
                case 37438043:  { return 3556; }
                case 30927079:  { return 3557; }
                case 27671597:  { return 3558; }
                case 21160633:  { return 3559; }
                case 17905151:  { return 3560; }
                case 11394187:  { return 3561; }
                case 8138705:   { return 3562; }
                case 4883223:   { return 3563; }
                case 3255482:   { return 3564; }
                case 24528373:  { return 3565; }
                case 21946439:  { return 3566; }
                case 16782571:  { return 3567; }
                case 14200637:  { return 3568; }
                case 9036769:   { return 3569; }
                case 6454835:   { return 3570; }
                case 3872901:   { return 3571; }
                case 2581934:   { return 3572; }
                case 18129667:  { return 3573; }
                case 13863863:  { return 3574; }
                case 11730961:  { return 3575; }
                case 7465157:   { return 3576; }
                case 5332255:   { return 3577; }
                case 3199353:   { return 3578; }
                case 2132902:   { return 3579; }
                case 12404509:  { return 3580; }
                case 10496123:  { return 3581; }
                case 6679351:   { return 3582; }
                case 4770965:   { return 3583; }
                case 2862579:   { return 3584; }
                case 1908386:   { return 3585; }
                case 8026447:   { return 3586; }
                case 5107739:   { return 3587; }
                case 3648385:   { return 3588; }
                case 2189031:   { return 3589; }
                case 1459354:   { return 3590; }
                case 4321933:   { return 3591; }
                case 3087095:   { return 3592; }
                case 1852257:   { return 3593; }
                case 1234838:   { return 3594; }
                case 1964515:   { return 3595; }
                case 1178709:   { return 3596; }
                case 785806:    { return 3597; }
                case 841935:    { return 3598; }
                case 561290:    { return 3599; }
                case 336774:    { return 3600; }
                case 28306813:  { return 3601; }
                case 23383889:  { return 3602; }
                case 20922427:  { return 3603; }
                case 15999503:  { return 3604; }
                case 13538041:  { return 3605; }
                case 8615117:   { return 3606; }
                case 6153655:   { return 3607; }
                case 3692193:   { return 3608; }
                case 2461462:   { return 3609; }
                case 18545843:  { return 3610; }
                case 16593649:  { return 3611; }
                case 12689261:  { return 3612; }
                case 10737067:  { return 3613; }
                case 6832679:   { return 3614; }
                case 4880485:   { return 3615; }
                case 2928291:   { return 3616; }
                case 1952194:   { return 3617; }
                case 13707797:  { return 3618; }
                case 10482433:  { return 3619; }
                case 8869751:   { return 3620; }
                case 5644387:   { return 3621; }
                case 4031705:   { return 3622; }
                case 2419023:   { return 3623; }
                case 1612682:   { return 3624; }
                case 9379019:   { return 3625; }
                case 7936093:   { return 3626; }
                case 5050241:   { return 3627; }
                case 3607315:   { return 3628; }
                case 2164389:   { return 3629; }
                case 1442926:   { return 3630; }
                case 6068777:   { return 3631; }
                case 3861949:   { return 3632; }
                case 2758535:   { return 3633; }
                case 1655121:   { return 3634; }
                case 1103414:   { return 3635; }
                case 3267803:   { return 3636; }
                case 2334145:   { return 3637; }
                case 1400487:   { return 3638; }
                case 933658:    { return 3639; }
                case 1485365:   { return 3640; }
                case 891219:    { return 3641; }
                case 594146:    { return 3642; }
                case 636585:    { return 3643; }
                case 424390:    { return 3644; }
                case 254634:    { return 3645; }
                case 17349337:  { return 3646; }
                case 15523091:  { return 3647; }
                case 11870599:  { return 3648; }
                case 10044353:  { return 3649; }
                case 6391861:   { return 3650; }
                case 4565615:   { return 3651; }
                case 2739369:   { return 3652; }
                case 1826246:   { return 3653; }
                case 12823423:  { return 3654; }
                case 9806147:   { return 3655; }
                case 8297509:   { return 3656; }
                case 5280233:   { return 3657; }
                case 3771595:   { return 3658; }
                case 2262957:   { return 3659; }
                case 1508638:   { return 3660; }
                case 8773921:   { return 3661; }
                case 7424087:   { return 3662; }
                case 4724419:   { return 3663; }
                case 3374585:   { return 3664; }
                case 2024751:   { return 3665; }
                case 1349834:   { return 3666; }
                case 5677243:   { return 3667; }
                case 3612791:   { return 3668; }
                case 2580565:   { return 3669; }
                case 1548339:   { return 3670; }
                case 1032226:   { return 3671; }
                case 3056977:   { return 3672; }
                case 2183555:   { return 3673; }
                case 1310133:   { return 3674; }
                case 873422:    { return 3675; }
                case 1389535:   { return 3676; }
                case 833721:    { return 3677; }
                case 555814:    { return 3678; }
                case 595515:    { return 3679; }
                case 397010:    { return 3680; }
                case 238206:    { return 3681; }
                case 10170301:  { return 3682; }
                case 7777289:   { return 3683; }
                case 6580783:   { return 3684; }
                case 4187771:   { return 3685; }
                case 2991265:   { return 3686; }
                case 1794759:   { return 3687; }
                case 1196506:   { return 3688; }
                case 6958627:   { return 3689; }
                case 5888069:   { return 3690; }
                case 3746953:   { return 3691; }
                case 2676395:   { return 3692; }
                case 1605837:   { return 3693; }
                case 1070558:   { return 3694; }
                case 4502641:   { return 3695; }
                case 2865317:   { return 3696; }
                case 2046655:   { return 3697; }
                case 1227993:   { return 3698; }
                case 818662:    { return 3699; }
                case 2424499:   { return 3700; }
                case 1731785:   { return 3701; }
                case 1039071:   { return 3702; }
                case 692714:    { return 3703; }
                case 1102045:   { return 3704; }
                case 661227:    { return 3705; }
                case 440818:    { return 3706; }
                case 472305:    { return 3707; }
                case 314870:    { return 3708; }
                case 188922:    { return 3709; }
                case 5748431:   { return 3710; }
                case 4864057:   { return 3711; }
                case 3095309:   { return 3712; }
                case 2210935:   { return 3713; }
                case 1326561:   { return 3714; }
                case 884374:    { return 3715; }
                case 3719573:   { return 3716; }
                case 2367001:   { return 3717; }
                case 1690715:   { return 3718; }
                case 1014429:   { return 3719; }
                case 676286:    { return 3720; }
                case 2002847:   { return 3721; }
                case 1430605:   { return 3722; }
                case 858363:    { return 3723; }
                case 572242:    { return 3724; }
                case 910385:    { return 3725; }
                case 546231:    { return 3726; }
                case 364154:    { return 3727; }
                case 390165:    { return 3728; }
                case 260110:    { return 3729; }
                case 156066:    { return 3730; }
                case 3328039:   { return 3731; }
                case 2117843:   { return 3732; }
                case 1512745:   { return 3733; }
                case 907647:    { return 3734; }
                case 605098:    { return 3735; }
                case 1792021:   { return 3736; }
                case 1280015:   { return 3737; }
                case 768009:    { return 3738; }
                case 512006:    { return 3739; }
                case 814555:    { return 3740; }
                case 488733:    { return 3741; }
                case 325822:    { return 3742; }
                case 349095:    { return 3743; }
                case 232730:    { return 3744; }
                case 139638:    { return 3745; }
                case 1370369:   { return 3746; }
                case 978835:    { return 3747; }
                case 587301:    { return 3748; }
                case 391534:    { return 3749; }
                case 622895:    { return 3750; }
                case 373737:    { return 3751; }
                case 249158:    { return 3752; }
                case 266955:    { return 3753; }
                case 177970:    { return 3754; }
                case 106782:    { return 3755; }
                case 527065:    { return 3756; }
                case 316239:    { return 3757; }
                case 210826:    { return 3758; }
                case 225885:    { return 3759; }
                case 150590:    { return 3760; }
                case 90354:             { return 3761; }
                case 143745:    { return 3762; }
                case 95830:             { return 3763; }
                case 57498:             { return 3764; }
                case 41070:             { return 3765; }
                case 42277273:  { return 3766; } // Pair of Queens
                case 33530251:  { return 3767; }
                case 27698903:  { return 3768; }
                case 24783229:  { return 3769; }
                case 18951881:  { return 3770; }
                case 16036207:  { return 3771; }
                case 10204859:  { return 3772; }
                case 7289185:   { return 3773; }
                case 4373511:   { return 3774; }
                case 2915674:   { return 3775; }
                case 26280467:  { return 3776; }
                case 21709951:  { return 3777; }
                case 19424693:  { return 3778; }
                case 14854177:  { return 3779; }
                case 12568919:  { return 3780; }
                case 7998403:   { return 3781; }
                case 5713145:   { return 3782; }
                case 3427887:   { return 3783; }
                case 2285258:   { return 3784; }
                case 17218237:  { return 3785; }
                case 15405791:  { return 3786; }
                case 11780899:  { return 3787; }
                case 9968453:   { return 3788; }
                case 6343561:   { return 3789; }
                case 4531115:   { return 3790; }
                case 2718669:   { return 3791; }
                case 1812446:   { return 3792; }
                case 12726523:  { return 3793; }
                case 9732047:   { return 3794; }
                case 8234809:   { return 3795; }
                case 5240333:   { return 3796; }
                case 3743095:   { return 3797; }
                case 2245857:   { return 3798; }
                case 1497238:   { return 3799; }
                case 8707621:   { return 3800; }
                case 7367987:   { return 3801; }
                case 4688719:   { return 3802; }
                case 3349085:   { return 3803; }
                case 2009451:   { return 3804; }
                case 1339634:   { return 3805; }
                case 5634343:   { return 3806; }
                case 3585491:   { return 3807; }
                case 2561065:   { return 3808; }
                case 1536639:   { return 3809; }
                case 1024426:   { return 3810; }
                case 3033877:   { return 3811; }
                case 2167055:   { return 3812; }
                case 1300233:   { return 3813; }
                case 866822:    { return 3814; }
                case 1379035:   { return 3815; }
                case 827421:    { return 3816; }
                case 551614:    { return 3817; }
                case 591015:    { return 3818; }
                case 394010:    { return 3819; }
                case 236406:    { return 3820; }
                case 23716519:  { return 3821; }
                case 19591907:  { return 3822; }
                case 17529601:  { return 3823; }
                case 13404989:  { return 3824; }
                case 11342683:  { return 3825; }
                case 7218071:   { return 3826; }
                case 5155765:   { return 3827; }
                case 3093459:   { return 3828; }
                case 2062306:   { return 3829; }
                case 15538409:  { return 3830; }
                case 13902787:  { return 3831; }
                case 10631543:  { return 3832; }
                case 8995921:   { return 3833; }
                case 5724677:   { return 3834; }
                case 4089055:   { return 3835; }
                case 2453433:   { return 3836; }
                case 1635622:   { return 3837; }
                case 11484911:  { return 3838; }
                case 8782579:   { return 3839; }
                case 7431413:   { return 3840; }
                case 4729081:   { return 3841; }
                case 3377915:   { return 3842; }
                case 2026749:   { return 3843; }
                case 1351166:   { return 3844; }
                case 7858097:   { return 3845; }
                case 6649159:   { return 3846; }
                case 4231283:   { return 3847; }
                case 3022345:   { return 3848; }
                case 1813407:   { return 3849; }
                case 1208938:   { return 3850; }
                case 5084651:   { return 3851; }
                case 3235687:   { return 3852; }
                case 2311205:   { return 3853; }
                case 1386723:   { return 3854; }
                case 924482:    { return 3855; }
                case 2737889:   { return 3856; }
                case 1955635:   { return 3857; }
                case 1173381:   { return 3858; }
                case 782254:    { return 3859; }
                case 1244495:   { return 3860; }
                case 746697:    { return 3861; }
                case 497798:    { return 3862; }
                case 533355:    { return 3863; }
                case 355570:    { return 3864; }
                case 213342:    { return 3865; }
                case 12178753:  { return 3866; }
                case 10896779:  { return 3867; }
                case 8332831:   { return 3868; }
                case 7050857:   { return 3869; }
                case 4486909:   { return 3870; }
                case 3204935:   { return 3871; }
                case 1922961:   { return 3872; }
                case 1281974:   { return 3873; }
                case 9001687:   { return 3874; }
                case 6883643:   { return 3875; }
                case 5824621:   { return 3876; }
                case 3706577:   { return 3877; }
                case 2647555:   { return 3878; }
                case 1588533:   { return 3879; }
                case 1059022:   { return 3880; }
                case 6159049:   { return 3881; }
                case 5211503:   { return 3882; }
                case 3316411:   { return 3883; }
                case 2368865:   { return 3884; }
                case 1421319:   { return 3885; }
                case 947546:    { return 3886; }
                case 3985267:   { return 3887; }
                case 2536079:   { return 3888; }
                case 1811485:   { return 3889; }
                case 1086891:   { return 3890; }
                case 724594:    { return 3891; }
                case 2145913:   { return 3892; }
                case 1532795:   { return 3893; }
                case 919677:    { return 3894; }
                case 613118:    { return 3895; }
                case 975415:    { return 3896; }
                case 585249:    { return 3897; }
                case 390166:    { return 3898; }
                case 418035:    { return 3899; }
                case 278690:    { return 3900; }
                case 167214:    { return 3901; }
                case 7139269:   { return 3902; }
                case 5459441:   { return 3903; }
                case 4619527:   { return 3904; }
                case 2939699:   { return 3905; }
                case 2099785:   { return 3906; }
                case 1259871:   { return 3907; }
                case 839914:    { return 3908; }
                case 4884763:   { return 3909; }
                case 4133261:   { return 3910; }
                case 2630257:   { return 3911; }
                case 1878755:   { return 3912; }
                case 1127253:   { return 3913; }
                case 751502:    { return 3914; }
                case 3160729:   { return 3915; }
                case 2011373:   { return 3916; }
                case 1436695:   { return 3917; }
                case 862017:    { return 3918; }
                case 574678:    { return 3919; }
                case 1701931:   { return 3920; }
                case 1215665:   { return 3921; }
                case 729399:    { return 3922; }
                case 486266:    { return 3923; }
                case 773605:    { return 3924; }
                case 464163:    { return 3925; }
                case 309442:    { return 3926; }
                case 331545:    { return 3927; }
                case 221030:    { return 3928; }
                case 132618:    { return 3929; }
                case 4035239:   { return 3930; }
                case 3414433:   { return 3931; }
                case 2172821:   { return 3932; }
                case 1552015:   { return 3933; }
                case 931209:    { return 3934; }
                case 620806:    { return 3935; }
                case 2611037:   { return 3936; }
                case 1661569:   { return 3937; }
                case 1186835:   { return 3938; }
                case 712101:    { return 3939; }
                case 474734:    { return 3940; }
                case 1405943:   { return 3941; }
                case 1004245:   { return 3942; }
                case 602547:    { return 3943; }
                case 401698:    { return 3944; }
                case 639065:    { return 3945; }
                case 383439:    { return 3946; }
                case 255626:    { return 3947; }
                case 273885:    { return 3948; }
                case 182590:    { return 3949; }
                case 109554:    { return 3950; }
                case 2336191:   { return 3951; }
                case 1486667:   { return 3952; }
                case 1061905:   { return 3953; }
                case 637143:    { return 3954; }
                case 424762:    { return 3955; }
                case 1257949:   { return 3956; }
                case 898535:    { return 3957; }
                case 539121:    { return 3958; }
                case 359414:    { return 3959; }
                case 571795:    { return 3960; }
                case 343077:    { return 3961; }
                case 228718:    { return 3962; }
                case 245055:    { return 3963; }
                case 163370:    { return 3964; }
                case 98022:             { return 3965; }
                case 961961:    { return 3966; }
                case 687115:    { return 3967; }
                case 412269:    { return 3968; }
                case 274846:    { return 3969; }
                case 437255:    { return 3970; }
                case 262353:    { return 3971; }
                case 174902:    { return 3972; }
                case 187395:    { return 3973; }
                case 124930:    { return 3974; }
                case 74958:             { return 3975; }
                case 369985:    { return 3976; }
                case 221991:    { return 3977; }
                case 147994:    { return 3978; }
                case 158565:    { return 3979; }
                case 105710:    { return 3980; }
                case 63426:             { return 3981; }
                case 100905:    { return 3982; }
                case 67270:             { return 3983; }
                case 40362:             { return 3984; }
                case 28830:             { return 3985; }
                case 39549707:  { return 3986; } // Pair of Jacks
                case 29343331:  { return 3987; }
                case 24240143:  { return 3988; }
                case 21688549:  { return 3989; }
                case 16585361:  { return 3990; }
                case 14033767:  { return 3991; }
                case 8930579:   { return 3992; }
                case 6378985:   { return 3993; }
                case 3827391:   { return 3994; }
                case 2551594:   { return 3995; }
                case 24584953:  { return 3996; }
                case 20309309:  { return 3997; }
                case 18171487:  { return 3998; }
                case 13895843:  { return 3999; }
                case 11758021:  { return 4000; }
                case 7482377:   { return 4001; }
                case 5344555:   { return 4002; }
                case 3206733:   { return 4003; }
                case 2137822:   { return 4004; }
                case 15068197:  { return 4005; }
                case 13482071:  { return 4006; }
                case 10309819:  { return 4007; }
                case 8723693:   { return 4008; }
                case 5551441:   { return 4009; }
                case 3965315:   { return 4010; }
                case 2379189:   { return 4011; }
                case 1586126:   { return 4012; }
                case 11137363:  { return 4013; }
                case 8516807:   { return 4014; }
                case 7206529:   { return 4015; }
                case 4585973:   { return 4016; }
                case 3275695:   { return 4017; }
                case 1965417:   { return 4018; }
                case 1310278:   { return 4019; }
                case 7620301:   { return 4020; }
                case 6447947:   { return 4021; }
                case 4103239:   { return 4022; }
                case 2930885:   { return 4023; }
                case 1758531:   { return 4024; }
                case 1172354:   { return 4025; }
                case 4930783:   { return 4026; }
                case 3137771:   { return 4027; }
                case 2241265:   { return 4028; }
                case 1344759:   { return 4029; }
                case 896506:    { return 4030; }
                case 2655037:   { return 4031; }
                case 1896455:   { return 4032; }
                case 1137873:   { return 4033; }
                case 758582:    { return 4034; }
                case 1206835:   { return 4035; }
                case 724101:    { return 4036; }
                case 482734:    { return 4037; }
                case 517215:    { return 4038; }
                case 344810:    { return 4039; }
                case 206886:    { return 4040; }
                case 22186421:  { return 4041; }
                case 18327913:  { return 4042; }
                case 16398659:  { return 4043; }
                case 12540151:  { return 4044; }
                case 10610897:  { return 4045; }
                case 6752389:   { return 4046; }
                case 4823135:   { return 4047; }
                case 2893881:   { return 4048; }
                case 1929254:   { return 4049; }
                case 13598129:  { return 4050; }
                case 12166747:  { return 4051; }
                case 9303983:   { return 4052; }
                case 7872601:   { return 4053; }
                case 5009837:   { return 4054; }
                case 3578455:   { return 4055; }
                case 2147073:   { return 4056; }
                case 1431382:   { return 4057; }
                case 10050791:  { return 4058; }
                case 7685899:   { return 4059; }
                case 6503453:   { return 4060; }
                case 4138561:   { return 4061; }
                case 2956115:   { return 4062; }
                case 1773669:   { return 4063; }
                case 1182446:   { return 4064; }
                case 6876857:   { return 4065; }
                case 5818879:   { return 4066; }
                case 3702923:   { return 4067; }
                case 2644945:   { return 4068; }
                case 1586967:   { return 4069; }
                case 1057978:   { return 4070; }
                case 4449731:   { return 4071; }
                case 2831647:   { return 4072; }
                case 2022605:   { return 4073; }
                case 1213563:   { return 4074; }
                case 809042:    { return 4075; }
                case 2396009:   { return 4076; }
                case 1711435:   { return 4077; }
                case 1026861:   { return 4078; }
                case 684574:    { return 4079; }
                case 1089095:   { return 4080; }
                case 653457:    { return 4081; }
                case 435638:    { return 4082; }
                case 466755:    { return 4083; }
                case 311170:    { return 4084; }
                case 186702:    { return 4085; }
                case 11393027:  { return 4086; }
                case 10193761:  { return 4087; }
                case 7795229:   { return 4088; }
                case 6595963:   { return 4089; }
                case 4197431:   { return 4090; }
                case 2998165:   { return 4091; }
                case 1798899:   { return 4092; }
                case 1199266:   { return 4093; }
                case 8420933:   { return 4094; }
                case 6439537:   { return 4095; }
                case 5448839:   { return 4096; }
                case 3467443:   { return 4097; }
                case 2476745:   { return 4098; }
                case 1486047:   { return 4099; }
                case 990698:    { return 4100; }
                case 5761691:   { return 4101; }
                case 4875277:   { return 4102; }
                case 3102449:   { return 4103; }
                case 2216035:   { return 4104; }
                case 1329621:   { return 4105; }
                case 886414:    { return 4106; }
                case 3728153:   { return 4107; }
                case 2372461:   { return 4108; }
                case 1694615:   { return 4109; }
                case 1016769:   { return 4110; }
                case 677846:    { return 4111; }
                case 2007467:   { return 4112; }
                case 1433905:   { return 4113; }
                case 860343:    { return 4114; }
                case 573562:    { return 4115; }
                case 912485:    { return 4116; }
                case 547491:    { return 4117; }
                case 364994:    { return 4118; }
                case 391065:    { return 4119; }
                case 260710:    { return 4120; }
                case 156426:    { return 4121; }
                case 6247789:   { return 4122; }
                case 4777721:   { return 4123; }
                case 4042687:   { return 4124; }
                case 2572619:   { return 4125; }
                case 1837585:   { return 4126; }
                case 1102551:   { return 4127; }
                case 735034:    { return 4128; }
                case 4274803:   { return 4129; }
                case 3617141:   { return 4130; }
                case 2301817:   { return 4131; }
                case 1644155:   { return 4132; }
                case 986493:    { return 4133; }
                case 657662:    { return 4134; }
                case 2766049:   { return 4135; }
                case 1760213:   { return 4136; }
                case 1257295:   { return 4137; }
                case 754377:    { return 4138; }
                case 502918:    { return 4139; }
                case 1489411:   { return 4140; }
                case 1063865:   { return 4141; }
                case 638319:    { return 4142; }
                case 425546:    { return 4143; }
                case 677005:    { return 4144; }
                case 406203:    { return 4145; }
                case 270802:    { return 4146; }
                case 290145:    { return 4147; }
                case 193430:    { return 4148; }
                case 116058:    { return 4149; }
                case 3531359:   { return 4150; }
                case 2988073:   { return 4151; }
                case 1901501:   { return 4152; }
                case 1358215:   { return 4153; }
                case 814929:    { return 4154; }
                case 543286:    { return 4155; }
                case 2284997:   { return 4156; }
                case 1454089:   { return 4157; }
                case 1038635:   { return 4158; }
                case 623181:    { return 4159; }
                case 415454:    { return 4160; }
                case 1230383:   { return 4161; }
                case 878845:    { return 4162; }
                case 527307:    { return 4163; }
                case 351538:    { return 4164; }
                case 559265:    { return 4165; }
                case 335559:    { return 4166; }
                case 223706:    { return 4167; }
                case 239685:    { return 4168; }
                case 159790:    { return 4169; }
                case 95874:             { return 4170; }
                case 2044471:   { return 4171; }
                case 1301027:   { return 4172; }
                case 929305:    { return 4173; }
                case 557583:    { return 4174; }
                case 371722:    { return 4175; }
                case 1100869:   { return 4176; }
                case 786335:    { return 4177; }
                case 471801:    { return 4178; }
                case 314534:    { return 4179; }
                case 500395:    { return 4180; }
                case 300237:    { return 4181; }
                case 200158:    { return 4182; }
                case 214455:    { return 4183; }
                case 142970:    { return 4184; }
                case 85782:             { return 4185; }
                case 841841:    { return 4186; }
                case 601315:    { return 4187; }
                case 360789:    { return 4188; }
                case 240526:    { return 4189; }
                case 382655:    { return 4190; }
                case 229593:    { return 4191; }
                case 153062:    { return 4192; }
                case 163995:    { return 4193; }
                case 109330:    { return 4194; }
                case 65598:             { return 4195; }
                case 323785:    { return 4196; }
                case 194271:    { return 4197; }
                case 129514:    { return 4198; }
                case 138765:    { return 4199; }
                case 92510:             { return 4200; }
                case 55506:             { return 4201; }
                case 88305:             { return 4202; }
                case 58870:             { return 4203; }
                case 35322:             { return 4204; }
                case 25230:             { return 4205; }
                case 24877283:  { return 4206; } // Pair of Tens
                case 23272297:  { return 4207; }
                case 15247367:  { return 4208; }
                case 13642381:  { return 4209; }
                case 10432409:  { return 4210; }
                case 8827423:   { return 4211; }
                case 5617451:   { return 4212; }
                case 4012465:   { return 4213; }
                case 2407479:   { return 4214; }
                case 1604986:   { return 4215; }
                case 19498411:  { return 4216; }
                case 12774821:  { return 4217; }
                case 11430103:  { return 4218; }
                case 8740667:   { return 4219; }
                case 7395949:   { return 4220; }
                case 4706513:   { return 4221; }
                case 3361795:   { return 4222; }
                case 2017077:   { return 4223; }
                case 1344718:   { return 4224; }
                case 11950639:  { return 4225; }
                case 10692677:  { return 4226; }
                case 8176753:   { return 4227; }
                case 6918791:   { return 4228; }
                case 4402867:   { return 4229; }
                case 3144905:   { return 4230; }
                case 1886943:   { return 4231; }
                case 1257962:   { return 4232; }
                case 7005547:   { return 4233; }
                case 5357183:   { return 4234; }
                case 4533001:   { return 4235; }
                case 2884637:   { return 4236; }
                case 2060455:   { return 4237; }
                case 1236273:   { return 4238; }
                case 824182:    { return 4239; }
                case 4793269:   { return 4240; }
                case 4055843:   { return 4241; }
                case 2580991:   { return 4242; }
                case 1843565:   { return 4243; }
                case 1106139:   { return 4244; }
                case 737426:    { return 4245; }
                case 3101527:   { return 4246; }
                case 1973699:   { return 4247; }
                case 1409785:   { return 4248; }
                case 845871:    { return 4249; }
                case 563914:    { return 4250; }
                case 1670053:   { return 4251; }
                case 1192895:   { return 4252; }
                case 715737:    { return 4253; }
                case 477158:    { return 4254; }
                case 759115:    { return 4255; }
                case 455469:    { return 4256; }
                case 303646:    { return 4257; }
                case 325335:    { return 4258; }
                case 216890:    { return 4259; }
                case 130134:    { return 4260; }
                case 17596127:  { return 4261; }
                case 11528497:  { return 4262; }
                case 10314971:  { return 4263; }
                case 7887919:   { return 4264; }
                case 6674393:   { return 4265; }
                case 4247341:   { return 4266; }
                case 3033815:   { return 4267; }
                case 1820289:   { return 4268; }
                case 1213526:   { return 4269; }
                case 10784723:  { return 4270; }
                case 9649489:   { return 4271; }
                case 7379021:   { return 4272; }
                case 6243787:   { return 4273; }
                case 3973319:   { return 4274; }
                case 2838085:   { return 4275; }
                case 1702851:   { return 4276; }
                case 1135234:   { return 4277; }
                case 6322079:   { return 4278; }
                case 4834531:   { return 4279; }
                case 4090757:   { return 4280; }
                case 2603209:   { return 4281; }
                case 1859435:   { return 4282; }
                case 1115661:   { return 4283; }
                case 743774:    { return 4284; }
                case 4325633:   { return 4285; }
                case 3660151:   { return 4286; }
                case 2329187:   { return 4287; }
                case 1663705:   { return 4288; }
                case 998223:    { return 4289; }
                case 665482:    { return 4290; }
                case 2798939:   { return 4291; }
                case 1781143:   { return 4292; }
                case 1272245:   { return 4293; }
                case 763347:    { return 4294; }
                case 508898:    { return 4295; }
                case 1507121:   { return 4296; }
                case 1076515:   { return 4297; }
                case 645909:    { return 4298; }
                case 430606:    { return 4299; }
                case 685055:    { return 4300; }
                case 411033:    { return 4301; }
                case 274022:    { return 4302; }
                case 293595:    { return 4303; }
                case 195730:    { return 4304; }
                case 117438:    { return 4305; }
                case 9035849:   { return 4306; }
                case 8084707:   { return 4307; }
                case 6182423:   { return 4308; }
                case 5231281:   { return 4309; }
                case 3328997:   { return 4310; }
                case 2377855:   { return 4311; }
                case 1426713:   { return 4312; }
                case 951142:    { return 4313; }
                case 5296877:   { return 4314; }
                case 4050553:   { return 4315; }
                case 3427391:   { return 4316; }
                case 2181067:   { return 4317; }
                case 1557905:   { return 4318; }
                case 934743:    { return 4319; }
                case 623162:    { return 4320; }
                case 3624179:   { return 4321; }
                case 3066613:   { return 4322; }
                case 1951481:   { return 4323; }
                case 1393915:   { return 4324; }
                case 836349:    { return 4325; }
                case 557566:    { return 4326; }
                case 2345057:   { return 4327; }
                case 1492309:   { return 4328; }
                case 1065935:   { return 4329; }
                case 639561:    { return 4330; }
                case 426374:    { return 4331; }
                case 1262723:   { return 4332; }
                case 901945:    { return 4333; }
                case 541167:    { return 4334; }
                case 360778:    { return 4335; }
                case 573965:    { return 4336; }
                case 344379:    { return 4337; }
                case 229586:    { return 4338; }
                case 245985:    { return 4339; }
                case 163990:    { return 4340; }
                case 98394:             { return 4341; }
                case 4955143:   { return 4342; }
                case 3789227:   { return 4343; }
                case 3206269:   { return 4344; }
                case 2040353:   { return 4345; }
                case 1457395:   { return 4346; }
                case 874437:    { return 4347; }
                case 582958:    { return 4348; }
                case 3390361:   { return 4349; }
                case 2868767:   { return 4350; }
                case 1825579:   { return 4351; }
                case 1303985:   { return 4352; }
                case 782391:    { return 4353; }
                case 521594:    { return 4354; }
                case 2193763:   { return 4355; }
                case 1396031:   { return 4356; }
                case 997165:    { return 4357; }
                case 598299:    { return 4358; }
                case 398866:    { return 4359; }
                case 1181257:   { return 4360; }
                case 843755:    { return 4361; }
                case 506253:    { return 4362; }
                case 337502:    { return 4363; }
                case 536935:    { return 4364; }
                case 322161:    { return 4365; }
                case 214774:    { return 4366; }
                case 230115:    { return 4367; }
                case 153410:    { return 4368; }
                case 92046:             { return 4369; }
                case 2221271:   { return 4370; }
                case 1879537:   { return 4371; }
                case 1196069:   { return 4372; }
                case 854335:    { return 4373; }
                case 512601:    { return 4374; }
                case 341734:    { return 4375; }
                case 1437293:   { return 4376; }
                case 914641:    { return 4377; }
                case 653315:    { return 4378; }
                case 391989:    { return 4379; }
                case 261326:    { return 4380; }
                case 773927:    { return 4381; }
                case 552805:    { return 4382; }
                case 331683:    { return 4383; }
                case 221122:    { return 4384; }
                case 351785:    { return 4385; }
                case 211071:    { return 4386; }
                case 140714:    { return 4387; }
                case 150765:    { return 4388; }
                case 100510:    { return 4389; }
                case 60306:             { return 4390; }
                case 1285999:   { return 4391; }
                case 818363:    { return 4392; }
                case 584545:    { return 4393; }
                case 350727:    { return 4394; }
                case 233818:    { return 4395; }
                case 692461:    { return 4396; }
                case 494615:    { return 4397; }
                case 296769:    { return 4398; }
                case 197846:    { return 4399; }
                case 314755:    { return 4400; }
                case 188853:    { return 4401; }
                case 125902:    { return 4402; }
                case 134895:    { return 4403; }
                case 89930:             { return 4404; }
                case 53958:             { return 4405; }
                case 529529:    { return 4406; }
                case 378235:    { return 4407; }
                case 226941:    { return 4408; }
                case 151294:    { return 4409; }
                case 240695:    { return 4410; }
                case 144417:    { return 4411; }
                case 96278:             { return 4412; }
                case 103155:    { return 4413; }
                case 68770:             { return 4414; }
                case 41262:             { return 4415; }
                case 203665:    { return 4416; }
                case 122199:    { return 4417; }
                case 81466:             { return 4418; }
                case 87285:             { return 4419; }
                case 58190:             { return 4420; }
                case 34914:             { return 4421; }
                case 55545:             { return 4422; }
                case 37030:             { return 4423; }
                case 22218:             { return 4424; }
                case 15870:             { return 4425; }
                case 16976747:  { return 4426; } // Pair of Nines
                case 15881473:  { return 4427; }
                case 12595651:  { return 4428; }
                case 9309829:   { return 4429; }
                case 7119281:   { return 4430; }
                case 6024007:   { return 4431; }
                case 3833459:   { return 4432; }
                case 2738185:   { return 4433; }
                case 1642911:   { return 4434; }
                case 1095274:   { return 4435; }
                case 13306099:  { return 4436; }
                case 10553113:  { return 4437; }
                case 7800127:   { return 4438; }
                case 5964803:   { return 4439; }
                case 5047141:   { return 4440; }
                case 3211817:   { return 4441; }
                case 2294155:   { return 4442; }
                case 1376493:   { return 4443; }
                case 917662:    { return 4444; }
                case 9872267:   { return 4445; }
                case 7296893:   { return 4446; }
                case 5579977:   { return 4447; }
                case 4721519:   { return 4448; }
                case 3004603:   { return 4449; }
                case 2146145:   { return 4450; }
                case 1287687:   { return 4451; }
                case 858458:    { return 4452; }
                case 5787191:   { return 4453; }
                case 4425499:   { return 4454; }
                case 3744653:   { return 4455; }
                case 2382961:   { return 4456; }
                case 1702115:   { return 4457; }
                case 1021269:   { return 4458; }
                case 680846:    { return 4459; }
                case 3271021:   { return 4460; }
                case 2767787:   { return 4461; }
                case 1761319:   { return 4462; }
                case 1258085:   { return 4463; }
                case 754851:    { return 4464; }
                case 503234:    { return 4465; }
                case 2116543:   { return 4466; }
                case 1346891:   { return 4467; }
                case 962065:    { return 4468; }
                case 577239:    { return 4469; }
                case 384826:    { return 4470; }
                case 1139677:   { return 4471; }
                case 814055:    { return 4472; }
                case 488433:    { return 4473; }
                case 325622:    { return 4474; }
                case 518035:    { return 4475; }
                case 310821:    { return 4476; }
                case 207214:    { return 4477; }
                case 222015:    { return 4478; }
                case 148010:    { return 4479; }
                case 88806:             { return 4480; }
                case 12007943:  { return 4481; }
                case 9523541:   { return 4482; }
                case 7039139:   { return 4483; }
                case 5382871:   { return 4484; }
                case 4554737:   { return 4485; }
                case 2898469:   { return 4486; }
                case 2070335:   { return 4487; }
                case 1242201:   { return 4488; }
                case 828134:    { return 4489; }
                case 8909119:   { return 4490; }
                case 6585001:   { return 4491; }
                case 5035589:   { return 4492; }
                case 4260883:   { return 4493; }
                case 2711471:   { return 4494; }
                case 1936765:   { return 4495; }
                case 1162059:   { return 4496; }
                case 774706:    { return 4497; }
                case 5222587:   { return 4498; }
                case 3993743:   { return 4499; }
                case 3379321:   { return 4500; }
                case 2150477:   { return 4501; }
                case 1536055:   { return 4502; }
                case 921633:    { return 4503; }
                case 614422:    { return 4504; }
                case 2951897:   { return 4505; }
                case 2497759:   { return 4506; }
                case 1589483:   { return 4507; }
                case 1135345:   { return 4508; }
                case 681207:    { return 4509; }
                case 454138:    { return 4510; }
                case 1910051:   { return 4511; }
                case 1215487:   { return 4512; }
                case 868205:    { return 4513; }
                case 520923:    { return 4514; }
                case 347282:    { return 4515; }
                case 1028489:   { return 4516; }
                case 734635:    { return 4517; }
                case 440781:    { return 4518; }
                case 293854:    { return 4519; }
                case 467495:    { return 4520; }
                case 280497:    { return 4521; }
                case 186998:    { return 4522; }
                case 200355:    { return 4523; }
                case 133570:    { return 4524; }
                case 80142:             { return 4525; }
                case 7464397:   { return 4526; }
                case 5517163:   { return 4527; }
                case 4219007:   { return 4528; }
                case 3569929:   { return 4529; }
                case 2271773:   { return 4530; }
                case 1622695:   { return 4531; }
                case 973617:    { return 4532; }
                case 649078:    { return 4533; }
                case 4375681:   { return 4534; }
                case 3346109:   { return 4535; }
                case 2831323:   { return 4536; }
                case 1801751:   { return 4537; }
                case 1286965:   { return 4538; }
                case 772179:    { return 4539; }
                case 514786:    { return 4540; }
                case 2473211:   { return 4541; }
                case 2092717:   { return 4542; }
                case 1331729:   { return 4543; }
                case 951235:    { return 4544; }
                case 570741:    { return 4545; }
                case 380494:    { return 4546; }
                case 1600313:   { return 4547; }
                case 1018381:   { return 4548; }
                case 727415:    { return 4549; }
                case 436449:    { return 4550; }
                case 290966:    { return 4551; }
                case 861707:    { return 4552; }
                case 615505:    { return 4553; }
                case 369303:    { return 4554; }
                case 246202:    { return 4555; }
                case 391685:    { return 4556; }
                case 235011:    { return 4557; }
                case 156674:    { return 4558; }
                case 167865:    { return 4559; }
                case 111910:    { return 4560; }
                case 67146:             { return 4561; }
                case 4093379:   { return 4562; }
                case 3130231:   { return 4563; }
                case 2648657:   { return 4564; }
                case 1685509:   { return 4565; }
                case 1203935:   { return 4566; }
                case 722361:    { return 4567; }
                case 481574:    { return 4568; }
                case 2313649:   { return 4569; }
                case 1957703:   { return 4570; }
                case 1245811:   { return 4571; }
                case 889865:    { return 4572; }
                case 533919:    { return 4573; }
                case 355946:    { return 4574; }
                case 1497067:   { return 4575; }
                case 952679:    { return 4576; }
                case 680485:    { return 4577; }
                case 408291:    { return 4578; }
                case 272194:    { return 4579; }
                case 806113:    { return 4580; }
                case 575795:    { return 4581; }
                case 345477:    { return 4582; }
                case 230318:    { return 4583; }
                case 366415:    { return 4584; }
                case 219849:    { return 4585; }
                case 146566:    { return 4586; }
                case 157035:    { return 4587; }
                case 104690:    { return 4588; }
                case 62814:             { return 4589; }
                case 1834963:   { return 4590; }
                case 1552661:   { return 4591; }
                case 988057:    { return 4592; }
                case 705755:    { return 4593; }
                case 423453:    { return 4594; }
                case 282302:    { return 4595; }
                case 1187329:   { return 4596; }
                case 755573:    { return 4597; }
                case 539695:    { return 4598; }
                case 323817:    { return 4599; }
                case 215878:    { return 4600; }
                case 639331:    { return 4601; }
                case 456665:    { return 4602; }
                case 273999:    { return 4603; }
                case 182666:    { return 4604; }
                case 290605:    { return 4605; }
                case 174363:    { return 4606; }
                case 116242:    { return 4607; }
                case 124545:    { return 4608; }
                case 83030:             { return 4609; }
                case 49818:             { return 4610; }
                case 877591:    { return 4611; }
                case 558467:    { return 4612; }
                case 398905:    { return 4613; }
                case 239343:    { return 4614; }
                case 159562:    { return 4615; }
                case 472549:    { return 4616; }
                case 337535:    { return 4617; }
                case 202521:    { return 4618; }
                case 135014:    { return 4619; }
                case 214795:    { return 4620; }
                case 128877:    { return 4621; }
                case 85918:             { return 4622; }
                case 92055:             { return 4623; }
                case 61370:             { return 4624; }
                case 36822:             { return 4625; }
                case 361361:    { return 4626; }
                case 258115:    { return 4627; }
                case 154869:    { return 4628; }
                case 103246:    { return 4629; }
                case 164255:    { return 4630; }
                case 98553:             { return 4631; }
                case 65702:             { return 4632; }
                case 70395:             { return 4633; }
                case 46930:             { return 4634; }
                case 28158:             { return 4635; }
                case 138985:    { return 4636; }
                case 83391:             { return 4637; }
                case 55594:             { return 4638; }
                case 59565:             { return 4639; }
                case 39710:             { return 4640; }
                case 23826:             { return 4641; }
                case 37905:             { return 4642; }
                case 25270:             { return 4643; }
                case 15162:             { return 4644; }
                case 10830:             { return 4645; }
                case 13590803:  { return 4646; } // Pair of Eights
                case 12713977:  { return 4647; }
                case 10083499:  { return 4648; }
                case 8329847:   { return 4649; }
                case 5699369:   { return 4650; }
                case 4822543:   { return 4651; }
                case 3068891:   { return 4652; }
                case 2192065:   { return 4653; }
                case 1315239:   { return 4654; }
                case 876826:    { return 4655; }
                case 10652251:  { return 4656; }
                case 8448337:   { return 4657; }
                case 6979061:   { return 4658; }
                case 4775147:   { return 4659; }
                case 4040509:   { return 4660; }
                case 2571233:   { return 4661; }
                case 1836595:   { return 4662; }
                case 1101957:   { return 4663; }
                case 734638:    { return 4664; }
                case 7903283:   { return 4665; }
                case 6528799:   { return 4666; }
                case 4467073:   { return 4667; }
                case 3779831:   { return 4668; }
                case 2405347:   { return 4669; }
                case 1718105:   { return 4670; }
                case 1030863:   { return 4671; }
                case 687242:    { return 4672; }
                case 5178013:   { return 4673; }
                case 3542851:   { return 4674; }
                case 2997797:   { return 4675; }
                case 1907689:   { return 4676; }
                case 1362635:   { return 4677; }
                case 817581:    { return 4678; }
                case 545054:    { return 4679; }
                case 2926703:   { return 4680; }
                case 2476441:   { return 4681; }
                case 1575917:   { return 4682; }
                case 1125655:   { return 4683; }
                case 675393:    { return 4684; }
                case 450262:    { return 4685; }
                case 1694407:   { return 4686; }
                case 1078259:   { return 4687; }
                case 770185:    { return 4688; }
                case 462111:    { return 4689; }
                case 308074:    { return 4690; }
                case 912373:    { return 4691; }
                case 651695:    { return 4692; }
                case 391017:    { return 4693; }
                case 260678:    { return 4694; }
                case 414715:    { return 4695; }
                case 248829:    { return 4696; }
                case 165886:    { return 4697; }
                case 177735:    { return 4698; }
                case 118490:    { return 4699; }
                case 71094:             { return 4700; }
                case 9613007:   { return 4701; }
                case 7624109:   { return 4702; }
                case 6298177:   { return 4703; }
                case 4309279:   { return 4704; }
                case 3646313:   { return 4705; }
                case 2320381:   { return 4706; }
                case 1657415:   { return 4707; }
                case 994449:    { return 4708; }
                case 662966:    { return 4709; }
                case 7132231:   { return 4710; }
                case 5891843:   { return 4711; }
                case 4031261:   { return 4712; }
                case 3411067:   { return 4713; }
                case 2170679:   { return 4714; }
                case 1550485:   { return 4715; }
                case 930291:    { return 4716; }
                case 620194:    { return 4717; }
                case 4672841:   { return 4718; }
                case 3197207:   { return 4719; }
                case 2705329:   { return 4720; }
                case 1721573:   { return 4721; }
                case 1229695:   { return 4722; }
                case 737817:    { return 4723; }
                case 491878:    { return 4724; }
                case 2641171:   { return 4725; }
                case 2234837:   { return 4726; }
                case 1422169:   { return 4727; }
                case 1015835:   { return 4728; }
                case 609501:    { return 4729; }
                case 406334:    { return 4730; }
                case 1529099:   { return 4731; }
                case 973063:    { return 4732; }
                case 695045:    { return 4733; }
                case 417027:    { return 4734; }
                case 278018:    { return 4735; }
                case 823361:    { return 4736; }
                case 588115:    { return 4737; }
                case 352869:    { return 4738; }
                case 235246:    { return 4739; }
                case 374255:    { return 4740; }
                case 224553:    { return 4741; }
                case 149702:    { return 4742; }
                case 160395:    { return 4743; }
                case 106930:    { return 4744; }
                case 64158:             { return 4745; }
                case 5975653:   { return 4746; }
                case 4936409:   { return 4747; }
                case 3377543:   { return 4748; }
                case 2857921:   { return 4749; }
                case 1818677:   { return 4750; }
                case 1299055:   { return 4751; }
                case 779433:    { return 4752; }
                case 519622:    { return 4753; }
                case 3915083:   { return 4754; }
                case 2678741:   { return 4755; }
                case 2266627:   { return 4756; }
                case 1442399:   { return 4757; }
                case 1030285:   { return 4758; }
                case 618171:    { return 4759; }
                case 412114:    { return 4760; }
                case 2212873:   { return 4761; }
                case 1872431:   { return 4762; }
                case 1191547:   { return 4763; }
                case 851105:    { return 4764; }
                case 510663:    { return 4765; }
                case 340442:    { return 4766; }
                case 1281137:   { return 4767; }
                case 815269:    { return 4768; }
                case 582335:    { return 4769; }
                case 349401:    { return 4770; }
                case 232934:    { return 4771; }
                case 689843:    { return 4772; }
                case 492745:    { return 4773; }
                case 295647:    { return 4774; }
                case 197098:    { return 4775; }
                case 313565:    { return 4776; }
                case 188139:    { return 4777; }
                case 125426:    { return 4778; }
                case 134385:    { return 4779; }
                case 89590:             { return 4780; }
                case 53754:             { return 4781; }
                case 3662497:   { return 4782; }
                case 2505919:   { return 4783; }
                case 2120393:   { return 4784; }
                case 1349341:   { return 4785; }
                case 963815:    { return 4786; }
                case 578289:    { return 4787; }
                case 385526:    { return 4788; }
                case 2070107:   { return 4789; }
                case 1751629:   { return 4790; }
                case 1114673:   { return 4791; }
                case 796195:    { return 4792; }
                case 477717:    { return 4793; }
                case 318478:    { return 4794; }
                case 1198483:   { return 4795; }
                case 762671:    { return 4796; }
                case 544765:    { return 4797; }
                case 326859:    { return 4798; }
                case 217906:    { return 4799; }
                case 645337:    { return 4800; }
                case 460955:    { return 4801; }
                case 276573:    { return 4802; }
                case 184382:    { return 4803; }
                case 293335:    { return 4804; }
                case 176001:    { return 4805; }
                case 117334:    { return 4806; }
                case 125715:    { return 4807; }
                case 83810:             { return 4808; }
                case 50286:             { return 4809; }
                case 1641809:   { return 4810; }
                case 1389223:   { return 4811; }
                case 884051:    { return 4812; }
                case 631465:    { return 4813; }
                case 378879:    { return 4814; }
                case 252586:    { return 4815; }
                case 950521:    { return 4816; }
                case 604877:    { return 4817; }
                case 432055:    { return 4818; }
                case 259233:    { return 4819; }
                case 172822:    { return 4820; }
                case 511819:    { return 4821; }
                case 365585:    { return 4822; }
                case 219351:    { return 4823; }
                case 146234:    { return 4824; }
                case 232645:    { return 4825; }
                case 139587:    { return 4826; }
                case 93058:             { return 4827; }
                case 99705:             { return 4828; }
                case 66470:             { return 4829; }
                case 39882:             { return 4830; }
                case 785213:    { return 4831; }
                case 499681:    { return 4832; }
                case 356915:    { return 4833; }
                case 214149:    { return 4834; }
                case 142766:    { return 4835; }
                case 422807:    { return 4836; }
                case 302005:    { return 4837; }
                case 181203:    { return 4838; }
                case 120802:    { return 4839; }
                case 192185:    { return 4840; }
                case 115311:    { return 4841; }
                case 76874:             { return 4842; }
                case 82365:             { return 4843; }
                case 54910:             { return 4844; }
                case 32946:             { return 4845; }
                case 289289:    { return 4846; }
                case 206635:    { return 4847; }
                case 123981:    { return 4848; }
                case 82654:             { return 4849; }
                case 131495:    { return 4850; }
                case 78897:             { return 4851; }
                case 52598:             { return 4852; }
                case 56355:             { return 4853; }
                case 37570:             { return 4854; }
                case 22542:             { return 4855; }
                case 111265:    { return 4856; }
                case 66759:             { return 4857; }
                case 44506:             { return 4858; }
                case 47685:             { return 4859; }
                case 31790:             { return 4860; }
                case 19074:             { return 4861; }
                case 30345:             { return 4862; }
                case 20230:             { return 4863; }
                case 12138:             { return 4864; }
                case 8670:              { return 4865; }
                case 7947563:   { return 4866; } // Pair of Sevens
                case 7434817:   { return 4867; }
                case 5896579:   { return 4868; }
                case 4871087:   { return 4869; }
                case 4358341:   { return 4870; }
                case 2820103:   { return 4871; }
                case 1794611:   { return 4872; }
                case 1281865:   { return 4873; }
                case 769119:    { return 4874; }
                case 512746:    { return 4875; }
                case 6229171:   { return 4876; }
                case 4940377:   { return 4877; }
                case 4081181:   { return 4878; }
                case 3651583:   { return 4879; }
                case 2362789:   { return 4880; }
                case 1503593:   { return 4881; }
                case 1073995:   { return 4882; }
                case 644397:    { return 4883; }
                case 429598:    { return 4884; }
                case 4621643:   { return 4885; }
                case 3817879:   { return 4886; }
                case 3415997:   { return 4887; }
                case 2210351:   { return 4888; }
                case 1406587:   { return 4889; }
                case 1004705:   { return 4890; }
                case 602823:    { return 4891; }
                case 401882:    { return 4892; }
                case 3027973:   { return 4893; }
                case 2709239:   { return 4894; }
                case 1753037:   { return 4895; }
                case 1115569:   { return 4896; }
                case 796835:    { return 4897; }
                case 478101:    { return 4898; }
                case 318734:    { return 4899; }
                case 2238067:   { return 4900; }
                case 1448161:   { return 4901; }
                case 921557:    { return 4902; }
                case 658255:    { return 4903; }
                case 394953:    { return 4904; }
                case 263302:    { return 4905; }
                case 1295723:   { return 4906; }
                case 824551:    { return 4907; }
                case 588965:    { return 4908; }
                case 353379:    { return 4909; }
                case 235586:    { return 4910; }
                case 533533:    { return 4911; }
                case 381095:    { return 4912; }
                case 228657:    { return 4913; }
                case 152438:    { return 4914; }
                case 242515:    { return 4915; }
                case 145509:    { return 4916; }
                case 97006:             { return 4917; }
                case 103935:    { return 4918; }
                case 69290:             { return 4919; }
                case 41574:             { return 4920; }
                case 5621447:   { return 4921; }
                case 4458389:   { return 4922; }
                case 3683017:   { return 4923; }
                case 3295331:   { return 4924; }
                case 2132273:   { return 4925; }
                case 1356901:   { return 4926; }
                case 969215:    { return 4927; }
                case 581529:    { return 4928; }
                case 387686:    { return 4929; }
                case 4170751:   { return 4930; }
                case 3445403:   { return 4931; }
                case 3082729:   { return 4932; }
                case 1994707:   { return 4933; }
                case 1269359:   { return 4934; }
                case 906685:    { return 4935; }
                case 544011:    { return 4936; }
                case 362674:    { return 4937; }
                case 2732561:   { return 4938; }
                case 2444923:   { return 4939; }
                case 1582009:   { return 4940; }
                case 1006733:   { return 4941; }
                case 719095:    { return 4942; }
                case 431457:    { return 4943; }
                case 287638:    { return 4944; }
                case 2019719:   { return 4945; }
                case 1306877:   { return 4946; }
                case 831649:    { return 4947; }
                case 594035:    { return 4948; }
                case 356421:    { return 4949; }
                case 237614:    { return 4950; }
                case 1169311:   { return 4951; }
                case 744107:    { return 4952; }
                case 531505:    { return 4953; }
                case 318903:    { return 4954; }
                case 212602:    { return 4955; }
                case 481481:    { return 4956; }
                case 343915:    { return 4957; }
                case 206349:    { return 4958; }
                case 137566:    { return 4959; }
                case 218855:    { return 4960; }
                case 131313:    { return 4961; }
                case 87542:             { return 4962; }
                case 93795:             { return 4963; }
                case 62530:             { return 4964; }
                case 37518:             { return 4965; }
                case 3494413:   { return 4966; }
                case 2886689:   { return 4967; }
                case 2582827:   { return 4968; }
                case 1671241:   { return 4969; }
                case 1063517:   { return 4970; }
                case 759655:    { return 4971; }
                case 455793:    { return 4972; }
                case 303862:    { return 4973; }
                case 2289443:   { return 4974; }
                case 2048449:   { return 4975; }
                case 1325467:   { return 4976; }
                case 843479:    { return 4977; }
                case 602485:    { return 4978; }
                case 361491:    { return 4979; }
                case 240994:    { return 4980; }
                case 1692197:   { return 4981; }
                case 1094951:   { return 4982; }
                case 696787:    { return 4983; }
                case 497705:    { return 4984; }
                case 298623:    { return 4985; }
                case 199082:    { return 4986; }
                case 979693:    { return 4987; }
                case 623441:    { return 4988; }
                case 445315:    { return 4989; }
                case 267189:    { return 4990; }
                case 178126:    { return 4991; }
                case 403403:    { return 4992; }
                case 288145:    { return 4993; }
                case 172887:    { return 4994; }
                case 115258:    { return 4995; }
                case 183365:    { return 4996; }
                case 110019:    { return 4997; }
                case 73346:             { return 4998; }
                case 78585:             { return 4999; }
                case 52390:             { return 5000; }
                case 31434:             { return 5001; }
                case 2141737:   { return 5002; }
                case 1916291:   { return 5003; }
                case 1239953:   { return 5004; }
                case 789061:    { return 5005; }
                case 563615:    { return 5006; }
                case 338169:    { return 5007; }
                case 225446:    { return 5008; }
                case 1583023:   { return 5009; }
                case 1024309:   { return 5010; }
                case 651833:    { return 5011; }
                case 465595:    { return 5012; }
                case 279357:    { return 5013; }
                case 186238:    { return 5014; }
                case 916487:    { return 5015; }
                case 583219:    { return 5016; }
                case 416585:    { return 5017; }
                case 249951:    { return 5018; }
                case 166634:    { return 5019; }
                case 377377:    { return 5020; }
                case 269555:    { return 5021; }
                case 161733:    { return 5022; }
                case 107822:    { return 5023; }
                case 171535:    { return 5024; }
                case 102921:    { return 5025; }
                case 68614:             { return 5026; }
                case 73515:             { return 5027; }
                case 49010:             { return 5028; }
                case 29406:             { return 5029; }
                case 1255501:   { return 5030; }
                case 812383:    { return 5031; }
                case 516971:    { return 5032; }
                case 369265:    { return 5033; }
                case 221559:    { return 5034; }
                case 147706:    { return 5035; }
                case 726869:    { return 5036; }
                case 462553:    { return 5037; }
                case 330395:    { return 5038; }
                case 198237:    { return 5039; }
                case 132158:    { return 5040; }
                case 299299:    { return 5041; }
                case 213785:    { return 5042; }
                case 128271:    { return 5043; }
                case 85514:             { return 5044; }
                case 136045:    { return 5045; }
                case 81627:             { return 5046; }
                case 54418:             { return 5047; }
                case 58305:             { return 5048; }
                case 38870:             { return 5049; }
                case 23322:             { return 5050; }
                case 600457:    { return 5051; }
                case 382109:    { return 5052; }
                case 272935:    { return 5053; }
                case 163761:    { return 5054; }
                case 109174:    { return 5055; }
                case 247247:    { return 5056; }
                case 176605:    { return 5057; }
                case 105963:    { return 5058; }
                case 70642:             { return 5059; }
                case 112385:    { return 5060; }
                case 67431:             { return 5061; }
                case 44954:             { return 5062; }
                case 48165:             { return 5063; }
                case 32110:             { return 5064; }
                case 19266:             { return 5065; }
                case 221221:    { return 5066; }
                case 158015:    { return 5067; }
                case 94809:             { return 5068; }
                case 63206:             { return 5069; }
                case 100555:    { return 5070; }
                case 60333:             { return 5071; }
                case 40222:             { return 5072; }
                case 43095:             { return 5073; }
                case 28730:             { return 5074; }
                case 17238:             { return 5075; }
                case 65065:             { return 5076; }
                case 39039:             { return 5077; }
                case 26026:             { return 5078; }
                case 27885:             { return 5079; }
                case 18590:             { return 5080; }
                case 11154:             { return 5081; }
                case 17745:             { return 5082; }
                case 11830:             { return 5083; }
                case 7098:              { return 5084; }
                case 5070:              { return 5085; }
                case 5690267:   { return 5086; } // Pair of Sixes
                case 5323153:   { return 5087; }
                case 4221811:   { return 5088; }
                case 3487583:   { return 5089; }
                case 3120469:   { return 5090; }
                case 2386241:   { return 5091; }
                case 1284899:   { return 5092; }
                case 917785:    { return 5093; }
                case 550671:    { return 5094; }
                case 367114:    { return 5095; }
                case 4459939:   { return 5096; }
                case 3537193:   { return 5097; }
                case 2922029:   { return 5098; }
                case 2614447:   { return 5099; }
                case 1999283:   { return 5100; }
                case 1076537:   { return 5101; }
                case 768955:    { return 5102; }
                case 461373:    { return 5103; }
                case 307582:    { return 5104; }
                case 3308987:   { return 5105; }
                case 2733511:   { return 5106; }
                case 2445773:   { return 5107; }
                case 1870297:   { return 5108; }
                case 1007083:   { return 5109; }
                case 719345:    { return 5110; }
                case 431607:    { return 5111; }
                case 287738:    { return 5112; }
                case 2167957:   { return 5113; }
                case 1939751:   { return 5114; }
                case 1483339:   { return 5115; }
                case 798721:    { return 5116; }
                case 570515:    { return 5117; }
                case 342309:    { return 5118; }
                case 228206:    { return 5119; }
                case 1602403:   { return 5120; }
                case 1225367:   { return 5121; }
                case 659813:    { return 5122; }
                case 471295:    { return 5123; }
                case 282777:    { return 5124; }
                case 188518:    { return 5125; }
                case 1096381:   { return 5126; }
                case 590359:    { return 5127; }
                case 421685:    { return 5128; }
                case 253011:    { return 5129; }
                case 168674:    { return 5130; }
                case 451451:    { return 5131; }
                case 322465:    { return 5132; }
                case 193479:    { return 5133; }
                case 128986:    { return 5134; }
                case 173635:    { return 5135; }
                case 104181:    { return 5136; }
                case 69454:             { return 5137; }
                case 74415:             { return 5138; }
                case 49610:             { return 5139; }
                case 29766:             { return 5140; }
                case 4024823:   { return 5141; }
                case 3192101:   { return 5142; }
                case 2636953:   { return 5143; }
                case 2359379:   { return 5144; }
                case 1804231:   { return 5145; }
                case 971509:    { return 5146; }
                case 693935:    { return 5147; }
                case 416361:    { return 5148; }
                case 277574:    { return 5149; }
                case 2986159:   { return 5150; }
                case 2466827:   { return 5151; }
                case 2207161:   { return 5152; }
                case 1687829:   { return 5153; }
                case 908831:    { return 5154; }
                case 649165:    { return 5155; }
                case 389499:    { return 5156; }
                case 259666:    { return 5157; }
                case 1956449:   { return 5158; }
                case 1750507:   { return 5159; }
                case 1338623:   { return 5160; }
                case 720797:    { return 5161; }
                case 514855:    { return 5162; }
                case 308913:    { return 5163; }
                case 205942:    { return 5164; }
                case 1446071:   { return 5165; }
                case 1105819:   { return 5166; }
                case 595441:    { return 5167; }
                case 425315:    { return 5168; }
                case 255189:    { return 5169; }
                case 170126:    { return 5170; }
                case 989417:    { return 5171; }
                case 532763:    { return 5172; }
                case 380545:    { return 5173; }
                case 228327:    { return 5174; }
                case 152218:    { return 5175; }
                case 407407:    { return 5176; }
                case 291005:    { return 5177; }
                case 174603:    { return 5178; }
                case 116402:    { return 5179; }
                case 156695:    { return 5180; }
                case 94017:             { return 5181; }
                case 62678:             { return 5182; }
                case 67155:             { return 5183; }
                case 44770:             { return 5184; }
                case 26862:             { return 5185; }
                case 2501917:   { return 5186; }
                case 2066801:   { return 5187; }
                case 1849243:   { return 5188; }
                case 1414127:   { return 5189; }
                case 761453:    { return 5190; }
                case 543895:    { return 5191; }
                case 326337:    { return 5192; }
                case 217558:    { return 5193; }
                case 1639187:   { return 5194; }
                case 1466641:   { return 5195; }
                case 1121549:   { return 5196; }
                case 603911:    { return 5197; }
                case 431365:    { return 5198; }
                case 258819:    { return 5199; }
                case 172546:    { return 5200; }
                case 1211573:   { return 5201; }
                case 926497:    { return 5202; }
                case 498883:    { return 5203; }
                case 356345:    { return 5204; }
                case 213807:    { return 5205; }
                case 142538:    { return 5206; }
                case 828971:    { return 5207; }
                case 446369:    { return 5208; }
                case 318835:    { return 5209; }
                case 191301:    { return 5210; }
                case 127534:    { return 5211; }
                case 341341:    { return 5212; }
                case 243815:    { return 5213; }
                case 146289:    { return 5214; }
                case 97526:             { return 5215; }
                case 131285:    { return 5216; }
                case 78771:             { return 5217; }
                case 52514:             { return 5218; }
                case 56265:             { return 5219; }
                case 37510:             { return 5220; }
                case 22506:             { return 5221; }
                case 1533433:   { return 5222; }
                case 1372019:   { return 5223; }
                case 1049191:   { return 5224; }
                case 564949:    { return 5225; }
                case 403535:    { return 5226; }
                case 242121:    { return 5227; }
                case 161414:    { return 5228; }
                case 1133407:   { return 5229; }
                case 866723:    { return 5230; }
                case 466697:    { return 5231; }
                case 333355:    { return 5232; }
                case 200013:    { return 5233; }
                case 133342:    { return 5234; }
                case 775489:    { return 5235; }
                case 417571:    { return 5236; }
                case 298265:    { return 5237; }
                case 178959:    { return 5238; }
                case 119306:    { return 5239; }
                case 319319:    { return 5240; }
                case 228085:    { return 5241; }
                case 136851:    { return 5242; }
                case 91234:             { return 5243; }
                case 122815:    { return 5244; }
                case 73689:             { return 5245; }
                case 49126:             { return 5246; }
                case 52635:             { return 5247; }
                case 35090:             { return 5248; }
                case 21054:             { return 5249; }
                case 898909:    { return 5250; }
                case 687401:    { return 5251; }
                case 370139:    { return 5252; }
                case 264385:    { return 5253; }
                case 158631:    { return 5254; }
                case 105754:    { return 5255; }
                case 615043:    { return 5256; }
                case 331177:    { return 5257; }
                case 236555:    { return 5258; }
                case 141933:    { return 5259; }
                case 94622:             { return 5260; }
                case 253253:    { return 5261; }
                case 180895:    { return 5262; }
                case 108537:    { return 5263; }
                case 72358:             { return 5264; }
                case 97405:             { return 5265; }
                case 58443:             { return 5266; }
                case 38962:             { return 5267; }
                case 41745:             { return 5268; }
                case 27830:             { return 5269; }
                case 16698:             { return 5270; }
                case 508079:    { return 5271; }
                case 273581:    { return 5272; }
                case 195415:    { return 5273; }
                case 117249:    { return 5274; }
                case 78166:             { return 5275; }
                case 209209:    { return 5276; }
                case 149435:    { return 5277; }
                case 89661:             { return 5278; }
                case 59774:             { return 5279; }
                case 80465:             { return 5280; }
                case 48279:             { return 5281; }
                case 32186:             { return 5282; }
                case 34485:             { return 5283; }
                case 22990:             { return 5284; }
                case 13794:             { return 5285; }
                case 187187:    { return 5286; }
                case 133705:    { return 5287; }
                case 80223:             { return 5288; }
                case 53482:             { return 5289; }
                case 71995:             { return 5290; }
                case 43197:             { return 5291; }
                case 28798:             { return 5292; }
                case 30855:             { return 5293; }
                case 20570:             { return 5294; }
                case 12342:             { return 5295; }
                case 55055:             { return 5296; }
                case 33033:             { return 5297; }
                case 22022:             { return 5298; }
                case 23595:             { return 5299; }
                case 15730:             { return 5300; }
                case 9438:              { return 5301; }
                case 12705:             { return 5302; }
                case 8470:              { return 5303; }
                case 5082:              { return 5304; }
                case 3630:              { return 5305; }
                case 2304323:   { return 5306; } // Pair of Fives
                case 2155657:   { return 5307; }
                case 1709659:   { return 5308; }
                case 1412327:   { return 5309; }
                case 1263661:   { return 5310; }
                case 966329:    { return 5311; }
                case 817663:    { return 5312; }
                case 371665:    { return 5313; }
                case 222999:    { return 5314; }
                case 148666:    { return 5315; }
                case 1806091:   { return 5316; }
                case 1432417:   { return 5317; }
                case 1183301:   { return 5318; }
                case 1058743:   { return 5319; }
                case 809627:    { return 5320; }
                case 685069:    { return 5321; }
                case 311395:    { return 5322; }
                case 186837:    { return 5323; }
                case 124558:    { return 5324; }
                case 1340003:   { return 5325; }
                case 1106959:   { return 5326; }
                case 990437:    { return 5327; }
                case 757393:    { return 5328; }
                case 640871:    { return 5329; }
                case 291305:    { return 5330; }
                case 174783:    { return 5331; }
                case 116522:    { return 5332; }
                case 877933:    { return 5333; }
                case 785519:    { return 5334; }
                case 600691:    { return 5335; }
                case 508277:    { return 5336; }
                case 231035:    { return 5337; }
                case 138621:    { return 5338; }
                case 92414:             { return 5339; }
                case 648907:    { return 5340; }
                case 496223:    { return 5341; }
                case 419881:    { return 5342; }
                case 190855:    { return 5343; }
                case 114513:    { return 5344; }
                case 76342:             { return 5345; }
                case 443989:    { return 5346; }
                case 375683:    { return 5347; }
                case 170765:    { return 5348; }
                case 102459:    { return 5349; }
                case 68306:             { return 5350; }
                case 287287:    { return 5351; }
                case 130585:    { return 5352; }
                case 78351:             { return 5353; }
                case 52234:             { return 5354; }
                case 110495:    { return 5355; }
                case 66297:             { return 5356; }
                case 44198:             { return 5357; }
                case 30135:             { return 5358; }
                case 20090:             { return 5359; }
                case 12054:             { return 5360; }
                case 1629887:   { return 5361; }
                case 1292669:   { return 5362; }
                case 1067857:   { return 5363; }
                case 955451:    { return 5364; }
                case 730639:    { return 5365; }
                case 618233:    { return 5366; }
                case 281015:    { return 5367; }
                case 168609:    { return 5368; }
                case 112406:    { return 5369; }
                case 1209271:   { return 5370; }
                case 998963:    { return 5371; }
                case 893809:    { return 5372; }
                case 683501:    { return 5373; }
                case 578347:    { return 5374; }
                case 262885:    { return 5375; }
                case 157731:    { return 5376; }
                case 105154:    { return 5377; }
                case 792281:    { return 5378; }
                case 708883:    { return 5379; }
                case 542087:    { return 5380; }
                case 458689:    { return 5381; }
                case 208495:    { return 5382; }
                case 125097:    { return 5383; }
                case 83398:             { return 5384; }
                case 585599:    { return 5385; }
                case 447811:    { return 5386; }
                case 378917:    { return 5387; }
                case 172235:    { return 5388; }
                case 103341:    { return 5389; }
                case 68894:             { return 5390; }
                case 400673:    { return 5391; }
                case 339031:    { return 5392; }
                case 154105:    { return 5393; }
                case 92463:             { return 5394; }
                case 61642:             { return 5395; }
                case 259259:    { return 5396; }
                case 117845:    { return 5397; }
                case 70707:             { return 5398; }
                case 47138:             { return 5399; }
                case 99715:             { return 5400; }
                case 59829:             { return 5401; }
                case 39886:             { return 5402; }
                case 27195:             { return 5403; }
                case 18130:             { return 5404; }
                case 10878:             { return 5405; }
                case 1013173:   { return 5406; }
                case 836969:    { return 5407; }
                case 748867:    { return 5408; }
                case 572663:    { return 5409; }
                case 484561:    { return 5410; }
                case 220255:    { return 5411; }
                case 132153:    { return 5412; }
                case 88102:             { return 5413; }
                case 663803:    { return 5414; }
                case 593929:    { return 5415; }
                case 454181:    { return 5416; }
                case 384307:    { return 5417; }
                case 174685:    { return 5418; }
                case 104811:    { return 5419; }
                case 69874:             { return 5420; }
                case 490637:    { return 5421; }
                case 375193:    { return 5422; }
                case 317471:    { return 5423; }
                case 144305:    { return 5424; }
                case 86583:             { return 5425; }
                case 57722:             { return 5426; }
                case 335699:    { return 5427; }
                case 284053:    { return 5428; }
                case 129115:    { return 5429; }
                case 77469:             { return 5430; }
                case 51646:             { return 5431; }
                case 217217:    { return 5432; }
                case 98735:             { return 5433; }
                case 59241:             { return 5434; }
                case 39494:             { return 5435; }
                case 83545:             { return 5436; }
                case 50127:             { return 5437; }
                case 33418:             { return 5438; }
                case 22785:             { return 5439; }
                case 15190:             { return 5440; }
                case 9114:              { return 5441; }
                case 620977:    { return 5442; }
                case 555611:    { return 5443; }
                case 424879:    { return 5444; }
                case 359513:    { return 5445; }
                case 163415:    { return 5446; }
                case 98049:             { return 5447; }
                case 65366:             { return 5448; }
                case 458983:    { return 5449; }
                case 350987:    { return 5450; }
                case 296989:    { return 5451; }
                case 134995:    { return 5452; }
                case 80997:             { return 5453; }
                case 53998:             { return 5454; }
                case 314041:    { return 5455; }
                case 265727:    { return 5456; }
                case 120785:    { return 5457; }
                case 72471:             { return 5458; }
                case 48314:             { return 5459; }
                case 203203:    { return 5460; }
                case 92365:             { return 5461; }
                case 55419:             { return 5462; }
                case 36946:             { return 5463; }
                case 78155:             { return 5464; }
                case 46893:             { return 5465; }
                case 31262:             { return 5466; }
                case 21315:             { return 5467; }
                case 14210:             { return 5468; }
                case 8526:              { return 5469; }
                case 364021:    { return 5470; }
                case 278369:    { return 5471; }
                case 235543:    { return 5472; }
                case 107065:    { return 5473; }
                case 64239:             { return 5474; }
                case 42826:             { return 5475; }
                case 249067:    { return 5476; }
                case 210749:    { return 5477; }
                case 95795:             { return 5478; }
                case 57477:             { return 5479; }
                case 38318:             { return 5480; }
                case 161161:    { return 5481; }
                case 73255:             { return 5482; }
                case 43953:             { return 5483; }
                case 29302:             { return 5484; }
                case 61985:             { return 5485; }
                case 37191:             { return 5486; }
                case 24794:             { return 5487; }
                case 16905:             { return 5488; }
                case 11270:             { return 5489; }
                case 6762:              { return 5490; }
                case 205751:    { return 5491; }
                case 174097:    { return 5492; }
                case 79135:             { return 5493; }
                case 47481:             { return 5494; }
                case 31654:             { return 5495; }
                case 133133:    { return 5496; }
                case 60515:             { return 5497; }
                case 36309:             { return 5498; }
                case 24206:             { return 5499; }
                case 51205:             { return 5500; }
                case 30723:             { return 5501; }
                case 20482:             { return 5502; }
                case 13965:             { return 5503; }
                case 9310:              { return 5504; }
                case 5586:              { return 5505; }
                case 119119:    { return 5506; }
                case 54145:             { return 5507; }
                case 32487:             { return 5508; }
                case 21658:             { return 5509; }
                case 45815:             { return 5510; }
                case 27489:             { return 5511; }
                case 18326:             { return 5512; }
                case 12495:             { return 5513; }
                case 8330:              { return 5514; }
                case 4998:              { return 5515; }
                case 35035:             { return 5516; }
                case 21021:             { return 5517; }
                case 14014:             { return 5518; }
                case 9555:              { return 5519; }
                case 6370:              { return 5520; }
                case 3822:              { return 5521; }
                case 8085:              { return 5522; }
                case 5390:              { return 5523; }
                case 3234:              { return 5524; }
                case 1470:              { return 5525; }
                case 1175675:   { return 5526; } // Pair of Fours
                case 1099825:   { return 5527; }
                case 872275:    { return 5528; }
                case 720575:    { return 5529; }
                case 644725:    { return 5530; }
                case 493025:    { return 5531; }
                case 417175:    { return 5532; }
                case 265475:    { return 5533; }
                case 113775:    { return 5534; }
                case 75850:             { return 5535; }
                case 921475:    { return 5536; }
                case 730825:    { return 5537; }
                case 603725:    { return 5538; }
                case 540175:    { return 5539; }
                case 413075:    { return 5540; }
                case 349525:    { return 5541; }
                case 222425:    { return 5542; }
                case 95325:             { return 5543; }
                case 63550:             { return 5544; }
                case 683675:    { return 5545; }
                case 564775:    { return 5546; }
                case 505325:    { return 5547; }
                case 386425:    { return 5548; }
                case 326975:    { return 5549; }
                case 208075:    { return 5550; }
                case 89175:             { return 5551; }
                case 59450:             { return 5552; }
                case 447925:    { return 5553; }
                case 400775:    { return 5554; }
                case 306475:    { return 5555; }
                case 259325:    { return 5556; }
                case 165025:    { return 5557; }
                case 70725:             { return 5558; }
                case 47150:             { return 5559; }
                case 331075:    { return 5560; }
                case 253175:    { return 5561; }
                case 214225:    { return 5562; }
                case 136325:    { return 5563; }
                case 58425:             { return 5564; }
                case 38950:             { return 5565; }
                case 226525:    { return 5566; }
                case 191675:    { return 5567; }
                case 121975:    { return 5568; }
                case 52275:             { return 5569; }
                case 34850:             { return 5570; }
                case 146575:    { return 5571; }
                case 93275:             { return 5572; }
                case 39975:             { return 5573; }
                case 26650:             { return 5574; }
                case 78925:             { return 5575; }
                case 33825:             { return 5576; }
                case 22550:             { return 5577; }
                case 21525:             { return 5578; }
                case 14350:             { return 5579; }
                case 6150:              { return 5580; }
                case 831575:    { return 5581; }
                case 659525:    { return 5582; }
                case 544825:    { return 5583; }
                case 487475:    { return 5584; }
                case 372775:    { return 5585; }
                case 315425:    { return 5586; }
                case 200725:    { return 5587; }
                case 86025:             { return 5588; }
                case 57350:             { return 5589; }
                case 616975:    { return 5590; }
                case 509675:    { return 5591; }
                case 456025:    { return 5592; }
                case 348725:    { return 5593; }
                case 295075:    { return 5594; }
                case 187775:    { return 5595; }
                case 80475:             { return 5596; }
                case 53650:             { return 5597; }
                case 404225:    { return 5598; }
                case 361675:    { return 5599; }
                case 276575:    { return 5600; }
                case 234025:    { return 5601; }
                case 148925:    { return 5602; }
                case 63825:             { return 5603; }
                case 42550:             { return 5604; }
                case 298775:    { return 5605; }
                case 228475:    { return 5606; }
                case 193325:    { return 5607; }
                case 123025:    { return 5608; }
                case 52725:             { return 5609; }
                case 35150:             { return 5610; }
                case 204425:    { return 5611; }
                case 172975:    { return 5612; }
                case 110075:    { return 5613; }
                case 47175:             { return 5614; }
                case 31450:             { return 5615; }
                case 132275:    { return 5616; }
                case 84175:             { return 5617; }
                case 36075:             { return 5618; }
                case 24050:             { return 5619; }
                case 71225:             { return 5620; }
                case 30525:             { return 5621; }
                case 20350:             { return 5622; }
                case 19425:             { return 5623; }
                case 12950:             { return 5624; }
                case 5550:              { return 5625; }
                case 516925:    { return 5626; }
                case 427025:    { return 5627; }
                case 382075:    { return 5628; }
                case 292175:    { return 5629; }
                case 247225:    { return 5630; }
                case 157325:    { return 5631; }
                case 67425:             { return 5632; }
                case 44950:             { return 5633; }
                case 338675:    { return 5634; }
                case 303025:    { return 5635; }
                case 231725:    { return 5636; }
                case 196075:    { return 5637; }
                case 124775:    { return 5638; }
                case 53475:             { return 5639; }
                case 35650:             { return 5640; }
                case 250325:    { return 5641; }
                case 191425:    { return 5642; }
                case 161975:    { return 5643; }
                case 103075:    { return 5644; }
                case 44175:             { return 5645; }
                case 29450:             { return 5646; }
                case 171275:    { return 5647; }
                case 144925:    { return 5648; }
                case 92225:             { return 5649; }
                case 39525:             { return 5650; }
                case 26350:             { return 5651; }
                case 110825:    { return 5652; }
                case 70525:             { return 5653; }
                case 30225:             { return 5654; }
                case 20150:             { return 5655; }
                case 59675:             { return 5656; }
                case 25575:             { return 5657; }
                case 17050:             { return 5658; }
                case 16275:             { return 5659; }
                case 10850:             { return 5660; }
                case 4650:              { return 5661; }
                case 316825:    { return 5662; }
                case 283475:    { return 5663; }
                case 216775:    { return 5664; }
                case 183425:    { return 5665; }
                case 116725:    { return 5666; }
                case 50025:             { return 5667; }
                case 33350:             { return 5668; }
                case 234175:    { return 5669; }
                case 179075:    { return 5670; }
                case 151525:    { return 5671; }
                case 96425:             { return 5672; }
                case 41325:             { return 5673; }
                case 27550:             { return 5674; }
                case 160225:    { return 5675; }
                case 135575:    { return 5676; }
                case 86275:             { return 5677; }
                case 36975:             { return 5678; }
                case 24650:             { return 5679; }
                case 103675:    { return 5680; }
                case 65975:             { return 5681; }
                case 28275:             { return 5682; }
                case 18850:             { return 5683; }
                case 55825:             { return 5684; }
                case 23925:             { return 5685; }
                case 15950:             { return 5686; }
                case 15225:             { return 5687; }
                case 10150:             { return 5688; }
                case 4350:              { return 5689; }
                case 185725:    { return 5690; }
                case 142025:    { return 5691; }
                case 120175:    { return 5692; }
                case 76475:             { return 5693; }
                case 32775:             { return 5694; }
                case 21850:             { return 5695; }
                case 127075:    { return 5696; }
                case 107525:    { return 5697; }
                case 68425:             { return 5698; }
                case 29325:             { return 5699; }
                case 19550:             { return 5700; }
                case 82225:             { return 5701; }
                case 52325:             { return 5702; }
                case 22425:             { return 5703; }
                case 14950:             { return 5704; }
                case 44275:             { return 5705; }
                case 18975:             { return 5706; }
                case 12650:             { return 5707; }
                case 12075:             { return 5708; }
                case 8050:              { return 5709; }
                case 3450:              { return 5710; }
                case 104975:    { return 5711; }
                case 88825:             { return 5712; }
                case 56525:             { return 5713; }
                case 24225:             { return 5714; }
                case 16150:             { return 5715; }
                case 67925:             { return 5716; }
                case 43225:             { return 5717; }
                case 18525:             { return 5718; }
                case 12350:             { return 5719; }
                case 36575:             { return 5720; }
                case 15675:             { return 5721; }
                case 10450:             { return 5722; }
                case 9975:              { return 5723; }
                case 6650:              { return 5724; }
                case 2850:              { return 5725; }
                case 60775:             { return 5726; }
                case 38675:             { return 5727; }
                case 16575:             { return 5728; }
                case 11050:             { return 5729; }
                case 32725:             { return 5730; }
                case 14025:             { return 5731; }
                case 9350:              { return 5732; }
                case 8925:              { return 5733; }
                case 5950:              { return 5734; }
                case 2550:              { return 5735; }
                case 25025:             { return 5736; }
                case 10725:             { return 5737; }
                case 7150:              { return 5738; }
                case 6825:              { return 5739; }
                case 4550:              { return 5740; }
                case 1950:              { return 5741; }
                case 5775:              { return 5742; }
                case 3850:              { return 5743; }
                case 1650:              { return 5744; }
                case 1050:              { return 5745; }
                case 423243:    { return 5746; } // Pair of Treys
                case 395937:    { return 5747; }
                case 314019:    { return 5748; }
                case 259407:    { return 5749; }
                case 232101:    { return 5750; }
                case 177489:    { return 5751; }
                case 150183:    { return 5752; }
                case 95571:             { return 5753; }
                case 68265:             { return 5754; }
                case 27306:             { return 5755; }
                case 331731:    { return 5756; }
                case 263097:    { return 5757; }
                case 217341:    { return 5758; }
                case 194463:    { return 5759; }
                case 148707:    { return 5760; }
                case 125829:    { return 5761; }
                case 80073:             { return 5762; }
                case 57195:             { return 5763; }
                case 22878:             { return 5764; }
                case 246123:    { return 5765; }
                case 203319:    { return 5766; }
                case 181917:    { return 5767; }
                case 139113:    { return 5768; }
                case 117711:    { return 5769; }
                case 74907:             { return 5770; }
                case 53505:             { return 5771; }
                case 21402:             { return 5772; }
                case 161253:    { return 5773; }
                case 144279:    { return 5774; }
                case 110331:    { return 5775; }
                case 93357:             { return 5776; }
                case 59409:             { return 5777; }
                case 42435:             { return 5778; }
                case 16974:             { return 5779; }
                case 119187:    { return 5780; }
                case 91143:             { return 5781; }
                case 77121:             { return 5782; }
                case 49077:             { return 5783; }
                case 35055:             { return 5784; }
                case 14022:             { return 5785; }
                case 81549:             { return 5786; }
                case 69003:             { return 5787; }
                case 43911:             { return 5788; }
                case 31365:             { return 5789; }
                case 12546:             { return 5790; }
                case 52767:             { return 5791; }
                case 33579:             { return 5792; }
                case 23985:             { return 5793; }
                case 9594:              { return 5794; }
                case 28413:             { return 5795; }
                case 20295:             { return 5796; }
                case 8118:              { return 5797; }
                case 12915:             { return 5798; }
                case 5166:              { return 5799; }
                case 3690:              { return 5800; }
                case 299367:    { return 5801; }
                case 237429:    { return 5802; }
                case 196137:    { return 5803; }
                case 175491:    { return 5804; }
                case 134199:    { return 5805; }
                case 113553:    { return 5806; }
                case 72261:             { return 5807; }
                case 51615:             { return 5808; }
                case 20646:             { return 5809; }
                case 222111:    { return 5810; }
                case 183483:    { return 5811; }
                case 164169:    { return 5812; }
                case 125541:    { return 5813; }
                case 106227:    { return 5814; }
                case 67599:             { return 5815; }
                case 48285:             { return 5816; }
                case 19314:             { return 5817; }
                case 145521:    { return 5818; }
                case 130203:    { return 5819; }
                case 99567:             { return 5820; }
                case 84249:             { return 5821; }
                case 53613:             { return 5822; }
                case 38295:             { return 5823; }
                case 15318:             { return 5824; }
                case 107559:    { return 5825; }
                case 82251:             { return 5826; }
                case 69597:             { return 5827; }
                case 44289:             { return 5828; }
                case 31635:             { return 5829; }
                case 12654:             { return 5830; }
                case 73593:             { return 5831; }
                case 62271:             { return 5832; }
                case 39627:             { return 5833; }
                case 28305:             { return 5834; }
                case 11322:             { return 5835; }
                case 47619:             { return 5836; }
                case 30303:             { return 5837; }
                case 21645:             { return 5838; }
                case 8658:              { return 5839; }
                case 25641:             { return 5840; }
                case 18315:             { return 5841; }
                case 7326:              { return 5842; }
                case 11655:             { return 5843; }
                case 4662:              { return 5844; }
                case 3330:              { return 5845; }
                case 186093:    { return 5846; }
                case 153729:    { return 5847; }
                case 137547:    { return 5848; }
                case 105183:    { return 5849; }
                case 89001:             { return 5850; }
                case 56637:             { return 5851; }
                case 40455:             { return 5852; }
                case 16182:             { return 5853; }
                case 121923:    { return 5854; }
                case 109089:    { return 5855; }
                case 83421:             { return 5856; }
                case 70587:             { return 5857; }
                case 44919:             { return 5858; }
                case 32085:             { return 5859; }
                case 12834:             { return 5860; }
                case 90117:             { return 5861; }
                case 68913:             { return 5862; }
                case 58311:             { return 5863; }
                case 37107:             { return 5864; }
                case 26505:             { return 5865; }
                case 10602:             { return 5866; }
                case 61659:             { return 5867; }
                case 52173:             { return 5868; }
                case 33201:             { return 5869; }
                case 23715:             { return 5870; }
                case 9486:              { return 5871; }
                case 39897:             { return 5872; }
                case 25389:             { return 5873; }
                case 18135:             { return 5874; }
                case 7254:              { return 5875; }
                case 21483:             { return 5876; }
                case 15345:             { return 5877; }
                case 6138:              { return 5878; }
                case 9765:              { return 5879; }
                case 3906:              { return 5880; }
                case 2790:              { return 5881; }
                case 114057:    { return 5882; }
                case 102051:    { return 5883; }
                case 78039:             { return 5884; }
                case 66033:             { return 5885; }
                case 42021:             { return 5886; }
                case 30015:             { return 5887; }
                case 12006:             { return 5888; }
                case 84303:             { return 5889; }
                case 64467:             { return 5890; }
                case 54549:             { return 5891; }
                case 34713:             { return 5892; }
                case 24795:             { return 5893; }
                case 9918:              { return 5894; }
                case 57681:             { return 5895; }
                case 48807:             { return 5896; }
                case 31059:             { return 5897; }
                case 22185:             { return 5898; }
                case 8874:              { return 5899; }
                case 37323:             { return 5900; }
                case 23751:             { return 5901; }
                case 16965:             { return 5902; }
                case 6786:              { return 5903; }
                case 20097:             { return 5904; }
                case 14355:             { return 5905; }
                case 5742:              { return 5906; }
                case 9135:              { return 5907; }
                case 3654:              { return 5908; }
                case 2610:              { return 5909; }
                case 66861:             { return 5910; }
                case 51129:             { return 5911; }
                case 43263:             { return 5912; }
                case 27531:             { return 5913; }
                case 19665:             { return 5914; }
                case 7866:              { return 5915; }
                case 45747:             { return 5916; }
                case 38709:             { return 5917; }
                case 24633:             { return 5918; }
                case 17595:             { return 5919; }
                case 7038:              { return 5920; }
                case 29601:             { return 5921; }
                case 18837:             { return 5922; }
                case 13455:             { return 5923; }
                case 5382:              { return 5924; }
                case 15939:             { return 5925; }
                case 11385:             { return 5926; }
                case 4554:              { return 5927; }
                case 7245:              { return 5928; }
                case 2898:              { return 5929; }
                case 2070:              { return 5930; }
                case 37791:             { return 5931; }
                case 31977:             { return 5932; }
                case 20349:             { return 5933; }
                case 14535:             { return 5934; }
                case 5814:              { return 5935; }
                case 24453:             { return 5936; }
                case 15561:             { return 5937; }
                case 11115:             { return 5938; }
                case 4446:              { return 5939; }
                case 13167:             { return 5940; }
                case 9405:              { return 5941; }
                case 3762:              { return 5942; }
                case 5985:              { return 5943; }
                case 2394:              { return 5944; }
                case 1710:              { return 5945; }
                case 21879:             { return 5946; }
                case 13923:             { return 5947; }
                case 9945:              { return 5948; }
                case 3978:              { return 5949; }
                case 11781:             { return 5950; }
                case 8415:              { return 5951; }
                case 3366:              { return 5952; }
                case 5355:              { return 5953; }
                case 2142:              { return 5954; }
                case 1530:              { return 5955; }
                case 9009:              { return 5956; }
                case 6435:              { return 5957; }
                case 2574:              { return 5958; }
                case 4095:              { return 5959; }
                case 1638:              { return 5960; }
                case 1170:              { return 5961; }
                case 3465:              { return 5962; }
                case 1386:              { return 5963; }
                case 990:               { return 5964; }
                case 630:               { return 5965; }
                case 188108:    { return 5966; } // Pair of Deuces
                case 175972:    { return 5967; }
                case 139564:    { return 5968; }
                case 115292:    { return 5969; }
                case 103156:    { return 5970; }
                case 78884:             { return 5971; }
                case 66748:             { return 5972; }
                case 42476:             { return 5973; }
                case 30340:             { return 5974; }
                case 18204:             { return 5975; }
                case 147436:    { return 5976; }
                case 116932:    { return 5977; }
                case 96596:             { return 5978; }
                case 86428:             { return 5979; }
                case 66092:             { return 5980; }
                case 55924:             { return 5981; }
                case 35588:             { return 5982; }
                case 25420:             { return 5983; }
                case 15252:             { return 5984; }
                case 109388:    { return 5985; }
                case 90364:             { return 5986; }
                case 80852:             { return 5987; }
                case 61828:             { return 5988; }
                case 52316:             { return 5989; }
                case 33292:             { return 5990; }
                case 23780:             { return 5991; }
                case 14268:             { return 5992; }
                case 71668:             { return 5993; }
                case 64124:             { return 5994; }
                case 49036:             { return 5995; }
                case 41492:             { return 5996; }
                case 26404:             { return 5997; }
                case 18860:             { return 5998; }
                case 11316:             { return 5999; }
                case 52972:             { return 6000; }
                case 40508:             { return 6001; }
                case 34276:             { return 6002; }
                case 21812:             { return 6003; }
                case 15580:             { return 6004; }
                case 9348:              { return 6005; }
                case 36244:             { return 6006; }
                case 30668:             { return 6007; }
                case 19516:             { return 6008; }
                case 13940:             { return 6009; }
                case 8364:              { return 6010; }
                case 23452:             { return 6011; }
                case 14924:             { return 6012; }
                case 10660:             { return 6013; }
                case 6396:              { return 6014; }
                case 12628:             { return 6015; }
                case 9020:              { return 6016; }
                case 5412:              { return 6017; }
                case 5740:              { return 6018; }
                case 3444:              { return 6019; }
                case 2460:              { return 6020; }
                case 133052:    { return 6021; }
                case 105524:    { return 6022; }
                case 87172:             { return 6023; }
                case 77996:             { return 6024; }
                case 59644:             { return 6025; }
                case 50468:             { return 6026; }
                case 32116:             { return 6027; }
                case 22940:             { return 6028; }
                case 13764:             { return 6029; }
                case 98716:             { return 6030; }
                case 81548:             { return 6031; }
                case 72964:             { return 6032; }
                case 55796:             { return 6033; }
                case 47212:             { return 6034; }
                case 30044:             { return 6035; }
                case 21460:             { return 6036; }
                case 12876:             { return 6037; }
                case 64676:             { return 6038; }
                case 57868:             { return 6039; }
                case 44252:             { return 6040; }
                case 37444:             { return 6041; }
                case 23828:             { return 6042; }
                case 17020:             { return 6043; }
                case 10212:             { return 6044; }
                case 47804:             { return 6045; }
                case 36556:             { return 6046; }
                case 30932:             { return 6047; }
                case 19684:             { return 6048; }
                case 14060:             { return 6049; }
                case 8436:              { return 6050; }
                case 32708:             { return 6051; }
                case 27676:             { return 6052; }
                case 17612:             { return 6053; }
                case 12580:             { return 6054; }
                case 7548:              { return 6055; }
                case 21164:             { return 6056; }
                case 13468:             { return 6057; }
                case 9620:              { return 6058; }
                case 5772:              { return 6059; }
                case 11396:             { return 6060; }
                case 8140:              { return 6061; }
                case 4884:              { return 6062; }
                case 5180:              { return 6063; }
                case 3108:              { return 6064; }
                case 2220:              { return 6065; }
                case 82708:             { return 6066; }
                case 68324:             { return 6067; }
                case 61132:             { return 6068; }
                case 46748:             { return 6069; }
                case 39556:             { return 6070; }
                case 25172:             { return 6071; }
                case 17980:             { return 6072; }
                case 10788:             { return 6073; }
                case 54188:             { return 6074; }
                case 48484:             { return 6075; }
                case 37076:             { return 6076; }
                case 31372:             { return 6077; }
                case 19964:             { return 6078; }
                case 14260:             { return 6079; }
                case 8556:              { return 6080; }
                case 40052:             { return 6081; }
                case 30628:             { return 6082; }
                case 25916:             { return 6083; }
                case 16492:             { return 6084; }
                case 11780:             { return 6085; }
                case 7068:              { return 6086; }
                case 27404:             { return 6087; }
                case 23188:             { return 6088; }
                case 14756:             { return 6089; }
                case 10540:             { return 6090; }
                case 6324:              { return 6091; }
                case 17732:             { return 6092; }
                case 11284:             { return 6093; }
                case 8060:              { return 6094; }
                case 4836:              { return 6095; }
                case 9548:              { return 6096; }
                case 6820:              { return 6097; }
                case 4092:              { return 6098; }
                case 4340:              { return 6099; }
                case 2604:              { return 6100; }
                case 1860:              { return 6101; }
                case 50692:             { return 6102; }
                case 45356:             { return 6103; }
                case 34684:             { return 6104; }
                case 29348:             { return 6105; }
                case 18676:             { return 6106; }
                case 13340:             { return 6107; }
                case 8004:              { return 6108; }
                case 37468:             { return 6109; }
                case 28652:             { return 6110; }
                case 24244:             { return 6111; }
                case 15428:             { return 6112; }
                case 11020:             { return 6113; }
                case 6612:              { return 6114; }
                case 25636:             { return 6115; }
                case 21692:             { return 6116; }
                case 13804:             { return 6117; }
                case 9860:              { return 6118; }
                case 5916:              { return 6119; }
                case 16588:             { return 6120; }
                case 10556:             { return 6121; }
                case 7540:              { return 6122; }
                case 4524:              { return 6123; }
                case 8932:              { return 6124; }
                case 6380:              { return 6125; }
                case 3828:              { return 6126; }
                case 4060:              { return 6127; }
                case 2436:              { return 6128; }
                case 1740:              { return 6129; }
                case 29716:             { return 6130; }
                case 22724:             { return 6131; }
                case 19228:             { return 6132; }
                case 12236:             { return 6133; }
                case 8740:              { return 6134; }
                case 5244:              { return 6135; }
                case 20332:             { return 6136; }
                case 17204:             { return 6137; }
                case 10948:             { return 6138; }
                case 7820:              { return 6139; }
                case 4692:              { return 6140; }
                case 13156:             { return 6141; }
                case 8372:              { return 6142; }
                case 5980:              { return 6143; }
                case 3588:              { return 6144; }
                case 7084:              { return 6145; }
                case 5060:              { return 6146; }
                case 3036:              { return 6147; }
                case 3220:              { return 6148; }
                case 1932:              { return 6149; }
                case 1380:              { return 6150; }
                case 16796:             { return 6151; }
                case 14212:             { return 6152; }
                case 9044:              { return 6153; }
                case 6460:              { return 6154; }
                case 3876:              { return 6155; }
                case 10868:             { return 6156; }
                case 6916:              { return 6157; }
                case 4940:              { return 6158; }
                case 2964:              { return 6159; }
                case 5852:              { return 6160; }
                case 4180:              { return 6161; }
                case 2508:              { return 6162; }
                case 2660:              { return 6163; }
                case 1596:              { return 6164; }
                case 1140:              { return 6165; }
                case 9724:              { return 6166; }
                case 6188:              { return 6167; }
                case 4420:              { return 6168; }
                case 2652:              { return 6169; }
                case 5236:              { return 6170; }
                case 3740:              { return 6171; }
                case 2244:              { return 6172; }
                case 2380:              { return 6173; }
                case 1428:              { return 6174; }
                case 1020:              { return 6175; }
                case 4004:              { return 6176; }
                case 2860:              { return 6177; }
                case 1716:              { return 6178; }
                case 1820:              { return 6179; }
                case 1092:              { return 6180; }
                case 780:               { return 6181; }
                case 1540:              { return 6182; }
                case 924:               { return 6183; }
                case 660:               { return 6184; }
                case 420:               { return 6185; }
                case 25911877:  { return (6186 - flushes); } // Ace-High
                case 23184311:  { return (6187 - flushes); }
                case 17729179:  { return (6188 - flushes); }
                case 15001613:  { return (6189 - flushes); }
                case 9546481:   { return (6190 - flushes); }
                case 6818915:   { return (6191 - flushes); }
                case 4091349:   { return (6192 - flushes); }
                case 2727566:   { return (6193 - flushes); }
                case 20550799:  { return (6194 - flushes); }
                case 18387557:  { return (6195 - flushes); }
                case 14061073:  { return (6196 - flushes); }
                case 11897831:  { return (6197 - flushes); }
                case 7571347:   { return (6198 - flushes); }
                case 5408105:   { return (6199 - flushes); }
                case 3244863:   { return (6200 - flushes); }
                case 2163242:   { return (6201 - flushes); }
                case 15189721:  { return (6202 - flushes); }
                case 11615669:  { return (6203 - flushes); }
                case 9828643:   { return (6204 - flushes); }
                case 6254591:   { return (6205 - flushes); }
                case 4467565:   { return (6206 - flushes); }
                case 2680539:   { return (6207 - flushes); }
                case 1787026:   { return (6208 - flushes); }
                case 10392967:  { return (6209 - flushes); }
                case 8794049:   { return (6210 - flushes); }
                case 5596213:   { return (6211 - flushes); }
                case 3997295:   { return (6212 - flushes); }
                case 2398377:   { return (6213 - flushes); }
                case 1598918:   { return (6214 - flushes); }
                case 6724861:   { return (6215 - flushes); }
                case 4279457:   { return (6216 - flushes); }
                case 3056755:   { return (6217 - flushes); }
                case 1834053:   { return (6218 - flushes); }
                case 1222702:   { return (6219 - flushes); }
                case 3621079:   { return (6220 - flushes); }
                case 2586485:   { return (6221 - flushes); }
                case 1551891:   { return (6222 - flushes); }
                case 1034594:   { return (6223 - flushes); }
                case 1645945:   { return (6224 - flushes); }
                case 987567:    { return (6225 - flushes); }
                case 658378:    { return (6226 - flushes); }
                case 705405:    { return (6227 - flushes); }
                case 470270:    { return (6228 - flushes); }
                case 282162:    { return (6229 - flushes); }
                case 19224941:  { return (6230 - flushes); }
                case 17201263:  { return (6231 - flushes); }
                case 13153907:  { return (6232 - flushes); }
                case 11130229:  { return (6233 - flushes); }
                case 7082873:   { return (6234 - flushes); }
                case 5059195:   { return (6235 - flushes); }
                case 3035517:   { return (6236 - flushes); }
                case 2023678:   { return (6237 - flushes); }
                case 14209739:  { return (6238 - flushes); }
                case 10866271:  { return (6239 - flushes); }
                case 9194537:   { return (6240 - flushes); }
                case 5851069:   { return (6241 - flushes); }
                case 4179335:   { return (6242 - flushes); }
                case 2507601:   { return (6243 - flushes); }
                case 1671734:   { return (6244 - flushes); }
                case 9722453:   { return (6245 - flushes); }
                case 8226691:   { return (6246 - flushes); }
                case 5235167:   { return (6247 - flushes); }
                case 3739405:   { return (6248 - flushes); }
                case 2243643:   { return (6249 - flushes); }
                case 1495762:   { return (6250 - flushes); }
                case 6290999:   { return (6251 - flushes); }
                case 4003363:   { return (6252 - flushes); }
                case 2859545:   { return (6253 - flushes); }
                case 1715727:   { return (6254 - flushes); }
                case 1143818:   { return (6255 - flushes); }
                case 3387461:   { return (6256 - flushes); }
                case 2419615:   { return (6257 - flushes); }
                case 1451769:   { return (6258 - flushes); }
                case 967846:    { return (6259 - flushes); }
                case 1539755:   { return (6260 - flushes); }
                case 923853:    { return (6261 - flushes); }
                case 615902:    { return (6262 - flushes); }
                case 659895:    { return (6263 - flushes); }
                case 439930:    { return (6264 - flushes); }
                case 263958:    { return (6265 - flushes); }
                case 11269793:  { return (6266 - flushes); }
                case 8618077:   { return (6267 - flushes); }
                case 7292219:   { return (6268 - flushes); }
                case 4640503:   { return (6269 - flushes); }
                case 3314645:   { return (6270 - flushes); }
                case 1988787:   { return (6271 - flushes); }
                case 1325858:   { return (6272 - flushes); }
                case 7710911:   { return (6273 - flushes); }
                case 6524617:   { return (6274 - flushes); }
                case 4152029:   { return (6275 - flushes); }
                case 2965735:   { return (6276 - flushes); }
                case 1779441:   { return (6277 - flushes); }
                case 1186294:   { return (6278 - flushes); }
                case 4989413:   { return (6279 - flushes); }
                case 3175081:   { return (6280 - flushes); }
                case 2267915:   { return (6281 - flushes); }
                case 1360749:   { return (6282 - flushes); }
                case 907166:    { return (6283 - flushes); }
                case 2686607:   { return (6284 - flushes); }
                case 1919005:   { return (6285 - flushes); }
                case 1151403:   { return (6286 - flushes); }
                case 767602:    { return (6287 - flushes); }
                case 1221185:   { return (6288 - flushes); }
                case 732711:    { return (6289 - flushes); }
                case 488474:    { return (6290 - flushes); }
                case 523365:    { return (6291 - flushes); }
                case 348910:    { return (6292 - flushes); }
                case 209346:    { return (6293 - flushes); }
                case 6369883:   { return (6294 - flushes); }
                case 5389901:   { return (6295 - flushes); }
                case 3429937:   { return (6296 - flushes); }
                case 2449955:   { return (6297 - flushes); }
                case 1469973:   { return (6298 - flushes); }
                case 979982:    { return (6299 - flushes); }
                case 4121689:   { return (6300 - flushes); }
                case 2622893:   { return (6301 - flushes); }
                case 1873495:   { return (6302 - flushes); }
                case 1124097:   { return (6303 - flushes); }
                case 749398:    { return (6304 - flushes); }
                case 2219371:   { return (6305 - flushes); }
                case 1585265:   { return (6306 - flushes); }
                case 951159:    { return (6307 - flushes); }
                case 634106:    { return (6308 - flushes); }
                case 1008805:   { return (6309 - flushes); }
                case 605283:    { return (6310 - flushes); }
                case 403522:    { return (6311 - flushes); }
                case 432345:    { return (6312 - flushes); }
                case 288230:    { return (6313 - flushes); }
                case 172938:    { return (6314 - flushes); }
                case 3687827:   { return (6315 - flushes); }
                case 2346799:   { return (6316 - flushes); }
                case 1676285:   { return (6317 - flushes); }
                case 1005771:   { return (6318 - flushes); }
                case 670514:    { return (6319 - flushes); }
                case 1985753:   { return (6320 - flushes); }
                case 1418395:   { return (6321 - flushes); }
                case 851037:    { return (6322 - flushes); }
                case 567358:    { return (6323 - flushes); }
                case 902615:    { return (6324 - flushes); }
                case 541569:    { return (6325 - flushes); }
                case 361046:    { return (6326 - flushes); }
                case 386835:    { return (6327 - flushes); }
                case 257890:    { return (6328 - flushes); }
                case 154734:    { return (6329 - flushes); }
                case 1518517:   { return (6330 - flushes); }
                case 1084655:   { return (6331 - flushes); }
                case 650793:    { return (6332 - flushes); }
                case 433862:    { return (6333 - flushes); }
                case 690235:    { return (6334 - flushes); }
                case 414141:    { return (6335 - flushes); }
                case 276094:    { return (6336 - flushes); }
                case 295815:    { return (6337 - flushes); }
                case 197210:    { return (6338 - flushes); }
                case 118326:    { return (6339 - flushes); }
                case 584045:    { return (6340 - flushes); }
                case 350427:    { return (6341 - flushes); }
                case 233618:    { return (6342 - flushes); }
                case 250305:    { return (6343 - flushes); }
                case 166870:    { return (6344 - flushes); }
                case 100122:    { return (6345 - flushes); }
                case 159285:    { return (6346 - flushes); }
                case 106190:    { return (6347 - flushes); }
                case 63714:             { return (6348 - flushes); }
                case 45510:             { return (6349 - flushes); }
                case 16107383:  { return (6350 - flushes); }
                case 14411869:  { return (6351 - flushes); }
                case 11020841:  { return (6352 - flushes); }
                case 9325327:   { return (6353 - flushes); }
                case 5934299:   { return (6354 - flushes); }
                case 4238785:   { return (6355 - flushes); }
                case 2543271:   { return (6356 - flushes); }
                case 1695514:   { return (6357 - flushes); }
                case 11905457:  { return (6358 - flushes); }
                case 9104173:   { return (6359 - flushes); }
                case 7703531:   { return (6360 - flushes); }
                case 4902247:   { return (6361 - flushes); }
                case 3501605:   { return (6362 - flushes); }
                case 2100963:   { return (6363 - flushes); }
                case 1400642:   { return (6364 - flushes); }
                case 8145839:   { return (6365 - flushes); }
                case 6892633:   { return (6366 - flushes); }
                case 4386221:   { return (6367 - flushes); }
                case 3133015:   { return (6368 - flushes); }
                case 1879809:   { return (6369 - flushes); }
                case 1253206:   { return (6370 - flushes); }
                case 5270837:   { return (6371 - flushes); }
                case 3354169:   { return (6372 - flushes); }
                case 2395835:   { return (6373 - flushes); }
                case 1437501:   { return (6374 - flushes); }
                case 958334:    { return (6375 - flushes); }
                case 2838143:   { return (6376 - flushes); }
                case 2027245:   { return (6377 - flushes); }
                case 1216347:   { return (6378 - flushes); }
                case 810898:    { return (6379 - flushes); }
                case 1290065:   { return (6380 - flushes); }
                case 774039:    { return (6381 - flushes); }
                case 516026:    { return (6382 - flushes); }
                case 552885:    { return (6383 - flushes); }
                case 368590:    { return (6384 - flushes); }
                case 221154:    { return (6385 - flushes); }
                case 9442259:   { return (6386 - flushes); }
                case 7220551:   { return (6387 - flushes); }
                case 6109697:   { return (6388 - flushes); }
                case 3887989:   { return (6389 - flushes); }
                case 2777135:   { return (6390 - flushes); }
                case 1666281:   { return (6391 - flushes); }
                case 1110854:   { return (6392 - flushes); }
                case 6460493:   { return (6393 - flushes); }
                case 5466571:   { return (6394 - flushes); }
                case 3478727:   { return (6395 - flushes); }
                case 2484805:   { return (6396 - flushes); }
                case 1490883:   { return (6397 - flushes); }
                case 993922:    { return (6398 - flushes); }
                case 4180319:   { return (6399 - flushes); }
                case 2660203:   { return (6400 - flushes); }
                case 1900145:   { return (6401 - flushes); }
                case 1140087:   { return (6402 - flushes); }
                case 760058:    { return (6403 - flushes); }
                case 2250941:   { return (6404 - flushes); }
                case 1607815:   { return (6405 - flushes); }
                case 964689:    { return (6406 - flushes); }
                case 643126:    { return (6407 - flushes); }
                case 1023155:   { return (6408 - flushes); }
                case 613893:    { return (6409 - flushes); }
                case 409262:    { return (6410 - flushes); }
                case 438495:    { return (6411 - flushes); }
                case 292330:    { return (6412 - flushes); }
                case 175398:    { return (6413 - flushes); }
                case 5336929:   { return (6414 - flushes); }
                case 4515863:   { return (6415 - flushes); }
                case 2873731:   { return (6416 - flushes); }
                case 2052665:   { return (6417 - flushes); }
                case 1231599:   { return (6418 - flushes); }
                case 821066:    { return (6419 - flushes); }
                case 3453307:   { return (6420 - flushes); }
                case 2197559:   { return (6421 - flushes); }
                case 1569685:   { return (6422 - flushes); }
                case 941811:    { return (6423 - flushes); }
                case 627874:    { return (6424 - flushes); }
                case 1859473:   { return (6425 - flushes); }
                case 1328195:   { return (6426 - flushes); }
                case 796917:    { return (6427 - flushes); }
                case 531278:    { return (6428 - flushes); }
                case 845215:    { return (6429 - flushes); }
                case 507129:    { return (6430 - flushes); }
                case 338086:    { return (6431 - flushes); }
                case 362235:    { return (6432 - flushes); }
                case 241490:    { return (6433 - flushes); }
                case 144894:    { return (6434 - flushes); }
                case 3089801:   { return (6435 - flushes); }
                case 1966237:   { return (6436 - flushes); }
                case 1404455:   { return (6437 - flushes); }
                case 842673:    { return (6438 - flushes); }
                case 561782:    { return (6439 - flushes); }
                case 1663739:   { return (6440 - flushes); }
                case 1188385:   { return (6441 - flushes); }
                case 713031:    { return (6442 - flushes); }
                case 475354:    { return (6443 - flushes); }
                case 756245:    { return (6444 - flushes); }
                case 453747:    { return (6445 - flushes); }
                case 302498:    { return (6446 - flushes); }
                case 324105:    { return (6447 - flushes); }
                case 216070:    { return (6448 - flushes); }
                case 129642:    { return (6449 - flushes); }
                case 1272271:   { return (6450 - flushes); }
                case 908765:    { return (6451 - flushes); }
                case 545259:    { return (6452 - flushes); }
                case 363506:    { return (6453 - flushes); }
                case 578305:    { return (6454 - flushes); }
                case 346983:    { return (6455 - flushes); }
                case 231322:    { return (6456 - flushes); }
                case 247845:    { return (6457 - flushes); }
                case 165230:    { return (6458 - flushes); }
                case 99138:             { return (6459 - flushes); }
                case 489335:    { return (6460 - flushes); }
                case 293601:    { return (6461 - flushes); }
                case 195734:    { return (6462 - flushes); }
                case 209715:    { return (6463 - flushes); }
                case 139810:    { return (6464 - flushes); }
                case 83886:             { return (6465 - flushes); }
                case 133455:    { return (6466 - flushes); }
                case 88970:             { return (6467 - flushes); }
                case 53382:             { return (6468 - flushes); }
                case 38130:             { return (6469 - flushes); }
                case 8833081:   { return (6470 - flushes); }
                case 6754709:   { return (6471 - flushes); }
                case 5715523:   { return (6472 - flushes); }
                case 3637151:   { return (6473 - flushes); }
                case 2597965:   { return (6474 - flushes); }
                case 1558779:   { return (6475 - flushes); }
                case 1039186:   { return (6476 - flushes); }
                case 6043687:   { return (6477 - flushes); }
                case 5113889:   { return (6478 - flushes); }
                case 3254293:   { return (6479 - flushes); }
                case 2324495:   { return (6480 - flushes); }
                case 1394697:   { return (6481 - flushes); }
                case 929798:    { return (6482 - flushes); }
                case 3910621:   { return (6483 - flushes); }
                case 2488577:   { return (6484 - flushes); }
                case 1777555:   { return (6485 - flushes); }
                case 1066533:   { return (6486 - flushes); }
                case 711022:    { return (6487 - flushes); }
                case 2105719:   { return (6488 - flushes); }
                case 1504085:   { return (6489 - flushes); }
                case 902451:    { return (6490 - flushes); }
                case 601634:    { return (6491 - flushes); }
                case 957145:    { return (6492 - flushes); }
                case 574287:    { return (6493 - flushes); }
                case 382858:    { return (6494 - flushes); }
                case 410205:    { return (6495 - flushes); }
                case 273470:    { return (6496 - flushes); }
                case 164082:    { return (6497 - flushes); }
                case 4992611:   { return (6498 - flushes); }
                case 4224517:   { return (6499 - flushes); }
                case 2688329:   { return (6500 - flushes); }
                case 1920235:   { return (6501 - flushes); }
                case 1152141:   { return (6502 - flushes); }
                case 768094:    { return (6503 - flushes); }
                case 3230513:   { return (6504 - flushes); }
                case 2055781:   { return (6505 - flushes); }
                case 1468415:   { return (6506 - flushes); }
                case 881049:    { return (6507 - flushes); }
                case 587366:    { return (6508 - flushes); }
                case 1739507:   { return (6509 - flushes); }
                case 1242505:   { return (6510 - flushes); }
                case 745503:    { return (6511 - flushes); }
                case 497002:    { return (6512 - flushes); }
                case 790685:    { return (6513 - flushes); }
                case 474411:    { return (6514 - flushes); }
                case 316274:    { return (6515 - flushes); }
                case 338865:    { return (6516 - flushes); }
                case 225910:    { return (6517 - flushes); }
                case 135546:    { return (6518 - flushes); }
                case 2890459:   { return (6519 - flushes); }
                case 1839383:   { return (6520 - flushes); }
                case 1313845:   { return (6521 - flushes); }
                case 788307:    { return (6522 - flushes); }
                case 525538:    { return (6523 - flushes); }
                case 1556401:   { return (6524 - flushes); }
                case 1111715:   { return (6525 - flushes); }
                case 667029:    { return (6526 - flushes); }
                case 444686:    { return (6527 - flushes); }
                case 707455:    { return (6528 - flushes); }
                case 424473:    { return (6529 - flushes); }
                case 282982:    { return (6530 - flushes); }
                case 303195:    { return (6531 - flushes); }
                case 202130:    { return (6532 - flushes); }
                case 121278:    { return (6533 - flushes); }
                case 1190189:   { return (6534 - flushes); }
                case 850135:    { return (6535 - flushes); }
                case 510081:    { return (6536 - flushes); }
                case 340054:    { return (6537 - flushes); }
                case 540995:    { return (6538 - flushes); }
                case 324597:    { return (6539 - flushes); }
                case 216398:    { return (6540 - flushes); }
                case 231855:    { return (6541 - flushes); }
                case 154570:    { return (6542 - flushes); }
                case 92742:             { return (6543 - flushes); }
                case 457765:    { return (6544 - flushes); }
                case 274659:    { return (6545 - flushes); }
                case 183106:    { return (6546 - flushes); }
                case 196185:    { return (6547 - flushes); }
                case 130790:    { return (6548 - flushes); }
                case 78474:             { return (6549 - flushes); }
                case 124845:    { return (6550 - flushes); }
                case 83230:             { return (6551 - flushes); }
                case 49938:             { return (6552 - flushes); }
                case 35670:             { return (6553 - flushes); }
                case 3959657:   { return (6554 - flushes); }
                case 3350479:   { return (6555 - flushes); }
                case 2132123:   { return (6556 - flushes); }
                case 1522945:   { return (6557 - flushes); }
                case 913767:    { return (6558 - flushes); }
                case 609178:    { return (6559 - flushes); }
                case 2562131:   { return (6560 - flushes); }
                case 1630447:   { return (6561 - flushes); }
                case 1164605:   { return (6562 - flushes); }
                case 698763:    { return (6563 - flushes); }
                case 465842:    { return (6564 - flushes); }
                case 1379609:   { return (6565 - flushes); }
                case 985435:    { return (6566 - flushes); }
                case 591261:    { return (6567 - flushes); }
                case 394174:    { return (6568 - flushes); }
                case 627095:    { return (6569 - flushes); }
                case 376257:    { return (6570 - flushes); }
                case 250838:    { return (6571 - flushes); }
                case 268755:    { return (6572 - flushes); }
                case 179170:    { return (6573 - flushes); }
                case 107502:    { return (6574 - flushes); }
                case 2292433:   { return (6575 - flushes); }
                case 1458821:   { return (6576 - flushes); }
                case 1042015:   { return (6577 - flushes); }
                case 625209:    { return (6578 - flushes); }
                case 416806:    { return (6579 - flushes); }
                case 1234387:   { return (6580 - flushes); }
                case 881705:    { return (6581 - flushes); }
                case 529023:    { return (6582 - flushes); }
                case 352682:    { return (6583 - flushes); }
                case 561085:    { return (6584 - flushes); }
                case 336651:    { return (6585 - flushes); }
                case 224434:    { return (6586 - flushes); }
                case 240465:    { return (6587 - flushes); }
                case 160310:    { return (6588 - flushes); }
                case 96186:             { return (6589 - flushes); }
                case 943943:    { return (6590 - flushes); }
                case 674245:    { return (6591 - flushes); }
                case 404547:    { return (6592 - flushes); }
                case 269698:    { return (6593 - flushes); }
                case 429065:    { return (6594 - flushes); }
                case 257439:    { return (6595 - flushes); }
                case 171626:    { return (6596 - flushes); }
                case 183885:    { return (6597 - flushes); }
                case 122590:    { return (6598 - flushes); }
                case 73554:             { return (6599 - flushes); }
                case 363055:    { return (6600 - flushes); }
                case 217833:    { return (6601 - flushes); }
                case 145222:    { return (6602 - flushes); }
                case 155595:    { return (6603 - flushes); }
                case 103730:    { return (6604 - flushes); }
                case 62238:             { return (6605 - flushes); }
                case 99015:             { return (6606 - flushes); }
                case 66010:             { return (6607 - flushes); }
                case 39606:             { return (6608 - flushes); }
                case 28290:             { return (6609 - flushes); }
                case 1893749:   { return (6610 - flushes); }
                case 1205113:   { return (6611 - flushes); }
                case 860795:    { return (6612 - flushes); }
                case 516477:    { return (6613 - flushes); }
                case 344318:    { return (6614 - flushes); }
                case 1019711:   { return (6615 - flushes); }
                case 728365:    { return (6616 - flushes); }
                case 437019:    { return (6617 - flushes); }
                case 291346:    { return (6618 - flushes); }
                case 463505:    { return (6619 - flushes); }
                case 278103:    { return (6620 - flushes); }
                case 185402:    { return (6621 - flushes); }
                case 198645:    { return (6622 - flushes); }
                case 132430:    { return (6623 - flushes); }
                case 79458:             { return (6624 - flushes); }
                case 779779:    { return (6625 - flushes); }
                case 556985:    { return (6626 - flushes); }
                case 334191:    { return (6627 - flushes); }
                case 222794:    { return (6628 - flushes); }
                case 354445:    { return (6629 - flushes); }
                case 212667:    { return (6630 - flushes); }
                case 141778:    { return (6631 - flushes); }
                case 151905:    { return (6632 - flushes); }
                case 101270:    { return (6633 - flushes); }
                case 60762:             { return (6634 - flushes); }
                case 299915:    { return (6635 - flushes); }
                case 179949:    { return (6636 - flushes); }
                case 119966:    { return (6637 - flushes); }
                case 128535:    { return (6638 - flushes); }
                case 85690:             { return (6639 - flushes); }
                case 51414:             { return (6640 - flushes); }
                case 81795:             { return (6641 - flushes); }
                case 54530:             { return (6642 - flushes); }
                case 32718:             { return (6643 - flushes); }
                case 23370:             { return (6644 - flushes); }
                case 697697:    { return (6645 - flushes); }
                case 498355:    { return (6646 - flushes); }
                case 299013:    { return (6647 - flushes); }
                case 199342:    { return (6648 - flushes); }
                case 317135:    { return (6649 - flushes); }
                case 190281:    { return (6650 - flushes); }
                case 126854:    { return (6651 - flushes); }
                case 135915:    { return (6652 - flushes); }
                case 90610:             { return (6653 - flushes); }
                case 54366:             { return (6654 - flushes); }
                case 268345:    { return (6655 - flushes); }
                case 161007:    { return (6656 - flushes); }
                case 107338:    { return (6657 - flushes); }
                case 115005:    { return (6658 - flushes); }
                case 76670:             { return (6659 - flushes); }
                case 46002:             { return (6660 - flushes); }
                case 73185:             { return (6661 - flushes); }
                case 48790:             { return (6662 - flushes); }
                case 29274:             { return (6663 - flushes); }
                case 20910:             { return (6664 - flushes); }
                case 205205:    { return (6665 - flushes); }
                case 123123:    { return (6666 - flushes); }
                case 82082:             { return (6667 - flushes); }
                case 87945:             { return (6668 - flushes); }
                case 58630:             { return (6669 - flushes); }
                case 35178:             { return (6670 - flushes); }
                case 55965:             { return (6671 - flushes); }
                case 37310:             { return (6672 - flushes); }
                case 22386:             { return (6673 - flushes); }
                case 15990:             { return (6674 - flushes); }
                case 47355:             { return (6675 - flushes); }
                case 31570:             { return (6676 - flushes); }
                case 18942:             { return (6677 - flushes); }
                case 13530:             { return (6678 - flushes); }
                case 13005833:  { return (6679 - flushes); } // King - High
                case 9945637:   { return (6680 - flushes); }
                case 8415539:   { return (6681 - flushes); }
                case 5355343:   { return (6682 - flushes); }
                case 3825245:   { return (6683 - flushes); }
                case 2295147:   { return (6684 - flushes); }
                case 1530098:   { return (6685 - flushes); }
                case 10743949:  { return (6686 - flushes); }
                case 8215961:   { return (6687 - flushes); }
                case 6951967:   { return (6688 - flushes); }
                case 4423979:   { return (6689 - flushes); }
                case 3159985:   { return (6690 - flushes); }
                case 1895991:   { return (6691 - flushes); }
                case 1263994:   { return (6692 - flushes); }
                case 7351123:   { return (6693 - flushes); }
                case 6220181:   { return (6694 - flushes); }
                case 3958297:   { return (6695 - flushes); }
                case 2827355:   { return (6696 - flushes); }
                case 1696413:   { return (6697 - flushes); }
                case 1130942:   { return (6698 - flushes); }
                case 4756609:   { return (6699 - flushes); }
                case 3026933:   { return (6700 - flushes); }
                case 2162095:   { return (6701 - flushes); }
                case 1297257:   { return (6702 - flushes); }
                case 864838:    { return (6703 - flushes); }
                case 2561251:   { return (6704 - flushes); }
                case 1829465:   { return (6705 - flushes); }
                case 1097679:   { return (6706 - flushes); }
                case 731786:    { return (6707 - flushes); }
                case 1164205:   { return (6708 - flushes); }
                case 698523:    { return (6709 - flushes); }
                case 465682:    { return (6710 - flushes); }
                case 498945:    { return (6711 - flushes); }
                case 332630:    { return (6712 - flushes); }
                case 199578:    { return (6713 - flushes); }
                case 8521063:   { return (6714 - flushes); }
                case 6516107:   { return (6715 - flushes); }
                case 5513629:   { return (6716 - flushes); }
                case 3508673:   { return (6717 - flushes); }
                case 2506195:   { return (6718 - flushes); }
                case 1503717:   { return (6719 - flushes); }
                case 1002478:   { return (6720 - flushes); }
                case 5830201:   { return (6721 - flushes); }
                case 4933247:   { return (6722 - flushes); }
                case 3139339:   { return (6723 - flushes); }
                case 2242385:   { return (6724 - flushes); }
                case 1345431:   { return (6725 - flushes); }
                case 896954:    { return (6726 - flushes); }
                case 3772483:   { return (6727 - flushes); }
                case 2400671:   { return (6728 - flushes); }
                case 1714765:   { return (6729 - flushes); }
                case 1028859:   { return (6730 - flushes); }
                case 685906:    { return (6731 - flushes); }
                case 2031337:   { return (6732 - flushes); }
                case 1450955:   { return (6733 - flushes); }
                case 870573:    { return (6734 - flushes); }
                case 580382:    { return (6735 - flushes); }
                case 923335:    { return (6736 - flushes); }
                case 554001:    { return (6737 - flushes); }
                case 369334:    { return (6738 - flushes); }
                case 395715:    { return (6739 - flushes); }
                case 263810:    { return (6740 - flushes); }
                case 158286:    { return (6741 - flushes); }
                case 4816253:   { return (6742 - flushes); }
                case 4075291:   { return (6743 - flushes); }
                case 2593367:   { return (6744 - flushes); }
                case 1852405:   { return (6745 - flushes); }
                case 1111443:   { return (6746 - flushes); }
                case 740962:    { return (6747 - flushes); }
                case 3116399:   { return (6748 - flushes); }
                case 1983163:   { return (6749 - flushes); }
                case 1416545:   { return (6750 - flushes); }
                case 849927:    { return (6751 - flushes); }
                case 566618:    { return (6752 - flushes); }
                case 1678061:   { return (6753 - flushes); }
                case 1198615:   { return (6754 - flushes); }
                case 719169:    { return (6755 - flushes); }
                case 479446:    { return (6756 - flushes); }
                case 762755:    { return (6757 - flushes); }
                case 457653:    { return (6758 - flushes); }
                case 305102:    { return (6759 - flushes); }
                case 326895:    { return (6760 - flushes); }
                case 217930:    { return (6761 - flushes); }
                case 130758:    { return (6762 - flushes); }
                case 2788357:   { return (6763 - flushes); }
                case 1774409:   { return (6764 - flushes); }
                case 1267435:   { return (6765 - flushes); }
                case 760461:    { return (6766 - flushes); }
                case 506974:    { return (6767 - flushes); }
                case 1501423:   { return (6768 - flushes); }
                case 1072445:   { return (6769 - flushes); }
                case 643467:    { return (6770 - flushes); }
                case 428978:    { return (6771 - flushes); }
                case 682465:    { return (6772 - flushes); }
                case 409479:    { return (6773 - flushes); }
                case 272986:    { return (6774 - flushes); }
                case 292485:    { return (6775 - flushes); }
                case 194990:    { return (6776 - flushes); }
                case 116994:    { return (6777 - flushes); }
                case 1148147:   { return (6778 - flushes); }
                case 820105:    { return (6779 - flushes); }
                case 492063:    { return (6780 - flushes); }
                case 328042:    { return (6781 - flushes); }
                case 521885:    { return (6782 - flushes); }
                case 313131:    { return (6783 - flushes); }
                case 208754:    { return (6784 - flushes); }
                case 223665:    { return (6785 - flushes); }
                case 149110:    { return (6786 - flushes); }
                case 89466:             { return (6787 - flushes); }
                case 441595:    { return (6788 - flushes); }
                case 264957:    { return (6789 - flushes); }
                case 176638:    { return (6790 - flushes); }
                case 189255:    { return (6791 - flushes); }
                case 126170:    { return (6792 - flushes); }
                case 75702:             { return (6793 - flushes); }
                case 120435:    { return (6794 - flushes); }
                case 80290:             { return (6795 - flushes); }
                case 48174:             { return (6796 - flushes); }
                case 34410:             { return (6797 - flushes); }
                case 7971317:   { return (6798 - flushes); }
                case 6095713:   { return (6799 - flushes); }
                case 5157911:   { return (6800 - flushes); }
                case 3282307:   { return (6801 - flushes); }
                case 2344505:   { return (6802 - flushes); }
                case 1406703:   { return (6803 - flushes); }
                case 937802:    { return (6804 - flushes); }
                case 5454059:   { return (6805 - flushes); }
                case 4614973:   { return (6806 - flushes); }
                case 2936801:   { return (6807 - flushes); }
                case 2097715:   { return (6808 - flushes); }
                case 1258629:   { return (6809 - flushes); }
                case 839086:    { return (6810 - flushes); }
                case 3529097:   { return (6811 - flushes); }
                case 2245789:   { return (6812 - flushes); }
                case 1604135:   { return (6813 - flushes); }
                case 962481:    { return (6814 - flushes); }
                case 641654:    { return (6815 - flushes); }
                case 1900283:   { return (6816 - flushes); }
                case 1357345:   { return (6817 - flushes); }
                case 814407:    { return (6818 - flushes); }
                case 542938:    { return (6819 - flushes); }
                case 863765:    { return (6820 - flushes); }
                case 518259:    { return (6821 - flushes); }
                case 345506:    { return (6822 - flushes); }
                case 370185:    { return (6823 - flushes); }
                case 246790:    { return (6824 - flushes); }
                case 148074:    { return (6825 - flushes); }
                case 4505527:   { return (6826 - flushes); }
                case 3812369:   { return (6827 - flushes); }
                case 2426053:   { return (6828 - flushes); }
                case 1732895:   { return (6829 - flushes); }
                case 1039737:   { return (6830 - flushes); }
                case 693158:    { return (6831 - flushes); }
                case 2915341:   { return (6832 - flushes); }
                case 1855217:   { return (6833 - flushes); }
                case 1325155:   { return (6834 - flushes); }
                case 795093:    { return (6835 - flushes); }
                case 530062:    { return (6836 - flushes); }
                case 1569799:   { return (6837 - flushes); }
                case 1121285:   { return (6838 - flushes); }
                case 672771:    { return (6839 - flushes); }
                case 448514:    { return (6840 - flushes); }
                case 713545:    { return (6841 - flushes); }
                case 428127:    { return (6842 - flushes); }
                case 285418:    { return (6843 - flushes); }
                case 305805:    { return (6844 - flushes); }
                case 203870:    { return (6845 - flushes); }
                case 122322:    { return (6846 - flushes); }
                case 2608463:   { return (6847 - flushes); }
                case 1659931:   { return (6848 - flushes); }
                case 1185665:   { return (6849 - flushes); }
                case 711399:    { return (6850 - flushes); }
                case 474266:    { return (6851 - flushes); }
                case 1404557:   { return (6852 - flushes); }
                case 1003255:   { return (6853 - flushes); }
                case 601953:    { return (6854 - flushes); }
                case 401302:    { return (6855 - flushes); }
                case 638435:    { return (6856 - flushes); }
                case 383061:    { return (6857 - flushes); }
                case 255374:    { return (6858 - flushes); }
                case 273615:    { return (6859 - flushes); }
                case 182410:    { return (6860 - flushes); }
                case 109446:    { return (6861 - flushes); }
                case 1074073:   { return (6862 - flushes); }
                case 767195:    { return (6863 - flushes); }
                case 460317:    { return (6864 - flushes); }
                case 306878:    { return (6865 - flushes); }
                case 488215:    { return (6866 - flushes); }
                case 292929:    { return (6867 - flushes); }
                case 195286:    { return (6868 - flushes); }
                case 209235:    { return (6869 - flushes); }
                case 139490:    { return (6870 - flushes); }
                case 83694:             { return (6871 - flushes); }
                case 413105:    { return (6872 - flushes); }
                case 247863:    { return (6873 - flushes); }
                case 165242:    { return (6874 - flushes); }
                case 177045:    { return (6875 - flushes); }
                case 118030:    { return (6876 - flushes); }
                case 70818:             { return (6877 - flushes); }
                case 112665:    { return (6878 - flushes); }
                case 75110:             { return (6879 - flushes); }
                case 45066:             { return (6880 - flushes); }
                case 32190:             { return (6881 - flushes); }
                case 3573349:   { return (6882 - flushes); }
                case 3023603:   { return (6883 - flushes); }
                case 1924111:   { return (6884 - flushes); }
                case 1374365:   { return (6885 - flushes); }
                case 824619:    { return (6886 - flushes); }
                case 549746:    { return (6887 - flushes); }
                case 2312167:   { return (6888 - flushes); }
                case 1471379:   { return (6889 - flushes); }
                case 1050985:   { return (6890 - flushes); }
                case 630591:    { return (6891 - flushes); }
                case 420394:    { return (6892 - flushes); }
                case 1245013:   { return (6893 - flushes); }
                case 889295:    { return (6894 - flushes); }
                case 533577:    { return (6895 - flushes); }
                case 355718:    { return (6896 - flushes); }
                case 565915:    { return (6897 - flushes); }
                case 339549:    { return (6898 - flushes); }
                case 226366:    { return (6899 - flushes); }
                case 242535:    { return (6900 - flushes); }
                case 161690:    { return (6901 - flushes); }
                case 97014:             { return (6902 - flushes); }
                case 2068781:   { return (6903 - flushes); }
                case 1316497:   { return (6904 - flushes); }
                case 940355:    { return (6905 - flushes); }
                case 564213:    { return (6906 - flushes); }
                case 376142:    { return (6907 - flushes); }
                case 1113959:   { return (6908 - flushes); }
                case 795685:    { return (6909 - flushes); }
                case 477411:    { return (6910 - flushes); }
                case 318274:    { return (6911 - flushes); }
                case 506345:    { return (6912 - flushes); }
                case 303807:    { return (6913 - flushes); }
                case 202538:    { return (6914 - flushes); }
                case 217005:    { return (6915 - flushes); }
                case 144670:    { return (6916 - flushes); }
                case 86802:             { return (6917 - flushes); }
                case 851851:    { return (6918 - flushes); }
                case 608465:    { return (6919 - flushes); }
                case 365079:    { return (6920 - flushes); }
                case 243386:    { return (6921 - flushes); }
                case 387205:    { return (6922 - flushes); }
                case 232323:    { return (6923 - flushes); }
                case 154882:    { return (6924 - flushes); }
                case 165945:    { return (6925 - flushes); }
                case 110630:    { return (6926 - flushes); }
                case 66378:             { return (6927 - flushes); }
                case 327635:    { return (6928 - flushes); }
                case 196581:    { return (6929 - flushes); }
                case 131054:    { return (6930 - flushes); }
                case 140415:    { return (6931 - flushes); }
                case 93610:             { return (6932 - flushes); }
                case 56166:             { return (6933 - flushes); }
                case 89355:             { return (6934 - flushes); }
                case 59570:             { return (6935 - flushes); }
                case 35742:             { return (6936 - flushes); }
                case 25530:             { return (6937 - flushes); }
                case 1708993:   { return (6938 - flushes); }
                case 1087541:   { return (6939 - flushes); }
                case 776815:    { return (6940 - flushes); }
                case 466089:    { return (6941 - flushes); }
                case 310726:    { return (6942 - flushes); }
                case 920227:    { return (6943 - flushes); }
                case 657305:    { return (6944 - flushes); }
                case 394383:    { return (6945 - flushes); }
                case 262922:    { return (6946 - flushes); }
                case 418285:    { return (6947 - flushes); }
                case 250971:    { return (6948 - flushes); }
                case 167314:    { return (6949 - flushes); }
                case 179265:    { return (6950 - flushes); }
                case 119510:    { return (6951 - flushes); }
                case 71706:             { return (6952 - flushes); }
                case 703703:    { return (6953 - flushes); }
                case 502645:    { return (6954 - flushes); }
                case 301587:    { return (6955 - flushes); }
                case 201058:    { return (6956 - flushes); }
                case 319865:    { return (6957 - flushes); }
                case 191919:    { return (6958 - flushes); }
                case 127946:    { return (6959 - flushes); }
                case 137085:    { return (6960 - flushes); }
                case 91390:             { return (6961 - flushes); }
                case 54834:             { return (6962 - flushes); }
                case 270655:    { return (6963 - flushes); }
                case 162393:    { return (6964 - flushes); }
                case 108262:    { return (6965 - flushes); }
                case 115995:    { return (6966 - flushes); }
                case 77330:             { return (6967 - flushes); }
                case 46398:             { return (6968 - flushes); }
                case 73815:             { return (6969 - flushes); }
                case 49210:             { return (6970 - flushes); }
                case 29526:             { return (6971 - flushes); }
                case 21090:             { return (6972 - flushes); }
                case 629629:    { return (6973 - flushes); }
                case 449735:    { return (6974 - flushes); }
                case 269841:    { return (6975 - flushes); }
                case 179894:    { return (6976 - flushes); }
                case 286195:    { return (6977 - flushes); }
                case 171717:    { return (6978 - flushes); }
                case 114478:    { return (6979 - flushes); }
                case 122655:    { return (6980 - flushes); }
                case 81770:             { return (6981 - flushes); }
                case 49062:             { return (6982 - flushes); }
                case 242165:    { return (6983 - flushes); }
                case 145299:    { return (6984 - flushes); }
                case 96866:             { return (6985 - flushes); }
                case 103785:    { return (6986 - flushes); }
                case 69190:             { return (6987 - flushes); }
                case 41514:             { return (6988 - flushes); }
                case 66045:             { return (6989 - flushes); }
                case 44030:             { return (6990 - flushes); }
                case 26418:             { return (6991 - flushes); }
                case 18870:             { return (6992 - flushes); }
                case 185185:    { return (6993 - flushes); }
                case 111111:    { return (6994 - flushes); }
                case 74074:             { return (6995 - flushes); }
                case 79365:             { return (6996 - flushes); }
                case 52910:             { return (6997 - flushes); }
                case 31746:             { return (6998 - flushes); }
                case 50505:             { return (6999 - flushes); }
                case 33670:             { return (7000 - flushes); }
                case 20202:             { return (7001 - flushes); }
                case 14430:             { return (7002 - flushes); }
                case 42735:             { return (7003 - flushes); }
                case 28490:             { return (7004 - flushes); }
                case 17094:             { return (7005 - flushes); }
                case 12210:             { return (7006 - flushes); }
                case 7770:              { return (7007 - flushes); }
                case 5107219:   { return (7008 - flushes); } // Queen - High
                case 4321493:   { return (7009 - flushes); }
                case 2750041:   { return (7010 - flushes); }
                case 1964315:   { return (7011 - flushes); }
                case 1178589:   { return (7012 - flushes); }
                case 785726:    { return (7013 - flushes); }
                case 4569617:   { return (7014 - flushes); }
                case 3866599:   { return (7015 - flushes); }
                case 2460563:   { return (7016 - flushes); }
                case 1757545:   { return (7017 - flushes); }
                case 1054527:   { return (7018 - flushes); }
                case 703018:    { return (7019 - flushes); }
                case 2956811:   { return (7020 - flushes); }
                case 1881607:   { return (7021 - flushes); }
                case 1344005:   { return (7022 - flushes); }
                case 806403:    { return (7023 - flushes); }
                case 537602:    { return (7024 - flushes); }
                case 1592129:   { return (7025 - flushes); }
                case 1137235:   { return (7026 - flushes); }
                case 682341:    { return (7027 - flushes); }
                case 454894:    { return (7028 - flushes); }
                case 723695:    { return (7029 - flushes); }
                case 434217:    { return (7030 - flushes); }
                case 289478:    { return (7031 - flushes); }
                case 310155:    { return (7032 - flushes); }
                case 206770:    { return (7033 - flushes); }
                case 124062:    { return (7034 - flushes); }
                case 3774901:   { return (7035 - flushes); }
                case 3194147:   { return (7036 - flushes); }
                case 2032639:   { return (7037 - flushes); }
                case 1451885:   { return (7038 - flushes); }
                case 871131:    { return (7039 - flushes); }
                case 580754:    { return (7040 - flushes); }
                case 2442583:   { return (7041 - flushes); }
                case 1554371:   { return (7042 - flushes); }
                case 1110265:   { return (7043 - flushes); }
                case 666159:    { return (7044 - flushes); }
                case 444106:    { return (7045 - flushes); }
                case 1315237:   { return (7046 - flushes); }
                case 939455:    { return (7047 - flushes); }
                case 563673:    { return (7048 - flushes); }
                case 375782:    { return (7049 - flushes); }
                case 597835:    { return (7050 - flushes); }
                case 358701:    { return (7051 - flushes); }
                case 239134:    { return (7052 - flushes); }
                case 256215:    { return (7053 - flushes); }
                case 170810:    { return (7054 - flushes); }
                case 102486:    { return (7055 - flushes); }
                case 2185469:   { return (7056 - flushes); }
                case 1390753:   { return (7057 - flushes); }
                case 993395:    { return (7058 - flushes); }
                case 596037:    { return (7059 - flushes); }
                case 397358:    { return (7060 - flushes); }
                case 1176791:   { return (7061 - flushes); }
                case 840565:    { return (7062 - flushes); }
                case 504339:    { return (7063 - flushes); }
                case 336226:    { return (7064 - flushes); }
                case 534905:    { return (7065 - flushes); }
                case 320943:    { return (7066 - flushes); }
                case 213962:    { return (7067 - flushes); }
                case 229245:    { return (7068 - flushes); }
                case 152830:    { return (7069 - flushes); }
                case 91698:             { return (7070 - flushes); }
                case 899899:    { return (7071 - flushes); }
                case 642785:    { return (7072 - flushes); }
                case 385671:    { return (7073 - flushes); }
                case 257114:    { return (7074 - flushes); }
                case 409045:    { return (7075 - flushes); }
                case 245427:    { return (7076 - flushes); }
                case 163618:    { return (7077 - flushes); }
                case 175305:    { return (7078 - flushes); }
                case 116870:    { return (7079 - flushes); }
                case 70122:             { return (7080 - flushes); }
                case 346115:    { return (7081 - flushes); }
                case 207669:    { return (7082 - flushes); }
                case 138446:    { return (7083 - flushes); }
                case 148335:    { return (7084 - flushes); }
                case 98890:             { return (7085 - flushes); }
                case 59334:             { return (7086 - flushes); }
                case 94395:             { return (7087 - flushes); }
                case 62930:             { return (7088 - flushes); }
                case 37758:             { return (7089 - flushes); }
                case 26970:             { return (7090 - flushes); }
                case 2993887:   { return (7091 - flushes); }
                case 2533289:   { return (7092 - flushes); }
                case 1612093:   { return (7093 - flushes); }
                case 1151495:   { return (7094 - flushes); }
                case 690897:    { return (7095 - flushes); }
                case 460598:    { return (7096 - flushes); }
                case 1937221:   { return (7097 - flushes); }
                case 1232777:   { return (7098 - flushes); }
                case 880555:    { return (7099 - flushes); }
                case 528333:    { return (7100 - flushes); }
                case 352222:    { return (7101 - flushes); }
                case 1043119:   { return (7102 - flushes); }
                case 745085:    { return (7103 - flushes); }
                case 447051:    { return (7104 - flushes); }
                case 298034:    { return (7105 - flushes); }
                case 474145:    { return (7106 - flushes); }
                case 284487:    { return (7107 - flushes); }
                case 189658:    { return (7108 - flushes); }
                case 203205:    { return (7109 - flushes); }
                case 135470:    { return (7110 - flushes); }
                case 81282:             { return (7111 - flushes); }
                case 1733303:   { return (7112 - flushes); }
                case 1103011:   { return (7113 - flushes); }
                case 787865:    { return (7114 - flushes); }
                case 472719:    { return (7115 - flushes); }
                case 315146:    { return (7116 - flushes); }
                case 933317:    { return (7117 - flushes); }
                case 666655:    { return (7118 - flushes); }
                case 399993:    { return (7119 - flushes); }
                case 266662:    { return (7120 - flushes); }
                case 424235:    { return (7121 - flushes); }
                case 254541:    { return (7122 - flushes); }
                case 169694:    { return (7123 - flushes); }
                case 181815:    { return (7124 - flushes); }
                case 121210:    { return (7125 - flushes); }
                case 72726:             { return (7126 - flushes); }
                case 713713:    { return (7127 - flushes); }
                case 509795:    { return (7128 - flushes); }
                case 305877:    { return (7129 - flushes); }
                case 203918:    { return (7130 - flushes); }
                case 324415:    { return (7131 - flushes); }
                case 194649:    { return (7132 - flushes); }
                case 129766:    { return (7133 - flushes); }
                case 139035:    { return (7134 - flushes); }
                case 92690:             { return (7135 - flushes); }
                case 55614:             { return (7136 - flushes); }
                case 274505:    { return (7137 - flushes); }
                case 164703:    { return (7138 - flushes); }
                case 109802:    { return (7139 - flushes); }
                case 117645:    { return (7140 - flushes); }
                case 78430:             { return (7141 - flushes); }
                case 47058:             { return (7142 - flushes); }
                case 74865:             { return (7143 - flushes); }
                case 49910:             { return (7144 - flushes); }
                case 29946:             { return (7145 - flushes); }
                case 21390:             { return (7146 - flushes); }
                case 1431859:   { return (7147 - flushes); }
                case 911183:    { return (7148 - flushes); }
                case 650845:    { return (7149 - flushes); }
                case 390507:    { return (7150 - flushes); }
                case 260338:    { return (7151 - flushes); }
                case 771001:    { return (7152 - flushes); }
                case 550715:    { return (7153 - flushes); }
                case 330429:    { return (7154 - flushes); }
                case 220286:    { return (7155 - flushes); }
                case 350455:    { return (7156 - flushes); }
                case 210273:    { return (7157 - flushes); }
                case 140182:    { return (7158 - flushes); }
                case 150195:    { return (7159 - flushes); }
                case 100130:    { return (7160 - flushes); }
                case 60078:             { return (7161 - flushes); }
                case 589589:    { return (7162 - flushes); }
                case 421135:    { return (7163 - flushes); }
                case 252681:    { return (7164 - flushes); }
                case 168454:    { return (7165 - flushes); }
                case 267995:    { return (7166 - flushes); }
                case 160797:    { return (7167 - flushes); }
                case 107198:    { return (7168 - flushes); }
                case 114855:    { return (7169 - flushes); }
                case 76570:             { return (7170 - flushes); }
                case 45942:             { return (7171 - flushes); }
                case 226765:    { return (7172 - flushes); }
                case 136059:    { return (7173 - flushes); }
                case 90706:             { return (7174 - flushes); }
                case 97185:             { return (7175 - flushes); }
                case 64790:             { return (7176 - flushes); }
                case 38874:             { return (7177 - flushes); }
                case 61845:             { return (7178 - flushes); }
                case 41230:             { return (7179 - flushes); }
                case 24738:             { return (7180 - flushes); }
                case 17670:             { return (7181 - flushes); }
                case 527527:    { return (7182 - flushes); }
                case 376805:    { return (7183 - flushes); }
                case 226083:    { return (7184 - flushes); }
                case 150722:    { return (7185 - flushes); }
                case 239785:    { return (7186 - flushes); }
                case 143871:    { return (7187 - flushes); }
                case 95914:             { return (7188 - flushes); }
                case 102765:    { return (7189 - flushes); }
                case 68510:             { return (7190 - flushes); }
                case 41106:             { return (7191 - flushes); }
                case 202895:    { return (7192 - flushes); }
                case 121737:    { return (7193 - flushes); }
                case 81158:             { return (7194 - flushes); }
                case 86955:             { return (7195 - flushes); }
                case 57970:             { return (7196 - flushes); }
                case 34782:             { return (7197 - flushes); }
                case 55335:             { return (7198 - flushes); }
                case 36890:             { return (7199 - flushes); }
                case 22134:             { return (7200 - flushes); }
                case 15810:             { return (7201 - flushes); }
                case 155155:    { return (7202 - flushes); }
                case 93093:             { return (7203 - flushes); }
                case 62062:             { return (7204 - flushes); }
                case 66495:             { return (7205 - flushes); }
                case 44330:             { return (7206 - flushes); }
                case 26598:             { return (7207 - flushes); }
                case 42315:             { return (7208 - flushes); }
                case 28210:             { return (7209 - flushes); }
                case 16926:             { return (7210 - flushes); }
                case 12090:             { return (7211 - flushes); }
                case 35805:             { return (7212 - flushes); }
                case 23870:             { return (7213 - flushes); }
                case 14322:             { return (7214 - flushes); }
                case 10230:             { return (7215 - flushes); }
                case 6510:              { return (7216 - flushes); }
                case 2369851:   { return (7217 - flushes); } // Jack - High
                case 1508087:   { return (7218 - flushes); }
                case 1077205:   { return (7219 - flushes); }
                case 646323:    { return (7220 - flushes); }
                case 430882:    { return (7221 - flushes); }
                case 1812239:   { return (7222 - flushes); }
                case 1153243:   { return (7223 - flushes); }
                case 823745:    { return (7224 - flushes); }
                case 494247:    { return (7225 - flushes); }
                case 329498:    { return (7226 - flushes); }
                case 975821:    { return (7227 - flushes); }
                case 697015:    { return (7228 - flushes); }
                case 418209:    { return (7229 - flushes); }
                case 278806:    { return (7230 - flushes); }
                case 443555:    { return (7231 - flushes); }
                case 266133:    { return (7232 - flushes); }
                case 177422:    { return (7233 - flushes); }
                case 190095:    { return (7234 - flushes); }
                case 126730:    { return (7235 - flushes); }
                case 76038:             { return (7236 - flushes); }
                case 1621477:   { return (7237 - flushes); }
                case 1031849:   { return (7238 - flushes); }
                case 737035:    { return (7239 - flushes); }
                case 442221:    { return (7240 - flushes); }
                case 294814:    { return (7241 - flushes); }
                case 873103:    { return (7242 - flushes); }
                case 623645:    { return (7243 - flushes); }
                case 374187:    { return (7244 - flushes); }
                case 249458:    { return (7245 - flushes); }
                case 396865:    { return (7246 - flushes); }
                case 238119:    { return (7247 - flushes); }
                case 158746:    { return (7248 - flushes); }
                case 170085:    { return (7249 - flushes); }
                case 113390:    { return (7250 - flushes); }
                case 68034:             { return (7251 - flushes); }
                case 667667:    { return (7252 - flushes); }
                case 476905:    { return (7253 - flushes); }
                case 286143:    { return (7254 - flushes); }
                case 190762:    { return (7255 - flushes); }
                case 303485:    { return (7256 - flushes); }
                case 182091:    { return (7257 - flushes); }
                case 121394:    { return (7258 - flushes); }
                case 130065:    { return (7259 - flushes); }
                case 86710:             { return (7260 - flushes); }
                case 52026:             { return (7261 - flushes); }
                case 256795:    { return (7262 - flushes); }
                case 154077:    { return (7263 - flushes); }
                case 102718:    { return (7264 - flushes); }
                case 110055:    { return (7265 - flushes); }
                case 73370:             { return (7266 - flushes); }
                case 44022:             { return (7267 - flushes); }
                case 70035:             { return (7268 - flushes); }
                case 46690:             { return (7269 - flushes); }
                case 28014:             { return (7270 - flushes); }
                case 20010:             { return (7271 - flushes); }
                case 1339481:   { return (7272 - flushes); }
                case 852397:    { return (7273 - flushes); }
                case 608855:    { return (7274 - flushes); }
                case 365313:    { return (7275 - flushes); }
                case 243542:    { return (7276 - flushes); }
                case 721259:    { return (7277 - flushes); }
                case 515185:    { return (7278 - flushes); }
                case 309111:    { return (7279 - flushes); }
                case 206074:    { return (7280 - flushes); }
                case 327845:    { return (7281 - flushes); }
                case 196707:    { return (7282 - flushes); }
                case 131138:    { return (7283 - flushes); }
                case 140505:    { return (7284 - flushes); }
                case 93670:             { return (7285 - flushes); }
                case 56202:             { return (7286 - flushes); }
                case 551551:    { return (7287 - flushes); }
                case 393965:    { return (7288 - flushes); }
                case 236379:    { return (7289 - flushes); }
                case 157586:    { return (7290 - flushes); }
                case 250705:    { return (7291 - flushes); }
                case 150423:    { return (7292 - flushes); }
                case 100282:    { return (7293 - flushes); }
                case 107445:    { return (7294 - flushes); }
                case 71630:             { return (7295 - flushes); }
                case 42978:             { return (7296 - flushes); }
                case 212135:    { return (7297 - flushes); }
                case 127281:    { return (7298 - flushes); }
                case 84854:             { return (7299 - flushes); }
                case 90915:             { return (7300 - flushes); }
                case 60610:             { return (7301 - flushes); }
                case 36366:             { return (7302 - flushes); }
                case 57855:             { return (7303 - flushes); }
                case 38570:             { return (7304 - flushes); }
                case 23142:             { return (7305 - flushes); }
                case 16530:             { return (7306 - flushes); }
                case 493493:    { return (7307 - flushes); }
                case 352495:    { return (7308 - flushes); }
                case 211497:    { return (7309 - flushes); }
                case 140998:    { return (7310 - flushes); }
                case 224315:    { return (7311 - flushes); }
                case 134589:    { return (7312 - flushes); }
                case 89726:             { return (7313 - flushes); }
                case 96135:             { return (7314 - flushes); }
                case 64090:             { return (7315 - flushes); }
                case 38454:             { return (7316 - flushes); }
                case 189805:    { return (7317 - flushes); }
                case 113883:    { return (7318 - flushes); }
                case 75922:             { return (7319 - flushes); }
                case 81345:             { return (7320 - flushes); }
                case 54230:             { return (7321 - flushes); }
                case 32538:             { return (7322 - flushes); }
                case 51765:             { return (7323 - flushes); }
                case 34510:             { return (7324 - flushes); }
                case 20706:             { return (7325 - flushes); }
                case 14790:             { return (7326 - flushes); }
                case 145145:    { return (7327 - flushes); }
                case 87087:             { return (7328 - flushes); }
                case 58058:             { return (7329 - flushes); }
                case 62205:             { return (7330 - flushes); }
                case 41470:             { return (7331 - flushes); }
                case 24882:             { return (7332 - flushes); }
                case 39585:             { return (7333 - flushes); }
                case 26390:             { return (7334 - flushes); }
                case 15834:             { return (7335 - flushes); }
                case 11310:             { return (7336 - flushes); }
                case 33495:             { return (7337 - flushes); }
                case 22330:             { return (7338 - flushes); }
                case 13398:             { return (7339 - flushes); }
                case 9570:              { return (7340 - flushes); }
                case 6090:              { return (7341 - flushes); }
                case 676039:    { return (7342 - flushes); } // Ten - High
                case 482885:    { return (7343 - flushes); }
                case 289731:    { return (7344 - flushes); }
                case 193154:    { return (7345 - flushes); }
                case 572033:    { return (7346 - flushes); }
                case 408595:    { return (7347 - flushes); }
                case 245157:    { return (7348 - flushes); }
                case 163438:    { return (7349 - flushes); }
                case 260015:    { return (7350 - flushes); }
                case 156009:    { return (7351 - flushes); }
                case 104006:    { return (7352 - flushes); }
                case 111435:    { return (7353 - flushes); }
                case 74290:             { return (7354 - flushes); }
                case 44574:             { return (7355 - flushes); }
                case 437437:    { return (7356 - flushes); }
                case 312455:    { return (7357 - flushes); }
                case 187473:    { return (7358 - flushes); }
                case 124982:    { return (7359 - flushes); }
                case 198835:    { return (7360 - flushes); }
                case 119301:    { return (7361 - flushes); }
                case 79534:             { return (7362 - flushes); }
                case 85215:             { return (7363 - flushes); }
                case 56810:             { return (7364 - flushes); }
                case 34086:             { return (7365 - flushes); }
                case 168245:    { return (7366 - flushes); }
                case 100947:    { return (7367 - flushes); }
                case 67298:             { return (7368 - flushes); }
                case 72105:             { return (7369 - flushes); }
                case 48070:             { return (7370 - flushes); }
                case 28842:             { return (7371 - flushes); }
                case 45885:             { return (7372 - flushes); }
                case 30590:             { return (7373 - flushes); }
                case 18354:             { return (7374 - flushes); }
                case 13110:             { return (7375 - flushes); }
                case 391391:    { return (7376 - flushes); }
                case 279565:    { return (7377 - flushes); }
                case 167739:    { return (7378 - flushes); }
                case 111826:    { return (7379 - flushes); }
                case 177905:    { return (7380 - flushes); }
                case 106743:    { return (7381 - flushes); }
                case 71162:             { return (7382 - flushes); }
                case 76245:             { return (7383 - flushes); }
                case 50830:             { return (7384 - flushes); }
                case 30498:             { return (7385 - flushes); }
                case 150535:    { return (7386 - flushes); }
                case 90321:             { return (7387 - flushes); }
                case 60214:             { return (7388 - flushes); }
                case 64515:             { return (7389 - flushes); }
                case 43010:             { return (7390 - flushes); }
                case 25806:             { return (7391 - flushes); }
                case 41055:             { return (7392 - flushes); }
                case 27370:             { return (7393 - flushes); }
                case 16422:             { return (7394 - flushes); }
                case 11730:             { return (7395 - flushes); }
                case 115115:    { return (7396 - flushes); }
                case 69069:             { return (7397 - flushes); }
                case 46046:             { return (7398 - flushes); }
                case 49335:             { return (7399 - flushes); }
                case 32890:             { return (7400 - flushes); }
                case 19734:             { return (7401 - flushes); }
                case 31395:             { return (7402 - flushes); }
                case 20930:             { return (7403 - flushes); }
                case 12558:             { return (7404 - flushes); }
                case 8970:              { return (7405 - flushes); }
                case 26565:             { return (7406 - flushes); }
                case 17710:             { return (7407 - flushes); }
                case 10626:             { return (7408 - flushes); }
                case 7590:              { return (7409 - flushes); }
                case 4830:              { return (7410 - flushes); }
                case 230945:    { return (7411 - flushes); } // Nine - High
                case 138567:    { return (7412 - flushes); }
                case 92378:             { return (7413 - flushes); }
                case 146965:    { return (7414 - flushes); }
                case 88179:             { return (7415 - flushes); }
                case 58786:             { return (7416 - flushes); }
                case 62985:             { return (7417 - flushes); }
                case 41990:             { return (7418 - flushes); }
                case 25194:             { return (7419 - flushes); }
                case 124355:    { return (7420 - flushes); }
                case 74613:             { return (7421 - flushes); }
                case 49742:             { return (7422 - flushes); }
                case 53295:             { return (7423 - flushes); }
                case 35530:             { return (7424 - flushes); }
                case 21318:             { return (7425 - flushes); }
                case 33915:             { return (7426 - flushes); }
                case 22610:             { return (7427 - flushes); }
                case 13566:             { return (7428 - flushes); }
                case 9690:              { return (7429 - flushes); }
                case 95095:             { return (7430 - flushes); }
                case 57057:             { return (7431 - flushes); }
                case 38038:             { return (7432 - flushes); }
                case 40755:             { return (7433 - flushes); }
                case 27170:             { return (7434 - flushes); }
                case 16302:             { return (7435 - flushes); }
                case 25935:             { return (7436 - flushes); }
                case 17290:             { return (7437 - flushes); }
                case 10374:             { return (7438 - flushes); }
                case 7410:              { return (7439 - flushes); }
                case 21945:             { return (7440 - flushes); }
                case 14630:             { return (7441 - flushes); }
                case 8778:              { return (7442 - flushes); }
                case 6270:              { return (7443 - flushes); }
                case 3990:              { return (7444 - flushes); }
                case 51051:             { return (7445 - flushes); } // Eight - High
                case 34034:             { return (7446 - flushes); }
                case 36465:             { return (7447 - flushes); }
                case 24310:             { return (7448 - flushes); }
                case 14586:             { return (7449 - flushes); }
                case 23205:             { return (7450 - flushes); }
                case 15470:             { return (7451 - flushes); }
                case 9282:              { return (7452 - flushes); }
                case 6630:              { return (7453 - flushes); }
                case 19635:             { return (7454 - flushes); }
                case 13090:             { return (7455 - flushes); }
                case 7854:              { return (7456 - flushes); }
                case 5610:              { return (7457 - flushes); }
                case 3570:              { return (7458 - flushes); }
                case 10010:             { return (7459 - flushes); } // Seven - High
                case 6006:              { return (7460 - flushes); }
                case 4290:              { return (7461 - flushes); }
                case 2730:              { return (7462 - flushes); }
        }
        return -1;
}

stock
        rankname(rank, &first, &second)
{
        new
                returnstr[32];
        returnstr = "None";
        if(rank > 7458) { first = SEVEN; returnstr = "Seven-High"; }
        else if(rank > 7444) { first = EIGHT; returnstr = "Eight-High"; }
        else if(rank > 7410) { first = NINE; returnstr = "Nine-High"; }
        else if(rank > 7341) { first = TEN; returnstr = "Ten-High"; }
        else if(rank > 7216) { first = JACK; returnstr = "Jack-High"; }
        else if(rank > 7007) { first = QUEEN; returnstr = "Queen-High"; }
        else if(rank > 6678) { first = KING; returnstr = "King-High"; }
        else if(rank > 6185) { first = ACE; returnstr = "Ace-High"; }
        else if(rank > 5965) { first = TWO; returnstr = "Pair of Deuces"; }
        else if(rank > 5745) { first = THREE; returnstr = "Pair of Treys"; }
        else if(rank > 5525) { first = FOUR; returnstr = "Pair of Fours"; }
        else if(rank > 5305) { first = FIVE; returnstr = "Pair of Fives"; }
        else if(rank > 5085) { first = SIX; returnstr = "Pair of Sixes"; }
        else if(rank > 4865) { first = SEVEN; returnstr = "Pair of Sevens"; }
        else if(rank > 4645) { first = EIGHT; returnstr = "Pair of Eights"; }
        else if(rank > 4425) { first = NINE; returnstr = "Pair of Nines"; }
        else if(rank > 4205) { first = TEN; returnstr = "Pair of Tens"; }
        else if(rank > 3985) { first = JACK; returnstr = "Pair of Jacks"; }
        else if(rank > 3765) { first = QUEEN; returnstr = "Pair of Queens"; }
        else if(rank > 3545) { first = KING; returnstr = "Pair of Kings"; }
        else if(rank > 3325) { first = ACE; returnstr = "Pair of Aces"; }
        else if(rank > 3314) { first = THREE; second = TWO; returnstr = "Treys and Deuces"; }
        else if(rank > 3303) { first = FOUR; second = TWO; returnstr = "Fours and Deuces"; }
        else if(rank > 3292) { first = FOUR; second = THREE; returnstr = "Fours and Treys"; }
        else if(rank > 3281) { first = FIVE; second = TWO; returnstr = "Fives and Deuces"; }
        else if(rank > 3270) { first = FIVE; second = THREE; returnstr = "Fives and Treys"; }
        else if(rank > 3259) { first = FIVE; second = FOUR; returnstr = "Fives and Fours"; }
        else if(rank > 3248) { first = SIX; second = TWO; returnstr = "Sixes and Deuces"; }
        else if(rank > 3237) { first = SIX; second = THREE; returnstr = "Sixes and Treys"; }
        else if(rank > 3226) { first = SIX; second = FOUR; returnstr = "Sixes and Fours"; }
        else if(rank > 3215) { first = SIX; second = FIVE; returnstr = "Sixes and Fives"; }
        else if(rank > 3204) { first = SEVEN; second = TWO; returnstr = "Sevens and Deuces"; }
        else if(rank > 3193) { first = SEVEN; second = THREE; returnstr = "Sevens and Treys"; }
        else if(rank > 3182) { first = SEVEN; second = FOUR; returnstr = "Sevens and Fours"; }
        else if(rank > 3171) { first = SEVEN; second = FIVE; returnstr = "Sevens and Fives"; }
        else if(rank > 3160) { first = SEVEN; second = SIX; returnstr = "Sevens and Sixes"; }
        else if(rank > 3149) { first = EIGHT; second = TWO; returnstr = "Eights and Deuces"; }
        else if(rank > 3138) { first = EIGHT; second = THREE; returnstr = "Eights and Treys"; }
        else if(rank > 3127) { first = EIGHT; second = FOUR; returnstr = "Eights and Fours"; }
        else if(rank > 3116) { first = EIGHT; second = FIVE; returnstr = "Eights and Fives"; }
        else if(rank > 3105) { first = EIGHT; second = SIX; returnstr = "Eights and Sixes"; }
        else if(rank > 3094) { first = EIGHT; second = SEVEN; returnstr = "Eights and Sevens"; }
        else if(rank > 3083) { first = NINE; second = TWO; returnstr = "Nines and Deuces"; }
        else if(rank > 3072) { first = NINE; second = THREE; returnstr = "Nines and Treys"; }
        else if(rank > 3061) { first = NINE; second = FOUR; returnstr = "Nines and Fours"; }
        else if(rank > 3050) { first = NINE; second = FIVE; returnstr = "Nines and Fives"; }
        else if(rank > 3039) { first = NINE; second = SIX; returnstr = "Nines and Sixes"; }
        else if(rank > 3028) { first = NINE; second = SEVEN; returnstr = "Nines and Sevens"; }
        else if(rank > 3017) { first = NINE; second = EIGHT; returnstr = "Nines and Eights"; }
        else if(rank > 3006) { first = TEN; second = TWO; returnstr = "Tens and Deuces"; }
        else if(rank > 2995) { first = TEN; second = THREE; returnstr = "Tens and Treys"; }
        else if(rank > 2984) { first = TEN; second = FOUR; returnstr = "Tens and Fours"; }
        else if(rank > 2973) { first = TEN; second = FIVE; returnstr = "Tens and Fives"; }
        else if(rank > 2962) { first = TEN; second = SIX; returnstr = "Tens and Sixes"; }
        else if(rank > 2951) { first = TEN; second = SEVEN; returnstr = "Tens and Sevens"; }
        else if(rank > 2940) { first = TEN; second = EIGHT; returnstr = "Tens and Eights"; }
        else if(rank > 2929) { first = TEN; second = NINE; returnstr = "Tens and Nines"; }
        else if(rank > 2918) { first = JACK; second = TWO; returnstr = "Jacks and Deuces"; }
        else if(rank > 2907) { first = JACK; second = THREE; returnstr = "Jacks and Treys"; }
        else if(rank > 2896) { first = JACK; second = FOUR; returnstr = "Jacks and Fours"; }
        else if(rank > 2885) { first = JACK; second = FIVE; returnstr = "Jacks and Fives"; }
        else if(rank > 2874) { first = JACK; second = SIX; returnstr = "Jacks and Sixes"; }
        else if(rank > 2863) { first = JACK; second = SEVEN; returnstr = "Jacks and Sevens"; }
        else if(rank > 2852) { first = JACK; second = EIGHT; returnstr = "Jacks and Eights"; }
        else if(rank > 2841) { first = JACK; second = NINE; returnstr = "Jacks and Nines"; }
        else if(rank > 2830) { first = JACK; second = TEN; returnstr = "Jacks and Tens"; }
        else if(rank > 2819) { first = QUEEN; second = TWO; returnstr = "Queens and Deuces"; }
        else if(rank > 2808) { first = QUEEN; second = THREE; returnstr = "Queens and Treys"; }
        else if(rank > 2797) { first = QUEEN; second = FOUR; returnstr = "Queens and Fours"; }
        else if(rank > 2786) { first = QUEEN; second = FIVE; returnstr = "Queens and Fives"; }
        else if(rank > 2775) { first = QUEEN; second = SIX; returnstr = "Queens and Sixes"; }
        else if(rank > 2764) { first = QUEEN; second = SEVEN; returnstr = "Queens and Sevens"; }
        else if(rank > 2753) { first = QUEEN; second = EIGHT; returnstr = "Queens and Eights"; }
        else if(rank > 2742) { first = QUEEN; second = NINE; returnstr = "Queens and Nines"; }
        else if(rank > 2731) { first = QUEEN; second = TEN; returnstr = "Queens and Tens"; }
        else if(rank > 2720) { first = QUEEN; second = JACK; returnstr = "Queens and Jacks"; }
        else if(rank > 2709) { first = KING; second = TWO; returnstr = "Kings and Deuces"; }
        else if(rank > 2698) { first = KING; second = THREE; returnstr = "Kings and Treys"; }
        else if(rank > 2687) { first = KING; second = FOUR; returnstr = "Kings and Fours"; }
        else if(rank > 2676) { first = KING; second = FIVE; returnstr = "Kings and Fives"; }
        else if(rank > 2665) { first = KING; second = SIX; returnstr = "Kings and Sixes"; }
        else if(rank > 2654) { first = KING; second = SEVEN; returnstr = "Kings and Sevens"; }
        else if(rank > 2643) { first = KING; second = EIGHT; returnstr = "Kings and Eights"; }
        else if(rank > 2632) { first = KING; second = NINE; returnstr = "Kings and Nines"; }
        else if(rank > 2621) { first = KING; second = TEN; returnstr = "Kings and Tens"; }
        else if(rank > 2610) { first = KING; second = JACK; returnstr = "Kings and Jacks"; }
        else if(rank > 2599) { first = KING; second = QUEEN; returnstr = "Kings and Queens"; }
        else if(rank > 2588) { first = ACE; second = TWO; returnstr = "Aces and Deuces"; }
        else if(rank > 2577) { first = ACE; second = THREE; returnstr = "Aces and Treys"; }
        else if(rank > 2566) { first = ACE; second = FOUR; returnstr = "Aces and Fours"; }
        else if(rank > 2555) { first = ACE; second = FIVE; returnstr = "Aces and Fives"; }
        else if(rank > 2544) { first = ACE; second = SIX; returnstr = "Aces and Sixes"; }
        else if(rank > 2533) { first = ACE; second = SEVEN; returnstr = "Aces and Sevens"; }
        else if(rank > 2522) { first = ACE; second = EIGHT; returnstr = "Aces and Eights"; }
        else if(rank > 2511) { first = ACE; second = NINE; returnstr = "Aces and Nines"; }
        else if(rank > 2500) { first = ACE; second = TEN; returnstr = "Aces and Tens"; }
        else if(rank > 2489) { first = ACE; second = JACK; returnstr = "Aces and Jacks"; }
        else if(rank > 2478) { first = ACE; second = QUEEN; returnstr = "Aces and Queens"; }
        else if(rank > 2467) { first = ACE; second = KING; returnstr = "Aces and Kings"; }
        else if(rank > 2401) { first = TWO; returnstr = "Three Deuces"; }
        else if(rank > 2335) { first = THREE; returnstr = "Three Treys"; }
        else if(rank > 2269) { first = FOUR; returnstr = "Three Fours"; }
        else if(rank > 2203) { first = FIVE; returnstr = "Three Fives"; }
        else if(rank > 2137) { first = SIX; returnstr = "Three Sixes"; }
        else if(rank > 2071) { first = SEVEN; returnstr = "Three Sevens"; }
        else if(rank > 2005) { first = EIGHT; returnstr = "Three Eights"; }
        else if(rank > 1939) { first = NINE; returnstr = "Three Nines"; }
        else if(rank > 1873) { first = TEN; returnstr = "Three Tens"; }
        else if(rank > 1807) { first = JACK; returnstr = "Three Jacks"; }
        else if(rank > 1741) { first = QUEEN; returnstr = "Three Queens"; }
        else if(rank > 1675) { first = KING; returnstr = "Three Kings"; }
        else if(rank > 1609) { first = ACE; returnstr = "Three Aces"; }
        else if(rank > 1608) { first = FIVE; returnstr = "Five-High Straight"; }
        else if(rank > 1607) { first = SIX; returnstr = "Six-High Straight"; }
        else if(rank > 1606) { first = SEVEN; returnstr = "Seven-High Straight"; }
        else if(rank > 1605) { first = EIGHT; returnstr = "Eight-High Straight"; }
        else if(rank > 1604) { first = NINE; returnstr = "Nine-High Straight"; }
        else if(rank > 1603) { first = TEN; returnstr = "Ten-High Straight"; }
        else if(rank > 1602) { first = JACK; returnstr = "Jack-High Straight"; }
        else if(rank > 1601) { first = QUEEN; returnstr = "Queen-High Straight"; }
        else if(rank > 1600) { first = KING; returnstr = "King-High Straight"; }
        else if(rank > 1599) { first = ACE; returnstr = "Ace-High Straight"; }
        else if(rank > 1595) { first = SEVEN; returnstr = "Seven-High Flush"; }
        else if(rank > 1581) { first = EIGHT; returnstr = "Eight-High Flush"; }
        else if(rank > 1547) { first = NINE; returnstr = "Nine-High Flush"; }
        else if(rank > 1478) { first = TEN; returnstr = "Ten-High Flush"; }
        else if(rank > 1353) { first = JACK; returnstr = "Jack-High Flush"; }
        else if(rank > 1144) { first = QUEEN; returnstr = "Queen-High Flush"; }
        else if(rank > 815) { first = KING; returnstr = "King-High Flush"; }
        else if(rank > 322) { first = ACE; returnstr = "Ace-High Flush"; }
        else if(rank > 321) { first = TWO; second = THREE; returnstr = "Deuces Full over Treys"; }
        else if(rank > 320) { first = TWO; second = FOUR; returnstr = "Deuces Full over Fours"; }
        else if(rank > 319) { first = TWO; second = FIVE; returnstr = "Deuces Full over Fives"; }
        else if(rank > 318) { first = TWO; second = SIX; returnstr = "Deuces Full over Sixes"; }
        else if(rank > 317) { first = TWO; second = SEVEN; returnstr = "Deuces Full over Sevens"; }
        else if(rank > 316) { first = TWO; second = EIGHT; returnstr = "Deuces Full over Eights"; }
        else if(rank > 315) { first = TWO; second = NINE; returnstr = "Deuces Full over Nines"; }
        else if(rank > 314) { first = TWO; second = TEN; returnstr = "Deuces Full over Tens"; }
        else if(rank > 313) { first = TWO; second = JACK; returnstr = "Deuces Full over Jacks"; }
        else if(rank > 312) { first = TWO; second = QUEEN; returnstr = "Deuces Full over Queens"; }
        else if(rank > 311) { first = TWO; second = KING; returnstr = "Deuces Full over Kings"; }
        else if(rank > 310) { first = TWO; second = ACE; returnstr = "Deuces Full over Aces"; }
        else if(rank > 309) { first = THREE; second = TWO; returnstr = "Treys Full over Deuces"; }
        else if(rank > 308) { first = THREE; second = FOUR; returnstr = "Treys Full over Fours"; }
        else if(rank > 307) { first = THREE; second = FIVE; returnstr = "Treys Full over Fives"; }
        else if(rank > 306) { first = THREE; second = SIX; returnstr = "Treys Full over Sixes"; }
        else if(rank > 305) { first = THREE; second = SEVEN; returnstr = "Treys Full over Sevens"; }
        else if(rank > 304) { first = THREE; second = EIGHT; returnstr = "Treys Full over Eights"; }
        else if(rank > 303) { first = THREE; second = NINE; returnstr = "Treys Full over Nines"; }
        else if(rank > 302) { first = THREE; second = TEN; returnstr = "Treys Full over Tens"; }
        else if(rank > 301) { first = THREE; second = JACK; returnstr = "Treys Full over Jacks"; }
        else if(rank > 300) { first = THREE; second = QUEEN; returnstr = "Treys Full over Queens"; }
        else if(rank > 299) { first = THREE; second = KING; returnstr = "Treys Full over Kings"; }
        else if(rank > 298) { first = THREE; second = ACE; returnstr = "Treys Full over Aces"; }
        else if(rank > 297) { first = FOUR; second = TWO; returnstr = "Fours Full over Deuces"; }
        else if(rank > 296) { first = FOUR; second = THREE; returnstr = "Fours Full over Treys"; }
        else if(rank > 295) { first = FOUR; second = FIVE; returnstr = "Fours Full over Fives"; }
        else if(rank > 294) { first = FOUR; second = SIX; returnstr = "Fours Full over Sixes"; }
        else if(rank > 293) { first = FOUR; second = SEVEN; returnstr = "Fours Full over Sevens"; }
        else if(rank > 292) { first = FOUR; second = EIGHT; returnstr = "Fours Full over Eights"; }
        else if(rank > 291) { first = FOUR; second = NINE; returnstr = "Fours Full over Nines"; }
        else if(rank > 290) { first = FOUR; second = TEN; returnstr = "Fours Full over Tens"; }
        else if(rank > 289) { first = FOUR; second = JACK; returnstr = "Fours Full over Jacks"; }
        else if(rank > 288) { first = FOUR; second = QUEEN; returnstr = "Fours Full over Queens"; }
        else if(rank > 287) { first = FOUR; second = KING; returnstr = "Fours Full over Kings"; }
        else if(rank > 286) { first = FOUR; second = ACE; returnstr = "Fours Full over Aces"; }
        else if(rank > 285) { first = FIVE; second = TWO; returnstr = "Fives Full over Deuces"; }
        else if(rank > 284) { first = FIVE; second = THREE; returnstr = "Fives Full over Treys"; }
        else if(rank > 283) { first = FIVE; second = FOUR; returnstr = "Fives Full over Fours"; }
        else if(rank > 282) { first = FIVE; second = SIX; returnstr = "Fives Full over Sixes"; }
        else if(rank > 281) { first = FIVE; second = SEVEN; returnstr = "Fives Full over Sevens"; }
        else if(rank > 280) { first = FIVE; second = EIGHT; returnstr = "Fives Full over Eights"; }
        else if(rank > 279) { first = FIVE; second = NINE; returnstr = "Fives Full over Nines"; }
        else if(rank > 278) { first = FIVE; second = TEN; returnstr = "Fives Full over Tens"; }
        else if(rank > 277) { first = FIVE; second = JACK; returnstr = "Fives Full over Jacks"; }
        else if(rank > 276) { first = FIVE; second = QUEEN; returnstr = "Fives Full over Queens"; }
        else if(rank > 275) { first = FIVE; second = KING; returnstr = "Fives Full over Kings"; }
        else if(rank > 274) { first = FIVE; second = ACE; returnstr = "Fives Full over Aces"; }
        else if(rank > 273) { first = SIX; second = TWO; returnstr = "Sixes Full over Deuces"; }
        else if(rank > 272) { first = SIX; second = THREE; returnstr = "Sixes Full over Treys"; }
        else if(rank > 271) { first = SIX; second = FOUR; returnstr = "Sixes Full over Fours"; }
        else if(rank > 270) { first = SIX; second = FIVE; returnstr = "Sixes Full over Fives"; }
        else if(rank > 269) { first = SIX; second = SEVEN; returnstr = "Sixes Full over Sevens"; }
        else if(rank > 268) { first = SIX; second = EIGHT; returnstr = "Sixes Full over Eights"; }
        else if(rank > 267) { first = SIX; second = NINE; returnstr = "Sixes Full over Nines"; }
        else if(rank > 266) { first = SIX; second = TEN; returnstr = "Sixes Full over Tens"; }
        else if(rank > 265) { first = SIX; second = JACK; returnstr = "Sixes Full over Jacks"; }
        else if(rank > 264) { first = SIX; second = QUEEN; returnstr = "Sixes Full over Queens"; }
        else if(rank > 263) { first = SIX; second = KING; returnstr = "Sixes Full over Kings"; }
        else if(rank > 262) { first = SIX; second = ACE; returnstr = "Sixes Full over Aces"; }
        else if(rank > 261) { first = SEVEN; second = TWO; returnstr = "Sevens Full over Deuces"; }
        else if(rank > 260) { first = SEVEN; second = THREE; returnstr = "Sevens Full over Treys"; }
        else if(rank > 259) { first = SEVEN; second = FOUR; returnstr = "Sevens Full over Fours"; }
        else if(rank > 258) { first = SEVEN; second = FIVE; returnstr = "Sevens Full over Fives"; }
        else if(rank > 257) { first = SEVEN; second = SIX; returnstr = "Sevens Full over Sixes"; }
        else if(rank > 256) { first = SEVEN; second = EIGHT; returnstr = "Sevens Full over Eights"; }
        else if(rank > 255) { first = SEVEN; second = NINE; returnstr = "Sevens Full over Nines"; }
        else if(rank > 254) { first = SEVEN; second = TEN; returnstr = "Sevens Full over Tens"; }
        else if(rank > 253) { first = SEVEN; second = JACK; returnstr = "Sevens Full over Jacks"; }
        else if(rank > 252) { first = SEVEN; second = QUEEN; returnstr = "Sevens Full over Queens"; }
        else if(rank > 251) { first = SEVEN; second = KING; returnstr = "Sevens Full over Kings"; }
        else if(rank > 250) { first = SEVEN; second = ACE; returnstr = "Sevens Full over Aces"; }
        else if(rank > 249) { first = EIGHT; second = TWO; returnstr = "Eights Full over Deuces"; }
        else if(rank > 248) { first = EIGHT; second = THREE; returnstr = "Eights Full over Treys"; }
        else if(rank > 247) { first = EIGHT; second = FOUR; returnstr = "Eights Full over Fours"; }
        else if(rank > 246) { first = EIGHT; second = FIVE; returnstr = "Eights Full over Fives"; }
        else if(rank > 245) { first = EIGHT; second = SIX; returnstr = "Eights Full over Sixes"; }
        else if(rank > 244) { first = EIGHT; second = SEVEN; returnstr = "Eights Full over Sevens"; }
        else if(rank > 243) { first = EIGHT; second = NINE; returnstr = "Eights Full over Nines"; }
        else if(rank > 242) { first = EIGHT; second = TEN; returnstr = "Eights Full over Tens"; }
        else if(rank > 241) { first = EIGHT; second = JACK; returnstr = "Eights Full over Jacks"; }
        else if(rank > 240) { first = EIGHT; second = QUEEN; returnstr = "Eights Full over Queens"; }
        else if(rank > 239) { first = EIGHT; second = KING; returnstr = "Eights Full over Kings"; }
        else if(rank > 238) { first = EIGHT; second = ACE; returnstr = "Eights Full over Aces"; }
        else if(rank > 237) { first = NINE; second = TWO; returnstr = "Nines Full over Deuces"; }
        else if(rank > 236) { first = NINE; second = THREE; returnstr = "Nines Full over Treys"; }
        else if(rank > 235) { first = NINE; second = FOUR; returnstr = "Nines Full over Fours"; }
        else if(rank > 234) { first = NINE; second = FIVE; returnstr = "Nines Full over Fives"; }
        else if(rank > 233) { first = NINE; second = SIX; returnstr = "Nines Full over Sixes"; }
        else if(rank > 232) { first = NINE; second = SEVEN; returnstr = "Nines Full over Sevens"; }
        else if(rank > 231) { first = NINE; second = EIGHT; returnstr = "Nines Full over Eights"; }
        else if(rank > 230) { first = NINE; second = TEN; returnstr = "Nines Full over Tens"; }
        else if(rank > 229) { first = NINE; second = JACK; returnstr = "Nines Full over Jacks"; }
        else if(rank > 228) { first = NINE; second = QUEEN; returnstr = "Nines Full over Queens"; }
        else if(rank > 227) { first = NINE; second = KING; returnstr = "Nines Full over Kings"; }
        else if(rank > 226) { first = NINE; second = ACE; returnstr = "Nines Full over Aces"; }
        else if(rank > 225) { first = TEN; second = TWO; returnstr = "Tens Full over Deuces"; }
        else if(rank > 224) { first = TEN; second = THREE; returnstr = "Tens Full over Treys"; }
        else if(rank > 223) { first = TEN; second = FOUR; returnstr = "Tens Full over Fours"; }
        else if(rank > 222) { first = TEN; second = FIVE; returnstr = "Tens Full over Fives"; }
        else if(rank > 221) { first = TEN; second = SIX; returnstr = "Tens Full over Sixes"; }
        else if(rank > 220) { first = TEN; second = SEVEN; returnstr = "Tens Full over Sevens"; }
        else if(rank > 219) { first = TEN; second = EIGHT; returnstr = "Tens Full over Eights"; }
        else if(rank > 218) { first = TEN; second = NINE; returnstr = "Tens Full over Nines"; }
        else if(rank > 217) { first = TEN; second = JACK; returnstr = "Tens Full over Jacks"; }
        else if(rank > 216) { first = TEN; second = QUEEN; returnstr = "Tens Full over Queens"; }
        else if(rank > 215) { first = TEN; second = KING; returnstr = "Tens Full over Kings"; }
        else if(rank > 214) { first = TEN; second = ACE; returnstr = "Tens Full over Aces"; }
        else if(rank > 213) { first = JACK; second = TWO; returnstr = "Jacks Full over Deuces"; }
        else if(rank > 212) { first = JACK; second = THREE; returnstr = "Jacks Full over Treys"; }
        else if(rank > 211) { first = JACK; second = FOUR; returnstr = "Jacks Full over Fours"; }
        else if(rank > 210) { first = JACK; second = FIVE; returnstr = "Jacks Full over Fives"; }
        else if(rank > 209) { first = JACK; second = SIX; returnstr = "Jacks Full over Sixes"; }
        else if(rank > 208) { first = JACK; second = SEVEN; returnstr = "Jacks Full over Sevens"; }
        else if(rank > 207) { first = JACK; second = EIGHT; returnstr = "Jacks Full over Eights"; }
        else if(rank > 206) { first = JACK; second = NINE; returnstr = "Jacks Full over Nines"; }
        else if(rank > 205) { first = JACK; second = TEN; returnstr = "Jacks Full over Tens"; }
        else if(rank > 204) { first = JACK; second = QUEEN; returnstr = "Jacks Full over Queens"; }
        else if(rank > 203) { first = JACK; second = KING; returnstr = "Jacks Full over Kings"; }
        else if(rank > 202) { first = JACK; second = ACE; returnstr = "Jacks Full over Aces"; }
        else if(rank > 201) { first = QUEEN; second = TWO; returnstr = "Queens Full over Deuces"; }
        else if(rank > 200) { first = QUEEN; second = THREE; returnstr = "Queens Full over Treys"; }
        else if(rank > 199) { first = QUEEN; second = FOUR; returnstr = "Queens Full over Fours"; }
        else if(rank > 198) { first = QUEEN; second = FIVE; returnstr = "Queens Full over Fives"; }
        else if(rank > 197) { first = QUEEN; second = SIX; returnstr = "Queens Full over Sixes"; }
        else if(rank > 196) { first = QUEEN; second = SEVEN; returnstr = "Queens Full over Sevens"; }
        else if(rank > 195) { first = QUEEN; second = EIGHT; returnstr = "Queens Full over Eights"; }
        else if(rank > 194) { first = QUEEN; second = NINE; returnstr = "Queens Full over Nines"; }
        else if(rank > 193) { first = QUEEN; second = TEN; returnstr = "Queens Full over Tens"; }
        else if(rank > 192) { first = QUEEN; second = JACK; returnstr = "Queens Full over Jacks"; }
        else if(rank > 191) { first = QUEEN; second = KING; returnstr = "Queens Full over Kings"; }
        else if(rank > 190) { first = QUEEN; second = ACE; returnstr = "Queens Full over Aces"; }
        else if(rank > 189) { first = KING; second = TWO; returnstr = "Kings Full over Deuces"; }
        else if(rank > 188) { first = KING; second = THREE; returnstr = "Kings Full over Treys"; }
        else if(rank > 187) { first = KING; second = FOUR; returnstr = "Kings Full over Fours"; }
        else if(rank > 186) { first = KING; second = FIVE; returnstr = "Kings Full over Fives"; }
        else if(rank > 185) { first = KING; second = SIX; returnstr = "Kings Full over Sixes"; }
        else if(rank > 184) { first = KING; second = SEVEN; returnstr = "Kings Full over Sevens"; }
        else if(rank > 183) { first = KING; second = EIGHT; returnstr = "Kings Full over Eights"; }
        else if(rank > 182) { first = KING; second = NINE; returnstr = "Kings Full over Nines"; }
        else if(rank > 181) { first = KING; second = TEN; returnstr = "Kings Full over Tens"; }
        else if(rank > 180) { first = KING; second = JACK; returnstr = "Kings Full over Jacks"; }
        else if(rank > 179) { first = KING; second = QUEEN; returnstr = "Kings Full over Queens"; }
        else if(rank > 178) { first = KING; second = ACE; returnstr = "Kings Full over Aces"; }
        else if(rank > 177) { first = ACE; second = TWO; returnstr = "Aces Full over Deuces"; }
        else if(rank > 176) { first = ACE; second = THREE; returnstr = "Aces Full over Treys"; }
        else if(rank > 175) { first = ACE; second = FOUR; returnstr = "Aces Full over Fours"; }
        else if(rank > 174) { first = ACE; second = FIVE; returnstr = "Aces Full over Fives"; }
        else if(rank > 173) { first = ACE; second = SIX; returnstr = "Aces Full over Sixes"; }
        else if(rank > 172) { first = ACE; second = SEVEN; returnstr = "Aces Full over Sevens"; }
        else if(rank > 171) { first = ACE; second = EIGHT; returnstr = "Aces Full over Eights"; }
        else if(rank > 170) { first = ACE; second = NINE; returnstr = "Aces Full over Nines"; }
        else if(rank > 169) { first = ACE; second = TEN; returnstr = "Aces Full over Tens"; }
        else if(rank > 168) { first = ACE; second = JACK; returnstr = "Aces Full over Jacks"; }
        else if(rank > 167) { first = ACE; second = QUEEN; returnstr = "Aces Full over Queens"; }
        else if(rank > 166) { first = ACE; second = KING; returnstr = "Aces Full over Kings"; }
        else if(rank > 154) { first = TWO; returnstr = "Four Deuces"; }
        else if(rank > 142) { first = THREE; returnstr = "Four Treys"; }
        else if(rank > 130) { first = FOUR; returnstr = "Four Fours"; }
        else if(rank > 118) { first = FIVE; returnstr = "Four Fives"; }
        else if(rank > 106) { first = SIX; returnstr = "Four Sixes"; }
        else if(rank > 94) { first = SEVEN; returnstr = "Four Sevens"; }
        else if(rank > 82) { first = EIGHT; returnstr = "Four Eights"; }
        else if(rank > 70) { first = NINE; returnstr = "Four Nines"; }
        else if(rank > 58) { first = TEN; returnstr = "Four Tens"; }
        else if(rank > 46) { first = JACK; returnstr = "Four Jacks"; }
        else if(rank > 34) { first = QUEEN; returnstr = "Four Queens"; }
        else if(rank > 22) { first = KING; returnstr = "Four Kings"; }
        else if(rank > 10) { first = ACE; returnstr = "Four Aces"; }
        else if(rank > 9) { first = FIVE; returnstr = "Five-High Straight Flush"; }
        else if(rank > 8) { first = SIX; returnstr = "Six-High Straight Flush"; }
        else if(rank > 7) { first = SEVEN; returnstr = "Seven-High Straight Flush"; }
        else if(rank > 6) { first = EIGHT; returnstr = "Eight-High Straight Flush"; }
        else if(rank > 5) { first = NINE; returnstr = "Nine-High Straight Flush"; }
        else if(rank > 4) { first = TEN; returnstr = "Ten-High Straight Flush"; }
        else if(rank > 3) { first = JACK; returnstr = "Jack-High Straight Flush"; }
        else if(rank > 2) { first = QUEEN; returnstr = "Queen-High Straight Flush"; }
        else if(rank > 1) { first = KING; returnstr = "King-High Straight Flush"; }
        else if(rank > 0) { first = ACE; returnstr = "Royal Flush"; }
        return returnstr;
}

stock SpielerGeburtstag(playerid)
{
	new year,month,day;
	getdate(year,month,day);
	new string[129];
	new year2 = year-sStats[playerid][sAlter];
	new birthday[30];
	format(string, sizeof(string), "%d.%d.%d", day,month,year2);
	format(birthday ,30,mysql_GetString("accounts", "birthday", "name", GetName(playerid)));
	if(!strcmp(birthday,string,true) && sStats[playerid][sGB] == 0)
	{
	    sStats[playerid][sGB] = 5;
	}
	else if(strcmp(birthday,string,true) && sStats[playerid][sGB] == 1)
	{
 		sStats[playerid][sGB] = 0;
	}
}

//Datenbank erstellen
stock CreateDatenbank()
{
	//Account Datenbank
	print("<-| [MYSQL] Datenbaenke werden erstellt!");
    format(Query, sizeof(Query), "CREATE TABLE IF NOT EXISTS `accounts` (`id` int(11)  AUTO_INCREMENT, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `passwort` varchar(65) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `Name` varchar(24) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `adminlevel` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `geld` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `level` int(11) NOT NULL DEFAULT '1'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `alt` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `job` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `tutorial` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `skin` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `geschlecht` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `mitglied` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `leiter` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `mute` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `haus` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `hause` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `perso` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `spawn` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `premium` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `link` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `eingeloggt` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `premiumtage` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `coins` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `247rob` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `preamie` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `JailTime` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `hotel` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `arbeitslosengeld` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `krankenver` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `autover` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `autos` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `jobtime` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `arztkosten` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `mats` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `spielstunden` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `drogen` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `betrunken` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `geworbenvon` varchar(64) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `quest` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `geworbennach` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `helm` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `driftzeit` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `pklingelton` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `pklingeltonhat` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `fraktion` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `sonnenbrille` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `bap` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `mission` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `missionzeit` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `benzinkanister` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `timeban` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `konto` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `truckschein` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `pin` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `karte` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `mob` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `supportsperre` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `bankraub` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `atmrob` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `reisepass` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `mieter` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `paypoints` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `krankheit` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `drogensamen` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `drogenduenger` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `waffenscheinzeit` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `pkills` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `pdeaths` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `pbpunkte` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `pwaffe` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `drogenwartezeit` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `drogenangebaut` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `drogenzeit` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `rank` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `wohnwagen` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `maske` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `pfand` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `tod` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `bombe` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `fisch` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `detskill` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `wa` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `bizz` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `ppayday` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `dietrich` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `gb` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `exp` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `fspawn` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `lastonline` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `handy` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `accounts` ADD `drogend` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
    print("");
    print("<-| [MYSQL] Tabelle `accounts` wurde erfolgreich erstellt!");
	//Wohnwagen
	format(Query, sizeof(Query), "CREATE TABLE IF NOT EXISTS `wohnwagen` (`id` int(11)  AUTO_INCREMENT, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `inhaber` varchar(24) NOT NULL DEFAULT 'n/A'");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `status` int(11) NOT NULL DEFAULT '0'");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `posx` float(11) NOT NULL DEFAULT '0'");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `posy` float(11) NOT NULL DEFAULT '0'");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `posz` float(11) NOT NULL DEFAULT '0'");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `posa` float(11) NOT NULL DEFAULT '0'");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `farbe1` int(11) NOT NULL DEFAULT '0'");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `farbe2` int(11) NOT NULL DEFAULT '0'");
	mysql_query(Query);
	format(Query, sizeof(Query), "ALTER TABLE `wohnwagen` ADD `tuev` int(11) NOT NUL DEFAULT '0'L");
	mysql_query(Query);
 	print("");
    print("<-| [MYSQL] Tabelle `wohnwagen` wurde erfolgreich erstellt!");
    //Werbeschilder
    format(Query, sizeof(Query), "CREATE TABLE IF NOT EXISTS `werbeschilder` (`id` int(11)  AUTO_INCREMENT, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `werbeschilder` ADD `text` varchar(50) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `werbeschilder` ADD `textt` varchar(50) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
   	print("");
    print("<-| [MYSQL] Tabelle `werbeschilder` wurde erfolgreich erstellt!");
    //Zeitungen
    format(Query, sizeof(Query), "CREATE TABLE IF NOT EXISTS `zeitungen` (`id` int(11)  AUTO_INCREMENT, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=latin1");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `hauptschrift` varchar(20) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `satz1` varchar(20) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `satz2` varchar(20) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `satz3` varchar(20) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `satz4` varchar(20) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `satz5` varchar(20) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `satz6` varchar(20) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `ersteller` varchar(24) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `datum` varchar(30) NOT NULL DEFAULT 'n/A'");
    mysql_query(Query);
    format(Query, sizeof(Query), "ALTER TABLE `zeitungen` ADD `id` int(11) NOT NULL DEFAULT '0'");
    mysql_query(Query);
   	print("");
    print("<-| [MYSQL] Tabelle `zeitungen` wurde erfolgreich erstellt!");
    Datenbank = 1;
    SaveSonstiges();
    //Wenn alle Datenbänke erstellt wurden
    print("");
    print("");
    print("<-| [MYSQL] Alle MYSQL Tabellen wurden erfolgreich erstellt!");
    print("<-| Nemesus.de wuenscht viel Spass mit dem Bayside-Roleplay Gamemode!");
    return 1;
}

//StripNewLine
stock StripNewLinee(line[])
{
	new i;
 	while (line[i] != 0)
 	{
  		if (line[i] == '\r' || line[i] == '\n')
  		{
   			line[i] = 0;
   			break;
  		}
  		i++;
	}
}

//Sccanf
stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
	if (isnull(string))
	#else
	if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
	{
		return format[0];
	}
	#pragma tabsize 4
	new
	formatPos = 0,
	stringPos = 0,
	paramPos = 2,
	paramCount = numargs(),
	delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
				neg = 1,
				num = 0,
				ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
				num = 0,
				ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{

				new changestr[16], changepos = 0, strpos = stringPos;
				while(changepos < 16 && string[strpos] && string[strpos] != delim)
				{
					changestr[changepos++] = string[strpos++];
				}
				changestr[changepos] = '\0';
				setarg(paramPos,0,_:floatstr(changestr));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
				end = formatPos - 1,
				ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
				end = stringPos - 1,
				id = 0,
				bool:num = true,
				ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
					#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
					#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
					name[MAX_PLAYER_NAME];
					id = end - stringPos;
		 			for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
		 			{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
					#undef foreach
					#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
				i = 0,
				ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}

//AntiDeAmx
AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed  (Fist)",
		"Brass K"
	};
	#pragma  unused a
}
